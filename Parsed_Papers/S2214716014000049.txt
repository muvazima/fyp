@&#MAIN-TITLE@&#Atomic routing in a deterministic queuing model

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           New model for atomic dynamic routing games (bottleneck and makespan/sum objective).


                        
                        
                           
                           Polynomial time algorithms for computing maximum and quickest dynamic flows.


                        
                        
                           
                           Greedy-type methods compute Nash equilibria in the dynamic game with sum objective.


                        
                        
                           
                           Dynamic minimum bottleneck flows and ”narrowest paths” are NP-hard to compute.


                        
                        
                           
                           Nash equilibria for bottleneck objective may not exist, test and decision are NP-hard.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

(I) Game theory

(B) Routing

Dynamic atomic unsplittable flows

Equilibria

Optimal solutions

Complexity

@&#ABSTRACT@&#


               
               
                  The issue of selfish routing through a network has received a lot of attention in recent years. We study an atomic dynamic routing scenario, where players allocate resources with load dependent costs only for some limited time.
                  Our paper introduces a natural discrete version of the deterministic queuing model introduced by Koch and Skutella (2011). In this model the time a user needs to traverse an edge  
                        e
                      is given by a constant travel time and the waiting time in a queue at the end of  
                        e
                     . At each discrete time step the first 
                        
                           
                              u
                           
                           
                              e
                           
                        
                       users of the queue proceed to the end vertex of  
                        e
                     , where 
                        
                           
                              u
                           
                           
                              e
                           
                        
                      denotes the capacity of the edge  
                        e
                     . An important aspect of this model is that it ensures the 
                        
                           FIFO
                        
                       property.
                  We study the complexity of central algorithmic questions for this model such as determining an optimal flow in an empty network, an optimal path in a congested network or a maximum dynamic flow and the question whether a given flow is a Nash equilibrium.
                  For the bottleneck case, where the cost of each user is the travel time of the slowest edge on her path, the main results here are mostly bad news. Computing social optima and Nash equilibria turns out to be 
                        
                           NP
                        
                     -complete and the Price of Anarchy is given by the number of users.
                  We also consider the makespan objective (arrival time of the last user) and show that optimal solutions and Nash equilibria in these games, where every user selfishly tries to minimize her travel time, can be found efficiently.
               
            

@&#INTRODUCTION@&#

Routing by independent users in a network can be viewed as a non-cooperative game, where selfish players choose their routes through the network (see e.g.  [1,2]). From the game-theoretic point of view one can expect the routes chosen by the users to form a Nash equilibrium   [3] or a strong equilibrium  [4], which, in general, does not constitute an overall optimal solution (see  [5]). The highest ratio of the social objective of a (strong) Nash equilibrium to the optimal objective is called (strong) Price of Anarchy and gives a measure for the maximum lack of performance that arises due to selfish behaviour (see  [6–8]).

The issue of selfish routing has received a lot of attention in the recent years, from both the theory as well as the networking communities. Most of the work in the literature has been on static routing, where a user induces load on all edges of her path simultaneously. Recently dynamic models have gained more attention (see  [9,10]). Here, each user travels through the network, and at any point in time she only adds load to the edge she is currently using.

We consider a natural discrete version of the deterministic queuing model introduced by Koch and Skutella  [11]. Here, each edge has a constant travel time and a capacity that states the number of users who can leave an edge per time unit, while the others have to wait until the next point in time. The users leave the edge in the same order as they entered it (
                        
                           FIFO
                        
                       property). In the case that multiple users enter the edge at the same time different tie breaking rules are discussed. The goal is to find a flow with minimum travel time. In a game-theoretic context of a dynamic congestion game, each user chooses a path s.t. her personal travel time is minimized.

Most of our work is on bottleneck problems where the cost of a user is the most expensive resource on her path. There are several applications which motivate this model in the dynamic setting (for more applications of bottleneck games we refer to Banner and Orda  [12]).

In the transport of living cargo (livestock) within the European Union there are numerous regulations regarding travel times and resting periods, see  [13]. In particular, there are upper limits for the travel times between two stops. At every stop, livestock need to be fed/watered and inspected. In this setting, the links of the network do not correspond to physical roads but rather to aggregated travel routes between two replenishing points, so that a feeding/watering stop is mandatory after the traversal of every arc. The total time spent on a link, i.e., the constant travel time plus the time in the waiting queue, reflects the (aggregated) travel time, where the waiting time in a queue is due to congestion, e.g. at loading docks. Different types of vehicles have different effects on the congestion. Since for instance in extreme weather livestock suffer during transport and waiting, the bottleneck value on a path through the network can be viewed as an indicator of the risk for the animals. Due to the mandatory stops after every link, in fact the maximum travel time of a link is more appropriate here than the total travel time. Even though the links correspond to aggregated routes, still typical rules of traffic networks such as regulations about the right of way apply (e.g. major roads/minor roads, left-before-right-rule). This motivates the study of local tie-breaking rules when users enter a link simultaneously.

A second application occurs in routing in all-optical networks. Whenever more than one data packet arrives at a network node at the same time and multiple packets are destined for the same output, blocking occurs. In general, packets are processed in a first-in-first-out (
                        
                           FIFO
                        
                     ) matter at every node, but there is also local priority ordering of the input ports associated with the node. Instead of dropping all but one packet, the current state-of-the-art technology uses fibre delay lines (FDLs) to delay the light, where packets circle until they can be forwarded, see e.g.  [14–16]. For more information about all-optical networks we refer to standard textbooks such as  [17]. There is a natural correspondence to waiting in an FDL and users spending time in the waiting queue in our model. The optical information deteriorates both on the links and in the fibre delay lines, but can be regenerated when the packet is finally forwarded. Since optical regeneration components are expensive (and somewhat slow), the FDLs are typically not equipped with this technology. The overall goal of a “good” routing is to minimize the maximum time between two nodes, the bottleneck value.

A related application occurs in (not necessarily all-optical) communication networks. As mentioned in  [12], due to limited size of transmission buffers, there is an interest for the users who are sending data through the network to minimize the utilization of the most utilized buffer in order to avoid deadlocks and reduce packet loss. While Banner and Orda  [12] considered the situation that a user permanently uses capacity on her chosen path, we consider a dynamic setting where this capacity is released once the data has left the link.

In a game-theoretic context, each message is sent by a selfish user who attempts to minimize the bottleneck value only on her path. If information from different edges enter a single node and a single edge with low capacity afterwards tie-breaking rules are needed to decide which user’s information is processed first. In the networks considered here, the purifier acts on the information from one channel after the other and the order of the messages in one channel remains as it was before.

For other applications of (static) bottleneck games we refer to  [12].

@&#RELATED WORK@&#

A deterministic queuing model in the non-atomic case was investigated by Koch and Skutella  [11]. Here, each edge has a constant travel time and a capacity which states the amount of flow that can leave an edge per time unit. They show that Nash flows in dynamic congestion games can be computed as special static flows and give results about the Price of Anarchy. Anshelevich and Ukkusuri  [18] investigate another non-atomic dynamic routing model, where each edge has a flow dependent latency function. They show that in the single-commodity case there is always a Nash equilibrium which can be computed efficiently.

Atomic models with flow dependent latency functions have been investigated by Farzad et al.  [19] and Hoefer et al.  [20]. In the first paper different models for the priorities of the users are discussed and the Price of Anarchy for (weighted) atomic models is computed. The second paper deals with the realistic effect that users delay other users after them. Therefore they introduce different local scheduling policies on the edges and show that the existence and computability of equilibria depends on the policy. For example, they show that the existence of equilibria is not guaranteed for every policy. Even for those, where the computation can always be done in polynomial time, a best-response step may be 
                           
                              NP
                           
                        -hard to compute.

Work stated above deals with sum objective of the users. We mainly consider the bottleneck objective (see e.g.,   [12]). In the static case (even weighted) bottleneck games always have an optimal strong equilibrium, since a potential can be constructed from the bottleneck values of the players (see e.g.  [21,22]). Furthermore, a Nash equilibrium can be computed in polynomial time in many cases. This can be done with a transformation to a minimum cost flow computation w.r.t. effective costs (see  [23]) or by reducing the capacity on the resources with the help of an oracle (e.g., for network games it computes a maximum flow, see  [24]). On the other hand, computing an optimal Nash equilibrium is
                           
                              NP
                           
                        -complete in multi-commodity networks (see  [12]) or for weighted games (see  [25]). The (strong) Price of Anarchy in these games has been investigated by many authors, e.g. by Banner and Orda  [12]; Correa et al.  [26]; Busch and Magdon-Ismail  [27]; and Werth et al.  [28]. In  [12] it is shown that for linear latency functions the value is bounded from above by the number of edges and that this bound is tight, while for non-linear functions the value is unbounded. In  [26] the fairness, i.e., the ratio of the best and the worst objective of a user, is computed, both for congestion and bottleneck games. Busch and Magdon-Ismail  [27] showed that the Price of Anarchy is given by the length of a longest path in the network and in  [28] it is shown that the strong Price of Anarchy in the unweighted case is given by 2.

We discuss an atomic, dynamic routing scenario in the deterministic queuing model for sum and bottleneck objectives. For the bottleneck objective we show that deciding whether a flow or path with a desired bottleneck value exists is 
                           
                              NP
                           
                        -hard for many classes of instances (even for a single-commodity network with unweighted users). Furthermore, there are instances without a Nash equilibrium and the question whether a given strategy profile is a Nash equilibrium or the question whether there is a Nash equilibrium for a given instance are both 
                           
                              NP
                           
                        -hard. Furthermore, we give tight bounds on the (strong) Price of Anarchy for games with bottleneck objective. Specifically, we show that the (strong) Price of Anarchy and the Price of Anarchy are both equal to the number of users. This holds for unweighted and also weighted games, single commodities and acyclic graphs.

We also discuss the sum objective in a single-commodity network with unweighted users. Here, the computation of a maximum flow for a given time horizon and, hence the computation of a flow with minimum travel time can be done in polynomial time. Furthermore, a Nash equilibrium can also be computed efficiently, even in the weighted case under additional constraints (see Table 1
                        ).

Our paper is organized as follows. In Section  2 we formally introduce the deterministic queuing model and show that there are instances without a Nash equilibrium. Sections  3–5 consider the bottleneck case. Section  3 addresses the complexity of socially optimal flows with bottleneck objective. In Section  4 we prove that computing a narrowest path, i.e., a path with minimum bottleneck value in a network where there are already some units of flow routed on given paths, is NP-hard. The construction is used in the subsequent Section  5 to derive results about the hardness of testing a given strategy profile for being a Nash equilibrium. This section also contains a hardness result for the question whether a Nash equilibrium exists for a given instance and our tight bounds on the price of anarchy in dynamic games with bottleneck objective.

In Sections  6 and 7 we investigate the case where the personal cost of each user is the total length of her path. The main result of Section  6 is that a socially optimal flow with respect to the makespan objective can be computed in polynomial time. The efficient computation of equilibria in these games is addressed in Section  7.

The underlying model is similar to the static atomic routing scenario. An instance in the most general form is given by 
                        Γ
                        =
                        
                           [
                           G
                           =
                           
                              (
                              V
                              ,
                              E
                              )
                           
                           ,
                           
                           
                              
                                 
                                    (
                                    
                                       
                                          τ
                                       
                                       
                                          e
                                       
                                    
                                    ,
                                    
                                    
                                       
                                          u
                                       
                                       
                                          e
                                       
                                    
                                    )
                                 
                              
                              
                                 e
                                 ∈
                                 E
                              
                           
                           ,
                           
                           
                              
                                 
                                    (
                                    
                                       
                                          w
                                       
                                       
                                          j
                                       
                                    
                                    )
                                 
                              
                              
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 k
                              
                           
                           ,
                           
                           
                              
                                 
                                    (
                                    
                                       
                                          s
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    
                                    
                                       
                                          t
                                       
                                       
                                          j
                                       
                                    
                                    )
                                 
                              
                              
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 k
                              
                           
                           ]
                        
                     .

Here, 
                        E
                      is the set of 
                        m
                      edges of a directed graph 
                        G
                        =
                        
                           (
                           V
                           ,
                           E
                           )
                        
                        ,
                        V
                      is the set of 
                        n
                      vertices, 
                        k
                      is the number of unsplittable weighted users, 
                        
                           
                              w
                           
                           
                              j
                           
                        
                      is the weight of user 
                        j
                        ∈
                        
                           {
                           1
                           ,
                           …
                           ,
                           k
                           }
                        
                        ,
                        
                           
                              τ
                           
                           
                              e
                           
                        
                      is the constant free travel time and 
                        
                           
                              u
                           
                           
                              e
                           
                        
                      is the capacity of edge 
                        e
                        ∈
                        E
                     . If 
                        
                           
                              w
                           
                           
                              j
                           
                        
                        =
                        1
                      for all users 
                        j
                     , only the number of users 
                        k
                      is stated and the instance is called unweighted in that case. If 
                        
                           
                              s
                           
                           
                              j
                           
                        
                        =
                        s
                      and 
                        
                           
                              t
                           
                           
                              j
                           
                        
                        =
                        t
                      for all 
                        j
                     , it is called a single-commodity instance.

We call a path 
                        P
                      from 
                        
                           
                              s
                           
                           
                              j
                           
                        
                      to 
                        
                           
                              t
                           
                           
                              j
                           
                        
                      feasible for user 
                        j
                      if it is simple and 
                        
                           
                              u
                           
                           
                              e
                           
                        
                        ≥
                        
                           
                              w
                           
                           
                              j
                           
                        
                      for all 
                        e
                        ∈
                        P
                     , i.e., the capacity of each edge on the path is at least the weight of the user. By 
                        
                           
                              P
                           
                           
                              j
                           
                        
                      we denote the feasible paths for player 
                        j
                      (also called her strategies) and by 
                        P
                        =
                        
                           
                              ⋃
                           
                           
                              j
                              =
                              1
                           
                           
                              k
                           
                        
                        
                           
                              P
                           
                           
                              j
                           
                        
                      their union.

A strategy profile 
                     
                        
                           
                              
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                           
                           
                              j
                              =
                              1
                              ,
                              …
                              ,
                              k
                           
                        
                      specifies for every user 
                        j
                      one feasible path 
                        
                           
                              P
                           
                           
                              j
                           
                        
                        ∈
                        
                           
                              P
                           
                           
                              j
                           
                        
                      the user allocates her weight to. We also call such a strategy profile a (dynamic) flow and write 
                        f
                        =
                        
                           
                              
                                 (
                                 
                                    
                                       f
                                    
                                    
                                       
                                          
                                             P
                                          
                                          
                                             j
                                          
                                       
                                    
                                 
                                 )
                              
                           
                           
                              j
                              =
                              1
                              ,
                              …
                              ,
                              k
                           
                        
                      with 
                        
                           
                              f
                           
                           
                              
                                 
                                    P
                                 
                                 
                                    j
                                 
                              
                           
                        
                        =
                        
                           
                              w
                           
                           
                              j
                           
                        
                     . While it may seem that specifying a flow by explicitly giving the path for each of the 
                        k
                       users unnecessarily increases the input size, there are examples showing that this is inevitable in the dynamic model: different path decompositions of a flow specified only on the edges of the network may yield equilibria or not, depending on the particular decomposition.

In this paper we introduce an atomic variant of the deterministic queuing model by Koch and Skutella  [11]: a user 
                        j
                        ∈
                        U
                      who is in a vertex 
                        u
                      at time 
                        t
                      enters the next edge 
                        e
                        =
                        
                           (
                           v
                           ,
                           w
                           )
                        
                      in her path immediately. After the free travel time 
                        
                           
                              τ
                           
                           
                              e
                           
                        
                      she arrives at the end of the edge and is added to a waiting queue 
                        
                           
                              Q
                           
                           
                              e
                           
                        
                     . This is a sorted list of the weights of the users who arrive at the end of edge 
                        e
                      up to time 
                        t
                        +
                        
                           
                              τ
                           
                           
                              e
                           
                        
                     , but do not leave the edge to the next vertex before time 
                        t
                        +
                        
                           
                              τ
                           
                           
                              e
                           
                        
                     . They are stored in the queue 
                        
                           
                              Q
                           
                           
                              e
                           
                        
                      in the same order as they entered it, i.e., if user 
                        i
                      entered edge 
                        e
                      before user 
                        j
                     , then the entry for user 
                        i
                      is ranked higher in the list 
                        
                           
                              Q
                           
                           
                              e
                           
                        
                      than the entry of user 
                        j
                     . In the case of simultaneous arrival we introduce priorities to break the tie (see the paragraph after the travel times).

Every step in time users with a total weight up to the capacity 
                        
                           
                              u
                           
                           
                              e
                           
                        
                      of the edge 
                        e
                      leave the edge to its end vertex 
                        w
                      in the same order as they have been placed in the queue 
                        
                           
                              Q
                           
                           
                              e
                           
                        
                      before. Let the entries (weights of the players) at time 
                        t
                        +
                        
                           
                              τ
                           
                           
                              e
                           
                        
                      be given by 
                        
                           
                              Q
                           
                           
                              e
                           
                        
                        =
                        
                           (
                           
                              
                                 q
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 q
                              
                              
                                 p
                              
                           
                           )
                        
                      and 
                        
                           
                              α
                           
                           
                              1
                           
                        
                        ≤
                        p
                      maximum with 
                        
                           
                              ∑
                           
                           
                              i
                              =
                              1
                           
                           
                              
                                 
                                    α
                                 
                                 
                                    1
                                 
                              
                           
                        
                        
                           
                              q
                           
                           
                              i
                           
                        
                        ≤
                        
                           
                              u
                           
                           
                              e
                           
                        
                     . Then the user corresponding to the first 
                        
                           
                              α
                           
                           
                              1
                           
                        
                      entries from 
                        
                           
                              Q
                           
                           
                              e
                           
                        
                      leaves the queue, and hence, also the edge, at time 
                        t
                        +
                        
                           
                              τ
                           
                           
                              e
                           
                        
                      without further waiting. By removing their entries from the list 
                        
                           
                              Q
                           
                           
                              e
                           
                        
                      and repeating the computation, the time the other users leave the edge can be computed as well. Let 
                        
                           
                              α
                           
                           
                              l
                           
                        
                        ≤
                        p
                      be maximum with 
                        
                           
                              ∑
                           
                           
                              i
                              =
                              
                                 
                                    α
                                 
                                 
                                    l
                                    −
                                    1
                                 
                              
                              +
                              1
                           
                           
                              
                                 
                                    α
                                 
                                 
                                    l
                                 
                              
                           
                        
                        
                           
                              q
                           
                           
                              i
                           
                        
                        ≤
                        
                           
                              u
                           
                           
                              e
                           
                        
                      for 
                        l
                        ≥
                        2
                     . Note that we set 
                        
                           
                              α
                           
                           
                              0
                           
                        
                        =
                        0
                      here. The computation stops when all users from the queue have been considered with an index 
                        r
                      with 
                        
                           
                              α
                           
                           
                              r
                           
                        
                        =
                        p
                     . Let user 
                        j
                      correspond to an entry in the set 
                        
                           {
                           
                              
                                 α
                              
                              
                                 l
                                 −
                                 1
                              
                           
                           +
                           1
                           ,
                           …
                           ,
                           
                              
                                 α
                              
                              
                                 l
                              
                           
                           }
                        
                      for some 
                        l
                        ∈
                        
                           {
                           1
                           ,
                           …
                           ,
                           p
                           }
                        
                     . Then, she leaves edge 
                        e
                      at time 
                        t
                        +
                        
                           
                              τ
                           
                           
                              e
                           
                        
                        +
                        l
                        −
                        1
                     . The waiting time of user 
                        j
                      on edge 
                        e
                      in the flow 
                        f
                      is denoted by 
                        
                           
                              q
                           
                           
                              e
                              ,
                              j
                           
                        
                        
                           (
                           f
                           )
                        
                     . Since she entered edge 
                        e
                      at time 
                        t
                      and the waiting queue at time 
                        t
                        +
                        
                           
                              τ
                           
                           
                              e
                           
                        
                     , her waiting time is given by 
                        
                           
                              q
                           
                           
                              e
                              ,
                              j
                           
                        
                        
                           (
                           f
                           )
                        
                        =
                        l
                        −
                        1
                     . In the unweighted case the situation is even easier. Since each weight is equal to 1, the 
                        
                           
                              α
                           
                           
                              l
                           
                        
                      are given by integer multiples of the capacity 
                        
                           
                              u
                           
                           
                              e
                           
                        
                     , i.e.,  
                        
                           
                              α
                           
                           
                              l
                           
                        
                        =
                        l
                        
                        
                           
                              u
                           
                           
                              e
                           
                        
                     . Then the waiting time of user 
                        j
                      is given by 
                        
                           
                              q
                           
                           
                              e
                              ,
                              j
                           
                        
                        
                           (
                           f
                           )
                        
                        =
                        
                           ⌊
                           
                              
                                 
                                    
                                       π
                                    
                                    
                                       j
                                    
                                 
                                 −
                                 1
                              
                              
                                 
                                    
                                       u
                                    
                                    
                                       e
                                    
                                 
                              
                           
                           ⌋
                        
                     .

The latency (or travel time) of user 
                        j
                      on edge 
                        e
                      is defined as the free travel time plus the waiting time, i.e., it is given by 
                        
                           
                              ℓ
                           
                           
                              e
                              ,
                              j
                           
                        
                        
                           (
                           f
                           )
                        
                        =
                        
                           
                              τ
                           
                           
                              e
                           
                        
                        +
                        
                           
                              q
                           
                           
                              e
                              ,
                              j
                           
                        
                        
                           (
                           f
                           )
                        
                     .

We assume that the free travel times 
                        
                           
                              τ
                           
                           
                              e
                           
                        
                      are integral. This assumption is needed for games with bottleneck objective, since otherwise equilibria may not exist even in simple extension-parallel graphs. Furthermore, waiting in the vertices is not allowed in this model as discussed in the Introduction.

While in the non-atomic case the above conditions are enough to characterize the model (see  [11]), the situation in the atomic case is more involved. If two users arrive at an edge at the same time it is not a priori clear in which order they enter the edge. This is in particular important if the capacity of the edge is smaller than the sum of the weights of the users entering it. In order to resolve this issue we discuss two tie-breaking rules in this paper. In case of a tie, the user with better priority is placed on a higher position in the waiting queue. Note that better priority always means a smaller number for the priority.

The first rule assigns a global priority 
                        
                           
                              π
                           
                           
                              j
                           
                           
                              ′
                           
                        
                        
                           (
                           e
                           )
                        
                        =
                        j
                      to each user 
                        j
                        ∈
                        
                           {
                           1
                           ,
                           …
                           ,
                           k
                           }
                        
                      on every edge 
                        e
                        ∈
                        
                           
                              P
                           
                           
                              j
                           
                        
                     . In case of simultaneous arrival the user with better priority is always processed first. This rule is the natural choice used for congestion games (see the literature, e.g.,   [19]).

The other rule assigns a priority to each edge entering a vertex and, in the case of simultaneous arrival, the users from the edge with better priority are processed before the other users. The ordering between the users on the same edge is carried over from the previous edge they traversed, and, at a source vertex, which lacks ingoing edges, the users receive a starting priority. More precisely, for all edges 
                        e
                      entering a vertex 
                        v
                      we have a local priority 
                        
                           
                              π
                           
                           
                              ′
                           
                        
                        
                           (
                           e
                           )
                        
                     . Additionally, we introduce a starting priority 
                        
                           
                              π
                           
                           
                              j
                           
                           
                              ′
                           
                        
                        =
                        j
                      to all users 
                        j
                        ∈
                        U
                      for the source vertex. With these two values the current priority 
                        
                           
                              π
                           
                           
                              j
                           
                           
                              ′
                           
                        
                        
                           (
                           e
                           )
                        
                      for user 
                        j
                      on edge 
                        e
                        ∈
                        
                           
                              P
                           
                           
                              j
                           
                        
                      can be computed. Consider two users 
                        i
                      and 
                        j
                      who enter an edge 
                        e
                      at the same time. Then the current priority 
                        
                           
                              π
                           
                           
                              i
                           
                           
                              ′
                           
                        
                        
                           (
                           e
                           )
                        
                      of user 
                        i
                      is better than the current priority 
                        
                           
                              π
                           
                           
                              j
                           
                           
                              ′
                           
                        
                        
                           (
                           e
                           )
                        
                      of user 
                        j
                      iff one of the following cases holds true: 
                        
                           (1)
                           both users enter edge 
                                 e
                               after leaving different edges 
                                 
                                    
                                       e
                                    
                                    
                                       i
                                    
                                 
                               and 
                                 
                                    
                                       e
                                    
                                    
                                       j
                                    
                                 
                              , and the priority of the edge 
                                 
                                    
                                       e
                                    
                                    
                                       i
                                    
                                 
                               of user 
                                 i
                               is better than the priority of the edge 
                                 
                                    
                                       e
                                    
                                    
                                       j
                                    
                                 
                               of user 
                                 j
                              , i.e.,  
                                 
                                    
                                       π
                                    
                                    
                                       ′
                                    
                                 
                                 
                                    (
                                    
                                       
                                          e
                                       
                                       
                                          i
                                       
                                    
                                    )
                                 
                                 <
                                 
                                    
                                       π
                                    
                                    
                                       ′
                                    
                                 
                                 
                                    (
                                    
                                       
                                          e
                                       
                                       
                                          j
                                       
                                    
                                    )
                                 
                              .

both users enter edge 
                                 e
                               from the same edge 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               and user 
                                 i
                               entered that edge before user 
                                 j
                               or, if they entered the edge 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               at the same time, the priority of user 
                                 i
                               on that edge is better than the priority of user 
                                 j
                              , i.e.,  
                                 
                                    
                                       π
                                    
                                    
                                       i
                                    
                                    
                                       ′
                                    
                                 
                                 
                                    (
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                 
                                 <
                                 
                                    
                                       π
                                    
                                    
                                       j
                                    
                                    
                                       ′
                                    
                                 
                                 
                                    (
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                 
                              .

both users enter edge 
                                 e
                               from the source vertex 
                                 s
                              , and the starting priority of user 
                                 i
                               is better than the starting priority of user 
                                 j
                              , i.e.,  
                                 
                                    
                                       π
                                    
                                    
                                       i
                                    
                                    
                                       ′
                                    
                                 
                                 <
                                 
                                    
                                       π
                                    
                                    
                                       j
                                    
                                    
                                       ′
                                    
                                 
                              .

We discuss two objectives in this paper. In a game with sum objective (as in congestion games) the personal cost user 
                        j
                      wants to minimize is her total travel time 
                     
                        
                           
                              T
                           
                           
                              j
                           
                        
                        
                           (
                           f
                           )
                        
                        =
                        
                           
                              ∑
                           
                           
                              e
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    j
                                 
                              
                           
                        
                        
                           
                              ℓ
                           
                           
                              e
                              ,
                              j
                           
                        
                        
                           (
                           f
                           )
                        
                     , i.e., the sum of the latency values of all edges in her path 
                        
                           
                              P
                           
                           
                              j
                           
                        
                     . As a social objective we consider the makespan of the strategy profile, 
                        T
                        
                           (
                           f
                           )
                        
                        =
                        
                           
                              max
                           
                           
                              j
                              =
                              1
                              ,
                              …
                              ,
                              k
                           
                        
                        
                           
                              T
                           
                           
                              j
                           
                        
                        
                           (
                           f
                           )
                        
                     , i.e., the highest travel time of all users. We refer to these games as dynamic routing games with sum objective in the deterministic queuing model and write in short as only game with sum objective.

In a game with bottleneck objective (as in bottleneck games) the personal cost user 
                        j
                      wants to minimize is her bottleneck value 
                     
                        
                           
                              b
                           
                           
                              j
                           
                        
                        
                           (
                           f
                           )
                        
                        =
                        max
                        
                           {
                           
                              
                                 ℓ
                              
                              
                                 e
                                 ,
                                 j
                              
                           
                           
                              (
                              f
                              )
                           
                           ∣
                           e
                           ∈
                           
                              
                                 P
                              
                              
                                 j
                              
                           
                           }
                        
                     , i.e., the highest latency value of all edges in her path 
                        
                           
                              P
                           
                           
                              j
                           
                        
                     , while we choose the social objective to be the bottleneck of the game defined as 
                        b
                        
                           (
                           f
                           )
                        
                        =
                        
                           
                              max
                           
                           
                              j
                              =
                              1
                              ,
                              …
                              ,
                              k
                           
                        
                        
                           
                              b
                           
                           
                              j
                           
                        
                        
                           (
                           f
                           )
                        
                     , i.e., the highest bottleneck value of all users. We refer to these games as dynamic routing games with bottleneck objective in the deterministic queuing model and write in short as only game with bottleneck objective.

If not stated otherwise, in games with sum objective the global tie-breaking rule is applied, which assigns priorities to the users. In games with bottleneck objective the local tie-breaking rule is applied, which assigns additional priorities to the edges. Most results for games with bottleneck objective hold true for the global tie-breaking rule, too. This is discussed in more detail later on.

We discuss two solution concepts in this paper, optimum solutions and equilibria. A strategy profile with minimal social objective is called an optimal strategy profile and the optimal objective value is denoted by 
                        
                           opt
                        
                        
                           (
                           Γ
                           )
                        
                     .

A coalition of users 
                        C
                        ⊆
                        
                           {
                           1
                           ,
                           …
                           ,
                           k
                           }
                        
                      is satisfied with their strategies, if not all of them can improve their personal objective values by changing their strategies simultaneously. When all single users, i.e., coalitions of size 1, are satisfied with their strategies, the strategy profile is called a Nash equilibrium (NE). If even all coalitions of users are satisfied with their strategies, then the strategy profile is called a strong equilibrium (SE).

First we illustrate the deterministic queuing model with an example of a routing game with bottleneck objective. 
                        Example 1
                        Consider the graph 
                              G
                              =
                              
                                 (
                                 V
                                 ,
                                 E
                                 )
                              
                            from Fig. 1
                             with 
                              k
                              =
                              4
                            weighted users and the travel times and capacities as given near the edges in the picture. As for all games with bottleneck objective in this paper we use the local definition of the priorities for the users as defined above. To that end, the starting priorities of the users are given by the small indices to the weights of the users and the priorities of ingoing edges to vertex 
                              v
                            are indicated with small letters (where (a) denotes the better priority than (b)). Note that the same instance without the priorities for the edges also defines an instance of a game with sum objective in our setting.

Users 1 and 2 with weight 2 travel along the lower path and users 3 and 4 with weight 1 along the upper path. At time 1 the users from the upper edge arrive at the end of the first edge. Since the capacity of that edge is 1, only one of the users is allowed to leave the edge to the vertex 
                              v
                           . This is user 3, since she has a higher starting priority than user 4, who has to wait for the next point in time. More formally, the set of users in the waiting queue 
                              Q
                              =
                              
                                 (
                                 
                                    
                                       1
                                    
                                    
                                       3
                                    
                                 
                                 ,
                                 
                                    
                                       1
                                    
                                    
                                       4
                                    
                                 
                                 )
                              
                            are separated in subsets of weight up to 1, i.e., in the two lists 
                              
                                 
                                    Q
                                 
                                 
                                    1
                                 
                              
                              =
                              
                                 (
                                 
                                    
                                       1
                                    
                                    
                                       3
                                    
                                 
                                 )
                              
                            and 
                              
                                 
                                    Q
                                 
                                 
                                    2
                                 
                              
                              =
                              
                                 (
                                 
                                    
                                       1
                                    
                                    
                                       4
                                    
                                 
                                 )
                              
                           , where the users from the first one are allowed to leave the edge. The other two users are still travelling along the lower edge.

At time 2 user 3 already arrives at the terminal 
                              t
                            and user 4 leaves her edge towards vertex 
                              v
                           . Users 1 and 2 arrive at the end of the lower edge and line up in the queue. Here, user 1 is placed before user 2, since she had a higher priority at the source vertex. Then, both users leave the edge towards vertex 
                              v
                           , since the capacity of the edge is large enough for both users. So, users 1, 2 and 4 enter the last edge at the same time and traverse it with travel time 1.

At time 3 the users arrive at the end of the edge and line up in the waiting queue. Since the lower edge has a better priority than the upper edge entering vertex 
                              v
                           , the users from the lower edge are placed before user 4 in the queue. Furthermore, user 1 is placed before user 2, since they entered from the same edge and user 1 was placed before user 2 on the previous edge. Since the capacity of the edge is 3 and overtaking is not allowed, the queue 
                              Q
                              =
                              
                                 (
                                 
                                    
                                       2
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       2
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 
                                    
                                       1
                                    
                                    
                                       4
                                    
                                 
                                 )
                              
                            is separated into 
                              
                                 
                                    Q
                                 
                                 
                                    1
                                 
                              
                              =
                              
                                 (
                                 
                                    
                                       2
                                    
                                    
                                       1
                                    
                                 
                                 )
                              
                            and 
                              
                                 
                                    Q
                                 
                                 
                                    2
                                 
                              
                              =
                              
                                 (
                                 
                                    
                                       2
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 
                                    
                                       1
                                    
                                    
                                       4
                                    
                                 
                                 )
                              
                           . So, user 1 arrives at the terminal at time 3 and users 2 and 4 have to wait until time 4.

Note that the same instance can also be investigated for a game with sum objective. Here, we always use another tie-breaking rule with global priorities for the users and ignore the priorities given at the end of the edges. For the priorities chosen in this example the resulting flow is exactly the same. But, if users 3 and 4 had the best starting priorities, then the last one of these two would enter the terminal before the two heavier users.⊲

In the next example we show that, in contrast to static games, the existence of a Nash equilibrium in a dynamic routing game with bottleneck objective is not ensured. 
                        Example 2
                        Consider the graph 
                              G
                              =
                              
                                 (
                                 V
                                 ,
                                 E
                                 )
                              
                            from Fig. 2
                            with 
                              k
                              =
                              4
                            unweighted users and the travel times as given in the picture near the edges, where 
                              A
                              ≥
                              4
                            as an instance of a game with bottleneck objective. All capacities are set to one and the priorities of ingoing edges are indicated with small letters. Commodities are denoted by 
                              
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                            for user 
                              i
                              ∈
                              
                                 {
                                 1
                                 ,
                                 2
                                 ,
                                 3
                                 ,
                                 4
                                 }
                              
                            with priority 
                              i
                           .

Note that users from commodities 3 and 4 do not have a choice on which route to take. Their purpose is slowing of the other users. So they are called blocking users. The users from commodities 1 and 2 have two choices each, because the outer paths have a bottleneck value of 
                              A
                              +
                              1
                           , which is not acceptable as we see later on. Then there are four strategy profiles left that are drawn as graphs in the right of Fig. 2.

Whenever both (normal) users choose their left paths (upper left strategy profile), then the lower user arrives at her second vertex (filled) at the same time as the left blocking user. Since the path of the blocking users has an inferior priority, the blocking user is slowed down by one time unit. This is enough to reach the third vertex of the upper user at the same time as the user from commodity 1 does. Since the blocking users edge has a higher priority, the upper user has to wait one time unit, which results in a bottleneck value of 
                              A
                              +
                              1
                            on that edge. Hence, she changes to the right path (upper right strategy profile). Here, the blocking user arrives after her at the third vertex and hence she arrives at vertex 
                              v
                            with bottleneck value 
                              A
                           . At this point her edge has a higher priority than the edge of the lower user who arrives at the same time. Hence, the lower user has to wait and gets a bottleneck value of 
                              A
                              +
                              1
                           . So, also the lower user changes her strategy to the right one (lower right strategy profile), which results in the same case as when both users took the left paths. Hence, there is no Nash equilibrium for this instance.⊲

The above example also shows that even for an instance with a single commodity a best-response dynamics may follow the cycle, and hence it is not guaranteed to find a Nash equilibrium in every case: if one adds a super source and a super terminal to the sources and sinks of the example respectively and one starts with the initial configuration of users as in one of the figures from 2, a best-response dynamics may follow the cycle and, hence, does not terminate.

A crucial point in the last example was the fact that one user could delay another user and be delayed herself by that user later on. This situation was caused by the fact that one time the priority of the edge from which the first user entered a vertex had higher priority than the edge from which the second user entered the same vertex and for another vertex the situation was the other way round. So, the question arises whether for global priorities of the users of such a situation can be avoided.

In the next example we illustrate that also for the tie-breaking rule with global priorities the same situation can occur. This can happen in the multi-commodity case or if a subset of the users routes on somehow fixed paths, since we need additional users to delay some of the main users. 
                        Example 3
                        Consider the graphs from Fig. 3
                            with unweighted users and the travel times as given near the edges in the picture as an instance for a routing game. All capacities are set to 1. For the left instance we use the local tie-breaking rule with priorities on the edges and for the right instance the global tie-breaking rule with global priorities for the users. For both instances we have two main users, and for the right one we have an additional auxiliary user.

In the left picture both main users arrive at vertex 
                              u
                            at the same time 2. Since user 2 enters the vertex from an edge with better priority, she is placed before user 1 on the upcoming edge and hence also enters vertex 
                              v
                            before user 1, since all capacities are set to 1. Then user 2 chooses the longer edge towards vertex 
                              w
                           . Therefore, both users arrive at the end of vertex 
                              
                                 (
                                 w
                                 ,
                                 t
                                 )
                              
                            at the same time. Since user 1 enters vertex 
                              w
                            from an edge with better priority here, she is placed before user 2 on the upcoming edge and hence also enters the terminal 
                              t
                            before user 2. In total, each user delays the other user once.

In the right picture there is an additional auxiliary user. Main user 2 arrives at vertex 
                              u
                            at the same time (1) as the auxiliary user. Since she has the better priority, she is placed before the auxiliary user on the upcoming edge and hence also enters vertex 
                              v
                            before the auxiliary user, who has to wait in the waiting queue until the next point in time. At time 2 main user 1 also enters the queue, but since she entered later than the auxiliary user she is placed in the queue after her (although she has a better priority). So, she arrives at vertex 
                              v
                            at time 4. Afterwards, as in the left instance, both main users arrive at vertex 
                              w
                            at the same time. Since main user 1 has a better priority than main user 2 in such a case, she is placed before main user 2 on the upcoming edge and hence also enters the terminal 
                              t
                            before main user 2. In total, each of the main users delays the other main user once.⊲

Applying the same technique of adding additional users to the instance from Example 2 shows that the existence of a Nash equilibrium in a dynamic routing game with bottleneck objective is also not ensured for global priorities.

In this section we show that finding a flow with minimum bottleneck value, i.e., a social optimum in a game with bottleneck objective, is hard in general. This is shown for different scenarios: in the multi-commodity case, even if the graph is acyclic and the users are unweighted, in a general graph, even if it has only a single commodity and the users are unweighted and for weighted users, even on a graph consisting of parallel links. 
                        Definition 1
                        
                           
                              
                                 NarrowestFlow
                              
                             Problem


                        
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             Input:
                                          
                                          Instance 
                                                Γ
                                                =
                                                
                                                   [
                                                   G
                                                   =
                                                   
                                                      (
                                                      V
                                                      ,
                                                      E
                                                      )
                                                   
                                                   ,
                                                   
                                                   
                                                      
                                                         
                                                            (
                                                            
                                                               
                                                                  τ
                                                               
                                                               
                                                                  e
                                                               
                                                            
                                                            ,
                                                            
                                                            
                                                               
                                                                  u
                                                               
                                                               
                                                                  e
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         e
                                                         ∈
                                                         E
                                                      
                                                   
                                                   ,
                                                   
                                                   k
                                                   ,
                                                   
                                                   
                                                      
                                                         
                                                            (
                                                            
                                                               
                                                                  s
                                                               
                                                               
                                                                  j
                                                               
                                                            
                                                            ,
                                                            
                                                            
                                                               
                                                                  t
                                                               
                                                               
                                                                  j
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         j
                                                         =
                                                         1
                                                         ,
                                                         …
                                                         ,
                                                         k
                                                      
                                                   
                                                   ]
                                                
                                              and a bound 
                                                b
                                             .
                                       
                                       
                                          
                                             Question:
                                          
                                          Is there a feasible flow 
                                                f
                                                =
                                                
                                                   
                                                      
                                                         (
                                                         
                                                            
                                                               f
                                                            
                                                            
                                                               
                                                                  
                                                                     P
                                                                  
                                                                  
                                                                     j
                                                                  
                                                               
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                   
                                                      j
                                                      =
                                                      1
                                                      ,
                                                      …
                                                      ,
                                                      k
                                                   
                                                
                                              for that instance with bottleneck value smaller or equal to 
                                                b
                                             ?
                                       
                                    
                                 
                              
                           
                        


                     
                        Theorem 1
                        
                           
                              
                                 NarrowestFlow
                              
                              is 
                           
                              
                                 NP
                              
                           
                           -complete in the strong sense in the two-commodity case, even if the graph is acyclic.
                        


                     
                        Proof
                        The proof uses a reduction from the 
                              3
                              
                                 -SAT
                              
                             problem as in  [29]. Recall that an instance of 
                              3
                              
                                 -SAT
                              
                             is given by a set of Boolean variables 
                              X
                              =
                              
                                 {
                                 
                                    
                                       x
                                    
                                    
                                       0
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       η
                                       −
                                       1
                                    
                                 
                                 }
                              
                           , and 
                              ρ
                            clauses 
                              
                                 
                                    
                                       (
                                       
                                          
                                             C
                                          
                                          
                                             j
                                          
                                       
                                       )
                                    
                                 
                                 
                                    j
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    ρ
                                 
                              
                            containing exactly three literals (variables or their negations). The question is whether there is a truth assignment 
                              T
                              :
                              X
                              →
                              
                                 {
                                 0
                                 ,
                                 1
                                 }
                              
                            s.t. any clause 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                            contains at least one literal which is true. In the sequel we denote by 
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                              
                              ∈
                              
                                 {
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ̄
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 }
                              
                            a literal involving the variable 
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                           , and we extend an arbitrary truth assignment 
                              T
                              :
                              X
                              →
                              
                                 {
                                 0
                                 ,
                                 1
                                 }
                              
                            in the standard way to the negated literals by setting 
                              T
                              
                                 (
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ̄
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                              ≔
                              0
                            if 
                              T
                              
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                              =
                              1
                            and 
                              T
                              
                                 (
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ̄
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                              ≔
                              1
                            if 
                              T
                              
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                              =
                              0
                           .

We now construct an instance of 
                              
                                 NarrowestFlow
                              
                             in such a way that there is a flow with bottleneck value equal to 1 iff there is a 
                              
                                 Yes
                              
                           -answer for 
                              3
                              
                                 -SAT
                              
                           .

For each literal vertex 
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                            there is a gadget as illustrated in the left part of Fig. 4
                            containing of a source vertex 
                              
                                 
                                    v
                                 
                                 
                                    s
                                 
                                 
                                    i
                                 
                              
                            and a terminal vertex 
                              
                                 
                                    v
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                           , which are connected by two disjoint paths 
                              
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       2
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       2
                                       
                                          
                                             p
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                            and 
                              
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          
                                             v
                                          
                                          ¯
                                       
                                    
                                    
                                       1
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          
                                             v
                                          
                                          ¯
                                       
                                    
                                    
                                       2
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       
                                          
                                             v
                                          
                                          ¯
                                       
                                    
                                    
                                       2
                                       
                                          
                                             p
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                           . Here, 
                              
                                 
                                    p
                                 
                                 
                                    i
                                 
                              
                            is the number of occurrences of the variable 
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                            in the clauses and 
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                              
                            is the number of occurrences of the negated variable 
                              
                                 
                                    
                                       
                                          x
                                       
                                       ¯
                                    
                                 
                                 
                                    i
                                 
                              
                            in the clauses. We denote by 
                              θ
                              =
                              max
                              
                                 {
                                 
                                    
                                       p
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 }
                              
                            and set 
                              T
                              =
                              η
                              θ
                              +
                              1
                           . The travel time from 
                              
                                 
                                    v
                                 
                                 
                                    2
                                    
                                       
                                          p
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                            to 
                              
                                 
                                    v
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                            is given by 
                              θ
                              −
                              2
                              
                                 
                                    p
                                 
                                 
                                    i
                                 
                              
                              −
                              1
                            and the travel time from 
                              
                                 
                                    
                                       
                                          v
                                       
                                       ¯
                                    
                                 
                                 
                                    2
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                            to 
                              
                                 
                                    v
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                            is given by 
                              θ
                              −
                              2
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                              
                              −
                              1
                           . All other travel times in these two paths and all capacities are set to 1.

Furthermore, there are two commodities: 
                              
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       1
                                    
                                 
                                 )
                              
                            with one user and 
                              
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       2
                                    
                                 
                                 )
                              
                            with 
                              ρ
                            users. Their actual priorities are not important for this proof. The first source vertex 
                              
                                 
                                    s
                                 
                                 
                                    1
                                 
                              
                            is connected via an edge with travel time 1 to vertex 
                              
                                 
                                    v
                                 
                                 
                                    s
                                 
                                 
                                    0
                                 
                              
                            in the first gadget (the one of variable 
                              
                                 
                                    x
                                 
                                 
                                    0
                                 
                              
                           ). The gadget of variable 
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                            is connected to the gadget of variable 
                              
                                 
                                    x
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                            for all 
                              i
                              ∈
                              
                                 {
                                 0
                                 ,
                                 …
                                 ,
                                 η
                                 −
                                 2
                                 }
                              
                           . This is done with an edge from vertex 
                              
                                 
                                    v
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                            in gadget 
                              i
                            to vertex 
                              
                                 
                                    v
                                 
                                 
                                    s
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                            in gadget 
                              i
                              +
                              1
                            with travel time 1. The last gadget is connected to the terminal with an edge from vertex 
                              
                                 
                                    v
                                 
                                 
                                    t
                                 
                                 
                                    η
                                    −
                                    1
                                 
                              
                            to the terminal vertex 
                              
                                 
                                    t
                                 
                                 
                                    1
                                 
                              
                           . In total we have 
                              k
                              =
                              1
                              +
                              ρ
                            unweighted users.

For each clause 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                            there is a clause vertex 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                           . From each of these vertices there is an edge to the second terminal vertex 
                              
                                 
                                    t
                                 
                                 
                                    2
                                 
                              
                           . The second source vertex 
                              
                                 
                                    s
                                 
                                 
                                    2
                                 
                              
                            is connected to vertex 
                              
                                 
                                    v
                                 
                                 
                                    2
                                    l
                                    −
                                    1
                                 
                                 
                                    i
                                 
                              
                            for 
                              l
                              ∈
                              
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       p
                                    
                                    
                                       i
                                    
                                 
                                 }
                              
                            in gadget 
                              i
                              ∈
                              
                                 {
                                 0
                                 ,
                                 …
                                 ,
                                 η
                                 −
                                 1
                                 }
                              
                            with an edge with travel time 
                              i
                              θ
                              +
                              l
                              +
                              1
                           . The vertex 
                              
                                 
                                    v
                                 
                                 
                                    2
                                    l
                                 
                                 
                                    i
                                 
                              
                            for 
                              l
                              ∈
                              
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       p
                                    
                                    
                                       i
                                    
                                 
                                 }
                              
                            in each gadget 
                              i
                              ∈
                              
                                 {
                                 0
                                 ,
                                 …
                                 ,
                                 η
                                 −
                                 1
                                 }
                              
                            is connected to the 
                              l
                           th clause vertex that contains the literal 
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                            via an edge with travel time 
                              T
                              −
                              i
                              θ
                              −
                              l
                              −
                              3
                           .

The actual priorities of the edges are also not important for the reduction, so they are chosen arbitrarily. Note that for the current proof we need to replace all edges with travel time greater than 1 by a path of consecutive edges with travel times equal to 1 and the same total length. It is not stated that way directly, since we will reuse the construction later on without this restriction for the makespan objective. The whole reduction is illustrated in the bottom part of Fig. 4.

Note that the first user arrives at vertex 
                              
                                 
                                    v
                                 
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                            at time 
                              i
                              θ
                              +
                              l
                              +
                              1
                           , if she is not slowed down by one of the other users before. Furthermore, a user from the second commodity traversing vertex 
                              
                                 
                                    v
                                 
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                            arrives there at the same time. Hence, if both users traverse the same vertex, one of them is slowed down by one time unit. In the absence of the users from the second commodity, the first user arrives at her terminal vertex 
                              
                                 
                                    t
                                 
                                 
                                    1
                                 
                              
                            at time 
                              η
                              θ
                              +
                              1
                              =
                              T
                           . In the absence of the other users, a single user from the second commodity traversing a shortest path arrives at the clause vertex she traverses at time 
                              i
                              θ
                              +
                              l
                              +
                              1
                              +
                              1
                              +
                              T
                              −
                              i
                              θ
                              −
                              l
                              −
                              3
                              =
                              T
                              −
                              1
                            and at her terminal vertex 
                              
                                 
                                    t
                                 
                                 
                                    2
                                 
                              
                            at time 
                              T
                           .

In a flow with bottleneck value ≤1, the edges connecting the gadgets can only be used by the first user. Hence, any user from the second commodity can only traverse a single gadget. Since every clause is connected to the second terminal vertex 
                              
                                 
                                    t
                                 
                                 
                                    2
                                 
                              
                            by a single edge and a total amount of 
                              ρ
                            users have to be routed for the second commodity, a flow with bottleneck value ≤1 has to route a single unit of flow along each clause vertex. Furthermore, no user in this flow can be slowed down by another user, since every path has capacity 1, free travel time 
                              T
                            and all users traversing a subpath of the path arrive at the common vertices at the same time.

With these observations it is easy to show that there is a flow with bottleneck value equal to 1 iff there is a feasible truth assignment.

Let 
                              f
                            be a feasible flow with bottleneck value 1. Then, a single unit of flow routes from 
                              
                                 
                                    s
                                 
                                 
                                    1
                                 
                              
                            to 
                              
                                 
                                    t
                                 
                                 
                                    1
                                 
                              
                            without meeting another user. We set the variable 
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                            to true if this unit routes in the 
                              i
                           th gadget along the lower path and we set the variable 
                              
                                 
                                    x
                                 
                                 
                                    j
                                 
                              
                            to false if it routes in the 
                              j
                           th gadget along the upper path. Then the users from the second commodity route along the vertices from the upper path in gadget 
                              i
                            and along vertices from the lower path in gadget 
                              j
                           . From these vertices one unit of flow is routed to each of the clause vertices and afterwards to the sink. Since at least one vertex in the path of a gadget of the corresponding variable is connected to a clause it is contained in any clause there is one vertex that is set to true by the flow. So, the flow induces a truth assignment.

On the other hand, given a truth assignment, we route the user from the first commodity in the 
                              i
                           th gadget along the lower path if the variable 
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                            in the truth assignment is true and we route the user in the 
                              j
                           th gadget along the upper path if the variable 
                              
                                 
                                    x
                                 
                                 
                                    j
                                 
                              
                            is false. At least one vertex in the path of a gadget of the corresponding variable is connected to a clause it is contained in. Additionally, in any clause there is one variable that is set to true. Hence, for the second commodity we route one unit of flow towards each clause vertex to which no unit of flow from the second commodity was already routed to. It is sent on a shortest path along a vertex in the upper path of gadget 
                              i
                            or in the lower path of gadget 
                              j
                            (depending on the choice for the first commodity). This gives a feasible flow and no two units of flow use the same edge. Hence, the bottleneck value of this flow is given by 1.□

The above construction handles the multi-commodity case. Now we show that the problem remains 
                        
                           NP
                        
                     -complete in the single-commodity case if we allow general graphs without restricting the problem to acyclic graphs.
                        Theorem 2
                        
                           
                              
                                 NarrowestFlow
                              
                              is 
                           
                              
                                 NP
                              
                           
                           -complete in the strong sense in general graphs with unweighted users, even if there is only a single commodity.
                        


                     
                        Proof
                        We provide a polynomial-time reduction from LongestPath. Given an instance of 
                              
                                 LongestPath
                              
                           , i.e., a graph 
                              G
                              =
                              
                                 (
                                 V
                                 ,
                                 E
                                 )
                              
                            with 
                              
                                 |
                                 E
                                 |
                              
                              =
                              m
                           , source–sink pair 
                              
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       G
                                    
                                 
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       G
                                    
                                 
                                 )
                              
                           , latencies 
                              
                                 
                                    ℓ
                                 
                                 
                                    e
                                 
                              
                              =
                              1
                            for all 
                              e
                              ∈
                              E
                            and a constant 
                              K
                              ≤
                              m
                           , the question is whether there is a simple path of length exactly 
                              K
                           . It is shown by Garey and Johnson  [30] that 
                              
                                 LongestPath
                              
                             (in this variant) is 
                              
                                 NP
                              
                           -complete in the strong sense.

For the instance of 
                              
                                 NarrowestFlow
                              
                             we construct a graph 
                              
                                 
                                    G
                                 
                                 
                                    ′
                                 
                              
                            as shown in Fig. 5
                            and take 
                              k
                              =
                              m
                              +
                              1
                            users. There are 
                              m
                            paths 
                              
                                 
                                    P
                                 
                                 
                                    i
                                 
                              
                            from 
                              s
                            to 
                              v
                            with 
                              i
                              ∈
                              
                                 {
                                 2
                                 ,
                                 …
                                 ,
                                 m
                                 +
                                 2
                                 }
                              
                              ∖
                              
                                 {
                                 K
                                 +
                                 2
                                 }
                              
                            edges in a row. All travel times and capacities are set to 1.

We show that there is a flow with bottleneck value 1 in 
                              
                                 
                                    G
                                 
                                 
                                    ′
                                 
                              
                              
                              ⟺
                            there is a simple path with length exactly 
                              K
                            in 
                              G
                           .


                           
                              ⟸
                           : We send one user along the path that consists of edge 
                              
                                 (
                                 s
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       G
                                    
                                 
                                 )
                              
                           , the simple path of length 
                              K
                            in 
                              G
                            and the part 
                              
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       g
                                    
                                 
                                 ,
                                 v
                                 ,
                                 t
                                 )
                              
                           . The other 
                              m
                            users are sent along the 
                              m
                            disjoint upper paths and the edge 
                              
                                 (
                                 v
                                 ,
                                 t
                                 )
                              
                           . Since all of these 
                              m
                            paths arrive at 
                              v
                            at different times between 2 and 
                              m
                              +
                              2
                           , but none at time 
                              K
                              +
                              2
                           , there is no edge with load >1 and hence, no user receives a bottleneck value higher than 1.


                           
                              ⟹
                           : Given a flow with bottleneck value 1, there has to be exactly one user to traverse graph 
                              G
                           . Furthermore, there cannot be two users on edge 
                              
                                 (
                                 v
                                 ,
                                 t
                                 )
                              
                            at the same time. Hence, the user going through graph 
                              G
                            has to arrive at vertex 
                              v
                            at time 
                              K
                              +
                              2
                           . So, she has to take a simple path of length exactly 
                              K
                            in 
                              G
                           .□

As in other dynamic models, the first non-trivial class of graphs are those consisting of parallel links and an additional edge afterwards with unit free travel times and capacities. One can show that an optimal solution there can be stated explicitly. Note that even in this graph the dynamic 
                        
                           NarrowestFlow
                        
                       problem is 
                        
                           NP
                        
                     -complete in the strong sense in the weighted case. This can be easily shown by a reduction from 
                        3
                        
                           -Partition
                        
                     : an instance of 
                        3
                        
                           -Partition
                        
                       is given by 
                        3
                        m
                      integers 
                        
                           
                              a
                           
                           
                              i
                           
                        
                        ,
                        i
                        ∈
                        
                           {
                           1
                           ,
                           …
                           ,
                           3
                           m
                           }
                        
                     , which sum up to 
                        m
                        ⋅
                        A
                     , where 
                        A
                        /
                        4
                        <
                        
                           
                              a
                           
                           
                              i
                           
                        
                        <
                        A
                        /
                        2
                     . The question is whether there are 
                        m
                      subsets consisting of 3 integers each s.t. the sum of the integers in each subset is equal to 
                        A
                     . Given such an instance of 
                        3
                        
                           -Partition
                        
                     , we construct a graph consisting of 
                        m
                      parallel edges with free travel time 1 and capacity 
                        A
                      each. We also add 
                        3
                        m
                      users with weights 
                        
                           
                              a
                           
                           
                              i
                           
                        
                        ,
                        i
                        ∈
                        
                           {
                           1
                           ,
                           …
                           ,
                           3
                           m
                           }
                        
                     . It is immediate that a flow has bottleneck value equal to 1 iff the sum of the weights of the users on each edge is exactly 
                        A
                     , which induces a solution to 
                        3
                        
                           -Partition
                        
                     . The reason is the following: there would be an edge with load lesser than 
                        A
                      iff there would be an edge with load greater than 
                        A
                     . Hence, in an optimum solution (with bottleneck value 1), each edge has load exactly 
                        A
                     . Since the weights of the users are in 
                        
                           (
                           A
                           /
                           4
                           ,
                           A
                           /
                           2
                           )
                        
                     , there cannot be four or more users on an edge and there cannot be two or less users on an edge.

In the previous section we showed that finding a dynamic flow with minimum bottleneck value is hard. In this section we show that finding a single path with minimum bottleneck value is already NP-hard, if there is already some flow routed in the network. This flow already routed before is the reason why the hardness result does not subsume Theorem 1. We need the current hardness of the path problem later on to show the hardness of testing whether a given strategy profile is a Nash equilibrium. Since this is shown even for the unweighted case, we also show the hardness result in this section for routing a single unit of flow along the additional path.
                        Definition 2
                        
                           
                              
                                 NarrowestPath
                              
                             Problem


                        
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             Input:
                                          
                                          Instance 
                                                Γ
                                                =
                                                
                                                   [
                                                   G
                                                   =
                                                   
                                                      (
                                                      V
                                                      ,
                                                      E
                                                      )
                                                   
                                                   ,
                                                   
                                                   
                                                      
                                                         
                                                            (
                                                            
                                                               
                                                                  τ
                                                               
                                                               
                                                                  e
                                                               
                                                            
                                                            ,
                                                            
                                                            
                                                               
                                                                  u
                                                               
                                                               
                                                                  e
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         e
                                                         ∈
                                                         E
                                                      
                                                   
                                                   ,
                                                   
                                                   k
                                                   ,
                                                   
                                                   
                                                      
                                                         
                                                            (
                                                            
                                                               
                                                                  s
                                                               
                                                               
                                                                  j
                                                               
                                                            
                                                            ,
                                                            
                                                            
                                                               
                                                                  t
                                                               
                                                               
                                                                  j
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         j
                                                         =
                                                         1
                                                         ,
                                                         …
                                                         ,
                                                         k
                                                      
                                                   
                                                   ]
                                                
                                              of a game with bottleneck objective, flow 
                                                f
                                                =
                                                
                                                   
                                                      
                                                         (
                                                         
                                                            
                                                               f
                                                            
                                                            
                                                               
                                                                  
                                                                     P
                                                                  
                                                                  
                                                                     j
                                                                  
                                                               
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                   
                                                      j
                                                      =
                                                      1
                                                      ,
                                                      …
                                                      ,
                                                      k
                                                      −
                                                      1
                                                   
                                                
                                              for 
                                                k
                                                −
                                                1
                                              users and a bound 
                                                b
                                             .
                                       
                                       
                                          
                                             Question:
                                          
                                          Is there a path 
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      k
                                                   
                                                
                                              for user 
                                                k
                                              s.t. the bottleneck value 
                                                
                                                   
                                                      b
                                                   
                                                   
                                                      k
                                                   
                                                
                                                
                                                   (
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         ˜
                                                      
                                                   
                                                   )
                                                
                                              of that user in the flow 
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      ˜
                                                   
                                                
                                                =
                                                
                                                   
                                                      
                                                         (
                                                         
                                                            
                                                               f
                                                            
                                                            
                                                               
                                                                  
                                                                     P
                                                                  
                                                                  
                                                                     j
                                                                  
                                                               
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                   
                                                      j
                                                      =
                                                      1
                                                      ,
                                                      …
                                                      ,
                                                      k
                                                   
                                                
                                              with 
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      
                                                         
                                                            P
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                   
                                                
                                                =
                                                1
                                              is smaller or equal to 
                                                b
                                             ?
                                       
                                    
                                 
                              
                           
                        


                           
                              
                                 NarrowestPath
                              
                              is 
                           
                              
                                 NP
                              
                           
                           -complete in the strong sense, even if the graph is acyclic and only a single unit of flow has to be routed.
                        


                     
                        Proof
                        We reduce 
                              3
                              
                                 -SAT
                              
                             (see  [30]) to 
                              
                                 NarrowestPath
                              
                           . Suppose that we are given an instance of  
                              3
                              
                                 -SAT
                              
                           . We now construct an instance of 
                              
                                 NarrowestPath
                              
                             in polynomial time in such a way that there is a path with bottleneck value equal to 1 iff there is a 
                              
                                 Yes
                              
                           -instance for 
                              3
                              
                                 -SAT
                              
                             (the construction is illustrated in Fig. 6
                           ).


                           Construction—clause vertices: For every clause 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                            with literals 
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                              ,
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                              ,
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          3
                                       
                                    
                                 
                              
                           , we add a clause vertex 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                            and three literal vertices 
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          1
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                              ,
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                              ,
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          3
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                            (so in total, for every literal there will be as many literal vertices as this literal occurs in the clauses). We add a super source 
                              s
                            and a super termination 
                              t
                           . For the ease of notation, the terminal is also denoted by 
                              
                                 
                                    C
                                 
                                 
                                    ρ
                                    +
                                    1
                                 
                              
                           . The source 
                              s
                            is connected to the first clause vertex 
                              
                                 
                                    C
                                 
                                 
                                    1
                                 
                              
                            via a single edge with high priority.


                           Construction—literal vertices: For each literal vertex 
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                                 
                                    j
                                 
                              
                            corresponding to a clause vertex 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                            we add a path from the clause to the literal, i.e.,  
                              
                                 (
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       ,
                                       1
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       ,
                                       ρ
                                       −
                                       2
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       ℓ
                                    
                                    
                                       i
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                           , consisting of 
                              ρ
                              −
                              1
                            consecutive edges with 
                              ρ
                              −
                              2
                            vertices 
                              
                                 
                                    v
                                 
                                 
                                    i
                                    ,
                                    l
                                 
                                 
                                    j
                                 
                              
                            with 
                              l
                              ∈
                              
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 ρ
                                 −
                                 2
                                 }
                              
                            in between. We call these vertices preliteral vertices and set 
                              
                                 
                                    v
                                 
                                 
                                    i
                                    ,
                                    ρ
                                    −
                                    1
                                 
                                 
                                    j
                                 
                              
                              =
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                                 
                                    j
                                 
                              
                            and 
                              
                                 
                                    v
                                 
                                 
                                    i
                                    ,
                                    0
                                 
                                 
                                    j
                                 
                              
                              =
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                           . The last edge entering 
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                                 
                                    j
                                 
                              
                            has a low priority, while all other edges have high priority. The exact numbers are not important. Furthermore, there is a path 
                              
                                 (
                                 
                                    
                                       ℓ
                                    
                                    
                                       i
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       w
                                    
                                    
                                       i
                                       ,
                                       1
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                 
                                    
                                       w
                                    
                                    
                                       i
                                       ,
                                       ρ
                                       −
                                       2
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       C
                                    
                                    
                                       j
                                       +
                                       1
                                    
                                 
                                 )
                              
                            consisting of 
                              ρ
                              −
                              1
                            consecutive edges with 
                              ρ
                              −
                              2
                            vertices 
                              
                                 
                                    w
                                 
                                 
                                    i
                                    ,
                                    l
                                 
                                 
                                    j
                                 
                              
                            with 
                              l
                              ∈
                              
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 ρ
                                 −
                                 2
                                 }
                              
                            in between. We call these vertices postliteral vertices and set 
                              
                                 
                                    w
                                 
                                 
                                    i
                                    ,
                                    0
                                 
                                 
                                    j
                                 
                              
                              =
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                                 
                                    j
                                 
                              
                            and 
                              
                                 
                                    w
                                 
                                 
                                    i
                                    ,
                                    ρ
                                    −
                                    1
                                 
                                 
                                    j
                                 
                              
                              =
                              
                                 
                                    C
                                 
                                 
                                    j
                                    +
                                    1
                                 
                              
                           . Note that each literal and each clause vertex belong to the pre- and postliteral vertices, too. The last edge entering 
                              
                                 
                                    C
                                 
                                 
                                    j
                                    +
                                    1
                                 
                              
                            has a high priority, while all other edges have low priority. Again, the exact numbers are not important. All travel times are set to 1 unless stated differently (in the figure, these are the travel times not stated explicitly).

The distance from 
                              s
                            to a preliteral vertex 
                              
                                 
                                    v
                                 
                                 
                                    i
                                    ,
                                    l
                                 
                                 
                                    j
                                 
                              
                            is given by 
                              τ
                              
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       ,
                                       l
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              =
                              
                                 (
                                 2
                                 j
                                 −
                                 2
                                 )
                              
                              
                                 (
                                 ρ
                                 −
                                 1
                                 )
                              
                              +
                              1
                              +
                              l
                            and the one from 
                              s
                            to a postliteral vertex 
                              
                                 
                                    w
                                 
                                 
                                    i
                                    ,
                                    l
                                 
                                 
                                    j
                                 
                              
                            is given by 
                              τ
                              
                                 (
                                 
                                    
                                       w
                                    
                                    
                                       i
                                       ,
                                       l
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              =
                              
                                 (
                                 2
                                 j
                                 −
                                 1
                                 )
                              
                              
                                 (
                                 ρ
                                 −
                                 1
                                 )
                              
                              +
                              1
                              +
                              l
                           . Hence, the distance from 
                              s
                            to a clause vertex 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                            is given by 
                              τ
                              
                                 (
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              =
                              
                                 (
                                 2
                                 j
                                 −
                                 2
                                 )
                              
                              
                                 (
                                 ρ
                                 −
                                 1
                                 )
                              
                              +
                              1
                            and the distance from 
                              s
                            to a literal vertex 
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                                 
                                    j
                                 
                              
                            is given by 
                              τ
                              
                                 (
                                 
                                    
                                       ℓ
                                    
                                    
                                       i
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              =
                              
                                 (
                                 2
                                 j
                                 −
                                 1
                                 )
                              
                              
                                 (
                                 ρ
                                 −
                                 1
                                 )
                              
                              +
                              1
                           .


                           Construction—bent edges: The important (additional) edges are those that forbid us using a literal and its negated one. They do not necessarily connect the two literal vertices directly, but they start at a preliteral and end at a postliteral in such a way that two of these edges do not enter at the same vertex. So, let 
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                                 
                                    j
                                 
                              
                            be a literal vertex and 
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                            be a literal vertex in a later clause, i.e.,  
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                              >
                              j
                           , corresponding to the literal that is the negation of the literal corresponding to the first vertex. We add an edge from the preliteral vertex 
                              
                                 
                                    v
                                 
                                 
                                    i
                                    ,
                                    ρ
                                    +
                                    j
                                    −
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                            to the postliteral vertex 
                              
                                 
                                    w
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                    −
                                    j
                                    −
                                    1
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                            with travel time 
                              τ
                              
                                 (
                                 
                                    
                                       w
                                    
                                    
                                       i
                                       ,
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                       −
                                       j
                                       −
                                       1
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 )
                              
                              −
                              τ
                              
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       ,
                                       ρ
                                       +
                                       j
                                       −
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              −
                              1
                              =
                              2
                              
                                 (
                                 
                                    
                                       j
                                    
                                    
                                       ′
                                    
                                 
                                 −
                                 j
                                 )
                              
                              ρ
                              −
                              3
                            and high priority. These edges are called bended edges (as they are drawn bent in the picture). Note that by traversing this edge, one arrives at the postliteral vertex 
                              
                                 
                                    w
                                 
                                 
                                    i
                                    ,
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                    −
                                    j
                                    −
                                    1
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                            one time unit earlier than by travelling through the network without these additional edges. The indices 
                              l
                              =
                              ρ
                              +
                              j
                              −
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                            and 
                              
                                 
                                    l
                                 
                                 
                                    ′
                                 
                              
                              =
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                              −
                              j
                              −
                              1
                            are chosen in such a way that arcs towards a later clause (large 
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                           ) start earlier (smaller 
                              l
                           ) and arcs from a prior clause (small 
                              j
                           ) enter later (larger 
                              
                                 
                                    l
                                 
                                 
                                    ′
                                 
                              
                           ). This gives a nicer picture, since arcs between two consecutive clause are given by 
                              
                                 (
                                 
                                    
                                       ℓ
                                    
                                    
                                       i
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       ℓ
                                    
                                    
                                       
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                    
                                    
                                       j
                                       +
                                       1
                                    
                                 
                                 )
                              
                            and do not need the auxiliary vertices 
                              v
                            and 
                              w
                           . Furthermore, we add an edge from 
                              s
                            to the preliteral vertex 
                              
                                 
                                    v
                                 
                                 
                                    i
                                    ,
                                    ρ
                                    +
                                    j
                                    −
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                    −
                                    1
                                 
                                 
                                    j
                                 
                              
                            with travel time 
                              τ
                              
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       ,
                                       ρ
                                       +
                                       j
                                       −
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                       −
                                       1
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              =
                              
                                 (
                                 2
                                 j
                                 −
                                 2
                                 )
                              
                              
                                 (
                                 ρ
                                 −
                                 1
                                 )
                              
                              +
                              ρ
                              +
                              j
                              −
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                            and low priority together with an edge from the postliteral vertex 
                              
                                 
                                    w
                                 
                                 
                                    i
                                    ,
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                    −
                                    j
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                            to the termination 
                              t
                            with travel time 2. Note that this is possible since 
                              ρ
                              +
                              j
                              −
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                              −
                              1
                              ∈
                              
                                 {
                                 0
                                 ,
                                 …
                                 ,
                                 ρ
                                 −
                                 2
                                 }
                              
                            and 
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                              −
                              j
                              ∈
                              
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 ρ
                                 −
                                 1
                                 }
                              
                           . In the illustration, edges from the source are only indicated by squiggled solid lines (one of the two edges to 
                              
                                 
                                    C
                                 
                                 
                                    1
                                 
                              
                            is omitted), and all edges to the termination are omitted for optical reasons. These edges are called squiggled edges.


                           Construction—blocking users: For all pairs of literals and negated literals in later clauses, we route one user on path 
                              
                                 (
                                 s
                                 ,
                                 
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       ,
                                       ρ
                                       +
                                       j
                                       −
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                       −
                                       1
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       ,
                                       ρ
                                       +
                                       j
                                       −
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       w
                                    
                                    
                                       
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                       −
                                       j
                                       −
                                       1
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       w
                                    
                                    
                                       
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                       −
                                       j
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 ,
                                 t
                                 )
                              
                            (dashed (blue) paths in the upper picture). These users are called blocking users and are needed to forbid the main user traversing a vertex corresponding to a literal and another vertex corresponding to its negated literal later on. In total there are not more than 
                              3
                              
                                 
                                    ρ
                                 
                                 
                                    2
                                 
                              
                            users, and their paths do not intersect (on an edge) at all. The resulting graph is acyclic, and all capacities are set to 1.


                           
                              Remarks
                              Before we prove that the reduction works, let us briefly deduce some structural properties about the 
                                    s
                                    –
                                    t
                                 -path 
                                    P
                                  of an additional user. This user is also called the main user. The graph was constructed in such a way that the main user receives a bottleneck value of at least 2, if she travels along one of the bended edges or travels along an edge at the same time as one of the blocking users, but with an inferior priority.


                           Claim 1. The main user arrives at vertex 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                            at time 
                              τ
                              
                                 (
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              =
                              
                                 (
                                 2
                                 j
                                 −
                                 2
                                 )
                              
                              
                                 (
                                 ρ
                                 −
                                 1
                                 )
                              
                              +
                              1
                            with a bottleneck value of 1 iff she does not travel along any of the bended or squiggled edges or along an edge as one of the blocking users at the same time with an inferior priority.


                           Proof. If the main user has a bottleneck value of 1, then she does not traverse the edges as claimed above. On the other hand, if she does not travel along these edges, her travel time on each edge in her path is equal to 1. Then she arrives at vertex 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                            at time 
                              τ
                              
                                 (
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              =
                              
                                 (
                                 2
                                 j
                                 −
                                 2
                                 )
                              
                              
                                 (
                                 ρ
                                 −
                                 1
                                 )
                              
                              +
                              1
                           .⊲


                           Claim 2. If main user arrives at vertex 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                            at time 
                              τ
                              
                                 (
                                 
                                    
                                       C
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                            with a bottleneck value of 1, then all blocking users are slowed down by one time unit on their first common edge with the main user.


                           Proof. Let the first edge blocking a user and the main user traverse at the same time be edge 
                              e
                              =
                              
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       ,
                                       ρ
                                       +
                                       j
                                       −
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                       −
                                       1
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       ,
                                       ρ
                                       +
                                       j
                                       −
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                           . Then the main user arrives at the starting vertex at time 
                              τ
                              
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       ,
                                       ρ
                                       +
                                       j
                                       −
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                       −
                                       1
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              =
                              
                                 (
                                 2
                                 j
                                 −
                                 2
                                 )
                              
                              
                                 (
                                 ρ
                                 −
                                 1
                                 )
                              
                              +
                              ρ
                              +
                              j
                              −
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                            and the blocking user arrives also at time 
                              τ
                              
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       ,
                                       ρ
                                       +
                                       j
                                       −
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                       −
                                       1
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              =
                              
                                 (
                                 2
                                 j
                                 −
                                 2
                                 )
                              
                              
                                 (
                                 ρ
                                 −
                                 1
                                 )
                              
                              +
                              ρ
                              +
                              j
                              −
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                           . Since the edge of the main user has a better priority, the blocking user has to wait in the waiting queue for one time unit and hence, reaches the end vertex of the edge one time unit after the main user.⊲


                           Claim 3. If the main user traverses a literal vertex and a corresponding negated literal vertex afterwards, then her bottleneck value is at least 2.


                           Proof. Let the main user traverse vertex 
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                                 
                                    j
                                 
                              
                            corresponding to a literal 
                              ℓ
                            and vertex 
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                            corresponding to the negated literal 
                              
                                 
                                    ℓ
                                 
                                 ¯
                              
                            afterwards in such a way that the travel time on each edge up to vertex 
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                            is given by 1. Then there is a bended edge between a preliteral vertex 
                              
                                 
                                    v
                                 
                                 
                                    i
                                    ,
                                    ρ
                                    +
                                    j
                                    −
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                            and a postliteral vertex 
                              
                                 
                                    w
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                    −
                                    j
                                    −
                                    1
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           . Both vertices are traversed by the main user and a blocking user, who are slowed down by the main user by one time unit on the edge towards vertex 
                              
                                 
                                    v
                                 
                                 
                                    i
                                    ,
                                    ρ
                                    +
                                    j
                                    −
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                           , where she arrives one unit of time after the main user (see Claim 2). Since the travel time of the bended edge is one time unit less than the path along the clause vertices, the main user and the blocking user both arrive at vertex 
                              
                                 
                                    w
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                    −
                                    j
                                    −
                                    1
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                            at time 
                              τ
                              
                                 (
                                 
                                    
                                       w
                                    
                                    
                                       
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                       −
                                       j
                                       −
                                       1
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 )
                              
                           . Then the main user and the blocking user both traverse the edge 
                              
                                 
                                    e
                                 
                                 
                                    ′
                                 
                              
                              =
                              
                                 (
                                 
                                    
                                       w
                                    
                                    
                                       
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                       −
                                       j
                                       −
                                       1
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       w
                                    
                                    
                                       
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                       −
                                       j
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 )
                              
                           . Since the bended edge of the blocking users has a better priority than the edge of the main user, the travel time of the main user on edge 
                              
                                 
                                    e
                                 
                                 
                                    ′
                                 
                              
                            is increased by one and hence, her bottleneck value cannot be 1 any more.⊲


                           Main Claim. There is a path with bottleneck value ≤1 iff there is a satisfying assignment for the instance of 
                              3
                              
                                 -SAT
                              
                           .


                           
                              ⟸
                           : Let 
                              T
                            be a satisfying truth assignment. So, in any clause 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                            there is at least one literal that is set to true. We will denote this literal by 
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                            and the corresponding literal node by 
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          j
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                           . If there is more than one true literal in 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                           , we pick an arbitrary one.

We route the new user from the source 
                              s
                            to the first clause node 
                              
                                 
                                    C
                                 
                                 
                                    1
                                 
                              
                           , from a clause node 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                            to the literal node 
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          j
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                            corresponding to the true literal 
                              
                                 
                                    ℓ
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                            in the clause 
                              
                                 
                                    C
                                 
                                 
                                    j
                                 
                              
                            and then to the next clause node 
                              
                                 
                                    C
                                 
                                 
                                    j
                                    +
                                    1
                                 
                              
                            up to the termination node 
                              
                                 
                                    C
                                 
                                 
                                    ρ
                                    +
                                    1
                                 
                              
                              =
                              t
                           . This is a feasible path which by the analysis above has bottleneck value 1, since it traverses none of the bended edges and no literal vertex and a negated literal vertex later on.


                           
                              ⟹
                           : Assume conversely that there is a path 
                              P
                            with bottleneck value 1 for the main user. Then the path cannot traverse any of the bended edges with travel time greater than 1. Furthermore, path 
                              P
                            cannot intersect with the same blocking user more than once by Claim 3. So the new path does not go from a literal node to a node of the negated literal. Then, the path implies a truth assignment for 
                              3
                              
                                 -SAT
                              
                           , since it traverses the node corresponding to one of the literals in each clause and never enters a node of a literal and one of its negated literal.□


                           
                              Remark
                              Note that the reduction also works for the global tie-breaking rule, if the blocking users get best priorities, the main user gets a normal priority, and for each blocking user an additional auxiliary user is added with bad priority. Furthermore, the main user and the auxiliary users have to arrive at the vertices where the main user delayed the blocking users in the reduction from above at the same time and one time unit before the blocking user. If the travel times of the blocking users are decreased accordingly, then one can show that the blocking user is again delayed and the equivalence from above is still true.□

Note that in extension-parallel graphs  [31] the narrowest path problem becomes polynomial-time solvable: there are only 
                        풪
                        
                           (
                           n
                           )
                        
                      different paths from 
                        s
                      to 
                        t
                      and one can exhaustively search for the best one.

We have seen that there may be instances without a Nash equilibrium (Example 2). The first non-trivial class of graphs are those consisting of parallel links and an additional edge afterwards with unit free travel times and capacities. One can show that these always have a Nash equilibrium, which can be stated explicitly. On the other hand, easy examples show that even in extension-parallel graphs, no 
                        
                           Greedy
                        
                       type algorithm is guaranteed to find a Nash equilibrium (if one exists). But, the situation is even worse in the dynamic setting: we show that the question whether a given strategy profile is a Nash equilibrium is already co-
                        
                           NP
                        
                     -complete, the question whether a given instance has a Nash equilibrium is 
                        
                           NP
                        
                     -complete and the Price of Anarchy is very high.

In this section we show that deciding whether a given strategy profile is a Nash equilibrium or not is co-
                           
                              NP
                           
                        -complete for multi-commodity instances, even for unweighted users. 
                           Definition 3
                           
                              
                                 
                                    NashTest
                                 
                                Problem


                           
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                Input:
                                             
                                             Instance 
                                                   Γ
                                                   =
                                                   
                                                      [
                                                      G
                                                      =
                                                      
                                                         (
                                                         V
                                                         ,
                                                         E
                                                         )
                                                      
                                                      ,
                                                      
                                                      
                                                         
                                                            
                                                               (
                                                               
                                                                  
                                                                     τ
                                                                  
                                                                  
                                                                     e
                                                                  
                                                               
                                                               ,
                                                               
                                                               
                                                                  
                                                                     u
                                                                  
                                                                  
                                                                     e
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                         
                                                            e
                                                            ∈
                                                            E
                                                         
                                                      
                                                      ,
                                                      
                                                      k
                                                      ,
                                                      
                                                      
                                                         
                                                            
                                                               (
                                                               
                                                                  
                                                                     s
                                                                  
                                                                  
                                                                     j
                                                                  
                                                               
                                                               ,
                                                               
                                                               
                                                                  
                                                                     t
                                                                  
                                                                  
                                                                     j
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                         
                                                            j
                                                            =
                                                            1
                                                            ,
                                                            …
                                                            ,
                                                            k
                                                         
                                                      
                                                      ]
                                                   
                                                 of a game with bottleneck objective and a flow 
                                                   f
                                                   =
                                                   
                                                      
                                                         
                                                            (
                                                            
                                                               
                                                                  f
                                                               
                                                               
                                                                  
                                                                     
                                                                        P
                                                                     
                                                                     
                                                                        j
                                                                     
                                                                  
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         j
                                                         =
                                                         1
                                                         ,
                                                         …
                                                         ,
                                                         k
                                                      
                                                   
                                                 for 
                                                   k
                                                 users.
                                          
                                          
                                             
                                                Question:
                                             
                                             Is 
                                                   f
                                                 is a Nash equilibrium?
                                          
                                       
                                    
                                 
                              
                           


                        
                           Corollary 4
                           
                              
                                 
                                    NashTest
                                 
                                 is co-
                              
                                 
                                    NP
                                 
                              
                              -complete in the strong sense for multi-commodity instances, even if all users are unweighted and the graph is acyclic.
                           


                        
                           Proof
                           The problem is in co-
                                 
                                    NP
                                 
                              , since given a strategy profile and an alternative strategy for one of the users it is easy to see whether this strategy is better than the old one or not.

To show the hardness we reduce 
                                 3
                                 
                                    -SAT
                                 
                                to 
                                 
                                    NashTest
                                 
                              . In order to do that we modify the reduction to 
                                 
                                    NarrowestPath
                                 
                                slightly (see Fig. 6) s.t. the blocking users do not have any intention to change their strategies:

We add an additional vertex 
                                 h
                               between the source 
                                 s
                               and the first clause vertex 
                                 
                                    
                                       C
                                    
                                    
                                       1
                                    
                                 
                               and two arcs 
                                 
                                    (
                                    s
                                    ,
                                    h
                                    )
                                 
                               and 
                                 
                                    (
                                    h
                                    ,
                                    
                                       
                                          C
                                       
                                       
                                          1
                                       
                                    
                                    )
                                 
                               with travel time 1 together with an arc from 
                                 h
                               to 
                                 t
                               with travel time 2. Furthermore, all travel times of arcs leaving 
                                 s
                               added for the blocking users are increased by 1, too. Since in the 
                                 
                                    NashTest
                                 
                                problem also the blocking users are not satisfied with high bottleneck values, the travel time of any single edge has to be not higher than 2. To achieve that, all arcs with travel times ≥2 (those above and these from literal vertices to negated literal vertices added for the blocking users) are replaced by paths consisting of consecutive arcs, where at least one of the arcs in each of these paths has travel time 2 and the others have travel times 1 or 2 such that the travel time of the path is equal to the travel time of the old arc. The capacity of all arcs is equal to the capacity of the old arc. All other travel times between the drawn vertices, all capacities and priorities stay the same due to this change.

To complete the instance of 
                                 
                                    NashTest
                                 
                                we provide the flow that has to be tested. This flow is given as follows: the blocking users take the same paths as the blocking users in the 
                                 
                                    NarrowestPath
                                 
                                instance with the exception that they do not use the old single arcs, since these have been replaced by the new paths of consecutive arcs as discussed above. The paths are indicated by squiggled solid and dashed (blue) edges in the picture. Note that the edges towards the termination are omitted for optical reasons as for the 
                                 
                                    NarrowestPath
                                 
                                instance. The main user (who has highest priority) is routed from 
                                 s
                               to 
                                 h
                               with travel time 1 and then to 
                                 t
                               with bottleneck value 2 (solid (red) path). The whole illustration can be seen in Fig. 7
                              .

Then none of the blocking users on the dashed (blue) paths can improve, since they receive their bottleneck value on their first arcs and the only possible change to arc 
                                 
                                    (
                                    s
                                    ,
                                    h
                                    )
                                 
                               also gives a bottleneck value of at least 2, because the main user takes this arc with a higher priority at the same time. The main user has a bottleneck value of 2. We know from our last reduction to 
                                 
                                    NarrowestPath
                                 
                                that there is a path with bottleneck value 1 inside the network iff there is a 
                                 
                                    Yes
                                 
                              -instance for 
                                 3
                                 
                                    -SAT
                                 
                              . So, exactly in this case there is a path the main user can change to and hence, the strategy profile is no Nash equilibrium.□

Furthermore, one can show analogously by reducing LongestPath to 
                           
                              NashTest
                           
                          that the problem is also co-
                           
                              NP
                           
                        -hard in the single-commodity case in general graphs.

In this section we show that deciding whether a given instance has a Nash equilibrium or not is 
                           
                              NP
                           
                        -hard for multi-commodity instances, even for unweighted users.


                        
                           Theorem 5
                           
                              The 
                              
                                 
                                    NashExistence
                                 
                                 problem is 
                              
                                 
                                    NP
                                 
                              
                              -hard in the strong sense in the multi-commodity case, even if the graph is acyclic and all users are unweighted.
                           


                        
                           Proof
                           The hardness is shown with a reduction similar to the one for the 
                                 
                                    NarrowestFlow
                                 
                                problem in the two-commodity case from Theorem 1. Again, an instance of 
                                 3
                                 
                                    -SAT
                                 
                                is given by a set of Boolean variables 
                                 X
                                 =
                                 
                                    {
                                    
                                       
                                          x
                                       
                                       
                                          0
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          x
                                       
                                       
                                          η
                                          −
                                          1
                                       
                                    
                                    }
                                 
                              , and 
                                 ρ
                               clauses 
                                 
                                    
                                       
                                          (
                                          
                                             
                                                C
                                             
                                             
                                                j
                                             
                                          
                                          )
                                       
                                    
                                    
                                       j
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       ρ
                                    
                                 
                               containing exactly three literals. The idea behind the subsequent construction follows from two former results:

We already know that the graph 
                                 
                                    
                                       G
                                    
                                    
                                       D
                                    
                                 
                               constructed in the proof of Theorem 1 with one user routing for the first commodity can be traversed with a bottleneck value of 1 iff the instance of 
                                 3
                                 
                                    -SAT
                                 
                               is a feasible truth assignment. Otherwise, the bottleneck is at least 2. On the other hand, without this user from the first commodity, the remaining 
                                 k
                                 −
                                 1
                               users can always route through the graph with bottleneck value 1 (independently on the instance of the 
                                 3
                                 
                                    -SAT
                                 
                                problem).

Furthermore, we have seen in Example 2 an instance with a graph 
                                 
                                    
                                       G
                                    
                                    
                                       N
                                    
                                 
                               that has no Nash equilibrium if there is a single user routing for its first commodity. Additionally, there is always a path with bottleneck value 1 for this user and never a path with smaller travel time. Without this user every feasible strategy of the other users gives a Nash equilibrium.

We add both graphs in one supergraph. First we add a super source 
                                 s
                               and connect it to the source 
                                 
                                    
                                       s
                                    
                                    
                                       1
                                    
                                 
                               of the first commodity in both graphs via an edge with travel time 1. Note that the vertices in the graph 
                                 
                                    
                                       G
                                    
                                    
                                       N
                                    
                                 
                               are denoted with a tilde s.t. they can be distinguished from those in the graph 
                                 
                                    
                                       G
                                    
                                    
                                       D
                                    
                                 
                              . We add a super terminal 
                                 t
                               and connect the terminal of the first commodity in 
                                 
                                    
                                       G
                                    
                                    
                                       N
                                    
                                 
                               to this terminal via an edge with travel time 1. The capacities of all of these edges are set to 1. Next, we have to make sure that the user from the first commodity in 
                                 
                                    
                                       G
                                    
                                    
                                       D
                                    
                                 
                               always suffers (i.e.,  has bottleneck value ≥2) if the flow has bottleneck value higher than 1. To that end we need to extend the instance a little bit, by adding vertices 
                                 
                                    
                                       s
                                    
                                    
                                       3
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 u
                                 ,
                                 w
                               and 
                                 
                                    
                                       t
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                               and the following edges:


                              
                                 
                                    
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                          
                                             Edge
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            3
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            2
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      ,
                                                      w
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      ,
                                                      u
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      u
                                                      ,
                                                      w
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      w
                                                      ,
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             Travel time
                                             
                                                
                                                   T
                                                
                                             
                                             1
                                             2
                                             1
                                             1
                                             1
                                             1
                                          
                                          
                                             Capacity
                                             1
                                             
                                                
                                                   ρ
                                                
                                             
                                             1
                                             1
                                             1
                                             1
                                             1
                                          
                                       
                                    
                                 
                              
                           

The former users from commodity 2 in 
                                 
                                    
                                       G
                                    
                                    
                                       D
                                    
                                 
                               now route from 
                                 
                                    
                                       s
                                    
                                    
                                       2
                                    
                                 
                               to 
                                 
                                    
                                       t
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                               and are called clause users. We add an additional blocking user, who routes from 
                                 
                                    
                                       s
                                    
                                    
                                       3
                                    
                                    
                                       ′
                                    
                                 
                               to 
                                 
                                    
                                       t
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                              . The users from the first commodity in both graphs are merged to one user, who routes from the new super source 
                                 s
                               to the new super terminal 
                                 t
                               and is called the main user here. All other users from graph 
                                 
                                    
                                       G
                                    
                                    
                                       N
                                    
                                 
                               have the same sources and terminals as before. The priorities are only important at a few vertices (indicated with small number and a closing bracket at the end of the edges in the figure): the edge 
                                 
                                    (
                                    
                                       
                                          s
                                       
                                       
                                          3
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          t
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                               receives the lowest priority of all edges entering 
                                 
                                    
                                       t
                                    
                                    
                                       2
                                    
                                 
                               and the edge 
                                 
                                    (
                                    
                                       
                                          t
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    w
                                    )
                                 
                               receives the lowest priority of all edges entering 
                                 w
                              . All other priorities are chosen arbitrarily. The whole illustration can be seen in Fig. 8
                              .


                              Claim 1. We have seen in Example 2 that in the graph 
                                 
                                    
                                       G
                                    
                                    
                                       N
                                    
                                 
                               there is always a path for the user from commodity 1 with bottleneck value 1. But then the user from the second commodity in this graph is not satisfied with her path.


                              Claim 2. The user from commodity 1 never routes along 
                                 
                                    
                                       t
                                    
                                    
                                       2
                                    
                                 
                              , since the travel time on edge 
                                 
                                    (
                                    
                                       
                                          t
                                       
                                       
                                          2
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    w
                                    )
                                 
                               is 2 and, by Claim 1, there is always a path with travel time 1.


                              Claim 3. Iff the flow of the clause users in the subgraph 
                                 
                                    
                                       G
                                    
                                    
                                       D
                                    
                                 
                               (with the modifications made above) has bottleneck value ≥2, then the user from commodity 1 cannot route through the subgraph with a bottleneck value equal to 1.


                              
                                 Proof
                                 In the graph 
                                       
                                          
                                             G
                                          
                                          
                                             D
                                          
                                       
                                     with the modifications made above, the clause users arrive at vertex 
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                     at time 
                                       T
                                     if none of them is slowed down before. At this time the user from 
                                       
                                          
                                             s
                                          
                                          
                                             3
                                          
                                          
                                             ′
                                          
                                       
                                     also arrives at vertex 
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                    . Since her edge has a lower priority the user has to wait for one time unit. Then she arrives at vertex 
                                       w
                                     at time 
                                       T
                                       +
                                       4
                                    . On the other hand, if at least one of the clause users arrives at least one time unit later at 
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                    , then the user from 
                                       
                                          
                                             s
                                          
                                          
                                             3
                                          
                                          
                                             ′
                                          
                                       
                                     arrives at vertex 
                                       w
                                     at time 
                                       T
                                       +
                                       3
                                    .

The user from commodity 1 also traverses this vertex when routing through 
                                       
                                          
                                             G
                                          
                                          
                                             D
                                          
                                       
                                    . If she is not slowed down by any other user (in that case she has bottleneck value ≥2), then she arrives at vertex 
                                       w
                                     at time 
                                       T
                                       +
                                       3
                                    . Since her edge has a lower priority than the edge of the blocking user, she is slowed down by this user and receives bottleneck value at least 2, if this user also arrives there at time 
                                       T
                                       +
                                       3
                                    .⊲


                              Main Claim. There is a feasible truth assignment for the 
                                 3
                                 
                                    -SAT
                                 
                               instance iff there is Nash equilibrium in the enhanced instance.


                              
                                 Proof
                                 Now assume that there is a feasible truth assignment for the 
                                       3
                                       
                                          -SAT
                                       
                                     instance. By the previous theorem we can route the user from commodity 1 along a path from 
                                       s
                                     to 
                                       
                                          
                                             t
                                          
                                          
                                             1
                                          
                                       
                                     with bottleneck value 1 and travel time 
                                       T
                                    . The clause users can also be routed with bottleneck value 1 and travel time 
                                       T
                                     to the vertex 
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                    . Since they have a better priority than the blocking user from 
                                       
                                          
                                             s
                                          
                                          
                                             3
                                          
                                          
                                             ′
                                          
                                       
                                    , they reach their terminal 
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                     at time 
                                       T
                                       +
                                       1
                                    , which is best possible. By Claim 3 the main user traverses the edge 
                                       
                                          (
                                          w
                                          ,
                                          
                                             
                                                t
                                             
                                             
                                                1
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                       
                                     with travel time 1, since the blocking user is slowed down by the clause users. Hence, the main user arrives at her terminal 
                                       t
                                     with bottleneck value equal to 1. Without the user from the first commodity in the graph 
                                       
                                          
                                             G
                                          
                                          
                                             N
                                          
                                       
                                    , there is also a Nash equilibrium in this graph. Hence, there is a Nash equilibrium for the enhanced instance.

Assume conversely that there is no feasible truth assignment for the 
                                       3
                                       
                                          -SAT
                                       
                                     instance. Then any flow with one user routing for the first commodity in the graph 
                                       
                                          
                                             G
                                          
                                          
                                             D
                                          
                                       
                                     has bottleneck value at least 2. By Claim 3 the main user receives bottleneck value ≥2, when routing through the subgraph 
                                       
                                          
                                             G
                                          
                                          
                                             D
                                          
                                       
                                    . Since there is always a path in 
                                       
                                          
                                             G
                                          
                                          
                                             N
                                          
                                       
                                     with bottleneck value 1 by Claim 1, she changes her path to this graph. Hence, there cannot be a Nash equilibrium in this case in the enhanced instance.□

In this section we give tight bounds on the Price of Anarchy and the strong Price of Anarchy. More precisely, we show that both are equal to the number of users both in the unweighted and in the weighted case. Note that besides the weight of the users, the free transit times, capacities and number of commodities are not important for our results.

For a set of instances 
                           G
                         the (strong) Price of Anarchy is defined as the maximum ratio of the worst social objective of a (strong) Nash equilibrium in comparison to the social optimum, i.e., for a game with bottleneck objective we have 
                           
                              
                                 
                                    PoA
                                 
                                 
                                    (
                                    G
                                    )
                                 
                                 =
                                 
                                    
                                       sup
                                    
                                    
                                       Γ
                                       ∈
                                       G
                                    
                                 
                                 
                                 
                                 
                                    
                                       sup
                                    
                                    
                                       f
                                       NE in  
                                       Γ
                                    
                                 
                                 
                                 
                                 
                                    
                                       b
                                       
                                          (
                                          f
                                          )
                                       
                                    
                                    
                                       
                                          opt
                                       
                                       
                                          (
                                          Γ
                                          )
                                       
                                    
                                 
                                 
                                 
                                    sPoA
                                 
                                 
                                    (
                                    G
                                    )
                                 
                                 =
                                 
                                    
                                       sup
                                    
                                    
                                       Γ
                                       ∈
                                       G
                                    
                                 
                                 
                                 
                                 
                                    
                                       sup
                                    
                                    
                                       f
                                       SE in  
                                       Γ
                                    
                                 
                                 
                                 
                                 
                                    
                                       b
                                       
                                          (
                                          f
                                          )
                                       
                                    
                                    
                                       
                                          opt
                                       
                                       
                                          (
                                          Γ
                                          )
                                       
                                    
                                 
                                 .
                              
                           
                        
                     


                        
                           Theorem 6
                           
                              The (strong) Price of Anarchy is bounded from above by 
                              
                                 k
                              
                              .
                           


                        
                           Proof
                           We show that 
                                 
                                    PoA
                                 
                                 ≤
                                 k
                              , even in the weighted case. Let 
                                 P
                               be a path of a heaviest user with weight 
                                 w
                               in an optimal solution 
                                 
                                    
                                       f
                                    
                                    
                                       ∗
                                    
                                 
                              . The bottleneck of the user is called 
                                 b
                                 ≥
                                 1
                               and the bottleneck of the strategy profile is 
                                 
                                    
                                       b
                                    
                                    
                                       ∗
                                    
                                 
                                 ≥
                                 b
                              .

All edges in path 
                                 P
                               have at least capacity 
                                 w
                               (otherwise the user could not route there) and so every additional user cannot increase the latency by more than 1. If all 
                                 k
                               users take any of the edges of this path 
                                 P
                               at the same time, then the last one will receive a latency 
                                 ≤
                                 b
                                 +
                                 k
                                 −
                                 1
                              .

Assume that there is a Nash equilibrium 
                                 f
                               together with a user with bottleneck value higher than 
                                 b
                                 +
                                 k
                                 −
                                 1
                              . Then she can change to path 
                                 P
                              . Since at most all users can traverse the edges of that path at the same time, the bottleneck on that path is bounded from above by 
                                 b
                                 +
                                 k
                                 −
                                 1
                              . So 
                                 f
                               cannot be a Nash equilibrium and hence the ratio of the objective of a worst Nash equilibrium to the optimal objective is at most 
                                 
                                    (
                                    b
                                    +
                                    k
                                    −
                                    1
                                    )
                                 
                                 /
                                 
                                    
                                       b
                                    
                                    
                                       ∗
                                    
                                 
                                 ≤
                                 1
                                 +
                                 
                                    (
                                    k
                                    −
                                    1
                                    )
                                 
                                 /
                                 
                                    
                                       b
                                    
                                    
                                       ∗
                                    
                                 
                                 ≤
                                 k
                              .□

Our next example shows that the above bound is in fact tight: 
                           Example 4
                           Consider the graph from Fig. 9
                               with free transit times 1, capacities 1 and 
                                 k
                               unweighted users. There are two different strong equilibria.

The first strategy profile (see picture (b)) routes every user on one of the 
                                 k
                               disjoint paths denoted by 
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 
                                    (
                                    s
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    t
                                    )
                                 
                                 ,
                                 
                                    
                                       P
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 
                                    (
                                    s
                                    ,
                                    
                                       
                                          u
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    t
                                    )
                                 
                               for 
                                 j
                                 ∈
                                 
                                    {
                                    2
                                    ,
                                    …
                                    ,
                                    k
                                    −
                                    1
                                    }
                                 
                               and 
                                 
                                    
                                       P
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 
                                    (
                                    s
                                    ,
                                    
                                       
                                          u
                                       
                                       
                                          k
                                       
                                    
                                    ,
                                    t
                                    )
                                 
                              . Then every user has a bottleneck value of 1, and hence the strategy profile is a strong equilibrium with bottleneck value 1.

We show that the strategy profile from picture (c) is also a strong equilibrium and has bottleneck value 
                                 k
                              . It routes user 
                                 j
                                 ∈
                                 
                                    {
                                    1
                                    ,
                                    …
                                    ,
                                    k
                                    }
                                 
                               on path 
                                 
                                    
                                       
                                          
                                             P
                                          
                                          ¯
                                       
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 
                                    (
                                    s
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          u
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          k
                                          −
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          u
                                       
                                       
                                          k
                                       
                                    
                                    ,
                                    t
                                    )
                                 
                              . These paths coincide on the edges 
                                 
                                    (
                                    s
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    )
                                 
                                 ,
                                 
                                    (
                                    
                                       
                                          u
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          j
                                       
                                    
                                    )
                                 
                               and 
                                 
                                    (
                                    
                                       
                                          u
                                       
                                       
                                          k
                                       
                                    
                                    ,
                                    t
                                    )
                                 
                               and differ from each other only on the subpaths from 
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       −
                                       1
                                    
                                 
                               to 
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                 
                               for 
                                 i
                                 ∈
                                 
                                    {
                                    2
                                    ,
                                    …
                                    ,
                                    k
                                    }
                                 
                              . We assume that path 
                                 
                                    
                                       P
                                    
                                    
                                       j
                                    
                                 
                               always uses the subpath from 
                                 
                                    
                                       v
                                    
                                    
                                       i
                                       −
                                       1
                                    
                                 
                               to 
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                 
                               with priority 
                                 
                                    
                                       a
                                    
                                    
                                       j
                                    
                                 
                              , i.e.,  the subpath consisting of 
                                 k
                                 −
                                 j
                                 +
                                 1
                               edges in a row.

So, user 
                                 j
                               with priority 
                                 j
                               is routed on path 
                                 
                                    
                                       
                                          
                                             P
                                          
                                          ¯
                                       
                                    
                                    
                                       j
                                    
                                 
                               with latency 
                                 j
                               on the first edge 
                                 
                                    (
                                    s
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    )
                                 
                               and arrives in 
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                               at time 
                                 j
                              . Afterwards she takes the subpath from 
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                               to 
                                 
                                    
                                       u
                                    
                                    
                                       2
                                    
                                 
                               with 
                                 k
                                 −
                                 j
                                 +
                                 1
                               edges and arrives in 
                                 
                                    
                                       u
                                    
                                    
                                       2
                                    
                                 
                               at time 
                                 k
                                 +
                                 1
                               and so on. So, all users arrive at vertex 
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                 
                               at time 
                                 
                                    (
                                    i
                                    −
                                    1
                                    )
                                 
                                 
                                    (
                                    k
                                    +
                                    1
                                    )
                                 
                               for all 
                                 i
                                 ∈
                                 
                                    {
                                    2
                                    ,
                                    …
                                    ,
                                    k
                                    }
                                 
                               and user 
                                 j
                               receives bottleneck value 
                                 j
                               for all 
                                 j
                                 ∈
                                 
                                    {
                                    1
                                    ,
                                    …
                                    ,
                                    k
                                    }
                                 
                              .

We show by induction on 
                                 j
                               that a coalition 
                                 C
                               of users who can change their strategies simultaneously in order to improve their bottleneck values cannot contain any of the users from 1 to 
                                 j
                              .

For 
                                 j
                                 =
                                 1
                               this is easy since user 1 has bottleneck value 1, and hence she has no incentive to change her strategy. The step is done from 
                                 j
                                 −
                                 1
                               to 
                                 j
                              . We have to show that user 
                                 j
                               cannot be part of any improving coalition if users 
                                 q
                                 <
                                 j
                               keep their strategies. Then user 
                                 j
                               has the highest priority of all users of the coalition. If user 
                                 j
                               wants to decrease her bottleneck value, she has to leave edge 
                                 
                                    (
                                    s
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    )
                                 
                              . Assume that user 
                                 j
                               changes to the edge 
                                 
                                    (
                                    s
                                    ,
                                    
                                       
                                          u
                                       
                                       
                                          i
                                       
                                    
                                    )
                                 
                               for some 
                                 i
                                 ∈
                                 
                                    {
                                    2
                                    ,
                                    …
                                    ,
                                    k
                                    }
                                 
                              . Note that all users 
                                 q
                                 <
                                 j
                               are not affected by the change of the users of the coalition and arrive at vertex 
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                 
                               at time 
                                 
                                    (
                                    i
                                    −
                                    1
                                    )
                                 
                                 
                                    (
                                    k
                                    +
                                    1
                                    )
                                 
                               because of the structure of the graph. User 
                                 j
                               arrives there also at time 
                                 
                                    (
                                    i
                                    −
                                    1
                                    )
                                 
                                 
                                    (
                                    k
                                    +
                                    1
                                    )
                                 
                              , and her edge has a lower priority than those of users 1 to 
                                 q
                              . Since all of these users have to use edge 
                                 
                                    (
                                    
                                       
                                          u
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          i
                                       
                                    
                                    )
                                 
                               afterwards, user 
                                 j
                               receives at least bottleneck value 
                                 j
                              . So, she cannot improve by changing her path, and hence the strategy profile is a strong equilibrium with bottleneck value 
                                 k
                              .⊲

Note that this is exactly the same value as the Price of Anarchy in the static case (see e.g.  [28]). But, the strong Price of Anarchy is much higher than in the static case, where it is given by 2. The reason behind this is the latency model. In the dynamic case simultaneous arrival worsens only the latter users in the equilibrium very badly, while the optimum solution can traverse the network with low cost. In the static case, however, users in a strong equilibrium suffer together and hence form a coalition to improve their situation.

In this and the remaining sections we change the objective from the bottleneck to the sum case. We show that computing a flow with minimum makespan value can be done in polynomial time with the help of a maximum (dynamic) flow computation in the unweighted single-commodity case. Suppose that we are given a time horizon 
                        T
                     . All flow has to start at time 0 in a source vertex 
                        s
                      and reach the terminal vertex 
                        t
                      by time 
                        T
                     . The question of the maximum (dynamic) flow problem is how much flow can be sent from 
                        s
                      to 
                        t
                      in the specified time period. We stress that we look at an atomic variant of a continuous model, and it turns out that the flow sent at time 
                        θ
                      is sent in the continuous model in the time interval 
                        
                           [
                           θ
                           ,
                           θ
                           +
                           1
                           )
                        
                     .

We briefly repeat the necessary concepts of standard dynamic network flows. Let 
                        G
                        =
                        
                           (
                           V
                           ,
                           E
                           )
                        
                      be a graph with a (single) source sink pair 
                        
                           (
                           s
                           ,
                           t
                           )
                        
                     , free travel times 
                        
                           
                              τ
                           
                           
                              e
                           
                        
                      and capacities 
                        
                           
                              u
                           
                           
                              e
                           
                        
                     . For an edge 
                        e
                        ∈
                        E
                     , we denote by 
                        α
                        
                           (
                           e
                           )
                        
                      its starting vertex and by 
                        ω
                        
                           (
                           e
                           )
                        
                      its end vertex.

Let 
                        
                           
                              f
                           
                           
                              e
                           
                        
                        
                           (
                           θ
                           )
                        
                      be the amount of flow on edge 
                        e
                      at time 
                        θ
                     . Then the excess at vertex 
                        v
                      for the flow 
                        f
                      at time 
                        t
                      is given by 
                        
                           (1)
                           
                              
                                 
                                    
                                       excess
                                    
                                 
                                 
                                    f
                                 
                              
                              
                                 (
                                 v
                                 ,
                                 t
                                 )
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    e
                                    ∈
                                    
                                       
                                          δ
                                       
                                       
                                          −
                                       
                                    
                                    
                                       (
                                       v
                                       )
                                    
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    θ
                                    =
                                    0
                                 
                                 
                                    t
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                              
                              
                                 (
                                 θ
                                 )
                              
                              −
                              
                                 
                                    ∑
                                 
                                 
                                    e
                                    ∈
                                    
                                       
                                          δ
                                       
                                       
                                          +
                                       
                                    
                                    
                                       (
                                       v
                                       )
                                    
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    θ
                                    =
                                    0
                                 
                                 
                                    t
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                              
                              
                                 (
                                 θ
                                 )
                              
                              ,
                           
                        
                      where 
                        
                           
                              δ
                           
                           
                              +
                           
                        
                        
                           (
                           v
                           )
                        
                        ⊆
                        E
                      are the edges emanating from 
                        v
                      and 
                        
                           
                              δ
                           
                           
                              −
                           
                        
                        
                           (
                           v
                           )
                        
                        ⊆
                        E
                      are those entering 
                        v
                     .

Let the time horizon be 
                        T
                     . Then 
                        
                           
                              f
                           
                           
                              e
                           
                        
                        
                           (
                           θ
                           )
                        
                        =
                        0
                      for 
                        θ
                        ∉
                        
                           [
                           0
                           ,
                           T
                           −
                           
                              
                                 τ
                              
                              
                                 e
                              
                           
                           ]
                        
                     . 
                        Definition 4
                        Dynamic Network Flow


                        A dynamic network flow with time horizon 
                              T
                            is a flow 
                              f
                            with 
                              0
                              ≤
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                              
                              
                                 (
                                 θ
                                 )
                              
                              ≤
                              
                                 
                                    u
                                 
                                 
                                    e
                                 
                              
                            for all 
                              e
                              ∈
                              E
                           , 
                              
                                 
                                    
                                       excess
                                    
                                 
                                 
                                    f
                                 
                              
                              
                                 (
                                 v
                                 ,
                                 t
                                 )
                              
                              ≥
                              0
                            for all 
                              v
                              ∈
                              V
                              ∖
                              
                                 {
                                 s
                                 ,
                                 t
                                 }
                              
                              ,
                              t
                              ∈
                              
                                 [
                                 0
                                 ,
                                 T
                                 ]
                              
                            and 
                              
                                 
                                    
                                       excess
                                    
                                 
                                 
                                    f
                                 
                              
                              
                                 (
                                 v
                                 ,
                                 T
                                 )
                              
                              =
                              0
                            for all 
                              v
                              ∈
                              V
                              ∖
                              
                                 {
                                 s
                                 ,
                                 t
                                 }
                              
                           .

A dynamic cut with time horizon 
                              T
                            is a function 
                              X
                              :
                              
                                 [
                                 0
                                 ,
                                 T
                                 +
                                 1
                                 )
                              
                              →
                              
                                 
                                    2
                                 
                                 
                                    V
                                 
                              
                            s.t.  
                              
                                 
                                    
                                       s
                                       ∈
                                       X
                                       
                                          (
                                          θ
                                          )
                                       
                                       ⊆
                                       V
                                       ∖
                                       
                                          {
                                          t
                                          }
                                       
                                       
                                       for all  
                                       θ
                                       ∈
                                       
                                          [
                                          0
                                          ,
                                          T
                                          +
                                          1
                                          )
                                       
                                    
                                 
                                 
                                    
                                       X
                                       
                                          (
                                          
                                             
                                                θ
                                             
                                             
                                                1
                                             
                                          
                                          )
                                       
                                       ⊆
                                       X
                                       
                                          (
                                          
                                             
                                                θ
                                             
                                             
                                                2
                                             
                                          
                                          )
                                       
                                       
                                       for  
                                       
                                          
                                             θ
                                          
                                          
                                             1
                                          
                                       
                                       ≤
                                       
                                          
                                             θ
                                          
                                          
                                             2
                                          
                                       
                                       .
                                    
                                 
                              
                           
                        

A dynamic cut can be viewed as a cut which “grows over time”. At any given time 
                        θ
                        ∈
                        
                           [
                           0
                           ,
                           T
                           +
                           1
                           )
                        
                      we have that 
                        
                           (
                           X
                           
                              (
                              θ
                              )
                           
                           ,
                           V
                           ∖
                           X
                           
                              (
                              θ
                              )
                           
                           )
                        
                      is a static 
                        s
                        –
                        t
                     -cut. An edge 
                        e
                        =
                        
                           (
                           u
                           ,
                           v
                           )
                        
                      
                     lies in the dynamic cut if flow leaves vertex 
                        u
                      at time 
                        
                           
                              ξ
                           
                           
                              u
                           
                        
                      or later and enters vertex 
                        v
                      before time 
                        
                           
                              ξ
                           
                           
                              v
                           
                        
                     . The capacity 
                     
                        U
                      of a dynamic cut 
                        X
                      with time horizon 
                        T
                      equals the amount of flow that can be sent along the edges of 
                        G
                      while they are in the cut, i.e.,  
                        
                           (2)
                           
                              U
                              
                                 (
                                 X
                                 )
                              
                              ≔
                              
                                 
                                    ∑
                                 
                                 
                                    e
                                    =
                                    
                                       (
                                       u
                                       ,
                                       v
                                       )
                                    
                                    ∈
                                    E
                                 
                              
                              max
                              
                                 {
                                 0
                                 ,
                                 
                                    
                                       ξ
                                    
                                    
                                       v
                                    
                                 
                                 −
                                 
                                    
                                       τ
                                    
                                    
                                       e
                                    
                                 
                                 −
                                 
                                    
                                       ξ
                                    
                                    
                                       u
                                    
                                 
                                 }
                              
                              ⋅
                              
                                 
                                    u
                                 
                                 
                                    e
                                 
                              
                              .
                           
                        
                     
                  

It is well known that the maximum value of a dynamic flow and the minimum value of a dynamic cut coincide, see e.g.  [9]. A central tool for finding a maximum dynamic flow is the concept of a temporally repeated flow: 
                        Definition 6
                        Temporally Repeated Flow


                        Given a static flow 
                              
                                 
                                    f
                                 
                                 
                                    ˆ
                                 
                              
                            and a decomposition into a set of paths 
                              P
                           , which send 
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                            units of flow along path 
                              P
                              ∈
                              P
                           . Then a temporally repeated flow 
                           
                              
                                 
                                    f
                                 
                                 
                                    T
                                 
                              
                            with time horizon 
                              T
                            is defined as follows: for 
                              P
                              ∈
                              P
                            it sends during the time interval 
                              
                                 [
                                 0
                                 ,
                                 T
                                 −
                                 
                                    
                                       τ
                                    
                                    
                                       P
                                    
                                 
                                 ]
                              
                            exactly 
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          P
                                       
                                    
                                 
                                 
                                    ˆ
                                 
                              
                            units of flow along path 
                              P
                           , where 
                              
                                 
                                    τ
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    e
                                    ∈
                                    P
                                 
                              
                              
                                 
                                    τ
                                 
                                 
                                    e
                                 
                              
                            is the length of path 
                              P
                           . The total flow value sent by 
                              
                                 
                                    f
                                 
                                 
                                    T
                                 
                              
                            is thus 
                              
                                 val
                              
                              
                                 (
                                 
                                    
                                       f
                                    
                                    
                                       T
                                    
                                 
                                 )
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    P
                                    ∈
                                    P
                                 
                              
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          P
                                       
                                    
                                 
                                 
                                    ˆ
                                 
                              
                              
                                 (
                                 T
                                 −
                                 
                                    
                                       τ
                                    
                                    
                                       P
                                    
                                 
                                 )
                              
                           .

It is also well-known that a maximum temporally repeated flow yields a maximum dynamic flow, see e.g.  [32–34]. Thus, the value of a maximum temporally repeated flow equals the minimum value of a dynamic cut. To find a maximum temporally repeated flow one computes a minimum cost circulation 
                        
                           
                              f
                           
                           
                              ˆ
                           
                        
                      in the static model after introducing a back edge from 
                        t
                      to 
                        s
                      with infinite capacity and travel time 
                        −
                        
                           (
                           T
                           +
                           1
                           )
                        
                      in polynomial time. Note that the cost of the back edge of 
                        −
                        
                           (
                           T
                           +
                           1
                           )
                        
                      is chosen because of the atomic model, while in the continuous case the cost is only 
                        −
                        T
                     .

Let us now proceed to flows in the deterministic queuing model. A dynamic flow 
                        f
                      in the deterministic queuing model is given by a number of paths 
                        
                           
                              
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                           
                           
                              j
                              =
                              1
                              ,
                              …
                              ,
                              k
                           
                        
                      and the number of users who are sent along these paths 
                        
                           
                              
                                 (
                                 
                                    
                                       f
                                    
                                    
                                       
                                          
                                             P
                                          
                                          
                                             j
                                          
                                       
                                    
                                 
                                 )
                              
                           
                           
                              j
                              =
                              1
                              ,
                              …
                              ,
                              k
                           
                        
                     .

We let 
                        
                           
                              f
                           
                           
                              e
                           
                           
                              ω
                           
                        
                        
                           (
                           t
                           )
                        
                        ≥
                        0
                      be the amount of flow that leaves edge 
                        e
                      to vertex 
                        ω
                        
                           (
                           e
                           )
                        
                      at time 
                        t
                        ,
                        
                           
                              f
                           
                           
                              e
                           
                           
                              α
                           
                        
                        
                           (
                           t
                           )
                        
                        ≥
                        0
                      be the amount of flow that enters edge 
                        e
                      from the starting vertex 
                        α
                        
                           (
                           e
                           )
                        
                      at time 
                        t
                        ,
                        
                           
                              f
                           
                           
                              e
                           
                        
                        
                           (
                           t
                           )
                        
                        ≥
                        0
                      be the amount of flow on edge 
                        e
                      at time 
                        t
                     , i.e.,  
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    θ
                                    =
                                    0
                                 
                                 
                                    t
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                                 
                                    α
                                 
                              
                              
                                 (
                                 θ
                                 )
                              
                              −
                              
                                 
                                    ∑
                                 
                                 
                                    θ
                                    =
                                    0
                                 
                                 
                                    t
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                                 
                                    ω
                                 
                              
                              
                                 (
                                 θ
                                 )
                              
                           
                        
                      and 
                        
                           
                              f
                           
                           
                              e
                           
                           
                              q
                           
                        
                        
                           (
                           t
                           )
                        
                      be the amount of flow that waits in the waiting queue of edge 
                        e
                      at time 
                        t
                     .

The flow entering an edge traverses it in time 
                        
                           
                              τ
                           
                           
                              e
                           
                        
                      and enters the waiting queue, so we have: 
                        
                           (3)
                           
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                                 
                                    q
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                              =
                              max
                              
                                 {
                                 0
                                 ,
                                 
                                 
                                    
                                       f
                                    
                                    
                                       e
                                    
                                    
                                       q
                                    
                                 
                                 
                                    (
                                    t
                                    −
                                    1
                                    )
                                 
                                 −
                                 
                                    
                                       u
                                    
                                    
                                       e
                                    
                                 
                                 }
                              
                              +
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                                 
                                    α
                                 
                              
                              
                                 (
                                 t
                                 −
                                 
                                    
                                       τ
                                    
                                    
                                       e
                                    
                                 
                                 )
                              
                              .
                           
                        
                      The flow from the queue leaving an edge has to obey the capacity constraints, and thus 
                        
                           (4)
                           
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                                 
                                    ω
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                              =
                              min
                              
                                 {
                                 
                                    
                                       u
                                    
                                    
                                       e
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       f
                                    
                                    
                                       e
                                    
                                    
                                       q
                                    
                                 
                                 
                                    (
                                    t
                                    )
                                 
                                 }
                              
                              .
                           
                        
                      We say that the dynamic flow 
                        f
                      has time horizon 
                     
                        T
                      if all flow values 
                        
                           
                              f
                           
                           
                              e
                           
                        
                        
                           (
                           t
                           )
                        
                        ,
                        
                           
                              f
                           
                           
                              e
                           
                           
                              q
                           
                        
                        
                           (
                           t
                           )
                        
                        ,
                        
                           
                              f
                           
                           
                              e
                           
                           
                              α
                           
                        
                        
                           (
                           t
                           )
                        
                        ,
                        
                           
                              f
                           
                           
                              e
                           
                           
                              ω
                           
                        
                        
                           (
                           t
                           )
                        
                      are zero for 
                        t
                        >
                        T
                      and all edges 
                        e
                        ∈
                        E
                     . The excess in a vertex 
                        v
                      at time 
                        t
                      is defined as 
                        
                           (5)
                           
                              
                                 
                                    
                                       excess
                                    
                                 
                                 
                                    f
                                 
                              
                              
                                 (
                                 v
                                 ,
                                 t
                                 )
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    e
                                    ∈
                                    
                                       
                                          δ
                                       
                                       
                                          −
                                       
                                    
                                    
                                       (
                                       v
                                       )
                                    
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    θ
                                    =
                                    0
                                 
                                 
                                    t
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                                 
                                    ω
                                 
                              
                              
                                 (
                                 θ
                                 )
                              
                              −
                              
                                 
                                    ∑
                                 
                                 
                                    e
                                    ∈
                                    
                                       
                                          δ
                                       
                                       
                                          +
                                       
                                    
                                    
                                       (
                                       v
                                       )
                                    
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    θ
                                    =
                                    0
                                 
                                 
                                    t
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                                 
                                    α
                                 
                              
                              
                                 (
                                 θ
                                 )
                              
                              .
                           
                        
                     
                  

Since waiting in vertices is not allowed we have 
                        
                           
                              
                                 excess
                              
                           
                           
                              f
                           
                        
                        
                           (
                           v
                           ,
                           t
                           )
                        
                        =
                        0
                      for all 
                        v
                        ∈
                        V
                        ∖
                        
                           {
                           s
                           ,
                           t
                           }
                        
                     .

The value of a dynamic flow 
                        f
                      in the deterministic queuing model is also defined to be 
                        
                           val
                        
                        
                           (
                           f
                           )
                        
                        =
                        −
                        
                           
                              
                                 excess
                              
                           
                           
                              f
                           
                        
                        
                           (
                           s
                           ,
                           T
                           )
                        
                     . Note that the model above actually reduces to the flow over time model if 
                        
                           
                              f
                           
                           
                              e
                           
                           
                              ω
                           
                        
                        
                           (
                           t
                           )
                        
                        =
                        
                           
                              f
                           
                           
                              e
                           
                           
                              q
                           
                        
                        
                           (
                           t
                           )
                        
                        =
                        
                           
                              f
                           
                           
                              e
                           
                           
                              α
                           
                        
                        
                           (
                           t
                           −
                           
                              
                                 τ
                              
                              
                                 e
                              
                           
                           )
                        
                     . For the sake of an easier notation we set all flow and excess values to be zero for 
                        t
                        <
                        0
                     . It is easy to see that a maximum flow can be computed the same way as in the standard (atomic version of the) flow over time model by using temporally repeated flows. The only difference is that all flow starts at the source at time 0 and that flow beyond the capacity of an edge is able to wait in the waiting queue of an edge later on.

We now show that the capacity of any dynamic cut is an upper bound for the flow value of any flow in the dynamic queuing model. The proof is along the same lines as for the standard dynamic flow model and is contained in the Appendix for completeness. We note that the result cannot be deduced directly from the literature, since all flow has to leave the source 
                        s
                      at time 0 in the deterministic queuing model and has to be stored in the some of the waiting queues later on. 
                        Theorem 7
                        
                           For any dynamic flow 
                           
                              f
                            
                           in the deterministic queuing model and any dynamic cut 
                           
                              X
                            
                           (both with time horizon 
                           
                              T
                            
                           ) we have: 
                           
                              
                                 val
                              
                              
                                 (
                                 f
                                 )
                              
                              ≤
                              U
                              
                                 (
                                 X
                                 )
                              
                           
                           .
                        


                     
                        Proof
                        See Appendix A.□

The next step is to show that a temporally repeated flow in the flow over time model can be converted to a flow in the deterministic queuing model with the same flow value. Since there is a temporally repeated flow with the same flow value as the capacity of a dynamic cut the resulting flow is maximum. We stress here that, although we use the maximum dynamic flow from the standard model, the optimality result in our case does not follow directly from the literature, since the conversion has to take care about the queues and the buffering at the vertices.

For the conversion, we use the minimum cost circulation 
                        
                           
                              f
                           
                           
                              ˆ
                           
                        
                      which gives rise to the maximum temporally repeated flow in the standard dynamic flow model. Let 
                        P
                      be the paths used by the circulation, 
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    ˆ
                                 
                              
                           
                           
                              P
                           
                        
                      be the flow rate and 
                        
                           
                              τ
                           
                           
                              P
                           
                        
                      the length of path 
                        P
                        ∈
                        P
                     . Then 
                        
                           
                              f
                           
                           
                              T
                           
                        
                      sends 
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    ˆ
                                 
                              
                           
                           
                              P
                           
                        
                      units of flow at every time 
                        θ
                        ∈
                        
                           [
                           0
                           ,
                           T
                           −
                           
                              
                                 τ
                              
                              
                                 P
                              
                           
                           ]
                        
                      along that path. The task of our algorithm is to send the same amount of flow along the same edges in such an order that they arrive within the time horizon in the deterministic queuing model. To that end we state the following definitions: 
                        
                           
                              P
                           
                           
                              e
                           
                        
                        =
                        
                           {
                           P
                           ∈
                           P
                           ∣
                           e
                           ∈
                           P
                           }
                        
                      are the paths traversing the edge 
                        e
                        ∈
                        E
                        ,
                        
                        
                           
                              F
                           
                           
                              P
                           
                        
                        =
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    ˆ
                                 
                              
                           
                           
                              P
                           
                        
                        ⋅
                        
                           (
                           T
                           +
                           1
                           −
                           
                              
                                 τ
                              
                              
                                 P
                              
                           
                           )
                        
                      is the total flow sent along path 
                        P
                      and 
                        F
                        =
                        
                           
                              ∑
                           
                           
                              P
                              ∈
                              P
                           
                        
                        
                           
                              F
                           
                           
                              P
                           
                        
                      is the total amount of flow sent along all paths together, which equals the capacity of the minimal dynamic cut.

A general version of the algorithm can be seen in Algorithm 1 in Appendix A. The idea is the following. The algorithm allocates at least the same amount of flow as in the temporally repeated flow to all paths at the edges leaving the source. Then, this amount of flow is available for allocation at the subsequent edges. Here, it is allocated again as in the temporally repeated flow. To that end flow rates per time for points in time (from a list 
                        
                           
                              T
                           
                           
                              e
                           
                        
                     ) where some of the flow rates at edge 
                        e
                      change are computed by the algorithm iteratively. Between two of these times from the list the flow rates remain constant. In the algorithm, first the flow rate is made available for the next edge 
                        e
                      in path 
                        P
                        ∈
                        
                           
                              P
                           
                           
                              e
                           
                        
                      or the first edge of the path at the beginning. Then some amount of that rate is allocated to path 
                        P
                      at edge 
                        e
                     , which is then available for allocation at the subsequent edge 
                        
                           
                              e
                           
                           
                              P
                           
                        
                      in path 
                        P
                     . Here, a new entry stating the time and the amount of flow available is added to the list 
                        
                           
                              T
                           
                           
                              
                                 
                                    e
                                 
                                 
                                    P
                                 
                              
                           
                        
                      of edge 
                        
                           
                              e
                           
                           
                              P
                           
                        
                     . 
                        Theorem 8
                        
                           Let 
                           
                              
                                 
                                    f
                                 
                                 
                                    T
                                 
                              
                            
                           be a maximum temporally repeated flow with time horizon 
                           
                              T
                            
                           . Then Algorithm  1  transforms 
                           
                              
                                 
                                    f
                                 
                                 
                                    T
                                 
                              
                            
                           into a maximum flow in the deterministic queuing model in polynomial time.
                        


                     
                        Proof
                        See Appendix A.□

We now use the results about maximum dynamic flows in the deterministic queuing model to show that the problem of finding a flow with minimum makespan value is easy to solve in the unweighted single-commodity case.


                        
                           Definition 7
                           
                              
                                 
                                    Quickest Flow
                                 
                                problem


                           
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                Input:
                                             
                                             Instance 
                                                   Γ
                                                   =
                                                   
                                                      [
                                                      G
                                                      =
                                                      
                                                         (
                                                         V
                                                         ,
                                                         E
                                                         )
                                                      
                                                      ,
                                                      
                                                      
                                                         
                                                            
                                                               (
                                                               
                                                                  
                                                                     τ
                                                                  
                                                                  
                                                                     e
                                                                  
                                                               
                                                               ,
                                                               
                                                               
                                                                  
                                                                     u
                                                                  
                                                                  
                                                                     e
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                         
                                                            e
                                                            ∈
                                                            E
                                                         
                                                      
                                                      ,
                                                      
                                                      k
                                                      ,
                                                      
                                                      
                                                         (
                                                         s
                                                         ,
                                                         
                                                         t
                                                         )
                                                      
                                                      ]
                                                   
                                                 and a bound 
                                                   T
                                                .
                                          
                                          
                                             
                                                Question:
                                             
                                             Is there a feasible flow for that instance with makespan objective smaller or equal to 
                                                   T
                                                ?
                                          
                                       
                                    
                                 
                              
                           


                        
                           Theorem 9
                           
                              The 
                              
                                 
                                    Quickest Flow
                                 
                                 problem is solvable in polynomial time in the unweighted single-commodity case.
                           


                        
                           Proof
                           Given an instance of the 
                                 
                                    Quickest Flow
                                 
                                problem, i.e.,  a graph, 
                                 k
                               units of flow, and a bound 
                                 T
                               for the travel time, the question is whether there is a feasible flow for 
                                 k
                               units of flow with makespan smaller or equal to 
                                 T
                              . By Theorem 8, a maximum flow with time horizon 
                                 T
                               can be computed in polynomial time. If the flow value is at least 
                                 k
                              , then we have found a solution for the 
                                 
                                    Quickest Flow
                                 
                                problem. If the flow value is smaller than 
                                 k
                              , then there is no solution for the 
                                 
                                    Quickest Flow
                                 
                                problem.□

Note that in the weighted case the problem becomes 
                           
                              NP
                           
                        -complete with a reduction from the 
                           3
                           
                              -Partition
                           
                          problem to the 
                           
                              Quickest Flow
                           
                          problem in a network consisting of parallel links. In the multi-commodity case the problem also becomes 
                           
                              NP
                           
                        -complete with a reduction from the 
                           3
                           
                              -SAT
                           
                          problem as in  [29] after introducing travel times in such a way that there is a feasible assignment iff there is a flow with makespan equal to some given value (see Appendix B.2).

In this section we show that a 
                        
                           Greedy
                        
                       type strategy computes a Nash equilibrium in a weighted single-commodity game with sum objective. For this reason, we restrict ourselves to the case that users with small weight have a better priority than users with larger weight (as in  [20]). The reason is that users with a bad priority should not be able to use paths users with a good priority cannot use.

In an empty network there is always a shortest path with the property that every subpath is also a shortest path, since that case is equivalent to the static shortest path problem. Routing the first user with highest priority along such a path, a second user originating from the same source cannot enter a common edge before the first user (here we need that the weight of the second user is not smaller than the weight of the first user, since otherwise she might overtake her on an edge the other user could not traverse). They might enter the edge at the same time, but because of the global priorities of the user, the first one leaves the common edge first and hence cannot be overtaken by the second user. Continuing with this approach gives an algorithm that iteratively routes users along a shortest path in the network, where the flow of the users with better priority is already routed. This is not an arbitrary shortest path, but one that arrives at every vertex in the path as early as possible. If there are multiple paths with the same travel time, one of them is picked arbitrarily. More formally: 
                        Definition 8
                        Earliest Arrival Path


                        An earliest arrival path 
                           
                              P
                            with weight 
                              w
                            in an empty network is an 
                              s
                              –
                              t
                           -path s.t.  for each vertex 
                              v
                              ∈
                              P
                            the travel time of the subpath 
                              
                                 
                                    P
                                 
                                 
                                    
                                       (
                                       s
                                       ,
                                       v
                                       )
                                    
                                 
                              
                            from 
                              s
                            to 
                              v
                            is minimum.

Let 
                              
                                 
                                    f
                                 
                                 
                                    k
                                    −
                                    1
                                 
                              
                              =
                              
                                 
                                    
                                       (
                                       
                                          
                                             f
                                          
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   j
                                                
                                             
                                          
                                       
                                       )
                                    
                                 
                                 
                                    j
                                    ∈
                                    
                                       {
                                       1
                                       ,
                                       …
                                       ,
                                       k
                                       −
                                       1
                                       }
                                    
                                 
                              
                            be a flow, where user 
                              q
                              ∈
                              
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 k
                                 −
                                 1
                                 }
                              
                            is routed on an earliest arrival 
                              s
                              –
                              
                                 
                                    t
                                 
                                 
                                    q
                                 
                              
                           -path with weight 
                              
                                 
                                    w
                                 
                                 
                                    q
                                 
                              
                            in the network where flow 
                              
                                 
                                    f
                                 
                                 
                                    q
                                    −
                                    1
                                 
                              
                              =
                              
                                 
                                    
                                       (
                                       
                                          
                                             f
                                          
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   j
                                                
                                             
                                          
                                       
                                       )
                                    
                                 
                                 
                                    j
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    q
                                    −
                                    1
                                 
                              
                            is already routed.

Then an earliest arrival path 
                           
                              
                                 
                                    P
                                 
                                 
                                    k
                                 
                              
                            with weight 
                              
                                 
                                    w
                                 
                                 
                                    k
                                 
                              
                            in the network with flow 
                              
                                 
                                    f
                                 
                                 
                                    k
                                    −
                                    1
                                 
                              
                            already routed is an 
                              s
                              –
                              
                                 
                                    t
                                 
                                 
                                    k
                                 
                              
                           -path s.t.  for each vertex 
                              v
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    k
                                 
                              
                            the travel time of the subpath 
                              
                                 
                                    P
                                 
                                 
                                    
                                       (
                                       s
                                       ,
                                       v
                                       )
                                    
                                 
                                 
                                    k
                                 
                              
                            from 
                              s
                            to 
                              v
                            is minimum in the resulting flow 
                              f
                              =
                              
                                 
                                    f
                                 
                                 
                                    k
                                    −
                                    1
                                 
                              
                              +
                              
                                 
                                    w
                                 
                                 
                                    k
                                 
                              
                              
                                 
                                    δ
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          k
                                       
                                    
                                 
                              
                           . Here, 
                              
                                 
                                    δ
                                 
                                 
                                    P
                                 
                              
                            denotes a flow that sends one unit of flow along path 
                              P
                            and no other edge. Hence, 
                              f
                              =
                              
                                 
                                    f
                                 
                                 
                                    k
                                    −
                                    1
                                 
                              
                              +
                              
                                 
                                    w
                                 
                                 
                                    k
                                 
                              
                              
                                 
                                    δ
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          k
                                       
                                    
                                 
                              
                            is the flow 
                              
                                 
                                    f
                                 
                                 
                                    k
                                    −
                                    1
                                 
                              
                            with 
                              
                                 
                                    w
                                 
                                 
                                    k
                                 
                              
                            additional units of flow on path 
                              
                                 
                                    P
                                 
                                 
                                    k
                                 
                              
                           .

The resulting flow 
                              f
                            is called an earliest arrival path flow.

The analysis above shows how to compute such an earliest arrival path flow. Hence, it always exists. By definition, a user with some priority on her path does not influence the travel times of all users with better priority, since she never overtakes any of them. That means on the other hand that the travel time of a user on an edge does not depend on the load of the other users with worse priority. 
                        Observation 10
                        
                           Let 
                           
                              
                                 
                                    f
                                 
                                 
                                    k
                                 
                              
                              =
                              
                                 
                                    
                                       (
                                       
                                          
                                             f
                                          
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   j
                                                
                                             
                                          
                                       
                                       )
                                    
                                 
                                 
                                    j
                                    ∈
                                    
                                       {
                                       1
                                       ,
                                       …
                                       ,
                                       k
                                       }
                                    
                                 
                              
                            
                           be an earliest arrival path flow for 
                           
                              k
                            
                           users. Then the travel time on each edge 
                           
                              e
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    q
                                 
                              
                            
                           for user 
                           
                              q
                            
                           stays the same, if all users with inferior priority are removed, i.e.,   
                              
                                 
                                    ℓ
                                 
                                 
                                    e
                                    ,
                                    q
                                 
                              
                              
                                 (
                                 
                                    
                                       f
                                    
                                    
                                       q
                                    
                                 
                                 )
                              
                              =
                              
                                 
                                    ℓ
                                 
                                 
                                    e
                                    ,
                                    q
                                 
                              
                              
                                 (
                                 
                                    
                                       f
                                    
                                    
                                       k
                                    
                                 
                                 )
                              
                           
                           .
                        

By the analysis above, a user who chooses to delay another user with lower priority on some edge does not have to suffer from the result of that choice later on, since the other user cannot overtake her. Hence, the travel time on the edges does not depend on the choice of previous edges. The result is stated more formally in the following: 
                        Observation 11
                        
                           Let 
                           
                              
                                 
                                    f
                                 
                                 
                                    k
                                 
                              
                              =
                              
                                 
                                    
                                       (
                                       
                                          
                                             f
                                          
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   j
                                                
                                             
                                          
                                       
                                       )
                                    
                                 
                                 
                                    j
                                    ∈
                                    
                                       {
                                       1
                                       ,
                                       …
                                       ,
                                       k
                                       }
                                    
                                 
                              
                            
                           be an earliest arrival path flow for 
                           
                              k
                            
                           users in the graph 
                           
                              G
                              =
                              
                                 (
                                 V
                                 ,
                                 E
                                 )
                              
                           
                           , where 
                           
                              
                                 
                                    P
                                 
                                 
                                    j
                                 
                              
                            
                           is the 
                           
                              s
                              
                                 –
                              
                              
                                 
                                    t
                                 
                                 
                                    j
                                 
                              
                           
                           -path of user 
                           
                              j
                              ∈
                              
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 k
                                 }
                              
                            
                           with weight 
                           
                              
                                 
                                    w
                                 
                                 
                                    j
                                 
                              
                            
                           and 
                           
                              e
                              =
                              
                                 (
                                 v
                                 ,
                                 w
                                 )
                              
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    k
                                 
                              
                            
                           be an edge user 
                           
                              k
                            
                           enters at time 
                           
                              t
                            
                           . Furthermore, consider the graph 
                           
                              
                                 
                                    G
                                 
                                 
                                    ′
                                 
                              
                              =
                              
                                 (
                                 V
                                 ,
                                 E
                                 ∪
                                 
                                    {
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    
                                       
                                          e
                                       
                                       
                                          ″
                                       
                                    
                                    }
                                 
                                 )
                              
                            
                           with 
                           
                              
                                 
                                    e
                                 
                                 
                                    ′
                                 
                              
                              ∉
                              E
                            
                           an additional edge from the source 
                           
                              s
                            
                           to vertex 
                           
                              v
                            
                           with travel time 
                           
                              t
                            
                           and capacity  1  and 
                           
                              
                                 
                                    e
                                 
                                 
                                    ″
                                 
                              
                              ∉
                              E
                            
                           an additional edge from vertex 
                           
                              w
                            
                           to the terminal 
                           
                              
                                 
                                    t
                                 
                                 
                                    k
                                 
                              
                            
                           with travel time  1  and capacity  1.
                        


                           Then the travel time of user 
                           
                              k
                            
                           on edge 
                           
                              e
                            
                           in the flow 
                           
                              f
                            
                           in the graph 
                           
                              G
                            
                           is equal to the travel time of user 
                           
                              k
                            
                           on edge 
                           
                              e
                            
                           in the flow 
                           
                              
                                 
                                    f
                                 
                                 
                                    ′
                                 
                              
                            
                           in the graph 
                           
                              
                                 
                                    G
                                 
                                 
                                    ′
                                 
                              
                           
                           , where 
                           
                              
                                 
                                    f
                                 
                                 
                                    ′
                                 
                              
                              =
                              f
                              −
                              
                                 
                                    w
                                 
                                 
                                    k
                                 
                              
                              
                                 
                                    δ
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          k
                                       
                                    
                                 
                              
                              +
                              
                                 
                                    w
                                 
                                 
                                    k
                                 
                              
                              
                                 
                                    δ
                                 
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                k
                                             
                                          
                                       
                                       
                                          ˜
                                       
                                    
                                 
                              
                            
                           is the flow where user 
                           
                              k
                            
                           changed from path 
                           
                              
                                 
                                    P
                                 
                                 
                                    k
                                 
                              
                            
                           to the new path 
                           
                              
                                 
                                    
                                       
                                          P
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    k
                                 
                              
                              =
                              
                                 (
                                 s
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 v
                                 ,
                                 e
                                 ,
                                 w
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ″
                                    
                                 
                                 ,
                                 t
                                 )
                              
                           
                           .
                        

From this second observation it follows immediately that an algorithm that aims at computing an earliest arrival path flow only needs the load of the users already traversing an edge, the load of the current user, and the time she enters the edge to compute her travel time on it. Her choices on previous edges and users added after her are irrelevant. Hence, an earliest arrival path can be computed with a slightly modified Dijkstra algorithm. By storing the load at the last point in time a user left an edge from the previous iterations, the current travel times can be computed easily. Note that the paths cannot be sorted by their length at the beginning, since the latency depends on the waiting time of the users who are already routed. So, it is not precisely a 
                        
                           Greedy
                        
                       algorithm.
                        Proposition 1
                        
                           Every single-source game with sum-objective has a Nash equilibrium, even if the users are weighted.
                        


                           In particular, the earliest arrival path flow computed with an algorithm that iteratively computes earliest arrival paths gives such a Nash equilibrium in polynomial time.
                        


                     
                        Proof
                        With the observations above it follows immediately that the resulting flow is an earliest arrival path flow. So, we only have to show that an earliest arrival path flow is also a Nash flow. Take a look at some user 
                              j
                           . By the observation above no user who was allocated after her can slow her down or any of the users who were allocated before her. So she and the users who were allocated before her have the same latency values they had when choosing their paths. Since she chooses a shortest path and no path length decreases due to additional users, she cannot change to another path and improve her objective.□

This shows that a 
                        
                           Greedy
                        
                       type algorithm computes a Nash equilibrium in the weighted single source case. Note that this procedure does not work if there are users with large weight and good priority, since in that case they can be overtaken by users with small weight on an edge with small capacity. Furthermore, the procedure does not work in the weighted multi-commodity case, since an instance compared to Example 2 in the game with bottleneck objective can be constructed easily, which shows that also in the sum case there are instances without a Nash equilibrium (see Appendix B.1). Additionally, the 
                        
                           NashTest
                        
                       problem is 
                        
                           NP
                        
                     -hard to answer in the weighted single-commodity case or the unweighted multi-commodity case. These results can be shown with essentially the same reductions as in the bottleneck case. The 
                        
                           NashExistence
                        
                       problem is also 
                        
                           NP
                        
                     -hard to answer in the weighted multi-commodity case with essentially the same reduction as in the bottleneck case. We include the proof for 
                        
                           NashExistence
                        
                       in Appendix B.3.

Comparing our results to Hoefer et al.  [20] one sees that existence and computation complexity are very similar. However, the results cannot be obtained from their model for several reasons: in our model users only increase the travel time of users after them, while in  [20] users entering an edge at the same time increase the travel time of all of these users. Moreover, the latency functions on edges in their model can be chosen in such a way that in any reasonable strategy profile an edge is used only by a single user, while an additional user in the deterministic queuing model increases the travel time only by a value of 1. Nevertheless, it is obvious that due to the atomic, dynamic setting in both models the computation complexity of a path with optimal objective in a network with other users already routed is 
                        
                           NP
                        
                     -hard.

@&#CONCLUSIONS@&#

In this paper we investigated atomic dynamic routing games for a deterministic queuing model for sum and bottleneck objectives. We showed that quickest flows and Nash equilibria in the sum version can be computed efficiently, while the computation of narrowest paths/flows or Nash equilibria in the bottleneck version are 
                        
                           NP
                        
                     -hard. Our work raises several challenging questions: first, what conditions ensure that Nash equilibria exist in the bottleneck case and when can such an equilibrium be computed efficiently? Second, how can the model be modified in such a way that in the atomic case more problems become tractable (and still the model can be considered “realistic”)?

Here we give the proofs from Section  6 that have been omitted before. The first lemma establishes some basic properties of dynamic flows in the deterministic queuing model. 
                        Lemma 12
                        
                           For any dynamic flow 
                           
                              f
                            
                           in the deterministic queuing model with time horizon 
                           
                              T
                            
                           and any edge 
                           
                              e
                              ∈
                              E
                           
                           , and moment in time 
                           
                              t
                              ≥
                              0
                           
                           , it holds that the difference between flow entering edge 
                           
                              e
                            
                           up to time 
                           
                              t
                              −
                              
                                 
                                    τ
                                 
                                 
                                    e
                                 
                              
                            
                           and flow leaving the edge up to time 
                           
                              t
                            
                           is given by the size of the waiting queue after time 
                           
                              t
                           
                           , that is,
                           
                              
                                 (A.1)
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                          −
                                          
                                             
                                                τ
                                             
                                             
                                                e
                                             
                                          
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          α
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    =
                                    max
                                    
                                       {
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             q
                                          
                                       
                                       
                                          (
                                          t
                                          )
                                       
                                       −
                                       
                                          
                                             u
                                          
                                          
                                             e
                                          
                                       
                                       ,
                                       
                                       0
                                       }
                                    
                                    
                                    ≥
                                    
                                    0
                                    .
                                 
                              
                           
                           At the end (time horizon 
                           
                              T
                            
                           ) flow that entered edge 
                           
                              e
                            
                           also left the edge, i.e.,
                           
                              
                                 (A.2)
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          α
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    =
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    .
                                 
                              
                           
                           The amount of flow leaving the outgoing edges from 
                           
                              v
                              ∈
                              V
                            
                           after time 
                           
                              t
                              +
                              
                                 
                                    τ
                                 
                                 
                                    e
                                 
                              
                            
                           must be at least as high as the amount of flow entering 
                           
                              v
                            
                           after time 
                           
                              t
                            
                           . More precisely
                           
                              
                                 (A.3)
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          t
                                          +
                                          
                                             
                                                τ
                                             
                                             
                                                e
                                             
                                          
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                −
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          t
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    
                                    ≥
                                    
                                    0
                                    .
                                 
                              
                           
                        


                     
                        Proof
                        Let 
                              f
                            be a dynamic flow in the deterministic queuing model with time horizon 
                              T
                              ,
                              e
                              ∈
                              E
                              ,
                              t
                              ≥
                              0
                           . An easy calculation yields: 
                              
                                 (A.4)
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                          −
                                          
                                             
                                                τ
                                             
                                             
                                                e
                                             
                                          
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          α
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    =
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          
                                             
                                                τ
                                             
                                             
                                                e
                                             
                                          
                                       
                                       
                                          t
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          α
                                       
                                    
                                    
                                       (
                                       θ
                                       −
                                       
                                          
                                             τ
                                          
                                          
                                             e
                                          
                                       
                                       )
                                    
                                    =
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          α
                                       
                                    
                                    
                                       (
                                       θ
                                       −
                                       
                                          
                                             τ
                                          
                                          
                                             e
                                          
                                       
                                       )
                                    
                                    
                                       
                                          =
                                       
                                       
                                          
                                             (3)
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          q
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    max
                                    
                                       {
                                       0
                                       ,
                                       
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             q
                                          
                                       
                                       
                                          (
                                          θ
                                          −
                                          1
                                          )
                                       
                                       −
                                       
                                          
                                             u
                                          
                                          
                                             e
                                          
                                       
                                       }
                                    
                                    =
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          q
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                       
                                    
                                    max
                                    
                                       {
                                       0
                                       ,
                                       
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             q
                                          
                                       
                                       
                                          (
                                          θ
                                          −
                                          1
                                          )
                                       
                                       −
                                       
                                          
                                             u
                                          
                                          
                                             e
                                          
                                       
                                       }
                                    
                                    =
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          q
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                          −
                                          1
                                       
                                    
                                    max
                                    
                                       {
                                       0
                                       ,
                                       
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             q
                                          
                                       
                                       
                                          (
                                          θ
                                          )
                                       
                                       −
                                       
                                          
                                             u
                                          
                                          
                                             e
                                          
                                       
                                       }
                                    
                                    =
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          q
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                       
                                    
                                    max
                                    
                                       {
                                       0
                                       ,
                                       
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             q
                                          
                                       
                                       
                                          (
                                          θ
                                          )
                                       
                                       −
                                       
                                          
                                             u
                                          
                                          
                                             e
                                          
                                       
                                       }
                                    
                                    +
                                    max
                                    
                                       {
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             q
                                          
                                       
                                       
                                          (
                                          t
                                          )
                                       
                                       −
                                       
                                          
                                             u
                                          
                                          
                                             e
                                          
                                       
                                       ,
                                       
                                       0
                                       }
                                    
                                    .
                                 
                              
                            If 
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                                 
                                    q
                                 
                              
                              
                                 (
                                 θ
                                 )
                              
                              >
                              
                                 
                                    u
                                 
                                 
                                    e
                                 
                              
                           , then we have: 
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          q
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    max
                                    
                                       {
                                       0
                                       ,
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             q
                                          
                                       
                                       
                                          (
                                          θ
                                          )
                                       
                                       −
                                       
                                          
                                             u
                                          
                                          
                                             e
                                          
                                       
                                       }
                                    
                                    =
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          q
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       (
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             q
                                          
                                       
                                       
                                          (
                                          θ
                                          )
                                       
                                       −
                                       
                                          
                                             u
                                          
                                          
                                             e
                                          
                                       
                                       )
                                    
                                    =
                                    
                                       
                                          u
                                       
                                       
                                          e
                                       
                                    
                                    =
                                    min
                                    
                                       {
                                       
                                          
                                             u
                                          
                                          
                                             e
                                          
                                       
                                       ,
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             q
                                          
                                       
                                       
                                          (
                                          t
                                          )
                                       
                                       }
                                    
                                    
                                       
                                          =
                                       
                                       
                                          
                                             (4)
                                          
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    .
                                 
                              
                            On the other hand, if 
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                                 
                                    q
                                 
                              
                              
                                 (
                                 θ
                                 )
                              
                              <
                              
                                 
                                    u
                                 
                                 
                                    e
                                 
                              
                           , then 
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          q
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    max
                                    
                                       {
                                       0
                                       ,
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             q
                                          
                                       
                                       
                                          (
                                          θ
                                          )
                                       
                                       −
                                       
                                          
                                             u
                                          
                                          
                                             e
                                          
                                       
                                       }
                                    
                                    =
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          q
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    =
                                    min
                                    
                                       {
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             q
                                          
                                       
                                       
                                          (
                                          θ
                                          )
                                       
                                       ,
                                       
                                          
                                             u
                                          
                                          
                                             e
                                          
                                       
                                       }
                                    
                                    
                                       
                                          =
                                       
                                       
                                          
                                             (4)
                                          
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    .
                                 
                              
                            Using the above two calculations in (A.4) now yields the first claim of the lemma.

We proceed with the second claim. After the last time step the waiting queue has to be empty. So we must have that 
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                                 
                                    q
                                 
                              
                              
                                 (
                                 T
                                 )
                              
                              ≤
                              
                                 
                                    u
                                 
                                 
                                    e
                                 
                              
                           . Furthermore, any flow entering after time 
                              T
                              −
                              
                                 
                                    τ
                                 
                                 
                                    e
                                 
                              
                            cannot reach the terminal vertex up to time 
                              T
                           . So 
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                                 
                                    α
                                 
                              
                              
                                 (
                                 θ
                                 )
                              
                              =
                              0
                            for 
                              θ
                              >
                              T
                              −
                              
                                 
                                    τ
                                 
                                 
                                    e
                                 
                              
                           . Using these two properties in (A.1) implies the second claim.

For the last claim, observe that for any vertex 
                              v
                              ∈
                              V
                              ∖
                              
                                 {
                                 s
                                 ,
                                 t
                                 }
                              
                           : 
                              
                                 (∗)
                                 
                                    0
                                    =
                                    
                                       
                                          
                                             excess
                                          
                                       
                                       
                                          f
                                       
                                    
                                    
                                       (
                                       v
                                       ,
                                       t
                                       )
                                    
                                    
                                       
                                          =
                                       
                                       
                                          
                                             (5)
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                −
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          α
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    
                                       
                                          ≤
                                       
                                       
                                          
                                             (A.1)
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                −
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          t
                                          +
                                          
                                             
                                                τ
                                             
                                             
                                                e
                                             
                                          
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    .
                                 
                              
                            So, for all 
                              0
                              ≤
                              t
                              ≤
                              T
                            this implies that 
                              
                                 
                                    0
                                    =
                                    
                                       
                                          
                                             excess
                                          
                                       
                                       
                                          f
                                       
                                    
                                    
                                       (
                                       v
                                       ,
                                       T
                                       )
                                    
                                    
                                       
                                          =
                                       
                                       
                                          
                                             (5)
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                −
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          α
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    
                                       
                                          =
                                       
                                       
                                          
                                             (A.2)
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                −
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      e
                                                      ∈
                                                      
                                                         
                                                            δ
                                                         
                                                         
                                                            −
                                                         
                                                      
                                                      
                                                         (
                                                         v
                                                         )
                                                      
                                                   
                                                
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      θ
                                                      =
                                                      0
                                                   
                                                   
                                                      t
                                                      −
                                                      1
                                                   
                                                
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      e
                                                   
                                                   
                                                      ω
                                                   
                                                
                                                
                                                   (
                                                   θ
                                                   )
                                                
                                                −
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      e
                                                      ∈
                                                      
                                                         
                                                            δ
                                                         
                                                         
                                                            +
                                                         
                                                      
                                                      
                                                         (
                                                         v
                                                         )
                                                      
                                                   
                                                
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      θ
                                                      =
                                                      0
                                                   
                                                   
                                                      t
                                                      +
                                                      
                                                         
                                                            τ
                                                         
                                                         
                                                            e
                                                         
                                                      
                                                      −
                                                      1
                                                   
                                                
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      e
                                                   
                                                   
                                                      ω
                                                   
                                                
                                                
                                                   (
                                                   θ
                                                   )
                                                
                                             
                                             ︸
                                          
                                       
                                       
                                          ≥
                                          0
                                          
                                          
                                             by
                                          
                                          
                                          
                                             (∗)
                                          
                                       
                                    
                                    +
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                −
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          t
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          t
                                          +
                                          
                                             
                                                τ
                                             
                                             
                                                e
                                             
                                          
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    ≥
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                −
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          t
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             (
                                             v
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          t
                                          +
                                          
                                             
                                                τ
                                             
                                             
                                                e
                                             
                                          
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    .
                                 
                              
                            This settles the claim.□

With the lemma from above we show that the capacity of any dynamic cut is an upper bound for the flow value of any flow in the dynamic queuing model as stated in Theorem 7. 
                        Theorem 13
                        
                           For any dynamic flow 
                           
                              f
                            
                           in the deterministic queuing model and any dynamic cut 
                           
                              X
                            
                           (both with time horizon 
                           
                              T
                            
                           ) we have: 
                           
                              
                                 val
                              
                              
                                 (
                                 f
                                 )
                              
                              ≤
                              U
                              
                                 (
                                 X
                                 )
                              
                           
                           .
                        


                     
                        Proof
                        First, note that 
                              
                                 (A.5)
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             (
                                             t
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          
                                             
                                                ξ
                                             
                                             
                                                t
                                             
                                          
                                          +
                                          
                                             
                                                τ
                                             
                                             
                                                e
                                             
                                          
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                −
                                             
                                          
                                          
                                             (
                                             t
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          
                                             
                                                ξ
                                             
                                             
                                                t
                                             
                                          
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    =
                                    0
                                    ,
                                 
                              
                            since 
                              
                                 
                                    ξ
                                 
                                 
                                    t
                                 
                              
                              =
                              T
                              +
                              1
                            and hence there are in fact no summands left.

For any dynamic flow 
                              f
                            in the deterministic queuing model and any cut 
                              X
                            with times 
                              
                                 
                                    ξ
                                 
                                 
                                    v
                                 
                              
                            for 
                              v
                              ∈
                              V
                           , where 
                              
                                 
                                    ξ
                                 
                                 
                                    s
                                 
                              
                              =
                              0
                           , we have: 
                              
                                 
                                    0
                                    ≤
                                    
                                       val
                                    
                                    
                                       (
                                       f
                                       )
                                    
                                    =
                                    −
                                    
                                       
                                          
                                             excess
                                          
                                       
                                       
                                          f
                                       
                                    
                                    
                                       (
                                       s
                                       ,
                                       T
                                       )
                                    
                                    =
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             (
                                             s
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          e
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                −
                                             
                                          
                                          
                                             (
                                             s
                                             )
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          0
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    .
                                 
                              
                            We use 
                              
                                 
                                    f
                                 
                                 
                                    e
                                 
                                 
                                    ω
                                 
                              
                              
                                 (
                                 θ
                                 )
                              
                              =
                              0
                            for 
                              e
                              ∈
                              
                                 
                                    δ
                                 
                                 
                                    +
                                 
                              
                              
                                 (
                                 s
                                 )
                              
                            and 
                              θ
                              <
                              
                                 
                                    τ
                                 
                                 
                                    e
                                 
                              
                           , add Eq. (A.3) for all 
                              v
                              ∈
                              V
                              ∖
                              
                                 {
                                 s
                                 ,
                                 t
                                 }
                              
                            together with the equation from above for vertex 
                              t
                           : 
                              
                                 
                                    ≤
                                    
                                       
                                          ∑
                                       
                                       
                                          v
                                          ∈
                                          V
                                       
                                    
                                    
                                       (
                                       
                                          
                                             ∑
                                          
                                          
                                             e
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   +
                                                
                                             
                                             
                                                (
                                                v
                                                )
                                             
                                          
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             θ
                                             =
                                             
                                                
                                                   ξ
                                                
                                                
                                                   v
                                                
                                             
                                             +
                                             
                                                
                                                   τ
                                                
                                                
                                                   e
                                                
                                             
                                          
                                          
                                             T
                                          
                                       
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             ω
                                          
                                       
                                       
                                          (
                                          θ
                                          )
                                       
                                       −
                                       
                                          
                                             ∑
                                          
                                          
                                             e
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   −
                                                
                                             
                                             
                                                (
                                                v
                                                )
                                             
                                          
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             θ
                                             =
                                             
                                                
                                                   ξ
                                                
                                                
                                                   v
                                                
                                             
                                          
                                          
                                             T
                                          
                                       
                                       
                                          
                                             f
                                          
                                          
                                             e
                                          
                                          
                                             ω
                                          
                                       
                                       
                                          (
                                          θ
                                          )
                                       
                                       )
                                    
                                    ≤
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                e
                                                ∈
                                                E
                                             
                                             
                                                e
                                                =
                                                
                                                   (
                                                   u
                                                   ,
                                                   v
                                                   )
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          
                                             
                                                ξ
                                             
                                             
                                                u
                                             
                                          
                                          +
                                          
                                             
                                                τ
                                             
                                             
                                                e
                                             
                                          
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    −
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                e
                                                ∈
                                                E
                                             
                                             
                                                e
                                                =
                                                
                                                   (
                                                   u
                                                   ,
                                                   v
                                                   )
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          
                                             
                                                ξ
                                             
                                             
                                                v
                                             
                                          
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    ≤
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                e
                                                ∈
                                                E
                                             
                                             
                                                e
                                                =
                                                
                                                   (
                                                   u
                                                   ,
                                                   v
                                                   )
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          ∑
                                       
                                       
                                          θ
                                          =
                                          
                                             
                                                ξ
                                             
                                             
                                                u
                                             
                                          
                                          +
                                          
                                             
                                                τ
                                             
                                             
                                                e
                                             
                                          
                                       
                                       
                                          
                                             
                                                ξ
                                             
                                             
                                                v
                                             
                                          
                                          −
                                          1
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          e
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       (
                                       θ
                                       )
                                    
                                    ≤
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                e
                                                ∈
                                                E
                                             
                                             
                                                e
                                                =
                                                
                                                   (
                                                   u
                                                   ,
                                                   v
                                                   )
                                                
                                             
                                          
                                       
                                    
                                    max
                                    
                                       {
                                       
                                          
                                             ξ
                                          
                                          
                                             v
                                          
                                       
                                       −
                                       
                                          
                                             ξ
                                          
                                          
                                             u
                                          
                                       
                                       −
                                       
                                          
                                             τ
                                          
                                          
                                             e
                                          
                                       
                                       ,
                                       
                                       0
                                       }
                                    
                                    
                                       
                                          u
                                       
                                       
                                          e
                                       
                                    
                                    =
                                    U
                                    
                                       (
                                       X
                                       )
                                    
                                    .
                                 
                              
                           
                           □

The next goal is to show that a temporally repeated flow in the flow over time model can be converted to a flow in the deterministic queuing model with the same flow value. A general version of the algorithm can be seen in Algorithm 1.


                     
                        
                           
                        
                     
                  

Some explanations for the algorithm are given in the following remark: 
                        Remark 1
                        
                           
                              
                                 •
                                 
                                    
                                       
                                          
                                             T
                                          
                                          
                                             e
                                          
                                       
                                    : The algorithm computes inflow rates 
                                       
                                          
                                             X
                                          
                                          
                                             P
                                          
                                       
                                     for all paths 
                                       P
                                       ∈
                                       
                                          
                                             P
                                          
                                          
                                             e
                                          
                                       
                                     for every edge 
                                       e
                                    . For better reading, rates from previous iterations are denoted by 
                                       X
                                    , rates that are currently computed and stored for later iterations are denoted by 
                                       Y
                                    . For all times 
                                       t
                                     where one of the entries from 
                                       
                                          
                                             
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      P
                                                   
                                                
                                                )
                                             
                                          
                                          
                                             P
                                             ∈
                                             
                                                
                                                   P
                                                
                                                
                                                   e
                                                
                                             
                                          
                                       
                                     changes or a path becomes inactive at 
                                       e
                                     we store an entry 
                                       
                                          (
                                          t
                                          ;
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         P
                                                      
                                                   
                                                   )
                                                
                                             
                                             
                                                P
                                                ∈
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      e
                                                   
                                                
                                             
                                          
                                          )
                                       
                                     in a list 
                                       
                                          
                                             T
                                          
                                          
                                             e
                                          
                                       
                                     sorted by the time in an increasing order. So, starting at time 
                                       t
                                     all paths 
                                       P
                                       ∈
                                       
                                          
                                             P
                                          
                                          
                                             e
                                          
                                       
                                     have flow values 
                                       
                                          
                                             X
                                          
                                          
                                             P
                                          
                                       
                                     that state how many units of flow are available to be sent along edge 
                                       e
                                     per time unit until the next time in the list 
                                       
                                          
                                             T
                                          
                                          
                                             e
                                          
                                       
                                    . For simplification of notation we define the following: if for time 
                                       t
                                     flow values for some paths 
                                       P
                                       ∈
                                       
                                          
                                             P
                                          
                                          
                                             e
                                          
                                       
                                     are missing, i.e., we have an entry 
                                       
                                          (
                                          t
                                          ,
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         P
                                                      
                                                   
                                                   )
                                                
                                             
                                             
                                                P
                                                ∈
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          )
                                       
                                     for some strict subset 
                                       
                                          
                                             P
                                          
                                          
                                             ′
                                          
                                       
                                       ⊂
                                       
                                          
                                             P
                                          
                                          
                                             e
                                          
                                       
                                    , then they are set to the previous flow value for 
                                       P
                                     in 
                                       
                                          
                                             T
                                          
                                          
                                             e
                                          
                                       
                                    , i.e., the flow value for 
                                       P
                                     for the maximum time 
                                       
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                       ≤
                                       t
                                     for which there is a flow value for path 
                                       P
                                     or to 0 if there is no such value. So we can assume that all entries we remove of 
                                       
                                          
                                             T
                                          
                                          
                                             e
                                          
                                       
                                     have the form 
                                       
                                          (
                                          t
                                          ,
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         P
                                                      
                                                   
                                                   )
                                                
                                             
                                             
                                                P
                                                ∈
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      e
                                                   
                                                
                                             
                                          
                                          )
                                       
                                    , even if we only added 
                                       
                                          (
                                          t
                                          ,
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         P
                                                      
                                                   
                                                   )
                                                
                                             
                                             
                                                P
                                                ∈
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          )
                                       
                                     for some subset 
                                       
                                          
                                             P
                                          
                                          
                                             ′
                                          
                                       
                                       ⊆
                                       
                                          
                                             P
                                          
                                          
                                             e
                                          
                                       
                                     to 
                                       
                                          
                                             T
                                          
                                          
                                             e
                                          
                                       
                                     before. During the algorithm we add entries 
                                       
                                          (
                                          t
                                          ,
                                          
                                             
                                                Y
                                             
                                             
                                                P
                                             
                                          
                                          )
                                       
                                     to 
                                       
                                          
                                             T
                                          
                                          
                                             e
                                          
                                       
                                    . This is done under the constraint that an entry with the same flow value has not been added before. That means we only add the entry, if the flow value for 
                                       P
                                     for the maximum time 
                                       
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                       ≤
                                       t
                                     for which there is a flow value for path 
                                       P
                                     differs from the current value 
                                       
                                          
                                             Y
                                          
                                          
                                             P
                                          
                                       
                                    . Furthermore, the list never contains a time twice.

Note that flow starting at time 
                                       T
                                       +
                                       1
                                       −
                                       
                                          
                                             τ
                                          
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   
                                                      (
                                                      v
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                     added to 
                                       
                                          
                                             T
                                          
                                          
                                             e
                                          
                                       
                                     for 
                                       e
                                       =
                                       
                                          (
                                          v
                                          ,
                                          w
                                          )
                                       
                                       ∈
                                       E
                                     in Step 1 cannot reach the terminal vertex 
                                       t
                                     up to the time horizon 
                                       T
                                    . We show in Lemma 15 that the total amount of flow entering an edge 
                                       e
                                     in path 
                                       P
                                     in the temporally repeated flow up to time 
                                       t
                                     is also allocated to 
                                       P
                                     at 
                                       e
                                     up to time 
                                       t
                                    . Hence, there is no unit of flow available for allocation at edge 
                                       e
                                     at time 
                                       T
                                       +
                                       1
                                       −
                                       
                                          
                                             τ
                                          
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   
                                                      (
                                                      v
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    .

*1 in Step 2: The graph 
                                       
                                          
                                             G
                                          
                                          
                                             ′
                                          
                                       
                                       =
                                       
                                          (
                                          V
                                          ,
                                          
                                             
                                                E
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                       
                                     that consists of the edges from the paths 
                                       P
                                     of the path decomposition of a maximum temporally repeated flow 
                                       
                                          
                                             f
                                          
                                          
                                             ˆ
                                          
                                       
                                     is acyclic. This follows from the fact that the maximum temporally repeated flow is obtained via a flow decomposition of a minimum cost flow (see e.g.,   [34]). Since we assumed that all travel times are strictly positive, a cycle in the decomposition would contradict the optimality of the minimum cost flow. Thus, we can assume that the vertices in 
                                       
                                          
                                             G
                                          
                                          
                                             ′
                                          
                                       
                                     are numbered according to a topological sorting, and that in Step 2 the edges are considered in the order of the topological sorting of their starting vertices.

*2 in Step 7: The maximum time span 
                                       
                                          
                                             
                                                
                                                   θ
                                                
                                                
                                                   ˜
                                                
                                             
                                          
                                          
                                             P
                                          
                                       
                                     the flow value 
                                       
                                          
                                             f
                                          
                                          
                                             P
                                          
                                       
                                     of path 
                                       P
                                     can be utilized can be computed as follows: if the amount of flow available per time 
                                       
                                          
                                             X
                                          
                                          
                                             P
                                          
                                       
                                     is at least as high as the flow value 
                                       
                                          
                                             f
                                          
                                          
                                             P
                                          
                                       
                                    , i.e.,  
                                       
                                          
                                             X
                                          
                                          
                                             P
                                          
                                       
                                       ≥
                                       
                                          
                                             f
                                          
                                          
                                             P
                                          
                                       
                                    , then this value can be utilized for the whole time interval, i.e.,  
                                       
                                          
                                             θ
                                          
                                          
                                             P
                                          
                                       
                                       =
                                       θ
                                    . Otherwise, 
                                       
                                          
                                             X
                                          
                                          
                                             P
                                          
                                       
                                       <
                                       
                                          
                                             f
                                          
                                          
                                             P
                                          
                                       
                                    . Then the length of the time interval is decreased to some value 
                                       
                                          
                                             θ
                                          
                                          
                                             P
                                          
                                       
                                    . The minimum amount of flow (
                                       
                                          
                                             f
                                          
                                          
                                             P
                                          
                                       
                                       
                                       
                                          
                                             θ
                                          
                                          
                                             P
                                          
                                       
                                    ) allocated during the interval (of length 
                                       
                                          
                                             θ
                                          
                                          
                                             P
                                          
                                       
                                    ) cannot exceed the amount of flow available (
                                       
                                          
                                             W
                                          
                                          
                                             P
                                          
                                       
                                       +
                                       
                                          
                                             θ
                                          
                                          
                                             P
                                          
                                       
                                       
                                       
                                          
                                             X
                                          
                                          
                                             P
                                          
                                       
                                    ) during that interval. This yields 
                                       
                                          
                                             θ
                                          
                                          
                                             P
                                          
                                       
                                       =
                                       
                                          ⌊
                                          
                                             
                                                
                                                   
                                                      W
                                                   
                                                   
                                                      P
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      P
                                                   
                                                
                                                −
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      P
                                                   
                                                
                                             
                                          
                                          ⌋
                                       
                                     in that case. Furthermore, we know by step 6 that 
                                       
                                          
                                             f
                                          
                                          
                                             P
                                          
                                       
                                       ≤
                                       
                                          
                                             X
                                          
                                          
                                             P
                                          
                                       
                                       +
                                       
                                          
                                             W
                                          
                                          
                                             P
                                          
                                       
                                    . With 
                                       
                                          
                                             X
                                          
                                          
                                             P
                                          
                                       
                                       <
                                       
                                          
                                             f
                                          
                                          
                                             P
                                          
                                       
                                     we get 
                                       
                                          
                                             
                                                
                                                   θ
                                                
                                                
                                                   ˜
                                                
                                             
                                          
                                          
                                             P
                                          
                                       
                                       =
                                       
                                          
                                             
                                                
                                                   W
                                                
                                                
                                                   P
                                                
                                             
                                          
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   P
                                                
                                             
                                             −
                                             
                                                
                                                   X
                                                
                                                
                                                   P
                                                
                                             
                                          
                                       
                                       ≥
                                       1
                                    .

The maximum time span 
                                       
                                          
                                             
                                                
                                                   θ
                                                
                                                
                                                   ˜
                                                
                                             
                                          
                                          
                                             e
                                          
                                       
                                     the capacity 
                                       u
                                     can be utilized can be computed as follows: if the amount of flow available per time 
                                       
                                          
                                             X
                                          
                                          
                                             e
                                          
                                       
                                       =
                                       
                                          
                                             ∑
                                          
                                          
                                             P
                                             ∈
                                             
                                                
                                                   P
                                                
                                                
                                                   e
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                       
                                          
                                             X
                                          
                                          
                                             P
                                          
                                       
                                     is at least as high as the capacity 
                                       u
                                    , i.e.,  
                                       
                                          
                                             X
                                          
                                          
                                             e
                                          
                                       
                                       ≥
                                       u
                                    , then this value can be utilized for the whole time interval, i.e.,  
                                       
                                          
                                             θ
                                          
                                          
                                             e
                                          
                                       
                                       =
                                       θ
                                    . Otherwise, 
                                       
                                          
                                             X
                                          
                                          
                                             e
                                          
                                       
                                       <
                                       u
                                    . Then the length of the time interval is decreased to some value 
                                       
                                          
                                             θ
                                          
                                          
                                             e
                                          
                                       
                                    . The minimum amount of flow (
                                       u
                                       
                                       
                                          
                                             θ
                                          
                                          
                                             e
                                          
                                       
                                    ) allocated during the interval (of length 
                                       
                                          
                                             θ
                                          
                                          
                                             e
                                          
                                       
                                    ) cannot exceed the amount of flow (
                                       
                                          
                                             ∑
                                          
                                          
                                             P
                                             ∈
                                             
                                                
                                                   P
                                                
                                                
                                                   e
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                       
                                          (
                                          
                                             
                                                W
                                             
                                             
                                                P
                                             
                                          
                                          +
                                          
                                             
                                                θ
                                             
                                             
                                                e
                                             
                                          
                                          
                                          
                                             
                                                X
                                             
                                             
                                                P
                                             
                                          
                                          )
                                       
                                    ) available during that interval. This yields 
                                       
                                          
                                             θ
                                          
                                          
                                             e
                                          
                                       
                                       =
                                       
                                          ⌊
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      P
                                                      ∈
                                                      
                                                         
                                                            P
                                                         
                                                         
                                                            e
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      W
                                                   
                                                   
                                                      P
                                                   
                                                
                                             
                                             
                                                u
                                                −
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      e
                                                   
                                                
                                             
                                          
                                          ⌋
                                       
                                     in that case. Furthermore, we know by step 6 that 
                                       u
                                       ≤
                                       
                                          
                                             ∑
                                          
                                          
                                             P
                                             ∈
                                             
                                                
                                                   P
                                                
                                                
                                                   e
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                       
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                P
                                             
                                          
                                          +
                                          
                                             
                                                W
                                             
                                             
                                                P
                                             
                                          
                                          )
                                       
                                    . So 
                                       
                                          
                                             
                                                
                                                   θ
                                                
                                                
                                                   ˜
                                                
                                             
                                          
                                          
                                             e
                                          
                                       
                                       ≥
                                       1
                                    .

Then 
                                       
                                          
                                             θ
                                          
                                          
                                             ˜
                                          
                                       
                                       =
                                       min
                                       
                                          {
                                          
                                             
                                                θ
                                             
                                             
                                                e
                                             
                                          
                                          ,
                                          
                                             
                                                θ
                                             
                                             
                                                P
                                             
                                          
                                          ∣
                                          P
                                          ∈
                                          
                                             
                                                P
                                             
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          }
                                       
                                    .

For the last edge 
                                       e
                                     in a path 
                                       P
                                     there is no subsequent edge 
                                       
                                          
                                             e
                                          
                                          
                                             P
                                          
                                       
                                    . So, the amount is stored for the terminal vertex 
                                       t
                                     instead.


                     
                        Lemma 14
                        
                           The integer program in Step  7  of the algorithm has a solution, which can be computed in time 
                           
                              풪
                              
                                 (
                                 m
                                 )
                              
                           
                           .
                        


                     
                        Proof
                        For the ease of notation we write 
                              
                                 
                                    b
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                              +
                              
                                 ⌊
                                 
                                    
                                       
                                          
                                             W
                                          
                                          
                                             P
                                          
                                       
                                    
                                    
                                       θ
                                    
                                 
                                 ⌋
                              
                           . First we show that the program is feasible, i.e.,  
                              
                                 
                                    ∑
                                 
                                 
                                    P
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              ≤
                              u
                              ≤
                              
                                 
                                    ∑
                                 
                                 
                                    P
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              
                                 
                                    b
                                 
                                 
                                    P
                                 
                              
                           . The second inequality follows directly from the definition of 
                              u
                              ≤
                              
                                 
                                    ∑
                                 
                                 
                                    P
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              
                                 
                                    b
                                 
                                 
                                    P
                                 
                              
                           . To see the first inequality we distinguish between two cases. Let 
                              u
                              =
                              
                                 
                                    u
                                 
                                 
                                    e
                                 
                              
                           . By definition we have 
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              ≤
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                           . A temporally repeated flow meets the capacity constraints of the network, i.e.,  
                              
                                 
                                    ∑
                                 
                                 
                                    P
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          e
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              ≤
                              
                                 
                                    u
                                 
                                 
                                    e
                                 
                              
                           . So, we get 
                              
                                 
                                    ∑
                                 
                                 
                                    P
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          e
                                       
                                    
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              ≤
                              
                                 
                                    u
                                 
                                 
                                    e
                                 
                              
                              =
                              u
                           . Now, let 
                              u
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    P
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              
                                 
                                    b
                                 
                                 
                                    P
                                 
                              
                           . To see the first inequality we partition 
                              
                                 
                                    P
                                 
                                 
                                    e
                                 
                                 
                                    ′
                                 
                              
                              =
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              ∪
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                            s.t.  
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              ≤
                              
                                 
                                    b
                                 
                                 
                                    P
                                 
                              
                            for 
                              P
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                            and 
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    b
                                 
                                 
                                    P
                                 
                              
                            for 
                              P
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                           . Then 
                              
                                 
                                    ∑
                                 
                                 
                                    P
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    P
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              +
                              
                                 
                                    ∑
                                 
                                 
                                    P
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                              
                                 
                                    b
                                 
                                 
                                    P
                                 
                              
                              ≤
                              
                                 
                                    ∑
                                 
                                 
                                    P
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              
                                 
                                    b
                                 
                                 
                                    P
                                 
                              
                              =
                              u
                           .

The integer program is feasible and can be written in the following form: 
                              
                                 
                                    ∑
                                 
                                 
                                    P
                                    ∈
                                    
                                       
                                          P
                                       
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              
                                 
                                    Y
                                 
                                 
                                    P
                                 
                              
                              =
                              u
                           , 
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              ≤
                              
                                 
                                    Y
                                 
                                 
                                    P
                                 
                              
                              ≤
                              
                                 
                                    b
                                 
                                 
                                    P
                                 
                              
                            for all 
                              P
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    e
                                 
                                 
                                    ′
                                 
                              
                           , 
                              
                                 
                                    Y
                                 
                                 
                                    P
                                 
                              
                              ∈
                              N
                           , where all data is integral. It is easy to see that the corresponding matrix is totally unimodular (see e.g.,   [35]). Hence, a solution can be computed efficiently. Furthermore, a solution can also be given explicitly by assigning the minimum value to the all paths and distributing the remaining amount of flow arbitrarily among the paths without violating the upper bounds. In fact, this can be done in linear time 
                              풪
                              
                                 (
                                 m
                                 )
                              
                           .□

The following lemma states that the algorithm transforms a maximum temporally repeated flow to a flow in the deterministic queuing model which sends the same amount of flow within the same time horizon. 
                        Lemma 15
                        
                           The dynamic flow in the deterministic queuing model with time horizon 
                           
                              T
                            
                           constructed by Algorithm  1  has the same flow value as the maximum temporally repeated flow with time horizon 
                           
                              T
                            
                           used as input for the algorithm.
                        


                     
                        Proof
                        First we show that the algorithm is well-defined in the sense that every step can be carried out. We show some properties by induction on the number of edges in a path 
                              P
                            considered so far in the for-loop of Step 2. To that end let 
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    e
                                 
                              
                              =
                              
                                 {
                                 
                                    
                                       t
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       μ
                                    
                                 
                                 }
                              
                            be the set of all times added to the list 
                              
                                 
                                    T
                                 
                                 
                                    e
                                 
                              
                            for edge 
                              e
                              =
                              
                                 (
                                 v
                                 ,
                                 w
                                 )
                              
                            during the algorithm with 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              <
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                            for 
                              i
                              ∈
                              
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 μ
                                 −
                                 1
                                 }
                              
                           . We show by induction on 
                              t
                            with 
                              t
                              +
                              1
                              ∈
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    e
                                 
                              
                            the following statements: 
                              
                                 (1)
                                 The algorithm allocates at least 
                                       
                                          
                                             d
                                          
                                          
                                             P
                                             ,
                                             e
                                             ,
                                             t
                                          
                                       
                                       =
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             P
                                          
                                       
                                       ⋅
                                       min
                                       
                                          {
                                          t
                                          +
                                          1
                                          −
                                          
                                             
                                                τ
                                             
                                             
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      
                                                         (
                                                         s
                                                         ,
                                                         v
                                                         )
                                                      
                                                   
                                                
                                             
                                          
                                          ,
                                          T
                                          +
                                          1
                                          −
                                          
                                             
                                                τ
                                             
                                             
                                                P
                                             
                                          
                                          }
                                       
                                     units of flow to path 
                                       P
                                     at edge 
                                       e
                                       =
                                       
                                          (
                                          v
                                          ,
                                          w
                                          )
                                       
                                       ∈
                                       P
                                     up to time 
                                       t
                                    , which is the amount the temporally repeated flow 
                                       
                                          
                                             f
                                          
                                          
                                             T
                                          
                                       
                                     with time horizon 
                                       T
                                     routes along path 
                                       P
                                     at edge 
                                       e
                                    . In particular, it allocates 
                                       
                                          
                                             F
                                          
                                          
                                             P
                                          
                                       
                                       =
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   ˆ
                                                
                                             
                                          
                                          
                                             P
                                          
                                       
                                       
                                          (
                                          T
                                          +
                                          1
                                          −
                                          
                                             
                                                τ
                                             
                                             
                                                P
                                             
                                          
                                          )
                                       
                                     units of flow to 
                                       P
                                     at edge 
                                       e
                                     up to time 
                                       T
                                       −
                                       
                                          
                                             τ
                                          
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   
                                                      (
                                                      v
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    .

At a start of the while-loop, the list 
                                       
                                          
                                             T
                                          
                                          
                                             e
                                          
                                       
                                     in Step 6 of the algorithm consists of at least one time 
                                       
                                          
                                             t
                                          
                                          
                                             α
                                          
                                       
                                       <
                                       T
                                       +
                                       1
                                       −
                                       
                                          
                                             τ
                                          
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   
                                                      (
                                                      v
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                     where the flow rate 
                                       
                                          
                                             X
                                          
                                          
                                             P
                                          
                                       
                                     or the amount of flow in the buffer 
                                       
                                          
                                             W
                                          
                                          
                                             P
                                          
                                       
                                     is greater than zero. Furthermore, it consists of time (
                                       T
                                       +
                                       1
                                       −
                                       
                                          
                                             τ
                                          
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   
                                                      (
                                                      v
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    ).

The lower bound computed in Step 6 fulfils 
                                       
                                          
                                             f
                                          
                                          
                                             P
                                          
                                       
                                       >
                                       0
                                     and the solution of the integer program in Step 7 fulfils 
                                       
                                          
                                             Y
                                          
                                          
                                             P
                                          
                                       
                                       >
                                       0
                                    .


                                    
                                       
                                          
                                             τ
                                          
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   
                                                      (
                                                      s
                                                      ,
                                                      v
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                     is the smallest time in 
                                       
                                          
                                             
                                                
                                                   T
                                                
                                                
                                                   ˜
                                                
                                             
                                          
                                          
                                             e
                                          
                                       
                                     and there is some amount of flow available for allocation at that time, i.e.,  
                                       
                                          
                                             X
                                          
                                          
                                             P
                                          
                                       
                                       +
                                       
                                          
                                             W
                                          
                                          
                                             P
                                          
                                       
                                       >
                                       0
                                     for these variables at that time.

Induction start (for the edges): We start with the first edge 
                              e
                              =
                              
                                 (
                                 s
                                 ,
                                 u
                                 )
                              
                            of path 
                              P
                           . Then 
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    e
                                 
                              
                            includes times 
                              
                                 
                                    τ
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          
                                             (
                                             s
                                             ,
                                             s
                                             )
                                          
                                       
                                    
                                 
                              
                              =
                              0
                            and 
                              T
                              +
                              1
                              −
                              
                                 
                                    τ
                                 
                                 
                                    P
                                 
                              
                              >
                              0
                           . Since there is never a smaller time added to 
                              
                                 
                                    T
                                 
                                 
                                    e
                                 
                              
                           , 0 is the smallest time in 
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    e
                                 
                              
                           . The induction on the time starts with the first time 
                              t
                            with 
                              t
                              +
                              1
                              ∈
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    e
                                 
                              
                           , i.e.,  
                              t
                              =
                              
                                 
                                    t
                                 
                                 
                                    1
                                 
                              
                              −
                              1
                              =
                              −
                              1
                           . At that time no flow is sent in both models and hence there is also no iteration and nothing to show. At the start of the iteration for edge 
                              e
                              =
                              
                                 (
                                 s
                                 ,
                                 u
                                 )
                              
                            (at time 
                              
                                 
                                    t
                                 
                                 
                                    1
                                 
                              
                           ) the buffer 
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                            is set to the total amount of flow 
                              
                                 
                                    F
                                 
                                 
                                    P
                                 
                              
                            that has to be allocated to 
                              P
                            at 
                              e
                           . The amount in the buffer is reduced in Step 11 by the amount allocated to path 
                              P
                           .

For the induction step (for the time) at the first edges consider some time 
                              t
                              =
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              −
                              1
                            with 
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              ∈
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    e
                                 
                              
                              ,
                              i
                              ∈
                              
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 μ
                                 −
                                 1
                                 }
                              
                            and the iteration from time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                            up to time 
                              t
                              =
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              −
                              1
                           . Let 
                              D
                              ≥
                              0
                            be the amount of flow that has already been allocated to 
                              P
                            at 
                              e
                            up to time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              −
                              1
                           . If all 
                              
                                 
                                    F
                                 
                                 
                                    P
                                 
                              
                            units of flow have already been allocated to path 
                              P
                            up to time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              −
                              1
                           , then we are done, since statement (1) is satisfied and no more iteration of the while-loop is executed in the algorithm. Otherwise, the if-condition in Step 10 was not satisfied in the previous iteration that ended at time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              −
                              1
                           . So, we consider time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                            in 
                              
                                 
                                    T
                                 
                                 
                                    e
                                 
                              
                            at the start of the while-loop. The amount of flow in the buffer at that time is positive, i.e.,  
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                              >
                              0
                           . Since 
                              t
                              =
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              −
                              1
                           , there is also time 
                              T
                              +
                              1
                              −
                              
                                 
                                    τ
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    t
                                 
                                 
                                    μ
                                 
                              
                              ≥
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              =
                              t
                              +
                              1
                              >
                              t
                            in the set 
                              
                                 
                                    T
                                 
                                 
                                    e
                                 
                              
                           , which shows (2). We have to show that at least 
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    
                                       
                                          t
                                       
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                    −
                                    1
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                            units of flow are allocated to 
                              P
                            at 
                              e
                            up to time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              −
                              1
                           . By induction hypothesis on 
                              t
                            we know that 
                              D
                              ≥
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    
                                       
                                          t
                                       
                                       
                                          i
                                       
                                    
                                    −
                                    1
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                            units of flow have already been allocated to 
                              P
                            at 
                              e
                            up to time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              −
                              1
                           . If 
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                              ≥
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                           , then also 
                              
                                 
                                    Y
                                 
                                 
                                    P
                                 
                              
                              ≥
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              >
                              0
                            (showing (3)) and hence, at least 
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                            units of flow are allocated to 
                              P
                            at 
                              e
                            per time. So, in total at least 
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    
                                       
                                          t
                                       
                                       
                                          i
                                       
                                    
                                    −
                                    1
                                 
                              
                              +
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       i
                                       +
                                       1
                                    
                                 
                                 −
                                 1
                                 +
                                 1
                                 −
                                 
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                              =
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    
                                       
                                          t
                                       
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                    −
                                    1
                                 
                              
                            units of flow are allocated to 
                              P
                            at 
                              e
                            up to time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              −
                              1
                           . Otherwise 
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                              <
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                           . Then 
                              D
                              >
                              
                                 
                                    F
                                 
                                 
                                    P
                                 
                              
                              −
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                            and less than 
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                            units of flow remain to be allocated. Then 
                              
                                 
                                    Y
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                              >
                              0
                            (showing (3)) and hence, at least 
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                            units of flow are allocated to 
                              P
                            at 
                              e
                            per time. So, in total at least 
                              
                                 
                                    F
                                 
                                 
                                    P
                                 
                              
                              ≥
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    
                                       
                                          t
                                       
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                    −
                                    1
                                 
                              
                            units of flow are allocated to 
                              P
                            at 
                              e
                            up to time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              −
                              1
                           . In particular, 
                              
                                 
                                    F
                                 
                                 
                                    P
                                 
                              
                            units of flow are allocated to 
                              P
                            at 
                              e
                            up to time 
                              T
                              +
                              1
                              −
                              
                                 
                                    τ
                                 
                                 
                                    P
                                 
                              
                            and hence, no larger time is added to 
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    e
                                 
                              
                           .

Induction step (for the edges): Consider path 
                              P
                            at some edge 
                              e
                              =
                              
                                 (
                                 v
                                 ,
                                 w
                                 )
                              
                              ∈
                              E
                              ∖
                              
                                 
                                    δ
                                 
                                 
                                    +
                                 
                              
                              
                                 (
                                 s
                                 )
                              
                           . By induction hypothesis on 
                              e
                           , for the previous edge 
                              
                                 
                                    e
                                 
                                 
                                    ′
                                 
                              
                              =
                              
                                 (
                                 u
                                 ,
                                 v
                                 )
                              
                            in 
                              P
                            before 
                              e
                            we have 
                              
                                 
                                    t
                                 
                                 
                                    1
                                 
                                 
                                    ′
                                 
                              
                              =
                              
                                 
                                    τ
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          
                                             (
                                             s
                                             ,
                                             u
                                             )
                                          
                                       
                                    
                                 
                              
                            as the smallest and 
                              
                                 
                                    t
                                 
                                 
                                    
                                       
                                          μ
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    ′
                                 
                              
                              =
                              T
                              +
                              1
                              −
                              
                                 
                                    τ
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          
                                             (
                                             u
                                             ,
                                             t
                                             )
                                          
                                       
                                    
                                 
                              
                            as the largest time in the set 
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                            by (4). Furthermore, the first 
                              
                                 
                                    Y
                                 
                                 
                                    P
                                 
                              
                              >
                              0
                            units of flow are made available for allocation for 
                              P
                            at 
                              e
                            at time 
                              
                                 
                                    τ
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          
                                             (
                                             s
                                             ,
                                             v
                                             )
                                          
                                       
                                    
                                 
                              
                           . Hence, for the induction start at a time smaller than 
                              
                                 
                                    τ
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          
                                             (
                                             s
                                             ,
                                             v
                                             )
                                          
                                       
                                    
                                 
                              
                            there is nothing to show.

For the induction step (for the time) at the edge 
                              e
                            consider some point in time 
                              t
                              =
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              −
                              1
                            with 
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              ∈
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    e
                                 
                              
                              ,
                              i
                              ∈
                              
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 μ
                                 −
                                 1
                                 }
                              
                            and the iteration from time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                            up to time 
                              t
                              =
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              −
                              1
                           . Let 
                              D
                              ≥
                              0
                            be the amount of flow that has already been allocated to 
                              P
                            at 
                              e
                            up to time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              −
                              1
                            and consider time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                            in 
                              
                                 
                                    T
                                 
                                 
                                    e
                                 
                              
                            at the start of the while-loop. If all 
                              
                                 
                                    F
                                 
                                 
                                    P
                                 
                              
                            units of flow have already been allocated to path 
                              P
                            up to time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              −
                              1
                           , then we are done, since statement (1) is satisfied and no more iteration of the while-loop is executed in the algorithm. Otherwise, the if-condition in Step 10 was not satisfied in the previous iteration that ended at time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              −
                              1
                            (or the current iteration is the first one).

If the flow rate satisfies 
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                              >
                              0
                            during the iteration starting at time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                           , then 
                              
                                 
                                    T
                                 
                                 
                                    e
                                 
                              
                            includes time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                            with 
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                              >
                              0
                            as claimed. Otherwise 
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                              =
                              0
                           . Then, the last iteration for path 
                              P
                            at the previous edge 
                              
                                 
                                    e
                                 
                                 
                                    ′
                                 
                              
                            ended before time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              −
                              
                                 
                                    τ
                                 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           , since otherwise 
                              
                                 
                                    Y
                                 
                                 
                                    P
                                 
                                 
                                    ′
                                 
                              
                              >
                              0
                            units of flow would have been made available for time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                            in that iteration (by (3)). So, by induction hypothesis, 
                              
                                 
                                    F
                                 
                                 
                                    P
                                 
                              
                            units of flow have been allocated to 
                              P
                            at 
                              e
                            up to time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              −
                              1
                              −
                              
                                 
                                    τ
                                 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           . Hence, they are available for allocation at 
                              e
                            up to time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              −
                              1
                           . Since they have not been allocated to 
                              P
                            at 
                              e
                            so far, the remaining amount is stored in the buffer, i.e.,  
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                              >
                              0
                           . So, we always have 
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                              +
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                              >
                              0
                            at the start of the while-loop. With 
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              >
                              0
                            this implies that 
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              >
                              0
                           . Since the integer program always has a feasible solution we have 
                              
                                 
                                    Y
                                 
                                 
                                    P
                                 
                              
                              ≥
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              >
                              0
                           . This shows (3).

By induction hypothesis on the time 
                              t
                            we know that 
                              D
                              ≥
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    
                                       
                                          t
                                       
                                       
                                          i
                                       
                                    
                                    −
                                    1
                                 
                              
                            units of flow have already been allocated to 
                              P
                            at 
                              e
                            up to time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              −
                              1
                           . By induction hypothesis on 
                              e
                            we know that at least 
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    t
                                    −
                                    
                                       
                                          τ
                                       
                                       
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                 
                              
                              =
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    t
                                 
                              
                            units of flow have been allocated to the previous edge 
                              
                                 
                                    e
                                 
                                 
                                    ′
                                 
                              
                            in 
                              P
                            before 
                              e
                            up to time 
                              t
                              −
                              
                                 
                                    τ
                                 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                            and hence are available for allocation to 
                              P
                            at 
                              e
                            up to time 
                              t
                           . If 
                              D
                              ≥
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    t
                                 
                              
                           , then we are done.

Otherwise, 
                              D
                              <
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    t
                                 
                              
                           . But we know by the argumentation above that the amount of flow available for allocation to 
                              P
                            at 
                              e
                            up to time 
                              t
                            is at least 
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    t
                                 
                              
                           . Hence, at least the missing 
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    t
                                 
                              
                              −
                              D
                            units of flow are available for allocation up to time 
                              t
                           , i.e., in the algorithm we have 
                              θ
                              
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                              +
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                              ≥
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    t
                                 
                              
                              −
                              D
                            with 
                              θ
                              =
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              −
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              t
                              +
                              1
                              −
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                           . If 
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                              +
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                              ≥
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                           , we are also done, because then at least 
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                            units of flow are allocated by the algorithm per time between 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                            and 
                              t
                           , i.e., in total at least 
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    
                                       
                                          t
                                       
                                       
                                          i
                                       
                                    
                                    −
                                    1
                                 
                              
                              +
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              
                              θ
                              =
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 −
                                 
                                    
                                       τ
                                    
                                    
                                       
                                          
                                             P
                                          
                                          
                                             
                                                (
                                                s
                                                ,
                                                v
                                                )
                                             
                                          
                                       
                                    
                                 
                                 +
                                 θ
                                 )
                              
                              =
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              
                                 (
                                 t
                                 +
                                 1
                                 −
                                 
                                    
                                       τ
                                    
                                    
                                       
                                          
                                             P
                                          
                                          
                                             
                                                (
                                                s
                                                ,
                                                v
                                                )
                                             
                                          
                                       
                                    
                                 
                                 )
                              
                              =
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    t
                                 
                              
                            units of flow up to time 
                              t
                           .

Else, we have 
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                              +
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                              <
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                           . Then all units of flow that have been made available for 
                              P
                            at 
                              e
                            up to time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                            (at least 
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    
                                       
                                          t
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                            units of flow), except for those 
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                            units above, have already been allocated to 
                              P
                           . If 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              t
                           , then 
                              D
                              +
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                              +
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                            is exactly the amount of flow available for allocation for 
                              P
                            at 
                              e
                            up to time 
                              t
                           . We already know that (by induction hypothesis on 
                              e
                           ) it is at least 
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    t
                                 
                              
                           . Since it is allocated in the current iteration we are done.

Otherwise, we have 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              <
                              t
                           , i.e.,  
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              <
                              t
                              <
                              
                                 
                                    t
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                           . Since there is no time in the list 
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    e
                                 
                              
                            in between and 
                              
                                 
                                    Y
                                 
                                 
                                    P
                                 
                              
                              ≥
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                              +
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                           , the buffer is empty at time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              1
                              ≤
                              t
                           . Since the inflow rate 
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                            does not change (otherwise there would be another time in 
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    e
                                 
                              
                           ) we have 
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                              =
                              0
                            at time 
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                           . Hence, 
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              =
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                            and 
                              
                                 
                                    W
                                 
                                 
                                    P
                                 
                              
                              =
                              0
                            during the whole interval. So, 
                              D
                              +
                              
                                 (
                                 t
                                 +
                                 1
                                 −
                                 
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                              
                              
                                 
                                    X
                                 
                                 
                                    P
                                 
                              
                            is exactly the amount of flow available for allocation for 
                              P
                            at 
                              e
                            up to time 
                              t
                           . We already know that (by induction hypothesis on 
                              e
                           ) it is at least 
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    t
                                 
                              
                            and no unit of flow is stored in the buffer. Hence, 
                              
                                 
                                    d
                                 
                                 
                                    P
                                    ,
                                    e
                                    ,
                                    t
                                 
                              
                            units of flow are allocated to path 
                              P
                            at edge 
                              e
                            up to time 
                              t
                            by the algorithm.□

Next we give an example of the algorithm.


                     
                        Example 5
                        Consider the instance from Fig. A.10
                            for the maximum 
                              s
                              –
                              t
                           -flow problem with time horizon 
                              T
                              =
                              17
                            in the deterministic queuing model.

In the flow over time model, a maximum temporally repeated flow routes for exactly 
                              T
                              +
                              1
                              −
                              
                                 
                                    τ
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                              =
                              11
                            time units 
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                              =
                              4
                            units of flow along path 
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              =
                              
                                 (
                                 s
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       3
                                    
                                 
                                 ,
                                 t
                                 )
                              
                            (solid (red)), i.e., in total 
                              
                                 
                                    F
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                              =
                              11
                              ⋅
                              4
                              =
                              44
                            units, for 
                              T
                              +
                              1
                              −
                              
                                 
                                    τ
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                              =
                              10
                            time units 
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                              =
                              5
                            units of flow along path 
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                              =
                              
                                 (
                                 s
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       3
                                    
                                 
                                 ,
                                 t
                                 )
                              
                            (dashed (blue)), i.e., in total 
                              
                                 
                                    F
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                              =
                              10
                              ⋅
                              5
                              =
                              50
                            units, and for exactly 
                              T
                              +
                              1
                              −
                              
                                 
                                    τ
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          3
                                       
                                    
                                 
                              
                              =
                              11
                            time units 
                              
                                 
                                    
                                       
                                          f
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          3
                                       
                                    
                                 
                              
                              =
                              3
                            units of flow along path 
                              
                                 
                                    P
                                 
                                 
                                    3
                                 
                              
                              =
                              
                                 (
                                 s
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 t
                                 )
                              
                            (dash-dotted (green)), i.e., in total 
                              
                                 
                                    F
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          3
                                       
                                    
                                 
                              
                              =
                              11
                              ⋅
                              3
                              =
                              33
                            units, which gives a flow with flow value of 
                              
                                 val
                              
                              
                                 (
                                 
                                    
                                       f
                                    
                                    
                                       T
                                       +
                                       1
                                    
                                 
                                 )
                              
                              =
                              127
                           .

The algorithm works as stated in the following table. It states the following information: the active path denoted by 
                              
                                 
                                    P
                                 
                                 
                                    j
                                 
                              
                            for some 
                              j
                           , the amount of flow 
                              
                                 
                                    X
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                            available per time unit during the current interval, the lower bound 
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                            for the flow value of path 
                              
                                 
                                    P
                                 
                                 
                                    j
                                 
                              
                            and the for the capacity 
                              u
                            of the edge computed by the algorithm, the initial length 
                              θ
                            and the real length 
                              
                                 
                                    θ
                                 
                                 
                                    ˜
                                 
                              
                            of the current time interval. If the length of the interval is reduced, a new point in time is added to the current list 
                              
                                 
                                    T
                                 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                           . There is an entry 
                              
                                 
                                    Y
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                            for the solution of the integer program, the subsequent edge 
                              
                                 
                                    e
                                 
                                 
                                    P
                                 
                              
                            in 
                              P
                            after 
                              e
                            and the entry added to the list 
                              
                                 
                                    T
                                 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          
                                             
                                                P
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                              
                            of that edge. The last entries state the amount of flow 
                              
                                 
                                    W
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                            in the buffer at the end of the iteration and the amount of flow 
                              
                                 
                                    
                                       
                                          F
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                            that still has to be allocated to 
                              P
                            at 
                              e
                           .

The algorithm iterates over all edges (every iteration is a block in the table). The first line of every block states the current edge 
                              
                                 
                                    e
                                 
                                 
                                    i
                                 
                              
                            and the starting conditions for the current iteration. For the source the paths 
                              
                                 
                                    P
                                 
                                 
                                    j
                                 
                              
                            traversing the edge have some flow in the butter 
                              
                                 
                                    W
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                            at the beginning, otherwise the buffer is empty. Then the important data for every iteration over the time is stated explicitly in the middle lines of each block. If there is more than one active path, then for one time there are multiple lines, one for each path. The most important column is the 10th (add to 
                              
                                 
                                    T
                                 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          
                                             
                                                P
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                              
                           ), where Step 8 of the algorithm adds new times and flow values to the list of the upcoming edge 
                              
                                 
                                    e
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                            of path 
                              
                                 
                                    P
                                 
                                 
                                    j
                                 
                              
                           . In the last line of each block the iteration ends because 
                              
                                 
                                    
                                       
                                          F
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                              =
                              0
                            and additional times at which no more flow is sent are added to the list. See Table A.1
                           .

Some entries in the table for the list 
                              
                                 
                                    T
                                 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          
                                             
                                                P
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                              
                            seem to be missing. That is because the algorithm only adds entries in step 8 if they differ from the previous entry in the list. Since the flow rates do not change, no new time step is necessary.

The result is shown in Fig. A.10 on the right. Note that list 
                              
                                 
                                    T
                                 
                                 
                                    e
                                 
                              
                            for edge 
                              e
                            is drawn near the start vertex of 
                              e
                            for space reasons. So there are entries from different edges in the list of one vertex (e.g., vertex 
                              
                                 
                                    v
                                 
                                 
                                    2
                                 
                              
                           ). All flow units arrive at vertex 
                              t
                            up to time 17. By the previous lemma this is an upper bound for the flow value in the deterministic queuing model. So the flow value is maximum.⊲

With the lemma above we get the following result: 
                        Theorem 16
                        
                           Let 
                           
                              
                                 
                                    f
                                 
                                 
                                    T
                                 
                              
                            
                           be a maximum temporally repeated flow with time horizon 
                           
                              T
                            
                           . Then Algorithm  1  transformed 
                           
                              
                                 
                                    f
                                 
                                 
                                    T
                                 
                              
                            
                           into a maximum flow in the deterministic queuing model in polynomial time.
                        


                     
                        Proof
                        Since Lemma 15 holds for the terminal vertex 
                              t
                           , the flow value of the flow constructed by the algorithm (which gives the distribution of the flow to the edges for every vertex) is exactly the same as the flow value of the temporally repeated flow which was used as an input. Hence, starting with a maximum temporally repeated flow will give a flow with flow value equal to the capacity of a dynamic cut. Since this is an upper bound for the flow value in the deterministic queuing model, the resulting flow is maximum in this model.

In total we have to consider every vertex 
                              v
                            twice for every path traversing it (when it becomes active and inactive again). Since there are at most 
                              m
                            paths in the path decomposition for the temporally repeated flow in total we have at most 
                              풪
                              
                                 (
                                 m
                                 
                                 n
                                 )
                              
                            operations on the lists 
                              
                                 
                                    T
                                 
                                 
                                    e
                                 
                              
                            for 
                              e
                              ∈
                              E
                           . If we store every list by means of a balanced data structure we can insert and remove entries in 
                              풪
                              
                                 (
                                 log
                                 n
                                 )
                              
                            time. This yields a total complexity of 
                              풪
                              
                                 (
                                 m
                                 
                                 n
                                 log
                                 n
                                 )
                              
                           .□

Here we summarize the negative results for the sum objective mentioned in the paper.

First we give an example of a game with sum-objective, which has no Nash equilibrium. Note that this is only a slight modification from Example 2, which had no Nash equilibrium in the game with bottleneck objective.


                        
                           Example 6
                           Consider the graph 
                                 G
                                 =
                                 
                                    (
                                    V
                                    ,
                                    E
                                    )
                                 
                               from Fig. B.11
                               with 
                                 k
                                 =
                                 6
                               weighted users and the travel times and capacities as given in the figure near the edges as an instance of a dynamic routing game with sum objective. Commodities are denoted by 
                                 
                                    (
                                    
                                       
                                          s
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          t
                                       
                                       
                                          i
                                       
                                    
                                    )
                                 
                               for user 
                                 i
                                 ∈
                                 
                                    {
                                    1
                                    ,
                                    2
                                    ,
                                    3
                                    ,
                                    4
                                    ,
                                    5
                                    ,
                                    6
                                    }
                                 
                               with priority 
                                 i
                              , where the first two users are the main users, while the other four users are auxiliary users.

Note that the auxiliary users from commodity 3 to 6 do not have a choice on which route to take. Their purpose is to slow down the other users. So they are called blocking users. The users from commodities 1 and 2 have two path choices each, because the outer paths have a capacity smaller than their weight. Then there are four strategy profiles left which are drawn as graphs in the right of Fig. B.11.

Whenever both of the main users choose their left paths (upper left strategy profile), then the lower user arrives at vertex 
                                 
                                    
                                       v
                                    
                                    
                                       4
                                    
                                 
                               (filled) at the same time as the left blocking user from commodity 3. Since the blocking users has an inferior priority, the blocking user is slowed down by one time unit. This is enough to reach vertex 
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                               of the upper main user’s path at the same time (4) as the blocking user from commodity 5 does. Since the edge 
                                 
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                               has capacity 2 and the total load entering the edge at time 4 is given by 3, one of the users arrives at vertex 
                                 
                                    
                                       v
                                    
                                    
                                       2
                                    
                                 
                               at time 5 and the other one at time 6. The main user from commodity 1 arrives at vertex 
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                               at time 5, i.e., one time unit after the other two users. Hence, these users are allowed to leave edge 
                                 
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          v
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                               before her. Since user 1 has weight 2 equal to the capacity of the edge, she arrives at vertex 
                                 
                                    
                                       v
                                    
                                    
                                       2
                                    
                                 
                               one time step after the two blocking users left the edge, i.e., at time 7. So, she arrives at vertex 
                                 v
                               at time 8 and at the terminal at time 9, while the main user from commodity 2 reaches both vertices one unit in time earlier.

Hence, the user from commodity 1 changes to the upper right path (upper right strategy profile). Here, the blocking users arrive at vertex 
                                 
                                    
                                       v
                                    
                                    
                                       5
                                    
                                 
                               at the times 3 and 4 and at vertex 
                                 
                                    
                                       v
                                    
                                    
                                       6
                                    
                                 
                               at times 4 and 5, while the main user arrives at vertex 
                                 
                                    
                                       v
                                    
                                    
                                       5
                                    
                                 
                               at time 5 and at vertex 
                                 
                                    
                                       v
                                    
                                    
                                       6
                                    
                                 
                               at time 6 without being affected by the blocking users. So, both main users arrive at vertex 
                                 v
                               at time 7. Since the user from commodity 1 has a higher priority, she arrives at the terminal 
                                 
                                    
                                       t
                                    
                                    
                                       1
                                       ,
                                       2
                                    
                                 
                               at time 8, one time unit earlier than in her old path. So, this change is an improvement for her, while the travel time of the main user from commodity 2 is increased by one time unit. Hence, this user is unsatisfied with her path and changes to the lower right path (lower right strategy profile), which results in the same case as when both users took the left paths. Continuing with this behaviour shows that there is no Nash equilibrium for this instance.

The analysis above also shows that there is always a path of length 8 for both of the main users and there is never a path with smaller travel time. Hence, we can assume that there is always a path for the user 1 with travel time 8 and never a path with a smaller travel time. If we remove the user from commodity 1, then every path of user 2 has the minimum travel time and, hence, gives a Nash equilibrium. We need these statements later in the proof of Theorem 19.⊲

Here we show that the 
                           
                              Quickest Flow
                           
                          problem is hard to solve with a reduction similar to the one in the proof of Theorem 1 in the bottleneck case.


                        
                           Theorem 17
                           
                              The 
                              
                                 
                                    Quickest Flow
                                 
                                 problem is 
                              
                                 
                                    NP
                                 
                              
                              -complete in the strong sense in the two commodity case, even if all users are unweighted.
                           


                        
                           Proof
                           We use the same reduction from 
                                 3
                                 
                                    -SAT
                                 
                                as for the bottleneck case. The instance of 
                                 3
                                 
                                    -SAT
                                 
                                is given by a set of Boolean variables 
                                 X
                                 =
                                 
                                    {
                                    
                                       
                                          x
                                       
                                       
                                          0
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          x
                                       
                                       
                                          η
                                          −
                                          1
                                       
                                    
                                    }
                                 
                              , and 
                                 ρ
                               clauses 
                                 
                                    
                                       
                                          (
                                          
                                             
                                                C
                                             
                                             
                                                j
                                             
                                          
                                          )
                                       
                                    
                                    
                                       j
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       ρ
                                    
                                 
                               containing exactly three literals.

We construct an instance of 
                                 
                                    Quickest Flow
                                 
                                as we did for 
                                 
                                    NarrowestFlow
                                 
                                in Theorem 1. While the definitions are not repeated here, the illustration can be seen in the right part of Fig. B.12
                              , which is nearly the same as in the bottleneck case. One difference is, that the edges with travel times greater than one do not have to be replaced by consecutive edges with travel time equal to one here. Furthermore, we do not need local priorities for the edges for the makespan objective.

Note that in a flow with makespan 
                                 ≤
                                 T
                              , the edges connecting the gadgets can only be used by the first user. Hence, any user from the second commodity can only traverse a single gadget. Since every clause is connected to the second terminal vertex 
                                 
                                    
                                       t
                                    
                                    
                                       2
                                    
                                 
                               by a single edge and a total amount of 
                                 ρ
                               users have to be routed for the second commodity, a flow with makespan 
                                 ≤
                                 T
                               has to route a single unit of flow along each clause vertex. Furthermore, no user in this flow can be slowed down by another user, since every path has capacity 1, free travel time 
                                 T
                               and all users traversing a subpath of the path arrive at the common vertices at the same time.

With these observations it is easy to show that there is a flow with makespan 
                                 ≤
                                 T
                               iff there is a feasible truth assignment.

Let 
                                 f
                               be a feasible flow with makespan 
                                 T
                              . Then, a single unit of flow routes from 
                                 
                                    
                                       s
                                    
                                    
                                       1
                                    
                                 
                               to 
                                 
                                    
                                       t
                                    
                                    
                                       1
                                    
                                 
                               without meeting another user. We set the variable 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                               to true if this unit routes in the 
                                 i
                              th gadget along the lower path and we set the variable 
                                 
                                    
                                       x
                                    
                                    
                                       j
                                    
                                 
                               to false if it routes in the 
                                 j
                              th gadget along the upper path. Then the users from the second commodity route along the vertices from the upper path in gadget 
                                 i
                               and along vertices from the lower path in gadget 
                                 j
                              . From these vertices one unit of flow is routed to each of the clause vertices and afterwards to the sink. Since at least one vertex in the path of a gadget of the corresponding variable is connected to a clause it is contained in. In any clause there is one vertex that is set to true by the flow. So, the flow induces a truth assignment.

On the other hand, given a truth assignment, we route the user from the first commodity in the 
                                 i
                              th gadget along the lower path, if the variable 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 i
                                 ∈
                                 I
                              , in the truth assignment is true and we route the user in the 
                                 j
                              th gadget along the upper path, if the variable 
                                 
                                    
                                       x
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 j
                                 ∈
                                 J
                              , is false. At least one vertex in this path inside a gadget of the corresponding variable is connected to a clause the variable is contained in. In any clause there is one variable that is set to true. So, for the second commodity we route one unit of flow along a shortest path along a vertex in the upper path of each gadget 
                                 i
                                 ∈
                                 I
                               or one unit along a shortest path along a vertex in the lower path of each gadget 
                                 j
                                 ∈
                                 J
                               towards each clause vertex to which no unit of flow from the second commodity was already routed to. This gives a feasible flow and no two units of flow use the same edge. Hence, the makespan of this flow is given by 
                                 T
                              .□

The following lemma only states technical facts from the previous proof that are needed to prove Theorem 19.
                           Lemma 18
                           
                              For the instance built in the proof of   
                                 Theorem  17   the following statements hold true:
                              
                                 
                                    •
                                    
                                       There is a flow for all 
                                       
                                          k
                                        
                                       users (one user for commodity  1  and the remaining users for commodity  2) with makespan value equal to 
                                       
                                          T
                                        
                                       iff there is a feasible truth assignment for the underlying 
                                       
                                          3
                                          
                                             -SAT
                                          
                                          problem. Otherwise, the makespan value is at least 
                                       
                                          T
                                          +
                                          1
                                       
                                       .
                                    


                                       If we allocate the worst priority to the user from the first commodity and the makespan of the flow is larger than 
                                       
                                          T
                                       
                                       , then the travel time of the user from the first commodity is at least 
                                       
                                          T
                                          +
                                          1
                                       
                                       .
                                    


                                       All paths have travel time at least 
                                       
                                          T
                                       
                                       , even if the number of users is changed.
                                    


                                       If the single user from commodity  1  is removed, then there is always a flow with travel time 
                                       
                                          T
                                       
                                       , which can be computed easily.
                                    


                        
                           Proof
                           Results (1) and (3) follow directly from the proof above.

For the second statement we only have to note that if there is no feasible truth assignment, then the path of the user from the first commodity always intersects with the path of a user from the second commodity at the same time. Since the user from the first commodity has the lower priority, her travel time is increased by one and, hence, it is at least 
                                 T
                                 +
                                 1
                              .

For the last statement consider the instance built in the proof of Theorem 17 with only the users from commodity 2. Then no edge is blocked by the user from commodity 1 any more. The only goal is to send one user of commodity 2 to each of the 
                                 ρ
                               clause vertices. Since every clause contains one of the literals in the gadgets we just pick one out of each. Since there is a path from source 
                                 
                                    
                                       s
                                    
                                    
                                       2
                                    
                                 
                               to each of these literals, we just route one user to this literal, then to the corresponding clause vertex and from there to the terminal 
                                 
                                    
                                       t
                                    
                                    
                                       2
                                    
                                 
                              . This gives a flow for the 
                                 k
                                 −
                                 1
                               users of commodity 2 with makespan value 
                                 T
                              , which is computed efficiently.□

Here we show that the question whether a Nash equilibrium exists or not is hard to answer with a reduction similar to the one in the bottleneck case in the proof of Theorem 5. 
                           Theorem 19
                           
                              
                                 
                                    NashExistence
                                 
                                is 
                                 
                                    NP
                                 
                              -hard


                           
                              The 
                              
                                 
                                    NashExistence
                                 
                                 problem is 
                              
                                 
                                    NP
                                 
                              
                              -hard in the strong sense in the multi-commodity case, even if the graph is acyclic.
                           


                        
                           Proof
                           Now the hardness is shown with a reduction similar to the one for the bottleneck case. Nevertheless we state the full construction here, because some travel times and capacities differ. An instance of 
                                 3
                                 
                                    -SAT
                                 
                                is given by a set of Boolean variables 
                                 X
                                 =
                                 
                                    {
                                    
                                       
                                          x
                                       
                                       
                                          0
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          x
                                       
                                       
                                          η
                                          −
                                          1
                                       
                                    
                                    }
                                 
                              , and 
                                 ρ
                               clauses 
                                 
                                    
                                       
                                          (
                                          
                                             
                                                C
                                             
                                             
                                                j
                                             
                                          
                                          )
                                       
                                    
                                    
                                       j
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       ρ
                                    
                                 
                               containing exactly three literals. The idea behind the subsequent construction follows from two former results:

We already know by Lemma 18 that the graph 
                                 
                                    
                                       G
                                    
                                    
                                       D
                                    
                                 
                               constructed in the proof of Theorem 17, with one user routing for the first commodity, can be traversed with a travel time of 
                                 T
                               iff the instance of 
                                 3
                                 
                                    -SAT
                                 
                               has a feasible truth assignment. Otherwise, the travel time is at least 
                                 T
                                 +
                                 1
                              . On the other hand, without this user from the first commodity, the remaining 
                                 k
                                 −
                                 1
                               users can always route through the graph with makespan value 
                                 T
                               (independently on the instance of the 
                                 3
                                 
                                    -SAT
                                 
                                problem).

Furthermore, we have seen in Example 6 an instance with a graph 
                                 
                                    
                                       G
                                    
                                    
                                       N
                                    
                                 
                              , which has no Nash equilibrium if there is a single user routing for its first commodity. Additionally, there is always a path with travel time 
                                 T
                               for this user and never a path with smaller travel time. Without this user every feasible strategy profile of the other users gives a Nash equilibrium.

We add both graphs in one supergraph. First we add a super source 
                                 s
                               and connect it to the source 
                                 
                                    
                                       s
                                    
                                    
                                       1
                                    
                                 
                               of the first commodity in both graphs via an edge with travel time 1. We add a super terminal 
                                 t
                               and connect the terminal of the first commodity in 
                                 
                                    
                                       G
                                    
                                    
                                       N
                                    
                                 
                               to this terminal via an edge with travel time 1. The capacities of all of these edges are set to 2. Next, we have to make sure that the user from the first commodity in 
                                 
                                    
                                       G
                                    
                                    
                                       D
                                    
                                 
                               always suffers (i.e., has a makespan value of 
                                 T
                                 +
                                 6
                              ) if the flow has a makespan value higher than 
                                 T
                                 +
                                 5
                              . To that end we need to extend the instance a little bit, by adding vertices 
                                 
                                    
                                       s
                                    
                                    
                                       3
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       4
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       t
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 u
                                 ,
                                 w
                               and 
                                 
                                    
                                       t
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                               and the following edges: 
                                 
                                    
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                       
                                          
                                             Edge
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            3
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            s
                                                         
                                                         
                                                            4
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            2
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            2
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      w
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      ,
                                                      u
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      u
                                                      ,
                                                      w
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      w
                                                      ,
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            t
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             Travel time
                                             
                                                
                                                   T
                                                
                                             
                                             
                                                
                                                   T
                                                   +
                                                   3
                                                
                                             
                                             1
                                             2
                                             1
                                             2
                                             1
                                             1
                                          
                                          
                                             Capacity
                                             1
                                             2
                                             
                                                
                                                   2
                                                   ρ
                                                
                                             
                                             1
                                             2
                                             2
                                             2
                                             2
                                          
                                       
                                    
                                 
                              
                           

The former users from commodity 2 in 
                                 
                                    
                                       G
                                    
                                    
                                       D
                                    
                                 
                               now route from 
                                 
                                    
                                       s
                                    
                                    
                                       2
                                    
                                 
                               to 
                                 
                                    
                                       t
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                               and are called clause users. We add an additional blocking user, who routes from 
                                 
                                    
                                       s
                                    
                                    
                                       3
                                    
                                    
                                       ′
                                    
                                 
                               to 
                                 
                                    
                                       t
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                               and one from 
                                 
                                    
                                       s
                                    
                                    
                                       4
                                    
                                    
                                       ′
                                    
                                 
                               to 
                                 
                                    
                                       t
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                              . The users from the first commodity in both graphs are merged to one user, who routes from the new super source 
                                 s
                               to the new super terminal 
                                 t
                               and is called the main user here. Note that she has weight 2. All other users from graph 
                                 
                                    
                                       G
                                    
                                    
                                       N
                                    
                                 
                               have the same sources and terminals as before. The priorities of the users are chosen in such a way that the main user has highest priority, the user from the second commodity in 
                                 
                                    
                                       G
                                    
                                    
                                       N
                                    
                                 
                               has second highest priority, the blocking users in this subgraph have priorities 3 to 6, the clause users have priorities 7 to 
                                 6
                                 +
                                 η
                              , and the two remaining blocking users from 
                                 
                                    
                                       s
                                    
                                    
                                       3
                                    
                                    
                                       ′
                                    
                                 
                               and 
                                 
                                    
                                       s
                                    
                                    
                                       4
                                    
                                    
                                       ′
                                    
                                 
                               have priorities 
                                 7
                                 +
                                 η
                               and 
                                 8
                                 +
                                 η
                              , respectively. The actual values of the priorities are chosen arbitrarily. The whole illustration is shown in Fig. B.13
                              .


                              Claim 1. We have seen in Example 6, that in the graph 
                                 
                                    
                                       G
                                    
                                    
                                       N
                                    
                                 
                              , there is always a path for the user from commodity 1 with makespan value 8. Hence, there is always a path from 
                                 s
                               to 
                                 t
                               with makespan value 
                                 T
                                 +
                                 9
                              . But, then the user from the second commodity in this graph is not satisfied with her path.


                              Claim 2. The user from commodity 1 never routes along 
                                 
                                    
                                       t
                                    
                                    
                                       2
                                    
                                 
                              , since the capacity of edge 
                                 
                                    (
                                    
                                       
                                          t
                                       
                                       
                                          2
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    w
                                    )
                                 
                               is 1 and her weight is 2.


                              Claim 3. Iff the flow of the clause users in the subgraph 
                                 
                                    
                                       G
                                    
                                    
                                       D
                                    
                                 
                               has makespan value 
                                 ≥
                                 T
                                 +
                                 1
                              , i.e., the main user arrives at vertex 
                                 
                                    
                                       t
                                    
                                    
                                       1
                                    
                                 
                               after time 
                                 T
                                 +
                                 1
                               or a user from commodity 2 arrives at vertex 
                                 
                                    
                                       t
                                    
                                    
                                       2
                                    
                                 
                               after time 
                                 T
                              , then the user from commodity 1 cannot reach the terminal vertex 
                                 t
                               before time 
                                 T
                                 +
                                 10
                              . 
                                 Proof
                                 In the graph 
                                       
                                          
                                             G
                                          
                                          
                                             D
                                          
                                       
                                     with the modifications made above, all clause users arrive at vertex 
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                     at time 
                                       T
                                    , if none of them is slowed down before. At this time the user from 
                                       
                                          
                                             s
                                          
                                          
                                             3
                                          
                                          
                                             ′
                                          
                                       
                                     also arrives at vertex 
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                    . Since she has a lower priority, she has to wait for one time unit. Then she arrives at vertex 
                                       w
                                     at time 
                                       T
                                       +
                                       4
                                    . The user from source 
                                       
                                          
                                             s
                                          
                                          
                                             4
                                          
                                          
                                             ′
                                          
                                       
                                     arrives at vertex 
                                       w
                                     at time 
                                       T
                                       +
                                       3
                                    . The main user also traverses vertex 
                                       w
                                     when routing through 
                                       
                                          
                                             G
                                          
                                          
                                             D
                                          
                                       
                                    . If she is not slowed down by any other user, then she arrives at vertex 
                                       w
                                     at time 
                                       T
                                       +
                                       4
                                    . Since she has the best priority, she traverses the subsequent edge first at this point in time and arrives at the terminal 
                                       t
                                     at time 
                                       T
                                       +
                                       9
                                    .

If the main user was slowed down inside the graph 
                                       
                                          
                                             G
                                          
                                          
                                             D
                                          
                                       
                                    , then she arrives at vertex 
                                       
                                          
                                             t
                                          
                                          
                                             1
                                          
                                       
                                     after time 
                                       T
                                       +
                                       1
                                    . Then she reaches the terminal after time 
                                       T
                                       +
                                       9
                                    .

Otherwise, the main user is not slowed down inside 
                                       
                                          
                                             G
                                          
                                          
                                             D
                                          
                                       
                                     and, if at least one of the clause users arrives at least one time unit later than 
                                       T
                                     at 
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                    , then the user from 
                                       
                                          
                                             s
                                          
                                          
                                             3
                                          
                                          
                                             ′
                                          
                                       
                                     arrives at vertex 
                                       w
                                     at time 
                                       T
                                       +
                                       3
                                    . The user from source 
                                       
                                          
                                             s
                                          
                                          
                                             4
                                          
                                          
                                             ′
                                          
                                       
                                     also arrives at vertex 
                                       w
                                     at time 
                                       T
                                       +
                                       3
                                    . If both users arrive at the same time, then the user from source 
                                       
                                          
                                             s
                                          
                                          
                                             4
                                          
                                          
                                             ′
                                          
                                       
                                     has to wait for one time unit in the waiting queue. The main user arrives at vertex 
                                       w
                                     at time 
                                       T
                                       +
                                       4
                                    . Since she enters edge 
                                       
                                          (
                                          w
                                          ,
                                          
                                             
                                                t
                                             
                                             
                                                1
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                       
                                     after the other two users, she leaves the edge after them, i.e., not before time 
                                       T
                                       +
                                       6
                                    . Then she enters the terminal not before time 
                                       T
                                       +
                                       10
                                    .⊲


                              Main Claim. There is a feasible truth assignment for the 
                                 3
                                 
                                    -SAT
                                 
                               instance iff there is Nash equilibrium in the enhanced instance.


                              
                                 Proof
                                 Now assume that there is a feasible truth assignment for the 
                                       3
                                       
                                          -SAT
                                       
                                     instance. By Theorem 17 we can route the user from commodity 1 along a path from 
                                       s
                                     to 
                                       
                                          
                                             t
                                          
                                          
                                             1
                                          
                                       
                                     with travel time 
                                       T
                                    . The clause users can also be routed with travel time 
                                       T
                                     to the vertex 
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                       
                                    . Since they have a better priority than the blocking user from 
                                       
                                          
                                             s
                                          
                                          
                                             3
                                          
                                          
                                             ′
                                          
                                       
                                    , they reach their terminal 
                                       
                                          
                                             t
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                     at time 
                                       T
                                       +
                                       1
                                    , which is best possible. By Claim 3 the main user traverses the edge 
                                       
                                          (
                                          w
                                          ,
                                          
                                             
                                                t
                                             
                                             
                                                1
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                       
                                     with travel time 1, since the blocking user from source 
                                       
                                          
                                             s
                                          
                                          
                                             3
                                          
                                          
                                             ′
                                          
                                       
                                     is slowed down by the clause users. Hence, the main user arrives at her terminal 
                                       t
                                     at time 
                                       T
                                       +
                                       9
                                    , which is best possible. Without the user from the first commodity routing through the graph 
                                       
                                          
                                             G
                                          
                                          
                                             N
                                          
                                       
                                    , there is also a Nash equilibrium in this graph. Hence, there is a Nash equilibrium for the enhanced instance.

Assume conversely that there is no feasible truth assignment for the 
                                       3
                                       
                                          -SAT
                                       
                                     instance. By Theorem 17 any flow with one user routing for the first commodity in the graph 
                                       
                                          
                                             G
                                          
                                          
                                             D
                                          
                                       
                                     has makespan value 
                                       ≥
                                       T
                                       +
                                       1
                                    . By Claim 3 the main user receives makespan value 
                                       ≥
                                       T
                                       +
                                       10
                                     up to the terminal 
                                       t
                                    , when routing through the subgraph 
                                       
                                          
                                             G
                                          
                                          
                                             D
                                          
                                       
                                    . Since there is always a path in 
                                       
                                          
                                             G
                                          
                                          
                                             N
                                          
                                       
                                     with travel time 
                                       T
                                       +
                                       9
                                     by Claim 1, she changes her path to this graph. By Example 6, there is no Nash equilibrium in this subgraph. Hence, there cannot be a Nash equilibrium in the enhanced instance.□

@&#REFERENCES@&#

