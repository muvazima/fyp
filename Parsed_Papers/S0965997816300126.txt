@&#MAIN-TITLE@&#Flow simulation and visualization in a three-dimensional shipping information system

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We studied the flow visualization module in a 3D shipping information system.


                        
                        
                           
                           The surface-based flow visualization and 3D geographical environment were integrated.


                        
                        
                           
                           2D hydrodynamic model was used to simulate flow conditions with current inflow.


                        
                        
                           
                           Real-time flow conditions and ship attributes were considered for safe navigation.


                        
                        
                           
                           The system can provide early warnings based on GPS and inland navigational standards.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Flow visualization

Shipping information system

3D geographical environment

Information integration

Real-time flow conditions

Navigational safety

@&#ABSTRACT@&#


               
               
                  We develop a three-dimensional (3D) shipping information system as a case study for the integration of a dynamic flow field and a 3D virtual geographical environment. A 2D hydrodynamic model is formulated to calculate the waterway depth and velocity distribution by using real-time hydrologic monitoring data. The parallel OpenMP computations take 4min on a 20-core computer. The image-based flow visualization method is used to produce a 2D dynamic flow field on a curved surface, and the integration of dynamic flow fields with a 3D virtual geographical environment was achieved with the OpenSceneGraph rendering engine. Compared with a traditional 2D navigation map, the combination of a flow simulation and a visualization module can integrate flow velocity magnitude and distribution, and enhance ship navigation safety. This functionality will aid the display of integrated scientific information, and will have potential applications within 3D information systems in many domains.
               
            

@&#INTRODUCTION@&#

Shipping safety refers to the safety of life and of property, which are closely related, and is a priority of inland river navigation. In recent years, increasing water traffic density and extreme weather have led to many transportation accidents. For example, the ship “Oriental Star” sunk in the Jianli waterway in the middle reaches of the Yangtze River on June 1, 2015 because of bad weather; 442 persons died and there were many casualties. Further study of shipping navigation technologies is wanted to improve shipping safety.

Shipping navigation research focuses on navigational flow conditions and the Inland Electronic Navigational Chart (IENC). As regards the navigational flow conditions, water-level data collected from hydrological stations along the river are used to provide a navigable water-depth-contour surface, which is constructed by linear interpolation of said data in combination with that of the waterway terrain. The use of linear interpolation in calculating the water level, although computationally efficient, reduces the accuracy of the calculation, resulting in low-resolution spatiotemporal information of the waterway depth. Furthermore, water depth is only one of the factors that affect navigation; the characteristics of the flow, such as the velocity and the presence of cross flow and vortices, also affect navigational safety and efficiency [1–3]. Notwithstanding, current shipping information systems lack a velocity distribution display—ship helmsmen navigate with water depth and beacon information only, and beacons cannot be updated in real time to resolve flow transients. Recent studies on navigational flow simulation have focused on waterway regulation engineering [4,5], but have not provided real-time distributions of water depth and flow velocity for navigation.

Current IENC research is mainly focused on the two-dimensional (2D) IENC system, the development and application technology of which are relatively mature. The 2D IENC is a map generalization based on abstract symbols that represent the waterway environment. It accurately describes various waterway elements and presents them as 2D maps on a graphical interface and is used in navigation, monitoring and management [6], Fig. 1
                      shows a common IENC. Pecar-Ilic and Ruzic used a 2D IENC for the management of the Danube waterway data in Croatia [7]. Nilsson et al. presented a simulation study with empirical data of an advanced decision-support system for ship navigation using IENC [8], and Porathe et al. discussed how to avoid ship collision accident based on IENC system [9]. With the development of three-dimensional (3D) visualization technologies, 3D IENCs have also been introduced for inland navigation, which embed more detailed spatial waterway information [10]. Peng et al. applied 3D simulation technology to Navigation-Aid Management [11]. In a study of marine navigation, Gao and Shiotani used an Automatic Identification System and a 3D Geographic Information System (GIS) to present navigational information for the prevention of maritime disasters [12]. Compared with its 2D counterpart, the 3D IENC comprises a virtual 3D waterway environment. Despite the wide application of these IENC systems, there are limitations with the current IENC. One of the limitations is that it lacks information on real-time flow conditions, such as velocity distribution, only water-depth-contour is supplied in current system (see Fig. 1).

Flow visualization has become an important area of research in fluid dynamics since the widespread access to 3D solvers. It encompasses a range of techniques, such as direct-, feature-, texture- and geometry-based representations [13]. Each technique has a particular computational complexity [14]. With the development of computational fluid dynamics (CFD) and of the power of computing hardware, the demand for visualization solutions has grown rapidly across a variety of applications, such as product design evaluation, flood control, and the analysis of water pollution diffusion [15–18]. Such visualization software requires the functionality to extract flow features and, increasingly, the need to integrate it within a 3D environment to improve decision making [19–21]. For instance, in a virtual wind tunnel application [22,23], the authors not only used a flow visualization module to show flow conditions, they also used a 3D airplane model to determine the spatial position of the flow. How to integrate flow visualization with a 3D environment efficiently is of great interest to users when depicting a comprehensive overview of simulation datasets [17].

The main objective of this paper is to show how to integrate a 2D hydrodynamic model and a surface-based flow visualization into a 3D geospatial visualization system to provide a real-time distribution of the water depth and flow velocity for navigational and early warning purposes. We describe the implementation and function of the flow simulation and visualization module. The surface flow field is extracted via a texture-based flow visualization method and demonstrated in a 3D geographical environment. We also discuss the key technologies, functions and application of the flow simulation and visualization module.

The Yangtze River is the longest river in China. It has a complex navigational environment and a large volume of shipping. To ensure shipping safety and to improve the efficiency of navigation, a Yangtze River shipping information system was developed from 3D visualization and flow simulation technologies. The Yangtze River shipping information system is a virtual global geographic environment that includes a database, 3D environment visualization, data monitoring, river flow calculation, flow visualization, and early warning modules. An overview of the system is shown in Fig. 2
                     . The data monitoring module works with two types of information: ship position data and hydrologic data (e.g., river discharge and water level). The database stores the monitored data, the 3D geospatial data (e.g., terrain, bridges, ports, beacons) and corresponding attribute information, and the output from the river flow calculation module. The 3D environment visualization module reads the spatial data from the database and builds a 3D virtual environment, which includes information such as the waterway, ships, buildings, and beacons. The river flow calculation module is used to calculate the water depth and flow field from the current river discharge data. To compute quick enough to make early shipping warnings, the river flow calculations were made with a 2D hydrodynamic model, which uses an irregular quadrilateral grid to discretize the simulation area and solves the shallow water equations using the finite volume method, yielding the water depth and flow velocity information at each grid node [24]. The early warning module is used to determine the seaworthiness of a ship from its physical properties, the waterway flow conditions and the shipping regulations [25]. The flow visualization module renders the real-time water surface and flow field in the 3D virtual environment from the results of the flow calculation module, and displays the flow conditions for seaworthiness provided by the early warning module to aid shipping navigation.

The flow visualization module requires several specific functions. First, the features of the flow field, such as velocity magnitude and direction, water depth, vortices and circumfluence, should be displayed in an intuitive way. Second, the computation of the flow visualization should be efficient enough to be integrated with that of the 3D virtual environment. For the computational demands of the present application, contour map was used to show the water depth and seaworthy area, and the image based flow visualization (IBFV) method [26] was chosen to implement the dynamic flow field display.

The software was implemented in C++ and Qt. OpenSceneGraph (OSG) and osgEarth (www.osgearth.org) were used as the rendering engines to process the 3D data.

@&#METHODS@&#

The flow simulation model solves the shallow water equations to build a 2D numerical waterway model. The water data, which are measured at the hydrological stations on the river, are used as inputs to the hydrodynamic model. Next, the river reach is discretized into an unstructured grid and the water depth and velocity at each grid point are calculated using the finite volume method. From these results, the real-time water depth and velocity of the waterway can be displayed, respectively, as a contour surface and dynamic flow field.

The conservative form of the 2D shallow water equations are

                           
                              (1)
                              
                                 
                                    
                                       
                                          ∂
                                          U
                                       
                                       
                                          ∂
                                          t
                                       
                                    
                                    +
                                    
                                       
                                          ∂
                                          
                                             F
                                             x
                                          
                                       
                                       
                                          ∂
                                          x
                                       
                                    
                                    +
                                    
                                       
                                          ∂
                                          
                                             F
                                             y
                                          
                                       
                                       
                                          ∂
                                          y
                                       
                                    
                                    =
                                    S
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       
                                          U
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                [
                                                
                                                   
                                                      
                                                         h
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            h
                                                            u
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            h
                                                            v
                                                         
                                                      
                                                   
                                                
                                                ]
                                             
                                             ,
                                             
                                                F
                                                x
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                [
                                                
                                                   
                                                      
                                                         
                                                            h
                                                            u
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            h
                                                            
                                                               u
                                                               2
                                                            
                                                            +
                                                            
                                                               
                                                                  g
                                                                  
                                                                     h
                                                                     2
                                                                  
                                                               
                                                               2
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            h
                                                            u
                                                            v
                                                         
                                                      
                                                   
                                                
                                                ]
                                             
                                             ,
                                             
                                                F
                                                y
                                             
                                             =
                                             
                                                [
                                                
                                                   
                                                      
                                                         
                                                            h
                                                            v
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            h
                                                            u
                                                            v
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            h
                                                            
                                                               v
                                                               2
                                                            
                                                            +
                                                            
                                                               
                                                                  g
                                                                  
                                                                     h
                                                                     2
                                                                  
                                                               
                                                               2
                                                            
                                                         
                                                      
                                                   
                                                
                                                ]
                                             
                                             ,
                                             S
                                             =
                                             
                                                [
                                                
                                                   
                                                      
                                                         0
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            g
                                                            h
                                                            
                                                               (
                                                               
                                                                  
                                                                     S
                                                                     
                                                                        o
                                                                        x
                                                                     
                                                                  
                                                                  +
                                                                  
                                                                     S
                                                                     
                                                                        f
                                                                        x
                                                                     
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            g
                                                            h
                                                            
                                                               (
                                                               
                                                                  
                                                                     S
                                                                     
                                                                        o
                                                                        y
                                                                     
                                                                  
                                                                  +
                                                                  
                                                                     S
                                                                     
                                                                        f
                                                                        y
                                                                     
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                      
                                                   
                                                
                                                ]
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where h is the water depth, u and v are the flow velocities in the x and y directions, respectively, 
                           
                              
                                 S
                                 
                                    o
                                    x
                                 
                              
                              =
                              −
                              ∂
                              
                                 Z
                                 b
                              
                              /
                              ∂
                              x
                           
                         and 
                           
                              
                                 S
                                 
                                    o
                                    y
                                 
                              
                              =
                              −
                              ∂
                              
                                 Z
                                 b
                              
                              /
                              ∂
                              y
                           
                         are the bottom slope source terms in the x and y directions, respectively, 
                           
                              
                                 S
                                 
                                    f
                                    x
                                 
                              
                              =
                              
                                 n
                                 2
                              
                              u
                              
                                 
                                    
                                       u
                                       2
                                    
                                    +
                                    
                                       v
                                       2
                                    
                                 
                              
                              
                                 h
                                 
                                    −
                                    4
                                    /
                                    3
                                 
                              
                           
                         and 
                           
                              
                                 S
                                 
                                    f
                                    y
                                 
                              
                              =
                              
                                 n
                                 2
                              
                              v
                              
                                 
                                    
                                       u
                                       2
                                    
                                    +
                                    
                                       v
                                       2
                                    
                                 
                              
                              
                                 h
                                 
                                    −
                                    4
                                    /
                                    3
                                 
                              
                           
                         represent the loss gradient of friction in the x and y directions, respectively, Z
                           b
                         is the bottom elevation, and n is the Manning coefficient. The effects of the Coriolis and wind forces are omitted.

In the numerical simulation of the hydrodynamics for navigation applications, the slow flow boundary condition is generally preferred. In this study, we specify the flux at the upstream boundary and the water level at the downstream boundary. The waterway is discretized with an unstructured grid because of its irregular shape. The river reach is divided into a grid having 260,579 points and 253,161 quadrangles, with the average grid size of 20m.
                     

To test the correctness of the hydrodynamic model, three levels discharge and corresponding measure water level and velocity of observation points are used to verify the simulation accuracy. The selected upstream inflows are 4,480 m3/s, 22,700
m3/s, and 35,300
m3/s, respectively, and the three levels discharges represent the small, medium and large flow level of the river reach. The verification results show that the deviation of the water depth is between –0.07m and 0.08m, the deviation of the flow velocity is between –0.09m/s and 0.09m/s, and the relative deviation between –3.8% and 4.2%. The simulation results are in good agreement with the measured data.

The update frequency of the simulation is dependent on the supply rate of the input hydrological data. In the Yangtze River, the hydrological data is refreshed once per hour. It takes approximately 70min to compute the solution using a serial processing approach, which is too long for a real-time warning system. Therefore, we perform the processing in parallel using shared memory with OpenMP, which is the approach used in the Yangtze River shipping information system [24]. In this study, we achieved an acceleration rate of 17.8 on a 20-core workstation, decreasing the solution time to 4min.

The flow simulation and the flow visualization run on separate computers. The output from the flow simulation is stored in the database, which is read by the flow visualization module. If the measurement frequency of hydrological data changes, it will not influence the efficiency of the flow visualization module.

In this paper, we use the IBFV method to perform texture-based flow visualization. This method uses the warpage of background images instead of particle motion to reveal flow field conditions; i.e., it represents the motion of microscopic particles using graphical textures. A convex combination of the previous flow field and noise images are extracted from each frame. The flow image of each frame can be represented by the following equation,

                              
                                 (2)
                                 
                                    
                                       F
                                       
                                          (
                                          
                                             p
                                             k
                                          
                                          ,
                                          k
                                          )
                                       
                                       =
                                       
                                          (
                                          1
                                          −
                                          α
                                          )
                                       
                                       F
                                       
                                          (
                                          
                                             p
                                             
                                                k
                                                −
                                                1
                                             
                                          
                                          ,
                                          k
                                          −
                                          1
                                          )
                                       
                                       +
                                       α
                                       G
                                       
                                          (
                                          
                                             p
                                             k
                                          
                                          ,
                                          k
                                          )
                                       
                                       ,
                                    
                                 
                              
                           where k is the frame number, α is a blending weight, α ∈ [0, 1], p is the position of a particle, F is the RGB image intensity, and G is the noise image, which is used for delineating details in the flow. If the noise texture is uniform and constant after several time steps, the image will remain static. To simulate a dynamic flow field, it is necessary to use a series of temporally correlated noise images, which can be emulated by many different methods [26], thus the noise texture images can be recycled.

In 2D IBFV, first, a mesh is advected and rendered using the preceding image as a texture map. Next, the noise image is added and blended with the current flow image. The blended image is stored in texture memory for the next iteration. Finally, the flow field image is drawn and displayed on the screen. The IBFV algorithm is shown in Fig. 3.
                        

We begin by drawing the geometric shape of the distorted flow surface and then calculate the texture coordinates according to the velocity at each grid point. The displacement of each grid point can be calculated according to its current velocity. Let a grid's position be X(t) at time t and its velocity be V(X(t)). After a period of time Δt, the advected coordinate of the grid is

                              
                                 (3)
                                 
                                    
                                       X
                                       (
                                       
                                          t
                                          +
                                       
                                       Δ
                                       
                                          t
                                          )
                                          =
                                          X
                                          (
                                          t
                                          )
                                          +
                                       
                                       
                                          
                                             
                                                ∫
                                                t
                                             
                                          
                                          
                                             t
                                             +
                                             Δ
                                             t
                                          
                                       
                                       V
                                       
                                          (
                                          
                                             X
                                             (
                                             τ
                                             )
                                          
                                          )
                                       
                                       d
                                       τ
                                       ,
                                    
                                 
                              
                           where t is the start time of the integration, t+t is the end time of the integration, and τ is integration variable. The discrete formula is

                              
                                 (4)
                                 
                                    
                                       X
                                       
                                          (
                                          
                                             t
                                             +
                                             Δ
                                             t
                                          
                                          )
                                       
                                       =
                                       X
                                       
                                          (
                                          t
                                          )
                                       
                                       +
                                       V
                                       
                                          (
                                          
                                             X
                                             
                                                (
                                                t
                                                )
                                             
                                          
                                          )
                                       
                                       Δ
                                       t
                                       .
                                    
                                 
                              
                           
                        

The texture coordinates of each grid point should be calculated with respect to the original coordinates to show the deformation of the grid. The texture mapping coordinates are

                              
                                 (5)
                                 
                                    
                                       
                                          T
                                          x
                                       
                                       =
                                       
                                          (
                                          
                                             X
                                             o
                                          
                                          −
                                          
                                             X
                                             
                                                m
                                                i
                                                n
                                             
                                          
                                          )
                                       
                                       /
                                       T
                                       X
                                       ,
                                    
                                 
                              
                           
                           
                              
                                 (6)
                                 
                                    
                                       
                                          T
                                          y
                                       
                                       =
                                       
                                          (
                                          
                                             
                                                Y
                                                o
                                             
                                             −
                                             
                                                Y
                                                
                                                   m
                                                   i
                                                   n
                                                
                                             
                                          
                                          )
                                       
                                       /
                                       T
                                       Y
                                       ,
                                    
                                 
                              
                           where Xo
                            and Yo
                            are the grid point coordinates, TX and TY are, respectively, the length and width of the total grid, and Xmin
                            and Ymin
                            are the minimum coordinates of the grid.

The second implementation step involves the generation of noise texture, noise texture scaling, blending function settings, and color rendering injection for scalar data. This study generated 32 white noise textures of 64×64 resolution in an RGBA storage pattern. These noise images were used one-by-one in each frame to blend with the flow field image; the texture-blending mode can be activated by the GL_BLEND parameter. To improve the flow visualization accuracy, the noise texture mapping is made independent of the scale of the flow field. This means that flow field details can be displayed clearly, even when locally magnified.
                        

Flow visualization based on noise texture can correctly display the dynamic flow magnitude and direction, but cannot resolve water depth or other scalar data, which depends on grid color rendering. As with the texture rendering of the flow field, a color array is generated from the scalar data at each grid point. The color at each grid point is rendered according to its coordinates and grid connection index. Finally, it is blended with the texture image and a colored flow field image is produced. By using this approach it is feasible to texture map the scalar attributes for a more detailed final image. Fig. 4 shows the flow visualization effect with flow magnitude and water depth attributes.

Two-dimensional IBFV can be used on a curved surface. The main challenges are how to store the previous frame image and blend it with the noise image, and how to render the flow field in a 3D environment. Here, we use render-to-texture (RTT) technology to render a flow field onto a surface. This involves rendering the 2D IBFV onto a common texture, and then calling this texture in a 3D scene to draw the flow field, thus ultimately integrating the display of the surface flow field with a 3D virtual environment. An overview of the method implemented with OSG is shown in Fig. 5.
                           
                           
                        

The 3D shipping information system was implemented as a client–server model. The server, located in the Shipping Management Department, comprised the hydrological data acquisition module, network storage and computing server. It was used for the hydrological data collection, data storage, calculation and simulation of the real-time flow conditions, and storage of the flow solutions. During operation, the server periodically collects hydrological data from the hydrological stations and to calculate the current flow field with the 2D flow model.

The client, established onboard a ship, comprised the GPS information collection terminals and the computer system hosting the 3D shipping information system used for ship navigation and early warning. The 3D shipping information system shows the 3D virtual environment of the river reach. The ship model to be navigated is shown in the virtual waterway environment. The client retrieves the current waterway depth and velocity from the network database and displays them in the water-depth-contour surface and dynamic flow field, respectively. Based on the real-time flow conditions of the ship, the threshold of the flow velocity and minimum waterway dimensions are calculated in accordance with the “Navigation Standards of Inland Waterways”. Therefore, in combination with knowledge of the seaworthiness of the ship, the system can issue early warnings in real time to avoid water-traffic accidents.

The flow visualization module in the shipping information system is used to show the distribution of flow field characteristics and dynamic processes, as well as to provide practical warnings for shipping navigation. Ships can locate their position via GPS in the 3D virtual geographical environment and obtain the flow conditions around them. The flow field in the flow visualization module is colored according to the threshold of flow velocity and water depth determined by the early warning module to aid navigation. Furthermore, the flow direction distribution serves as a guide for sailing routes that avoid excessive lateral flow and circumfluence that would impact shipping speed and safety.

The developed 3D shipping information system, integrated with flow simulation functionality and the visualization module, can acquire real-time water depth and flow velocity fields. The spatial and temporal resolution of the water depth distribution is better than in traditional navigation systems. The spatial characteristics of the flow field are a novel feature, and the degree of seaworthiness of a specific ship is displayed together with the physical characteristics of the ship and the navigation rules, which makes the early warning module more comprehensive. In traditional navigation systems, the water depth and beacon information were focused. Once bad weather occurs, however, the beacons are not able to update in time with potentially complex flow patterns, which may cause navigational accidents.

The system developed in this paper can simulate the navigational conditions in real time, provide detailed flow information throughout the course, and show flow conditions via dynamic visualization. This provides helmsmen with an understanding of the navigational conditions that may efficiently reduce accidents. As shown in the navigational area in Fig. 6, according to the planning ship route, the water depth complies with the navigational regulations and the ship is also in the seaworthiness area defined by identified navigational beacons, it is suitable for both 3000-ton and 1000-ton ship. Beacons cannot be set for a single ship, however, because every ship has a unique combination of size, power and loading conditions. The 3000-ton ship can pass this reach along the planning ship route but the 1000-ton ship may have some hidden safety problems (see the area A, B and C in Fig. 6). If different thresholds of water depth and flow rate were set for every ship, the 1000-ton ship could be advised to pass the reach through the low-velocity area instead of through the high-velocity area to improve navigation safety. In addition, lateral flow and vortices also affect navigation safety. As shown in Fig. 7
                           , this information can aid ships make effective sailing decisions.

The real-time flow simulation and visualization module can provide auxiliary assistance for complex navigation conditions. In spatial terms, detailed information on water depth and flow velocity benefits ships to plan routes and helps them choose a safe route. In temporal terms, the system can make predictions of future flow conditions in the navigable reach to assist the development of a navigation plan and the selection of routes. In Fig. 8
                           , route choices are presented in different flow levels in the same reach. When heading upstream, the unilateral approach is adopted in low flow (discharge below 36000m3/s) through the corner (Fig. 8a); when the flow discharge is greater than 36000m3/s, the turning radius of the corner is too small to pass because of high flow velocity, the traditional method with IENC can only address the problem with a shipping ban. If there is real-time flow simulation and visualization module, detailed management of ship navigation can be accomplished, a route approach which drives across the main stream and then sail along the other side can solve the problem in high flow (Fig. 8b). The shipping information system can provide timely status information for ship navigation so that the vessels can make full use of secure waterway resources that change according to river discharge. The navigational safety in key reaches still requires real ship experiments and simulations to be carried out. Nonetheless, we submit that the ability to predict flow conditions is a significant contribution.

In the navigation system case study, as well as determining the flow field conditions at a particular location, we simultaneously displayed the detailed surrounding 3D environment and text annotations. Texture-based flow visualization generates flow field effects on the water surface by texture advection. The texture shows the flow direction in fine detail, and the velocity magnitude and water depth can be resolved with color maps. In terms of display effect, texture-based flow visualization gives consideration to both aesthetics and scientific principles in the 3D navigation environment by drawing the dynamic water surface according to its elevation data. This method has many advantages, such as highly adaptable to new data, no data pre-analysis, good presentation of flow field details, and applicability to both constant and variable fields.

@&#FUTURE WORK@&#

Hydrological monitoring data is the input to the flow simulation and the visualization module. The frequency at which monitoring information is received has a direct impact on the running of the system, especially when extreme weather occurs. Therefore, the main tasks of future research are to improve the monitoring frequency and to increase the spatial and temporal resolutions, the simulation speed and the accuracy of the flow process simulation.

The flow conditions leading to early navigational warnings are one of the important factors affecting the ship's safe navigation. Also relevant, for example, are the ship's maneuverability and the wind speed, the incorporation of which is suggested as an area for future work.

This research focuses on a method for flow visualization and its integration with a 3D virtual environment for the purposes of shipping navigation, and the texture-based method produces a realistic environment. In terms of the computational efficiency, however, there are several parameters that could be adjusted and implementation details that could be changed in the texture-based flow visualizations; e.g., the noise images, a noise advection approach.

@&#CONCLUSION@&#

Using the development of a 3D shipping information system as a case study, we demonstrated how to integrate a 2D hydrodynamic model and a dynamic flow field with a 3D virtual geographical environment. This provided real-time fields of the water depth and flow velocity for navigational and early warning purposes. We draw the following conclusions.

A 2D hydrodynamic model was developed to calculate the waterway depth and velocity distribution from real-time hydrologic monitoring data. The OpenMP parallel computations took 4min on a 20-core computer for a grid having 253,161 elements.

The dynamic visual effect of the flow field was implemented with IBFV and was integrated with the 3D waterway scene using the RTT technique. The integration of the dynamic flow field with the 3D virtual geographical environment was achieved with the OSG rendering engine. This functionality increases the capability for the presentation of scientific information, and should be of significant benefit to 3D information system applications.

A 3D shipping information system, integrated with flow simulation and a visualization module, could acquire real-time water depth and flow velocity distributions and give warning information for shipping. Compared with a traditional navigation map, the combination of a flow simulation and visualization module can efficiently enhance ship navigational safety. The spatial and temporal resolutions of the water depth distribution were greater than for the 2D map. Also added were the distributed characteristics of the flow field, and the display of the seaworthiness of a specific ship together with its physical characteristics and the salient navigation rules, to make the early warning module more comprehensive.

@&#ACKNOWLEDGMENTS@&#

This study was supported by the 12th Five-Year National Key Technology R&D Program (2012BAB05B05), the National Natural Science Foundation of China (51379076), and the Fundamental Research Funds for the Central Universities (2014ZD12).

@&#REFERENCES@&#

