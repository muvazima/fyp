@&#MAIN-TITLE@&#Evolutionary multi-objective resource allocation and scheduling in the Chinese navigation satellite system project

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The problem formulation is based on a real-world Chinese aerospace project.


                        
                        
                           
                           Each individual resource unit can have a different resource efficiency.


                        
                        
                           
                           The uncertainty of an activity duration is time-dependent (efficiency-dependent).


                        
                        
                           
                           A new co-evolutionary multi-objective optimization heuristic.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Evolutionary multiobjective optimization

Resource allocation and scheduling

Time-dependent uncertainty

Cooperative coevolutionary algorithm

Aerospace project

@&#ABSTRACT@&#


               
               
                  The development of appropriate project management techniques for Research and Development (R&D) projects has received significant academic and practical attention over the past few decades. Project managers typically face the problem of allocating resources and scheduling activities, for which the underlying combinatorial problem is NP-hard. The inherent uncertainty in many R&D environments increases the complexity of the problem.
                  This paper addresses the problem of resource allocation and activity scheduling with a focus on R&D projects. The work is different from the existing literature in at least three aspects: (1) the problem formulation is based on a real-world Chinese aerospace project, (2) each individual resource unit can have a different resource efficiency, and (3) the uncertainty of the duration of an activity is time-dependent (efficiency-dependent) in nature.
                  The problem is formulated as a multi-objective optimization model with simultaneous consideration of makespan and balance of resource efficiency. A cooperative coevolutionary multi-objective algorithm (CCMOA) is designed to produce high-quality solutions. Two chromosome representations and three resource selection policies are tested for the algorithm. The proposed CCMOA is found to be competitive when compared to MOEA/D and NSGA–II, which are two popular algorithms for multi-objective optimization.
               
            

@&#INTRODUCTION@&#

Large aerospace projects are typical complex Research and Development (R&D) projects and are characterized by a complex structure, reliance on intensive high-tech, and exposure to considerable uncertainty and risk. In recent years, one of the Chinese aerospace projects under development has been the BeiDou Navigation Satellite System (BD-NSS, China Satellite Navigation Office 2012), which is a global navigation satellite system compatible with other navigation satellite systems worldwide. The BD-NSS is comprised of three major components, space constellation, ground control segment and user terminals, and the following three phases.

                        
                           •
                           Phase 1: BeiDou Navigation Satellite Demonstration System (1994–2003)

Phase 2: BeiDou Navigation Satellite (regional) System (2004–2012)

Phase 3: BeiDou Navigation Satellite System with global coverage (2013–2020)

By the end of 2012, 16 BeiDou satellites were successfully launched and already formed the basic system, which can provide services for most parts of the Asia–Pacific region. However, expanding to a global satellite system in the near future is not an easy task. Compared with only technical competence, management competency – in the form of planning and scheduling – plays a more important role to the success of a project in the aerospace industry (Bauer, 2005). Following the general phases of complex product development (Abdelsalam & Bao, 2006), the design and planning process of the BeiDou project mainly includes the following stages: (1) defining the system requirements, (2) defining the system boundary, (3) decomposing the system into smaller activities (components), (4) defining the relationship among activities, and (5) sequencing the activities to form a production plan. Project managers will face the problem of deciding how to schedule the sequence of activities. In the first two phases of the BeiDou project, traditional project management techniques, such as Program Evaluation and Review Technique (PERT) (Malcolm, Roseboom, Clark, & Fazar, 1959) and Critical Chain (Rand, 2000), were employed to develop a project schedule.

The practice of the BeiDou project shows, however, that the management of complex R&D projects needs more efficient models and tools. For planning and scheduling, project managers have to face the following four managerial challenges. (1) Resource allocation and scheduling: the project consists of a set of activities which need the collaboration of different teams with various specialities and from different departments. Project managers should simultaneously consider how to allocate resources and how to effectively schedule activities. (2) Uncertain activity durations: most of the activities in the BeiDou project are new for project managers and the Chinese aerospace industrial departments. Uncertain internal and external environments increase the difficulty of activity duration evaluation. The actual duration is typically known only when the activity is completed. (3) Time dependency: during the development of the project, related factors are evolving with time. For instance, organization efficiency improves with practical and hands-on experience, and technology risk tends to decrease as experience accumulates and technological maturity grows. (4) Conflicting objectives: similar to other complex projects, the BeiDou project involves multiple conflicting objectives, such as minimization of makespan, maximization of the competency of selected group members and minimization of risk.

Unfortunately, little (if any) work has focused on the above-mentioned characteristics in the scheduling of complex projects. For the BeiDou project, a useful optimization and decision support model can provide project managers with effective candidate solutions to shorten the development cycle, save cost and improve team efficiency. This paper develops a multi-objective model for scheduling the BeiDou project in an uncertain environment. In the proposed model, decisions regarding resource allocation and activity sequencing are simultaneously considered. The impact of uncertainty on activity duration and the nature of time dependency are both taken into account in the proposed multi-objective model. Two objectives are to be optimized: minimization of makespan and maximization of resource balance. To solve the optimization problem, a cooperative coevolutionary approach is designed and two important aspects are investigated in the proposed algorithm: 1 representation of activity sequence and 2) resource allocation strategy for population initialization. Full data for all phases of the BeiDou project cannot be disclosed for reasons of confidentiality, but we present a case study on a selected subproject of the BeiDou program to clearly illustrate the addressed problem and to examine the output of the proposed algorithms.

The remainder of this paper is organized as follows. Section 2 gives a brief review of related work. A problem description and formulation is presented in Section 3. The proposed cooperative coevolutionary multi-objective algorithm is described in Section 4. A case study of a selected subproject of the BeiDou project is reported in Section 5. Additionally, in Section 6, we provide test results for a subset of a standard academic benchmark dataset for project scheduling, to verify whether the good performance observed for our algorithm for the BeiDou project can be transferred to a more general and standardized setting. In the same section, we also compare the performance of the proposed algorithm with two other popular algorithms for multi-objective optimization. Finally, and summary and some conclusions are provided in Section 7.

@&#RELATED WORK@&#

In the project planning phase, managers usually face the problem of deciding how to allocate resources and/or schedule activities (or tasks) to achieve specific objectives. Resources can be classified into four categories (Kolisch & Padman, 2001; Möhring, 1984; Talbot, 1982): renewable, nonrenewable, doubly constrained and partially renewable. With renewable resource constraints and when precedence constraints exist among activities, the resulting problem is referred to as the resource-constrained project scheduling problem (RCPSP), which constitutes a well studied branch in the domain of project scheduling. Various exact, heuristic and meta-heuristic approaches for RCPSP and its variants have been reported in the literature (Brucker, Drexl, Möhring, Neumann, & Pesch, 1999; Hartmann & Briskorn, 2010; Herroelen, De Reyck, & Demeulemeester, 1998; Kolisch & Padman, 2001).

In practice, project schedules usually suffer from a diversity of uncertain factors. Project scheduling under uncertainty has received increasing attention in recent years. Most work has focused on uncertainty in the activity durations (Creemers, De Reyck, & Leus, 2015; Gutjahr, 2015), which is also a common feature for complex projects. Uncertain durations are typically represented and modeled by random variables following various possible probability distributions, such as the triangular (Cho & Eppinger, 2005), uniform (Ballestín & Leus, 2009), exponential, beta (Lamas & Demeulemeester, 2015; Van de Vonder, Demeulemeester, & Herroelen, 2008), or normal (Bui, Michalewicz, Parkinson, & Abello, 2012) distribution. Artigues, Leus, and Talla Nobibon (2013) study project scheduling with uncertain activity durations where decision makers cannot with confidence associate probabilities with the possible outcomes of a decision. Various models and approaches have been proposed to capture the uncertain nature of complex projects; for further details of models and techniques for both deterministic and stochastic RCPSP, interested readers are referred to the comprehensive survey by Herroelen and Leus (2005).

In real-world project planning and scheduling, due to the fact that the execution environment is varying with time, the properties of project activities, such as resource requirements (Drezet & Billaut, 2008) and activity durations (Huang & Ding, 2011), are frequently also a function of time. In recent years, time-dependent phenomena have received a lot of attention in machine scheduling (Wang, Ng, Cheng, & Liu, 2008; Wang & Wang, 2015; Yin, Liu, Hao, & Zhou, 2012). The related literature in project planning and scheduling is rather scant, however.


                        Drezet and Billaut (2008) consider a project scheduling problem with labor resources, where the resource requirements of the activities are time-dependent. In their work, an integer linear formulation is presented and greedy algorithms are proposed to find an approximate solution. Chen and Askin (2009) address the joint problem of project selection and task scheduling in which project return was assumed to be a known function of project completion time. The authors develop an implicit enumeration algorithm to obtain a suitable project ordering. Huang and Ding (2011) study project scheduling with random time-dependent activity durations and propose a model that eliminates some of the problems encountered by deterministic critical-path computations. The authors cast different problem variants into a stochastic programming framework, and produce solutions by combining stochastic simulation with a genetic algorithm. In their conclusions, Huang and Ding explicitly point out that the inclusion of resource constraints is a prime topic for further study. In this paper, we will include resource constraints, albeit in a slightly different problem statement.

In the conventional RCPSP, activity durations are assumed to be independent of the allocated resource units; in particular, there is no need to differentiate which resource units are allocated to each activity, and thus it suffices to work with resource types (see also Section 3). Generalizations to incorporate so-called “time/resource trade-offs” have also been studied, see for instance Ranjbar, De Reyck, and Kianfar (2009); Talbot (1982). In this type of problems, typically a limited number of possible combinations of duration and resource consumption are listed; in this way, the (discrete) time/resource trade-off problem can also be seen as a special case of the more general multimode project scheduling (Mori & Tseng, 1997), in which each duration/resource combination constitutes a mode. A limited number of studies have been published on time/resource trade-offs with stochastic durations; Golenko-Ginzburg and Gonik (1998) were among the first to address this type of problem. In their work, activity durations are stochastic, but linearly dependent on the number of allocated resources. Xiong, Liu, Chen, and Abbass (2014) also modeled the activity duration as a decreasing function of the number of allocated resources.

The aforementioned works only consider the amount of allocated resources but not the efficiency of each resource unit. In the present work, the required number of resources for each activity is fixed, but the duration varies due to different efficiencies of the allocated resources. This model bears some similarity to the flexible job scheduling problem (FJSP), where each operation can have a different completion time when it is processed on different machines (Kacem, Hammadi, & Borne, 2002; Xiong, Xing, & Chen, 2013). In FJSP, however, each operation is processed by exactly one machine, while for the problem studied in this paper each activity requires the collaboration of multiple resource types and units. Thus, the decision space for resource allocation is far larger than for the FJSP. This paper will be among the first to consider the allocation of resource units with different efficiencies in project scheduling.

A project consists of a set of activities numbered from 0 to 
                           
                              n
                              +
                              1
                              ,
                           
                         denoted as 
                           
                              N
                              =
                              {
                              
                                 N
                                 0
                              
                              ,
                              
                                 N
                                 1
                              
                              ,
                              …
                              ,
                              
                                 N
                                 n
                              
                              ,
                              
                                 N
                                 
                                    n
                                    +
                                    1
                                 
                              
                              }
                           
                        . N
                        0 and 
                           
                              N
                              
                                 n
                                 +
                                 1
                              
                           
                         are dummy activities, representing the beginning and the end of the project. Without uncertainty, the duration, the start time and the finish time of an activity are respectively denoted by di, sti
                         and fti
                         (
                           
                              0
                              ≤
                              i
                              ≤
                              n
                              +
                              1
                           
                        ). In this study, renewable resources are considered during the execution of a project’s schedule. There are K resource types, and each activity Ni
                         requires rik
                         units of resource type k during each period of its execution (
                           
                              k
                              =
                              1
                              ,
                              …
                              ,
                              K
                           
                        ). During the whole project, the availability of each resource type k is limited to Rk
                        ; this implies that two or more activities may compete for some resource types during certain periods of their execution. The time interval 
                           
                              [
                              t
                              −
                              1
                              ,
                              t
                              ]
                           
                         is referred to as (time) period t, for integer t. For period 
                           
                              t
                              ∈
                              
                                 N
                                 0
                              
                              ,
                           
                         we define 
                           
                              A
                              
                                 (
                                 s
                                 t
                                 ,
                                 t
                                 )
                              
                              =
                              {
                              
                                 N
                                 i
                              
                              ∈
                              N
                              :
                              s
                              
                                 t
                                 i
                              
                              ≤
                              
                                 (
                                 t
                                 −
                                 1
                                 )
                              
                              ∧
                              
                                 (
                                 s
                                 
                                    t
                                    i
                                 
                                 +
                                 
                                    d
                                    i
                                 
                                 )
                              
                              ≥
                              t
                              }
                              ,
                           
                         containing the activities in schedule st that are active during period t.

                           
                              (1)
                              
                                 
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          A
                                          (
                                          s
                                          t
                                          ,
                                          t
                                          )
                                       
                                    
                                    
                                       r
                                       
                                          i
                                          k
                                       
                                    
                                    ≤
                                    
                                       R
                                       k
                                    
                                    
                                    ∀
                                    
                                    t
                                    ∈
                                    
                                       N
                                       0
                                    
                                    ,
                                    ∀
                                    k
                                    ∈
                                    
                                       {
                                       1
                                       ,
                                       …
                                       ,
                                       K
                                       }
                                    
                                 
                              
                           
                        Note that both rik
                         and Rk
                         are integers. Specifically for the BeiDou project, although the completion of an activity needs many different resource types, we will mainly focus on manpower planning.

The timing decisions for the individual activities may also be interrelated because activities may be precedence-related (see, for example, Eppinger, Nukala, & Whitney, 1997; Elmaghraby, 2000; Kolisch & Padman, 2001; Cho & Eppinger, 2005; De Reyck & Leus, 2008). The “finish-to-start” precedence relationship, where an activity cannot be started before all its predecessors are finished, is widely considered in project scheduling. Such relationships between the activities are represented by a binary relation E ⊂ N × N. We assume that E is a (strict) partial order on N, i.e. an irreflexive and transitive relation. It holds that for all Ni
                         with i > 0: (N
                        0, Ni
                        ) ∈ E, and for all Ni
                         with 
                           
                              i
                              <
                              n
                              +
                              1
                           
                        : 
                           
                              (
                              
                                 N
                                 i
                              
                              ,
                              
                                 N
                                 
                                    n
                                    +
                                    1
                                 
                              
                              )
                              ∈
                              E
                              ,
                           
                         or in other words, the dummy start and end activity are predecessor, respectively successor, of all other activities. A so-called precedence graph (or project network) G(N, E) is inferred, where the nodes correspond to activities and arcs connect precedence-related activities. This graph implies the following constraints:

                           
                              (2)
                              
                                 
                                    f
                                    
                                       t
                                       i
                                    
                                    ≤
                                    s
                                    
                                       t
                                       j
                                    
                                    
                                    ∀
                                    
                                    
                                       (
                                       
                                          N
                                          i
                                       
                                       ,
                                       
                                          N
                                          j
                                       
                                       )
                                    
                                    ∈
                                    E
                                 
                              
                           
                        
                     

Although the issue of stochastic durations has received a lot of attention in project planning and scheduling, the analysis of the sources and causes of uncertainty has been surprisingly neglected. In most research, the distributions of the stochastic durations for each activity are predefined and the parameters are assumed to be deterministic. In real-world project scheduling, however, activity duration and its stochastic nature are dependent on a wide range of factors, such as the allocated resources and the activity execution period. In this work, we focus on the case where activity duration is dependent on resource efficiency and the execution environment. The efficiency of a resource unit reflects its ability or speed to implement an activity; the execution environment influences the uncertainty level an activity may be confronted with. In order to incorporate these effects, we no longer use deterministic distribution parameters for the stochastic durations. Instead, the mean of the durations, which indicates an organization’s overall ability to perform an activity, may decrease as the resource efficiency improves via a learning effect. The duration variability, on the other hand, may become higher with an increase of the uncertainty level in the execution environment.

As an example, the Beidou project requires the collaboration of more than 1000 technical and managerial groups. Despite some similarity with conventional aerospace projects, the BeiDou project is a new and arduous task for most groups. These groups are growing with the practice of R&D activities for BeiDou; in other words, the groups efficiency and maturity are improving as time evolves. As a result, it is expected that the groups’ abilities to perform the activities will increase. Thus, for an activity, the mean duration is expected to be lower if it is started and executed later in time. The acquisition policy and/or other external factors are hard to predict for a long-term period, however. In other words, the uncertainty level may be higher for the long term, which possibly results in higher duration variability.

Since both resource efficiency as well as the uncertainty level of the execution environment can be modeled as functions of time, the activity durations can be considered to be time-dependent and are mathematically described as follows. The duration of activity Ni
                         is denoted by Di
                        , and all durations follow a right-skewed beta distribution, which is practical in real-world projects and has also been employed in a number of research articles (Ballestín & Leus, 2009; Golenko-Ginzburg & Gonik, 1998; Tsai & Gemmil, 1998; Van de Vonder, Demeulemeester, & Herroelen, 2007, 2008). The mean duration is denoted as 
                           
                              
                                 d
                                 i
                                 m
                              
                              ,
                           
                         which is dependent on resource efficiency. We use 
                           
                              d
                              i
                              *
                           
                         to denote the duration mean of activity Ni
                         for the case where Ni
                         is starting at the time when all required resources do not have any experience, i.e., the resource efficiency is at the lowest level. As indicated above, duration may decrease with the increase of resource efficiency. Thus, similar to Golenko-Ginzburg and Gonik (1998), 
                           
                              d
                              i
                              m
                           
                         is calculated as follows:

                           
                              (3)
                              
                                 
                                    
                                       d
                                       i
                                       m
                                    
                                    =
                                    
                                       
                                          d
                                          i
                                          *
                                       
                                       
                                          
                                             g
                                             1
                                          
                                          
                                             (
                                             t
                                             ,
                                             i
                                             ,
                                             x
                                             )
                                          
                                       
                                    
                                    ,
                                 
                              
                           
                        where t stands for the start time of activity Ni
                         and g
                        1(t, i, x) is the function that indicates resource efficiency or operating speed (Golenko-Ginzburg & Gonik, 1998). Note that g
                        1(t, i, x) is a non-decreasing function of t and is dependent on the decision variables for resource allocation, denoted by x, for the activity Ni
                        . The function g
                        1(t, i, x) is further detailed below.

For each resource unit 
                           
                              U
                              
                                 k
                                 
                                    m
                                    k
                                 
                              
                           
                         of each resource type (
                           
                              k
                              =
                              1
                              ,
                              …
                              ,
                              K
                              ;
                              
                                 m
                                 k
                              
                              =
                              1
                              ,
                              …
                              ,
                              
                                 R
                                 k
                              
                              
                                 )
                                 ,
                              
                           
                         the efficiency is denoted as 
                           
                              E
                              
                                 U
                                 
                                    k
                                    
                                       m
                                       k
                                    
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                           
                        . We use 
                           
                              
                                 B
                                 
                                    k
                                    
                                       m
                                       k
                                    
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                           
                         to represent the accumulated time that resource unit 
                           
                              U
                              
                                 k
                                 
                                    m
                                    k
                                 
                              
                           
                         has been working (busy) until time t. Although it can be expected that the efficiency is an increasing function of 
                           
                              
                                 B
                                 
                                    k
                                    
                                       m
                                       k
                                    
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                              ,
                           
                         the appropriate functional relation strongly depends on the specific practical setting. The relation between 
                           
                              E
                              
                                 U
                                 
                                    k
                                    
                                       m
                                       k
                                    
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                           
                         and 
                           
                              
                                 B
                                 
                                    k
                                    
                                       m
                                       k
                                    
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                           
                         is usually nonlinear. Chen and Edgington (2005), Ngwenyama, Guergachi, and McLaren (2007) and Gutjahr, Katzensteiner, Reiter, Stummer, and Denk (2010) utilize a logistic function to capture this type of relation. In the present paper, however, the function should especially capture the following characteristic: when 
                           
                              
                                 B
                                 
                                    k
                                    
                                       m
                                       k
                                    
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                           
                         equals 0 then the resource unit has no experience and does not contribute to any shortening of the activity durations. Thus, for our purposes, we decide to model the relation between EU and 
                           
                              
                                 B
                                 
                                    k
                                    
                                       m
                                       k
                                    
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                           
                         as follows:

                           
                              (4)
                              
                                 
                                    E
                                    
                                       U
                                       
                                          k
                                          
                                             m
                                             k
                                          
                                       
                                    
                                    
                                       (
                                       t
                                       )
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   1
                                                   +
                                                   
                                                      
                                                         
                                                            a
                                                            k
                                                         
                                                         
                                                            exp
                                                            (
                                                            
                                                               
                                                                  b
                                                                  k
                                                               
                                                               
                                                                  
                                                                     B
                                                                     
                                                                        k
                                                                        
                                                                           m
                                                                           k
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     (
                                                                     t
                                                                     )
                                                                  
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                   
                                                   ,
                                                
                                             
                                             
                                                
                                                   
                                                      B
                                                      
                                                         k
                                                         
                                                            m
                                                            k
                                                         
                                                      
                                                   
                                                   
                                                      (
                                                      t
                                                      )
                                                   
                                                   >
                                                   0
                                                
                                             
                                          
                                          
                                             
                                          
                                          
                                             
                                                
                                                   1
                                                   ,
                                                
                                             
                                             
                                                
                                                   
                                                      B
                                                      
                                                         k
                                                         
                                                            m
                                                            k
                                                         
                                                      
                                                   
                                                   
                                                      (
                                                      t
                                                      )
                                                   
                                                   =
                                                   0
                                                   ,
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where ak
                         and bk
                         are non-negative coefficients for each resource type k and ak
                         ∈ [0, 1]. From the above equation it can be seen that 
                           
                              1
                              ≤
                              E
                              
                                 U
                                 
                                    k
                                    
                                       m
                                       k
                                    
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                              ≤
                              1
                              +
                              
                                 a
                                 k
                              
                           
                         always holds.

For an activity Ni
                         that is starting at time t, the overall resource efficiency is computed as the average efficiency over all required resource units. It is calculated as follows:

                           
                              (5)
                              
                                 
                                    
                                       
                                          
                                             E
                                             
                                                U
                                                i
                                             
                                          
                                          ¯
                                       
                                       
                                          (
                                          t
                                          ,
                                          x
                                          )
                                       
                                    
                                    =
                                    
                                       
                                          
                                             ∑
                                             
                                                k
                                                =
                                                1
                                             
                                             K
                                          
                                          
                                             ∑
                                             
                                                
                                                   m
                                                   k
                                                
                                                =
                                                1
                                             
                                             
                                                R
                                                k
                                             
                                          
                                          
                                             x
                                             
                                                i
                                                k
                                                
                                                   m
                                                   k
                                                
                                             
                                          
                                          E
                                          
                                             U
                                             
                                                k
                                                
                                                   m
                                                   k
                                                
                                             
                                          
                                          
                                             (
                                             t
                                             )
                                          
                                       
                                       
                                          
                                             ∑
                                             
                                                k
                                                =
                                                1
                                             
                                             K
                                          
                                          
                                             r
                                             
                                                i
                                                k
                                             
                                          
                                       
                                    
                                    ,
                                 
                              
                           
                        where

                           
                              (6)
                              
                                 
                                    
                                       x
                                       
                                          i
                                          k
                                          
                                             m
                                             k
                                          
                                       
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                1
                                             
                                             
                                                
                                                   if
                                                   
                                                   the
                                                   
                                                   
                                                      m
                                                      k
                                                   
                                                   th
                                                   
                                                   unit
                                                   
                                                   of
                                                   
                                                   resource
                                                   
                                                   type
                                                   
                                                   k
                                                
                                             
                                          
                                          
                                             
                                             
                                                
                                                   is
                                                   
                                                   assigned
                                                   
                                                   to
                                                   
                                                   activity
                                                   
                                                   
                                                      N
                                                      i
                                                   
                                                   ,
                                                
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                otherwise.
                                             
                                          
                                       
                                    
                                 
                              
                           
                        We now set:

                           
                              (7)
                              
                                 
                                    
                                       
                                          g
                                          1
                                       
                                       
                                          (
                                          t
                                          ,
                                          i
                                          ,
                                          x
                                          )
                                       
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         E
                                                         
                                                            U
                                                            i
                                                         
                                                      
                                                      ¯
                                                   
                                                   
                                                      (
                                                      t
                                                      ,
                                                      x
                                                      )
                                                   
                                                
                                             
                                             
                                                
                                                   if
                                                   
                                                   t
                                                   >
                                                   0
                                                   ,
                                                
                                             
                                          
                                          
                                             
                                                1
                                             
                                             
                                                
                                                   if
                                                   
                                                   t
                                                   =
                                                   0
                                                   .
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The minimal and maximal durations of activity Ni
                        , written respectively as 
                           
                              d
                              i
                              min
                           
                         and 
                           
                              
                                 d
                                 i
                                 max
                              
                              ,
                           
                         are determined as follows:

                           
                              (8)
                              
                                 
                                    
                                       
                                          
                                             d
                                             i
                                             min
                                          
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                d
                                                i
                                                m
                                             
                                             
                                                (
                                                1
                                                −
                                                
                                                   g
                                                   2
                                                
                                                
                                                   (
                                                   t
                                                   )
                                                
                                                )
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       
                                          
                                             d
                                             i
                                             max
                                          
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                d
                                                i
                                                m
                                             
                                             
                                                (
                                                1
                                                +
                                                
                                                   g
                                                   3
                                                
                                                
                                                   (
                                                   t
                                                   )
                                                
                                                )
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where g
                        2(t) and g
                        3(t) are both non-decreasing functions of t. As was noted for g
                        1, also g
                        2 and g
                        3 may take various forms in practical projects, depending on the specificities of the environment: the identification of functional forms and related parameters requires consideration of many factors and should exploit experts’ knowledge, historical data, etc. In practice, the uncertainty levels of the durations can for instance be estimated based on data from other similar projects. For the sake of illustration, we assume that for each activity, g
                        2(t) and g
                        3(t) take the following forms:

                           
                              (10)
                              
                                 
                                    
                                       
                                          
                                             
                                                g
                                                2
                                             
                                             
                                                (
                                                t
                                                )
                                             
                                          
                                       
                                       
                                          =
                                       
                                       
                                          
                                             0.2
                                             
                                                (
                                                1
                                                +
                                                
                                                   t
                                                   
                                                      D
                                                      L
                                                   
                                                
                                                )
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       
                                          
                                             
                                                g
                                                3
                                             
                                             
                                                (
                                                t
                                                )
                                             
                                          
                                       
                                       
                                          =
                                       
                                       
                                          
                                             0.4
                                             
                                                (
                                                1
                                                +
                                                
                                                   t
                                                   
                                                      D
                                                      L
                                                   
                                                
                                                )
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where DL is the predefined deadline of the project. Note that the uncertainty range widens for later time periods. It is commonly assumed in operations and supply-chain management that long-term forecasts tend to be less accurate than short-term forecasts; that is, long-term forecasts have a larger standard deviation of error relative to the mean than short-term forecasts (Chopra & Meindl, 2007), and we feel that this is a reasonable assumption also for long-term projects.

In the present paper, durations are modeled to follow a beta distribution, which is parameterized by two positive shape parameters denoted by α and β. In line with Van de Vonder et al. (2008), the parameters α and β are set to 2 and 5, respectively.

The model proposed in this paper provides an avenue for quantitatively supporting planning and control of the BeiDou project. In practice, project managers may focus on several objectives as measures of the quality of a schedule in an uncertain environment; here, we consider the two most important objectives in the BeiDou project, namely makespan and balance of resource efficiency.

One of the major objectives of the management of the BeiDou project is to shorten the completion time of the project. In the presence of uncertainty, expected makespan is a widely used measure to assess a schedule’s performance. Analytical evaluation of the expected makespan is typically highly intractable  (Hagstrom, 1988; Möhring, 2001) and expected makespan is usually approximated by means of simulation, as follows:

                              
                                 (12)
                                 
                                    
                                       
                                          f
                                          1
                                       
                                       =
                                       
                                          
                                             
                                                ∑
                                                
                                                   p
                                                   =
                                                   1
                                                
                                                P
                                             
                                             f
                                             
                                                t
                                                
                                                   N
                                                   +
                                                   1
                                                
                                                p
                                             
                                          
                                          P
                                       
                                       ,
                                    
                                 
                              
                           which is to be minimized, where 
                              
                                 f
                                 
                                    t
                                    
                                       N
                                       +
                                       1
                                    
                                    p
                                 
                              
                            is the makespan achieved in the pth simulation replication. The number P of replications in the simulation is an important parameter in the approximation. In project scheduling, Stork (2001) considers 
                              
                                 P
                                 =
                                 200
                              
                            to be reasonable for computing the expected makespan. Ballestín and Leus (2009) use 1000 for computing correlations and fitting distributions, while they use only 10 during the optimization process.

As indicated earlier, the development of the BeiDou system is a long-term and challenging project. The project manager requires stable and robust R&D groups to tackle future complex tasks. If the competency levels of group members vary strongly, meaning that some members have very high efficiency while others lack experience, then the ability of the group is very sensitive to the loss of members with high efficiency. Such a group is considered to be non-robust. Thus, the project manager will prefer a group whose members have similar competency levels and maturity. We will measure the stability and robustness of project resources by a variance index that is also used in other long-term planning problems, such as military capability planning (Abbass et al., 2008). Specifically, we employ an estimate of the average standard deviation as an indicator for the (lack of) balance of resource efficiency. The objective is formulated as follows:

                              
                                 (13)
                                 
                                    
                                       
                                       
                                          f
                                          2
                                       
                                       =
                                       
                                          
                                             
                                                ∑
                                                
                                                   p
                                                   =
                                                   1
                                                
                                                P
                                             
                                             
                                                ∑
                                                
                                                   k
                                                   =
                                                   1
                                                
                                                K
                                             
                                             
                                                σ
                                                k
                                                p
                                             
                                          
                                          
                                             P
                                             K
                                          
                                       
                                       ,
                                    
                                 
                              
                           where 
                              
                                 σ
                                 k
                                 p
                              
                            is the standard deviation of the efficiency of resource type Rk
                            in replication p, computed as follows:

                              
                                 (14)
                                 
                                    
                                       
                                          σ
                                          k
                                          p
                                       
                                       =
                                       
                                          
                                             
                                                1
                                                
                                                   R
                                                   k
                                                
                                             
                                             
                                                ∑
                                                
                                                   
                                                      m
                                                      k
                                                   
                                                   =
                                                   1
                                                
                                                
                                                   R
                                                   k
                                                
                                             
                                             
                                                
                                                   (
                                                   E
                                                   
                                                      U
                                                      
                                                         k
                                                         
                                                            m
                                                            k
                                                         
                                                      
                                                      p
                                                   
                                                   −
                                                   
                                                      
                                                         E
                                                         
                                                            U
                                                            
                                                               k
                                                            
                                                            p
                                                         
                                                      
                                                      ¯
                                                   
                                                   )
                                                
                                                2
                                             
                                          
                                       
                                       ,
                                    
                                 
                              
                           where 
                              
                                 
                                    E
                                    
                                       U
                                       
                                          k
                                       
                                       p
                                    
                                 
                                 ¯
                              
                            is the average efficiency of the kth resource type in the pth replication. Low values for f
                           2 correspond to more balanced efficiencies among different resource units of the same type. The value zero for f
                           2 would indicate that for each resource type all units have exactly the same efficiency. In practice, the interpretation by a manager of a score for f
                           2 is obviously less straightforward than a value for the (expected) makespan estimate f
                           1. The solution method that we develop infra will allow to approximate the trade-off curve between f
                           1 and f
                           2; by investigating the detailed resource allocation decisions of individual solutions, a manager can evaluate how much balance in resource efficiency needs to be sacrificed in order to achieve a desirable expected makespan.

There are two sets of decisions to be made: activity sequencing and resource allocation. For activity sequencing, experimental results suggest that both the activity-list (AL) representation and the random-key (RK) representation can lead to very good results (Debels & Vanhoucke, 2009). In order to investigate the impact of different schedule representations for the problem, we use both schedule representations in our work. An AL representation is denoted as a vector 
                           
                              I
                              =
                              (
                              
                                 I
                                 1
                              
                              ,
                              
                                 I
                                 2
                              
                              ,
                              …
                              ,
                              
                                 I
                                 
                                    n
                                    −
                                    1
                                 
                              
                              ,
                              
                                 I
                                 n
                              
                              )
                              ,
                           
                         where Ii
                         (
                           
                              i
                              =
                              1
                              ,
                              …
                              ,
                              n
                           
                        ) is the index of the activity in the position i. An RK representation will be written as 
                           
                              V
                              =
                              (
                              
                                 V
                                 1
                              
                              ,
                              
                                 V
                                 2
                              
                              ,
                              …
                              ,
                              
                                 V
                                 
                                    n
                                    −
                                    1
                                 
                              
                              ,
                              
                                 V
                                 n
                              
                              )
                              ,
                           
                         where Vi
                         (
                           
                              i
                              =
                              1
                              ,
                              …
                              ,
                              n
                           
                        ) is the priority of the ith activity and a lower value indicates a higher priority.

In conventional project scheduling, all units of a resource type are assumed to be perfectly interchangeable, with the same efficiency. In our model, resources can have different efficiencies, for instance because of learning effects. Thus, it is necessary to differentiate the individual resource units that are allocated to each activity. These detailed decisions of resource allocation are given by 
                           
                              
                                 x
                                 
                                    i
                                    k
                                    
                                       m
                                       k
                                    
                                 
                              
                              ,
                           
                         and can be represented using resource allocation matrices, with one matrix for each activity Ni
                        , as illustrated in Fig. 1
                        . The element 
                           
                              x
                              
                                 i
                                 k
                                 
                                    m
                                    k
                                 
                              
                           
                         in matrix i (
                           
                              i
                              =
                              1
                              ,
                              …
                              ,
                              n
                              ;
                              k
                              =
                              1
                              ,
                              …
                              ,
                              K
                              ;
                              
                                 m
                                 k
                              
                              =
                              1
                              ,
                              …
                              ,
                              
                                 R
                                 k
                              
                           
                        ) is a binary value, where the value 1 indicates that the mk
                        th resource unit of type k is allocated to activity Ni
                        , and 0 means no allocation.

In order to transform a solution representation (an activity sequence and resource allocation decisions) into a schedule in a stochastic environment, we resort to a resource-based policy (RB-policy)(Ashtiani, Leus, & Aryanezhad, 2011). At any decision time, all unstarted activities in the activity list will be considered in the order imposed by the AL or RK representation, and started if this does not violate any precedence nor resource constraint. Then, activity durations are sampled and we proceed to the first end of one of the activities to make new choices.

With known durations d, a feasible schedule st respects the resource constraints (1) and the precedence constraints (2). With stochastic durations, however, a solution to the scheduling problem at hand is not one schedule but rather a policy: a set of decision rules that decide when to start which activities. Following Radermacher (1981) and Möhring (2000), we define a policy Π as a function 
                           
                              Π
                              :
                              
                                 R
                                 n
                              
                              →
                              
                                 R
                                 n
                              
                              ,
                           
                         mapping duration realizations (or “scenarios”) d to feasible schedules st and satisfying the so-called non-anticipativity constraint, which ensures that a decision made at any time t can only be based on information that became available before or at time t. We refer to Radermacher (1981), Möhring (2000) and Coolen, Wei, Talla Nobibon, and Leus (2014) for more details on the use of policies as functions in stochastic scheduling.

The problem studied in this article then boils down to selecting a policy Π
                        * within a specific class of policies that achieves a good (minimal) score on the objectives f
                        1 and f
                        2: we are in a bi-criteria setting. In particular, we focus on the class of policies that is parameterized by choices for resource allocation and activity sequencing as described in Section 3.4; in other words our decision variables are x on the one hand, and V or I on the other hand.

It should be noted that for evaluation of objectives in the presence of uncertainty, the general procedure used in simulation-optimization, i.e., drawing a sample of realization vectors of activity durations in advance, cannot be implemented in the present problem, because the distribution parameters of the activity durations are not available in advance. Rather, durations are generated as needed in the simulation. For the comparison of two solutions, we use the concept of statistical Pareto dominance, as introduced by Nguyen, Zhang, Johnston, and Tan (2014). For two solutions s
                        1 and s
                        2, for instance, if 
                           
                              
                                 f
                                 1
                              
                              
                                 (
                                 
                                    s
                                    1
                                 
                                 )
                              
                              =
                              5.2
                           
                         and 
                           
                              
                                 f
                                 1
                              
                              
                                 (
                                 
                                    s
                                    2
                                 
                                 )
                              
                              =
                              5.1
                              ,
                           
                         while 
                           
                              
                                 f
                                 2
                              
                              
                                 (
                                 
                                    s
                                    1
                                 
                                 )
                              
                              =
                              0.050
                           
                         and 
                           
                              
                                 f
                                 2
                              
                              
                                 (
                                 
                                    s
                                    2
                                 
                                 )
                              
                              =
                              0.049
                              ,
                           
                         then under the classic definition of dominance we would conclude that s
                        1 is dominated by s
                        2. For statistical Pareto dominance, however, s
                        1 and s
                        2 might be incomparable (neither solution dominates the other) because there is no significant difference in f
                        1 and f
                        2. In this paper, we use the Welch’s t–test for statistical significance.

The classic RCPSP, minimizing makespan with renewable resources and finish-start precedence constraints, is NP-hard in the strong sense. Several additional factors, such as time-dependent uncertain durations and extra complications regarding resource efficiencies, further increase the complexity of the problem. We therefore develop an evolutionary algorithm to tackle the multi-objective version of the problem; specifically, we design a cooperative co-evolutionary multi-objective algorithm (CCMOA). We anticipate that the reciprocal interaction among the populations in this co-evolutionary method offers a convenient structure to manage the interaction between the different decisions that need to be made.

Coevolutionary techniques have proved to be very effective for handling large and complex problems by means of a divide-and-conquer strategy (Tan, Yang, & Goh, 2006; Zhao, Alam, & Abbass, 2014). More specifically, cooperative coevolution divides a large system into different modules and evolves the modules separately (Potter & Jong, 2000). Cooperative coevolutionary algorithms involve a number of independently evolving components that together form a complex structure for solving difficult problems (Tan et al., 2006). The fitness of a component depends on its ability to collaborate with components from other sub-populations. During recent years, cooperative coevolutionary algorithms have been applied to solve various scheduling problems, such as software project staff scheduling (Ren, Harman, & Penta, 2011), flexible job shop scheduling (Lei, 2012), dynamic multi-objective job shop scheduling (Nguyen et al., 2014) and arc routing (Mei, Li, & Yao, 2014). To the best of our knowledge, however, there is no literature using cooperative coevolutionary algorithms to solve the multi-objective problem of resource allocation and activity scheduling under uncertainty and in complex R&D projects.


                        Fig. 2
                         shows an overview of the proposed CCMOA. The population is divided into two sub-populations, representing activity sequence (P
                        1) and resource allocation (P
                        2), respectively. Each individual 
                           
                              I
                              n
                              
                                 d
                                 i
                                 r
                              
                           
                         in each sub-population Pi
                         (
                           
                              i
                              =
                              1
                              ,
                              2
                              )
                           
                         is combined with a representative from the other sub-population to form a complete individual. An external archive is used to store the non-dominated individuals. The archive is updated as the evaluation of the generated individuals progresses. The global algorithmic structure of the proposed CCMOA is given in Algorithm 1
                        . Details of the individual steps will be provided in following subsections.

The CCMOA starts by building an initial population for each sub-population. For the AL schedule representation, an individual is generated stepwise, filling one position at a time (Hartmann, 1998; Shadrokh & Kianfar, 2007). For each position q in the list (
                           
                              q
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              n
                           
                        ), an activity is randomly selected from the eligible set EAq
                         ⊂ N, which contains all activities that are not yet in the list but for which all predecessors are already in earlier positions. For the RK representation, each population element is constructed by randomly generating a priority vector.

In order to build a feasible individual for the resource allocation sub-population, a list of resource allocation matrices is generated sequentially. For each activity Ni
                         (
                           
                              i
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              n
                           
                        ), if rik
                         > 0 then rik
                         elements in the k-th row of matrix i are set to 1 (and the remainder to 0). Three different rules are considered for selecting these elements:

                           
                              •
                              Random Selection (RS): randomly select resource units from the resource vector.

Maximum Used Selection (MaxS): the resource unit most often allocated previously is selected first.

Minimum Used Selection (MinS): the resource unit least often allocated previously is selected first.

Following the use of two sub-populations as presented in Section 4.1, a chromosome consists of two parts: activity sequence and resource allocation matrices. During the cooperative strategy to generate a complete individual, one representative with the best fitness value is selected from each sub-population, and combined with each individual in the other sub-population. The combined individuals are then evaluated.

The fitness of individual i in a sub-population is denoted by Fi
                         and is calculated as follows:

                           
                              (15)
                              
                                 
                                    
                                       F
                                       i
                                    
                                    =
                                    
                                       D
                                       i
                                    
                                    +
                                    
                                       n
                                       
                                          i
                                          a
                                       
                                    
                                    +
                                    
                                       n
                                       
                                          i
                                          b
                                       
                                    
                                    +
                                    1
                                    ,
                                 
                              
                           
                        where Di
                         is the number of members in the external archive dominating the individual i, and nia
                         and nib
                         are the number of members in the sub-population dominating individual i, and the number of members dominated by individual i, respectively. Experimental results in Zhao et al. (2014) suggest that this type of fitness function is effective for multi-objective cooperative coevolutionary algorithms.

The size of the external archive is predefined as SizeArch
                        . All non-dominated individuals are gradually added to the archive. Following Deb, Pratap, Agarwal, and Meyarivan (2002), we use the crowding distance value of a solution as an estimate of the density of solutions surrounding that solution. Once the cardinality of the archive attains SizeArch
                        , the member with the lowest crowding distance is replaced by the new non-dominated individual. The archive update is completed after all individuals in each sub-population are evaluated.

Crossover and mutation operators are executed separately on activity sequence and on resource allocation. The details follow below, where two parents are denoted as P
                        1 and P
                        2, and two generated children are referred to as C
                        1 and C
                        2.

                           
                              
                                 Operators on activity sequence: For the AL representation, a popular two-point position-based crossover is employed where parents are divided into three parts via two crossover points n
                                 1 and n
                                 2 (0 < n
                                 1 < n
                                 2 < n) and children inherit parts from alternating parents (Hartmann, 1998; Murata, Ishibuchi, & Tanaka, 1996a; 1996b). Specifically, the activities outside the two selected points are inherited from one parent to the child, and the remaining activities from the other parent. A child is created one activity at the time, from left to right, and for each position the earliest eligible activity from the appropriate parent is selected, where eligible means that the activity does not yet appear earlier in the child. It can be verified that this approach will preserve precedence-feasibility for the child. The mutation operator for AL is taken from Shadrokh and Kianfar (2007).

For the RK representation, a similar two-point crossover is used. Note, however, that after crossover, it can happen that two eligible activities have the same priority indices. In such a situation, the tie breaker in the decoding procedure is a random selection. Mutation operates as follows: a random activity is selected, a new random priority index is generated (different from the original value) and the original value is replaced.


                                 Operators on resource allocation: Genetic operators for resource allocation are applied to each activity’s allocation matrix. Since the number K of resource types is relatively small, a single-point crossover is employed. For each matrix, a crossover point K′ (0 < K′ < K) is generated. For resource types R
                                 1 to 
                                    
                                       
                                          R
                                          
                                             K
                                             ′
                                          
                                       
                                       ,
                                    
                                  the resource allocation of child C
                                 1 is inherited from P
                                 1 and C
                                 2 inherits from P
                                 2. Conversely, for resource types 
                                    
                                       R
                                       
                                          K
                                          ′
                                       
                                    
                                  to RK, C
                                 1, resp. C
                                 2, is copied from P
                                 2, resp. P
                                 1. The mutation operator is executed independently with predefined probability for each activity. When an activity is selected for mutation, the full resource allocation matrix is randomly re-generated.

In multi-objective optimization, the quality of the obtained non-dominated solutions is usually measured by the convergence to the Pareto front and by the distribution of the obtained solutions. Since the true Pareto front is unknown for the problem at hand, we use hypervolume to measure the quality of the obtained non-dominated set.

Hypervolume is used to measure the “volume” in the objective space covered by the obtained non-dominated solutions for minimization problems. The value is denoted as HV and is calculated as follows:

                           
                              (16)
                              
                                 
                                    H
                                    V
                                    =
                                    volume
                                    
                                       (
                                       
                                          ∪
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             |
                                             N
                                             D
                                             |
                                          
                                       
                                       
                                          v
                                          i
                                       
                                       )
                                    
                                    ,
                                 
                              
                           
                        where |ND| is the number of solutions in the obtained non-dominated set, and vi
                         is the hypercube containing the origin and bordered by hyperplanes passing through solution i in the objective space, with one hyperplane for each objective, perpendicular to the objective’s axis (Zitzler & Thiele, 1999).

In this section, a case study based on a part of Phase 2 of BD-NSS will be reported to illustrate the addressed problem and the proposed approach.

Before constructing the satellite network, one of the important tasks of BD-NSS was to develop a test satellite (TS) system to demonstrate various techniques. The main contents of this project included manufacturing of the test satellite and the rocket, and construction of the ground system. The project aimed to develop a test system with representative functionalities and technical states to mitigate the risk during the subsequent processes. Collaboration from different departments was needed to complete this task. In order to speed up the development of the system, project management could benefit from smart planning of activities and allocating resources.

The TS project consisted of 35 activities, which are listed in Table 1
                           . Fig. 3 shows the project network, where N
                           0 and N
                           36 are dummy activities representing the start and the end of the project, respectively. Note that transitive arcs such as (N
                           1, N
                           5) are not included in the figure. The initial duration estimates 
                              
                                 d
                                 i
                                 *
                              
                            for all activities i are given in the third column of Table 1 (all durations are expressed in weeks).

Numerous resources were needed to complete the TS project. In this work we do not consider the resources related to different disciplines, which are usually not in conflict among the tasks (Cho & Eppinger, 2005), and we only take into account the technical managerial resource. Each unit of the resource consists of five to eight persons, who work as a group and support the system specification, coordination of the interface, design and review, technical consulting, etc.

The tasks were performed by different suppliers under a higher-level overall plan. We consider four types of resources, corresponding to upper-level department, satellite system, rocket system and ground system. The required number of resources for each activity is listed in the last four columns in Table 1. Table 2
                            shows the number of resources and the efficiency coefficients for each type. The values ak
                            and bk
                            have been artificially chosen here for illustration purposes, since the actual values pertaining to the R&D efficiency of the BeiDou project are confidential. In a practical context, value ak
                            represents the maximum efficiency gain that can be achieved by learning and experience over an unexperienced resource unit. Value 
                              
                                 
                                    a
                                    1
                                 
                                 =
                                 0.25
                                 ,
                              
                            for instance, means that a highly experienced worker of this resource type can be up to 25% more efficient than a starter. Coefficient bk
                            quantifies the learning effect through experience: a higher value for bk
                            implies that the learning effect takes more time. A straightforward method to estimate bk
                            in practice would be via a managerial statement of the type “90% of the maximum learning effect for resource type k can be achieved after 30 weeks of experience”; this statement leads to the equality

                              
                                 
                                    
                                       90
                                       %
                                       =
                                       exp
                                       (
                                       −
                                       
                                          b
                                          k
                                       
                                       /
                                       30
                                       )
                                       ,
                                    
                                 
                              
                           which yields the value 
                              
                                 
                                    b
                                    k
                                 
                                 =
                                 30
                                 ·
                                 
                                    (
                                    −
                                    ln
                                    
                                       (
                                       0.9
                                       )
                                    
                                    )
                                 
                                 =
                                 3.1608
                              
                            via elementary calculus. The b-values in Table 2 are significantly higher, indicating that a rather slow learning effect is assumed.

For the proposed CCMOA, the size of each sub-population was set to 100 and the external archive size to 200. The rates of crossover and mutation for each individual were fine-tuned via preliminary experiments and chosen as 0.9 and 0.2, respectively. The algorithm was terminated after 300 generations. To avoid the impact of randomness on the algorithmic results, 30 independent runs for the proposed algorithm were performed and non-dominated solutions obtained in each run were recorded.

For the TS project, we examine the performance of different algorithmic settings for schedule representation and resource allocation, as shown in Table 3
                        . The first four versions of CCMOA use AL representation, the remaining four are with RK representation. The members within each set of four versions differ with respect to the population initialization.

The distribution of hypervolume obtained by different variants of CCMOA is depicted in Fig. 4
                        . We have conducted statistical significance tests for these results for a significance level 
                           
                              α
                              =
                              0.05
                              ,
                           
                         and we find that the performance of the different versions of CCMOA is not significantly different, except for CCMOA1, which has a significantly lower score than all the seven other variants. We conclude from these experimental results that for the problem studied in this paper: (1) the RK representation is more stable than the AL representation, and (2) different resource unit selection rules have only limited impact on algorithmic performance.

All results in this section still pertain to the TS project.

Decision makers can benefit from examining the trade-off between the objective function values of the encountered non-dominated schedules. Fig. 5
                            shows the aggregate non-dominated solutions extracted from 30 independent runs of CCMOA8. It can be observed that the two objectives (makespan f
                           1 and balance of resource efficiency f
                           2) are largely conflicting: if the expected makespan of a schedule is to be minimized, then the index of resource efficiency imbalance tends to increase.

The non-dominated set can be roughly partitioned into two subsets: Set 1 and Set 2 (see Fig. 5). Solutions in Set 1 have a low makespan, and a linear approximation would have a slightly negative slope. The index of resource efficiency balance for this subset is rather stable and is predominantly in the interval [0.0400, 0.0600], while the makespan varies between 106 and 132. This suggests that for Set 1, with similar resource allocation, the makespan was strongly affected by the sequencing choices for the activities. Within this range, decision makers can significantly decrease the expected makespan at the expense of only a slight increase in resource efficiency imbalance. Set 2 shows, however, that from an expected makespan of around 105 onwards (downwards), if decision makers wish to further improve the makespan, then a considerable sacrifice needs to be made with respect to the balance of resource efficiency. The final choice of a solution obviously depends on the decision makers’ preferences regarding the objectives of makespan and resource efficiency balance.

We select two schedules s
                           1 and s
                           2 with similar makespan from Set 2 to further analyze their structure. The objective values are 
                              
                                 
                                    f
                                    1
                                 
                                 
                                    (
                                    
                                       s
                                       1
                                    
                                    )
                                 
                                 =
                                 98.8
                              
                            and 
                              
                                 
                                    f
                                    2
                                 
                                 
                                    (
                                    
                                       s
                                       1
                                    
                                    )
                                 
                                 =
                                 0.2224
                                 ,
                              
                            versus 
                              
                                 
                                    f
                                    1
                                 
                                 
                                    (
                                    
                                       s
                                       2
                                    
                                    )
                                 
                                 =
                                 102.3
                              
                            and 
                              
                                 
                                    f
                                    2
                                 
                                 
                                    (
                                    
                                       s
                                       2
                                    
                                    )
                                 
                                 =
                                 0.0897
                              
                           . A complete description of the two solutions is provided in Figs. A.7 and A.8 in the Appendix. In the figures, each row represents a resource unit and each column (apart from the rightmost column) stands for an activity. The columns are ordered from left to right in the same order as the activity sequence in the solution representation. Each value in the matrix is the mean duration 
                              
                                 d
                                 i
                                 *
                              
                            for the activity if the resource unit associated with the row is allocated to the activity in the column, and otherwise the cell is empty. The last column indicates the total busy time Bkj
                            of resource unit Ukj
                           .

Both solutions have a rather low expected makespan. Although the two solutions have different activity sequences and resource allocation matrices, one feature that is shared by the two solutions is the fact that a resource unit is rarely allocated to two activities that are adjacent in the sequence. This is easily achieved here because resource units are used rather sparsely, i.e., not each unit is needed during each time period. The directly following activities in the sequence will in this way tend to be scheduled in parallel with the predecessors whenever possible, thus leading to a compact schedule, with low makespan. The stochastic nature of the activity durations only reinforces this effect: even if two activities are not precedence-related and the necessary number of resource units is available, then a delay in the (resource-)predecessor activity will directly lead to a delay in the activity that receives some of the resource units. This property might be a good principle for producing high-quality solutions for similar problems with makespan minimization.

Solution s
                           2 has a far lower score for resource efficiency balance f
                           2 than s
                           1; this can also be seen from the figures. For each resource type, the maximum, mean and minimum value of total busy time over all resource units are shown in Table 4
                           . We observe that the two solutions have the same mean for each resource type, yet the spread over the resource units is not the same. We conclude that for R&D project managers who are concerned with maturity or competency of the whole group, sufficient attention should be paid not only to the timing of an activity but also to the person(s) who will execute the activity.

In order to further assess the performance of the proposed CCMOA, we have implemented NSGA–II (Deb et al., 2002) and MOEA/D (Zhang & Li, 2007) and compare the results obtained by the different algorithms. NSGA–II and MOEA/D are two from among the most popular algorithms for multi-objective continuous optimization and they are both also widely used for solving combinatorial problems. Recently, Ballestín and Blanco (2011) suggested that NSGA–II outperforms Pareto simulated annealing and SPEA2 for resource-constrained scheduling. MOEA/D has been successfully applied to a number of combinatorial problems, such as 0–1 knapsack (Zhang & Li, 2007) and flowshop scheduling (Chang, Chen, Zhang, & Lin, 2008). Experimental results in  Chang et al. (2008) show that MOEA/D performs better than NSGA–II and SPEA2 on instances with job size from 20 to 80.

We have selected a subset of the standard benchmark instances from PSPLIB (Kolisch & Sprecher, 1996), in which each instance has 60 non-dummy activities and four resource types. Our dataset includes 48 instances, 
                        
                           j
                           60
                           x
                           _
                           10
                           ,
                           x
                           =
                           1
                           ,
                           2
                           ,
                           …
                           ,
                           48
                           ,
                        
                      which differ in their structural parameters: we have selected one instance (the 10th) from each set of ten instances that corresponds with one particular setting for the parameters in the instance generation, so that all combinations of structural parameters are covered. The given (deterministic) durations from PSPLIB are taken as the mean durations without experience, and the remaining parameters for modeling uncertainty are set exactly as in the case study.

In the experiments, each algorithm generates and evaluates 50000 schedules in total. Thus, the population size and the number of generations for NSGA–II and for MOEA/D are set as 200 and 250, respectively; for our CCMOA, the sub-population size and the generation count are 100 and 250. The external archive size for MOEA/D and CCMOA is 200; the neighborhood size for MOEA/D is 10. Since the addressed problem has only two objectives, the weighted sum approach is used for decomposition in MOEA/D. All algorithms are designed with the same chromosome representation (AL) and genetic operators. For population initialization, NSGA–II and MOEA/D employ the MinS strategy. Since we wish to compare the performance of algorithms with different evolution mechanisms, no problem-specific schedule improvement or local search is integrated in the algorithms.

The results reported for the TS project show that CCMOA8 achieves the highest mean hypervolume. We therefore retain only the version CCMOA8 for comparison with NSGA-II and MOEA/D via experiments on the selected benchmark dataset, which contains sufficiently heterogeneous instances to cover a wide range of parameter settings. Each algorithm is run one time for each instance. We use the hypervolume obtained by CCMOA8 as a reference value, and we compute a relative hypervolume score by dividing by the reference value (for normalization). In this way, a relative hypervolume value less than 1 indicates that the original value is lower than the reference value. The distribution of relative hypervolumes for the 48 instances of the dataset is presented in Fig. 6
                        . We observe that CCMOA8 has the best performance, followed by MOEA/D. All pairwise comparisons between the three algorithms turn out to be statistically significant.

The average runtimes of the three algorithms are given in Table 5
                        . The runtimes of CCMOA8 and NSGA-II are very close to each other, while MOEA/D needs more time. At the same time, the performance of CCMOA8 is much better than NSGA-II. In conclusion, our results both for the TS project and the benchmark dataset suggest that the proposed CCMOA is effective for solving the addressed resource allocation and
                         scheduling problem.

The last few decades have witnessed dramatic progress in the aerospace industry. China in particular has been experiencing a hypergrowth in the aerospace area in the 21st century. In the future, China will speed up its pace in developing aerospace projects, such as BeiDou Global Navigation Satellite System, International Space Station, and High Resolution Satellites. There is no doubt that project management in these projects will continue to face the problems of technology uncertainty, resource limitation, complexity increase, etc. The work in this article has focused on multi-objective resource allocation and activity scheduling under uncertainty and with varying resource efficiencies, which are challenges that will often be faced in project management practice. At the same time, appropriate software support for tackling these challenges is often lacking; our work described in the foregoing sections can be an aid in the development of such software packages. More generally, our work provides project managers with suggestions for improvements in several different aspects of their daily work.

Our model was built primarily based on our experience with the development of the Chinese BeiDou Navigation Satellite System, and this project is also used to illustrate the problem and the methodology. This case study can serve as an example to foster more work on meta-heuristics and evolutionary approaches in the area of aerospace project management. We have developed a domain-specific cooperative coevolutionary multi-objective algorithm (CCMOA) to solve the optimization problem. The performance of the CCMOA was compared to MOEA/D and NSGA-II on a set of representative instances. The results suggest that the CCMOA performs very well in comparison to the two benchmark algorithms.

In future studies, we will focus on modeling more complex environments in R&D project management. Project networks with multiple types of activity relations (allowing for or requiring partial activity overlap in time, for instance) and dynamic events occurring during project execution (e.g., under the form of a set of discrete scenarios) are two important aspects that are worth being considered in future research, and the same goes for the development of hybrid and effective evolutionary mechanisms for decision support in such complex and dynamic R&D project management settings.

@&#ACKNOWLEDGMENT@&#

This work was supported by National Natural Science Foundation of China under Grant 71501181.

See Figs. A.7 and A.8.

@&#REFERENCES@&#

