@&#MAIN-TITLE@&#Edge coloring: A natural model for sports scheduling

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We apply edge coloring theory to construct schedules for sports tournaments.


                        
                        
                           
                           Local search neighborhoods are modeled in terms of edge coloring operators.


                        
                        
                           
                           The standard definitions of neighborhoods in local search are extended.


                        
                        
                           
                           We show the theoretical and practical importance of graph models for such problems.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

OR in sports

Scheduling

Graph theory

Edge coloring

Local search

@&#ABSTRACT@&#


               
               
                  In this work, we consider some basic sports scheduling problems and introduce the notions of graph theory which are needed to build adequate models. We show, in particular, how edge coloring can be used to construct schedules for sports leagues. Due to the emergence of various practical requirements, one cannot be restricted to classical schedules given by standard constructions, such as the circle method, to color the edges of complete graphs. The need of exploring the set of all possible colorings inspires the design of adequate coloring procedures. In order to explore the solution space, local search procedures are applied. The standard definitions of neighborhoods that are used in such procedures need to be extended. Graph theory provides efficient tools for describing various move types in the solution space. We show how formulations in graph theoretical terms give some insights to conceive more general move types. This leads to a series of open questions which are also presented throughout the text.
               
            

@&#INTRODUCTION@&#

Multiple agents of sports events, such as organizers, players, referees, fans, journalists, medical doctors, and airlines play an important role in professional sports leagues and tournaments. Major events such as the Olympic Games and the Football World Cup create thousands of jobs and economic opportunities to their hosts (Kendall, Knust, Ribeiro, & Urrutia, 2010; Rasmussen & Trick, 2008).

Many discrete problems in several areas can be formulated in graph theoretical terms and then solved using graph algorithms (see, e.g., Ebert, 1987). In this work, we show how basic concepts of graph theory provide a natural and very adequate tool for formulating and solving some of the problems which tournament organizers face. We will start by taking into account only some of the most frequent requirements.

We assume throughout the text that we have a round robin tournament involving an even number n of teams. Every game involves two teams, say i and j. Therefore, it is natural to associate each team with a vertex of a graph and every game involving i and j with an edge (i, j) of this graph. Fig. 1 shows an edge-colored complete graph corresponding to a tournament of 
                        
                           n
                           =
                           4
                        
                      teams.

The primary goal of tournament scheduling is to find an assignment of each game to some time slot (or round) such that each team plays at most one game in each round and the total number of rounds is as small as possible. If each team has p games to play, any schedule clearly needs at least p rounds. For convenience, we associate each round with a specific color. Therefore, each schedule corresponds to an assignment of a color to each edge of the corresponding graph.

Games are divided into subsets Fs
                     , each of them formed by all games assigned to a specific round s. Fig. 1 illustrates a tournament schedule with 
                        
                           n
                           =
                           4
                        
                      teams represented by a complete graph K
                     4. Edges of subset F
                     1 are represented by dashed lines, while those of F
                     2 are represented by straight solid lines and edges of F
                     3 are represented by double solid lines. Each of these subsets represents the set of games played in a given round. We observe that, in this case, in every subset Fs
                      of games each team is matched with exactly one other team, forming a perfect matching.

A tournament is said to be compact if each team plays exactly once in each round. In a very typical tournament format among n teams, each team plays exactly once (resp. twice) against all other teams in a given number of rounds. This type of competition format is called a single round robin (SRR) (resp. double round robin (DRR)) tournament. In view of simplicity, we consider the problem of scheduling a compact SRR tournament involving an even number of teams. The ideas and results presented here for SRR tournaments can also be easily adapted to handle the case of DRR tournaments. Most of the results for tournaments with an even number of teams may be extended to tournaments with an odd number of teams by simply adding a dummy team.

A basic problem in sports scheduling consists in defining the round and the venue in which each game of a tournament will be played at. Even though it may seem simple to schedule a tournament at first glance, the addition of simple constraints transforms this task into challenging combinatorial optimization problems belonging, in most cases, to the NP-hard class (Thielen & Westphal, 2011). A great research effort has been made to devise improved algorithms, resulting in better schedules obtained in smaller computational times. For many types of problems, instances with no more than 20 teams are considered as large-scale and approximate approaches are often used to obtain good results (Rasmussen & Trick, 2008). In the related literature, it is possible to find methods that range from integer and constraint programming to metaheuristics approaches and various hybrid algorithms (Costa, Urrutia, & Ribeiro, 2012; Easton, Nemhauser, & Trick, 2001; 2003; Lewis & Thompson, 2011; Ribeiro, 2012; Ribeiro & Urrutia, 2007).

The text is organized as follows. Sections 2 and 3 lay out the terms and definitions, respectively, in graph theory and sports scheduling that will be used in the remainder of the text. Section 4 tackles the problem of generating SRR schedules from scratch. Section 5 describes in edge colorings terms the neighborhoods commonly used by local search sports scheduling algorithms. Section 6 presents results on the connectivity of the solution space for the classical neighborhoods. Section 7 analyzes scheduling problems when considering the venue of each game and sketches some formulations in terms of list colorings of graphs. Concluding remarks and suggestions for further research are made in the last section.

A graph 
                        
                           G
                           =
                           (
                           V
                           ,
                           E
                           )
                        
                      is defined by two sets V and E, in which the n elements of V are the vertices of the graph G and the m elements of E are its edges. Two distinct vertices u, v ∈ V joined by an edge 
                        
                           e
                           =
                           (
                           u
                           ,
                           v
                           )
                           ∈
                           E
                        
                      are said to be adjacent. In this case, both u and v are the endpoints of e and e is said to be incident to both u and v. Two edges are adjacent if they are incident to the same vertex. The degree d(v) of a vertex v is the number of edges incident to it and the number 
                        
                           Δ
                           (
                           G
                           )
                           =
                           m
                           a
                           x
                           {
                           d
                           (
                           v
                           )
                           :
                           v
                           ∈
                           V
                           }
                        
                      is the maximum degree of a vertex in G. In addition, δ(v) stands for the set of edges incident to vertex v.

A chain is a sequence of edges with common vertices, where each edge in the sequence has one vertex in common with the preceding edge and the other in common with the next one. The length of a chain is the number of its edges. A graph is connected if for any pair of vertices there is a chain linking them. A cycle is a chain formed by at least three edges starting and ending in the same vertex. A Hamiltonian cycle is a cycle that visits every vertex of the graph exactly once.

A proper edge coloring of G is a mapping 
                        
                           c
                           :
                           E
                           →
                           C
                        
                      so that c(ei
                     ) ≠ c(ej
                     ) for any adjacent edges ei
                      and ej
                     , where the elements of 
                        C
                      are the available colors. A k-coloring is a proper edge coloring with 
                        
                           |
                           C
                           |
                           =
                           k
                        
                     . The chromatic index of a graph G is defined as 
                        
                           
                              χ
                              ′
                           
                           
                              (
                              G
                              )
                           
                           =
                           m
                           i
                           n
                           
                              {
                              k
                              :
                              a
                              
                              k
                              -coloring
                              
                              of
                              
                              G
                              
                              exists
                              }
                           
                        
                     . A color is present in a vertex if any edge incident to this vertex has that color; otherwise, the color is free (or available) in that vertex. A conflict is characterized by the existence of two edges with the same color incident to a common vertex. In other words, a proper edge coloring is a a color assignment without conflicts to the edges of a graph. A proper partial edge coloring is a color assignment without conflicts such that some edges of G may be uncolored. If V′ ⊆ V and E′ ⊆ E, then 
                        
                           
                              G
                              ′
                           
                           =
                           
                              (
                              
                                 V
                                 ′
                              
                              ,
                              
                                 E
                                 ′
                              
                              )
                           
                        
                      is a subgraph of 
                        
                           G
                           =
                           (
                           V
                           ,
                           E
                           )
                        
                      (and G a supergraph of G′), written as G′ ⊆ G. If G′ ⊆ G and G′ ≠ G, then G′ is a proper subgraph of G. If G′ ⊆ G and G′ contains all the edges (v, w) ∈ E with v, w ∈ V′, then G′ is the subgraph of G induced by the subset of vertices V′. The subgraph of G spanned by a subset E′ of edges contains exactly all the edges in E′ and all the endpoints of edges in E′. A connected component of G is an inclusion-wise maximal connected induced subgraph of G.

A one-factor of G is a set of edges F ⊆ E, such that all vertices in V have degree equal to one in the subgraph 
                        
                           
                              G
                              ′
                           
                           =
                           
                              (
                              V
                              ,
                              F
                              )
                           
                        
                     . In this case, F is also called a perfect matching in G. One-factors may only exist for graphs with an even number of vertices. A one-factorization of G is a partition of E into one-factors, i.e., a set 
                        
                           F
                           =
                           {
                           
                              F
                              1
                           
                           ,
                           
                              F
                              2
                           
                           ,
                           …
                           ,
                           
                              F
                              k
                           
                           }
                        
                      of disjoint one-factors such that 
                        
                           
                              ∪
                              
                                 i
                                 =
                                 1
                              
                              k
                           
                           
                              F
                              i
                           
                           =
                           E
                        
                     . A one-factorization is said to be perfect when G(V, Fi
                      ∪ Fj
                     ) is a Hamiltonian cycle for any two distinct one-factors Fi
                      and Fj
                     , for 
                        
                           i
                           ,
                           j
                           =
                           1
                           ,
                           …
                           ,
                           k
                        
                     .

Two one-factorizations 
                        
                           F
                           =
                           {
                           
                              F
                              1
                           
                           ,
                           
                              F
                              2
                           
                           ,
                           …
                           ,
                           
                              F
                              k
                           
                           }
                        
                      and 
                        
                           H
                           =
                           {
                           
                              H
                              1
                           
                           ,
                           
                              H
                              2
                           
                           ,
                           …
                           ,
                           
                              H
                              k
                           
                           }
                        
                      of a graph 
                        
                           G
                           =
                           (
                           V
                           ,
                           E
                           )
                        
                      are called isomorphic if there is a bijection φ: V → V such that 
                        
                           
                              H
                              i
                           
                           =
                           
                              {
                              
                                 (
                                 φ
                                 
                                    (
                                    x
                                    )
                                 
                                 ,
                                 φ
                                 
                                    (
                                    y
                                    )
                                 
                                 )
                              
                              :
                              
                                 (
                                 x
                                 ,
                                 y
                                 )
                              
                              ∈
                              
                                 F
                                 i
                              
                              }
                           
                        
                      for each 
                        
                           i
                           =
                           1
                           ,
                           …
                           ,
                           k
                        
                      (Dinitz, Garnick, & McKay, 1994). The concepts of a proper edge coloring and that of a one-factorization are equivalent whenever each color is present in each vertex of the graph. In this case, each color relates to a one-factor. In the remainder of this work, the term proper edge coloring refers to one-factorizations.

Due to several research groups working in parallel on sports scheduling problems, it is not uncommon to find in the literature different names corresponding to the same concept (Kendall et al., 2010; Rasmussen & Trick, 2008; Ribeiro, 2012).

A round robin tournament is a competition involving n different teams indexed by 
                        
                           i
                           ∈
                           {
                           1
                           ,
                           …
                           ,
                           n
                           }
                        
                      in which all teams play against each other a fixed number g of games. The games of the tournament must be scheduled in a number r of rounds in such a way that each team plays at most one game in each round. As mentioned, we assume that the number of teams is even, which is usually the case in real competitions.

An SRR tournament is a competition in which all teams face each other exactly once (i.e., 
                        
                           g
                           =
                           1
                        
                     ). A DRR tournament is a competition in which all teams face each other twice (i.e., 
                        
                           g
                           =
                           2
                        
                     ) and any two teams meet once in each other’s home venue. We shall assume here that all round robin tournaments are compact. This implies that n/2 games are held in each round.

The graph corresponding to an SRR tournament is a complete graph Kn
                     , i.e., one edge between any two vertices. The graph corresponding to a DRR tournament has two edges between any pair of vertices since there are two games between any pair of teams.

A common way to describe the schedule of a round robin tournament is by using a timetable as the one depicted in Fig. 2
                     . A timetable is a matrix of n rows and r columns, in which n is the number of teams and r is the number of rounds of the tournament. Each row refers to a team i, each column represents a round k and each cell (i, k) represents the opponent of team i in round k, for all 1 ≤ i ≤ n and 1 ≤ k ≤ r. A sign associated with the opponent denotes the location of the match. The positive sign (
                        +
                     ) indicates that team i will play at home against its opponent, i.e., this is a home-game for i. A negative sign (
                        −
                     ) indicates that team i will play away against its opponent, i.e., this is an away-game for i.

A mirrored double round robin tournament (MDRR) is a special type of a DRR tournament consisting of a simple SRR in the first 
                        
                           n
                           −
                           1
                        
                      rounds (first leg), followed by the same tournament with reversed venues in the last 
                        
                           n
                           −
                           1
                        
                      rounds (second leg).

Concerning the geographical positions and the distances traveled by the teams, we assume that each team is associated with a home venue located in its city and the distances between the venues are known beforehand and given by an n × n distance matrix D. We assume that each team starts the tournament at its home venue. Whenever a team plays two consecutive away games, it goes directly from the city of the first opponent to that of the second, without returning to its own home city. At the end of the tournament, if a team played its last match away from home, then it must return to its home venue.

We say that there is a break when a team plays two consecutive home games or two consecutive away games. A road trip is a maximal sequence of consecutive away games for a team, while a home stand is a sequence of consecutive home games. In tournaments among teams spread over large regions, it is advantageous to schedule the games with a number of consecutive away matches to reduce the distance traveled. This creates consecutive breaks on away games.

The situation in which two teams play two consecutive matches against each other is called a repeater and should be avoided in some DRR competitions. Such constraint, called no-repeater, is common in some DRR competitions.

The traveling tournament problem (TTP), introduced in (Easton et al., 2001), is one of the most studied optimization problems in the sports scheduling literature. It can be defined as follows: given two integer numbers L and U, an even number n of teams and an n × n distance matrix, find a schedule for a DRR tournament on the n teams avoiding repeaters, in which the total distance traveled by the teams is minimized and the size of any home stand and any road trip is bounded by L and U, respectively.

A schedule T has 
                        
                           n
                           (
                           n
                           −
                           1
                           )
                           −
                           B
                           (
                           T
                           )
                           /
                           2
                        
                      trips, where B(T) is the number of breaks. Observe that B(T)/2 is equal to the number of home breaks, i.e., the number of times any team plays two consecutive home games. If instead of minimizing distances one is interested in minimizing the number of trips, then the problem amounts to maximizing the number of breaks B(T) over all schedules T (Urrutia & Ribeiro, 2006).


                     de Werra (1981) was one of the first authors to discuss the application of graph theory concepts (with emphasis in edge coloring) to sports scheduling problems. Lewis and Thompson (2011) presented models based on vertex coloring to solve the traveling tournament problem (Easton et al., 2001). For a comprehensive list of graph theoretical approaches to sport scheduling we refer to (Kendall et al., 2010).

As mentioned in the introduction, there is a natural one-to-one correspondence between any schedule of an SRR tournament and a proper edge coloring of the corresponding complete graph with n vertices using 
                        
                           n
                           −
                           1
                        
                      colors. This is why we recall in the next section some concepts and procedures related to edge coloring.

The circle method, also called the polygon method or the canonical procedure, generates the canonical edge coloring for a complete graph Kn
                     . It is often used to generate initial solutions for heuristics tackling round robin scheduling problems (Costa et al., 2012; Di Gaspero & Schaerf, 2007; Ribeiro & Urrutia, 2007; Wei, Fujimura, Wei, & Ding, 2010). The circle method has been used in some real situations, such as the schedule of the Spanish First Division (BBVA League) (Goossens & Spieksma, 2012).

We denote the set of teams by 
                        
                           T
                           =
                           {
                           1
                           ,
                           2
                           ,
                           ⋯
                           ,
                           n
                           }
                        
                      and the set of rounds by 
                        
                           R
                           =
                           {
                           1
                           ,
                           2
                           ,
                           …
                           ,
                           n
                           −
                           1
                           }
                        
                     . To schedule a tournament following the circle method, we first place points numbered from 1 to 
                        
                           n
                           −
                           1
                        
                      at equal distances on a circle. We place an additional point, numbered by n, in the center of the circle. Then we associate a team i to each point i for 1 ≤ i ≤ n.

In order to determine the n/2 games that will be played in round 
                        
                           r
                           =
                           1
                           ,
                        
                     2, 
                        
                           …
                           ,
                        
                     
                     
                        
                           n
                           −
                           1
                        
                      of the tournament, the circle method considers that a straight line is drawn between point n and point r of the circle together with all possible straight lines orthogonal to (r, n) that join two other points previously defined on the circle. All matches that can be obtained this way determine the games in the rth
                      round of the tournament. Fig. 3
                      illustrates the application of this method for 
                        
                           n
                           =
                           6
                        
                     .

Therefore, we can represent the circle method by the following opponent schedule function (Miyashiro & Matsui, 2006):

                        
                           (1)
                           
                              
                                 Υ
                                 
                                    (
                                    t
                                    ,
                                    r
                                    )
                                 
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             r
                                          
                                          
                                             
                                                if
                                                
                                                t
                                                =
                                                n
                                                ,
                                             
                                          
                                       
                                       
                                          
                                             n
                                          
                                          
                                             
                                                if
                                                
                                                t
                                                =
                                                r
                                                ,
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   (
                                                   2
                                                   r
                                                   −
                                                   t
                                                   )
                                                
                                                
                                                mod
                                                
                                                   
                                                   ′
                                                
                                                
                                                   (
                                                   n
                                                   −
                                                   1
                                                   )
                                                
                                             
                                          
                                          
                                             otherwise,
                                          
                                       
                                    
                                 
                              
                           
                        
                     where 
                        
                           a
                           
                           mod
                           
                              
                              ′
                           
                           
                              (
                              b
                              )
                           
                        
                      is defined as follows:

                        
                           
                              
                                 a
                                 
                                 mod
                                 
                                    
                                    ′
                                 
                                 
                                    (
                                    b
                                    )
                                 
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             
                                                a
                                                
                                                mod
                                                
                                                (
                                                b
                                                )
                                             
                                          
                                          
                                             
                                                if
                                                
                                                a
                                                
                                                mod
                                                
                                                (
                                                b
                                                )
                                                ≠
                                                0
                                                ,
                                             
                                          
                                       
                                       
                                          
                                             b
                                          
                                          
                                             
                                                if
                                                
                                                a
                                                
                                                mod
                                                
                                                (
                                                b
                                                )
                                                =
                                                0
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     Function Υ(t, r) computes the opponent of team t ∈ T in round r ∈ R based on the circle method. Table 1
                      shows a schedule constructed with the circle method for a tournament with 
                        
                           n
                           =
                           6
                        
                      teams.

As an attempt to obtain different initial schedules for each run, the order of the rounds and the initial placement of teams in the polygon could be randomized. However, all colorings obtained with this strategy would still be isomorphic to each other.

Therefore, other techniques should be used for generating a proper edge coloring of the complete graph using exactly 
                        
                           n
                           −
                           1
                        
                      colors, instead of the circle method, for constructing distinct SRR schedules. Different procedures have been developed to create schedules with particular structures, see, e.g., (de Werra, 1980) where a construction technique using a division of a league into two or more sub-leagues is described.

We present a framework for the construction of an arbitrary edge coloring of Kn
                     . Vizing (1964) proved that every simple graph G has a proper coloring with at most 
                        
                           Δ
                           (
                           G
                           )
                           +
                           1
                        
                      colors. This bound is not tight in the context of an SRR scheduling, since the circle method itself constructs a proper coloring of a complete graph Kn
                      with 
                        
                           n
                           −
                           1
                           =
                           Δ
                           (
                           
                              K
                              n
                           
                           )
                        
                      colors.

Many of the different proofs of Vizing’s theorem given in the literature (Diestel, 2006; Dijkstra & Rao, 1990; Gabow, Nishizeki, Kariv, & Terada, 1985; Gould, 1988; Misra & Gries, 1992) are constructive. They show how to obtain a proper (
                        
                           Δ
                           (
                           G
                           )
                           +
                           1
                        
                     )-coloring of an arbitrary graph. Some of these proofs also show how to color an additional uncolored edge of a partially colored graph (which may require changing the color of some already colored edges) never exceeding 
                        
                           Δ
                           (
                           G
                           )
                           +
                           1
                        
                      different colors. The procedure can be repeated until all edges are colored.

Let 
                        
                           
                              e
                              0
                           
                           =
                           
                              (
                              w
                              ,
                              
                                 v
                                 0
                              
                              )
                           
                        
                      be an uncolored edge of a graph 
                        
                           G
                           =
                           (
                           V
                           ,
                           E
                           )
                        
                      partially colored with no more than 
                        
                           Δ
                           (
                           G
                           )
                           +
                           1
                        
                      colors. Observe that since both w and v
                     0 have at most 
                        
                           Δ
                           (
                           G
                           )
                           −
                           1
                        
                      colored incident edges, there are at least two available colors in both of them. We denote the set of colors available at vertex v ∈ V by Free(v). If 
                        
                           F
                           r
                           e
                           e
                           
                              (
                              w
                              )
                           
                           ∩
                           F
                           r
                           e
                           e
                           
                              (
                              
                                 v
                                 0
                              
                              )
                           
                           ≠
                           ⌀
                           ,
                        
                      then we can simply choose any color from the intersection to color edge e
                     0.

Now, we assume that 
                        
                           F
                           r
                           e
                           e
                           
                              (
                              w
                              )
                           
                           ∩
                           F
                           r
                           e
                           e
                           
                              (
                              
                                 v
                                 0
                              
                              )
                           
                           =
                           ⌀
                        
                     . Let α
                     0 ∈ Free(v
                     0) and β ∈ Free(w) be two free colors at vertices v
                     0 and w, respectively. Let P be a maximal chain that starts from v
                     0 so that its edges are alternately colored with colors β and α
                     0. Such a chain will be called an α
                     0/β-chain. Two cases may arise: P ends at a vertex different from w or P ends at w. In the first case, the coloring may be augmented by exchanging the colors of the edges along the chain P and coloring edge e
                     0 with β that is now free in v
                     0, as shown in Fig. 4
                     .

Next, we assume that the chain P ends at vertex w. If we exchange the colors of the edges of P, then β ∈ Free(v
                     0) but β∉Free(w), as shown in Fig. 5
                     .

Let v
                     1 be the vertex adjacent to w in P and 
                        
                           
                              e
                              1
                           
                           =
                           
                              (
                              w
                              ,
                              
                                 v
                                 1
                              
                              )
                           
                        
                      be the edge which is colored with α
                     0. At this point, the color α
                     0 is removed from edge e
                     1 and edge e
                     0 is colored with that same color, as Fig. 6
                      illustrates.

Now, the problem consists in re-coloring edge e
                     1. The same procedure applied to edge e
                     0 can be used to assign a color to edge e
                     1. If Free(w)∩Free(v
                     1) is also empty, then the color to be selected from Free(v
                     1) must be different from α
                     0 in order to avoid cycling. Of course, this color always exists, since |Free(v
                     1)| ≥ 2.

We may continue this way until Free(w)∩Free(vi
                     ) is not empty or the chain P does not end at w. The rest of the proof of Vizing’s theorem (Gould, 1988) shows that this will eventually be the case after at most Δ(G) iterations. This proof of Vizing’s theorem immediately yields an O(|E||V|Δ) time algorithm to obtain a proper (
                        
                           Δ
                           (
                           G
                           )
                           +
                           1
                        
                     )-coloring of a simple graph. A more efficient algorithm is described in (Gabow et al., 1985).

In this work, we are interested in finding proper edge colorings of complete graphs Kn
                     , using at most Δ(Kn
                     ) colors to represent the 
                        
                           n
                           −
                           1
                        
                      rounds of the tournament. To obtain an edge coloring with Δ(Kn
                     ) colors, we consider the complete graph 
                        
                           K
                           
                              n
                              −
                              1
                           
                        
                      with vertex set 
                        
                           V
                           =
                           {
                           
                              v
                              1
                           
                           ,
                           
                              v
                              2
                           
                           ,
                           …
                           ,
                           
                              v
                              
                                 n
                                 −
                                 1
                              
                           
                           }
                        
                     . Then, color 
                        
                           K
                           
                              n
                              −
                              1
                           
                        
                      with 
                        
                           n
                           −
                           1
                        
                      colors following the procedure derived from any proof of Vizing’s theorem. Next, add vertex vn
                      to the graph, and connect every vertex in 
                        
                           V
                           =
                           {
                           
                              v
                              1
                           
                           ,
                           
                              v
                              2
                           
                           ,
                           …
                           ,
                           
                              v
                              
                                 n
                                 −
                                 1
                              
                           
                           }
                        
                      to vn
                      with an uncolored edge. Since graph 
                        
                           K
                           
                              n
                              −
                              1
                           
                        
                      was edge-colored with 
                        
                           n
                           −
                           1
                        
                      colors and each vertex has its degree equal to 
                        
                           n
                           −
                           2
                           ,
                        
                      there is an available color at each vertex 
                        
                           V
                           =
                           {
                           
                              v
                              1
                           
                           ,
                           
                              v
                              2
                           
                           ,
                           …
                           ,
                           
                              v
                              
                                 n
                                 −
                                 1
                              
                           
                           }
                        
                     . To see that the missing colors are distinct, observe that each color is used in 
                        
                           ⌊
                           (
                           n
                           −
                           1
                           )
                           /
                           2
                           ⌋
                        
                      edges and, as a consequence, each of the 
                        
                           n
                           −
                           1
                        
                      colors is missing in exactly one of the 
                        
                           n
                           −
                           1
                        
                      vertices. To complete the coloring of graph Kn
                     , we just need to assign each edge (v
                     1, vn
                     ), 
                        
                           
                              (
                              
                                 v
                                 2
                              
                              ,
                              
                                 v
                                 n
                              
                              )
                           
                           ,
                           …
                           ,
                           
                              (
                              
                                 v
                                 
                                    n
                                    −
                                    1
                                 
                              
                              ,
                              
                                 v
                                 n
                              
                              )
                           
                        
                      to the color that is available at 
                        
                           
                              v
                              1
                           
                           ,
                           
                              v
                              2
                           
                           ,
                           …
                           ,
                           
                              v
                              
                                 n
                                 −
                                 1
                              
                           
                           ,
                        
                      respectively. This brings about a proper edge coloring of Kn
                      with exactly Δ(G) colors. We refer to this procedure as the Vizing algorithm.

An example of how this procedure can be applied to obtain an edge coloring for K
                     4 is depicted in Fig. 7
                     .

The edge coloring of Kn
                      with 
                        
                           n
                           −
                           1
                        
                      colors constructed by Vizing’s algorithm depends on the order in which the yet uncolored edges are considered. In fact, one may get any possible edge coloring, since there is always an order for which Vizing’s algorithm produces a given edge coloring of Kn
                     . This is clearly not the case for the circle method.

In this section we will exploit thoroughly the formulation in terms of graphs to describe, interpret and generalize some classical moves from one solution (an edge coloring) to a neighbor solution (a modified edge coloring). These original formulations leading to generalized moves will exhibit the power and the promises of the tools provided by graphs.

Let us first illustrate four neighborhoods commonly used in local search heuristics for SRR and DRR problems formulated in edge colorings terms. For didactic purposes, our description will be based on the SRR case. These neighborhoods have received different names, e.g., in (Anagnostopoulos, Michel, Hentenryck, & Vergados, 2006; Di Gaspero & Schaerf, 2007; Ribeiro & Urrutia, 2007). Here, they are called Team Swap (TS), Round Swap (RS), Partial Team Swap (PTS), and Partial Round Swap (PRS). Except for neighborhoods whose moves switch home-away assignments, no other neighborhood, which is not a special case or a combination of these neighborhoods, has ever been proposed in the literature.

Each solution in the TS neighborhood is obtained by exchanging the opponents of a pair of teams i and j over all rounds. This neighborhood can be seen as the exchange of the labels of two vertices in the graph that represents the tournament.

In a move within the RS neighborhood, all games assigned to a round ri
                      are moved to a round rj
                     , and vice-versa. This is equivalent to exchanging two different colors in the associated edge-colored graph.

The colorings resulting from moves in neighborhoods TS and RS remain valid after the moves, because they do not introduce color conflicts in the graph. Every move in these neighborhoods leads to edge colorings that are isomorphic to the original one. In consequence, such moves may not be very effective to find improving solutions.

In a Partial Round Swap (PRS) move, the opponents of team t in rounds ri
                      and rj
                      are exchanged and a repair chain must be applied in order to remove the resulting violations (see Di Gaspero and Schaerf, 2007 for further details). In graph theoretical terms, a PRS move consists of two steps. Initially, any two distinct colors are selected and one considers a cycle in the subgraph spanned by the edges with these two colors (edges in two distinct factors). Next, the colors of the edges in the cycle are exchanged, leading to a new coloring. Fig. 8
                      illustrates a move in the PRS neighborhood, in which the colors of the edges in the cycle formed by vertices 5, 6, 7, and 8 have been exchanged.

If the edges involved in a move in the PRS neighborhood form a Hamiltonian cycle, then such move provides the same solution as a move in the RS neighborhood, obtaining a coloring that is isomorphic to the original one. If the cycle is not Hamiltonian, then the coloring obtained may not be isomorphic to the original one.

In a Partial Team Swap (PTS) move, the opponents of the teams in a given round are exchanged and a repair chain must be used in order to remove the resulting violations (see Di Gaspero and Schaerf, 2007 for further details). In graph theoretical terms, a PTS move consists of the following steps. First, select two distinct vertices v
                     1 and v
                     2 of the complete edge colored graph. Next, consider the subgraph spanned by the edges of the symmetric difference between δ(v
                     1) and δ(v
                     2), i.e., every vertex of the graph and all edges that connect v
                     1 and v
                     2 with all other vertices. This subgraph is isomorphic to the complete bipartite graph 
                        
                           K
                           
                              2
                              ,
                              n
                              −
                              2
                           
                        
                      and colored with 
                        
                           n
                           −
                           2
                        
                      colors, (all but that of the edge (v
                     1, v
                     2)). Following, compute a subset of vertices S⊆V∖{v
                     1, v
                     2} such that the set of colors assigned to edges joining v
                     1 to vertices in S is equal to the set of colors assigned to edges joining v
                     2 to vertices in S.

Let 
                        
                           
                              C
                              1
                           
                           ,
                           …
                           ,
                           
                              C
                              p
                           
                        
                      be the chains of length two linking v
                     1 and v
                     2 through S. Next, exchange the color assignment of edges in each chain Ci
                     , for 
                        
                           i
                           =
                           1
                           ,
                           …
                           ,
                           p
                        
                     . Fig. 9
                      shows such a subgraph 
                        
                           K
                           
                              2
                              ,
                              n
                              −
                              2
                           
                        
                      with 
                        
                           S
                           =
                           {
                           
                              w
                              5
                           
                           ,
                           
                              w
                              6
                           
                           }
                        
                      and Fig. 10
                      illustrates the resulting colored subgraph after the exchange of the colors in the chains. If 
                        
                           S
                           =
                           V
                           ∖
                           {
                           
                              v
                              1
                           
                           ,
                           
                              v
                              2
                           
                           }
                           ,
                        
                      the move is equivalent to a TS move.

Both partial swap neighborhoods, PRS and PTS, may be applied to any sport round robin scheduling problem but they are currently used almost only for the TTP and its variants.

A more general move would be to consider edge disjoint alternating chains 
                        
                           
                              C
                              1
                           
                           ,
                           …
                           ,
                           
                              C
                              p
                           
                        
                      of even length, possibly larger than two between vertices v
                     1 and v
                     2. The set of colors on edges of 
                        
                           
                              C
                              1
                           
                           ,
                           …
                           ,
                           
                              C
                              p
                           
                        
                      incident to vertex v
                     1 is, as in PTS, the same as the set of those incident to v
                     2. Exchanging colors in each one of the alternating chains gives a new proper coloring that could not be directly obtained with PTS.


                     Fig. 11
                      shows the initial coloring as an example of this type of move. C
                     1 is a 1/2-chain of length 4, C
                     2 a 2/3-chain of length 6, C
                     3 a 3/4-chain of length 2 and C
                     4 a 4/1-chain of length 4. Note that some of these chains have common vertices. The resulting coloring is given in Fig. 12
                     .

Januario and Urrutia have shown in (Januario & Urrutia, 2016) that a generalization of the PTS neighborhood increases the solution space connectivity of the problem in hand and allows a local search heuristic to obtain better results.

The generalized moves described above have shown how the formalism and the language of graph theory are helpful to describe and to understand the local modifications of schedules generated when moves are performed. They are also useful for designing procedures to create schedules from scratch. In the related literature, some neighborhoods are described as intricate structures, as ejection chains, that do not generally provide a deeper insight of what is really happening.

The size of the solution space of SRR scheduling problems is large even when compared with the size of the solution space of classical combinatorial optimization problems as the traveling salesman problem. There is no known formula for the number of different proper edge colorings of Kn
                     . The number of non-isomorphic one-factorizations of Kn
                      increases very fast with n. Dinitz et al. (1994) computed the complete set of 526,915,620 non-isomorphic one-factorizations of K
                     12. Kaski and Ostergard (2009) reported a total of 1,132,835,421,602,062,347 non-isomorphic one-factorizations of K
                     14.

In a perfect one-factorization, or perfect proper edge coloring (PPEC), the sub-graph containing all vertices and edges belonging to the union of any two one-factors is a Hamiltonian cycle. Kotzig (1963) conjectured that a PPEC of Kn
                      exists for every even value of n > 2. Since 2009, when Wolfe (2009) found a PPEC of K
                     52 after an exhaustive search that took more than 400 days of computing time, K
                     56 is the smallest complete graph for which the existence of a PPEC remains an open problem.

A PPEC may not be desirable as an initial solution for local search algorithms of SRR scheduling problems. If a given proper edge coloring is perfect, then any move in the PRS neighborhood has the same effect as a move in the RS neighborhood, which generates colorings that are isomorphic to the original one.

The circle method, introduced in Section 4, is a simple strategy to obtain initial solutions for any local search heuristic for SRR scheduling problems. However, it is able to generate only one single type of edge coloring (the canonical edge coloring) for a complete graph. In fact, the circle method generates PPECs for every complete graph Kn
                      for which 
                        
                           n
                           =
                           p
                           +
                           1
                           ,
                        
                      where p is a prime number. Therefore, whenever an initial solution is generated by the circle method, when 
                        
                           n
                           =
                           p
                           +
                           1
                           ,
                        
                      a move in the PRS neighborhood is equivalent to a move in the RS neighborhood. In consequence, these neighborhoods always lead to colorings which are isomorphic to the canonical edge coloring.

One may argue that the PTS neighborhood may be used to escape from canonical colorings. However, in some cases, this neighborhood suffers from a similar property. Partial team swaps are equivalent to team swaps, whenever the set S of vertices computed as described in Section 5 is equal to V∖{v
                     1, v
                     2}. One could ask if all possible partial team swap moves are equivalent to team swap moves, for some value of n for which the canonical coloring is perfect. In order to provide an answer to this conjecture, we applied an exhaustive search procedure to check if that was the case for each even value of 
                        
                           n
                           =
                           p
                           +
                           1
                           ≤
                           100
                           ,
                        
                      where p is a prime number. We found that the partial team swap neighborhood is, in fact, equivalent to the team swap neighborhood for canonical edge colorings of Kn
                      for 
                        
                           n
                           =
                        
                      4, 6, 12, 14, 20, 30, 38, 54, 60, 62, 68, and 84.

The above result shows that for all above mentioned values of n, any local search heuristic using an initial solution constructed by the circle method will be trapped in a small portion of the solution space formed by all colorings isomorphic to the canonical one. In such cases, applying Vizing’s algorithm instead of the circle method, or using the ideas sketched in Section 5 for extending the neighborhoods, may improve the effectiveness of the local search by exploring a broader portion of the search space.

An experiment using Vizing’s algorithm to build initial solutions for the traveling tournament problem with predefined venues (Melo, Urrutia, & Ribeiro, 2009) was reported by Costa et al. (2012). The authors evaluated instances with 18 and 20 teams. For the instances with 20 teams, an improvement of almost 19 percent on average in the cost function was obtained only because Vizing’s algorithm was used instead of the circle method for constructing the initial solution. Their experiment revealed that the choice of the coloring method based on Vizing’s theorem can lead to better results for the considered problem.

Let us now examine the situation of a league in which each team has its own venue (a stadium) and each game (i, j) is played either at the venue of the team i or at that of the team j. For simplicity, we deal with the case of SRR tournaments. The extension to DRR tournaments can be easily carried out.

It is natural to represent a game in which i will play against j in the venue of the latter by an oriented arc from i to j . This way the schedule now corresponds, in graph theoretical terms, to an oriented edge coloring. An illustration for a league of six teams is given in Fig. 13
                     . The timetable on the left indicates in row i and column s which is the opponent of the team i in round s. The home-away pattern (HAP) set on the right indicates in row i and column s whether i plays in round s a home-game (H) or an away-game (A).

As soon as we consider the venues of the teams, difficulties arise regarding fairness. Ideally, one would like to have for each team a sequence of games which would be perfectly alternating between home and away-games. This is clearly impossible if n > 2. Two teams having exactly the same sequence of H’s and A’s in the HAP set could never play against each other. Therefore, in any real schedule, there must be some breaks in the perfect alternation of H’s and A’s for some teams. A break was defined in Section 3 as the occurrence of two consecutive H’s or two consecutive A’s for a team. In Fig. 13, team 3 has a break in round 2 and so has team 4. In fact, the timetable and the HAP set can be represented in a more compact form using the “+” and “
                        −
                     ” signs, instead of H’s and A’s, respectively, as shown in Fig. 14
                     .

Since in any schedule there can be at most two teams with perfect alternations of H’s and A’s, 
                        
                           n
                           −
                           2
                        
                      teams will have sequences of games with at least one break each. Therefore, the total number of breaks in any schedule will be at least 
                        
                           n
                           −
                           2
                        
                     . There is a simple construction (de Werra, 1981) which gives a schedule with 
                        
                           n
                           −
                           2
                        
                      breaks for any league of n teams. In any schedule for n teams with the minimum number of breaks produced by the circle method and with the HAP set constructed by the algorithm in de Werra (1981), the breaks occur at rounds 
                        
                           2
                           ·
                           i
                           −
                           1
                           ,
                        
                      for 
                        
                           i
                           =
                           2
                           ,
                           …
                           ,
                           n
                           /
                           2
                        
                     . However, for general schedules with 
                        
                           n
                           −
                           2
                        
                      breaks it is an open question to characterize the rounds at which the breaks may occur. In practice, we may face the following problem: for some reason, a few entries of a HAP set have been fixed beforehand, meaning that some teams must play at home (or away) at some fixed rounds. Can one find a timetable and an extension of the partial HAP set which will give a “feasible” schedule? To solve this problem, integer programming models have been proposed (Briskorn, 2008). However, we may also express it in list edge coloring terms (Diestel, 2006). In such a formulation, every edge e of a complete graph Kn
                      has a list L(e) of possible (feasible) colors. It is required to find a proper edge coloring in which each edge e of Kn
                      has a color c(e) ∈ L(e).

In this problem, when some entries of a HAP set have been fixed with either H or A, we proceed as follows: initially, for each edge 
                        
                           e
                           =
                           (
                           i
                           ,
                           j
                           )
                        
                      we set 
                        
                           L
                           (
                           e
                           )
                           =
                           {
                           1
                           ,
                           2
                           ,
                           …
                           ,
                           n
                           −
                           1
                           }
                        
                     . Then, color s is removed from L(e) if and only if either both teams i and j are at home or both are away in round s.

Another frequent problem consists in finding a HAP set with a minimum number of breaks for a given timetable: after all games have been assigned to some round, it remains to determine where each game between i and j is played, i.e., in the venue of either i or of j. This problem is NP-hard and it has been shown in (Post & Woeginger, 2006) that, for a league of n teams, the minimum number of breaks is at most 
                        
                           
                              1
                              4
                           
                           n
                           
                              (
                              n
                              −
                              2
                              )
                           
                        
                      if 
                        
                           n
                           =
                           4
                           k
                        
                      or 
                        
                           
                              1
                              4
                           
                           
                              
                                 (
                                 n
                                 −
                                 2
                                 )
                              
                              2
                           
                        
                      if 
                        
                           n
                           =
                           4
                           k
                           +
                           2
                        
                     .

However, it is possible to find in polynomial time for a given timetable with n teams, whether there is a HAP set with 
                        
                           n
                           −
                           2
                        
                      breaks or not. We refer the reader to (Miyashiro, Iwasaki, & Matsui, 2003) for several other formulations of this type of problem.

There are many more real-world problems which may be modeled by edge colorings in graphs, as in scheduling of tasks requiring the cooperation of two processors (Kosowski, 2009), file transfer operations (Nakano, Zhou, & Nishizeki, 1995), and channel assignment in wireless networks (Hsu, Liu, Wang, & Wu, 2006). In this work, we have presented an approach of sports scheduling problems based on the systematic use of graph theory and, in particular, edge colorings. We exploited the relations between single round robin scheduling and proper edge colorings of complete graphs. After discussing the classical circle method, we introduced an edge coloring procedure based on Vizing’s theorem that allows the construction of schedules which are not restricted to any particular structure.

We have also presented an edge coloring interpretation of the neighborhoods commonly used by local search algorithms for sports scheduling problems. We have shown certain properties of the neighborhoods based on this representation and we have also discussed some of their variations and extensions.

Algorithms that construct initial solutions with the circle method and use only the four classical neighborhoods in the literature may be trapped in a very small portion of the solution space. The use of Vizing’s algorithm instead of the circle method may circumvent this issue. In order to increase the connectivity of the solution space, we have suggested some neighborhood extensions.

There are many open questions to be studied in the field of sports scheduling. We have mentioned a few in the previous sections. Since it is likely that local search procedures will remain an important tool for dealing with these problems, more efforts should be devoted to study the properties of the currently known move types and to generate new ones to explore systematically the solution space of schedules. Furthermore, theoretical works on one-factorizations of complete graphs are needed to better understand the structure of schedules, thus being able to take into account the many constraints and requirements appearing in real applications. We hope to motivate further works in these research avenues.

@&#ACKNOWLEDGMENTS@&#

Sebastián Urrutia was partially supported by CNPq research grant 307839/2013-3. Part of this research was carried out while Sebastián Urrutia was visiting EPFL in May and June 2015. The support of this institution is gratefully acknowledged. The work of Celso C. Ribeiro was partially supported by CNPq research grants 308687/2010-8 and 459575/2014-7 and by FAPERJ research grant E-26/201.198/2014. Tiago Januario was partially supported by CNPq and CAPES research grants.

@&#REFERENCES@&#

