@&#MAIN-TITLE@&#The two-machine flowshop total completion time problem: Branch-and-bound algorithms based on network-flow formulation

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We study the two-machine flowshop problem with sequence-independent setup times to minimize total completion time.


                        
                        
                           
                           Strong Lagrangian bounds are proposed based on large scale network flow formulations.


                        
                        
                           
                           To cope with their size, filtering procedures are developed.


                        
                        
                           
                           Numerical experiments assess the efficiency of branch-and-bound algorithms.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Scheduling

Flowshop

Branch-and-bound

Lagrangian relaxation

@&#ABSTRACT@&#


               
               
                  We consider the flowshop problem on two machines with sequence-independent setup times to minimize total completion time. Large scale network flow formulations of the problem are suggested together with strong Lagrangian bounds based on these formulations. To cope with their size, filtering procedures are developed. To solve the problem to optimality, we embed the Lagrangian bounds into two branch-and-bound algorithms. The best algorithm is able to solve all 100-job instances of our testbed with setup times and all 140-job instances without setup times, thus significantly outperforming the best algorithms in the literature.
               
            

@&#INTRODUCTION@&#

We consider the problem of scheduling a set of jobs 
                                 
                                    J
                                    =
                                    {
                                    1
                                    ,
                                    ⋯
                                    ,
                                    n
                                    }
                                 
                               in a two-machine flowshop with the objective of minimizing the sum of completion times of jobs. The jobs are available at time zero and they should be processed first on machine 1, and then on machine 2. Each machine can process at most one job at a time. Let 
                                 
                                    p
                                    j
                                    m
                                 
                               denote the processing time of job j on machine m, where 
                                 
                                    m
                                    =
                                    1
                                    ,
                                    2
                                 
                              . All processing times are integer. Preemption of the processing of the jobs in not allowed on either machine. Let 
                                 
                                    C
                                    j
                                    m
                                 
                               denote the completion time of job j on machine m. According to the scheduling classification, the problem is denoted by F2||∑Cj
                              . It is known to be NP-hard in the strong sense (Garey, Johnson, & Sethi, 1976). It has been shown by Conway, Maxwell, and Miller (1967) that there exists at least one optimal solution where both machines have the same sequence of jobs. Thus, we may restrict the search to permutation schedules only.

In addition to this classic two-machine flowshop problem, we also consider its extension in which every job should be set up on each machine before being processed. Let 
                                 
                                    s
                                    j
                                    m
                                 
                               denote the setup time of job j on machine m. Setup of a job on machine 2 and processing of the same job on machine 1 can be performed in parallel. Note that setup times do not depend on the job processed just before job j, i.e. the setup times are sequence independent. This generalisation of the problem has been treated previously by Gharbi, Ladhari, Msakni, and Serairi (2013). It can be denoted as F2|STsi
                              |∑Cj
                               in the scheduling classification. The set of permutation schedules remains dominant for this generalization as indicated in Allahverdi, Gupta, and Aldowaisan (1999).

@&#LITERATURE REVIEW@&#

The problem F2||∑Cj
                               has been studied in the literature for many years. First lower bounds and the branch-and-bound algorithms based on them were proposed by Ignall and Schrage (1965), Ahmadi and Bagchi (1990), and Della Croce, Narayan, and Tadei (1996). In these papers, instances with 10, 15, and 30 jobs, respectively, have been solved to optimality. Note that the processing times of jobs here are quite short and do not exceed 20 time units (even 10 in Della Croce et al. (1996)).

Several Lagrangian relaxation-based lower bounds have been proposed for the problem. van de Velde (1990) relaxed precedence constraints between operations of the same job to obtain a lower bound. The Lagrangian relaxation subproblem is difficult in the case where the schedule is restricted to be a permutation one. However, this subproblem becomes polynomially solvable when we further restrict Lagrangian multipliers to a same value. This restriction makes the Lagrangian bound weaker but computable in a short time. A perturbation procedure is used to improve this bound which consists in modifying the Lagrangian multipliers so as not to break the optimality of the current solution. Instances with up to 20 jobs have been solved to optimality using this bound. Hoogeveen and van de Velde (1995) have improved this lower bound by adding slack variables to the precedence constraints and by transforming these constraints to equalities. However, this improved lower bounds has not been tested inside an enumeration algorithm. Della Croce, Ghirardi, and Tadei (2002) used the same Lagrangian lower bound, but improved the perturbation procedure used by van de Velde (1990). They also introduced some dominance relations to reduce the enumeration in the branch-and-bound algorithms. Instances with up to 45 jobs with short processing times (up to 10) and up to 30 jobs with long processing times have been solved to optimality.

A positional (assignment) formulation for the problem F2||∑Cj
                               has been proposed independently by Akkan and Karabati (2004) and Hoogeveen, van Norden, and van de Velde (2006). In both works, the authors use the notion of waiting time of a job before its processing starts on the second machine. The formulation has O(n
                              2) variables and O(n) constraints. In Hoogeveen et al. (2006), it was shown experimentally that the lower bound one can obtain by solving the linear relaxation of the positional formulation is stronger than any other bound proposed previously in the literature. It was also shown that any Lagrangian relaxation does not improve this bound. In Akkan and Karabati (2004), a network flow formulation for the problem was also suggested. In this network, each node corresponds to a position in the schedule and the waiting time of the job on this position. The network was then reduced by finding bounds on waiting times of jobs on different positions. To find a lower bound and design a branch-and-bound, the Lagrangian relaxation is used, in which job occurrence constraints are relaxed. Here the subproblem is the shortest path problem, and the Lagrangian dual problem is solved using a subgradient method. The branch-and-bound algorithm which uses this Lagrangian relaxation is able to solve instances with up to 60 jobs with small processing times (up to 10) and up to 45 jobs with large processing times (up to 100).


                              Haouari and Kharbeche (2013) proposed valid inequalities for the positional formulation. They experimentally showed that the dual bound of the linear relaxation of the positional formulation is improved when these inequalities are added. However, these improved dual bounds were not embedded in any exact algorithm for the solution of the problem.


                              Hoogeveen and Kawaguchi (1999) considered several special cases of the problem F2||∑Cj
                              . They proposed approximation algorithms for the general case of the problem as well as for a special case which they proved to be NP-hard. Three special cases of the problem were proved to be polynomially solvable.

There were two most important recent contributions to the problem F2|STsi
                              |∑Cj
                               with sequence-independent setup times. Allahverdi (2000) proposed two dominance relations and a branch-and-bound algorithm based on them. With this algorithm, all instances with up to 20 jobs with large processing and setup times (up to 100) were solved to optimality.


                              Gharbi et al. (2013) proposed several dual bounds for the problem F2|STsi
                              |∑Cj
                              . Some of the suggested lower bounding procedures are similar to those used for the problem without setup times. One lower bound is based on solving the linear relaxation of a positional formulation. Another lower bound is based on Lagrangian relaxation similar to one used in van de Velde (1990). Best exact algorithms based on the proposed dual bounds allowed the authors to solve all instances with up to 30 jobs and the majority of instances with 35 jobs with large processing and setup times (up to 100).

In this work, we propose improved branch-and-bound algorithms for the problem F2||∑Cj
                               as well as for its extension F2|STsi
                              |∑Cj
                              . Our approach is based on the network flow formulation from (Akkan & Karabati, 2004). To obtain stronger dual bounds, we use a larger network than the one used in Akkan and Karabati (2004). Different dominance rules and filtering techniques are exploited in order to cope with the size of the network. The structure of the network allows us to compute an expensive Lagrangian dual bound only once at the root node, and then recompute the bound in linear time at every node of the enumeration tree. Thus, millions of nodes can be checked in a reasonable time. Using the proposed algorithm, we are able to solve all instances of both problems F2||∑Cj
                               and F2|STsi
                              |∑Cj
                               with up to 100 jobs with large processing times.

The outline of the paper is as follows. In Section 2, we give the classic assignment MIP formulation of the problem. Different dominance rules, which are both from the literature and new ones, are described in Section 3. In Section 4, we present network flow formulations for the problem, as well as a subgradient algorithm with embedded filtering procedures to obtain Lagrangian dual bounds. Two improved branch-and-bound algorithms for the problem are suggested in Section 5. Results of computational experiments with these algorithms are given in Section 6. Finally, in Section 7, conclusions are drawn.

This section introduces a mixed-integer linear programming formulation for the problem F2|STsi
                     |∑Cj
                     , which generalizes the positional formulation proposed in Akkan and Karabati (2004).

Note that the setup time of any job on machine 1 can be integrated into its processing time on machine 1. This follows from the fact that there exists an optimal schedule in which machine 1 process jobs without idle time. So, without loss of generality, for all j ∈ J, we can set 
                        
                           
                              s
                              j
                              1
                           
                           =
                           0
                           ,
                        
                      and adjust appropriately processing times 
                        
                           p
                           j
                           1
                        
                     .

In the following, [k] denotes the index of the job in position k. Assuming the convention that 
                        
                           
                              C
                              
                                 [
                                 0
                                 ]
                              
                              1
                           
                           =
                           
                              C
                              
                                 [
                                 0
                                 ]
                              
                              2
                           
                           =
                           0
                           ,
                        
                      the completion times 
                        
                           C
                           
                              [
                              k
                              ]
                           
                           m
                        
                      of the job in position k, k ∈ J, on machines 
                        
                           m
                           =
                           1
                           ,
                           2
                        
                      can be computed as:

                        
                           (1)
                           
                              
                                 
                                    
                                       
                                          C
                                          
                                             [
                                             k
                                             ]
                                          
                                          1
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          
                                             C
                                             
                                                [
                                                k
                                                −
                                                1
                                                ]
                                             
                                             1
                                          
                                          +
                                          
                                             p
                                             
                                                [
                                                k
                                                ]
                                             
                                             1
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              
                                 
                                    
                                       
                                          C
                                          
                                             [
                                             k
                                             ]
                                          
                                          2
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          max
                                          
                                             {
                                             
                                                C
                                                
                                                   [
                                                   k
                                                   ]
                                                
                                                1
                                             
                                             ,
                                             
                                                C
                                                
                                                   [
                                                   k
                                                   −
                                                   1
                                                   ]
                                                
                                                2
                                             
                                             +
                                             
                                                s
                                                
                                                   [
                                                   k
                                                   ]
                                                
                                                2
                                             
                                             }
                                          
                                          +
                                          
                                             p
                                             
                                                [
                                                k
                                                ]
                                             
                                             2
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

In Akkan and Karabati (2004), the authors introduced the notion of time lag between the processing of the same job on both machines to write a positional model and a network flow model for the problem. This kind of models is also called waiting time-based models in Gharbi et al. (2013).

The completion-to-completion lag 
                        
                           L
                           k
                           c
                        
                      of the job in position k, k ∈ J is defined as the time elapsed between the completion of the job on machine 1 and its completion on machine 2:

                        
                           
                              
                                 
                                    
                                       
                                          L
                                          k
                                          c
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          
                                             C
                                             
                                                [
                                                k
                                                ]
                                             
                                             2
                                          
                                          −
                                          
                                             C
                                             
                                                [
                                                k
                                                ]
                                             
                                             1
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       =
                                    
                                    
                                       
                                          max
                                          
                                             {
                                             0
                                             ,
                                             
                                                L
                                                
                                                   k
                                                   −
                                                   1
                                                
                                                c
                                             
                                             +
                                             
                                                s
                                                
                                                   [
                                                   k
                                                   ]
                                                
                                                2
                                             
                                             −
                                             
                                                p
                                                
                                                   [
                                                   k
                                                   ]
                                                
                                                1
                                             
                                             }
                                          
                                          +
                                          
                                             p
                                             
                                                [
                                                k
                                                ]
                                             
                                             2
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

The completion-to-start lag 
                        
                           L
                           k
                           s
                        
                      of the job in position k, k ∈ J, is defined as the time elapsed between the completion of the job on machine 1 and its start on machine 2:

                        
                           
                              
                                 
                                    
                                       
                                          L
                                          k
                                          s
                                       
                                    
                                    
                                       
                                          =
                                          
                                             L
                                             k
                                             c
                                          
                                          −
                                          
                                             p
                                             
                                                [
                                                k
                                                ]
                                             
                                             2
                                          
                                          =
                                       
                                    
                                    
                                       
                                          max
                                          
                                             {
                                             0
                                             ,
                                             
                                                L
                                                
                                                   k
                                                   −
                                                   1
                                                
                                                s
                                             
                                             +
                                             
                                                p
                                                
                                                   [
                                                   k
                                                   −
                                                   1
                                                   ]
                                                
                                                2
                                             
                                             +
                                             
                                                s
                                                
                                                   [
                                                   k
                                                   ]
                                                
                                                2
                                             
                                             −
                                             
                                                p
                                                
                                                   [
                                                   k
                                                   ]
                                                
                                                1
                                             
                                             }
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

In order to write a convenient MILP model, the objective function is rewritten as:

                        
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             k
                                          
                                          
                                             C
                                             
                                                [
                                                k
                                                ]
                                             
                                             2
                                          
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          
                                             ∑
                                             k
                                          
                                          
                                             (
                                             
                                                C
                                                
                                                   [
                                                   k
                                                   ]
                                                
                                                1
                                             
                                             +
                                             
                                                L
                                                k
                                                c
                                             
                                             )
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       =
                                    
                                    
                                       
                                          
                                             ∑
                                             k
                                          
                                          
                                             (
                                             
                                                (
                                                n
                                                −
                                                k
                                                +
                                                1
                                                )
                                             
                                             
                                                p
                                                
                                                   [
                                                   k
                                                   ]
                                                
                                                1
                                             
                                             +
                                             
                                                L
                                                k
                                                s
                                             
                                             +
                                             
                                                p
                                                
                                                   [
                                                   k
                                                   ]
                                                
                                                2
                                             
                                             )
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

Let a binary variable xjk, j, k ∈ J, determine whether job j is processed in position k in the schedule. Let a continuous variable 
                        
                           
                              L
                              k
                              s
                           
                           ,
                        
                      
                     k ∈ J, represent the completion-to-start lag of the job in position k in the schedule. We now write the positional formulation for the problem F2|STsi
                     |∑Cj
                     .

                        
                           (3)
                           
                              
                                 
                                    
                                       min
                                    
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                k
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             (
                                             n
                                             −
                                             k
                                             +
                                             1
                                             )
                                          
                                          
                                             (
                                             
                                                ∑
                                                
                                                   j
                                                   =
                                                   1
                                                
                                                n
                                             
                                             
                                                p
                                                j
                                                1
                                             
                                             
                                                x
                                                
                                                   j
                                                   k
                                                
                                             
                                             )
                                          
                                          +
                                          
                                             ∑
                                             
                                                k
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             L
                                             k
                                             s
                                          
                                          +
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             p
                                             j
                                             2
                                          
                                          ,
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    
                                       
                                          s
                                          .
                                          t
                                          .
                                          
                                          
                                             L
                                             1
                                             s
                                          
                                       
                                    
                                    
                                       ≥
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             (
                                             
                                                s
                                                j
                                                2
                                             
                                             −
                                             
                                                p
                                                j
                                                1
                                             
                                             )
                                          
                                          
                                             x
                                             
                                                j
                                                1
                                             
                                          
                                          ,
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    
                                       
                                          L
                                          k
                                          s
                                       
                                    
                                    
                                       ≥
                                    
                                    
                                       
                                          
                                             L
                                             
                                                k
                                                −
                                                1
                                             
                                             s
                                          
                                          +
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             p
                                             j
                                             2
                                          
                                          
                                             x
                                             
                                                j
                                                ,
                                                k
                                                −
                                                1
                                             
                                          
                                          +
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             (
                                             
                                                s
                                                j
                                                2
                                             
                                             −
                                             
                                                p
                                                j
                                                1
                                             
                                             )
                                          
                                          
                                             x
                                             
                                                j
                                                k
                                             
                                          
                                          ,
                                          
                                          k
                                          =
                                          2
                                          ,
                                          ⋯
                                          ,
                                          n
                                          ,
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             x
                                             
                                                j
                                                k
                                             
                                          
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          1
                                          ,
                                          
                                          k
                                          =
                                          1
                                          ,
                                          ⋯
                                          ,
                                          n
                                          ,
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             
                                                k
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             x
                                             
                                                j
                                                k
                                             
                                          
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          1
                                          ,
                                          
                                          j
                                          =
                                          1
                                          ,
                                          ⋯
                                          ,
                                          n
                                          ,
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (8)
                           
                              
                                 
                                    
                                       
                                          L
                                          k
                                          s
                                       
                                    
                                    
                                       ≥
                                    
                                    
                                       
                                          0
                                          ,
                                          
                                          k
                                          =
                                          1
                                          ,
                                          ⋯
                                          ,
                                          n
                                          ,
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (9)
                           
                              
                                 
                                    
                                       
                                          x
                                          
                                             j
                                             k
                                          
                                       
                                    
                                    
                                       ∈
                                    
                                    
                                       
                                          {
                                          0
                                          ,
                                          1
                                          }
                                          ,
                                          
                                          j
                                          =
                                          1
                                          ,
                                          ⋯
                                          ,
                                          n
                                          ,
                                          k
                                          =
                                          1
                                          ,
                                          ⋯
                                          ,
                                          n
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  


                     Table 1
                      reports results obtained using Cplex 12.6 on a laptop with 16 gigabytes RAM and an Intel i7 2.7 gigahertz processor. In order to keep the analysis concise, we only report in this section results for the problem without setup times. The test bed is composed of 20 instances (without setup times) for each combination (# of jobs, duration range) (see Section 6 for details about the instances). The scalability of this straightforward approach is clearly limited.

This section introduces dominance rules which allow us to speed up the solution process. As specified in the corresponding sections, they are used in the branch-and-bound procedures to avoid exploring the set of solutions which are proved to be dominated, and in network reduction procedures to shrink the size of the networks.

The next proposition gives a generalization of the dominance rule from (van de Velde, 1990) for the problem F2||∑Cj
                     .

                        Proposition 1
                        
                           Allahverdi, 2000
                        


                        
                           If jobs i and j satisfy
                           
                              
                                 
                                    p
                                    i
                                    1
                                 
                                 +
                                 
                                    s
                                    j
                                    2
                                 
                                 ≤
                                 
                                    p
                                    j
                                    1
                                 
                                 +
                                 
                                    s
                                    i
                                    2
                                 
                                 ,
                              
                           
                           
                              
                                 
                                    p
                                    i
                                    2
                                 
                                 +
                                 
                                    s
                                    i
                                    2
                                 
                                 ≤
                                 
                                    p
                                    j
                                    2
                                 
                                 +
                                 
                                    s
                                    j
                                    2
                                 
                                 ,
                              
                            
                           and
                           
                              
                                 
                                    p
                                    j
                                    2
                                 
                                 ≤
                                 
                                    p
                                    i
                                    2
                                 
                                 ,
                              
                            
                           then there exists an optimal schedule in which job i precedes job j.
                        

In our solution methods, Proposition 1 is used as preprocessing to determine a set of predecessors 
                        
                           Γ
                           i
                           −
                        
                      and successors 
                        
                           Γ
                           i
                           +
                        
                      for each job i. The next proposition is an extension of the dominance rule of (Della Croce et al., 1996) to the case with sequence-independent setup times.

                        Proposition 2
                        
                           Let σ be a partial schedule, and i and j two jobs not in σ. Let us denote by
                           
                              
                                 C
                                 σ
                                 m
                              
                            
                           the completion time of σ on machine m ∈ {1, 2}. If
                           
                              
                                 
                                    p
                                    i
                                    1
                                 
                                 ≤
                                 
                                    p
                                    j
                                    1
                                 
                                 ,
                              
                           
                           
                              
                                 
                                    p
                                    i
                                    2
                                 
                                 ≥
                                 
                                    p
                                    j
                                    2
                                 
                                 ,
                              
                           
                           
                              
                                 
                                    s
                                    i
                                    2
                                 
                                 ≥
                                 
                                    s
                                    j
                                    2
                                 
                                 ,
                              
                            
                           and
                           
                              
                                 (10)
                                 
                                    
                                       max
                                       
                                          {
                                          
                                             C
                                             σ
                                             1
                                          
                                          +
                                          
                                             p
                                             i
                                             1
                                          
                                          ,
                                          
                                             C
                                             σ
                                             2
                                          
                                          +
                                          
                                             s
                                             i
                                             2
                                          
                                          }
                                       
                                       +
                                       
                                          p
                                          i
                                          2
                                       
                                       ≤
                                       max
                                       
                                          {
                                          
                                             C
                                             σ
                                             1
                                          
                                          +
                                          
                                             p
                                             j
                                             1
                                          
                                          ,
                                          
                                             C
                                             σ
                                             2
                                          
                                          +
                                          
                                             s
                                             j
                                             2
                                          
                                          }
                                       
                                       +
                                       
                                          p
                                          j
                                          2
                                       
                                       ,
                                    
                                 
                              
                           
                           then there exists an optimal solution not headed by σj, where σj denotes σ immediately followed by j.
                        

Suppose there exists an optimal schedule S headed by σj. Let K be the set of positions of jobs scheduled between jobs j and i in S. Let A be the set of positions of all jobs scheduled after job i (including job i itself) in S. We denote by 
                              
                                 C
                                 
                                    
                                       (
                                       S
                                       )
                                    
                                    
                                       [
                                       k
                                       ]
                                    
                                    m
                                 
                              
                            the completion time of the job in position k on machine m in schedule S.

We now interchange jobs j and i in S to obtain another schedule S′. Then, from 
                              
                                 
                                    p
                                    i
                                    1
                                 
                                 ≤
                                 
                                    p
                                    j
                                    1
                                 
                                 ,
                              
                            we have

                              
                                 (11)
                                 
                                    
                                       C
                                       
                                          
                                             (
                                             
                                                S
                                                ′
                                             
                                             )
                                          
                                          
                                             [
                                             k
                                             ]
                                          
                                          1
                                       
                                       ≤
                                       C
                                       
                                          
                                             (
                                             S
                                             )
                                          
                                          
                                             [
                                             k
                                             ]
                                          
                                          1
                                       
                                       ,
                                       
                                       ∀
                                       k
                                       ∈
                                       J
                                       .
                                    
                                 
                              
                           Now, from (10) and (11) we can conclude that

                              
                                 (12)
                                 
                                    
                                       C
                                       
                                          
                                             (
                                             
                                                S
                                                ′
                                             
                                             )
                                          
                                          
                                             [
                                             k
                                             ]
                                          
                                          2
                                       
                                       ≤
                                       C
                                       
                                          
                                             (
                                             S
                                             )
                                          
                                          
                                             [
                                             k
                                             ]
                                          
                                          2
                                       
                                       ,
                                       
                                       ∀
                                       k
                                       ∈
                                       K
                                       .
                                    
                                 
                              
                           Finally, from (12), 
                              
                                 
                                    p
                                    i
                                    2
                                 
                                 ≥
                                 
                                    p
                                    j
                                    2
                                 
                                 ,
                              
                            and 
                              
                                 
                                    s
                                    i
                                    2
                                 
                                 ≥
                                 
                                    s
                                    j
                                    2
                                 
                              
                            it follows that 
                              
                                 C
                                 
                                    
                                       (
                                       
                                          S
                                          ′
                                       
                                       )
                                    
                                    
                                       [
                                       k
                                       ]
                                    
                                    2
                                 
                                 ≤
                                 C
                                 
                                    
                                       (
                                       S
                                       )
                                    
                                    
                                       [
                                       k
                                       ]
                                    
                                    2
                                 
                                 ,
                              
                            for all k ∈ A.□


                     Proposition 2 can be translated in terms of completion-to-completion lag, by substituting 
                        
                           
                              L
                              σ
                              c
                           
                           =
                           
                              C
                              σ
                              2
                           
                           −
                           
                              C
                              σ
                              1
                           
                        
                     :

                        Proposition 3
                        
                           Let σ be a partial schedule,
                           
                              
                                 L
                                 σ
                                 c
                              
                            
                           the corresponding completion-to-completion lag, and i and j two jobs not in σ. If
                           
                              
                                 
                                    p
                                    i
                                    1
                                 
                                 ≤
                                 
                                    p
                                    j
                                    1
                                 
                                 ,
                              
                           
                           
                              
                                 
                                    p
                                    i
                                    2
                                 
                                 ≥
                                 
                                    p
                                    j
                                    2
                                 
                                 ,
                              
                           
                           
                              
                                 
                                    s
                                    i
                                    2
                                 
                                 ≥
                                 
                                    s
                                    j
                                    2
                                 
                                 ,
                              
                            
                           and
                           
                              
                                 max
                                 
                                    (
                                    
                                       p
                                       i
                                       1
                                    
                                    ,
                                    
                                       L
                                       σ
                                       c
                                    
                                    +
                                    
                                       s
                                       i
                                       2
                                    
                                    )
                                 
                                 +
                                 
                                    p
                                    i
                                    2
                                 
                                 ≤
                                 max
                                 
                                    (
                                    
                                       p
                                       j
                                       1
                                    
                                    ,
                                    
                                       L
                                       σ
                                       c
                                    
                                    +
                                    
                                       s
                                       j
                                       2
                                    
                                    )
                                 
                                 +
                                 
                                    p
                                    j
                                    2
                                 
                                 ,
                              
                            
                           then there exists an optimal solution not headed by σj.
                        

Let us consider a partial schedule, built up to position 
                        
                           k
                           −
                           1
                        
                     . For a position k, two jobs a and b and 
                        
                           l
                           ∈
                           {
                           k
                           ,
                           k
                           +
                           1
                           }
                           ,
                        
                      let 
                        
                           
                              L
                              l
                              c
                           
                           
                              (
                              k
                              ,
                              a
                              →
                              b
                              )
                           
                        
                      denote the time lag between the completion times of [l] on machines 1 and 2, under the assumption that a is processed at position k and b at position 
                        
                           k
                           +
                           1
                        
                      (i.e. 
                        
                           [
                           k
                           ]
                           =
                           a
                        
                      and 
                        
                           [
                           k
                           +
                           1
                           ]
                           =
                           b
                        
                     ):

                        
                           (13)
                           
                              
                                 
                                    
                                       
                                          
                                             L
                                             k
                                             c
                                          
                                          
                                             (
                                             k
                                             ,
                                             a
                                             →
                                             b
                                             )
                                          
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          max
                                          
                                             {
                                             
                                                p
                                                a
                                                1
                                             
                                             ,
                                             
                                                L
                                                
                                                   k
                                                   −
                                                   1
                                                
                                                c
                                             
                                             +
                                             
                                                s
                                                a
                                                2
                                             
                                             }
                                          
                                          +
                                          
                                             p
                                             a
                                             2
                                          
                                          −
                                          
                                             p
                                             a
                                             1
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (14)
                           
                              
                                 
                                    
                                       
                                          
                                             L
                                             
                                                k
                                                +
                                                1
                                             
                                             c
                                          
                                          
                                             (
                                             k
                                             ,
                                             a
                                             →
                                             b
                                             )
                                          
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          max
                                          
                                             {
                                             
                                                p
                                                b
                                                1
                                             
                                             ,
                                             
                                                L
                                                
                                                   k
                                                
                                                c
                                             
                                             +
                                             
                                                s
                                                b
                                                2
                                             
                                             }
                                          
                                          +
                                          
                                             p
                                             b
                                             2
                                          
                                          −
                                          
                                             p
                                             b
                                             1
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

Let us define f(k, a → b) as the contribution of jobs a and b to the total cost expressed in the objective function (3), when they are scheduled at positions k and 
                        
                           k
                           +
                           1
                        
                      respectively:

                        
                           
                              
                                 
                                    
                                       
                                          f
                                          (
                                          k
                                          ,
                                          a
                                          →
                                          b
                                          )
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          
                                             (
                                             n
                                             −
                                             k
                                             +
                                             1
                                             )
                                          
                                          
                                             p
                                             a
                                             1
                                          
                                          +
                                          
                                             L
                                             k
                                             c
                                          
                                          
                                             (
                                             k
                                             ,
                                             a
                                             →
                                             b
                                             )
                                          
                                          +
                                          
                                             (
                                             n
                                             −
                                             k
                                             )
                                          
                                          
                                             p
                                             b
                                             1
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          +
                                          
                                          
                                             L
                                             
                                                k
                                                +
                                                1
                                             
                                             c
                                          
                                          
                                             (
                                             k
                                             ,
                                             a
                                             →
                                             b
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

In the same way, one can define 
                        
                           
                              L
                              ℓ
                              c
                           
                           
                              (
                              k
                              ,
                              σ
                              )
                           
                        
                      and f(k, σ), which are the completion-to-completion lag in position ℓ and the partial cost, respectively, when scheduling a sequence of jobs σ starting at position k:

                        
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             L
                                             ℓ
                                             c
                                          
                                          
                                             (
                                             k
                                             ,
                                             σ
                                             )
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          =
                                          
                                             {
                                             
                                                
                                                   
                                                      
                                                         max
                                                         
                                                            {
                                                            
                                                               p
                                                               
                                                                  σ
                                                                  (
                                                                  1
                                                                  )
                                                               
                                                               1
                                                            
                                                            ,
                                                            
                                                               L
                                                               
                                                                  k
                                                                  −
                                                                  1
                                                               
                                                               c
                                                            
                                                            +
                                                            
                                                               s
                                                               
                                                                  σ
                                                                  (
                                                                  1
                                                                  )
                                                               
                                                               2
                                                            
                                                            }
                                                         
                                                         +
                                                         
                                                            p
                                                            
                                                               σ
                                                               (
                                                               1
                                                               )
                                                            
                                                            2
                                                         
                                                         −
                                                         
                                                            p
                                                            
                                                               σ
                                                               (
                                                               1
                                                               )
                                                            
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                         if
                                                         
                                                         ℓ
                                                         =
                                                         k
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         max
                                                         {
                                                         
                                                            p
                                                            
                                                               σ
                                                               (
                                                               ℓ
                                                               −
                                                               k
                                                               +
                                                               1
                                                               )
                                                            
                                                            1
                                                         
                                                         ,
                                                         
                                                            L
                                                            
                                                               ℓ
                                                               −
                                                               1
                                                            
                                                            c
                                                         
                                                         
                                                            (
                                                            k
                                                            ,
                                                            σ
                                                            )
                                                         
                                                         +
                                                         
                                                            s
                                                            
                                                               σ
                                                               (
                                                               ℓ
                                                               −
                                                               k
                                                               +
                                                               1
                                                               )
                                                            
                                                            2
                                                         
                                                         }
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                         +
                                                         
                                                            p
                                                            
                                                               σ
                                                               (
                                                               ℓ
                                                               −
                                                               k
                                                               +
                                                               1
                                                               )
                                                            
                                                            2
                                                         
                                                         −
                                                         
                                                            p
                                                            
                                                               σ
                                                               (
                                                               ℓ
                                                               −
                                                               k
                                                               +
                                                               1
                                                               )
                                                            
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                         if
                                                         
                                                         k
                                                         <
                                                         ℓ
                                                         <
                                                         |
                                                         σ
                                                         |
                                                         +
                                                         k
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          f
                                          
                                             (
                                             k
                                             ,
                                             σ
                                             )
                                          
                                          =
                                          
                                             ∑
                                             
                                                ℓ
                                                =
                                                k
                                             
                                             
                                                k
                                                +
                                                |
                                                σ
                                                |
                                                −
                                                1
                                             
                                          
                                          
                                             (
                                             n
                                             −
                                             ℓ
                                             +
                                             1
                                             )
                                          
                                          
                                             p
                                             
                                                σ
                                                (
                                                ℓ
                                                −
                                                k
                                                +
                                                1
                                                )
                                             
                                             1
                                          
                                          +
                                          
                                             ∑
                                             
                                                ℓ
                                                =
                                                k
                                             
                                             
                                                k
                                                +
                                                |
                                                σ
                                                |
                                                −
                                                1
                                             
                                          
                                          
                                             L
                                             ℓ
                                             c
                                          
                                          
                                             (
                                             k
                                             ,
                                             σ
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

The next proposition may be useful to improve a bound and/or to reduce the size of networks which will be presented below. It shows that, under some conditions, schedules in which a job j at position k precedes a job i can be discarded.

                        Proposition 4
                        Dominance on two consecutive jobs


                        
                           If f(k, i → j) < f(k, j → i) and
                           
                              
                                 
                                    L
                                    
                                       k
                                       +
                                       1
                                    
                                    c
                                 
                                 
                                    (
                                    k
                                    ,
                                    i
                                    →
                                    j
                                    )
                                 
                                 ≤
                                 
                                    L
                                    
                                       k
                                       +
                                       1
                                    
                                    c
                                 
                                 
                                    (
                                    k
                                    ,
                                    j
                                    →
                                    i
                                    )
                                 
                                 ,
                              
                            
                           then jobs j and i are not processed at positions k and
                           
                              
                                 k
                                 +
                                 1
                                 ,
                              
                            
                           respectively, in any optimal solution.
                        


                           f(k, i → j) < f(k, j → i) means that the partial schedule up to position 
                              
                                 k
                                 +
                                 1
                              
                            is more costly when jobs j and i are processed in positions k and 
                              
                                 k
                                 +
                                 1
                                 ,
                              
                            respectively, than when their positions are interchanged.

In the partial schedules, the completion time of the job in position 
                              
                                 k
                                 +
                                 1
                              
                            on machine 1 is 
                              
                                 
                                    C
                                    
                                       [
                                       k
                                       −
                                       1
                                       ]
                                    
                                    1
                                 
                                 +
                                 
                                    p
                                    i
                                    1
                                 
                                 +
                                 
                                    p
                                    j
                                    1
                                 
                              
                            regardless of the processing order of jobs i and j. It follows that 
                              
                                 
                                    L
                                    
                                       k
                                       +
                                       1
                                    
                                    c
                                 
                                 
                                    (
                                    k
                                    ,
                                    i
                                    →
                                    j
                                    )
                                 
                                 ≤
                                 
                                    L
                                    
                                       k
                                       +
                                       1
                                    
                                    c
                                 
                                 
                                    (
                                    k
                                    ,
                                    j
                                    →
                                    i
                                    )
                                 
                              
                            implies 
                              
                                 
                                    C
                                    
                                       [
                                       k
                                       +
                                       1
                                       ]
                                    
                                    2
                                 
                                 
                                    (
                                    k
                                    ,
                                    i
                                    →
                                    j
                                    )
                                 
                                 ≤
                                 
                                    C
                                    
                                       [
                                       k
                                       +
                                       1
                                       ]
                                    
                                    2
                                 
                                 
                                    (
                                    k
                                    ,
                                    j
                                    →
                                    i
                                    )
                                 
                              
                           . As the cost function is non-decreasing, the partial schedule starting at position 
                              
                                 k
                                 +
                                 2
                              
                            will not be more costly than when job j is processed before job i.□

The next proposition is used in our branch-and-bound procedures, as well as for removing edges in the networks (see Section 4). In the latter context, the constraint specifying that each job must be scheduled not more than once is relaxed. Hence, Proposition 5 is described in such a form that job repetition is allowed in partial sequences.

                        Proposition 5
                        Dominance on K consecutive jobs


                        
                           Let
                           
                              
                                 σ
                                 =
                                 (
                                 
                                    σ
                                    1
                                 
                                 ,
                                 ⋯
                                 ,
                                 
                                    σ
                                    l
                                 
                                 )
                              
                            
                           be a partial sequence of jobs starting at position k, and let σ′ be a permutation of σ. If at least one of these conditions hold, then no optimal schedule contains partial sequence σ of jobs starting at position k:
                           
                              
                                 •
                                 
                                    
                                       
                                          
                                             σ
                                             i
                                          
                                          =
                                          
                                             σ
                                             j
                                          
                                       
                                     
                                    for some i ≠ j.
                                 


                                    
                                       
                                          
                                             σ
                                             j
                                          
                                          ∈
                                          
                                             Γ
                                             
                                                σ
                                                i
                                             
                                             −
                                          
                                       
                                     
                                    for some i < j.
                                 


                                    f(k, σ′) < f(k, σ) and
                                    
                                       
                                          
                                             L
                                             
                                                k
                                                +
                                                |
                                                σ
                                                |
                                                −
                                                1
                                             
                                             c
                                          
                                          
                                             (
                                             k
                                             ,
                                             
                                                σ
                                                ′
                                             
                                             )
                                          
                                          ≤
                                          
                                             L
                                             
                                                k
                                                +
                                                |
                                                σ
                                                |
                                                −
                                                1
                                             
                                             c
                                          
                                          
                                             (
                                             k
                                             ,
                                             σ
                                             )
                                          
                                       
                                    
                                    .
                                 

In the first case, one job occurs more than once in σ. In the second case, an induced precedence constraint is violated. The proof for the third case is similar to the proof of Proposition 4.□

We should be careful in applying several dominance rules at the same time so that their consistency is ensured. For example, it can happen that one rule eliminates such schedules where job i precedes job j, whereas another rule forbids job j to precede job i. To ensure that at least one optimal schedule is not eliminated, we use a modified version of Proposition 3 where the condition 
                                 
                                    max
                                    
                                       (
                                       
                                          p
                                          i
                                          1
                                       
                                       ,
                                       
                                          L
                                          σ
                                          c
                                       
                                       +
                                       
                                          s
                                          i
                                          2
                                       
                                       )
                                    
                                    +
                                    
                                       p
                                       i
                                       2
                                    
                                    ≤
                                    max
                                    
                                       (
                                       
                                          p
                                          j
                                          1
                                       
                                       ,
                                       
                                          L
                                          σ
                                          c
                                       
                                       +
                                       
                                          s
                                          j
                                          2
                                       
                                       )
                                    
                                    +
                                    
                                       p
                                       j
                                       2
                                    
                                 
                               is replaced by 
                                 
                                    max
                                    
                                       (
                                       
                                          p
                                          i
                                          1
                                       
                                       ,
                                       
                                          L
                                          σ
                                          c
                                       
                                       +
                                       
                                          s
                                          i
                                          2
                                       
                                       )
                                    
                                    +
                                    
                                       p
                                       i
                                       2
                                    
                                    <
                                    max
                                    
                                       (
                                       
                                          p
                                          j
                                          1
                                       
                                       ,
                                       
                                          L
                                          σ
                                          c
                                       
                                       +
                                       
                                          s
                                          j
                                          2
                                       
                                       )
                                    
                                    +
                                    
                                       p
                                       j
                                       2
                                    
                                 
                              . That way, any deduction made by Propositions 3, 4 or 5 removes only non-optimal schedules. Thus, when applying Proposition 1, we can safely break ties according to the index of the jobs.

In this section, we introduce two minimum cost flow formulations to obtain tight lower bounds. The first one is very similar to the one proposed in Akkan and Karabati (2004). In order to get stronger bounds and solve larger instances, we also design an extended network.

Our first lower bound is based on a transshipment type network, which is a directed graph 
                           
                              
                                 G
                                 1
                              
                              =
                              
                                 (
                                 
                                    V
                                    1
                                 
                                 ,
                                 
                                    A
                                    1
                                 
                                 )
                              
                           
                         whose structure is identical to the one proposed in Akkan and Karabati (2004):

                           
                              •
                              Each node v
                                 
                                    k, l
                                  ∈ V
                                 1 of the network is associated with a position k in the sequence, and a value l of the completion-to-completion lag of the job in position 
                                    
                                       k
                                       −
                                       1
                                    
                                 . Node v
                                 1, 0 is the source of the network. A sink node 
                                    
                                       v
                                       
                                          n
                                          +
                                          1
                                          ,
                                          0
                                       
                                    
                                  is also added, which represents the end of the schedule.

For each combination of job j, position k, and completion-to-completion lag l, there is an arc 
                                    
                                       
                                          (
                                          
                                             v
                                             
                                                k
                                                ,
                                                l
                                             
                                          
                                          ,
                                          
                                             v
                                             
                                                k
                                                +
                                                1
                                                ,
                                                
                                                   l
                                                   ′
                                                
                                             
                                          
                                          ,
                                          j
                                          )
                                       
                                       ∈
                                       
                                          A
                                          1
                                       
                                    
                                  from node v
                                 
                                    k, l
                                  to node 
                                    
                                       v
                                       
                                          k
                                          +
                                          1
                                          ,
                                          
                                             l
                                             ′
                                          
                                       
                                    
                                 . Here 
                                    
                                       
                                          l
                                          ′
                                       
                                       =
                                       max
                                       
                                          {
                                          0
                                          ,
                                          l
                                          +
                                          
                                             s
                                             j
                                             2
                                          
                                          −
                                          
                                             p
                                             j
                                             1
                                          
                                          }
                                       
                                       +
                                       
                                          p
                                          j
                                          2
                                       
                                    
                                  if k < n, and 
                                    
                                       
                                          l
                                          ′
                                       
                                       =
                                       0
                                    
                                  if 
                                    
                                       k
                                       =
                                       n
                                    
                                 . This arc represents the processing of job j in position k, when the completion-to-completion lag of the previous job is equal to l, so that job j ends with a completion-to-completion lag equal to l′. Note that multiple arcs representing different jobs may connect the same pair of nodes. Following the expression of the objective function given by (3), the cost 
                                    
                                       c
                                       (
                                       
                                          v
                                          
                                             k
                                             ,
                                             l
                                          
                                       
                                       ,
                                       
                                          v
                                          
                                             k
                                             +
                                             1
                                             ,
                                             
                                                l
                                                ′
                                             
                                          
                                       
                                       ,
                                       j
                                       )
                                    
                                  of using this arc is 
                                    
                                       
                                          (
                                          n
                                          −
                                          k
                                          +
                                          1
                                          )
                                       
                                       
                                          p
                                          j
                                          1
                                       
                                       +
                                       
                                          l
                                          ′
                                       
                                    
                                  when k < n, and 
                                    
                                       c
                                       
                                          (
                                          
                                             v
                                             
                                                n
                                                ,
                                                l
                                             
                                          
                                          ,
                                          
                                             v
                                             
                                                n
                                                +
                                                1
                                                ,
                                                0
                                             
                                          
                                          ,
                                          j
                                          )
                                       
                                       =
                                       
                                          p
                                          j
                                          1
                                       
                                       +
                                       max
                                       
                                          {
                                          0
                                          ,
                                          l
                                          +
                                          
                                             s
                                             j
                                             2
                                          
                                          −
                                          
                                             p
                                             j
                                             1
                                          
                                          }
                                       
                                       +
                                       
                                          p
                                          j
                                          2
                                       
                                    
                                 .

The scheduling problem can be seen as the problem of finding a minimum cost flow of value 1 (a path) from the source node to the sink node, going through exactly one arc associated with each job, leading to the following ILP model:

                                 
                                    (15)
                                    
                                       
                                          
                                             
                                                min
                                             
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         
                                                            (
                                                            v
                                                            ,
                                                            w
                                                            ,
                                                            j
                                                            )
                                                         
                                                         ∈
                                                         
                                                            A
                                                            1
                                                         
                                                      
                                                   
                                                   c
                                                   
                                                      (
                                                      v
                                                      ,
                                                      w
                                                      ,
                                                      j
                                                      )
                                                   
                                                   ·
                                                   
                                                      x
                                                      
                                                         v
                                                         ,
                                                         w
                                                         ,
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (16)
                                    
                                       
                                          
                                             
                                                
                                                   s
                                                   .
                                                   t
                                                   .
                                                
                                             
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         
                                                            (
                                                            v
                                                            ,
                                                            w
                                                            ,
                                                            j
                                                            )
                                                         
                                                         ∈
                                                         
                                                            A
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      x
                                                      
                                                         v
                                                         ,
                                                         w
                                                         ,
                                                         j
                                                      
                                                   
                                                   =
                                                   
                                                      ∑
                                                      
                                                         
                                                            (
                                                            w
                                                            ,
                                                            v
                                                            ,
                                                            j
                                                            )
                                                         
                                                         ∈
                                                         
                                                            A
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      x
                                                      
                                                         w
                                                         ,
                                                         v
                                                         ,
                                                         j
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   ∀
                                                   v
                                                   ∈
                                                   
                                                      V
                                                      1
                                                   
                                                   −
                                                   
                                                      {
                                                      
                                                         v
                                                         
                                                            1
                                                            ,
                                                            0
                                                         
                                                      
                                                      ,
                                                      
                                                         v
                                                         
                                                            n
                                                            +
                                                            1
                                                            ,
                                                            0
                                                         
                                                      
                                                      }
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (17)
                                    
                                       
                                          
                                             
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         
                                                            (
                                                            v
                                                            ,
                                                            w
                                                            ,
                                                            j
                                                            )
                                                         
                                                         ∈
                                                         
                                                            A
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      x
                                                      
                                                         v
                                                         ,
                                                         w
                                                         ,
                                                         j
                                                      
                                                   
                                                   ≤
                                                   1
                                                
                                             
                                             
                                                
                                                   ∀
                                                   j
                                                   =
                                                   1
                                                   ,
                                                   ⋯
                                                   ,
                                                   n
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (18)
                                    
                                       
                                          
                                             
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         
                                                            (
                                                            
                                                               v
                                                               
                                                                  1
                                                                  ,
                                                                  0
                                                               
                                                            
                                                            ,
                                                            w
                                                            ,
                                                            j
                                                            )
                                                         
                                                         ∈
                                                         
                                                            A
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      x
                                                      
                                                         
                                                            v
                                                            
                                                               1
                                                               ,
                                                               0
                                                            
                                                         
                                                         ,
                                                         w
                                                         ,
                                                         j
                                                      
                                                   
                                                   =
                                                   1
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (19)
                                    
                                       
                                          
                                             
                                             
                                                
                                                   
                                                      x
                                                      
                                                         v
                                                         ,
                                                         w
                                                         ,
                                                         j
                                                      
                                                   
                                                   ∈
                                                   
                                                      {
                                                      0
                                                      ,
                                                      1
                                                      }
                                                   
                                                
                                             
                                             
                                                
                                                   ∀
                                                   
                                                      (
                                                      v
                                                      ,
                                                      w
                                                      ,
                                                      j
                                                      )
                                                   
                                                   ∈
                                                   
                                                      A
                                                      1
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

In order to reduce the size of the network, we use a procedure similar to the one described in Akkan and Karabati (2004):

                                 
                                    •
                                    An upper bound 
                                          
                                             z
                                             ¯
                                          
                                        on the optimum value of the problem is computed. Instead of the meta-heuristic of Della Croce et al. (1996), we use the iterated enhanced dynasearch heuristic of Tanaka (2011), with a straightforward adaptation to handle setup times. The time taken by this heuristic is given in Table 2
                                       .

A modified version of the positional model (3)–(9) is used to derive upper bounds on the lag values at each position, in all schedules whose cost is not larger than 
                                          
                                             z
                                             ¯
                                          
                                       . Bounds on completion-to-completion lags allow one to remove dominated nodes. Bounds on completion-to-start lags and on the sum of those for consecutive pairs of positions allow one to remove dominated arcs. See Akkan and Karabati (2004) for details. In our implementation, the bounds are improved by removing variables xjk
                                        from the model when job j cannot be processed in position k from the dominance rules, that is, 
                                          
                                             
                                                k
                                                ≤
                                                |
                                             
                                             
                                                Γ
                                                j
                                                −
                                             
                                             
                                                |
                                             
                                          
                                        or 
                                          
                                             
                                                k
                                                ≥
                                                n
                                                −
                                                |
                                             
                                             
                                                Γ
                                                j
                                                +
                                             
                                             
                                                |
                                             
                                          
                                       .

For each node v, we keep track of the set of jobs 
                                          
                                             P
                                             (
                                             v
                                             )
                                          
                                        that exist in all paths from the source node to v, and utilize it when creating arcs out of v as follows:

                                          
                                             –
                                             Similar to Akkan and Karabati (2004), if 
                                                   
                                                      j
                                                      ∈
                                                      P
                                                      (
                                                      v
                                                      )
                                                      ,
                                                   
                                                 then no arc is created for job j out of v.

If 
                                                   
                                                      i
                                                      ∈
                                                      P
                                                      (
                                                      v
                                                      )
                                                   
                                                 and 
                                                   
                                                      j
                                                      ∈
                                                      
                                                         Γ
                                                         i
                                                         −
                                                      
                                                      ,
                                                   
                                                 then no arc is created for j out of v.

For each node v, we keep track of the set of jobs 
                                          
                                             
                                                P
                                                ¯
                                             
                                             
                                                (
                                                v
                                                )
                                             
                                          
                                        that exist in at least one path from the source to v, and utilize it when creating arcs out of v as follows:

                                          
                                             –
                                             If 
                                                   
                                                      i
                                                      ∉
                                                      
                                                         P
                                                         ¯
                                                      
                                                      
                                                         (
                                                         v
                                                         )
                                                      
                                                   
                                                 and 
                                                   
                                                      i
                                                      ∈
                                                      
                                                         Γ
                                                         j
                                                         −
                                                      
                                                      ,
                                                   
                                                 then no arc is created for j out of v.

If 
                                                   
                                                      i
                                                      ∉
                                                      
                                                         P
                                                         ¯
                                                      
                                                      
                                                         (
                                                         
                                                            v
                                                            
                                                               k
                                                               ,
                                                               l
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                 and j is dominated by i at lag l and position k in the sense of Proposition 3, then no arc is created for j out of v.

As a preliminary experiment, we directly apply an MILP solver to formulation (15)–(19) based on network G
                              1 which is reduced as described just above. Table 3
                               reports the number of solved instances (without setup times) within the time limit. Table 6 reports the average number of nodes and arcs in graph G
                              1. It can be seen from the results that the network flow formulation is not much better than the positional formulation from Section 2.

The authors of Akkan and Karabati (2004) computed a Lagrangian lower bound based on a similar network. It is used within a branch-and-bound procedure, as well as some dominance rules to solve the problem. Relaxing the constraints (17) to the objective function leads to the following Lagrangian subproblem:

                                 
                                    (20)
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      L
                                                      1
                                                   
                                                   
                                                      (
                                                      π
                                                      )
                                                   
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   min
                                                   
                                                      {
                                                      
                                                         ∑
                                                         
                                                            
                                                               (
                                                               v
                                                               ,
                                                               w
                                                               ,
                                                               j
                                                               )
                                                            
                                                            ∈
                                                            
                                                               A
                                                               1
                                                            
                                                         
                                                      
                                                      
                                                         (
                                                         c
                                                         
                                                            (
                                                            v
                                                            ,
                                                            w
                                                            ,
                                                            j
                                                            )
                                                         
                                                         +
                                                         
                                                            π
                                                            j
                                                         
                                                         )
                                                      
                                                      
                                                         x
                                                         
                                                            v
                                                            ,
                                                            w
                                                            ,
                                                            j
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                             
                                             
                                                
                                                   −
                                                   
                                                   
                                                      ∑
                                                      
                                                         j
                                                         =
                                                         1
                                                      
                                                      n
                                                   
                                                   
                                                      π
                                                      j
                                                   
                                                   |
                                                   
                                                      (
                                                      16
                                                      )
                                                   
                                                   ,
                                                   
                                                      (
                                                      18
                                                      )
                                                   
                                                   ,
                                                   
                                                      (
                                                      19
                                                      )
                                                   
                                                   }
                                                
                                             
                                          
                                       
                                    
                                 
                              For any non-negative vector of Lagrange multipliers π, L
                              1(π) is a Lagrangian lower bound on the optimum of the problem, which can be computed by solving a simple shortest path problem in G
                              1 with modified costs 
                                 
                                    c
                                    
                                       (
                                       v
                                       ,
                                       w
                                       ,
                                       j
                                       )
                                    
                                    +
                                    
                                       π
                                       j
                                    
                                 
                              . This problem can be solved in O(|A
                              1|)-time complexity.

To improve bound L
                              1(π), the constraint forbidding immediate repetition of a same job is added to the Lagrangian subproblem. We can take into account this constraint without increasing the complexity of the shortest path algorithm (Abdul-Razaq & Potts, 1988; Peridy, Pinson, & Rivreau, 2003).

Like in Tanaka, Fujikuma, and Araki (2009), we obtain near-optimal Lagrangian multipliers employing the conjugate subgradient algorithm (Sherali & Lim, 2007; Sherali & Ulular, 1989). At each iteration k of the procedure, given current Lagrangian multipliers πk
                              , we first compute L
                              1(πk
                              ). We denote by x
                              *k
                               the corresponding optimal solution of the Lagrangian subproblem. We choose the subgradient vector as 
                                 
                                    
                                       (
                                       
                                          g
                                          j
                                          k
                                       
                                       =
                                       1
                                       −
                                       
                                          ∑
                                          
                                             
                                                (
                                                v
                                                ,
                                                w
                                                ,
                                                j
                                                )
                                             
                                             ∈
                                             
                                                A
                                                1
                                             
                                          
                                       
                                       
                                          x
                                          
                                             v
                                             ,
                                             w
                                             ,
                                             j
                                          
                                          
                                             *
                                             k
                                          
                                       
                                       )
                                    
                                    
                                       j
                                       ∈
                                       {
                                       1
                                       ,
                                       ⋯
                                       ,
                                       n
                                       }
                                    
                                 
                              . The Lagrangian multipliers are updated by

                                 
                                    
                                       
                                          
                                             
                                                
                                                   d
                                                   k
                                                
                                             
                                             
                                                
                                                   =
                                                   
                                                      g
                                                      k
                                                   
                                                   +
                                                   
                                                      ξ
                                                      k
                                                   
                                                   
                                                      d
                                                      
                                                         k
                                                         −
                                                         1
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   π
                                                   
                                                      k
                                                      +
                                                      1
                                                   
                                                
                                             
                                             
                                                
                                                   =
                                                   
                                                      π
                                                      k
                                                   
                                                   +
                                                   
                                                      γ
                                                      k
                                                   
                                                   
                                                      
                                                         U
                                                         B
                                                         −
                                                         
                                                            L
                                                            1
                                                         
                                                         
                                                            (
                                                            
                                                               π
                                                               k
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            ∥
                                                         
                                                         
                                                            d
                                                            k
                                                         
                                                         
                                                            
                                                               ∥
                                                            
                                                            2
                                                         
                                                      
                                                   
                                                   
                                                      d
                                                      k
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              Following Sherali and Lim (2007), Sherali and Ulular (1989), we choose 
                                 
                                    
                                       ξ
                                       k
                                    
                                    
                                       =
                                       ∥
                                    
                                    
                                       g
                                       k
                                    
                                    
                                       ∥
                                       /
                                       ∥
                                    
                                    
                                       d
                                       
                                          k
                                          −
                                          1
                                       
                                    
                                    
                                       ∥
                                    
                                 
                              . The choice of the step size parameter γk
                               obeys these rules:

                                 
                                    •
                                    The initial value is 
                                          
                                             
                                                γ
                                                0
                                             
                                             =
                                             
                                                γ
                                                
                                                   i
                                                   n
                                                   i
                                                
                                             
                                          
                                       .

It is decreased by 
                                          
                                             
                                                ξ
                                                k
                                             
                                             =
                                             
                                                κ
                                                S
                                             
                                             
                                                γ
                                                
                                                   k
                                                   −
                                                   1
                                                
                                             
                                          
                                        if the best lower bound is not updated for δS
                                        successive iterations.

It is increased by 
                                          
                                             
                                                ξ
                                                k
                                             
                                             =
                                             
                                                κ
                                                E
                                             
                                             
                                                γ
                                                
                                                   k
                                                   −
                                                   1
                                                
                                             
                                          
                                        if the best lower bound is improved at iteration k.

The algorithm is terminated if the best lower bound does not increase by 
                                 
                                    100
                                    ϵ
                                    /
                                    (
                                    1
                                    −
                                    ϵ
                                    )
                                    %
                                 
                               and the gap between the best lower and upper bounds does not decrease by 100ϵ% in δT
                               successive iterations, but not before miniter
                               iterations have been completed.

In order to reduce further the size of network G
                        1, we developed Lagrangian cost variable fixing (Ibaraki & Nakamura, 1994; Tanaka et al., 2009). Given a vector of Lagrange multipliers π,

                           
                              •
                              let F
                                 1(v, π) be the cost of the shortest path from the source to node v in G
                                 1 with modified costs;

let B
                                 1(v, π) be the cost of the shortest path from node v to the sink in G
                                 1 with modified costs.

Given π, values F
                        1(v, π) for all nodes v ∈ V
                        1 can be found using the forward dynamic programming algorithm, and all values B
                        1(v, π), v ∈ V
                        1 can be found using backward dynamic programming algorithm. Then an arc (v, w, j) ∈ A
                        1 can be removed from G
                        1 if 
                           
                              
                                 F
                                 1
                              
                              
                                 (
                                 v
                                 ,
                                 π
                                 )
                              
                              +
                              c
                              
                                 (
                                 v
                                 ,
                                 w
                                 ,
                                 j
                                 )
                              
                              +
                              
                                 π
                                 j
                              
                              +
                              
                                 B
                                 1
                              
                              
                                 (
                                 w
                                 ,
                                 π
                                 )
                              
                              ≥
                              
                                 z
                                 ¯
                              
                           
                        . Furthermore, a node v ∈ V
                        1 can be removed from G
                        1 if it does not have any incoming or any outgoing arc anymore. For a fixed vector π, the time complexity of this filtering procedure remains equal to O(|A
                        1|). The filtering procedure is called at every iteration of the conjugate subgradient algorithm.

The running time of the subgradient algorithm is presented in Table 4
                        . The relative gaps obtained after the subgradient algorithm are shown in Table 5
                        
                        . The gap is computed as 
                           
                              
                                 
                                    U
                                    B
                                    −
                                    L
                                    B
                                 
                                 
                                    L
                                    B
                                 
                              
                              ,
                           
                         where UB is the upper bound given by the heuristic (Tanaka, 2011), and LB is the best Lagrangian bound obtained during the subgradient algorithm. One can see from the results that a very tight lower bound is obtained in small running time, which is 25 seconds for the largest instances without setup times. The computing time is twice larger for instances with setup times. This is explained by the slightly degraded performance of the dynasearch procedure for this class of problems to compute an upper bound (the root gap is twice larger). Hence, the network cannot be reduced as much in this case (as can be seen from Table 6), so that solving the subproblem at each iteration of the subgradient procedure takes more time.

From Table 6 it can be seen that the filtering procedure reduces the size of the graph G
                        1 significantly: the number of arcs is decreased by a factor of 5 on large instances without setup times, and by more than 2 on instances with setup times. Once again, the degraded results can be attributed to the quality of the upper bound used in the filtering procedure.

We applied an MILP solver to formulation (15)–(19) based on filtered network 
                           
                              G
                              1
                              ′
                           
                        . Table 7
                         reports the number of solved instances (without setup times) within the time limit. Again the improvement of results in comparison with the network flow formulation based on G
                        1 is very limited despite a significant reduction of the graph size.

Although lower bounds obtained using Lagrangian relaxation of the network flow formulation based on G
                        1 are already very tight, we can improve them by adding another dimension to G
                        1. It results in a larger network G
                        2, which allows us to eliminate more dominated subsequences of jobs in the Lagrangian subproblem and thus to improve the lower bound.

The network is a directed graph 
                                 
                                    
                                       G
                                       2
                                    
                                    =
                                    
                                       (
                                       
                                          V
                                          2
                                       
                                       ,
                                       
                                          A
                                          2
                                       
                                       )
                                    
                                 
                               with the following structure.

                                 
                                    •
                                    Each node v
                                       
                                          k, l, i
                                        ∈ V
                                       2 of the network is associated with a position k in the sequence, a job i, and a value l of the completion-to-completion lag of the job in position 
                                          
                                             k
                                             −
                                             1
                                          
                                       . Node v
                                       0, 0, 0 is the source of the network. An additional sink node 
                                          
                                             v
                                             
                                                n
                                                +
                                                1
                                                ,
                                                0
                                                ,
                                                0
                                             
                                          
                                        is added, which represents the end of the schedule.

For each combination of jobs i, j, i ≠ j, position k, and completion-to-completion lag l, there is an arc 
                                          
                                             
                                                (
                                                
                                                   v
                                                   
                                                      k
                                                      ,
                                                      l
                                                      ,
                                                      i
                                                   
                                                
                                                ,
                                                
                                                   v
                                                   
                                                      k
                                                      +
                                                      1
                                                      ,
                                                      
                                                         l
                                                         ′
                                                      
                                                      ,
                                                      j
                                                   
                                                
                                                )
                                             
                                             ∈
                                             
                                                A
                                                2
                                             
                                             ,
                                          
                                        with:

                                          
                                             
                                                
                                                   
                                                      l
                                                      ′
                                                   
                                                   =
                                                   
                                                      {
                                                      
                                                         
                                                            
                                                               0
                                                            
                                                            
                                                               
                                                                  
                                                                  if
                                                                  
                                                                  k
                                                                  =
                                                                  0
                                                               
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  max
                                                                  
                                                                     {
                                                                     0
                                                                     ,
                                                                     l
                                                                     +
                                                                     
                                                                        s
                                                                        i
                                                                        2
                                                                     
                                                                     −
                                                                     
                                                                        p
                                                                        i
                                                                        1
                                                                     
                                                                     }
                                                                  
                                                                  +
                                                                  
                                                                     p
                                                                     i
                                                                     2
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  
                                                                  otherwise
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    

This arc represents the processing of job i in position k, when the completion-to-completion lag of the job in position 
                                          
                                             k
                                             −
                                             1
                                          
                                        is equal to l, the completion-to-completion lag of job i is equal to l′, and job j is processed at position 
                                          
                                             k
                                             +
                                             1
                                          
                                       . When 0 < k < n, the cost 
                                          
                                             c
                                             (
                                             
                                                v
                                                
                                                   k
                                                   ,
                                                   l
                                                   ,
                                                   i
                                                
                                             
                                             ,
                                             
                                                v
                                                
                                                   k
                                                   +
                                                   1
                                                   ,
                                                   
                                                      l
                                                      ′
                                                   
                                                   ,
                                                   j
                                                
                                             
                                             )
                                          
                                        of using this arc is 
                                          
                                             
                                                (
                                                n
                                                −
                                                k
                                                +
                                                1
                                                )
                                             
                                             
                                                p
                                                i
                                                1
                                             
                                             +
                                             
                                                l
                                                ′
                                             
                                          
                                       . For the first position, 
                                          
                                             c
                                             (
                                             
                                                v
                                                
                                                   0
                                                   ,
                                                   0
                                                   ,
                                                   0
                                                
                                             
                                             ,
                                             
                                                v
                                                
                                                   1
                                                   ,
                                                   0
                                                   ,
                                                   j
                                                
                                             
                                             )
                                             =
                                             0
                                          
                                       . For the last position, 
                                          
                                             c
                                             
                                                (
                                                
                                                   v
                                                   
                                                      n
                                                      ,
                                                      l
                                                      ,
                                                      i
                                                   
                                                
                                                ,
                                                
                                                   v
                                                   
                                                      n
                                                      +
                                                      1
                                                      ,
                                                      0
                                                      ,
                                                      0
                                                   
                                                
                                                )
                                             
                                             =
                                             
                                                p
                                                i
                                                1
                                             
                                             +
                                             max
                                             
                                                {
                                                0
                                                ,
                                                l
                                                +
                                                
                                                   s
                                                   i
                                                   2
                                                
                                                −
                                                
                                                   p
                                                   i
                                                   1
                                                
                                                }
                                             
                                             +
                                             
                                                p
                                                i
                                                2
                                             
                                          
                                       .


                              
                                 
                                    •
                                    A node v
                                       
                                          k, l, i
                                        in G
                                       2 is created only if an arc 
                                          
                                             (
                                             
                                                v
                                                
                                                   k
                                                   ,
                                                   l
                                                
                                             
                                             ,
                                             
                                                v
                                                
                                                   k
                                                   +
                                                   1
                                                   ,
                                                   
                                                      l
                                                      ′
                                                   
                                                
                                             
                                             ,
                                             i
                                             )
                                          
                                        exists in filtered network 
                                          
                                             G
                                             1
                                             ′
                                          
                                       .

Arc 
                                          
                                             (
                                             
                                                v
                                                
                                                   k
                                                   ,
                                                   l
                                                   ,
                                                   j
                                                
                                             
                                             ,
                                             
                                                v
                                                
                                                   k
                                                   +
                                                   1
                                                   ,
                                                   
                                                      l
                                                      ′
                                                   
                                                   ,
                                                   i
                                                
                                             
                                             )
                                          
                                        is not created if scheduling job j is dominated at lag l by Proposition 3.

Arc 
                                          
                                             (
                                             
                                                v
                                                
                                                   k
                                                   ,
                                                   l
                                                   ,
                                                   j
                                                
                                             
                                             ,
                                             
                                                v
                                                
                                                   k
                                                   +
                                                   1
                                                   ,
                                                   
                                                      l
                                                      ′
                                                   
                                                   ,
                                                   i
                                                
                                             
                                             )
                                          
                                        is not created if scheduling of jobs j and i at positions k and 
                                          
                                             k
                                             +
                                             1
                                             ,
                                          
                                        respectively, is dominated by Proposition 4.

Arc 
                                          
                                             (
                                             
                                                v
                                                
                                                   k
                                                   ,
                                                   
                                                      l
                                                      1
                                                   
                                                   ,
                                                   
                                                      j
                                                      1
                                                   
                                                
                                             
                                             ,
                                             
                                                v
                                                
                                                   k
                                                   +
                                                   1
                                                   ,
                                                   
                                                      l
                                                      2
                                                   
                                                   ,
                                                   
                                                      j
                                                      2
                                                   
                                                
                                             
                                             )
                                          
                                        is not created if, for all arcs 
                                          
                                             (
                                             
                                                v
                                                
                                                   k
                                                   −
                                                   1
                                                   ,
                                                   
                                                      l
                                                      0
                                                   
                                                   ,
                                                   
                                                      j
                                                      0
                                                   
                                                
                                             
                                             ,
                                             
                                                v
                                                
                                                   k
                                                   ,
                                                   
                                                      l
                                                      1
                                                   
                                                   ,
                                                   
                                                      j
                                                      1
                                                   
                                                
                                             
                                             )
                                             ,
                                          
                                        the sequence of jobs (j
                                       0, j
                                       1, j
                                       2) is dominated at lag l
                                       0 and position 
                                          
                                             k
                                             −
                                             1
                                          
                                        according to Proposition 5.

We developed a filtering procedure embedded in the subgradient algorithm. The procedure is similar to the one described in Section 4.2, but has the following differences.

                           
                              •
                              The Lagrangian lower bound is improved using 3-cycle elimination by forbidding such partial sequences of job as (i, j, i) (adding this constraint does not change the time-complexity of the Lagrangian subproblem (Abdul-Razaq & Potts, 1988; Peridy et al., 2003)).

Similar to the filtering procedure in Section 4.2, Lagrangian cost fixing is performed by computing the following values.

                                    
                                       –
                                       
                                          F
                                          2(v, π) is the cost of the shortest path from the source to node v in G
                                          2 with modified costs;


                                          B
                                          2(v, π) is the cost of the shortest path from node v to the sink in G
                                          2 with modified costs.

An arc (v, w) ∈ A
                                 2 can be removed from G
                                 2 if 
                                    
                                       
                                          F
                                          2
                                       
                                       
                                          (
                                          v
                                          ,
                                          π
                                          )
                                       
                                       +
                                       c
                                       
                                          (
                                          v
                                          ,
                                          w
                                          )
                                       
                                       +
                                       
                                          π
                                          j
                                       
                                       +
                                       
                                          B
                                          2
                                       
                                       
                                          (
                                          w
                                          ,
                                          π
                                          )
                                       
                                       ≥
                                       
                                          z
                                          ¯
                                       
                                       ,
                                    
                                  where j is the index of the job represented by w.

In addition, Proposition 5 is applied to perform what we call 3-consecutive-jobs filtering. It removes arc 
                                    
                                       (
                                       
                                          v
                                          
                                             k
                                             ,
                                             
                                                l
                                                1
                                             
                                             ,
                                             
                                                j
                                                1
                                             
                                          
                                       
                                       ,
                                       
                                          v
                                          
                                             k
                                             +
                                             1
                                             ,
                                             
                                                l
                                                2
                                             
                                             ,
                                             
                                                j
                                                2
                                             
                                          
                                       
                                       )
                                    
                                  if one of these conditions holds:

                                    
                                       –
                                       for all arcs 
                                             
                                                (
                                                
                                                   v
                                                   
                                                      k
                                                      −
                                                      1
                                                      ,
                                                      
                                                         l
                                                         0
                                                      
                                                      ,
                                                      
                                                         j
                                                         0
                                                      
                                                   
                                                
                                                ,
                                                
                                                   v
                                                   
                                                      k
                                                      ,
                                                      
                                                         l
                                                         1
                                                      
                                                      ,
                                                      
                                                         j
                                                         1
                                                      
                                                   
                                                
                                                )
                                             
                                           in G
                                          2, the sequence of jobs (j
                                          0, j
                                          1, j
                                          2) is dominated at lag l
                                          0 and position 
                                             
                                                k
                                                −
                                                1
                                             
                                           according to Proposition 5 ;

for all arcs 
                                             
                                                (
                                                
                                                   v
                                                   
                                                      k
                                                      +
                                                      1
                                                      ,
                                                      
                                                         l
                                                         2
                                                      
                                                      ,
                                                      
                                                         j
                                                         2
                                                      
                                                   
                                                
                                                ,
                                                
                                                   v
                                                   
                                                      k
                                                      +
                                                      2
                                                      ,
                                                      
                                                         l
                                                         3
                                                      
                                                      ,
                                                      
                                                         j
                                                         3
                                                      
                                                   
                                                
                                                )
                                             
                                           in G
                                          2, the sequence of jobs (j
                                          1, j
                                          2, j
                                          3) is dominated at lag l
                                          1 and position k according to Proposition 5.

This 3-consecutive-jobs filtering is costly. Therefore, it is not applied at every iteration of the subgradient procedure, but each time the number of arcs in the graph is reduced by 5% using the Lagrangian cost fixing since the last time 3-consecutive-jobs filtering was used.

The lower bound is improved using Proposition 5 by removing dominated sequences of three jobs which are part of the Lagrangian subproblem solution. More precisely, at each iteration of the subgradient procedure, the Lagrangian subproblem solution is inspected. Assume that a subsequence of jobs (j
                                 1, j
                                 2, j
                                 3) starting at lag l
                                 1 and position k is part of the solution and dominated. Let 
                                    
                                       (
                                       
                                          v
                                          
                                             k
                                             ,
                                             
                                                l
                                                1
                                             
                                             ,
                                             
                                                j
                                                1
                                             
                                          
                                       
                                       ,
                                       
                                          v
                                          
                                             k
                                             +
                                             1
                                             ,
                                             
                                                l
                                                2
                                             
                                             ,
                                             
                                                j
                                                2
                                             
                                          
                                       
                                       ,
                                       
                                          v
                                          
                                             k
                                             +
                                             2
                                             ,
                                             
                                                l
                                                3
                                             
                                             ,
                                             
                                                j
                                                3
                                             
                                          
                                       
                                       )
                                    
                                  be the corresponding sequence of nodes. This path is removed from the network using the following procedure (see Fig. 1
                                 ):

                                    
                                       1.
                                       Identify the set V
                                          *(k, l
                                          1, j
                                          1, l
                                          2, j
                                          2) of nodes v′ which are successors of 
                                             
                                                v
                                                
                                                   k
                                                   +
                                                   1
                                                   ,
                                                   
                                                      l
                                                      2
                                                   
                                                   ,
                                                   
                                                      j
                                                      2
                                                   
                                                
                                             
                                           and such that sequence 
                                             
                                                (
                                                
                                                   v
                                                   
                                                      k
                                                      ,
                                                      
                                                         l
                                                         1
                                                      
                                                      ,
                                                      
                                                         j
                                                         1
                                                      
                                                   
                                                
                                                ,
                                                
                                                   v
                                                   
                                                      k
                                                      +
                                                      1
                                                      ,
                                                      
                                                         l
                                                         2
                                                      
                                                      ,
                                                      
                                                         j
                                                         2
                                                      
                                                   
                                                
                                                ,
                                                
                                                   v
                                                   ′
                                                
                                                )
                                             
                                           is not dominated (by inspection).

Create a new node v′′, which is a duplicate for node 
                                             
                                                v
                                                
                                                   k
                                                   +
                                                   1
                                                   ,
                                                   
                                                      l
                                                      2
                                                   
                                                   ,
                                                   
                                                      j
                                                      2
                                                   
                                                
                                             
                                          .

For each node v′ ∈ V*(k, l
                                          1, j
                                          1, l
                                          2, j
                                          2), create an arc (v′′, v′), which is a duplicate for 
                                             
                                                (
                                                
                                                   v
                                                   
                                                      k
                                                      +
                                                      1
                                                      ,
                                                      
                                                         l
                                                         2
                                                      
                                                      ,
                                                      
                                                         j
                                                         2
                                                      
                                                   
                                                
                                                ,
                                                
                                                   v
                                                   ′
                                                
                                                )
                                             
                                          .

Create an arc 
                                             
                                                (
                                                
                                                   v
                                                   
                                                      k
                                                      ,
                                                      
                                                         l
                                                         1
                                                      
                                                      ,
                                                      
                                                         j
                                                         1
                                                      
                                                   
                                                
                                                ,
                                                
                                                   v
                                                   
                                                      ′
                                                      ′
                                                   
                                                
                                                )
                                             
                                          .

Remove arc 
                                             
                                                (
                                                
                                                   v
                                                   
                                                      k
                                                      ,
                                                      
                                                         l
                                                         1
                                                      
                                                      ,
                                                      
                                                         j
                                                         1
                                                      
                                                   
                                                
                                                ,
                                                
                                                   v
                                                   
                                                      k
                                                      +
                                                      1
                                                      ,
                                                      
                                                         l
                                                         2
                                                      
                                                      ,
                                                      
                                                         j
                                                         2
                                                      
                                                   
                                                
                                                )
                                             
                                          .

The Lagrangian subproblem is then solved again, on the modified network and with the same Lagrange multipliers. This procedure is repeated until there exist no dominated sequences of three jobs in the Lagrangian subproblem solution. This solution is then returned to the sub-gradient procedure.

At the end of the subgradient procedure, the following additional filtering procedure is used, as in Detienne, Dauzère-Pérès, and Yugma (2012). Given a vector of Lagrange multipliers π,

                                    
                                       –
                                       let 
                                             
                                                
                                                   F
                                                   j
                                                   2
                                                
                                                
                                                   (
                                                   v
                                                   ,
                                                   π
                                                   )
                                                
                                             
                                           (resp. 
                                             
                                                
                                                   B
                                                   j
                                                   2
                                                
                                                
                                                   (
                                                   v
                                                   ,
                                                   π
                                                   )
                                                
                                             
                                          ) denote the cost of the shortest path from the source to node v (resp. from node v to the sink) in G
                                          2 with Lagrangian costs, such that this path goes through exactly one arc representing job j;

let 
                                             
                                                
                                                   F
                                                   
                                                      ¬
                                                      j
                                                   
                                                   2
                                                
                                                
                                                   (
                                                   v
                                                   ,
                                                   π
                                                   )
                                                
                                             
                                           (resp. 
                                             
                                                
                                                   B
                                                   
                                                      ¬
                                                      j
                                                   
                                                   2
                                                
                                                
                                                   (
                                                   v
                                                   ,
                                                   π
                                                   )
                                                
                                             
                                          ) denote the cost of the shortest path from the source to node v (resp. from node v to the sink) in G
                                          2 with Lagrangian costs, such that this path does not contain any arc representing job j.

Given π, these values for all jobs and all nodes can be computed in time O(n|A
                                 2|) by applying several times the forward and backward dynamic programming algorithms. Then for each arc 
                                    
                                       a
                                       =
                                       
                                          (
                                          
                                             v
                                             
                                                k
                                                ,
                                                l
                                                ,
                                                j
                                             
                                          
                                          ,
                                          
                                             v
                                             
                                                k
                                                +
                                                1
                                                ,
                                                
                                                   l
                                                   ′
                                                
                                                ,
                                                i
                                             
                                          
                                          )
                                       
                                       ∈
                                       
                                          A
                                          2
                                       
                                       ,
                                    
                                  we compute value L
                                 2(a, π) as:

                                    
                                       
                                          
                                             
                                                L
                                                2
                                             
                                             
                                                (
                                                a
                                                ,
                                                π
                                                )
                                             
                                             =
                                             max
                                             
                                                {
                                                
                                                   
                                                      
                                                         
                                                            
                                                               F
                                                               
                                                                  ¬
                                                                  j
                                                               
                                                               2
                                                            
                                                            
                                                               (
                                                               
                                                                  v
                                                                  
                                                                     k
                                                                     ,
                                                                     l
                                                                     ,
                                                                     j
                                                                  
                                                               
                                                               ,
                                                               π
                                                               )
                                                            
                                                            +
                                                            c
                                                            
                                                               (
                                                               a
                                                               )
                                                            
                                                            +
                                                            
                                                               π
                                                               j
                                                            
                                                            +
                                                            
                                                               B
                                                               
                                                                  ¬
                                                                  j
                                                               
                                                               2
                                                            
                                                            
                                                               (
                                                               
                                                                  v
                                                                  
                                                                     k
                                                                     ,
                                                                     
                                                                        l
                                                                        ′
                                                                     
                                                                     ,
                                                                     i
                                                                  
                                                               
                                                               ,
                                                               π
                                                               )
                                                            
                                                            ,
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  max
                                                                  
                                                                     
                                                                        j
                                                                        ′
                                                                     
                                                                     ≠
                                                                     j
                                                                  
                                                               
                                                               
                                                                  {
                                                                  min
                                                                  
                                                                     {
                                                                     
                                                                        
                                                                           
                                                                              
                                                                                 
                                                                                    F
                                                                                    
                                                                                       j
                                                                                       ′
                                                                                    
                                                                                    2
                                                                                 
                                                                                 
                                                                                    (
                                                                                    
                                                                                       v
                                                                                       
                                                                                          k
                                                                                          ,
                                                                                          l
                                                                                          ,
                                                                                          j
                                                                                       
                                                                                    
                                                                                    ,
                                                                                    π
                                                                                    )
                                                                                 
                                                                                 +
                                                                                 c
                                                                                 
                                                                                    (
                                                                                    a
                                                                                    )
                                                                                 
                                                                                 +
                                                                                 
                                                                                    π
                                                                                    j
                                                                                 
                                                                                 +
                                                                                 
                                                                                    B
                                                                                    
                                                                                       ¬
                                                                                       
                                                                                          j
                                                                                          ′
                                                                                       
                                                                                    
                                                                                    2
                                                                                 
                                                                                 
                                                                                    (
                                                                                    
                                                                                       v
                                                                                       
                                                                                          k
                                                                                          ,
                                                                                          
                                                                                             l
                                                                                             ′
                                                                                          
                                                                                          ,
                                                                                          i
                                                                                       
                                                                                    
                                                                                    ,
                                                                                    π
                                                                                    )
                                                                                 
                                                                                 ,
                                                                              
                                                                           
                                                                        
                                                                        
                                                                           
                                                                              
                                                                                 
                                                                                    F
                                                                                    
                                                                                       ¬
                                                                                       
                                                                                          j
                                                                                          ′
                                                                                       
                                                                                    
                                                                                    2
                                                                                 
                                                                                 
                                                                                    (
                                                                                    
                                                                                       v
                                                                                       
                                                                                          k
                                                                                          ,
                                                                                          l
                                                                                          ,
                                                                                          j
                                                                                       
                                                                                    
                                                                                    ,
                                                                                    π
                                                                                    )
                                                                                 
                                                                                 +
                                                                                 c
                                                                                 
                                                                                    (
                                                                                    a
                                                                                    )
                                                                                 
                                                                                 +
                                                                                 
                                                                                    π
                                                                                    j
                                                                                 
                                                                                 +
                                                                                 
                                                                                    B
                                                                                    
                                                                                       j
                                                                                       ′
                                                                                    
                                                                                    2
                                                                                 
                                                                                 
                                                                                    (
                                                                                    
                                                                                       v
                                                                                       
                                                                                          k
                                                                                          ,
                                                                                          
                                                                                             l
                                                                                             ′
                                                                                          
                                                                                          ,
                                                                                          i
                                                                                       
                                                                                    
                                                                                    ,
                                                                                    π
                                                                                    )
                                                                                 
                                                                              
                                                                           
                                                                        
                                                                     
                                                                     }
                                                                  
                                                                  }
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                                }
                                             
                                             .
                                          
                                       
                                    
                                 
                              

Arc a can be removed from G
                                 2 if 
                                    
                                       
                                          L
                                          2
                                       
                                       
                                          (
                                          a
                                          ,
                                          π
                                          )
                                       
                                       >
                                       
                                          z
                                          ¯
                                       
                                    
                                 .

The running time of the subgradient algorithm with embedded filtering of graph G
                        2 is presented in Table 8
                        . The relative gaps obtained after the subgradient algorithm are shown in Table 9
                        . One can see from the results that the gap is decreased by 30 percent in comparison with the subgradient procedure on network G
                        1. However, the running time is increased by a factor of 5 for instances without setup times, and 16 with setup times.

From Table 10
                         it can be seen that, again, the filtering procedure reduces the size of the graph significantly for instances without setup times: the number of arcs is decreased by a factor of 4 on large instances. For instances with setup times, the number of arcs is still very large. In Section 5, we show that filtering is also efficient for this class of instances when used with a tighter upper bound.

We have implemented two branch-and-bound algorithms.

                        
                           •
                           Algorithm BB
                              1 is based on network G
                              1 and Lagrangian bound L
                              1(π).

Algorithm BB
                              2 is based on network G
                              2 and Lagrangian bound L
                              2(π).

The following parts of the algorithm are the same for both BB
                     1 and BB
                     2.

                        
                           •
                           The initial upper bound is computed by the dynasearch heuristic from Tanaka (2011).

Network G
                              1 or G
                              2 is constructed and reduced by the corresponding filtering algorithm.

After the subgradient algorithm, the vector of multipliers π
                              * which gives the best Lagrangian lower bound L
                              1(π
                              *) or L
                              2(π
                              *) is fixed till the branch-and-bound termination.

The set of possible job sequences is explored, by enumerating the set of feasible (with respect to the job assignment constraint) paths in graph G
                              1 or G
                              2. We proceed from the source to the sink in the graph. For each node v, the outgoing arcs (v, w) are sorted in non-decreasing order of B
                              1(w, π*) or B
                              2(w, π*). The algorithms use the depth-first-search rule in this order.

We use Proposition 5 in a Memory Dominance Rule fashion (Baptiste, Carlier, & Jouglet, 2004; Kao, Sewell, & Jacobson, 2008; T’kindt, Croce, & Esswein, 2004): the set of non-dominated subsequences explored is maintained in a hash map. At each node of the tree, the current subsequence is tested against the subsequences composed of the same set of jobs.

At each node of the search tree, we maintain incrementally the number of unscheduled predecessors of each job. An arc in G
                              1 or G
                              2 corresponding to job j is a candidate for branching only if the number of remaining predecessors of j is zero.

We branch, i.e. we extend current partial sequence σ with job j, only if the subsequence of the last K jobs (
                                 
                                    K
                                    =
                                    5
                                 
                               in our implementation) including j is not dominated, according to Proposition 5, by any permutation of these K jobs.

The upper bound may be updated only when a leaf node of the search tree is reached. We do not use any heuristics within the branch-and-bound algorithm.

In algorithm BB
                        1, at each non-root node of the search tree corresponding to node v in graph G
                        1, we compute lower bound L
                        1(v). Let σ be the partial sequence built so far. Then,

                           
                              (21)
                              
                                 
                                    
                                       L
                                       1
                                    
                                    
                                       (
                                       v
                                       )
                                    
                                    =
                                    c
                                    o
                                    s
                                    t
                                    
                                       (
                                       σ
                                       )
                                    
                                    +
                                    
                                       B
                                       1
                                    
                                    
                                       (
                                       v
                                       ,
                                       
                                          π
                                          *
                                       
                                       )
                                    
                                    −
                                    
                                       ∑
                                       
                                          j
                                          ∉
                                          σ
                                       
                                    
                                    
                                       π
                                       j
                                       *
                                    
                                    .
                                 
                              
                           
                        Computation of L
                        1(v) can be done in constant time by incrementally maintaining at each node the current value of ∑
                           j ∉ σ
                        
                        πj
                        .

Note that algorithm BB
                        1 is similar to the branch-and-bound algorithm presented in Akkan and Karabati (2004). The main differences are that graph G
                        1 is filtered, and we use Proposition 5 as a memory dominance rule. In Akkan and Karabati (2004), other dominance rules are used, but preliminary computational experiments indicated that they do not improve the performance of our branch-and-bound procedure.

In algorithm BB
                        2, at each non-root node of the search tree corresponding to node v in graph G
                        2, we compute lower bound L
                        2(v). Again, let σ be the partial sequence built so far. Then,

                           
                              (22)
                              
                                 
                                    
                                       L
                                       2
                                    
                                    
                                       (
                                       v
                                       )
                                    
                                    =
                                    c
                                    o
                                    s
                                    t
                                    
                                       (
                                       σ
                                       )
                                    
                                    +
                                    max
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   
                                                      B
                                                      2
                                                   
                                                   
                                                      (
                                                      v
                                                      ,
                                                      
                                                         π
                                                         *
                                                      
                                                      )
                                                   
                                                   ,
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      max
                                                      
                                                         j
                                                         ∉
                                                         σ
                                                      
                                                   
                                                   
                                                      B
                                                      j
                                                      2
                                                   
                                                   
                                                      (
                                                      v
                                                      ,
                                                      
                                                         π
                                                         *
                                                      
                                                      )
                                                   
                                                   ,
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      max
                                                      
                                                         j
                                                         ∈
                                                         σ
                                                      
                                                   
                                                   
                                                      B
                                                      
                                                         ¬
                                                         j
                                                      
                                                      2
                                                   
                                                   
                                                      (
                                                      v
                                                      ,
                                                      
                                                         π
                                                         *
                                                      
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                       }
                                    
                                    −
                                    
                                       ∑
                                       
                                          j
                                          ∉
                                          σ
                                       
                                    
                                    
                                       π
                                       j
                                       *
                                    
                                    .
                                 
                              
                           
                        Computation of L
                        2(v) can be done in time O(n).

As one can expect from Tables 9 and 10, solving large instances of the problem F2|STSI
                              |∑Ci
                               by enumerating the set of paths in network G
                              2 is very time-consuming. The optimal objective values of medium size instances indicate us that the very large size of the network in this case compared with the case without setup times clearly comes from a degraded initial upper bound. That is why, following the idea described in Tanaka et al. (2009), we introduce the use of a tentative upper bound around algorithm BB
                              2. Contrary to the initial upper bound coming from a feasible solution, a tentative upper bound is fixed a priori without evidence that this value is not smaller than the optimum of the problem. The problem, once restricted by using this bound, can be either equivalent to the original one, or infeasible. Solving the restricted problem yields a posteriori evidence that the tentative upper bound is correct or not. The overall procedure can be summarized like this:

                                 
                                    •
                                    Build and filter network G
                                       1, to obtain network 
                                          
                                             G
                                             1
                                             ′
                                          
                                       .

If the number of arcs in 
                                          
                                             G
                                             1
                                             ′
                                          
                                        does not exceed a given threshold (fixed empirically to 300 thousands arcs in our experiments), then build network G
                                       2 from 
                                          
                                             
                                                G
                                                1
                                                ′
                                             
                                             ,
                                          
                                        filter G
                                       2 and run algorithm BB
                                       2 to solve the problem to optimality.

Otherwise, it is very likely that the upper bound significantly over-estimates the optimal objective value and that it will result in a very large network G
                                       2 at the basis of the branch-and-bound procedure. In this case, perform a major iteration: use a tentative upper bound UBtent
                                        to build and filter network G
                                       2 from 
                                          
                                             
                                                G
                                                1
                                                ′
                                             
                                             ,
                                          
                                        and run algorithm BB
                                       2. Two outcomes are possible.

                                          
                                             –
                                             If algorithm BB
                                                2 does not improve the upper bound, then UBtent
                                                 under-estimates the optimal objective value. In this case, the algorithm performs next major iteration with an increased value of UBtent
                                                .

If algorithm BB
                                                2 completes with a new, improved upper bound, then it is optimal and the overall procedure terminates.


                              Table 11
                               shows the usefulness of the tentative upper bound on instances with setup times: the size of network G
                              2 once it is filtered during the last major iteration (i.e. with the smallest feasible tentative upper bound) is more than seven times smaller than when it is filtered with the initial upper bound for 100-job instances. We do not report the corresponding results for instances without setup times since the impact is very limited for this class of problems.

All the algorithms were coded in C++ and compiled under Microsoft Visual Studio 2012. All the experiments were conducted on a laptop computer with an Intel i7 2.7 GHz processor and 16GB RAM. The solver used to solve the MILP and LP models is IBM ILOG Cplex v12.6.

The initial value of the tentative upper bound is chosen as 
                        
                           U
                           
                              B
                              
                                 t
                                 e
                                 n
                                 t
                              
                           
                           =
                           
                              α
                              1
                           
                           
                              (
                              U
                              B
                              −
                              L
                              B
                              )
                           
                           +
                           L
                           B
                           ,
                        
                      where UB and LB are, respectively, the initial upper bound obtained by the dynasearch procedure and the best lower bound at the end of the subgradient procedure applied to filter network G
                     1. If necessary, UBtent
                      is increased at each major iteration by 
                        
                           
                              α
                              2
                           
                           
                              (
                              U
                              B
                              −
                              L
                              B
                              )
                           
                        
                     . In our implementation, 
                        
                           
                              α
                              1
                           
                           =
                           0.4
                        
                      and 
                        
                           
                              α
                              2
                           
                           =
                           0.2
                           ,
                        
                      ensuring the convergence of the overall procedure in four major iterations.

We use the same tuning of the different parameters for subgradient procedure for filtering networks G
                     1 and G
                     2 for both problem types with and without setup times: 
                        
                           
                              γ
                              
                                 i
                                 n
                                 i
                              
                           
                           =
                           1
                           ,
                        
                     
                     
                        
                           
                              κ
                              S
                           
                           =
                           0.95
                           ,
                        
                     
                     
                        
                           
                              κ
                              E
                           
                           =
                           1.02
                           ,
                        
                     
                     
                        
                           ϵ
                           =
                           
                              10
                              
                                 −
                                 4
                              
                           
                           ,
                        
                     
                     
                        
                           
                              δ
                              S
                           
                           =
                           2
                           ,
                        
                     
                     
                        
                           
                              δ
                              T
                           
                           =
                           n
                           ,
                        
                     
                     
                        
                           m
                           i
                           
                              n
                              
                                 i
                                 t
                                 e
                                 r
                              
                           
                           =
                           2
                           n
                        
                     .

We first tested our branch-and-bound algorithms on instances without setup times generated similarly to the instances in Haouari and Kharbeche (2013). The instance generator takes as input the number of jobs n, and a maximum duration of operations pmax
                        . The duration of the operations is drawn from the uniform distribution [1, pmax
                        ]. We generated 20 instances for each combination of parameters n ∈ {10, 30, 40, 50, 60, 70, 80, 90, 100, 140} and pmax
                         ∈ {10, 100}.

In Table 12
                         we report the number of instances solved to optimality within the time limit of 1000 seconds (for the whole method) by both algorithms BB
                        1 and BB
                        2. Algorithm BB
                        2 solves all instances of the testbed within the time limit. The hardest 100-job instance is solved in 602 seconds.

In Tables 13
                         and 14
                         we give, respectively, the average running time of our branch-and-bound algorithms, and the average number of nodes in the search tree. These average values are computed on the instances solved to optimality by both methods.

As it can be seen from the results, algorithm BB
                        2 performs better than BB
                        1 in terms of computing time, and explores up to 70 times less nodes for instances with 100 jobs and large durations. The difference in the number of nodes can be explained by the fact that lower bound L
                        2 is much stronger than L
                        1 and reduces the size of the search tree by several orders of magnitude for some instances. Moreover, it allows an early detection of infeasible subsequences that cannot be extended to complete sequences with each job processed exactly once. For example, if job j is already scheduled, and no path without job j exists in G
                        2 from current node to the sink node, then 
                           
                              
                                 B
                                 
                                    ¬
                                    j
                                 
                              
                              
                                 (
                                 v
                                 )
                              
                              =
                              ∞
                           
                         and the branch-and-bound node is pruned by the bound. In less extreme scenarios, such paths exist but are all relatively costly, and B
                        ¬j
                        (v) may be sufficiently large to prune the node. The difference in the solution times is less. One can remark that the distribution of the time consumed by each algorithm is not the same: for BB
                        1, most of the time is spent in the exploration of the search tree, while for BB
                        2 the computational effort is balanced between the filtering of G
                        2 and the exploration of the search tree. The relatively small difference in solution times is also due to the fact that calculating L
                        2 takes linear time instead of constant time for bound L
                        1.

In order to test the limits of algorithm BB
                        2, we generated 40 140-job instances. Our method still performs well for this size of instances: the hardest 140-job instance is solved to optimality in 3006 seconds, and the average computing time is 752 seconds. Within a time limit of 1000 seconds, 18 out 20 (resp. 12 out of 20) instances with small (resp. large) processing times are solved. Furthermore, we tested the proposed algorithms on the instances in Haouari and Kharbeche (2013) (with up to 70 jobs), and both BB1 and BB2 solved them to optimality within 1000 seconds.

The Memory Dominance Rule appears to be critical for the efficiency of algorithm BB
                              1: when it is disabled, this method does not solve any 100-job instance within 1000 seconds. Moreover, the average (resp. maximum) number of nodes for solving 60-job instances reaches 16 millions (resp. 225 millions) for small processing times, and 1.3 billions (resp. 5.8 billions) for large processing times, while the average computing time is multiplied by a factor 3.

The rule appears to be less critical for algorithm BB
                              2, probably because of the better quality of the lower bound used. However, it still clearly makes the algorithm more robust in terms of computing time and number of nodes explored. Two 100-job instances are not solved within 1000 seconds when the rule is disabled, but one of them needs more than 7700 seconds to be closed. The average (resp. maximum) number of nodes for solving 100-job instances reaches 78 millions (resp. 958 millions) for small processing times, and 179 millions (resp. 2.7 billions) for large processing times, while the average computing time is multiplied by a factor 4.

For the problem F2|STSI
                        |∑Ci
                        , our solving methods are tested against the testbed of (Gharbi et al., 2013). Their generator takes as input a number n of jobs, and a factor K for setup times. The processing time of each operation is drawn from the uniform distribution [1, 100], and one setup time is drawn for each operation from the uniform distribution [1, 100K]. As mentioned in Section 2, we modify the instances by integrating the setup time of the first operation of each job into its processing time. The whole set of instances is composed of 50 instances for each combination of the number of jobs ranging from 10 to 500, and K ∈ {0.25, 0.5, 0.75, 1}. We restrict our computational study to the 800 instances with the number of jobs in n ∈ {60, 70, 80, 100} (the test set of Gharbi et al., 2013 does not contain 90-job instances).


                        Table 15
                         reports the number of instances solved to optimality by both methods within 1000 seconds. Algorithm BB
                        2 significantly outperforms BB
                        1. Moreover, algorithm BB
                        2 solves all instances of the testbed with up to 100 jobs in less than two hours: only four 100-job instances are not solved within one hour; the hardest instance is solved in 6443 seconds.

The value of parameter K has no significant impact on the performance of algorithm BB
                        1. However, while BB
                        2 solves 47 out of the 50 100-job instances within 1000 seconds when 
                           
                              K
                              =
                              0.25
                              ,
                           
                         it solves only 26 of the instances when 
                           
                              K
                              =
                              1
                           
                         in the same time. This can be explained by the wider range of completion-to-completion lag in the latter case, leading to more nodes in both networks G
                        1 and G
                        2. For large instances, the larger size of G
                        2 implies a consequent computational effort during the first iterations of the subgradient procedure (when the network is only a little shrunk). This hypothesis is confirmed by the fact that the root gap is not significantly impacted by parameter K, while the average time for the subgradient procedure is increased by a factor two for 80-job and 100-job instances when increasing parameter K from 
                           
                              K
                              =
                              0.25
                           
                         to 
                           
                              K
                              =
                              1
                           
                        .

In Tables 16
                         and 17
                         we give, respectively, the average running time of our branch-and-bound algorithms, and the average number of nodes in the search tree. These results emphasize the importance of having tight lower and upper bounds in our methods: algorithm BB
                        2 performs two order of magnitude less nodes than algorithm BB
                        1.

@&#CONCLUSIONS@&#

In this paper, we proposed improved branch-and-bound algorithms for the flowshop problem on two machines with minimum flow time criterion, as well as for its extension with sequence-independent setup times. Our algorithms are based on large-scale network flow formulations of the problem. At the root node, a subgradient procedure is used to compute a very strong Lagrangian dual bound. To reduce the size of the network and improve the dual bound, a filtering technique (combined with the use of a tentative upper bound) and dominance rules are exploited (including a memory based dominance rule). Lagrange multipliers are not updated beyond the root node, which allows us to speed-up the calculation of the lower bound at non-root nodes of the search tree.

Our best algorithm is able to solve all tested 140-job instances witout setup times and 100-job instances with setup times coming from the literature or generated in the same way as in the literature. This is a significant improvement over the best known algorithm dedicated to the special case without setup times, which cannot solve instances with more than 60 jobs with small processing times and with more than 45 jobs with large processing times, as well as for the case with setup times for which the best published method cannot solve instances with more than 35 jobs.

Future research directions include the use of the Successive Sublimation Dynamic Programming (Ibaraki & Nakamura, 1994; Tanaka et al., 2009) algorithm to find an optimal feasible solution instead of branch-and-bound algorithms. It would also be interesting to investigate the possibility of applying similar approaches to more general problems (for example with general total cost functions or more machines) using adapted network representations of the problems.

@&#ACKNOWLEDGMENTS@&#

The authors would like to thank Anis Gharbi, Mohamed Kais Msakni and their co-authors for providing us with their instances and detailed computational results, as well as Federico Della Croce and Vincent T’Kindt for their useful discussion about the problem.

@&#REFERENCES@&#

