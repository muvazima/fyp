@&#MAIN-TITLE@&#A new model-based clock-offset approximation over IP networks

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A new model-based scheme for clock offset estimationbetween two nodes is presented.


                        
                        
                           
                           The one-way delay is modeled with a gamma distribution representing the actual state of the network link.


                        
                        
                           
                           Real and modeled (with zero shift) one-way delay measurements are QQ-plot for the estimation of the clock offset.


                        
                        
                           
                           The proposed model is non-intrusive (the kernel is not modified), and can be implemented at the application layer.


                        
                        
                           
                           The model provides accuracy in the order of 3-5 milliseconds under different traffic conditions.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Gamma distribution

One-way delay

Clock-offset estimation

Network-time protocol

@&#ABSTRACT@&#


               
               
                  Having in mind multimedia systems applications, we propose a novel model-based approach to estimate the clock-offset between two nodes on the Internet. Different than current clock-offset schemes in the literature, which are iterative in nature, our scheme is aimed at getting a good non-iterative clock-offset estimation in real time (in the order of milliseconds). In our clock-offset estimation approach, the One-Way Delay (OWD) measurements are modeled with a shifted gamma distribution representing the current state of the probing link. By using the QQ-probability plot technique and linear regression model, we estimate the (shift parameter or) minimum value of the gamma distribution with probability zero. This estimated value represents the clock offset plus network propagation and transmission delay (queuing delay has already been eliminated) for the corresponding receiving path. End nodes exchange their corresponding minimum estimates and get an improved final clock offset estimate considering the network path asymmetries. Based on real experiments, we show that our scheme provides an extremely fast clock-offset estimation with lower RMSE and superior stability than NTP and current NTP-like state of the art methodologies in the literature Jeske and Sampath (2003), Choi and Yoo (2005), Adhikari et al. (2003), Tsuru et al. (2002). Moreover, our proposed scheme is non-intrusive (no kernel programming needed), easy to implement, and targeted as part of more complex real-time multimedia distribution protocols requiring a fast and reliable OWD estimates.
               
            

@&#INTRODUCTION@&#

One-Way Delay (OWD), end-to-end delay, or One-Way Transit Time (OTT) represents one of the most important Quality-of-Service (QoS) parameter to consider in current communication network applications such as multimedia streaming, distributed event time-ordering (distributed online-games, multiparty teleconference), routing, transport/application protocol design, network management and performance. The estimation of the OWD generally requires clock synchronization between end-nodes or hosts, which still is a fundamental problem in global or IP networks. The problem is even exacerbated for real-time multimedia applications (audio/video streaming, application-level multicast routing, distributed online-games, etc.), for which the OWD must be estimated promptly. A common approach for clock synchronization or clock offset estimation is the exchange of packets probes with send/receive time stamps in a synchronous send-and-wait for reply scheme, as performed by the NTP standard protocol [8] and current NTP improvements [19,1,7,18]. These schemes are iterative in nature (current estimate is an improved version of previous estimate) requiring long sampling periods (from minutes to hours) to provide an accurate clock offset estimate. The long probing periods makes them vulnerable to clock artifacts such as drift and skew. Even though clock artifacts can be easily eliminated [15], current NTP-like schemes still need to deal with long sampling periods to obtain the long-term minimum delay to estimate the OWD. Long probing may not be a problem for static nodes (network servers working on some specific task) such as routers over the Internet, web servers, Domain Name Servers (DNS). For dynamic nodes (end-systems or user nodes) requiring fast clock synchronization, long probing is not an acceptable option (users are not willing to wait for hours for their clocks to be synchronized before initiating a videoconference or distributed game).

Knowledge of the OWD is of great benefit during the activation of a multimedia communication session. In robust communications for example, it helps in several decision making process, such as: (a) the use of data re-transmission (ARQ) or data protection in the form of Forward Error Correction (FEC) or both in the case of transmission errors; (b) when ARQ is selected, the knowledge of the OWD further improves channel-bandwidth usage since only those packets that can make it on time at the receiver-end are retransmitted [21]; (c) selection of the receiving buffer length, (d) the application level of interactivity, (e) congestion control strategies (increase compression when detecting an increment in the OWD before information is lost). In the case of a multi-party distributed game, fast clock synchronization can be further used by receivers to assess the temporal order each stream was sent out from different senders. Similarly, fast offset estimation is also needed in applications such as Internet-TV and multi-party videoconferencing. They often require Application-Level Multicast (ALM) [22], in which IP-multicast related functionalities have been moved to user-nodes (this is due to difficulties in the commercial deployment of IP multicast). An ALM topology consists of unicast connection between user-nodes satisfying some constrains; among the most important is the overall transmission latency or delay. To get the optimal data distribution path visiting all user-nodes, the OWD between every pair of user–nodes must be known beforehand (not possible under current clock-synchronization schemes). Things get even worse when user-nodes are allowed to join and leave the multimedia session randomly; this means that new incoming users must have their clock synchronized with all participants in the session in order to compute a new multicast distribution tree. Finally, in the context of a Content Delivery Network (CDN), a designated proxy Cache to serve the multimedia content is the one geographically closest to the user (even though the closest Cache not necessarily attains the minimum OWD). Having a real-time clock synchronization scheme, the CDN manager can select as the serving cache (out of several candidates) the one with the minimum OWD to the target user. This may considerably improve the service and quality of the transmitted data.

The main scenario considered in this work consists of a pair of (user or dynamic) nodes initiating a real-time multimedia session in the form of videoconference, distributed game, CDN service, application-level multicast tree, etc. We will show that under our model-based clock offset estimation scheme, it is possible to achieve good estimations in real-time rather than minutes or days as in current NTP and NTP-like schemes. It is fare to point out however, that the goal of the NTP and NTP-like protocols is to provide accurate clock synchronization over fairly long-time scales [23], while our purpose is a real-time offset estimation to satisfy the aforementioned multimedia-communication application demands.

The proposed scheme is simple, non-iterative and does not require additional overhead from communicating nodes other than timestamps. It starts working at the moment the corresponding pair of nodes exchange initial information in the way of independent n
                     =5 packet probes in the forward and reverse direction, eliminating the need of synchronous send-and-wait interaction, long sampling periods, and skew and drift corrections. Once the end-nodes have their corresponding clock offset (hereafter offset) estimations, a final offset estimation is computed by combining both independent estimates.

Finally, our scheme is non-intrusive (it works at the application level), and can be embedded into more complex multimedia distribution protocols (including the Transport Control Protocol-TCP/IP and NTP-like protocols to accelerate their convergence) for initial clock offset estimation over small periods of time. According to our knowledge, this is the first model-based proposal for clock offset estimation.

The paper is organized as follows. Basic terminology, theoretical foundation, and previous work is introduced in Section 2. Section 3 describes our proposed model for clock offset estimation, and experimental model performance and conclusions are presented in Sections 4 and 5 respectively.

In this section we describe fundamental terminology for clock offset estimation and discuss previous work on offset and OWD estimation.

Let us define the system clock C(t), as a piecewise function of t that is twice differentiable except on a finite set of points [14,15]. Then, we can state the following set of definitions regarding this function [15]:


                        Absolute Offset: The difference between the time reported by the system clock C(t) and a ”true” clock. The absolute offset of CA
                         is (CA
                        (t)−
                        t). The relative offset (or offset in our work) is then the difference between a pair of system clocks at time t
                        ⩾0 is θ(t)=
                        CA
                        (t)−
                        CB
                        (t).


                        Frequency: The rate at which the clock progresses, C′(t)=
                        dC(t)/dt.


                        Clock ratio or Skew (α): The frequency ratio between a clock and the “true” clock (this definition follows the terminology of [31]); the ratio of CA
                         is C′
                           B
                        . The clock ratio of CA
                         relative to CB
                         at time t is α
                        =
                        C′
                           A
                        (t)/C′
                           B
                        (t).


                        Resolution: The minimum time unit by which the clock time is updated. It strongly depends on both the operating system and system processor. Between two hosts the reliable resolution is found in the order of tenths of milliseconds.

The relationship between two clocks can now be stated as follows:
                           
                              (1)
                              
                                 
                                    
                                       C
                                    
                                    
                                       A
                                    
                                 
                                 (
                                 t
                                 )
                                 =
                                 θ
                                 (
                                 t
                                 )
                                 +
                                 α
                                 
                                    
                                       C
                                    
                                    
                                       B
                                    
                                 
                                 (
                                 t
                                 )
                              
                           
                        
                     

If clock information between two hosts could be exchanged instantly, we would infer the offset by using Eq. (1). However, in a communication network this is not the case and we observe additional embedded components as explained next.

A common technique for getting clock information between two hosts in a communication network is the exchange of data packets containing timing information (see Fig. 1
                        ). Let 
                           
                              
                                 
                                    T
                                 
                                 
                                    A
                                 
                                 
                                    1
                                 
                              
                              (
                              i
                              )
                           
                         denote the time when host A sends a message i to host B. Upon reception B marks this message with a new timestamp 
                           
                              
                                 
                                    T
                                 
                                 
                                    B
                                 
                                 
                                    2
                                 
                              
                              (
                              i
                              )
                           
                         and bounces it back again to A, appending a new timestamp 
                           
                              
                                 
                                    T
                                 
                                 
                                    B
                                 
                                 
                                    3
                                 
                              
                              (
                              i
                              )
                           
                         right before the packet is sent out. When host A receives the message it records the timestamp of the arrival 
                           
                              
                                 
                                    T
                                 
                                 
                                    A
                                 
                                 
                                    4
                                 
                              
                              (
                              i
                              )
                           
                        . This cycle form a measurement. With the four timestamps it is easy to obtain the round trip time and one way transit time from forward and reverse paths respectively as follows:
                           
                              (2)
                              
                                 RTT
                                 (
                                 i
                                 )
                                 =
                                 
                                    
                                       T
                                    
                                    
                                       A
                                    
                                    
                                       4
                                    
                                 
                                 (
                                 i
                                 )
                                 -
                                 
                                    
                                       T
                                    
                                    
                                       A
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 i
                                 )
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       OWD
                                    
                                    
                                       A
                                       →
                                       B
                                    
                                 
                                 (
                                 i
                                 )
                                 =
                                 
                                    
                                       T
                                    
                                    
                                       B
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 i
                                 )
                                 -
                                 
                                    
                                       T
                                    
                                    
                                       A
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 i
                                 )
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       OWD
                                    
                                    
                                       B
                                       →
                                       A
                                    
                                 
                                 (
                                 i
                                 )
                                 =
                                 
                                    
                                       T
                                    
                                    
                                       A
                                    
                                    
                                       4
                                    
                                 
                                 (
                                 i
                                 )
                                 -
                                 
                                    
                                       T
                                    
                                    
                                       B
                                    
                                    
                                       3
                                    
                                 
                                 (
                                 i
                                 )
                              
                           
                        
                     

Eqs. (3) and (4) can be represented in general by:
                           
                              (5)
                              
                                 OWD
                                 =
                                 
                                    
                                       T
                                    
                                    
                                       recv
                                    
                                 
                                 -
                                 
                                    
                                       T
                                    
                                    
                                       send
                                    
                                 
                              
                           
                        
                     

For n samples, each OWDi
                        , 
                           
                              1
                              ⩽
                              i
                              ⩽
                              n
                           
                        , can be split up into the following components [12]:
                           
                              (6)
                              
                                 
                                    
                                       OWD
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 θ
                                 +
                                 ξ
                                 +
                                 
                                    
                                       δ
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       ε
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        where θ represents the offset between the clocks (assumed constant in short periods of time), ξ is the network propagation plus transmission delay, δ is the queuing delay observed by the messages or packets, and ε is a random error with zero average. For a fixed path and constant size probes, ξ is an unknown constant related to the minimum delay that can be observed in a path and to the physical properties of the network path. Its magnitude varies from nanoseconds for local Ethernet connections to hundreds of milliseconds for intercontinental satellite connections. ξ is commonly assumed as zero by some authors [12], but in this work it is considered as a positive number. The portion of the OWD without the offset is called packet delay or simply delay of the path.

Rigorously speaking, Eq. (5) is valid for short-time probing (within milliseconds to few seconds) where clock skew can be neglected [14,18,24,25]. Over long probing periods (in the order of minutes to hours), Eq. (5) can be restated as follows:
                           
                              
                                 
                                    
                                       OWD
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       T
                                    
                                    
                                       recv
                                    
                                 
                                 -
                                 α
                                 
                                    
                                       T
                                    
                                    
                                       send
                                    
                                 
                              
                           
                        
                     

In our proposed protocol we use both short-time probing and small packet size, therefore the skew is considered to be one, so the estimation is performed with Eqs. (5) and (6).

Current methodologies for offset and OWD estimation in the literature exchange timestamps in the forward and backward paths synchronously (send and wait for reply). One of the most famous scheme in this category is the NTP protocol [8], which exchanges clock information between a host A and a group of hosts Bk
                        ({k|k
                        >0}), to obtain the OWD values according to Eqs. (3) and (4). The scheme reports
                           
                              (7)
                              
                                 
                                    
                                       
                                          
                                             θ
                                          
                                          
                                             ˆ
                                          
                                       
                                    
                                    
                                       A
                                       ↔
                                       B
                                    
                                 
                                 =
                                 
                                    
                                       
                                          min
                                       
                                       
                                          i
                                          |
                                          0
                                          <
                                          i
                                          ⩽
                                          k
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             min
                                          
                                          
                                             j
                                          
                                       
                                       (
                                       
                                          
                                             OWD
                                          
                                          
                                             A
                                             →
                                             
                                                
                                                   B
                                                
                                                
                                                   k
                                                
                                             
                                          
                                       
                                       (
                                       j
                                       )
                                       -
                                       
                                          
                                             OWD
                                          
                                          
                                             
                                                
                                                   B
                                                
                                                
                                                   k
                                                
                                             
                                             →
                                             A
                                          
                                       
                                       (
                                       j
                                       )
                                       )
                                    
                                    
                                       2
                                    
                                 
                              
                           
                        as the offset between A and all the Bk
                         hosts.

Paxson [18] developed a similar approach to estimate the offset, by using the minimum on each side of the path:
                           
                              (8)
                              
                                 
                                    
                                       
                                          
                                             θ
                                          
                                          
                                             ˆ
                                          
                                       
                                    
                                    
                                       A
                                       ↔
                                       B
                                    
                                 
                                 =
                                 
                                    
                                       
                                          min
                                       
                                       (
                                       
                                          
                                             OWD
                                          
                                          
                                             A
                                             →
                                             
                                                
                                                   B
                                                
                                                
                                                   k
                                                
                                             
                                          
                                       
                                       -
                                       
                                          
                                             OWD
                                          
                                          
                                             
                                                
                                                   B
                                                
                                                
                                                   k
                                                
                                             
                                             →
                                             A
                                          
                                       
                                       )
                                    
                                    
                                       2
                                    
                                 
                              
                           
                        
                     

This expression has smaller MSE (mean squared error) than the NTP estimation. In [12] a bias-correction technique for the Paxson’s estimator is provided because of the finite number of samples used in the estimation. Their proposed estimator is:
                           
                              (9)
                              
                                 
                                    
                                       
                                          
                                             θ
                                          
                                          
                                             ˆ
                                          
                                       
                                    
                                    
                                       A
                                       ↔
                                       B
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          n
                                       
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       (
                                       i
                                       )
                                    
                                 
                                 -
                                 
                                    
                                       Y
                                    
                                    
                                       (
                                       i
                                       )
                                    
                                 
                                 )
                              
                           
                        where
                           
                              (10)
                              
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       n
                                    
                                    
                                       n
                                       -
                                       1
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                1
                                             
                                             
                                                2
                                             
                                          
                                          -
                                          
                                             
                                                1
                                             
                                             
                                                2
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                          +
                                          
                                             
                                                1
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            n
                                                            -
                                                            1
                                                         
                                                         
                                                            n
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                n
                                             
                                          
                                       
                                    
                                 
                              
                           
                        and
                           
                              (11)
                              
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       n
                                    
                                    
                                       n
                                       -
                                       1
                                    
                                 
                                 
                                    
                                       
                                          -
                                          
                                             
                                                1
                                             
                                             
                                                2
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                          -
                                          
                                             
                                                1
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            n
                                                            -
                                                            i
                                                            +
                                                            1
                                                         
                                                         
                                                            n
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                n
                                             
                                          
                                          +
                                          
                                             
                                                1
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            n
                                                            -
                                                            i
                                                         
                                                         
                                                            n
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                n
                                             
                                          
                                       
                                    
                                 
                                 ,
                                 
                                 i
                                 ⩾
                                 2
                              
                           
                        with X
                        (
                        
                           i
                        
                        ) and Y
                        (
                        
                           i
                        
                        ) the ordered measurements in each direction and n the number of measurements. This correction does not take into account the skew between the clocks involved in the measurements, so their findings are valid only within a small number of samples (10<
                        n
                        <40).

Choi and Yoo [7], estimate the one-way delay by exchanging Round-Trip Time (RTT) information. The problem with this approach is the assumption that the forward and backward paths are the same. This is not necessarily true in the context of today’s Internet topology [16]; therefore the method proposed by Choi has only limited applicability.

More recent approaches for skew and offset estimation use one-way path measurements only (in the forward or reverse direction). In [15] the authors provide a linear programming methodology that adjusts a linear model to the OWD measurements and returns the skew and a quantity representing the offset plus the minimum observed delay (network propagation plus transmission delay). Adhikari et al. [1] formulated a new approach to obtain the delay portion of the OWD from two-way measurements. Their approach is based on the assumption that if there is no offset and skew between the two hosts, the times 
                           
                              
                                 
                                    T
                                 
                                 
                                    A
                                 
                                 
                                    1
                                 
                              
                           
                        , 
                           
                              
                                 
                                    T
                                 
                                 
                                    B
                                 
                                 
                                    2
                                 
                              
                           
                        , 
                           
                              
                                 
                                    T
                                 
                                 
                                    B
                                 
                                 
                                    3
                                 
                              
                           
                        , 
                           
                              
                                 
                                    T
                                 
                                 
                                    A
                                 
                                 
                                    4
                                 
                              
                           
                         will be ordered in time. So if we include θ and α as offset and skew respectively we will have the following relationship:
                           
                              
                                 
                                    
                                       T
                                    
                                    
                                       A
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 i
                                 )
                                 <
                                 θ
                                 +
                                 α
                                 
                                    
                                       T
                                    
                                    
                                       B
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 i
                                 )
                                 <
                                 θ
                                 +
                                 α
                                 
                                    
                                       T
                                    
                                    
                                       B
                                    
                                    
                                       3
                                    
                                 
                                 (
                                 i
                                 )
                                 <
                                 
                                    
                                       T
                                    
                                    
                                       A
                                    
                                    
                                       4
                                    
                                 
                                 (
                                 i
                                 )
                              
                           
                        which defines a set D of pairs (θ, α) satisfying the above equation. A point in D can be found using linear programming methods. The offset estimator is found with the following expression:
                           
                              (12)
                              
                                 
                                    
                                       
                                          
                                             θ
                                          
                                          
                                             ˆ
                                          
                                       
                                    
                                    
                                       A
                                       ↔
                                       B
                                    
                                 
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   max
                                                
                                                
                                                   1
                                                   ⩽
                                                   i
                                                   ⩽
                                                   n
                                                
                                             
                                          
                                          {
                                          
                                             
                                                S
                                             
                                             
                                                i
                                             
                                          
                                          -
                                          α
                                          
                                             
                                                U
                                             
                                             
                                                i
                                             
                                          
                                          }
                                          +
                                          
                                             
                                                
                                                   min
                                                
                                                
                                                   1
                                                   ⩽
                                                   i
                                                   ⩽
                                                   n
                                                
                                             
                                          
                                          {
                                          
                                             
                                                T
                                             
                                             
                                                i
                                             
                                          
                                          -
                                          α
                                          
                                             
                                                V
                                             
                                             
                                                i
                                             
                                          
                                          }
                                       
                                    
                                 
                              
                           
                        
                     

Adhikari et al. points out that the timestamps need to be obtained at the kernel level in order to have the best accuracy for the offset and skew estimation; therefore a modification of the kernel system is needed. Paxson’s method [18] falls as a special case of the above relationship when α
                        =1.

Tsuru et al. [19] proposed a correction to Paxson’s method in order to consider the asymmetries presented in the network. These asymmetries appear when hosts are connected through an ADSL or Cable modems. They used variable packet sizes in order to get a different estimation Q(λ,α,μ) of the queuing delay. An estimation of the delay constant portion μ
                        =
                        θ
                        +
                        ξ could be obtained by minimizing PQ subject to Q>0. Then the offset is obtained by 
                           
                              θ
                              =
                              
                                 
                                    
                                       
                                          μ
                                       
                                       
                                          f
                                       
                                    
                                    -
                                    
                                       
                                          μ
                                       
                                       
                                          r
                                       
                                    
                                 
                                 
                                    2
                                 
                              
                           
                        . The authors proved that a convenient large sampling size (n
                        =40,000) with different packet sizes will give a sub-millisecond error estimation of the offset.

In [9,10], a novel classless protocol for clock synchronization is proposed. Unlike NTP that selects and estimate the next clock change based on a complex mechanism, authors proposed a simple utility function for minimizing all possible clock adjustments between participating hosts. Each host collects bounced measurements from all others and sends them to a central node in charge of computing the time synchronization adjustments for each host. It is shown that the classless protocol has shorter clock synchronization dispersion than the NTP.

The NTP and NTP-like schemes mentioned above are iterative in nature showing low temporal performance (delays of the links and the offset of the nodes cannot be determined in close form by synchronous send-and-wait-for-reply packet probing [31]). The low performance can be explained by the relative long sampling periods needed to decrease the uncertainty (or indeterminacy) in the offset estimation, which following Freris et al.́s clock synchronization limit analysis [31], this uncertainty is proportional to the RTT of the communication links. Because of this relationship between offset and RTT, NTP and NTP-like schemes have to search for the minimum delay (or minimum network traffic) to provide an accurate offset estimation, as performed in Eqs. (7) and (8). Different than NTP and NTP-like schemes, the uncertainty in our statistical model-based offset estimation does not depends on the RTT, but mainly on the reduced number of probing packets (n
                        =5), which may yield an error on the Gamma-model estimated parameters of ∼30% as discussed in Section 3.4.

In an effort to increase clock synchronization accuracy across the Internet, Veitch et al. [32] made use of the Time Stamp Counter (TSC) register as a software clock in the NTP protocol for time stamping arriving NTP packets. The TSC register, which counts the number of CPU cycles since reset is able to keep track of time at a very high resolution, yielding a TSC-NTP clock synchronization performance significantly higher than the original NTP and similar to the one obtained with costly GPS technology. With the new software clock technology and new algorithms for robust clock rate estimation and packet filtering, they obtained a clock synchronization error in the order of 30μs. The higher clock synchronization performance is at expenses of higher polling rates (16s), kernel-level code modifications, and a nearby reliable stratum-1 NTP.

NTP-based schemes are not useful for wired and wireless networks applications requiring time synchronization within the microsecond or nanosecond accuracy. For wired networks applications (such as industrial automation, control systems, telecommunications and power generation), a Precision Time synchronization Protocol (PTP) has been developed and published as IEEE Standard 1588 that enables precise synchronization of nodes in a distributed system communicating via local area networks [41]. The synchronization process is divided into two phases, offset correction and delay measurement. In the first phase (offset correction), the master clock sends a SYNC and a FOLLOW-UP messages to the connected slave, which calculate the offset correction. The second phase of the synchronization process (delay measurement), the slave sends a delay request packet to the master which in turn generates a time stamp on receiving the packet and sends it back to the slave to get a final time offset estimation. The master sends SYNC and follow-up packets at defined intervals (every 2s in the basic setting) while the slave sends the delay request at irregular intervals (4–6s) in order to relief the load on the network [42]. The synchronization process may take several seconds and requires hardware assistance for the nanosecond accuracy.

Recently, a new class of distributed applications over wireless networks have emerged requiring higher clock synchronization accuracy than regular applications over the Internet. Examples such as slotted distributed scheduling in wireless networks, coordination of events in networked control (traffic control) and target localization and tracking in distributed sensor network applications are some of the applications requiring clock synchronization accuracy in the order of microseconds [31,33,34]. Broadly speaking, these schemes can be classified into distributed and non-distributed algorithms. Examples of non-distributed models for clock synchronization in sensor networks are the Reference Broadcast Synchronization (RBS) [35], the Timing-sync Protocol for Sensor Networks (TPSN) [36], and the Flooding Time Synchronization Protocol (FTSP) [34]. These schemes perform time synchronization by exchanging time stamps in different ways. RBS [35] is a receiver–receiver synchronization scheme in which nodes record the receiving packet time sent from a common broadcasting node, and then exchange their corresponding local time stamps to synchronize their respective clocks. RBS eliminates the uncertainty of the sender delay (send and channel access time), being able to obtain a synchronization accuracy of 11μs between two receivers. TPSN [36] algorithm first creates a spanning tree of the network and then uses a conventional sender–receiver synchronization along the edges (making the protocol accessible for multi-hop networks). Even though TPSN does not eliminates the uncertainty of the sender (send and access time), it minimizes it by time-stamping packets in the MAC layer, yielding 2× better performance than RBS [35]. On the other hand, FTSP [34] uses one-way radio messages sent from a reference node to all nodes within the broadcast radius for time synchronization. It uses hardware solutions and efficient multiple time-stamping to eliminate all packet delay factors but the propagation delay, and linear regression to compensate for clock drifts [37]. Different than TPSN, FTSP allows dynamic topology changes, provides multi-hop synchronization, and excellent per-hop synchronization accuracy in the 1μs and in the order of 10μs for a network with several hundreds of nodes. It is clear that RBS, TPSN, and FTSP achieve better time synchronization accuracy than NTP and NTP-like schemes. However, it is important to keep in mind that we are comparing two different network environments; in the wireless case, there is no queuing delay and the propagation delay is negligible, which is certainly different over the Internet topology. Despite of this, there is an intrinsic error in the estimation of the skew/offset in the RBS, TPSN, and FTSP schemes, which is reduced statistically by sending more probing messages, that is estimation is improved with additional probing as in NTP. In the simplest case of pairwise synchronization, RBS scheme needs 30 additional reference broadcasts messages to improve the precision from 11μs to 1.6μs; TPSN needs N
                        ⩾10 independent runs (although authors claim that more work needs to be done to concretize their claim), and because it is a two-way communication protocol results in higher communication load [34]; in FTSP Multiple timestamps with linear regression are used to estimate clock skew and offset, needing about 8 messages from the root node for estimating the skew and offset using linear regression.

More recent synchronization algorithms have been developed for wireless sensors that work by consensus or in a fully distributed manner, and are well suited to cooperative networks. They do not require the construction of a tree topology, are robust to node failures, provide better scalability and more accurate synchronization than those requiring specified network structures (RBS, TSPN and FTSP). In [38], Solis et al. developed a distributed algorithm for accurate time synchronization in large multihop wireless networks by exploiting a global network constraint that, the relative clock offsets in network loops sum to zero. Barooah and Hespanha [39] proposed a distributed and iterative algorithm that implements the Jacobi method to compute the optimal estimate for clock synchronization. These (consensus) schemes suffer from slow convergence speed, and thus require the exchange of a high number of data packets in the network to achieve a desired accuracy, as pointed out in [39,40]. As mentioned in Section 1, our model-based scheme for the Internet is non-iterative, requiring 5 two-way asynchronous messages (or 5 one-way messages depending on the required precision) to issue one and final offset estimate with a root mean square error comparable to the one obtained using 50 NTP message exchanges (as shown in Section 4). In order to have an idea of what our model would be like in a wireless sensor network, let us assume that we have modeled the delay involved in sending a message from a node using only application-level time-stamping (not MAC-level time-stamping). Theoretically, our model would eliminate all delays involve in the message transmission except the propagation delay, issuing only one offset estimation around the true offset value (our estimation produces very small root-mean square error). Our scheme is non iterative, does not require kernel modification, and it is target to multimedia applications.

Generally speaking, our proposed scheme consists of two general processes, independent one-way offset estimation and Collaborative offset estimation. The aim of the one-way offset estimation is to model the OWD and then estimate the long-run minimum delay (that is when δi
                        
                     =0 in Eq. (6)) for a specific path. This value is considered as a first approximation to the real offset, wherein queuing delay has been eliminated (theoretically). In the collaborative process, nodes exchange their corresponding approximation and calculate a new refined offset estimation taking into account the asymmetries in the forward and reverse paths due to transmission and propagation delay.

In this section, we first describe the core process in our proposed scheme, OWD modeling and characterization, and then present the one-way offset and collaborative protocols.

It is well known that the distribution of queuing delay is hard to characterize succinctly [5]; it is a non-stationary process in the long run [13] susceptible to network path changes, traffic conditions, and sending rate [24,26]. Several experimental works in the literature confirm that the queuing delay over a fixed path can be represented by a gamma distribution with heavy tail [6,17,24,26,27]. Bovy et al. [26], report that 84% of the observed distributions in the area of study follow a gamma distribution, while the rest (16%) are considered as atypical distribution attributed to routing anomalies (changing paths). Similar results were obtained by Holleczek et al. [27], concluding that gamma distribution is well suited in many network conditions (except in few situations with multimodal behavior, representing again routing changes). Using high precision measurements of the OWD, Hernández and Magaña, [24], run into different distributions in the experiment for different sending rates. At relative low speeds (2.1Mbs) the OWD follows a gamma distribution. As the sending rate increases (2.6Mbs), the distribution is modeled as Pareto with longer tail, and when the sending rates gets closer to the available bandwidth (more delay in the queue), the distribution gets wider resembling a Lognormal distribution.

In order to verify and characterize the OWD distribution suitable to our specific problem requirements (probing time, inter-packet separation, and packet load), we carried out a set of experiments involving 3 different links on the Internet as shown in Fig. 2
                        . The experimental network links the Center for Research in Mathematics (CIMAT) in Guanajuato, México, with the National Institute of Astrophysics, Optics and Electronics (INAOEP) in Puebla, México, the Institute of Educational Technology-Department of Public Education and Culture (IET-DPEC) in Sinaloa, México, and the University of Illinois at Chicago (UIC). During a week of independent measurements over each link (a total of one month of measurements), 48-byte UDP probes with different inter-packet separation ({10, 20, 30, 40, 80, 160, 500, 1000}ms) were sent over each network segment in the forward and reverse paths. We use alternating path direction during 1-h probing period, that is for half an hour the UDP probes were sent in the forward direction only, and during the next half hour UDP probes were sent in the reverse direction only; the process was repeated every 2h. All 30min OWD time series were preprocessed in order to remove the offset and skew using [18,15] respectively. OWD histograms were analyzed by the maximum likelihood method of the R Software-Tool [28] to find the best fitting model. Based on previous work, we considered the following predefined distribution for the fitting process: Gamma, Weibull, Exponential, Normal, and Chi-square distributions. Our analysis shows (in agreement with [6,17,24,26,27]) that the most common fitting model for the one-way delay is the three-parameter bell-shaped gamma density function represented by:
                           
                              (13)
                              
                                 f
                                 (
                                 x
                                 ,
                                 ρ
                                 ,
                                 β
                                 ,
                                 γ
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         x
                                                         -
                                                         γ
                                                      
                                                      
                                                         β
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             ρ
                                             -
                                             1
                                          
                                       
                                       
                                          
                                             e
                                          
                                          
                                             -
                                             (
                                             x
                                             -
                                             γ
                                             )
                                             /
                                             β
                                          
                                       
                                    
                                    
                                       β
                                       Γ
                                       (
                                       ρ
                                       )
                                    
                                 
                                 ,
                                 
                                 (
                                 ρ
                                 >
                                 0
                                 ,
                                 β
                                 >
                                 0
                                 ;
                                 x
                                 >
                                 γ
                                 )
                              
                           
                        where ρ is the shape parameter, β the scale parameter and γ the threshold or location parameter. From our observations, we observed that the shape-parameter values were confined in the range [1.0–4.0], therefore it is assumed in this work that the OWDi
                         samples come from a gamma distribution of the form f(ρ 
                        
                           
                              
                                 
                                    C
                                 
                                 
                                    ̵
                                 
                              
                           
                         [1.0,4.0], β, γ), which is the theoretical foundation of our fast clock offset estimation algorithm (see Section 3.2). Fig. 3
                         depicts some examples of the gamma distribution varying both the shape parameter ρ
                        =[1.0,2.0,3.0,4.0] (for β
                        =1.5 and γ
                        =0) and the scale parameter β
                        ={0.4, 0.6, 0.8, 1.0} (for ρ
                        =1.5 and γ
                        =0). The shape and scale parameters allow the gamma distribution taking on a variety of shapes; it can behave as an exponential distribution (ρ
                        =1), Chi-square with n degrees of freedom (ρ
                        =1/2 and b
                        =
                        n/2), or a normal distribution if the ρ
                        ≫
                        β, which makes the gamma distribution a good model for representing different traffic behavior over the Internet.

Following Holleczeck’s nomenclature [29], around 92% of the observed histograms in our experiments are considered typical (unimodal histograms as shown Fig. 4
                        a), and 8% of the analyzed histograms were atypical or multimodal (one or two additional light peaks with respect to the main peak as shown in Fig. 4b), which may represent variations in the path [26] or an indication of emerging congestion [27]. These atypical histograms are best represented with a mixture model [27] and are not considered in or study (our probing time scale is in the order of milliseconds).

Considering our experimental set-up (probing time-length, packet size and inter-packet separation described above), we believe that incrementing the number of links in the experiment will not change the outcome regarding the model representation of the OWD and characterization of ρ. For typical links (links with a stationary path), we observed similar histogram behavior (shape) independently of the IP link (except for the OWD time-scale and location parameter), which can be adequately modeled with a gamma distribution (in agreement with previous work). Therefore, rather than increasing the number of links in the experiment, the important point is to capture all different traffic conditions over the link (no-traffic/light/medium/heavy traffic conditions) for a specific probing-time length, sending rate and packet load.

Moon et al. [15] estimate the offset by probing for the minimum delay between two hosts. Searching for the minimum delay (without queuing delay) requires long probing periods, and still uncertain (depending on the traffic conditions) how close the estimation is to the real minimum. Our methodology for a fast estimation of the minimum path delay is based on a predefined gamma distribution (as described in Section 3.1). We assume that queuing delay 
                           
                              
                                 
                                    δ
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                    
                                 
                                 
                                    n
                                 
                              
                           
                         of the OWDi samples form a sequence of non-negative independent and identically distributed random variables from a distribution F(·) that has been shifted by (θ
                        +
                        ξ) (see Eq. (6)).

Initially, one of the hosts sends a group of n 48-bytes UDP-packets at a constant rate 1/d, with timestamp information relative to the sender’s clock (Fig. 5
                        ). While still sending the packets, the sender prepares to receive another group of n packets from the receiver. At the receiver’s side, the arrival of the first packet triggers the transmission of the corresponding n packets back to the sender at the same rate 1/d, with their respective timestamp information. Note that this is not a send-and-wait for replay scheme as in previous schemes. The receiver records the n packets arrival time information, and estimates the parameters of the gamma distribution (or delay distribution) for the corresponding path using our proposed Gamma Approximation with Moments and Linear Regression (GAMLR) scheme, which is described next.


                        Gamma Approximation with moments and Linear Regression (GAMLR): According to the method of moments 
                        [2], the parameters of a gamma distribution are related to the sample mean 
                           
                              
                                 
                                    x
                                 
                                 
                                    ¯
                                 
                              
                           
                         and sample standard deviation s of the OWD as follows:
                           
                              (14)
                              
                                 
                                    
                                       
                                          ρ
                                          =
                                          
                                             
                                                (
                                                
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                   
                                                   
                                                      s
                                                   
                                                
                                                )
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                    
                                       
                                          β
                                          =
                                          
                                             
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The use of the method of moments is convenient for its simplicity and fast implementation, but more complex algorithms for parameter estimation can also be used. From our experimental observations, we found 
                           
                              ρ
                              ∈
                              [
                              1
                              ,
                              …
                              ,
                              4
                              ]
                           
                         for the Internet, so we give more credit to this parameter than to the value of the sample variance itself if outside the range (values outside the range of ρ are mapped to the corresponding upper or lower limit).

Following Moon’s notation, let 
                           
                              
                                 
                                    y
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                              ,
                              1
                              <
                              i
                              ⩽
                              n
                           
                         be the theoretical ordered random values of the gamma distribution with parameters γ
                        =0 (located at the origin), and ρ and β computed according to Eq. (14) (to speed up the generation of the random values, we define look-up tables for the theoretical distribution 
                           
                              
                                 
                                    y
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                           
                         in the proposed range for ρ, and use simple interpolation of missing values [11]). Similarly, let x(i)=
                        Trecv
                        (i)−
                        Tsend
                        (i) be the difference between the received and departure timestamps observations (see Fig. 6
                        ), and let 
                           
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ̃
                                       
                                    
                                 
                                 
                                    (
                                    j
                                    )
                                 
                              
                              =
                              
                                 
                                    sort
                                 
                                 
                                    j
                                 
                              
                              (
                              x
                              (
                              i
                              )
                              )
                              ,
                              1
                              <
                              i
                              ⩽
                              n
                           
                        , be the ordered difference of x(i). Note that y
                        (
                        
                           i
                        
                        ) and 
                           
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ̃
                                       
                                    
                                 
                                 
                                    (
                                    j
                                    )
                                 
                              
                           
                         have the same distribution (same parameters ρ and β) with different location parameter; 
                           
                              
                                 
                                    y
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                           
                         are random values generated from a gamma distribution f(ρ, β, γ
                        =0), wherein ρ and β are computed from the observed one-way delay samples 
                           
                              x
                              (
                              i
                              )
                           
                         with distribution f(ρ, β, γ
                        =
                        constant delay
                        =
                        offset) (a gamma distribution shifted by a constant delay). The problem is to estimate the constant delay γ (strictly speaking the constant delay is made up of the offset+network propagation delay+transmission delay) or similarly eliminate the queuing delay δ in Eq. (6).

In order to compute the offset between two nodes (or eliminate the queuing delay), we make use of the probability QQ-plot technique 
                        [30] on the samples (
                           
                              
                                 
                                    y
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                              ,
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ̃
                                       
                                    
                                 
                                 
                                    (
                                    j
                                    )
                                 
                              
                           
                        ) and then a linear regression model to find the point at which the regression line crosses the x-axis (which is the shift of x(i) with respect to a distribution 
                           
                              
                                 
                                    y
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                           
                         located at the origin). This point represents the minimum value of the distribution of x(i) with probability zero (γ) as shown in Fig. 7
                        . The linear regression model to find γ is represented by:
                           
                              (15)
                              
                                 
                                    
                                       y
                                    
                                    
                                       (
                                       i
                                       )
                                    
                                 
                                 =
                                 β
                                 ∗
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                    
                                       (
                                       i
                                       )
                                    
                                 
                                 +
                                 γ
                              
                           
                        
                     

As mentioned before, γ can be interpreted as the sum of the real offset plus the network propagation and transmission delay, since queuing delay has already been eliminated (we cannot have shorter OWDs than γ). As a first approximation, the one-way estimated offset can be expressed as follows:
                           
                              (16a)
                              
                                 
                                    
                                       θ
                                    
                                    
                                       ˆ
                                    
                                 
                                 =
                                 γ
                                 =
                                 θ
                                 +
                                 ξ
                              
                           
                        
                     

It is not possible to separate θ and ξ from just one-way observations.

From Eq. (16a) can now compute the ith
                         packet OWD as:
                           
                              (16b)
                              
                                 
                                    
                                       
                                          
                                             OWD
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 
                                    
                                       θ
                                    
                                    
                                       ˆ
                                    
                                 
                              
                           
                        
                     

The minimum OWD estimation procedure discussed above returns a good estimate of the offset, with an error proportional to the constant part of the OWD (see Eq. (6)). That is, the one way estimated offset is an estimation of the real offset plus the propagation and transmission delay (called constant delay). It is not possible to separate θ and ξ from just one-way observations. However, the influence of the constant delay over the estimated offset can be decreased by allowing the end-nodes to independently compute their one-way offset estimation and exchange their corresponding values [12] as shown in Fig. 4. The final offset estimation is then computed by taking the average [19] of the independent offset estimation at each node:
                           
                              (16)
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      θ
                                                   
                                                   
                                                      ˆ
                                                   
                                                
                                             
                                             
                                                A
                                                ↔
                                                B
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      A
                                                      →
                                                      B
                                                   
                                                
                                                -
                                                
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      A
                                                      ←
                                                      B
                                                   
                                                
                                             
                                             
                                                2
                                             
                                          
                                          =
                                          
                                             
                                                [
                                                (
                                                θ
                                                +
                                                
                                                   
                                                      ξ
                                                   
                                                   
                                                      A
                                                      →
                                                      B
                                                   
                                                
                                                )
                                                -
                                                (
                                                -
                                                θ
                                                +
                                                
                                                   
                                                      ξ
                                                   
                                                   
                                                      A
                                                      ←
                                                      B
                                                   
                                                
                                                )
                                                ]
                                             
                                             
                                                2
                                             
                                          
                                          =
                                          θ
                                          +
                                          
                                             
                                                (
                                                
                                                   
                                                      ξ
                                                   
                                                   
                                                      A
                                                      →
                                                      B
                                                   
                                                
                                                -
                                                
                                                   
                                                      ξ
                                                   
                                                   
                                                      A
                                                      ←
                                                      B
                                                   
                                                
                                                )
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    ξ
                                 
                                 
                                    A
                                    →
                                    B
                                 
                              
                           
                         represents the constant delay from node A to node B, 
                           
                              
                                 
                                    
                                       
                                          θ
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    A
                                    →
                                    B
                                 
                              
                           
                         and 
                           
                              
                                 
                                    
                                       
                                          θ
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    A
                                    ←
                                    B
                                 
                              
                           
                         represent the offset estimated at node B and A respectively. The gain of the collaboration is an improved offset estimation, which gets better as long as 
                           
                              
                                 
                                    ξ
                                 
                                 
                                    A
                                    →
                                    B
                                 
                              
                              ≈
                              
                                 
                                    ξ
                                 
                                 
                                    A
                                    ←
                                    B
                                 
                              
                           
                        .

Our goal in this work is to develop a fast and accurate offset estimation algorithm between two hosts by characterizing the actual queuing delay distribution with very few samples or probes n
                        =5 and small inter-packet separation (discussed in the next section). Our goal (accurate estimate with very few samples) contradicts the Large Deviation Principle (LDP) present on the queuing delay, which states that large deviations (with respect to the mean) will always be present if the sample period n is sufficiently large and the governing random process of the queue is stationary [20]. These deviations are needed in order to estimate the real queuing distribution function from delay measurements. Theoretically, this is achieved when n
                        >20 or when the sample variance is close to the true variance in the stationary delay (δ) process. When small number of samples are used n
                        <10 (as in our case), the Root Mean Squared Error (RMSE) between the estimated parameters and the true parameters of the distribution of δ is around 30% [12]. To get an insight of what happens with the large deviation principle in the aggregated queue of a path for n
                        =5, we analyzed the probability distribution function of the OWD variance over a week of measurements. As expected, the probability to have small variances is high (Fig. 8
                        ), becoming an additional source of error to overcome in our proposed fast offset estimation scheme. In particular, the shape parameter may get very large values (consider Eq. (14) for small values of s and large values of 
                           
                              
                                 
                                    x
                                 
                                 
                                    ¯
                                 
                              
                           
                        ). To avoid this situation, we limit the shape parameter of the fitting curve to ρ 
                        
                           
                              ρ
                              ∈
                           
                         [1.0,4.0] (as mentioned in Section 3.1), which is congruent with the observed boundary found in our OWD fitting curve experiments.

Another low-probable but important source of error to be taken into account for the offset estimation is that, a small proportion of the sample variance may fall below the reliable computer clock resolution (⩽10ms). Different scenarios may arise yielding such a small (or close to zero) variance, for example packets traverse the path without been delayed (empty queue in all hops) or packets are delayed precisely by the amount of their inter-packet separation. For very small sample variance (less than the square of the minimum resolution of the host clock), our proposed one-way offset estimation scheme described above is not robust; the fitted delay distribution becomes a very narrow quasi-exponential distribution, affecting the minimum delay estimation (it may not represent the actual traffic in the communication link). To deal with this situation, we propose an additional heuristic approach in the offset estimation scheme for each scenario, which considers the computation of the average inter-packet arrival separation:
                           
                              (17)
                              
                                 
                                    
                                       T
                                    
                                    
                                       ‾
                                    
                                 
                                 (
                                 i
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             n
                                             -
                                             1
                                          
                                       
                                       (
                                       
                                          
                                             T
                                          
                                          
                                             recv
                                          
                                       
                                       (
                                       i
                                       )
                                       -
                                       
                                          
                                             T
                                          
                                          
                                             recv
                                          
                                       
                                       (
                                       i
                                       -
                                       1
                                       )
                                       )
                                    
                                    
                                       n
                                       -
                                       1
                                    
                                 
                              
                           
                        
                     

If 
                           
                              
                                 
                                    T
                                 
                                 
                                    ‾
                                 
                              
                              ∼
                              d
                           
                         and s
                        ⩽10ms (where d is the sending inter-packet separation) there is no traffic over the link; we just take the minimum sample delay as the long term minimum delay or estimated offset (Eq. (16a)). For any other value of 
                           
                              
                                 
                                    T
                                 
                                 
                                    ‾
                                 
                              
                           
                         with s
                        ⩽10ms, we assume that the shape (ρ) of the distribution is correct and the n ordered difference between the received and departure timestamps samples (see Section 3.2) 
                           
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ̃
                                       
                                    
                                 
                                 
                                    (
                                    j
                                    )
                                 
                              
                              =
                              
                                 
                                    sort
                                 
                                 
                                    j
                                 
                              
                              (
                              x
                              (
                              i
                              )
                              )
                              ,
                              1
                              <
                              i
                              ⩽
                              n
                           
                        , belong to the center of the gamma distribution, in particular to the n expected values inside the 40–60 quantile (as depicted in the bottom plot of Fig. 9
                        ). We then compute the shape and scale parameter (Eq. (14)) to get 2n
                        +1 theoretical samples 
                           
                              
                                 
                                    y
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                              ,
                              1
                              <
                              i
                              ⩽
                              n
                           
                         (the theoretical ordered random values of the gamma distribution located at γ
                        =0, as in Section 3.2) and take the n expected values inside the 40–60 quantile. Using the probability plot technique for 
                           
                              
                                 
                                    y
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                           
                         and 
                           
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ̃
                                       
                                    
                                 
                                 
                                    (
                                    j
                                    )
                                 
                              
                           
                        , we estimate the corresponding offset value. This process is used only in the case of very small sampling variance information, given that we know the shape of the distribution.

As mentioned in Section 3.1, the main assumption of our proposed clock offset estimation scheme is that the one-way delay probes are independent and identically-distributed random variables (iid) with gamma distribution. Under this assumption the injected probes should not cause self-interference: that is two or more packets should not be present in the same router or end-node buffer during probing phase. To accomplish the independency property, a buffered packet probe in an intermediate router must be transmitted before the arriving of the next probe. Therefore, the minimum inter-packet separation d to avoid self-interference should be the amount of time required for a router or end-node to drain its entire buffer. This is not easy to quantify on the Internet, since there are many different kind of routers (hardware or software based routers) with very different processing speed and buffer sizes. Some hardware-based routers can process millions of packets per second (MPPS), while low-end buffers can do just hundreds of packets per second.

Previous OWD characterization works have used different inter-packet separation in their experiments: 30ms [27,29], 20ms [29], and 10ms [24]. Holleczek et al. [29], states that making the inter-packet separation smaller than 20ms may produce packet interference, thus their recommendation is sending packets probes every 30ms. In order to have a clue on the value of d, we ran a simple experiment on a low-end router (AMD X2 64 double core, 1.9Ghz, 1GB RAM with Linux OS) to measure the time taken to empty its buffer. The experiment consists on reading UDP packets (1500-bytes) from different saturated buffer sizes, going from the recommended optimal buffer size (0.5MB) for Internet routers with mixed traffic (see [4,3]) up to 6MB, as shown in Table 1
                        . On the average the time to empty a 0.5MB buffer size is 7.16ms, but having in mind that not all network administrators may follow this recommendation (on the contrary they increase the buffer size), we consider d
                        =30ms as the inter-packet separation boundary between packet-interference probing and independent probing (5ms higher than the average value for 1.5MB buffer size). Our fundamental reason for d
                        =30ms is based on the following observation: the offset estimation accuracy in our experiments remained constant for d
                        ⩾30ms, while the accuracy decreased for d
                        <30ms.

If the probing time is not a restriction for the estimation of the offset, then a higher value for d can be used (50ms, 100ms,…,1s, etc.). In the case of real-time multimedia transmission it is required to reduce the probing time at its minimum reliable value.

This section describes the data acquisition process and the performance of the cooperative offset estimation scheme (two-way estimate). Comparison of our results against the NTP standard [8] and current NTP updates, such as Paxson’s estimator [18], Jeske and Sampath (NTPBoot) [12], and Adhikari’s estimator [1] is presented at the end of the section.

To analyze the accuracy of our offset estimation protocol we carried out a set of experiments based on real delay values. One-minute timestamps samples in the forward and reverse directions (as in Fig. 5) were collected every 5min during 7days between different paths in the Internet (GuanajuatoMex − ChicagoUSA, GuanajuatoMex – Canada, GuanajuatoMex − SinaloaMex, and GuanajuatoMex − PueblaMex) with d
                        =30ms and n
                        =5. However, we report only one experimental site (GuanajautoMEX − ChicagoUSA), since the same relative performance is found in GAMLR and the NTP-like schemes for the rest of the paths. The complete set of data gathered in the probing phase consists of about 200,000 packets.

@&#RESULTS@&#

Performance results of the collaborative GAMLR between two hosts (Eq. (16)) are shown in Figs. 10–13
                        
                        
                        
                         (we have eliminated Adhikari’s scheme, because of its low performance in all tests). Fig. 10 shows the Root-Mean Square error (RMSE) of the offset estimation with a 95% CI for 10 different experiments. Each experiment consists of 5000 independent offset estimations, with an estimation issued every 5 round-trip packet probes for the NTP and NTP-like schemes against our collaborative offset estimation. In the experiment, we use the NTPBG offset estimation as the real offset, which represents the long run offset estimation using NTP with Bootstrap (NTPBoot [12]). Good stable RMSE values are observed in all schemes (⩽3ms), with GAMLR the one closer (error ⩽1.0ms) to the real offset (NTPBG).


                        Fig. 11 shows a time series behavior of the offset estimation for the NTP-like protocols (NTP Standard [8], Paxson [18], and NTPBoot [12]) against one-initial GAMLR estimation. Different than GAMLR, the NTP-like protocols issue a new offset estimation every packet round-trip time, therefore current estimation is an improved version of past estimations. It can be seen with the 95% CI that GAMLR (horizontal continuous line) is found to be within the range of 0.5ms with respect to asymptotic average estimation of NTPBoot (NTPBG).

To understand the offset estimation variability of GAMLR, we computed the first 25 offset estimations for the same set of data depicted in Fig. 11 and plot them together along the corresponding NTP-like estimations. As shown in Fig. 12, GAMLR shows lower variability around the true offset, which is inside the 0.5ms range at all times for this particular data set. For the other schemes to achieve the same low variability as GAMLR, they need at least 50 improved estimations (one round-trip per offset estimation), representing 50*RTT longer probing time than GAMLR, as can be clearly seen in Fig. 13. This figure represents the moving variance of Fig. 11 for a sampling window length of 20. That is, variance is computed using 20 estimations and shifting the window to the right one sample at a time. Different than NTP-like protocols, the variance of the GAMLR is computed only once considering the first 20 estimations, and drawn all along Fig. 13 as a point of reference (horizontal dashed line). GAMLR presents a more stable behavior and more accurate estimations than the NTP-like schemes. The average offset estimation error and variance of GAMLR is 2–3.7 and 5–14 times better than the NTP-like protocols respectively. On the average, GAMLR is 0.26ms away from the real offset, having a maximum absolute error of 0.8ms for this particular experimental set up (always found within the 1ms range with respect the real offset). GAMLR is designed to find a good estimate (our first estimate in Fig. 12 is <0.5ms with respect to the real offset) in just one try in ∼[3/2RTT+4d]ms, while NTP-like protocols need longer sampling periods (more than 50*RTTms longer) to get the same accuracy in the estimation.

So far, we have shown the accuracy of GAMLR without considering any specific traffic condition. We now analyze the performance of the proposed protocol under different path loads. For this, we carried out a series of experiments in this direction by selecting groups from the entire data collection for which the average load was in the following ranges: below the 20 quantile, inside the 20–80 quantile, and above the 80 quantile of the RTT in the path, i.e., light, medium, and heavy traffic condition respectively. These packets were selected by subtracting the NTPBG estimate as the true offset. The experiment was conducted in the same way as in Fig. 9, using now 200 tests per experiment. The results are shown in Figs. 14–16
                        
                        
                         with 95% CI for all the methods. GAMLR maintains again the best performance in all traffic load experiments, the estimation is within the 1ms range to the real offset. It is worth mentioning that relatively better estimates are obtained for quantiles 20–80 and ⩾80, since for quantile 20 (very light traffic condition) the delay distribution turns into a very narrow quasi-exponential distribution, as discussed at the end of Section 3A.

In all our experiments we found good accuracy offset estimation of GAMLR with respect to state of the art NTP-like protocols, considering that our sampling period is in the order of milliseconds.

@&#CONCLUSIONS AND FUTURE WORK@&#

We have introduced a new model-based clock offset estimation scheme (GAMLR) using independent one-way offset estimations between two hosts. Our scheme is non-intrusive (no kernel programming needed), simple to implement and does not require skew and drift correction as in previous NTP-like schemes. We have shown that GAMLR provides a fast and accurate offset estimation than previous NTP-like schemes with only one sample (consisting of the exchange of 5 packets in the forward and reverse directions). The proposed one way estimation of the queue delay is good enough to be used in robust multimedia communications protocols for ahead of time reaction before and during transmission.

@&#ACKNOWLEDGMENT@&#

The authors would like to thank Dr. Ashfaq A. Khokhar from the Department of Electrical and Computer Engineering-University of Illinois at Chicago for his invaluable help during the data acquisition process.

@&#REFERENCES@&#

