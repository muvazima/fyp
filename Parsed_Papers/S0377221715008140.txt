@&#MAIN-TITLE@&#A new method for elicitation of criteria weights in additive models: Flexible and interactive tradeoff


@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           FITradeoff (Flexible and Interactive Tradeoff) is a new elicitation MCDM method.


                        
                        
                           
                           FITradeoff uses the tradeoff procedure for eliciting weights of an additive model.


                        
                        
                           
                           FITradeoff uses the concept of flexible elicitation and has been built into a DSS.


                        
                        
                           
                           The nature of information required is cognitively easier for the DM to grasp.


                        
                        
                           
                           FITradeoff also reduces the amount of information required from the DM.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Multiple criteria analysis

MAVT additive model

Flexible elicitation

Interactive elicitation

Tradeoff elicitation

@&#ABSTRACT@&#


               Graphical abstract
               
                  
                     
                        
                           Image, graphical abstract
                           
                        
                     
                  
               
            

@&#INTRODUCTION@&#

One of the most relevant issues in using a multicriteria decision model is probably that of evaluating the weights of criteria (or attributes) in the aggregation procedure. This is particularly relevant for aggregation using an additive model. In practice, this aggregation procedure is the most commonly found in a multicriteria decision model (Spliet & Tervonen, 2014), for instance when selecting suppliers (Xia & Wu, 2007), or planning of metro extension lines (Hurson & Siskos, 2014). The additive model can be applied under some basic assumptions covered by many earlier studies (Fishburn, 1967; Keeney, 1972; Keeney, 1992; Keeney & Raiffa, 1976). Stewart´s survey on multicriteria methods shows some useful characteristics for an additive model (Stewart, 1992). A more recent survey considers eliciting the weights of criteria as a central issue (Riabacke, Danielson, & Ekenberg, 2012). Eisenführ, Weber, and Langer (2010) give a broad overview on weights elicitation procedures for additive models.

Previous studies on experimental analysis (Borcherding, Eppel, & von Winterfeldt, 1991; Weber & Borcherding, 1993) on the main elicitation procedures for additive models have identified some major difficulties and challenges. The results of these studies prompted our research and led to the original achievement proposals to overcome those issues that this article sets out. First of all, it has long been held that the tradeoff elicitation procedure (Keeney, 1992; Keeney & Raiffa, 1976) has a strong axiomatic foundation (Weber & Borcherding, 1993). Nevertheless, experimental studies have shown that inconsistencies have been found when applying this procedure (Weber & Borcherding, 1993).

The method proposed in this paper contributes to overcoming some of these inconsistencies. This paper proposes a flexible elicitation procedure, which collects information from the DM, and evaluates this information. The main difference from previous studies is related to the elicitation process. In flexible elicitation, incomplete or imprecise information, a priori, is not assumed. Whether the DM is or is not able to give complete information, this is evaluated in the elicitation process itself, in a flexible way. For this reason, right from the start, the flexible process seeks complete information, based on the tradeoff elicitation procedure. However, at any point further on, it may consider incomplete information in either of the following two situations: when a unique solution is found or when the DM is not able to give additional information.

The method is built into a DSS (decision support system), which uses a flexible elicitation concept that requires less effort from the DM (Decision Maker). Before presenting the method proposed and its DSS, a brief review of the related literature is presented. In order to illustrate how the method named FITradeoff (Flexible and Interactive Tradeoff) works, the DSS is used on two applications dealing with supplier selection problems (Barla, 2003; Xia & Wu, 2007).

As previously stated, eliciting a criterion weight (ki
                     ) is probably the main concern of an additive model with regard to aggregating the value functions vi(xi
                     ) over the consequences xi
                      for all criteria i (i = 1,…, n), which is represented (Fishburn, 1967; Keeney, 1972; Keeney, 1992; Keeney & Raiffa, 1976) in (1), usually assuming the normalization in (2).

                        
                           (1)
                           
                              
                                 v
                                 
                                    (
                                    x
                                    )
                                 
                                 =
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    n
                                 
                                 
                                    
                                       k
                                       i
                                    
                                    
                                       v
                                       i
                                    
                                    
                                       (
                                       
                                          x
                                          i
                                       
                                       )
                                    
                                 
                                 .
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    n
                                 
                                 
                                    k
                                    i
                                 
                                 =
                                 1
                                 
                                 and
                                 
                                 
                                    k
                                    i
                                 
                                 ≥
                                 0
                                 .
                              
                           
                        
                     
                  

In many studies the use of the term scaling constant for ki
                      is preferred to weight, considering that these parameters are not related only to the meaning of the importance of criteria, but include other issues (Edwards & Barron, 1994; Keeney, 1992; Keeney & Raiffa, 1976; Kirkwood & Corner, 1993). In this paper, these issues are also considered, although the term weight is used for the sake of simplification. Similarly, the term criteria is applied in the same sense as attributes.

With regard to the evaluation of criteria weights, many studies are found in the literature on eliciting scaling constants or weights of criteria in an additive model obtained from a DM's preferences (Eisenführ et al., 2010; Keeney, 1972; Keeney, 1992; Keeney & Raiffa, 1976; Kirkwood, 1997). Several procedures in additive models are discussed in a recent survey on the procedures for eliciting weights, which considers both value and utility functions (Riabacke et al., 2012).

Many of these elicitation procedures are concerned with obtaining complete information, in order to assess the weights. For instance, the swing procedure is one of the procedures applied (Barron & Barrett, 1996a; Barron & Barrett, 1996b; Edwards & Barron, 1994). Macbeth (Measuring Attractiveness by a Categorical Based Evaluation Technique) is a method based on a qualitative evaluation of the difference of attractiveness (Bana e Costa, De Corte, & Vansnick, 2005), in which the weights for the additive model are evaluated, thereby avoiding that the DM has to produce a direct numerical representation of preferences. Another procedure based on complete information is the tradeoff procedure, which considers tradeoffs on criteria (Keeney, 1992; Keeney & Raiffa, 1976). The next section gives more details about the tradeoff procedure, on which this paper is based, and introduces flexible and interactive approaches for using partial information.

Some elicitation procedures use a complete evaluation (Edwards & Barron, 1994; Keeney & Raiffa, 1976) and others use partial information (Barron, 1992; Barron & Barrett, 1996a; Barron & Barrett, 1996b) in order to evaluate alternatives. The SMARTER method (Edwards & Barron, 1994) is one of the propositions based on partial information.

Studies making use of information of ranked weights indicate that there are two conceptual approaches to selecting the best alternative (Edwards & Barron, 1994). The first analyzes inequalities for weights, as shown in (3), in order to eliminate inferior alternatives. The second uses surrogate weights, which should be consistent with the ranked weights. Barron and Barrett (Barron & Barrett, 1996a; Barron & Barrett, 1996b) present rank-order centroid weights (ROC), on using the second approach.

For many partial information procedures, such as for the ROC, the conditions given in (2) and the information on the ranking of the weights (k1 > k2
                      > ⋅⋅⋅ ki
                      ⋅⋅⋅ > kn
                     
                     −
                     
                        1 > kn
                     ), lead to the n-dimension weight space (φ
                        n
                     ) given by in (3):

                        
                           (3)
                           
                              
                                 
                                    
                                       
                                          φ
                                          n
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          {
                                          
                                             (
                                             
                                                
                                                   k
                                                   1
                                                
                                                ,
                                                
                                                   k
                                                   2
                                                
                                                ,
                                                
                                                   k
                                                   3
                                                
                                                ,
                                                …
                                                ,
                                                
                                                   k
                                                   n
                                                
                                             
                                             )
                                          
                                          
                                             |
                                          
                                          
                                             k
                                             1
                                          
                                          >
                                          
                                             k
                                             2
                                          
                                          >
                                          
                                             k
                                             3
                                          
                                          >
                                          ⋯
                                          >
                                          
                                             k
                                             n
                                          
                                          ;
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                n
                                             
                                             
                                                
                                                   k
                                                   i
                                                
                                                =
                                                1
                                             
                                             
                                                )
                                                ;
                                             
                                             
                                                k
                                                i
                                             
                                             >
                                             0
                                             }
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

The centroid consists of calculating the average of the extreme points of the weight space given by (3). Thus, the ROC weights are the coordinates of the centroid (Barron & Barrett, 1996a; Barron & Barrett, 1996b). The problem with such a procedure is that it may not reflect the DM´s preferences, although previous studies have shown there are many advantages to using this procedure (Barron & Barrett, 1996a; Barron & Barrett, 1996b).

With regard to the first mentioned approach for selecting the best alternative (Barron & Barrett, 1996a), which uses inequalities, it is observed that in many situations several alternatives remain which are not seen as evident choices for the best alternative (Barron & Barrett, 1996a; Kirkwood & Corner, 1993). Other approaches use partial ranking by clusters, but many alternatives remain in the best cluster (Kirkwood & Sarin, 1985). The PAIRS method (Salo & Hämäläinen, 1992) applies interval judgments, indicating a range for the weights. These are different approaches, which are unrelated to the context of the tradeoff elicitation procedure.

Regarding the use of imprecise or partial information, the literature presents quite a few of these approaches (Barron, 1992; Hazen, 1986; Li et al., 2012; Lofti, Stewart, & Zionts, 1992; Mármol, Puerto, & Fernández, 2002; Mustajoki, 2012; Park, 2004; Salo & Hämäläinen, 2001; Salo & Punkka, 2005; Steuer, 1976). Jiménez, Ríos-Insua, and Mateos (2003) presented a DSS to enable decisions with imprecise parameters for additive and multiplicative multi attribute utility functions, admitting imprecision for weights and utilities in terms of ranges.

Thus, eliciting single values may not be an easy task, which has inspired several approaches such as that presented by Danielson, Ekenberg, Idefeldt, and Larsson (2007) to deal with decision analysis problems that require a tool for enabling interval probabilities and interval weights for additive aggregation processes. The Cardinal Rank Ordering Step (CROC) used by Danielson et al. (2007) is detailed in Danielson, Ekenberg, Larsson, and Riabacke (2014).

Another kind of procedure is based on the DM making a holistic evaluation of a few alternatives, which are used to infer the parameters related to the additive model. The UTA (Utilité Additive) method (Jacquet-Lagréze & Siskos, 1982) is one of these procedures.

Although this section is not intended as an exhaustive literature review on partial information for building additive models, a framework is presented in Fig. 1
                      that summarizes different types of approaches introduced for partial information in the elicitation procedure. This framework considers three main steps, preference statements by the DM, forms of partial information and a final synthesis step for generating the output by dealing with partial information for screening alternatives. The second step represents an interface between the two other steps, and the structure of information applied. Although it is not explicit in Fig. 1, regression analysis may be applied in the synthesis step, which may be needed for holistic judgments, which may also apply LPP models.

The procedures mentioned above may be classified based on this framework. For instance, using the framework of Fig. 1, one can see that in the SMARTER procedure, the preference statements by the DM are given based on a structured elicitation process, all of this information is given at once, and a fixed process is applied. The form of partial information used is the ranking of weights. The final step of synthesis which generates the output by dealing with partial information is based on surrogate weights.

The concept of a dominance relation should be considered at this point. Let us first consider the concept as given by Greco, Matarazzo, and Slowinski (2008). They apply the concept of a dominance relation to additive models, using a set of pairwise comparisons on a subset of reference alternatives, such as the preference information provided by the DM. In another study, Greco, Mousseau, and Slowinski (1999) apply a different concept of a graded dominance relation in a different context, since it is used to build up a rough approximation of a preference relation. In that case, a grade is considered, such that, one can say that x positively dominates y by degree h with respect to the set of criteria. Weber (1987) defines several dominance relations in order to approach incomplete information in additive models. Yang and Wang (2013) consider a semantic dominance concept for dealing with incomplete preference information. Mustajoki and Hämäläinen (2005) also consider the dominance relation concept applied in additive models. They use interval judgments in order to handle preferential imprecision in an additive model based on SMART and SWING weighting methods. Eum, Park, and Kim (2001) considered dominance and potential optimality as two criteria in order to check whether or not each alternative is outperformed for a fixed feasible region denoted by constraints.

A few studies were conducted anchored on experimental analysis of the main elicitation procedures (Weber & Borcherding, 1993). Many other studies consider several situations and make comparisons between different approaches for eliciting weights (Borcherding et al., 1991; Kirkwood & Corner, 1993; Salo & Hämäläinen, 1992). Several issues are raised, such as the drawback of traditional techniques, especially on account of the elicitation process being tedious and time consuming (Salo & Hämäläinen, 1992). One of the critical aspects of the tradeoff procedure is that the DM is required to make the adjustment for the indifference between the two consequences (Weber & Borcherding, 1993). Experimental studies have found inconsistencies for 67% of the subjects, who applied this procedure (Borcherding et al., 1991; Weber & Borcherding, 1993).

An important feature of the FITradeoff elicitation procedure is to avoid that the DM has to make adjustments for the indifference between two consequences, which is a critical issue on the traditional tradeoff procedure (Weber & Borcherding, 1993). This is accomplished in the FITradeoff by using partial information. Using the framework of Fig. 1, for the FITradeoff procedure, the DM gives preference statements based on a structured elicitation process. All information is given interactively and a flexible process is applied. The forms of partial information used are rankings or bounds of weights, obtained indirectly according to the tradeoff approach. The output is generated in the synthesis step based on LPP models.

Before introducing FITradeoff, a brief, mostly qualitative, description of its logic and the rationale for using this process is presented, including a few related issues from previous studies. Then, basic aspects are presented of the procedure for eliciting weights employing tradeoffs (Keeney, 1992; Keeney & Raiffa, 1976), since this is the basis for FITradeoff.

The concept of flexible elicitation comprises the context of building a multicriteria value model. This flexibility means that the elicitation procedure can be easily changed and adapted to different conditions and circumstances as and when they occur. That is, the way in which the elicitation procedure is implemented does not follow all steps that the standard procedure requires. Instead, the steps of the procedure are chosen according to the different conditions that arise during the process, in such a way that the DM is expected to provide less information than in the standard procedure.

The flexibility of the DSS consists of systematically evaluating the possibility of finding a solution for the problem while the elicitation process is being conducted. This means that the elicitation procedure may be suspended as soon as a solution is found with the partial information obtained during this process. This partial information is based on preference (P) relations in order to find a solution, which in most cases can be achieved by using this partial information obtained from the DM up to that point, which is then applied to solve a linear programming problem (LPP).

One of the advantages of using the flexible elicitation process is that it requires less effort from the DM and consequently may lead to less inconsistency during the elicitation process. Since it is assumed that as the DM is required to make less effort, this is expected to lead to fewer errors in the processes for specifying preferences. However, this has not been confirmed by experimental studies, which should be conducted in another study. That is, the simplification introduced with this method is supposed to reduce errors, although this should be demonstrated based on behavioral decision making experiments.

Some kind of flexibility has been introduced in previous studies. Dias and Climaco (2000) use tolerance that provides the DM with a more flexible manner for dealing with preference statements. In PRIME method (Salo & Hämäläinen, 2001), the DM can revise earlier preference statements. In RICH method (Salo & Punkka, 2005), after examining results, the DM may either: choose to accept one of the alternatives pre-selected, or continue with the specification of further preference information. The flexibility proposed in this paper is consistent with the structure of preference elicitation of the tradeoff procedure. For this reason there is some kind of fixed pattern to follow. The flexibility uses partial information in a few different ways. The method may follow most of the classical tradeoff procedure, although this is less likely to occur. This may happen only if the DM is willing to do that and when it is necessary. The method may use partial information to give a result completely similar to that of the classical tradeoff procedure. Another way is the use of partial information in the general sense, with partial results, and so forth. Following this fixed pattern avoids leaving the DM free to make any kind of preference statements, which may be inconsistent with the axiomatic structure of the additive model.
                     

The approach proposed in the FITradeoff method follows the objectives of that proposed by Holloway and White III (2003) who considered that there is a cognitive cost for each question answered by the DM, thus the cognitive effort should be reduced. White III and Holloway (2008) based on a Markov decision process model for the elicitation process proved that there are conditions that guarantee the existence of a question-response policy that enables the choice of the most preferred alternative in a finite number of questions.

Thus, the aim is to provide an elicitation process that enables a decision process to be built with less information than is required by the standard tradeoff procedure. Throughout the FITradeoff steps a weights vector space is considered, which is updated with DM responses in order to reduce the subset of potentially optimal alternatives. The concept of a potentially optimal alternative (Park, 2004; Sarabando & Dias, 2009) is given in Definition 1, according to the context of this study, and it relates to the alternative, the value of which, is greater than the value of any other alternative, for at least one vector of weights in the weight space.

In the tradeoff procedure, the DM compares consequences, by considering tradeoffs on criteria (Keeney, 1992; Keeney & Raiffa, 1976). In one of the steps the DM is asked to choose between two key consequences. Both consequences have the best outcome (bi
                        ) for one of the criteria and the worst outcome (wi
                        ), for the others.

Let A, B and C be three different consequences. Consequence A has the best outcome (bi
                        ) for the criteria 1 (represented in Fig. 2 as black circles) and the worst outcome (wi
                        ), for the others (represented in Fig. 2 as white circles). The value function is set in such way that vi(bi) = 1 and vi(wi)  = 0. Hence, applying the additive value function given in Eq. (1) the value of consequence A is given by v(A)  = k1v1(b1)  = k1
                        . Consequence B has the best outcome for criterion 2. Thus, the value of consequence B is given by v(B)  = k2v2(b2)  = k2
                        . Now, let us consider a strict preference relation P, such that for the DM may state either: A is preferred do B (APB) or B is preferred do A (BPA). Therefore, assuming that the DM prefers consequence B to A (BPA) then, k2 > k1
                        ; otherwise, k1 > k2
                        . This part of the procedure obtains the order of the weights k
                        i, using the preference relation P.

The subsequent steps consist of obtaining indifference relations (I) in order to find the value of ki
                        . These indifference relations are applied to pairs of consequences of the kind shown in Fig. 2. Let xi
                           I
                         denote the outcome of criterion i for which the indifference is obtained. In this case, consequence C has the outcome x2
                           I
                         (represented in the Figure as a grey circle) for criterion 2 and the worst outcome wi
                         for the others (represented in the Figures as white circles), which means that v(C)  = k2v2(x2
                           I), based on (1). The DM is asked to inform the outcome x2
                           I
                        , in criterion 2, which makes the consequences A and C indifferent (AIC). Since the DM is able to indicate the value x2
                           I
                        , then, the following relation is established v(A)  = v(C). Consequently, k1
                         = k2v2(x2
                           I). Hence, v2(x2
                           I) can be applied to compute the ratio between weights, k1/k2
                        . In addition, it should be noticed that if a non-linear value function vi(xi) is considered for computing the weights, then this value function modifies the ratio ki+1/ki
                        , compared with the possibility of having vi(xi) be a linear function, since this ratio depends on the value of vi(xi 
                           I). Considering (2), n−1 similar equations are required in order to find the values of the weights.

The values of x
                        2′ and x
                        2′′ in consequence C are respectively the upper and lower limit for x
                        2
                        I, thus, each xi
                        
                        I is limited by a xi
                        ’ and a xi
                        ’’, which can be assessed from the DM, by the proposed flexible elicitation procedure. This concept will be explored in the next section.

The elicitation in FITradeoff seeks to obtain xi′ and xi′′, based on the DM´s preference relation P judgments. The proposition of this method comes from the assumption that either:

                           
                              •
                              the DM is not able to specify xi
                                    I
                                  (see Fig. 3
                                 ), or

it may not be reliable to assume that this information can be obtained in a consistent way from the DM.

Therefore, the specification of xi′ and xi′′, as illustrated in Fig. 3, can be used instead of requiring the DM to specify xi
                           I
                        . Since the value function vi
                         is assumed to be in the interval (0,1), it can be seen that:

                           
                              (4)
                              
                                 
                                    1
                                    =
                                    
                                       v
                                       i
                                    
                                    
                                       (
                                       
                                          b
                                          i
                                       
                                       )
                                    
                                    >
                                    
                                       v
                                       i
                                    
                                    
                                       (
                                       
                                          
                                             
                                                x
                                                i
                                             
                                          
                                          ′
                                       
                                       )
                                    
                                    >
                                    
                                       v
                                       i
                                    
                                    
                                       (
                                       
                                          
                                             
                                                x
                                                i
                                             
                                          
                                          I
                                       
                                       )
                                    
                                    >
                                    
                                       v
                                       i
                                    
                                    
                                       (
                                       
                                          
                                             
                                                x
                                                i
                                             
                                          
                                          
                                             ′
                                             ′
                                          
                                       
                                       )
                                    
                                    >
                                    
                                       v
                                       i
                                    
                                    
                                       (
                                       
                                          w
                                          i
                                       
                                       )
                                    
                                    =
                                    0
                                 
                              
                           
                        
                     

From now on, for the sake of simplification of notation, let us assume that the criteria are ordered, so k1 > k2
                         > ⋅⋅⋅ ki
                         ⋅⋅⋅ > kn
                        
                        −
                        
                           1 > kn
                        . The specification of either xi′ or xi″ is obtained from the preference relation P, as shown in Fig. 3. Therefore, the DM can specify xi’ such that YPX (Consequence Y is preferred to X). Also, the DM can specify xi’’ such that XPZ (Consequence X is preferred to Z). Thus, v(Y) > v(X) > v(Z). Hence, since that v(X)  = k3, v(Y)  = k2v2(x2′) and vi(xi′) > vi(xi
                           I), then, k2v2(x2′) > k3
                        . Similarly, k2v2(x2″) < k3
                        .

A more general relation can be obtained for vi(xi′) and vi(xi″), given any criterion i:

                           
                              (5)
                              
                                 
                                    
                                       k
                                       i
                                    
                                    
                                       v
                                       i
                                    
                                    
                                       (
                                       
                                          
                                             
                                                x
                                                i
                                             
                                          
                                          ′
                                       
                                       )
                                    
                                    >
                                    
                                       k
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                    ,
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       k
                                       i
                                    
                                    
                                       v
                                       i
                                    
                                    
                                       (
                                       
                                          
                                             
                                                x
                                                i
                                             
                                          
                                          
                                             ′
                                             ′
                                          
                                       
                                       )
                                    
                                    <
                                    
                                       k
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                 
                              
                           
                        
                     

This means that:

                           
                              (7)
                              
                                 
                                    
                                       v
                                       i
                                    
                                    
                                       (
                                       
                                          
                                             
                                                x
                                                i
                                             
                                          
                                          ′
                                       
                                       )
                                    
                                    >
                                    
                                       k
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                    /
                                    
                                       k
                                       i
                                    
                                    ,
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       v
                                       i
                                    
                                    
                                       (
                                       
                                          
                                             
                                                x
                                                i
                                             
                                          
                                          
                                             ′
                                             ′
                                          
                                       
                                       )
                                    
                                    <
                                    
                                       k
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                    /
                                    
                                       k
                                       i
                                    
                                    .
                                 
                              
                           
                        
                     

FITradeoff criteria weights develop from a more systematic examination of this information obtained by flexible elicitation, and seek a weight space described by (9). This is a sub-space of (3).

                           
                              (9)
                              
                                 
                                    
                                       φ
                                       n
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            k
                                                            1
                                                         
                                                         ,
                                                         
                                                            k
                                                            2
                                                         
                                                         ,
                                                         
                                                            k
                                                            3
                                                         
                                                         ,
                                                         …
                                                         ,
                                                         
                                                            k
                                                            n
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      |
                                                   
                                                   
                                                      ∑
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      n
                                                   
                                                   
                                                      
                                                         k
                                                         i
                                                      
                                                      =
                                                      1
                                                   
                                                   ;
                                                   
                                                      k
                                                      i
                                                   
                                                   ≥
                                                   0
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      k
                                                      1
                                                   
                                                   
                                                      v
                                                      1
                                                   
                                                   
                                                      (
                                                      
                                                         
                                                            
                                                               x
                                                               
                                                                  ′
                                                                  ′
                                                               
                                                            
                                                         
                                                         1
                                                      
                                                      )
                                                   
                                                   <
                                                   
                                                      k
                                                      2
                                                   
                                                   <
                                                   
                                                      k
                                                      1
                                                   
                                                   
                                                      v
                                                      1
                                                   
                                                   
                                                      (
                                                      
                                                         
                                                            
                                                               x
                                                               ′
                                                            
                                                         
                                                         1
                                                      
                                                      )
                                                   
                                                   ;
                                                   …
                                                   ;
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      k
                                                      i
                                                   
                                                   
                                                      v
                                                      1
                                                   
                                                   
                                                      (
                                                      
                                                         
                                                            
                                                               x
                                                               
                                                                  ′
                                                                  ′
                                                               
                                                            
                                                         
                                                         i
                                                      
                                                      )
                                                   
                                                   <
                                                   
                                                      k
                                                      
                                                         i
                                                         +
                                                         1
                                                      
                                                   
                                                   <
                                                   
                                                      k
                                                      i
                                                   
                                                   
                                                      v
                                                      1
                                                   
                                                   
                                                      (
                                                      
                                                         
                                                            
                                                               x
                                                               ′
                                                            
                                                         
                                                         i
                                                      
                                                      )
                                                   
                                                   ;
                                                   …
                                                   ;
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      k
                                                      
                                                         n
                                                         −
                                                         1
                                                      
                                                   
                                                   
                                                      v
                                                      1
                                                   
                                                   
                                                      (
                                                      
                                                         
                                                            
                                                               x
                                                               
                                                                  ′
                                                                  ′
                                                               
                                                            
                                                         
                                                         
                                                            n
                                                            −
                                                            1
                                                         
                                                      
                                                      )
                                                   
                                                   <
                                                   
                                                      k
                                                      n
                                                   
                                                   <
                                                   
                                                      k
                                                      
                                                         n
                                                         −
                                                         1
                                                      
                                                   
                                                   
                                                      v
                                                      1
                                                   
                                                   
                                                      (
                                                      
                                                         
                                                            
                                                               x
                                                               ′
                                                            
                                                         
                                                         
                                                            n
                                                            −
                                                            1
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                       }
                                    
                                    .
                                 
                              
                           
                        
                     

According to the performance of alternatives in the weights space given by (9), these alternatives are classified into three different situations: potentially optimal, dominated, or optimal. Hence, some definitions are now given in order to address some preliminary analysis, assuming that each alternative aj
                         has a consequence vector xj = (x1, x2, … , xi, … xn), evaluated by Eq. (1). These definitions could be associated to decision rules, so that the set of alternatives could be further analyzed. However, this will be let for a future work, since the focus of this wok follows another direction.


                        
                           Definition 1
                           a potentially optimal alternative, is an alternative, the value of which, as given by (1), is greater than or equal to the value of any other alternative j from the whole set of alternatives, for at least one vector of weights in the whole weight space, given by Eq. (9). In most cases, it is expected that the values of potentially optimal alternatives are greater than (strictly) any other alternative. Although this does not happen often, they may happen to be equal to any other alternative j, in which case both alternatives are potentially optimal.


                        
                           Definition 2
                           a dominated alternative, is an alternative, the value of which, as given by (1), will be lesser than the value of at least one of the alternatives from the subset of potentially optimal alternatives, whatever the vector of weights in the whole weight space is, given by Eq. (9). A dominated alternative is a not potentially optimal alternative. It should be noticed that the usual definition for 'dominance relation' is related to a pairwise relation. Although in this definition, the 'dominance relation' is considered for the alternative in question compared with each potentially optimal alternative, an alternative may be considered dominated, even if it is not dominated by all potentially optimal alternatives.


                        
                           Definition 3
                           an optimal alternative, is an alternative, the value of which, as given by (1), is greater than the value of any other alternative j from the whole set of alternatives, whatever the vector of weights in the whole weight space is, given by Eq. (9). The optimal alternative dominates each one of the alternatives j from the whole set of alternatives, in the whole weight space in (9).

The DSS seeks an alternative from the set of alternatives that has the maximum value given in (1) and taking into account the weight space given by (9). The DSS conducts the elicitation process in a flexible way, so that only essential information is required from the DM. That is, a preference relation P, in order to specify xi′ and xi′′, in a broader range (xi′–xi″), sufficient enough to obtain a unique solution.

It is worthwhile to observe that, in this method, no question is put to the DM directly related to weights, even those regarding the ratio between weights or interval for weights. On the other hand, using the mathematical structure of the tradeoff procedure a ratio relation between weights can be obtained, based on vi(xi
                           I). Thus, the limits for this ratio can be determined by vi(xi′) and vi(xi″). This leads to the possibility of computing an interval for weights. Therefore, this ratio (or interval) information on weights is obtained indirectly from the DM. The questions directly put forward to the DM involves a pair of consequences, that evaluates the values for xi′ or xi′′, such as shown in Fig. 3. That is, the preference relation P is obtained, leading to the ratio relation formulated by the inequalities indicated in (7) and (8).

Moreover, direct information on ratio or interval of weights does not seem to be compatible with the purpose of the tradeoff model. In other words, the tradeoff model takes into account the concept of scaling constants rather than weights as degrees of importance (de Almeida et al., 2015). That is, the DM thinks about choices among consequences as illustrated in Fig. 3; that is why the method is classified as an indirect procedure, since the weights are obtained by the equations system, related to the DM's preferences on these consequences. On the other hand, information on ratio or interval of weights is cognitively more compatible with outranking methods (Roy, 1996), in which the meaning of the structure of the weights is directly associated with their degree of importance of the criteria (de Almeida et al., 2015).

An imprecision may be considered in most traditional procedures for full information elicitation related to additive model, such as: tradeoff or swing. There is a chain of ratio relation of criteria weights between every neighboring pair of criteria in the structure of the ordered weights. In the classical tradeoff procedure, this information is based on the indifference relation I, requiring the DM to specify xi′. The proposed method does not use xi
                           I
                        . It uses only a range for this relation (xi’ and xi’’). Therefore, since these ratios of criteria weights (ki+1/ki
                        ), based on xi
                           I
                         is not collected, the proposed method may be more dependable than those of full information. This is due to the odds that this interval (xi’ and xi’’) may contain the real xi
                           I
                         not collected. In other words, with full information (if exact value for xi
                           I
                         were collected), the procedure may be inaccurate, since imprecision may be considered in this process.

The main assumptions of the FITradeoff model are the same as those of the classical tradeoff elicitation procedure (Borcherding et al., 1991; Fishburn, 1967; Keeney, 1972; Keeney, 1992; Keeney & Raiffa, 1976). It is valuable to emphasize that the following assumptions and information are required for FITradeoff:

                           
                              •
                              The weights are normalized, so (2) is applied;

It is assumed that ranked weights are obtained

It is assumed that the DM can specify xi′ and xi″, as per (7) and (8).

Regarding preferences, the model incorporates criteria (or attributes) with consequences xi
                                  (outcomes) monotonically either: increasing or decreasing.

Also, regarding the input information on consequences, the criteria may be either: continuous or discrete.

The combination of both kinds of preferences (increasing or decreasing) for xi
                         in (1) is given by vi(xi
                        ), so that whichever is the case: vi(bi)  = 1 and vi(wi)  = 0. Explicitly, for xi
                         monotonically decreasing, the minimum value of xi
                         = bi
                         (most desirable) and the maximum value of xi
                         = wi
                         (least desirable). For both monotonically increasing and decreasing consequence xi
                        , the convention is the same, such that: xi
                        ′ P xi
                        ″.

For discrete criteria, instead of a value function, vi(xi
                        ) represents the value of a discrete consequence xi
                        . In these cases few options are available for xi
                        ′, xi
                        ″. For instance, let xi
                         be a discrete criterion with five levels: y1 P y2
                         P y3
                         P y4
                         P y5
                        . Then, bi
                         = y1
                         and wi
                         = y5
                         and only three options are considered for xi
                        ′ and x″: y2, y3, y4
                        .

The next section shows the elicitation process, in which the weight space in (9) is obtained.

The DSS system works as illustrated in Fig. 4, which presents the procedure and illustrates how the main issue raised in this method, associated with its flexibility, works.

Step 1 consists of an intra-criteria evaluation, thereby obtaining the value functions vi(xi) for each criterion i. In many cases this may be a linear function, as suggested by Edwards and Barron (1994). In that case, it should be ensured that the proper normalization procedure is applied, since the elicitation procedure in an additive model depends on the scale adopted, which is considered in the equations of the model for computing the weights, as shown in Section 3.2. For the procedure applied in this paper the scale is from 0 to 1, in which 0 and 1 respectively represent the minimum and the maximum value performances in the criterion.

In this Step the output is the value function vi(xi
                           ), obtained as per procedures well established in the literature (Keeney, 1992; Keeney & Raiffa, 1976; Riabacke et al., 2012). The input is the outcome or performance of each criterion (xi
                           ) for each single alternative, in which the value function vi(xi
                           ), may be applied. There are either of two possibilities for the DSS: (a) it supports the elicitation of vi(xi
                           ); or (b) it support the input process for parameters of standard vi(xi
                           ) functions.
                        

Step 2.1 consists of eliciting the order of values for ki
                              . The steps 1 and 2.1 are important preliminary parts of the method proposed, just as they are in many previous methods that have been proposed in the literature (Barron & Barrett, 1996a; Barron & Barrett, 1996b; Keeney, 1992; Keeney & Raiffa, 1976).

In step 2.1, ties in the criteria used may be identified. In this case, one of the criteria should be chosen to be used in the assessment. The choice of which criterion i is to be used in the assessment is based on which criterion has an outcome which is easier for the DM to compare. The DSS presents a note to the DM, asking him/her to choose one of the criteria. The DM is instructed to consider a few issues related to the ability of interpretation for each outcome. For instance, an objective outcome (quantitative; for instance, cost in a known monetary unit) may be preferred to a subjective one (qualitative; for instance, company image). An analyst can give additional support on this task. If a tie is not identified in step 2.1 (that is, the DM may not perceive at this step that two criteria have the same weights), it could be identified in step 3.2. However, it seems that it would be rare to identify ties in that step, since they may most probably be found in step 2.1. In any case, the DSS adapts the LPP for this condition.

Step 2.2 tries to solve the problem with the available weight space, similar to that shown in (3), but in which strict inequality is replaced by a greater than or equal condition in the LPP model. This is equivalent to assuming that vi(xi′)  = 1 and vi(xi″)  = 0 in (9), for all i.

If a unique solution is not found, step 3.1 is started; otherwise, the process is finalized. In the finalization step, the ranges of weights supporting the solution is computed and produced in a report with the final recommendation.

Steps 3.1–3.4 are the main parts of FITradeoff (Fig. 5). Nevertheless, the previous steps and step 2.2 play an important role in this concept of a flexible elicitation process. Although a situation may be found, in which a unique solution is found in Step 2.2, as shown in the first example taken from the literature on supplier selection, such situations are infrequent. Sarabando and Dias (2009) tested several decision rules to evaluate the performance of these rules in problems involving MAUT/MAVT with 5, 10 and 15 criteria and 5, 10, 15, 25 and 50 alternatives based on a specific weight vector defined by a ROC approach. From the study by Sarabando and Dias (2009), it is possible to infer on how the information elicited from DM to define the space of weights may perform based on the structure of the set of alternatives in terms of dominance relations. They found that for problems with 5 criteria more than 50% of the alternatives from their experiment are dominated on average, and this number increases as the number of alternatives for the problem increases (5, 10, 15, 25, 50). When the number of criteria increases (5, 10, 15), the average number of dominated alternatives decreases.

Thus, Step 2.2 is relevant in order to evaluate a rare situation, just in case, if there is a problem that has above the average number of dominated alternatives based on the space of weights defined by the ranking of the weights. Thus, as more information is elicited in the next steps, and the space of weights is reduced, more alternatives can be cleared as dominated alternatives.

Steps 3.1 to 3.4 are the main parts of the proposed method, which are illustrated in Fig. 5. In these subsequent steps, the values for xi′ and xi″are elicited. These steps are run until either: a unique solution is found, or the DM chooses not to give additional information.

Step 3.1 is a preparation for collecting inputs from the DM. In this step the output is a new set of values for xi′ or xi’’, which is presented to the DM, in the subsequent step. First of all an initial set of vectors for xi’ and xi’’ has been set at step 2.2, such that vi(xi′)  = 1 and vi(xi″)  = 0.

In this Step a computation is conducted in order to prepare the next question to the DM, so as to set a value for xi
                              , in order to evaluate the value for xi′ or xi″. The procedure for choosing a value for xi
                               is a heuristic, in which the objective is to minimize the number of questions to the DM, thus making the procedure easier.

It should be noted that the heuristic depends on the distribution of weights. Two basic patterns are considered for this distribution: a modal pattern and a uniform pattern. In the former the weights have a concentration of first ranked criteria weights with higher values and then the values decay very much for other criteria, since they are normalized and sum up to 1. In the latter the weights have values closer to a uniform distribution. For a uniform distribution the weights are equal to 1/n.

In order to choose the heuristic, the following evaluation of distribution of criteria weights is introduced. The DM is asked to compare the first and the last ordered criteria weights by choosing between the following consequences: bn
                               and x1
                              , such that v1
                              (x1
                              )  = 0.5, in a context similar to Fig. 3 (xi
                               = wi
                              , for any other criteria). Considering Eqs. (7) and (8), if the DM chooses consequence with bn
                              , it means that the ratio kn/k1 > 0.5, indicating a distribution of weights with a uniform pattern. Otherwise, kn/k1 < 0.5 and the distribution has a modal pattern. For instance, if kn/k1
                               = 1, then the weights have a uniform distribution. At first, this evaluation was introduced to choose the heuristic. Subsequently, it was found useful to include this information with the inequality obtained, as a new constraint in the LPP model, in order to possibly shorten the process.

Let us consider a heuristic for the modal pattern. This heuristic considers the range = vi(xi′) – vi(xi″), for all criteria. Thus, the criterion with the maximum range is chosen for the subsequent question which considers the consequence associated with xi
                               such that v(xi) = (v(xi′)- v(xi″))/2. This means that this value is the midpoint of the range for that particular criterion. It is expected to be cognitively easier for the DM to work with a larger range (xi′–xi″). It also considers the fact that the narrower the range (xi′–xi″), the more probable it is that a unique solution will be found. At the beginning of this Step, the range is the same for all criteria. Hence, the DSS begins with the criteria with the highest weights (i = 1). Therefore, the initial value of xi
                               is such that v(xi)  = 0.5v(bi) = 0.5, since v(bi)  = 1.

For the uniform pattern, a more appropriate heuristic is applied, changing the first two questions. These two questions consider the value of xi
                               closer to the best consequence bi
                              , which is illustrated in the second application given in Section 4.2. In that case, in the first question v(xi) = 0.75v(bi)  = 0.75. Then, if the DM's answer confirms the assumed distribution of weights, then, a second question is put on the same pair of criteria, such that, v(xi) = 0.875v(bi)  = 0.875. These two kinds of questions are subsequently applied to the first half pair of ordered criteria. After that, the basic rule of the previous heuristic is applied, considering xi
                               such that v(xi)  =  (v(xi′)- v(xi″))/2. Comparing this procedure with the previous one, it skips the first question (with v(xi) = 0.5v(bi)). The analysis of these heuristics and other possibilities should be the core for another study since they may have an important impact in order to shorten the process.

The heuristic for a discrete outcome is slightly different. As previously mentioned in this case there are a few options for xi’ and xi’’ and the heuristic applied consists of choosing x
                                 i = (xi′–xi″)/2, if the number of levels in the discrete scale is odd. Otherwise, two options in the middle are available and the greater value is arbitrarily chosen. For instance, for a discrete scale with six levels: y1 P y2 P y3 P y4 P y5 P y6
                              . Then, bi
                               = y1
                               and wi
                               = y6
                               and only four options are considered for: xi
                              ′ and xi
                              ″: y2, y3, y4, y5
                              . Then, xi
                               = y3
                              .

The result of Step 3.1 led the process to Step 3.2, which initiates a new phase in the interaction with the DM.

Step 3.2 continues the process of elicitation by putting questions that ask the DM to choose between two consequences, taking into account the new consequence xi
                               for evaluation of xi′ or xi″.

The DM may answer in one of the following ways (see Fig. 5): “Preference answer”, “see partial results”, “No answer”, or “inconsistency”.

For the option “Preference answer”, the DSS shows an illustration similar to Fig. 2 (in which B is considered instead C), and the DM has three options:

                                 
                                    •
                                    Consequence A, in which case the DSS sets xi″ = xi
                                       ; or

Consequence B, in which case the DSS sets xi′ = xi
                                       ; or

Indifference between A and B, in which case the DSS sets xi
                                          I
                                        = xi
                                       .

If the DM is able to choose one of three options above, which is expected to happen in most cases, then Step 3.3 is conducted and the LPP model (10) will run.

If the DM chooses “see partial results”, the intermediate result given in Step 3.3 (in the previous cycle) is presented. In this option, the DM can see the subset of potentially optimal alternatives. This may support the DM in making a choice of either: proceeding with the flexible elicitation (do not finalize, as per Fig. 5, in Step 3.2) or reducing the amount of information given, by choosing ‘finalize’, as per Fig. 5. For instance, if the DM considers that the small subset of potentially optimal is adequate, at some point thereafter, he/she may choose to stop the process and accept the recommendation given for subsequent analysis of these few alternatives.

The DM may give a different output in Step 3.2, choosing: “No answer”. It should be noted that the DM is asked to answer with a choice, only if he/she is in no doubt about his/her response on comparing the consequences. If the DM hesitates in giving an answer, the process goes either to Step 3.1 or 3.4. If the DM does not know the answer for this criterion, the process goes back to Step 3.1 in order to compute another question, and considers the next set of criteria. If this happens again for all sets of criteria, then the process goes to Step 3.4, which is regarded as the finalization. This finalization is given using partial information, considering the subset of alternatives that can be considered for the present set of weights. Although this may be considered a rare situation, it still gives a partial solution compatible with the partial information that the DM can provide.

Finally, the DM may choose to give an indication of a possible “inconsistency”. Given the way in which the questions are designed, an inconsistent answer by the DM, in this step, is not possible, since the DSS puts questions that systematically seek to reduce the range = vi(xi′)–vi(xi″), in such way that it pursues a specific direction without redundancy. However, an option for “inconsistency” is included in the DSS (see Fig. 5), so the DM can evaluate if the questions are failing to get closer the value of indifference xi
                                 I
                               and if they are going in the wrong direction. This situation may occur, should a previous answer have been wrong. That is, if the DM chooses this option, it is because she/he feels that she/he gave a wrong answer earlier, in which case, as shown in Fig. 5, the DM may give some explanation and report this kind of inconsistency. Also, the DM can be assisted by an analyst in such a situation.

Step 3.3 consists of trying to solve the problem regarding the present weight space, which is based on (9), given the information so far available; that is, the vectors for xi′ and xi″. The alternatives are compared in order to be classified as per definitions 1, 2 and 3, using (10), as given in the next section. If a unique solution is found, then the finalization step 3.4 is conducted. Otherwise, the dominated alternatives are eliminated. Then, all alternatives found to be potentially optimal are considered in the subsequent steps and the process returns to step 3.1, until a unique solution is found.

At this point the DSS may run several cycles of Steps 3.1, 3.2 and 3.3, before finding a unique solution in the test conducted in Step 3.3 (see Fig. 5) and then goes to finalization.

In order to analyze the set of alternatives in the weights space at the Steps 2.2 and 3.3 of the above process, the DSS classifies the alternatives into three different situations: potentially optimal, dominated, or optimal.

The subset of potentially optimal alternatives has a key role in the flexible elicitation process. During the elicitation process, in which the weight space is reduced, any one of these alternatives may become either: a dominated alternative or the optimal alternative. As long as there is more than one potentially optimal alternative, the elicitation process continues to ask the DM questions, in order to reduce the weight space.

Therefore the DSS model consists of reducing the weight space by asking the DM for new preference relations P as long as necessary in order to find a unique solution, that is, a situation in which the optimal alternative is found. In the operational process this solution is found when the subset of potentially optimal alternatives has only one element.

In order to do this, the following LPP is applied for each alternative j, considering consequences xij
                        , for criterion i and alternative j:

                           
                              (10)
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      M
                                                      a
                                                      x
                                                   
                                                   
                                                      
                                                         k
                                                         1
                                                      
                                                      ,
                                                      
                                                         k
                                                         2
                                                      
                                                      ,
                                                      …
                                                      ,
                                                      
                                                         k
                                                         n
                                                      
                                                   
                                                
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                                
                                                   
                                                      k
                                                      i
                                                   
                                                   
                                                      v
                                                      i
                                                   
                                                   
                                                      (
                                                      
                                                         x
                                                         
                                                            i
                                                            j
                                                         
                                                      
                                                      )
                                                   
                                                
                                                ,
                                                j
                                                =
                                                1
                                                ,
                                                2
                                                ,
                                                …
                                                ,
                                                m
                                             
                                          
                                       
                                       
                                          
                                             
                                                s
                                                
                                                   .
                                                   t
                                                
                                                .
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                                
                                                   
                                                      k
                                                      i
                                                   
                                                   
                                                      v
                                                      i
                                                   
                                                   
                                                      (
                                                      
                                                         x
                                                         
                                                            i
                                                            j
                                                         
                                                      
                                                      )
                                                   
                                                
                                                ≥
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                                
                                                   
                                                      k
                                                      i
                                                   
                                                   
                                                      v
                                                      i
                                                   
                                                   
                                                      (
                                                      
                                                         x
                                                         
                                                            i
                                                            z
                                                         
                                                      
                                                      )
                                                   
                                                
                                                ,
                                                z
                                                =
                                                1
                                                ,
                                                2
                                                ,
                                                …
                                                ,
                                                m
                                                ,
                                                z
                                                ≠
                                                j
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   k
                                                   
                                                      i
                                                      +
                                                      1
                                                   
                                                
                                                ≤
                                                
                                                
                                                   k
                                                   i
                                                
                                                
                                                   v
                                                   i
                                                
                                                
                                                   (
                                                   
                                                      
                                                         
                                                            x
                                                            i
                                                         
                                                      
                                                      ′
                                                   
                                                   )
                                                
                                                −
                                                
                                                   ɛ
                                                
                                                
                                                
                                                for
                                                
                                                i
                                                =
                                                1
                                                
                                                to
                                                
                                                n
                                                −
                                                1
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   k
                                                   
                                                      i
                                                      +
                                                      1
                                                   
                                                
                                                ≥
                                                
                                                
                                                   k
                                                   i
                                                
                                                
                                                   v
                                                   i
                                                
                                                
                                                   (
                                                   
                                                      
                                                         
                                                            x
                                                            i
                                                         
                                                      
                                                      
                                                         ′
                                                         ′
                                                      
                                                   
                                                   )
                                                
                                                +
                                                
                                                   ɛ
                                                
                                                
                                                
                                                for
                                                
                                                i
                                                =
                                                1
                                                
                                                to
                                                
                                                n
                                                −
                                                1
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                                
                                                   k
                                                   i
                                                
                                                =
                                                1
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   k
                                                   i
                                                
                                                ≥
                                                0
                                                ,
                                                i
                                                =
                                                1
                                                ,
                                                2
                                                ,
                                                …
                                                ,
                                                n
                                             
                                          
                                       
                                    
                                    .
                                 
                              
                           
                        
                     

The inequalities in (5) and (6) are introduced as constraints, with a constant ε in order to avoid the strict inequality, not available in the software command applied for this LPP. The constant ε is assigned in the software and has value as smallest as possible according to the precision of the computational tool, so that, it should make the constraint in (10) equivalent to (5) and (6), considering the numerical precision of the computational language.

This LPP is applied for each of those alternatives j, in order to find if there is any vector of weights, in the weight space, in which, the maximum value of that alternative j is greater than (or equal to) any other alternative in the subset. That is why the first constraint is introduced in (10). If there is such a vector of weights, then, this alternative is classified as potentially optimal. It is possible that no solution will be found for any particular j, which means that this alternative is dominated. The DSS performs a test to verify when the remaining subset of alternatives has a unique alternative that is potentially optimal, in which case, the optimal alternative is found. Otherwise, the LPP is used itself to classify alternatives as potentially optimal.

The above LPP is applied to the initial set of all alternatives, for each alternative j. Subsequently, this LPP is applied to the subset of potentially optimal alternatives, found in a previous step. When applying this LPP, the following situations may be found:

                           
                              •
                              Only one potentially optimal alternative is found (unique solution). Then, this is the optimal alternative and final solution for the problem.

More than one potentially optimal alternative is found. These potentially optimal alternatives form a new subset of alternatives which will be further analyzed, as they are possible solutions for the problem. All other alternatives are dominated and are no longer considered.

The above LPP model includes another constraint which may be either: kn/k1 > 0.5, or kn/k1 < 0.5, depending on DM's preference. This preference is evaluated by comparing two consequences, related to the first and last ordered (k
                           1
                         and kn
                        ), for choosing the heuristic, as explained in the description of Step 3.1.

There are two particular conditions that lead to exceptions in (10):

                           
                              •
                              A circumstance in which the DM is able to specify an indifference relation I and identify the consequence xi
                                    I
                                 , such as illustrated in Fig. 2. In this case, the DSS adapts the LPP model for this condition, considering the constraint 
                                    
                                       
                                          k
                                          
                                             i
                                             +
                                             1
                                          
                                       
                                       =
                                       
                                          v
                                          i
                                       
                                       
                                          (
                                          
                                             x
                                             i
                                             I
                                          
                                          
                                          )
                                       
                                       
                                          k
                                          i
                                       
                                    
                                  instead of 
                                    
                                       
                                          k
                                          
                                             i
                                             +
                                             1
                                          
                                       
                                       ≤
                                       
                                          v
                                          i
                                       
                                       
                                          (
                                          
                                             
                                                
                                                   x
                                                   i
                                                
                                             
                                             ′
                                          
                                          )
                                       
                                       
                                       
                                          k
                                          i
                                       
                                       −
                                       
                                          ɛ
                                       
                                    
                                  and 
                                    
                                       
                                          k
                                          
                                             i
                                             +
                                             1
                                          
                                       
                                       ≥
                                       
                                          v
                                          i
                                       
                                       
                                          (
                                          
                                             
                                                
                                                   x
                                                   i
                                                
                                             
                                             
                                                ′
                                                ′
                                             
                                          
                                          )
                                       
                                       
                                          k
                                          i
                                       
                                       +
                                       
                                          ɛ
                                       
                                    
                                 .

A situation in which ties are identified in the criteria used, as described in Section 3.4.2.1, leads the DSS to adapt the LPP model for this condition, considering the constraint k i
                                  = ki+1
                                 . This is equivalent to making vi(xi′)  = vi(xi″)  = 1.

Supplier selection is amongst the main problems studied in the management literature, in which many supplier selection multicriteria models may be found. As stated by Xia and Wu (2007), supplier selection is a multi-criteria decision making problem, which includes qualitative and quantitative criteria. Supplier selection is one of the most important issues in competitive strategies and in many situations a supplier selection problem is found to be associated with other related problems, such as: contract selection (Brito, de Almeida-Filho, & de Almeida, 2010; de Almeida, 2001) and outsourcing (de Almeida, 2007). Indeed, the supplier selection problem has been studied extensively in the literature. Ho, Xu, and Dey (2010) present a literature review for decision models in supply selection problems, published in international journals from 2000 to 2008. Chai, Liu, and Ngai (2013) present a literature review for papers published between 2008 and 2012.

In order to illustrate how this procedure works two applications are given using two characteristic problems found in the literature on supplier selection.


                        Xia and Wu (2007) present a problem with eight criteria and four alternatives (denoted as Sup, for supplier) and proposed a multi-objective mathematical model. This paper uses data from one of the examples they use, considering first an additive model, as shown in Table 1
                        . The criteria Price, Technical level, Defects and Repair turn round are to be minimized, whereas Reliability, On-time delivery, Supply capacity and Warranty period are to be maximized.
                     

The global weights computed by Xia and Wu (2007), are used as reference values in this paper in order to replicate the elicitation process when applying the proposed DSS. Then, by applying the procedure illustrated in Fig. 4, a solution was found in Step 2.2. The solution was the same as that found by Xia and Wu (2007), which is the Supplier 2. This means that a unique solution was found for the space of weights, in which xi′ = 1.0 and xi″ = 0, for all criteria.


                        Fig. 6 illustrates one of the outputs of the DSS, showing the ranges of feasible weights for which Supplier 2 is the most preferred. This illustrates that this particular case has a very robust result, with a large range of weights for the main criteria in descending order. The range of weights for each criterion is: Price (1–0.125); Technical level (0.5–7.1 × 10−11); Defects (0.333 – 0); Reliability (0.25 – 0); On-time delivery (0.2 – 0); Supply capacity (0.167 – 0); Repair turn round (0.143-0); Warranty period (0.125 - 0). These ranges of weights result from LPs models, considering maximum and minimum weights, subject to constraints in (10) for the winning alternative.

This example illustrates that a minimal effort would be necessary using FITradeoff, for some particular cases. Of course this would happen only in a case where alternative performances per criterion have a range of data which allows such a situation to arise. This is not always the case, as shown in the next example.


                        Barla (2003) presents another supplier selection problem with seven criteria and ten alternatives, representing subcontractors (denoted by Subc). The data from this problem were used in FITradeoff and rearranged as shown in Table 2
                        , in which all criteria are to be maximized. This study recommends Subcontractor 1, after using the additive model. It can be observed that the alternatives for criteria “Geographical condition” and “Price” have the same performance and this problem could be simplified, thus reducing the number of criteria. However, this study kept the example as analyzed in Barla (2003) in order to facilitate the comparison with the same basis of weights.

In this example the weights have values that are close to each other, following the uniform pattern for the distribution of weights. Following the elicitation process as described in Section 3.4, after seventeen cycles, the result is finally found, the recommendation being alternative Subc 1, as in Barla (2003).


                        Table 3
                         shows the cycles and inputs considered in the process for this case. For each cycle, the second column shows Consequence A and the third shows Consequence B. Consequence B consists of the best consequence of the criterion with the least weight in the pair of criteria being compared. Consequence A consists of the value indicated of xi′ or xi″ for the criterion with the greatest weight in the pair of criteria being compared. This value will be assumed as xi′ or xi″ depending on the DM's answer. If the DM chooses A, then the value is xi″. Otherwise it is xi′.

The last column of Table 3 shows the intermediate results found during each cycle, which consists of the subset of potentially optimal alternative, found at the end of Step 3.3. For instance, at the end of the first cycle, in Step 3.3, this subset has four alternatives. There is an option in the system in Step 3.2, so that the DM can see this subset and also data of the range of weights for this result, including a plotted line.

It is important to observe that there is a tie between the criteria of financial condition and of geographical condition, which could most probably have been perceived in Step 2.1, as usually happens in the standard tradeoff procedure. The identification of this tie in Step 2.1 leads the process to finding the unique solution at Step 14. Table 3 shows the application of FITradeoff considering the worst possibility in order to illustrate an extreme situation.


                        Fig. 7
                         shows the ranges of weights for each criterion, for the unique solution found in the last run of Step 3.3. The ranges of weights are: Quality organization (0.19–0.16); Service (0.17–0.15); Capability (0.16–0.14); Financial condition (0.15–0.13); Geographical condition (0.15–0.13); Reliability (0.14–0.11); Price (0.12–0.09).


                        Fig. 7 illustrates that for this particular case, the solution does not have a similar robust result, like that of the former case. In this case, although still robust, the solution has small ranges of weights for the criteria.

The results given for these two cases are consistent with their references. This has been checked with other applications and simulations of a random data set. These and other cases have been analyzed using FITradeoff. The two cases presented above show the key factor of FITradeoff, which is the flexibility in the elicitation process. This feature of flexibility enables the DSS to ask the DM for a lesser amount of information than that required in the classical procedure.

These cases represent two extreme situations. That is why they were chosen, since they can represent completely distinctive situations in the elicitation process, when applying the FITradeoff method. In the Xia and Wu (2007) case, a solution can be found with only the information for ordering the criteria, in Step 2.1. On the other hand, in the Barla (2003) case, several cycles are required.

Another distinctive characteristic of these two cases is associated with the robustness of the results. In the first case, as illustrated in Fig. 6, there is a broader range of weights, while in the Barla (2003) case, the range of weights is narrower, as illustrated in Fig. 7. This does not mean that this result of the latter is not good, since it is in accordance with the DM's preference structure. Moreover, it should be emphasized that this may happen in real situations and under such conditions we have to face up to this reality. Indeed, this is a second reason for choosing this case of Barla (2003). Even so, this shows that by using the FITradeoff system, one can still reduce the amount of information to be obtained from the DM in the elicitation process, compared with the classical tradeoff procedure.In addition, the DSS system provides this information, and is useful for an analysis of the robustness of the result for each particular situation.

Regarding the establishment of a benchmark for the number of questions in the elicitation process, an important remark should be given. The classical tradeoff procedure requires the assessment of (n−1) indifference relations to establish weights for n criteria. Unfortunately, in many studies, (n−1) has been applied as a usual benchmark for the number of questions. However, when assessing DM's preferences, in a real situation, a facilitator usually starts by asking softer questions related to a strict preference relation P. This is done by putting questions with values of xi′ and xi″ close to bi
                         and wi′, respectively, in order to compare consequences similar to those illustrated in Fig. 2. This is highly recommended, instead of asking the indifference value (xi
                           I
                        ) straightaway. This may reduce inconsistencies by calibrating DM and imposing consistency in the DM judgment process. Therefore, a reasonable benchmark for a real elicitation situation would be q(n−1), where q−1 is the number of questions based on relation P, to be put forward before the final question of indifference relation. The minimum acceptable for this would be two questions, each one of them close bi
                         and wi’, which would make a benchmark of 3(n−1).

Using this benchmark for the Barla (2003) case, 3(n−1) = 18, in the FITradeoff system the amount of question (17) to the DM is reduced, compared with the classical tradeoff procedure, if this benchmark is applied. Also, the kind of question is much softer. Otherwise, applying the benchmark of (n−1) = 6, although the FITradeoff system has 11 more questions, all those questions are cognitively much easier. That is, the preference relation P requires less cognitive effort than the indifference relation, as it has been observed in other studies, including Weber and Borcherding (1993). Also, this is associated with the use of partial information, instead of complete information, since the former uses inequalities and the latter uses equations, such as in the classical tradeoff procedure.

With regard to the computational complexity of the system, it has been observed in all tests using cases from the literature and the random data set that the speed at which the interactive process with the DM was undertaken has been quite sufficient. Conducting Step 3.3 using the LPP model was almost imperceptible to the DM, whose first version has been implemented with MATLAB (de Almeida, Costa, de Almeida, & de Almeida-Filho, 2014).

The use of the flexible elicitation method can avoid being tedious and time consuming and also the possibility of minimizing inconsistencies that may occur in long processes, such as those pointed out by Edwards and Barron (1994).

Therefore, the DSS proposed can facilitate the use of the classical tradeoff elicitation procedure, with the novel increments introduced, while considering other paradigms, such as the use of partial information and the use of the concept of flexibility for the elicitation process.

@&#CONCLUSIONS@&#

This paper presents an elicitation method for implementing a multicriteria additive model, using the concept of flexible elicitation in order to improve the applicability of the classical tradeoff elicitation procedure. The method is built into a decision support system (DSS), which can be obtained upon request from the authors. It has been discussed and illustrated how the proposed method improved the elicitation process, compared with the classical tradeoff procedure, requiring less information from the DM and possibly providing a more consistent result.

This paper shows some prospects for the future directions of other studies. Since the present paper does not aim at optimizing the number of questions, unlike other studies (Holloway et al, 2003; White III & Holloway, 2008), a future study could usefully be conducted on this matter, with a view to seeking to improve the heuristic for computing the value for the DM's evaluation, regarding xi′ or xi″ in Step 3.1. Behavioral decision making experiments on this method, similar to those performed in other studies (Borcherding et al., 1991; Poyhonen & Hämäläinen, 2001; Weber & Borcherding, 1993), may be applied in order to evaluate the cognitive features of the new method. The use of flexible elicitation may be considered for other methods such as MAUT, in which choices amongst lotteries would be considered.

This work had partial support from CNPq (the Brazilian Research Council). The CNPq was not involved in the study or in writing this paper.

@&#ACKNOWLEDGMENTS@&#

The authors would like to acknowledge the Editor and the anonymous reviewers for their insightful and positive critique of a previous version of this paper in which they identified its potential and for making valuable suggestions by means of which they encouraged the authors to improve its presentation.

@&#REFERENCES@&#

