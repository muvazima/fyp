@&#MAIN-TITLE@&#Declarative event based models of concurrency and refinement in psi-calculi

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Represents prime event structures as a psi-calculi instance, respecting concurrency diamonds and action refinement.


                        
                        
                           
                           Represents Dynamic Condition Response (DCR) Graphs as another psi-calculi instance, respecting the semantics.


                        
                        
                           
                           Syntactic restrictions are identified that make both encodings complete.


                        
                        
                           
                           The logic part of psi-calculi are enough for capturing event structures, whereas communication is needed for DCR graphs.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Psi-calculi

Prime event structures

DCR graphs

Action refinement

Declarative models

Concurrency

@&#ABSTRACT@&#


               
               
                  Psi-calculi constitute a parametric framework for nominal process calculi, where constraint based process calculi and process calculi for mobility can be defined as instances. We apply here the framework of psi-calculi to provide a foundation for the exploration of declarative event-based process calculi with support for run-time refinement. We first provide a representation of the model of finite prime event structures as an instance of psi-calculi and prove that the representation respects the semantics up to concurrency diamonds and action refinement. We then proceed to give a psi-calculi representation of Dynamic Condition Response Graphs, which conservatively extends prime event structures to allow finite representations of (omega) regular finite (and infinite) behaviours and have been shown to support run-time adaptation and refinement. We end by outlining the final aim of this research, which is to explore nominal calculi for declarative, run-time adaptable mobile processes with shared resources.
               
            

@&#INTRODUCTION@&#

Software is increasingly controlling and supporting critical functions and processes in our society; from energy and transportation to finance, military and governmental processes. This makes the development of techniques for guaranteeing correctness of software systems increasingly important. At the same time, there is a growing need for the support of incremental development and adaptation of information systems, for the systems to be able to keep up with the changes in the physical and regulative context. This need is addressed in practice with the introduction of agile and continuous delivery software development methods and in theory by research in adaptable software systems and technology. Agility and adaptability, however, makes the non-trivial task of ensuring correctness of software systems even more difficult.

The present work is part of a more ambitious research goal pursued in the CompArt project.
                        3
                     
                     
                        3
                        Computational Artefacts (CompArt), http://www.compart.ku.dk.
                      The final aim is to provide a foundation for the description and formal reasoning of adaptable, distributed and mobile computational artefacts under regulative control.

A number of proposals have been made for concrete formal models and reasoning techniques for distributed and mobile systems supporting different kinds of adaptability (e.g. [1–5]). The plethora of models indicates that our understanding of the needs for such agile and adaptable computational artefacts is still developing. For this reason, we aim for a foundation that facilitates experimentation with different formal process calculi. Our focus on mobility, shared resources, regulative control and adaptability leads us to consider the formal meta process calculus of psi-calculi [6]. Psi-calculi provides a general setting for the definition of process calculi for distributed and mobile processes, that generalises the seminal pi-calculus [7] in two dimensions: (i) generalisation of channel names to nominal data structures [8], i.e. general terms with a notion of local names; and (ii) a general logic for expressing constraints guarding actions. Examples of calculi encoded as psi-calculi include the spi- and applied-pi calculi [9,10] and the CC-pi [11,12].

While the general nominal data structures and channel communication provide a foundation for expression of shared mobile resources, the constraint logic provides a foundation for declarative expression of control and regulations. Concretely, we show how two declarative, event-based process models for concurrency, i.e., the seminal prime event structures [13,14] and the Dynamic Condition Response (DCR) Graphs [15], can be represented as psi-calculi. We consider declarative event-based concurrent models for two reasons: Firstly, declarative models more naturally describe regulations, that is, rules governing processes. Secondly, they are well-behaved with respect to action refinement [16,17], which we see as a fundamental step towards supporting agile development and adaptation. Simply put, action refinement is the method of developing a system by starting with an abstract specification, and gradually refining its components (or actions) by providing more details. Thus an action can be changed from being instantaneous to having structure, or duration. This should not be confused with the notion of refinement often found in process algebras where an implementation refines a specification by reducing the set of execution traces.


                     Fig. 1
                      gives an overview of the main results from this paper. After providing the necessary background on psi-calculi in Section 2, we give a representation of model of finite prime event structures [13,14] as an instance of psi-calculi in Section 3. The encoding function espsi, illustrated by the middle horizontal arrow in Fig. 1 exploits the logic of psi-calculi to represent the causality, independence and conflict relation of event structures. This allows us to prove that the representation respects the semantics up to concurrency diamonds and action refinement [17]. Concretely, we define action refinement 
                        
                           
                              ref
                           
                           
                              Ψ
                           
                        
                      on the 
                        eventPsi
                     -processes, and prove in Sec. 3.3 that also action refinement is preserved by our translation, making the upper square diagram of Fig. 1 commute.

We also identify the syntactic shape of psi-processes that correspond to finite prime event structures. This last result can be seen as a characterisation of the psi-processes for which the middle arrow in Fig. 1 is one part of an equivalence.

Event structures are a denotational model and cannot provide finite representations of infinite behaviours. To accommodate finite representations of infinite behaviours, we proceed in Section 4 to consider Dynamic Condition Response graphs (abbreviated DCR graphs or just DCRs) [15]. DCR graphs are an event-based model of concurrency strictly generalising event structures by permitting the events to happen more than once (as opposed to in event structures, where events happen at most once) and by refining the relations of dependency and conflict between events. This generalises event structures in two ways: Firstly, DCR graphs are a so-called system model allowing finite representations of infinite behaviours. Secondly, DCR graphs allow representation of acceptance criteria for computations, making it possible to express both safety and liveness properties. We will not consider acceptance criteria in the present paper. DCRs have been shown to support run-time adaptation [5] and have been successfully used in industry to model and support flexible and adaptable business processes for knowledge workers [18,19].

As for event structures, we provide an encoding dcrpsi of DCR graphs into the psi-instance 
                        dcrPsi
                     , shown in Fig. 1 as the lower arrow. Again we identify the syntactic shape of those 
                        dcrPsi
                     -processes which corresponds exactly to DCR graphs, i.e. characterises the 
                        dcrPsi
                     -processes for which the mapping is part of an equivalence, and prove a bisimulation relation between the DCR graphs semantics and their encoding for a naturally defined event-labelled transition system semantics of the encoding.

We end the section by showing that the encoding of DCR graphs in 
                        dcrPsi
                      is a conservative generalisation of the encoding of finite event structures by showing that the lower square diagram in Fig. 1 commutes, for the standard embedding dcr of event structures into DCR graphs and a suitably defined, semantics preserving embedding emb of 
                        eventPsi
                     -processes (corresponding to event structures) into 
                        dcrPsi
                     -processes (corresponding to DCR graphs).

We end in Section 5 by concluding and outlining the path towards the final aim of this research, which is to explore nominal calculi for declarative, run-time adaptable mobile processes with shared resources, subject to both safety and liveness regulations.

This paper extends [20] by including new results, more examples, motivation and background. In particular, the background section on psi-calculi has been considerably enlarged, including more definitions, examples and intuitions. The same was done for the backgrounds on DCR graphs and event structures and refinement. The results have more detailed proofs and include new results that complete the diagram of Fig. 1 with the embedding of 
                        eventPsi
                      into 
                        dcrPsi
                     , as well as the syntactic restrictions for 
                        dcrPsi
                     -processes that make the lower arrow part of an equivalence.


                     Psi-calculi 
                     [6] have been developed as a framework for defining nominal process calculi, like the many variants of the pi-calculus [7]. Instances of psi-calculi have been made for applied-pi calculus [10] and for CC-pi [11,12] which can in turn capture probabilistic models. Typed psi-calculi exist [21] as well as the related instance [22] for distributed pi-calculus [23,24].

The psi-calculi framework is based on nominal datatypes. We assume an infinite set of atomic names 
                     
                        N
                      ranged over by 
                        a
                        ,
                        b
                        ,
                        …
                     . Intuitively, names are symbols that can be statically scoped, as well as be subjected to substitution (which we define later). A nominal datatype is then constructed from a nominal set [8], which is a set equipped with name swapping functions, written 
                        (
                        a
                        b
                        )
                     , satisfying certain natural axioms such as 
                        (
                        a
                        b
                        )
                        (
                        (
                        a
                        b
                        )
                        t
                        )
                        =
                        t
                     . Intuitively, applying the name swapping 
                        (
                        a
                        b
                        )
                      changes a term t by replacing a with b and b with a. One main point is that even without having any particular syntax for constructing t we can define what it means for a name to “occur” in a term, i.e., when the term can be affected by a swapping that involves that name. The names occurring in this way in a term t constitute the support of t, written 
                        n
                        (
                        t
                        )
                     . In usual datatypes, without binders, we will have 
                        a
                        ∉
                        n
                        (
                        t
                        )
                      if a does not occur syntactically in t. Whereas in the lambda calculus the support corresponds to the free names, since terms are identified up to alpha-equivalence. A function f is equivariant if 
                        (
                        a
                        b
                        )
                        f
                        (
                        t
                        )
                        =
                        f
                        (
                        (
                        a
                        b
                        )
                        t
                        )
                      holds for all t. We can then define a nominal datatype formally as follows.


                     
                        Definition 2.1
                        Nominal datatypes and substitutions


                        A nominal datatype is a nominal set together with a set of equivariant functions on it. Psi-calculi consider substitution functions that substitute terms for names. If t is a term of a datatype, 
                              
                                 
                                    a
                                 
                                 
                                    ˜
                                 
                              
                            is a sequence of names without duplicates, and 
                              
                                 
                                    T
                                 
                                 
                                    ˜
                                 
                              
                            is an equally long sequence of terms of possibly different datatypes, the substitution 
                           
                              t
                              [
                              
                                 
                                    a
                                 
                                 
                                    ˜
                                 
                              
                              :
                              =
                              
                                 
                                    T
                                 
                                 
                                    ˜
                                 
                              
                              ]
                            is a term of the same datatype as t. The only formal requirements for substitutions are that a substitution is an equivariant function that satisfies two substitution laws:
                              
                                 1.
                                 if 
                                       
                                          
                                             a
                                          
                                          
                                             ˜
                                          
                                       
                                       ⊆
                                       n
                                       (
                                       t
                                       )
                                     and 
                                       b
                                       ∈
                                       n
                                       (
                                       
                                          
                                             T
                                          
                                          
                                             ˜
                                          
                                       
                                       )
                                     then 
                                       b
                                       ∈
                                       n
                                       (
                                       t
                                       [
                                       
                                          
                                             a
                                          
                                          
                                             ˜
                                          
                                       
                                       :
                                       =
                                       
                                          
                                             T
                                          
                                          
                                             ˜
                                          
                                       
                                       ]
                                       )
                                    
                                 

if 
                                       
                                          
                                             b
                                          
                                          
                                             ˜
                                          
                                       
                                       ∉
                                       n
                                       (
                                       t
                                       )
                                     and 
                                       
                                          
                                             b
                                          
                                          
                                             ˜
                                          
                                       
                                       ∉
                                       n
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             ˜
                                          
                                       
                                       )
                                    , then 
                                       t
                                       [
                                       
                                          
                                             a
                                          
                                          
                                             ˜
                                          
                                       
                                       :
                                       =
                                       
                                          
                                             T
                                          
                                          
                                             ˜
                                          
                                       
                                       ]
                                       =
                                       (
                                       (
                                       
                                          
                                             b
                                          
                                          
                                             ˜
                                          
                                       
                                       
                                          
                                             a
                                          
                                          
                                             ˜
                                          
                                       
                                       )
                                       t
                                       )
                                       [
                                       
                                          
                                             b
                                          
                                          
                                             ˜
                                          
                                       
                                       :
                                       =
                                       
                                          
                                             T
                                          
                                          
                                             ˜
                                          
                                       
                                       ]
                                    .

Law 1 says that a substitution does not lose names: any name b in the terms 
                        
                           
                              T
                           
                           
                              ˜
                           
                        
                      that substitute the names 
                        
                           
                              a
                           
                           
                              ˜
                           
                        
                      occurring in t must also appear in the resulting term after the substitution 
                        t
                        [
                        
                           
                              a
                           
                           
                              ˜
                           
                        
                        :
                        =
                        
                           
                              T
                           
                           
                              ˜
                           
                        
                        ]
                     . Law 2 is a form of alpha-conversion for substitutions, where 
                        
                           
                              a
                           
                           
                              ˜
                           
                        
                      and 
                        
                           
                              b
                           
                           
                              ˜
                           
                        
                      have the same length, and 
                        (
                        
                           
                              b
                           
                           
                              ˜
                           
                        
                        
                           
                              a
                           
                           
                              ˜
                           
                        
                        )
                      swaps each name of 
                        
                           
                              a
                           
                           
                              ˜
                           
                        
                      with the corresponding name of 
                        
                           
                              b
                           
                           
                              ˜
                           
                        
                     .


                     
                        Definition 2.2
                        Parameters


                        The psi-calculi framework is parametric; instantiating the parameters accordingly, one obtains an instance of psi-calculi, like the pi-calculus, or the cryptographic spi-calculus. These parameters are:
                              
                                 
                                    
                                       
                                          
                                             T
                                          
                                          
                                             
                                             terms (data/channels)
                                          
                                       
                                       
                                          
                                             C
                                          
                                          
                                             
                                             conditions
                                          
                                       
                                       
                                          
                                             A
                                          
                                          
                                             
                                             assertions
                                          
                                       
                                    
                                 
                              
                            which are nominal datatypes not necessarily disjoint; together with the following equivariant operators:
                              
                                 
                                    
                                       
                                          
                                             
                                                ↔
                                                ⋅
                                             
                                             
                                             :
                                             
                                             T
                                             ×
                                             T
                                             →
                                             C
                                          
                                          
                                             
                                             channel equality
                                          
                                       
                                       
                                          
                                             ⊗
                                             
                                             :
                                             
                                             A
                                             ×
                                             A
                                             →
                                             A
                                          
                                          
                                             
                                             composition of assertions
                                          
                                       
                                       
                                          
                                             
                                                1
                                             
                                             
                                             ∈
                                             
                                             A
                                          
                                          
                                             
                                             minimal assertion
                                          
                                       
                                       
                                          
                                             ⊢
                                             
                                             ⊆
                                             
                                             A
                                             ×
                                             C
                                          
                                          
                                             
                                             entailment relation
                                          
                                       
                                    
                                 
                              
                            The operators are usually written infix, i.e.: 
                              M
                              
                                 ↔
                                 ⋅
                              
                              N
                           , 
                              Ψ
                              ⊗
                              
                                 
                                    Ψ
                                 
                                 
                                    ′
                                 
                              
                           , 
                              Ψ
                              ⊢
                              φ
                           .

Intuitively, terms can be seen as generated from a signature, as in term algebras [25]. We can think of the conditions and assertions like in first-order logic: the minimal assertion being top/true, entailment the one from first-order logic, and composition taken as conjunction. It is helpful to think of assertions and conditions as logical formulas, and the entailment relation as an entailment in logic; but allow the intuition to think of logics abstractly, not just propositional logic, so that assertions and conditions are used to express any logical statements, where the entailment defines when assertions entail conditions (do not restrict to only thinking of truth tables; e.g., in our encodings we will use an extended logic for sets, with membership, pairs, etc.). The intuition of entailment is that 
                        Ψ
                        ⊢
                        φ
                      means that given the information in Ψ, it is possible to infer φ. Two assertions are equivalent if they entail the same conditions.


                     
                        Definition 2.3
                        Assertion equivalence


                        Two assertions are equivalent, written 
                              Ψ
                              ≃
                              
                                 
                                    Ψ
                                 
                                 
                                    ′
                                 
                              
                           , iff for all φ we have that 
                              Ψ
                              ⊢
                              φ
                              ⇔
                              
                                 
                                    Ψ
                                 
                                 
                                    ′
                                 
                              
                              ⊢
                              φ
                           .

The above operators need to obey some natural requirements, when instantiated.


                     
                        Definition 2.4
                        Requisites on valid psi-calculus parameters


                        The following properties must be satisfied by any psi-instance.
                              
                                 
                                    
                                       
                                          
                                             Channel Symmetry:
                                          
                                          
                                             
                                             Ψ
                                             ⊢
                                             M
                                             
                                                ↔
                                                ⋅
                                             
                                             N
                                             ⟹
                                             Ψ
                                             ⊢
                                             N
                                             
                                                ↔
                                                ⋅
                                             
                                             M
                                          
                                       
                                       
                                          
                                             Channel Transitivity:
                                          
                                          
                                             
                                             Ψ
                                             ⊢
                                             M
                                             
                                                ↔
                                                ⋅
                                             
                                             N
                                             ∧
                                             Ψ
                                             ⊢
                                             N
                                             
                                                ↔
                                                ⋅
                                             
                                             L
                                             ⟹
                                             Ψ
                                             ⊢
                                             M
                                             
                                                ↔
                                                ⋅
                                             
                                             L
                                          
                                       
                                       
                                          
                                             Compositionality:
                                          
                                          
                                             
                                             Ψ
                                             ≃
                                             
                                                
                                                   Ψ
                                                
                                                
                                                   ′
                                                
                                             
                                             ⟹
                                             Ψ
                                             ⊗
                                             
                                                
                                                   Ψ
                                                
                                                
                                                   ″
                                                
                                             
                                             ≃
                                             
                                                
                                                   Ψ
                                                
                                                
                                                   ′
                                                
                                             
                                             ⊗
                                             
                                                
                                                   Ψ
                                                
                                                
                                                   ″
                                                
                                             
                                          
                                       
                                       
                                          
                                             Identity:
                                          
                                          
                                             
                                             Ψ
                                             ⊗
                                             
                                                1
                                             
                                             ≃
                                             Ψ
                                          
                                       
                                       
                                          
                                             Associativity:
                                          
                                          
                                             
                                             (
                                             Ψ
                                             ⊗
                                             
                                                
                                                   Ψ
                                                
                                                
                                                   ′
                                                
                                             
                                             )
                                             ⊗
                                             
                                                
                                                   Ψ
                                                
                                                
                                                   ″
                                                
                                             
                                             ≃
                                             Ψ
                                             ⊗
                                             (
                                             
                                                
                                                   Ψ
                                                
                                                
                                                   ′
                                                
                                             
                                             ⊗
                                             
                                                
                                                   Ψ
                                                
                                                
                                                   ″
                                                
                                             
                                             )
                                          
                                       
                                       
                                          
                                             Commutativity:
                                          
                                          
                                             
                                             Ψ
                                             ⊗
                                             
                                                
                                                   Ψ
                                                
                                                
                                                   ′
                                                
                                             
                                             ≃
                                             
                                                
                                                   Ψ
                                                
                                                
                                                   ′
                                                
                                             
                                             ⊗
                                             Ψ
                                          
                                       
                                    
                                 
                              
                           
                        

Channel equality is a partial equivalence which means that there can be terms that are not equivalent with anything (not even themselves). This does not allow them to be used as channels (but only as data). The composition of assertions (wrt. assertion equivalence) must be associative, commutative, and have 1 as unit; moreover, composition must preserve equivalence of assertions.
                        4
                     
                     
                        4
                        Note that idempotence (
                              Ψ
                              ⊗
                              Ψ
                              ≃
                              Ψ
                           ) is not required from the composition operation, meaning that logics to represent resources, like linear logic, can be captured through the assertions language.
                     
                     ,
                     
                        5
                     
                     
                        5
                        Note also that weakening (
                              Ψ
                              ⊢
                              φ
                              ⇒
                              Ψ
                              ⊗
                              
                                 
                                    Ψ
                                 
                                 
                                    ′
                                 
                              
                              ⊢
                              φ
                           ) is not required, meaning that non-monotonic logics could be captured as well.
                     
                  

The intuition is that assertions will be used to capture assumptions about the environment of the processes. Conditions will be used as guards for guarded (non-deterministic) choices, and are to be tested against the assertion of the environment for entailment. Terms are used to represent complex data communicated through channels, but will also be used to define the channels themselves, which can thus be more than just mere names, as is the in pi-calculus. The composition of assertions should capture the notion of combining assumptions from several components of the environment.


                     
                        Definition 2.5
                        Syntax


                        The syntax for building psi-processes is the following (psi-processes are denoted by 
                              P
                              ,
                              Q
                              ,
                              …
                           ; terms from T by 
                              M
                              ,
                              N
                              ,
                              …
                           ):
                              
                                 
                                    
                                       
                                          
                                             
                                                0
                                             
                                          
                                          
                                             
                                             Empty/trivial process
                                          
                                       
                                       
                                          
                                             
                                                
                                                   M
                                                
                                                ‾
                                             
                                             〈
                                             N
                                             〉
                                             .
                                             P
                                          
                                          
                                             
                                             Output
                                          
                                       
                                       
                                          
                                             
                                                
                                                   M
                                                
                                                _
                                             
                                             〈
                                             (
                                             λ
                                             
                                                
                                                   x
                                                
                                                
                                                   ˜
                                                
                                             
                                             )
                                             N
                                             〉
                                             .
                                             P
                                          
                                          
                                             
                                             Input
                                          
                                       
                                       
                                          
                                             
                                                case
                                             
                                             
                                             
                                                
                                                   φ
                                                
                                                
                                                   1
                                                
                                             
                                             :
                                             
                                                
                                                   P
                                                
                                                
                                                   1
                                                
                                             
                                             ,
                                             …
                                             ,
                                             
                                                
                                                   φ
                                                
                                                
                                                   n
                                                
                                             
                                             :
                                             
                                                
                                                   P
                                                
                                                
                                                   n
                                                
                                             
                                          
                                          
                                             
                                             Conditional (non-deterministic) choice
                                          
                                       
                                       
                                          
                                             (
                                             ν
                                             a
                                             )
                                             P
                                          
                                          
                                             
                                             Restriction of name
                                             
                                             a
                                             
                                             inside processes
                                             
                                             P
                                          
                                       
                                       
                                          
                                             P
                                             ∥
                                             Q
                                          
                                          
                                             
                                             Parallel composition
                                             
                                          
                                       
                                       
                                          
                                             !
                                             P
                                          
                                          
                                             
                                             Replication
                                          
                                       
                                       
                                          
                                             ⦇
                                             Ψ
                                             ⦈
                                          
                                          
                                             
                                             Assertion processes
                                          
                                       
                                    
                                 
                              
                            where 
                              
                                 
                                    x
                                 
                                 
                                    ˜
                                 
                              
                            is a sequence of variable names bound in the object term N, 
                              
                                 
                                    φ
                                 
                                 
                                    i
                                 
                              
                              ∈
                              C
                            are conditions, a is a name possibly appearing in P, and 
                              Ψ
                              ∈
                              A
                            is an assertion.

The input and output processes are as in pi-calculus except that the channel objects M can be arbitrary terms. In the input process the object 
                        (
                        λ
                        
                           
                              x
                           
                           
                              ˜
                           
                        
                        )
                        N
                      is a pattern with the variables 
                        
                           
                              x
                           
                           
                              ˜
                           
                        
                      bound in N as well as in the continuation process P.
                        6
                     
                     
                        6
                        Note the use of λ as a syntactic binder denoting patterns of terms, and the use of the standard π-calculus restriction operation on names ν. The use of λ is only in the input terms.
                      Intuitively, any term message received on M must match the pattern N for some substitution of the variables 
                        
                           
                              x
                           
                           
                              ˜
                           
                        
                     . The same substitution is used to substitute these variables in P after a successful match. The traditional pi-calculus input 
                        a
                        (
                        x
                        )
                        .
                        P
                      would be modelled in psi-calculi as 
                        
                           
                              a
                           
                           _
                        
                        〈
                        (
                        λ
                        x
                        )
                        x
                        〉
                        .
                        P
                     , where the names are the only terms allowed. Restriction, parallel composition, and replication are the standard constructs of pi-calculus.

The case process behaves like one of the 
                        
                           
                              P
                           
                           
                              i
                           
                        
                      for which the condition 
                        
                           
                              φ
                           
                           
                              i
                           
                        
                      is entailed by the current environment assumption, as defined by the notion of frame which we present later. Frames are familiar from the applied pi-calculus [10], where were introduced with the purpose of capturing static information about the environment (or seen in reverse, the frame is the static information that the current process exposes to the environment). Particular examples of using the case construct are:
                        
                           1.
                           
                              
                                 
                                    case
                                 
                                 
                                 φ
                                 :
                                 P
                               which can be read as 
                                 
                                    if
                                 
                                 
                                 φ
                                 
                                 
                                    then
                                 
                                 
                                 P
                              ;


                              
                                 
                                    case
                                 
                                 
                                 ⊤
                                 :
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                 ⊤
                                 :
                                 
                                    
                                       P
                                    
                                    
                                       2
                                    
                                 
                              , where ⊤ would be any condition that is entailed by all assertions (like 
                                 a
                                 
                                    ↔
                                    ⋅
                                 
                                 a
                               in pi-calculus); this use is mimicking the pi-calculus non-deterministic choice 
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 +
                                 
                                    
                                       P
                                    
                                    
                                       2
                                    
                                 
                              .


                     
                        Remark 2.6
                        Psi-calculi work with finite terms and processes. Therefore, we restrict our further investigations to finite event structures and DCRs. To handle event structure over an infinite set of events one needs to investigate extensions of psi-calculi with three forms of infinity:
                              
                                 1.
                                 Infinite summation, which is sometimes found in process algebras, e.g., in Milner's SCCS [26]. In the case of psi-calculi an infinite case construct can be written as 
                                       
                                          case
                                       
                                       
                                       
                                          
                                             
                                                
                                                   φ
                                                
                                                
                                                   i
                                                
                                             
                                          
                                          
                                             ˜
                                          
                                       
                                       :
                                       
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   i
                                                
                                             
                                          
                                          
                                             ˜
                                          
                                       
                                     where infinite lists are used to represent the respective condition/process pairs. No significant changes to the semantics would be needed.

Infinite parallel composition could use the same semantic rule as for the finite case, but care needs to be taken with the required notions of frame and entailment. Often the replication is the preferred way to obtain infinite parallel components.

Infinite nominal data structures, where works into infinite terms would be a starting point.


                     Assertion processes 
                     
                        ⦇
                        Ψ
                        ⦈
                      can float freely in a process (i.e., through parallel compositions) thus describing assumptions about the environment. Otherwise, assertions can appear at the end of a sequence of input/output actions, i.e., these are the guarantees that a process provides after it makes an action (on the same lines as in assume/guarantee reasoning about programs). Assertion processes are somehow similar to the active substitutions of the applied pi-calculus, except that assertions do not have computational behaviour, but only restrict the behaviour of the other constructs by providing their assumptions about the environment.


                     
                        Example 2.7
                        Pi-calculus as an instance


                        To obtain pi-calculus [7] as an instance of psi-calculi use the following, built over a single set of names 
                              N
                           :
                              
                                 
                                    
                                       
                                          
                                             T
                                          
                                          
                                             
                                             
                                                =
                                                ▵
                                             
                                          
                                          
                                             
                                             N
                                          
                                       
                                       
                                          
                                             C
                                          
                                          
                                             
                                             
                                                =
                                                ▵
                                             
                                          
                                          
                                             
                                             {
                                             a
                                             =
                                             b
                                             |
                                             a
                                             ,
                                             b
                                             ∈
                                             T
                                             }
                                          
                                       
                                       
                                          
                                             A
                                          
                                          
                                             
                                             
                                                =
                                                ▵
                                             
                                          
                                          
                                             
                                             {
                                             
                                                1
                                             
                                             }
                                          
                                       
                                       
                                          
                                             
                                                ↔
                                                ⋅
                                             
                                          
                                          
                                             
                                             
                                                =
                                                ▵
                                             
                                          
                                          
                                             
                                             =
                                          
                                       
                                       
                                          
                                             ⊢
                                          
                                          
                                             
                                             
                                                =
                                                ▵
                                             
                                          
                                          
                                             
                                             {
                                             (
                                             
                                                1
                                             
                                             ,
                                             a
                                             =
                                             a
                                             )
                                             |
                                             a
                                             ∈
                                             T
                                             }
                                          
                                       
                                    
                                 
                              
                            with the trivial definition for the composition operation. The only terms are the channel names 
                              a
                              ∈
                              N
                           , and there is no other assertion than the unit. The conditions are equality tests for channel names, where the only successful tests are those where the names are equal. Hence, channel comparison is defined as just name equality.


                     
                        Example 2.8
                        From the instance created in Example 2.7 one can obtain the polyadic pi-calculus [27] by adding tupling symbols 
                              
                                 
                                    t
                                 
                                 
                                    n
                                 
                              
                            for tuples of arity n to T, i.e.
                              
                                 
                                    
                                       T
                                       =
                                       N
                                       ∪
                                       {
                                       
                                          
                                             t
                                          
                                          
                                             n
                                          
                                       
                                       (
                                       
                                          
                                             M
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             M
                                          
                                          
                                             n
                                          
                                       
                                       )
                                       :
                                       
                                          
                                             M
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       …
                                       
                                          
                                             M
                                          
                                          
                                             n
                                          
                                       
                                       ∈
                                       T
                                       }
                                       .
                                    
                                 
                              
                            The polyadic output is to simply output the corresponding tuple of object names, and the polyadic input 
                              a
                              (
                              
                                 
                                    b
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    b
                                 
                                 
                                    n
                                 
                              
                              )
                              .
                              P
                            is represented by a pattern matching
                              
                                 
                                    
                                       
                                          
                                             a
                                          
                                          _
                                       
                                       (
                                       λ
                                       
                                          
                                             b
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       …
                                       
                                          
                                             b
                                          
                                          
                                             n
                                          
                                       
                                       )
                                       
                                          
                                             t
                                          
                                          
                                             n
                                          
                                       
                                       (
                                       
                                          
                                             b
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             b
                                          
                                          
                                             n
                                          
                                       
                                       )
                                       .
                                       P
                                       .
                                    
                                 
                              
                            Strictly speaking this allows nested tuples as well as tuples in the subject position of inputs and outputs. But these do not give rise to transitions because the definition of channel equality only applies to channel names, thus 
                              M
                              
                                 ↔
                                 ⋅
                              
                              M
                            can be entailed by an assertion only when M is a name.

Psi-calculi are given an operational semantics in [6] using labelled transition systems, where the states are the process terms and the transitions represent one reduction step, labelled with the action that the process executes. The actions, generally denoted by 
                        α
                        ,
                        β
                     , represent respectively the input and output constructions, as well as τ the internal synchronisation/communication action:
                        
                           
                              
                                 
                                    
                                       M
                                    
                                    ‾
                                 
                                 〈
                                 (
                                 ν
                                 
                                    
                                       a
                                    
                                    
                                       ˜
                                    
                                 
                                 )
                                 N
                                 〉
                                 |
                                 
                                    
                                       M
                                    
                                    _
                                 
                                 〈
                                 N
                                 〉
                                 |
                                 τ
                              
                           
                        
                      The restriction operator ν binds the names 
                        
                           
                              a
                           
                           
                              ˜
                           
                        
                      in N. We will denote by 
                        b
                        n
                        (
                        α
                        )
                      the set of bound names in a communication term; i.e., 
                        b
                        n
                        (
                        
                           
                              M
                           
                           ‾
                        
                        〈
                        (
                        ν
                        
                           
                              a
                           
                           
                              ˜
                           
                        
                        )
                        N
                        〉
                        )
                        =
                        
                           
                              a
                           
                           
                              ˜
                           
                        
                     .


                     Transitions are done in a context, which is represented as an assertion Ψ, capturing assumptions about the environment:
                        
                           
                              
                                 Ψ
                                 ▷
                                 P
                                 
                                    →
                                    α
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                        
                      Intuitively, the above transition could be read as: The process P can perform an action α in an environment respecting the assumptions in Ψ, after which it would behave like the process 
                        
                           
                              P
                           
                           
                              ′
                           
                        
                     .

The environment assertion is obtained using the notion of frame which essentially collects (using the composition operation) the outer-most assertions of a process. A frame also keeps the information about the restrictions under which the assertion processes are found.


                     
                        Definition 2.9
                        Frame


                        A frame is of the form 
                              (
                              ν
                              
                                 
                                    b
                                 
                                 
                                    ˜
                                 
                              
                              )
                              Ψ
                            where 
                              
                                 
                                    b
                                 
                                 
                                    ˜
                                 
                              
                            is a sequence of names that bind into the assertion Ψ. We write just Ψ for 
                              (
                              ν
                              ϵ
                              )
                              Ψ
                            when there is no risk of confusing a frame with an assertion. We identify alpha variants of frames. In consequence, composition of frames is defined by 
                              (
                              ν
                              
                                 
                                    
                                       
                                          b
                                       
                                       
                                          1
                                       
                                    
                                 
                                 
                                    ˜
                                 
                              
                              )
                              
                                 
                                    Ψ
                                 
                                 
                                    1
                                 
                              
                              ⊗
                              (
                              ν
                              
                                 
                                    
                                       
                                          b
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    ˜
                                 
                              
                              )
                              
                                 
                                    Ψ
                                 
                                 
                                    2
                                 
                              
                              =
                              (
                              ν
                              
                                 
                                    
                                       
                                          b
                                       
                                       
                                          1
                                       
                                    
                                 
                                 
                                    ˜
                                 
                              
                              
                                 
                                    
                                       
                                          b
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    ˜
                                 
                              
                              )
                              
                                 
                                    Ψ
                                 
                                 
                                    1
                                 
                              
                              ⊗
                              
                                 
                                    Ψ
                                 
                                 
                                    2
                                 
                              
                            where 
                              
                                 
                                    
                                       
                                          b
                                       
                                       
                                          1
                                       
                                    
                                 
                                 
                                    ˜
                                 
                              
                              ∉
                              n
                              (
                              
                                 
                                    
                                       
                                          b
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    ˜
                                 
                              
                              ,
                              
                                 
                                    Ψ
                                 
                                 
                                    2
                                 
                              
                              )
                            and vice versa. The frame of a process 
                              F
                              (
                              P
                              )
                            is defined inductively on the structure of the process as:
                              
                                 
                                    
                                       
                                          
                                             F
                                             (
                                             ⦇
                                             Ψ
                                             ⦈
                                             )
                                             =
                                             Ψ
                                          
                                       
                                       
                                          
                                             F
                                             (
                                             P
                                             ∥
                                             Q
                                             )
                                             =
                                             F
                                             (
                                             P
                                             )
                                             ⊗
                                             F
                                             (
                                             Q
                                             )
                                          
                                       
                                       
                                          
                                             F
                                             (
                                             (
                                             ν
                                             a
                                             )
                                             P
                                             )
                                             =
                                             (
                                             ν
                                             a
                                             )
                                             F
                                             (
                                             P
                                             )
                                          
                                       
                                       
                                          
                                             F
                                             (
                                             !
                                             P
                                             )
                                             =
                                             F
                                             (
                                             
                                                case
                                             
                                             
                                             
                                                
                                                   φ
                                                
                                                
                                                   ˜
                                                
                                             
                                             :
                                             
                                                
                                                   P
                                                
                                                
                                                   ˜
                                                
                                             
                                             )
                                             =
                                             F
                                             (
                                             
                                                
                                                   M
                                                
                                                ‾
                                             
                                             〈
                                             N
                                             〉
                                             .
                                             P
                                             )
                                             =
                                             F
                                             (
                                             
                                                
                                                   M
                                                
                                                _
                                             
                                             〈
                                             (
                                             λ
                                             
                                                
                                                   x
                                                
                                                
                                                   ˜
                                                
                                             
                                             )
                                             N
                                             〉
                                             .
                                             P
                                             )
                                             =
                                             
                                                1
                                             
                                          
                                       
                                    
                                 
                              
                            Any assertion that occurs under an action prefix or a condition is not visible in the frame.


                     
                        Example 2.10
                        Calculating the frame of the following process, when 
                              a
                              ∉
                              n
                              (
                              
                                 
                                    Ψ
                                 
                                 
                                    1
                                 
                              
                              )
                           , is:
                              
                                 
                                    
                                       F
                                       (
                                       ⦇
                                       
                                          
                                             Ψ
                                          
                                          
                                             1
                                          
                                       
                                       ⦈
                                       ∥
                                       (
                                       ν
                                       a
                                       )
                                       (
                                       ⦇
                                       
                                          
                                             Ψ
                                          
                                          
                                             2
                                          
                                       
                                       ⦈
                                       ∥
                                       
                                          
                                             M
                                          
                                          ‾
                                       
                                       〈
                                       N
                                       〉
                                       .
                                       ⦇
                                       
                                          
                                             Ψ
                                          
                                          
                                             3
                                          
                                       
                                       ⦈
                                       )
                                       )
                                       =
                                       
                                          
                                             Ψ
                                          
                                          
                                             1
                                          
                                       
                                       ⊗
                                       (
                                       ν
                                       a
                                       )
                                       
                                          
                                             Ψ
                                          
                                          
                                             2
                                          
                                       
                                       =
                                       (
                                       ν
                                       a
                                       )
                                       (
                                       
                                          
                                             Ψ
                                          
                                          
                                             1
                                          
                                       
                                       ⊗
                                       
                                          
                                             Ψ
                                          
                                          
                                             2
                                          
                                       
                                       )
                                       .
                                    
                                 
                              
                            Here 
                              
                                 
                                    Ψ
                                 
                                 
                                    3
                                 
                              
                            occurs under a prefix and is therefore not included in the frame. An agent where all assertions are guarded thus has a frame equivalent to 1. Because frames are considered equivalent up to alpha-conversion, proper renaming allows to move restriction operators 
                              (
                              ν
                              a
                              )
                           , as exemplified here.


                     
                        Definition 2.11
                        Semantics


                        The transition rules for psi-calculi are the following, where the symmetric rules for (par) and (com) are elided.
                              
                                 
                              
                            In the (com) rule the assertions 
                              
                                 
                                    Ψ
                                 
                                 
                                    P
                                 
                              
                            and 
                              
                                 
                                    Ψ
                                 
                                 
                                    Q
                                 
                              
                            come from the frames of 
                              F
                              (
                              P
                              )
                              =
                              (
                              ν
                              
                                 
                                    
                                       
                                          b
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                              )
                              
                                 
                                    Ψ
                                 
                                 
                                    P
                                 
                              
                            respectively 
                              F
                              (
                              Q
                              )
                              =
                              (
                              ν
                              
                                 
                                    
                                       
                                          b
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    Q
                                 
                              
                              )
                              
                                 
                                    Ψ
                                 
                                 
                                    Q
                                 
                              
                            and it is assumed that 
                              
                                 
                                    
                                       
                                          b
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    P
                                 
                              
                            is fresh for all of 
                              Ψ
                              ,
                              
                                 
                                    
                                       
                                          b
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    Q
                                 
                              
                              ,
                              Q
                              ,
                              M
                            and P, and respectively for 
                              
                                 
                                    
                                       
                                          b
                                       
                                       
                                          ˜
                                       
                                    
                                 
                                 
                                    Q
                                 
                              
                           .
                              
                                 
                              
                           
                        

There is no transition rule for the assertion process; this is only used in constructing frames. Once an assertion process is reached, the computation stops, and this assertion remains floating among the other parallel processes and will be composed part of the frames, when necessary, like in the case of the communication rule. The empty process has the same behaviour as, and thus can be modelled by, the trivial assertion process 
                        ⦇
                        
                           1
                        
                        ⦈
                     .

The (in) rule makes transitions labelled with any channel term K equivalent to the input channel M, and for any substitution replacing the variables 
                        
                           
                              y
                           
                           
                              ˜
                           
                        
                      by term values 
                        
                           
                              L
                           
                           
                              ˜
                           
                        
                      in the (pattern) term N. The input rule is open to any possible matching outputs, where the (com) rule will pair any of the exact matchings. The (out) rule just outputs the term N on some equivalent channel term K.

In (open) the expression 
                        
                           
                              a
                           
                           
                              ˜
                           
                        
                        ∪
                        {
                        b
                        }
                      means the sequence 
                        
                           
                              a
                           
                           
                              ˜
                           
                        
                      with b inserted anywhere.

The communication rule (com) shows how the environment processes executing in parallel contribute their top-most assertions to make the new context assertion for the input/output action of the other parallel process. The (com) rule requires that for a synchronisation to happen the channels in the transition labels for the input and output processes must be equivalent.

The (case) rule shows how the conditions are tested against the context assertions. From all the entailed conditions one is non-deterministically chosen as the continuation branch.

The (par) rule allows a component P in a parallel process to do an α transition to 
                        
                           
                              P
                           
                           
                              ′
                           
                        
                      as long as the bound names of the transition label are not captured by the environment process Q, i.e., when the bound names of α are fresh in Q (
                        b
                        n
                        (
                        α
                        )
                        ∩
                        n
                        (
                        Q
                        )
                        =
                        ∅
                     ). Moreover, for the frame 
                        F
                        (
                        Q
                        )
                        =
                        (
                        ν
                        
                           
                              
                                 
                                    b
                                 
                                 
                                    ˜
                                 
                              
                           
                           
                              Q
                           
                        
                        )
                        
                           
                              Ψ
                           
                           
                              Q
                           
                        
                      it is assumed that 
                        
                           
                              
                                 
                                    b
                                 
                                 
                                    ˜
                                 
                              
                           
                           
                              Q
                           
                        
                      is fresh for 
                        Ψ
                        ,
                        P
                      and α.

The (scope) rule can be applied only when b is fresh in both α and the assertion that the process is executed with.

The (rep) rule is standard from pi-calculi.


                     
                        Example 2.12
                        For a simple example of a transition, suppose for an assertion Ψ and a condition φ that 
                              Ψ
                              ⊢
                              φ
                           . Also assume that
                              
                                 
                                    
                                       ∀
                                       
                                          
                                             Ψ
                                          
                                          
                                             ′
                                          
                                       
                                       .
                                       
                                          
                                             Ψ
                                          
                                          
                                             ′
                                          
                                       
                                       ▷
                                       Q
                                       
                                          →
                                          α
                                       
                                       
                                          
                                             Q
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                              
                            i.e., Q has an action α regardless of the environment. Then by the (case) rule we get
                              
                                 
                                    
                                       Ψ
                                       ▷
                                       
                                          case
                                       
                                       
                                       φ
                                       :
                                       Q
                                       
                                          →
                                          α
                                       
                                       
                                          
                                             Q
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                              
                            i.e., 
                              
                                 case
                              
                              
                              φ
                              :
                              Q
                            has the same transition if the environment is Ψ. Since 
                              F
                              (
                              ⦇
                              Ψ
                              ⦈
                              )
                              =
                              Ψ
                            and 
                              Ψ
                              ⊗
                              
                                 1
                              
                            we get by (par) that
                              
                                 
                                    
                                       
                                          1
                                       
                                       ▷
                                       ⦇
                                       Ψ
                                       ⦈
                                       ∥
                                       
                                          case
                                       
                                       
                                       φ
                                       :
                                       Q
                                       
                                          →
                                          α
                                       
                                       ⦇
                                       Ψ
                                       ⦈
                                       ∥
                                       
                                          
                                             Q
                                          
                                          
                                             ′
                                          
                                       
                                       .
                                    
                                 
                              
                           
                        

A more detailed introduction to nominal sets used in psi-calculi can be found in [6, Sec. 2.1] and the recent book [8] contains a thorough treatment of both the theory behind nominal sets as well as various applications, e.g., see [8, Ch. 8] for nominal algebraic datatypes. For our presentation here we expect only some familiarity with notions of algebraic datatypes and term algebras. In the following we briefly present the notion of terms that we will be using in our encodings in the rest of the paper.


                        
                           Definition 2.13
                           Terms, cf. [25, Chap. 3.1]
                           


                           In universal algebra, terms are constructed from a signature 
                                 F
                               of function names of some arity, and a set of variables 
                                 X
                              , and are denoted 
                                 t
                                 ∈
                                 T
                                 (
                                 F
                                 ,
                                 X
                                 )
                              . Function symbols of arity 0 are called constants. Function symbols are sometimes denoted as 
                                 f
                                 (
                                 _
                                 )
                               or 
                                 f
                                 (
                                 _
                                 ,
                                 _
                                 )
                               to emphasise their arity (i.e., number of arguments, respectively one and two in this example). Terms without variables are called ground, their set being denoted by 
                                 T
                                 (
                                 F
                                 )
                              , whereas terms containing variables are sometimes called open, to emphasise this aspect (in consequence, some works call ground terms closed). Every variable is also a term, i.e., an open term.

One could see an intuitive association between variables and names, since in nominal datatypes names can be subject to substitutions, the same as variables in open terms. Though names have other properties, as we have seen, like bindings or alpha conversion.


                        
                           Example 2.14
                           Natural numbers as ground terms


                           The set of natural numbers can be seen as terms denoted by 
                                 N
                               and defined as 
                                 T
                                 (
                                 {
                                 s
                                 (
                                 _
                                 )
                                 ,
                                 0
                                 }
                                 )
                              , i.e., only ground terms, built from the single constant term 0 using the unary successor function. An example of the term representing number 3 is 
                                 s
                                 (
                                 s
                                 (
                                 s
                                 (
                                 0
                                 )
                                 )
                                 )
                              .


                        
                           Definition 2.15
                           Multi-sorted terms, cf. [28]
                           


                           A multi-sorted algebraic structure is obtained if we add a notion of sorts to the Definition 2.13. Consider a set of sorts 
                                 s
                                 ∈
                                 S
                               with a partial order on them, e.g., 
                                 
                                    
                                       s
                                    
                                    
                                       1
                                    
                                 
                                 <
                                 
                                    
                                       s
                                    
                                    
                                       2
                                    
                                 
                               means that any term of sort 
                                 
                                    
                                       s
                                    
                                    
                                       1
                                    
                                 
                               is also of sort 
                                 
                                    
                                       s
                                    
                                    
                                       2
                                    
                                 
                              . Assign to each function symbol 
                                 f
                                 ∈
                                 F
                               a sort for each parameter and a sort for output; e.g., 
                                 f
                                 :
                                 
                                    
                                       s
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       n
                                    
                                 
                                 →
                                 s
                               takes n arguments of the respective sorts. In particular, each constant symbol is of some sort. One function can now be applied only to terms of the appropriate sort, to produce a term of the respective result sort. The set of variables is now partitioned into sorted variables, i.e., each variable is of a certain sort. We sometimes mention the set of sorts as 
                                 T
                                 (
                                 F
                                 ,
                                 X
                                 ,
                                 S
                                 )
                               when we want to be specific; but most of the time we rely on the context for disambiguation.


                        
                           Definition 2.16
                           Equality of terms


                           
                              Equations can be defined between terms, 
                                 
                                    
                                       t
                                    
                                    
                                       l
                                    
                                 
                                 =
                                 
                                    
                                       t
                                    
                                    
                                       r
                                    
                                 
                              , to express which terms should be viewed as equal. Equations are usually defined between open terms and are closed under substitutions, meaning that any two terms obtained by applying the same substitution to both t and 
                                 
                                    
                                       t
                                    
                                    
                                       ′
                                    
                                 
                               would also be considered equal. For some set of equations, we infer the equality of two terms by applying the inference rules of equational logic, i.e., identity, symmetry, transitivity, closure under function application and under substitutions.


                        
                           Example 2.17
                           Multi-sets as ground multi-sorted terms


                           One representation of sets can be given as terms built over two sorts 
                                 S
                                 =
                                 {
                                 
                                    el
                                 
                                 ,
                                 
                                    set
                                 
                                 }
                               using constant symbols 
                                 
                                    
                                       e
                                    
                                    
                                       i
                                    
                                 
                               of sort el and constant symbol ∅ of sort set, and using a multi-sorted concatenation operation 
                                 
                                    
                                       _
                                    
                                    
                                       el
                                    
                                 
                                 :
                                 
                                    
                                       _
                                    
                                    
                                       set
                                    
                                 
                               which takes the first argument of sort el and the second argument of sort set. An example is 
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 :
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       2
                                    
                                 
                                 :
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       3
                                    
                                 
                                 :
                                 ∅
                                 )
                                 )
                              . Because elements can appear several times in a concatenation, we have just modelled multi-sets. All multi-sets over some 
                                 
                                    
                                       e
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 E
                               are denoted by 
                                 
                                    
                                       N
                                    
                                    
                                       E
                                    
                                 
                              . With standard equations one could treat the multi-set terms with duplicate elements as equal to terms with a single copy of the element so that, e.g., 
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 :
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 :
                                 ∅
                                 )
                               would be equal to 
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 :
                                 ∅
                              . Examples of equations of relevance to this case are: commutativity in multi-sets could be 
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 :
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       2
                                    
                                 
                                 :
                                 x
                                 )
                                 =
                                 
                                    
                                       e
                                    
                                    
                                       2
                                    
                                 
                                 :
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 :
                                 x
                                 )
                              , whereas an annihilation equation would be 
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 :
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 :
                                 x
                                 )
                                 =
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 :
                                 x
                              . We denote all the terms capturing sets over some E of constant symbols by 
                                 
                                    
                                       2
                                    
                                    
                                       E
                                    
                                 
                              .
                                 7
                              
                              
                                 7
                                 Note that to model infinite sets we would need infinite terms in the above term encoding.
                              
                           


                        
                           Example 2.18
                           Natural numbers with operations


                           When interested in operations on natural numbers we could build a term algebra 
                                 
                                    
                                       N
                                    
                                    
                                       op
                                    
                                 
                               from 
                                 N
                               of Example 2.14 by adding operators and equations related to the operators, as well as variables. Consider two sorts 
                                 S
                                 =
                                 {
                                 g
                                 ,
                                 
                                    op
                                 
                                 }
                               and have all ground terms from Example 2.14 to be of sort g, i.e., put the constant 0 and the successor function to be of sort g. Take the order 
                                 g
                                 <
                                 
                                    op
                                 
                              , saying that any ground number g is also a number term with operations. Now define any operations, like 
                                 _
                                 +
                                 _
                               or 
                                 _
                                 −
                                 _
                               , to be of sort op, i.e., taking as input op terms and returning op terms. Put the standard definition of such an operator into equations, e.g.: 
                                 s
                                 (
                                 0
                                 )
                                 +
                                 x
                                 =
                                 s
                                 (
                                 x
                                 )
                              . One can also put as equations the standard properties of such operators, like commutativity. So in our example 
                                 
                                    
                                       N
                                    
                                    
                                       op
                                    
                                 
                                 =
                                 (
                                 {
                                 s
                                 ,
                                 0
                                 ,
                                 +
                                 ,
                                 −
                                 }
                                 ,
                                 X
                                 ,
                                 S
                                 )
                              . The sorts have been used just to make the representation nicer, i.e., having the natural numbers as building blocks on which the operations work. But in the presence of equations we can safely do without sorts; we will just have the successor function possibly applied to an operation like 
                                 s
                                 (
                                 s
                                 (
                                 0
                                 )
                                 +
                                 s
                                 (
                                 s
                                 (
                                 0
                                 )
                                 )
                                 )
                              .

With such a definition of natural numbers with operations as terms, we can then work with them as usual in mathematical proofs, but also as terms when the psi-calculi rigour requires it. In particular, when using a proof assistant, as is customarily done when making meta-proofs for psi-calculi, we would need to select an appropriate package to work with natural numbers, and with sets and multi-sets. These packages would be using encodings on the lines described above, to every detail. For this paper we stick to the well-known intuitive notations for natural numbers and multi-sets.


                        
                           Example 2.19
                           Multi-sets with operations


                           Take the sets and multi-sets of Example 2.17 and add functional symbols for standard operations like: 
                                 _
                                 ∪
                                 _
                               , 
                                 _
                                 ∖
                                 _
                               , 
                                 _
                                 +
                                 _
                               (the last one standing for summation of multi-sets). Consider the definitions of these operations in the equations; for example 
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 :
                                 
                                    
                                       e
                                    
                                    
                                       2
                                    
                                 
                                 :
                                 ∅
                                 ∪
                                 
                                    
                                       e
                                    
                                    
                                       3
                                    
                                 
                                 :
                                 ∅
                                 =
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                 
                                 :
                                 
                                    
                                       e
                                    
                                    
                                       2
                                    
                                 
                                 :
                                 
                                    
                                       e
                                    
                                    
                                       3
                                    
                                 
                                 :
                                 ∅
                              . Variables 
                                 X
                               are included as well. We could also add sorts for ground sets and sets with operators, as we did in the previous example. We denote such sets and multi-sets with operators and variables over some E by 
                                 
                                    
                                       2
                                    
                                    
                                       op
                                    
                                    
                                       E
                                    
                                 
                                 =
                                 (
                                 {
                                 :
                                 ,
                                 ∅
                                 ,
                                 ∪
                                 ,
                                 ∖
                                 }
                                 ,
                                 X
                                 )
                               and 
                                 
                                    
                                       N
                                    
                                    
                                       op
                                    
                                    
                                       E
                                    
                                 
                                 =
                                 (
                                 {
                                 :
                                 ,
                                 ∅
                                 ,
                                 +
                                 ,
                                 −
                                 }
                                 ,
                                 X
                                 )
                              .

Many times data structures used in computer science are multi-sorted, and thinking in terms of sorts makes our results easier to follow. Therefore, we give a few definitions for sorts in the case when names are present. Complete treatment can be found in references like [8,29–31].


                        
                           Definition 2.20
                           Multi-sorted nominal datatypes, cf. [8, ch. 8] or [29]
                           


                           Consider a set of name sorts 
                              
                                 
                                    
                                       S
                                    
                                    
                                       N
                                    
                                 
                               disjoint from the set of sorts used for the datastructures, which we will call data sorts and denote 
                                 
                                    
                                       S
                                    
                                    
                                       D
                                    
                                 
                              . Each name is assigned a name sort, the same as we were doing for variables. Name swapping is now sort-respecting in the sense that the two names being swapped must have the same name sort. In consequence, freshness and name abstraction are also sort-respecting (see [8, ch. 4.7]). Nominal datastructures are built over sorts described using the following grammar:
                                 
                                    
                                       
                                          S
                                          :
                                          :
                                          =
                                          
                                             
                                                S
                                             
                                             
                                                N
                                             
                                          
                                          |
                                          
                                             
                                                S
                                             
                                             
                                                D
                                             
                                          
                                          |
                                          1
                                          |
                                          
                                             
                                                S
                                             
                                             
                                                N
                                             
                                          
                                          :
                                          S
                                          |
                                          (
                                          S
                                          ,
                                          S
                                          )
                                       
                                    
                                 
                               This basically describes binding sorts and pairs (and thus tuples) sorts. Functions are defined as 
                                 f
                                 :
                                 S
                                 →
                                 
                                    
                                       S
                                    
                                    
                                       D
                                    
                                 
                               always returning a data sort. Terms are built respecting the sorting, including information about name binding.

Our use of sorts in psi-calculi is rather simplistic, mainly to make sure that the right kind of terms are being used in the right place; e.g., when receiving data on a channel. We prefer to minimise mentioning sorting aspects, as for our results these details would mean too much cluttering without gained insights or correctness concerns. Nevertheless, when strictness is necessary, like when working with a proof assistant, then all details of the sorting should be in place, and the methods described in [30,31] should be followed. We give here a brief definition of some main aspects of sorted psi-calculi.


                        
                           Definition 2.21
                           Sorted psi-calculi, [30, sec. 2.4]
                           


                           Multi-sorted psi-calculi use two main notions on top of multi-sorted nominal datatypes: 
                                 sorts for channels
                                 
                                    specify for each sort (designating terms that can be the subject of a channel) the sort of terms (objects) that can be send/received on that channel;

need to know which sorts (of terms) can substitute which sorts of names; i.e., a relation 
                                          
                                             
                                                <
                                             
                                             
                                                sub
                                             
                                          
                                          ⊆
                                          
                                             
                                                S
                                             
                                             
                                                N
                                             
                                          
                                          ×
                                          S
                                       . The relation on sorts from Definition 2.15 is respected in the sense that if 
                                          a
                                          
                                             
                                                <
                                             
                                             
                                                sub
                                             
                                          
                                          
                                             
                                                s
                                             
                                             
                                                2
                                             
                                          
                                        and 
                                          
                                             
                                                s
                                             
                                             
                                                1
                                             
                                          
                                          <
                                          
                                             
                                                s
                                             
                                             
                                                2
                                             
                                          
                                        then 
                                          a
                                          
                                             
                                                <
                                             
                                             
                                                sub
                                             
                                          
                                          
                                             
                                                s
                                             
                                             
                                                1
                                             
                                          
                                       .

In our work we rely on sorts to give some discipline in building psi-terms without cluttering unnecessarily the notation. Sorts are intuitive and we will abuse the notation and rely on the context and intuition to disambiguate. Here are a few examples of our simple way of using sorts in the psi-instances that we will define.


                        
                           Example 2.22
                           Simple use of sorts in psi-instances


                           Often a function like pairing is multi-sorted, 
                                 (
                                 _
                                 ,
                                 _
                                 )
                                 :
                                 
                                    
                                       s
                                    
                                    
                                       1
                                    
                                 
                                 ×
                                 
                                    
                                       s
                                    
                                    
                                       2
                                    
                                 
                                 →
                                 
                                    
                                       s
                                    
                                    
                                       3
                                    
                                 
                              . The left parameter may be of sort natural numbers whereas the right parameter may be a multiset; everything could be considered of sort pairs. We would like to allow names to be used as parameters, and these names could be replaced upon a psi-communication. In this case we just say that the names must be of sort natural number and multiset. In consequence, the substitutions to respect the sorts should replace the name on the left only with natural number terms and the name on the right only with multisets.

In this section we provide a psi-calculus representation of finite prime event structures (recalled in Definition 3.1).

It is fairly easy to represent the interleaving, transition semantics for a finite event structure as a psi-calculus term. However, in contrast to most process calculi, event structures and more expressive event-based models of concurrency [32–39] come with a non-interleaving semantics. A non-interleaving semantics makes it possible to distinguish between interleaving and independence (sometimes called “true” concurrency) and are well behaved wrt. action refinement [17]. A simple example is given by two concurrent processes executing each a different instance of the same action a. An interleaving transition system based model would represent such a process by an “interleaving” diamond with all four sides labelled by the same action, which semantically typically would be equal to the sequential composition 
                        a
                        .
                        a
                      of the two actions. Refining the action a into 
                        a
                        1
                        .
                        a
                        2
                      in the semantical model, would thus result in the single sequence 
                        a
                        1
                        .
                        a
                        2
                        .
                        a
                        1
                        .
                        a
                        2
                      as the possible behaviour. However, when refining the parallel composition of two concurrent processes that both executes a, one would expect all possible interleavings, that is, the two different behaviours 
                        {
                        a
                        1
                        .
                        a
                        2
                        .
                        a
                        1
                        .
                        a
                        2
                        ,
                        a
                        1
                        .
                        a
                        1
                        .
                        a
                        2
                        .
                        a
                        2
                        }
                     .

The encoding of finite prime event structures into the instance of psi-calculi, which we call 
                        eventPsi
                     , not only preserves the behaviour of event structures up to interleaving diamonds, but it also preserves the causal structure by exploiting the assertions and conditions of psi-calculi, and as a consequence is also compatible with action refinement.

We show in the subsequent section that this idea can be generalised to DCR graphs, and we believe that also other generalised versions of event structures [14,36] can be represented as psi-calculi following a similar approach as presented here.

We follow the standard notation and terminology from [40, sec. 8].


                        
                           Definition 3.1
                           Prime event structures


                           
                              A labelled prime event structure over alphabet Act is a tuple 
                                 E
                                 =
                                 (
                                 E
                                 ,
                                 ≤
                                 ,
                                 ♯
                                 ,
                                 l
                                 )
                               where E is a possibly infinite set of events, 
                                 ≤
                                 ⊆
                                 E
                                 ×
                                 E
                               is a partial order (the causality relation) satisfying
                                 
                                    1.
                                    
                                       the principle of finite causes, i.e.: 
                                          ∀
                                          e
                                          ∈
                                          E
                                          :
                                          {
                                          d
                                          ∈
                                          E
                                          |
                                          d
                                          ≤
                                          e
                                          }
                                        is finite,


                                       the principle of conflict heredity, i.e., 
                                          ∀
                                          d
                                          ,
                                          e
                                          ,
                                          f
                                          ∈
                                          E
                                          :
                                          d
                                          ≤
                                          e
                                          ∧
                                          d
                                          ♯
                                          f
                                          ⇒
                                          e
                                          ♯
                                          f
                                       
                                    

Intuitively, a prime event structure models a concurrent system by taking 
                           d
                           ≤
                           e
                         to mean that event d is a prerequisite of event e, i.e., event e cannot happen before event d has been done. A conflict 
                           d
                           ♯
                           e
                         says that events d and e cannot both happen in the same run. Compared to other models of concurrency like process algebras, event structures model systems by looking only at their events, and how these events relate to each other. The two basic relations considered by event structures are the dependency and the conflict relations. The conflict relation can be used to capture choices made by the system, since the execution of one event discards all other events in conflict with itself for the rest of the computation.

Labels can be understood as actions, with a wide and general meaning. Events are instances of actions, and an action can happen several times, thus as different events. The same action can also happen in different components running in parallel, giving rise to autoconcurrency, as exemplified in the beginning of this section. Actions are important for observational equivalence, but not only them (see Example 3.5).


                        
                           Example 3.2
                           In Fig. 2
                               we pictured four simple examples of finite event structures (taken from [41, Fig. 4]). We illustrate events as boxes containing their labels, the dependency relation by arrows, and the conflict relation by dashed lines with a ♯ sign. In the left-most event structure we have three events, where the events labelled b and c depend on the event labelled a and are in conflict with each other. This is a standard branching point which could be specified in a simple CCS notation as 
                                 a
                                 ;
                                 (
                                 b
                                 +
                                 c
                                 )
                              . In the second event structure we have two (conflicting) events, both labelled with a, and two events labelled b and c which depend on the first and the second a-labelled event respectively. Because of the principle of conflict hereditary, b is in conflict with the lower a-labelled event and similarly, c is in conflict with the upper a-labelled event (but the conflict relations are in this case usually not explicitly illustrated). In CCS notation this could be 
                                 a
                                 ;
                                 b
                                 +
                                 a
                                 ;
                                 c
                              . In the third event structure we have just two events without any explicit or inherited relation, which means that they are concurrent (e.g., 
                                 a
                                 ‖
                                 b
                              ), as made precise below. The last event structure is similar to the second, except that it offers two conflicting paths with the label a followed by b or b followed by a respectively.


                        
                           Definition 3.3
                           Concurrency


                           
                              Causal independence (concurrency) between events is defined in terms of the above two relations as
                                 
                                    
                                       
                                          d
                                          ‖
                                          e
                                          
                                          
                                             =
                                             ▵
                                          
                                          
                                          ¬
                                          (
                                          d
                                          
                                          ≤
                                          
                                          e
                                          ∨
                                          e
                                          
                                          ≤
                                          
                                          d
                                          ∨
                                          d
                                          
                                          ♯
                                          
                                          e
                                          )
                                          .
                                       
                                    
                                 
                              
                           

This definition captures the intuition that two events are concurrent when there is no causal dependence between the two and, moreover, they are not in conflict.

From the definition it follows that only the two events in the third event structure in Fig. 2 are concurrent.

The behaviour of an event structure is described by subsets of events that happened in some (partial) run of the system being modelled. This is called a configuration of the event structure, and steps can be defined between configurations.


                        
                           Definition 3.4
                           Configurations


                           Define a configuration of an event structure 
                                 E
                                 =
                                 (
                                 E
                                 ,
                                 ≤
                                 ,
                                 ♯
                                 )
                               to be a finite subset of events 
                                 C
                                 ⊆
                                 E
                               that respects:
                                 
                                    1.
                                    
                                       conflict-freeness: 
                                          ∀
                                          e
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          C
                                          :
                                          ¬
                                          (
                                          e
                                          ♯
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                        and,


                                       downwards-closure: 
                                          ∀
                                          e
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          E
                                          :
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          ≤
                                          e
                                          ∧
                                          e
                                          ∈
                                          C
                                          ⇒
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          C
                                       .

Conflict-freeness is saying that no two conflicting events can happen in one run. This also says that once an event is discarded it can never be executed on the current run. This is similar to how the semantics of the choice operator in process algebras is defined (see rule (case) in Section 2) where all other branches of the choice are discarded once a step is taken. The downwards-closure says that all the dependencies of an executed event (i.e., which is part of a configuration) must have been executed also (on this same run).

Note in particular that ∅ is a configuration (i.e., the root configuration) and that any set 
                           ⌈
                           e
                           ⌉
                           
                              =
                              ▵
                           
                           {
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                           ∈
                           E
                           |
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                           ≤
                           e
                           }
                         is also a configuration determined by the single event e. Events determine steps between configurations in the sense that 
                           C
                           
                              →
                              e
                           
                           
                              
                                 C
                              
                              
                                 ′
                              
                           
                         whenever 
                           C
                           ,
                           
                              
                                 C
                              
                              
                                 ′
                              
                           
                         are configurations, 
                           e
                           ∉
                           C
                        , and 
                           
                              
                                 C
                              
                              
                                 ′
                              
                           
                           =
                           C
                           ∪
                           {
                           e
                           }
                        .


                        
                           Example 3.5
                           For the examples from Fig. 2 we get the configurations and steps depicted in Fig. 3
                              .

One may note that if only the paths of labels are observed, the two first event structures are indistinguishable, but if the branching structure is observed, i.e. by a bisimulation equivalence, they are distinguishable. One may also note that if the paths of labels are observed and even if branching time is observed, the two latter event structures are indistinguishable, but if concurrency is observed, i.e. by a history-preserving bisimulation equivalence [42,17], they are distinguishable.


                        
                           Remark 3.6
                           It is known (see e.g., [40, Prop. 18]) that prime event structures are fully determined by their sets of configurations, i.e., the relations of causality, conflict, and concurrency can be recovered only from the set of configurations 
                                 
                                    
                                       C
                                    
                                    
                                       E
                                    
                                 
                               as follows:
                                 
                                    1.
                                    
                                       
                                          e
                                          ≤
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                        iff 
                                          ∀
                                          C
                                          ∈
                                          
                                             
                                                C
                                             
                                             
                                                E
                                             
                                          
                                          :
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          C
                                          ⇒
                                          e
                                          ∈
                                          C
                                       ;


                                       
                                          e
                                          ♯
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                        iff 
                                          ∀
                                          C
                                          ∈
                                          
                                             
                                                C
                                             
                                             
                                                E
                                             
                                          
                                          :
                                          ¬
                                          (
                                          e
                                          ∈
                                          C
                                          ∧
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          C
                                          )
                                       ;


                                       
                                          e
                                          ‖
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                        iff 
                                          ∃
                                          C
                                          ,
                                          
                                             
                                                C
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          
                                             
                                                C
                                             
                                             
                                                E
                                             
                                          
                                          :
                                          e
                                          ∈
                                          C
                                          ∧
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          ∉
                                          C
                                          ∧
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          
                                             
                                                C
                                             
                                             
                                                ′
                                             
                                          
                                          ∧
                                          e
                                          ∉
                                          
                                             
                                                C
                                             
                                             
                                                ′
                                             
                                          
                                          ∧
                                          C
                                          ∪
                                          
                                             
                                                C
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          
                                             
                                                C
                                             
                                             
                                                E
                                             
                                          
                                       .

It is also known (see e.g., [40, Sec. 8] for prime event structures or [17, Sec. 4] for the more general event structures of [14]) that there is no loss of expressiveness when working with finite, instead of infinite configurations. An infinite configuration can be obtained from infinite union of finite configurations coming from an infinite run.

For some event e we denote by 
                           ≤
                           e
                           =
                           {
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                           ∈
                           E
                           |
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                           ≤
                           e
                           }
                         the set of all events which are conditions of e (which is the same as the notation 
                           ⌈
                           e
                           ⌉
                         from [40], but we prefer to use the above so to be more consistent with similar notations we use in the rest of this paper for similar sets defined for DCRs too), and 
                           ♯
                           e
                           =
                           {
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                           ∈
                           E
                           |
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                           ♯
                           e
                           }
                         those events in conflict with e. We denote by 
                           <
                           e
                           =
                           ≤
                           e
                           ∖
                           {
                           e
                           }
                         the non-trivial conditions of e, i.e., excluding itself.

In this section we provide an encoding of finite prime event structures into an instance of psi-calculi which we call 
                           eventPsi
                        . We consider finite event structures only, since it is not the goal of our work to represent denotational models. Moreover, the direct encoding we are aiming for of event structures with infinite sets of events would require a treatment in psi-calculi of infinite parallel composition, infinite terms, frame definition, and careful look at the SOS rules which use entailment among infinite assertion and condition terms. Such a treatment is beyond the scope of the paper. We will instead see in the next section how to encode an event-based model generalising event structures to allow finite representations of infinite behaviour.

The intuition of the encoding is to represent event structure configurations as assertions and the causality and conflict relations as conditions. We do this by taking assertions A to be sets of events representing the history of executed events, i.e. a configuration, and composition just set union. Conditions C are taken to be pairs 
                           (
                           p
                           ,
                           c
                           )
                         of sets of events and entailment relation is then defined such that p represents the preconditions of an event, i.e. ≤e, and c represents the conflict set, i.e. ♯e. That is, an assertion (history of executed events) Ψ entails a condition 
                           (
                           p
                           ,
                           c
                           )
                         if and only if 
                           p
                           ⊆
                           Ψ
                         (the preconditions have been executed) and 
                           c
                           ∩
                           Ψ
                           =
                           ∅
                         (none of the conflicting events have been executed). Finally, we take the set of terms T to be simply a set of constants representing the events. To keep the exposition simple, we will ignore event labels until Section 3.3, where we treat action refinement. But labels could easily be added by redefining the terms to be pairs of an event and its label, for some given labelling function; e.g., 
                           (
                           e
                           ,
                           l
                           (
                           e
                           )
                           )
                        .


                        
                           Definition 3.7
                           Event psi-calculus over E
                           


                           We define a psi-calculus instance, called 
                                 eventPsi
                              , parametrised by a set E of constant symbols, to be understood as events, by providing the following definitions of the key elements of a psi-calculus instance:
                                 
                                    
                                       
                                          
                                             
                                                T
                                             
                                             
                                                
                                                
                                                   =
                                                   
                                                      def
                                                   
                                                
                                             
                                             
                                                
                                                E
                                             
                                          
                                          
                                             
                                                C
                                             
                                             
                                                
                                                
                                                   =
                                                   
                                                      def
                                                   
                                                
                                             
                                             
                                                
                                                (
                                                
                                                   
                                                      2
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ×
                                                
                                                   
                                                      2
                                                   
                                                   
                                                      E
                                                   
                                                
                                                )
                                                ∪
                                                {
                                                e
                                                
                                                   ↔
                                                   ⋅
                                                
                                                f
                                                |
                                                e
                                                ,
                                                f
                                                ∈
                                                T
                                                }
                                             
                                          
                                          
                                             
                                                A
                                             
                                             
                                                
                                                
                                                   =
                                                   
                                                      def
                                                   
                                                
                                             
                                             
                                                
                                                
                                                   
                                                      2
                                                   
                                                   
                                                      E
                                                   
                                                
                                             
                                          
                                          
                                             
                                                ⊗
                                             
                                             
                                                
                                                
                                                   =
                                                   
                                                      def
                                                   
                                                
                                             
                                             
                                                
                                                ∪
                                             
                                          
                                          
                                             
                                                
                                                   1
                                                
                                             
                                             
                                                
                                                
                                                   =
                                                   
                                                      def
                                                   
                                                
                                             
                                             
                                                
                                                ∅
                                             
                                          
                                          
                                             
                                                ⊢
                                             
                                             
                                                
                                                
                                                   =
                                                   
                                                      def
                                                   
                                                
                                             
                                             
                                                
                                                
                                                   {
                                                   
                                                      
                                                         
                                                            Ψ
                                                            ⊢
                                                            (
                                                            D
                                                            ,
                                                            C
                                                            )
                                                            
                                                            iff
                                                            
                                                            (
                                                            D
                                                            ⊆
                                                            Ψ
                                                            )
                                                            ∧
                                                            (
                                                            C
                                                            ∩
                                                            Ψ
                                                            =
                                                            ∅
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            Ψ
                                                            ⊢
                                                            e
                                                            
                                                               ↔
                                                               ⋅
                                                            
                                                            f
                                                            
                                                            iff
                                                            
                                                            e
                                                            =
                                                            f
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                               where T, C, and A are algebraic data types built over the constants in E.

It is easy to see that our definitions respect the restrictions of making a psi-calculus instance. In particular, channel equivalence is symmetric and transitive since equality is. The ⊗ is compositional, associative and commutative, as ∪ is; and moreover 
                           ∅
                           ∪
                           S
                           =
                           S
                        , for any set S, i.e., 1 is the identity for ⊗.


                        
                           Remark 3.8
                           We are not using the nominal aspects of psi-calculi. Throughout the rest of this section we do not work with names, and therefore the support of all terms will be empty. Names will make their appearance in the encoding of DCRs in Section 4.

We are now ready to provide the encoding espsi which maps a finite prime event structure and a configuration to an 
                           eventPsi
                        -process. The 
                           eventPsi
                        -process is defined as a parallel composition of atomic “event processes”. These come in two forms: The first, defined simply as an assertion process, corresponds to events in the configuration of the translated event structure (i.e., those that already happened). The latter corresponds to events that have not happened yet and are defined using the case construct with a condition 
                           
                              
                                 φ
                              
                              
                                 e
                              
                           
                           =
                           (
                           p
                           ,
                           c
                           )
                         where 
                           p
                           =
                           <
                           e
                        , i.e. the preconditions of the event e, and 
                           c
                           =
                           ♯
                           e
                         is the set of events that e is in conflict with. The definition of entailment then ensures that the case process can execute if and only if the event is enabled, and if it executes, the event is asserted, thereby updating the configuration. To easily observe which event happened, we also communicate the event e on the channel e.


                        
                           Definition 3.9
                           Event structures to 
                                 eventPsi
                              
                           


                           For 
                                 E
                                 =
                                 (
                                 E
                                 ,
                                 ≤
                                 ,
                                 ♯
                                 )
                               an event structure and a configuration C of 
                                 E
                              , define 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                               as
                                 
                                    
                                       
                                          
                                             
                                                
                                                   espsi
                                                
                                                (
                                                E
                                                ,
                                                C
                                                )
                                                
                                                =
                                                
                                                ∥
                                             
                                             
                                                e
                                                ∈
                                                E
                                             
                                          
                                          
                                             
                                                P
                                             
                                             
                                                e
                                             
                                          
                                       
                                    
                                 
                               with
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                e
                                             
                                          
                                          =
                                          
                                             {
                                             
                                                
                                                   
                                                      ⦇
                                                      {
                                                      e
                                                      }
                                                      ⦈
                                                   
                                                   
                                                      if
                                                      
                                                      e
                                                      ∈
                                                      C
                                                   
                                                
                                                
                                                   
                                                      
                                                         case
                                                      
                                                      
                                                      
                                                         
                                                            φ
                                                         
                                                         
                                                            e
                                                         
                                                      
                                                      :
                                                      
                                                         
                                                            e
                                                         
                                                         ‾
                                                      
                                                      〈
                                                      e
                                                      〉
                                                      .
                                                      ⦇
                                                      {
                                                      e
                                                      }
                                                      ⦈
                                                   
                                                   
                                                      otherwise
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                               where 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 (
                                 <
                                 e
                                 ,
                                 ♯
                                 e
                                 )
                              . If the configuration is empty we will allow writing 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 )
                               for 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 ∅
                                 )
                              .

We often use the product notation in situations as above, i.e., 
                           
                              
                                 ∏
                              
                              
                                 e
                                 ∈
                                 E
                              
                           
                           
                              
                                 P
                              
                              
                                 e
                              
                           
                         to mean the parallel composition of the 
                           
                              
                                 P
                              
                              
                                 e
                              
                           
                         processes.

We have seen that the 
                           eventPsi
                        -processes that we obtain from event structures in Definition 3.9 have a specific syntactic form. But the 
                           eventPsi
                         instance allows any process term to be constructed over the three nominal data-types that we gave in Definition 3.7. Below we give the syntactic restrictions on 
                           eventPsi
                        -process terms corresponding to event structures, via the mapping defined by Theorem 3.19.


                        
                           Definition 3.10
                           Syntactic restrictions for 
                                 eventPsi
                              
                           


                           We define an 
                                 eventPsi
                              -process to be syntactically correct if it is constructed using the grammar:
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                ES
                                             
                                          
                                          
                                          :
                                          =
                                          
                                          ⦇
                                          {
                                          e
                                          }
                                          ⦈
                                          
                                          |
                                          
                                          
                                             case
                                          
                                          
                                          φ
                                          :
                                          
                                             
                                                e
                                             
                                             ‾
                                          
                                          〈
                                          e
                                          〉
                                          .
                                          ⦇
                                          {
                                          e
                                          }
                                          ⦈
                                          
                                          |
                                          
                                          
                                             
                                                P
                                             
                                             
                                                ES
                                             
                                          
                                          
                                          ∥
                                          
                                          
                                             
                                                P
                                             
                                             
                                                ES
                                             
                                          
                                       
                                    
                                 
                               and moreover, it respects the following constraints, for any 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 ,
                                 
                                    
                                       φ
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                               from 
                                 
                                    case
                                 
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 :
                                 
                                    
                                       e
                                    
                                    ‾
                                 
                                 〈
                                 e
                                 〉
                                 .
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                               respectively 
                                 
                                    case
                                 
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 :
                                 
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                    ‾
                                 
                                 〈
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 〉
                                 .
                                 ⦇
                                 {
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 }
                                 ⦈
                              :
                                 
                                    1.
                                    conflict: (i) 
                                          e
                                          ∉
                                          
                                             
                                                π
                                             
                                             
                                                R
                                             
                                          
                                          (
                                          
                                             
                                                φ
                                             
                                             
                                                e
                                             
                                          
                                          )
                                        and (ii) 
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          
                                             
                                                π
                                             
                                             
                                                R
                                             
                                          
                                          (
                                          
                                             
                                                φ
                                             
                                             
                                                e
                                             
                                          
                                          )
                                          ⇔
                                          e
                                          ∈
                                          
                                             
                                                π
                                             
                                             
                                                R
                                             
                                          
                                          (
                                          
                                             
                                                φ
                                             
                                             
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          )
                                       ;

causality: (i) 
                                          e
                                          ∉
                                          
                                             
                                                π
                                             
                                             
                                                L
                                             
                                          
                                          (
                                          
                                             
                                                φ
                                             
                                             
                                                e
                                             
                                          
                                          )
                                        and (ii) 
                                          e
                                          ∈
                                          
                                             
                                                π
                                             
                                             
                                                L
                                             
                                          
                                          (
                                          
                                             
                                                φ
                                             
                                             
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          )
                                          ⇒
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          ∉
                                          
                                             
                                                π
                                             
                                             
                                                L
                                             
                                          
                                          (
                                          
                                             
                                                φ
                                             
                                             
                                                e
                                             
                                          
                                          )
                                          ∧
                                          
                                             
                                                π
                                             
                                             
                                                L
                                             
                                          
                                          (
                                          
                                             
                                                φ
                                             
                                             
                                                e
                                             
                                          
                                          )
                                          ⊂
                                          
                                             
                                                π
                                             
                                             
                                                L
                                             
                                          
                                          (
                                          
                                             
                                                φ
                                             
                                             
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          )
                                          )
                                       ;

executed events: for any e, 
                                          
                                             
                                                P
                                             
                                             
                                                ES
                                             
                                          
                                        will have at most one of 
                                          ⦇
                                          {
                                          e
                                          }
                                          ⦈
                                        or 
                                          
                                             case
                                          
                                          
                                          φ
                                          :
                                          
                                             
                                                e
                                             
                                             ‾
                                          
                                          〈
                                          e
                                          〉
                                          .
                                          ⦇
                                          {
                                          e
                                          }
                                          ⦈
                                       .

To justify for the last restriction assume having 
                           ⦇
                           {
                           e
                           }
                           ⦈
                           ∥
                           
                              case
                           
                           
                           
                              
                                 φ
                              
                              
                                 e
                              
                           
                           :
                           
                              
                                 e
                              
                              ‾
                           
                           〈
                           e
                           〉
                           .
                           ⦇
                           {
                           e
                           }
                           ⦈
                         part of 
                           
                              
                                 P
                              
                              
                                 ES
                              
                           
                        . This would say that e has already happened and at the same time e can happen in future when the case condition holds. This cannot be in event structures, and thus needs to be ruled out.


                        
                           Definition 3.11
                           Event transitions


                           We define transitions between syntactically correct 
                                 eventPsi
                               processes P and 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               to be 
                                 P
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               iff 
                                 
                                    1
                                 
                                 ▷
                                 P
                                 
                                    →
                                    
                                       
                                          
                                             e
                                          
                                          ‾
                                       
                                       e
                                    
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                              .


                        
                           Remark 3.12
                           Arbitrary 
                                 eventPsi
                              -processes can have different kinds of labelled transitions, but for syntactically correct processes the restrictions guarantee that only event transitions exist.


                        
                           Lemma 3.13
                           
                              For a syntactically correct 
                              
                                 eventPsi
                               
                              process P and a transition 
                              
                                 P
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               
                              then 
                              
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               
                              is also syntactically correct.
                           


                        
                           Proof
                           Having 
                                 P
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                              , we know from the transition rules of psi-calculi, and the syntactic restrictions of Definition 3.10 that 
                                 P
                                 =
                                 
                                    case
                                 
                                 
                                 φ
                                 :
                                 
                                    
                                       e
                                    
                                    ‾
                                 
                                 〈
                                 e
                                 〉
                                 .
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                                 ∥
                                 Q
                               where Q is syntactically correct and does not contain another (case or assertion process) 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                              , i.e., indexed by the same e. Recall that ∅ is the unit assertion 1, and that the minimal process 0 is equivalent with the 
                                 ⦇
                                 ∅
                                 ⦈
                              , which can be in place of Q so that the parallel composition ends. The transition thus is
                                 
                                    
                                       
                                          
                                             case
                                          
                                          
                                          φ
                                          :
                                          
                                             
                                                e
                                             
                                             ‾
                                          
                                          〈
                                          e
                                          〉
                                          .
                                          ⦇
                                          {
                                          e
                                          }
                                          ⦈
                                          ∥
                                          Q
                                          
                                          
                                          
                                             ⇝
                                             e
                                          
                                          
                                          
                                          ⦇
                                          {
                                          e
                                          }
                                          ⦈
                                          ∥
                                          Q
                                          
                                          
                                          =
                                          
                                          
                                          
                                             
                                                P
                                             
                                             
                                                ′
                                             
                                          
                                          
                                          .
                                       
                                    
                                 
                               As we know that Q is syntactically correct and it does not contain another 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               then 
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                                 ∥
                                 Q
                                 =
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               is also syntactically correct.  □


                        
                           Lemma 3.14
                           Correspondence configuration—frame


                           
                              For any event structure 
                              
                                 E
                               
                              and configuration C, the frame of the 
                              
                                 eventPsi
                              
                              -process 
                              
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                               
                              is the same as the configuration C.
                           


                        
                           Proof
                           Denote 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                                 =
                                 
                                    
                                       P
                                    
                                    
                                       E
                                    
                                    
                                       C
                                    
                                 
                               defined as in Definition 3.9. The frame of 
                                 
                                    
                                       P
                                    
                                    
                                       E
                                    
                                    
                                       C
                                    
                                 
                               is the composition with ⊗ of the frames of 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               for 
                                 e
                                 ∈
                                 E
                              . As 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               is either 
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                               if 
                                 e
                                 ∈
                                 C
                               or 
                                 
                                    case
                                 
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 :
                                 
                                    
                                       e
                                    
                                    ‾
                                 
                                 〈
                                 e
                                 〉
                                 .
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                               then the frame of 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               would be either 
                                 F
                                 (
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                                 )
                                 =
                                 {
                                 e
                                 }
                               or 
                                 F
                                 (
                                 
                                    case
                                 
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 :
                                 
                                    
                                       e
                                    
                                    ‾
                                 
                                 〈
                                 e
                                 〉
                                 .
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                                 )
                                 =
                                 
                                    1
                                 
                                 =
                                 ∅
                              . Thus the frame of 
                                 
                                    
                                       P
                                    
                                    
                                       E
                                    
                                 
                               is the union of ∅ and all events in C.  □


                        
                           Lemma 3.15
                           Transitions are preserved


                           
                              For any event structure 
                              
                                 E
                               
                              and any of its configurations C, any transition from this configuration 
                              
                                 C
                                 
                                    →
                                    e
                                 
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                               
                              is matched by a transition 
                              
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                                 
                                    ⇝
                                    e
                                 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                                 )
                               
                              in the corresponding 
                              
                                 eventPsi
                              
                              -process.
                           


                        
                           Proof
                           By Lemma 3.14 the frame of 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                               is the same as C. The assumption of the lemma, i.e., the existence of the step between configurations, implies that e is enabled by the configuration C. This means that 
                                 e
                                 ∉
                                 C
                              , which implies by Definition 3.9 that 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                                 =
                                 
                                    case
                                 
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 :
                                 
                                    
                                       e
                                    
                                    ‾
                                 
                                 〈
                                 e
                                 〉
                                 .
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                                 ∥
                                 Q
                              . This implies that 
                                 F
                                 (
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                                 )
                                 =
                                 
                                    1
                                 
                                 ⊗
                                 F
                                 (
                                 Q
                                 )
                                 =
                                 C
                              , with 
                                 e
                                 ∉
                                 C
                              , meaning that 
                                 F
                                 (
                                 Q
                                 )
                                 =
                                 C
                              . Moreover, since C enables e it means that all <e are in C and no ♯e is in C, which is the definition of entailment relation in 
                                 eventPsi
                              , i.e., 
                                 F
                                 (
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                                 )
                                 ⊢
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                              , which enables the step from 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                               that the lemma expects. After 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               we have 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                                 ∥
                                 Q
                               and 
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 =
                                 F
                                 (
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                                 )
                                 ⊗
                                 F
                                 (
                                 Q
                                 )
                                 =
                                 {
                                 e
                                 }
                                 ∪
                                 C
                                 =
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                              . From the definition of the translation function espsi it is easy to see that 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 =
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                                 ∥
                                 Q
                              .  □


                        
                           Lemma 3.16
                           Transitions are reflected


                           
                              For an event structure 
                              
                                 E
                               
                              and a configuration C, any transition 
                              
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               
                              is matched by a step 
                              
                                 C
                                 
                                    →
                                    e
                                 
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                              
                              , with 
                              
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              .
                           


                        
                           Proof
                           We know that for 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                               to have a transition labelled with e it must be of the form 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                                 =
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                                 ∥
                                 Q
                               where 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 
                                    case
                                 
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 :
                                 
                                    
                                       e
                                    
                                    ‾
                                 
                                 〈
                                 e
                                 〉
                                 .
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                              , with 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 (
                                 <
                                 e
                                 ,
                                 ♯
                                 e
                                 )
                              . We know from Lemma 3.14 that the frame of 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                               is the assertion corresponding to C, which is 
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                                 ∥
                                 Q
                                 )
                                 =
                                 
                                    1
                                 
                                 ⊗
                                 
                                    
                                       Ψ
                                    
                                    
                                       Q
                                    
                                 
                                 =
                                 
                                    
                                       Ψ
                                    
                                    
                                       Q
                                    
                                 
                              . For the transition e to be enabled we also know from Definition 3.7 that 
                                 <
                                 e
                                 ⊆
                                 
                                    
                                       Ψ
                                    
                                    
                                       Q
                                    
                                 
                               and 
                                 ♯
                                 e
                                 ∩
                                 
                                    
                                       Ψ
                                    
                                    
                                       Q
                                    
                                 
                                 =
                                 ∅
                              . From how 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                               is created in the Definition 3.9 we know that e must be enabled in 
                                 (
                                 E
                                 ,
                                 C
                                 )
                              . Therefore, we have the transition 
                                 (
                                 E
                                 ,
                                 C
                                 )
                                 
                                    →
                                    e
                                 
                                 (
                                 E
                                 ,
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              , where 
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 {
                                 e
                                 }
                                 ∪
                                 C
                              .

After a transition 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                                 ∥
                                 Q
                                 
                                    ⇝
                                    e
                                 
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                                 ∥
                                 Q
                               we have that the new frame of the process is 
                                 {
                                 e
                                 }
                                 ∪
                                 
                                    
                                       Ψ
                                    
                                    
                                       Q
                                    
                                 
                              . From Definition 3.9 we see that 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                                 )
                               would create an 
                                 eventPsi
                              -process where all but the sub-process for e will be the same as for 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                              , and the sub-process 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               will be 
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                               instead of 
                                 
                                    case
                                 
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 :
                                 
                                    
                                       e
                                    
                                    ‾
                                 
                                 〈
                                 e
                                 〉
                                 .
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                              . This is the same process that we got after the transition in 
                                 eventPsi
                              .  □


                        
                           Theorem 3.17
                           Preserving interleaving diamonds


                           
                              For an event structure 
                              
                                 E
                                 =
                                 (
                                 E
                                 ,
                                 ≤
                                 ,
                                 ♯
                                 )
                               
                              with two concurrent events 
                              
                                 e
                                 ‖
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                              
                              , then in the translation 
                              
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 ∅
                                 )
                               
                              we find the behaviour forming the interleaving diamond, i.e., there exists a C s.t.
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   espsi
                                                
                                                (
                                                E
                                                ,
                                                C
                                                )
                                                
                                                   ⇝
                                                   e
                                                
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                   ⇝
                                                   
                                                      
                                                         e
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      2
                                                   
                                                
                                                
                                                 and 
                                             
                                          
                                          
                                             
                                                
                                                   espsi
                                                
                                                (
                                                E
                                                ,
                                                C
                                                )
                                                
                                                   ⇝
                                                   
                                                      
                                                         e
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      3
                                                   
                                                
                                                
                                                   ⇝
                                                   e
                                                
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      2
                                                   
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           


                        
                           Proof
                           In a prime event structure if two events 
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               are concurrent then there exists a configuration C reachable from the root which contains the conditions of both events, i.e., 
                                 <
                                 e
                                 ⊆
                                 C
                               and 
                                 <
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ⊆
                                 C
                              , and does not contain any of the two events, i.e., 
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∉
                                 C
                              . This can be seen from Remark 3.6(3) which ensures the existence of some configurations 
                                 
                                    
                                       C
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       C
                                    
                                    
                                       2
                                    
                                 
                              , and 
                                 
                                    
                                       C
                                    
                                    
                                       1
                                    
                                 
                                 ∪
                                 
                                    
                                       C
                                    
                                    
                                       2
                                    
                                 
                              , which contains both 
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                              . Removing from this last configuration both 
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               we still obtain a configuration. Take this configuration as the one C sought in the theorem. Therefore we have the following steps in the event structure: 
                                 C
                                 
                                    →
                                    e
                                 
                                 C
                                 ∪
                                 {
                                 e
                                 }
                              , 
                                 C
                                 
                                    →
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 C
                                 ∪
                                 {
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 }
                              , 
                                 C
                                 ∪
                                 {
                                 e
                                 }
                                 
                                    →
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 C
                                 ∪
                                 {
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 }
                              , and 
                                 C
                                 ∪
                                 {
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 }
                                 
                                    →
                                    e
                                 
                                 C
                                 ∪
                                 {
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 }
                              .

Since C is reachable from the root then by Lemma 3.15 all the steps are preserved in the behaviour of the 
                                 eventPsi
                              -process 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 ∅
                                 )
                              , meaning that 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                               is reachable from (i.e., part of the behaviour of) 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 ∅
                                 )
                              .

Since 
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∉
                                 C
                               we have that 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                               is in the form 
                                 
                                    
                                       P
                                    
                                    
                                       0
                                    
                                 
                                 =
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                                 ∥
                                 
                                    
                                       P
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 ∥
                                 Q
                               with 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               and 
                                 
                                    
                                       P
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                               processes of kind case. From Lemma 3.14 we know that the frame of 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                               is the assertion corresponding to C, which is 
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                                 ∥
                                 
                                    
                                       P
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 ∥
                                 Q
                                 )
                                 =
                                 ∅
                                 ∪
                                 ∅
                                 ∪
                                 
                                    
                                       Ψ
                                    
                                    
                                       Q
                                    
                                 
                                 =
                                 
                                    
                                       Ψ
                                    
                                    
                                       Q
                                    
                                 
                              .

From Lemma 3.15 we see the transitions between the 
                                 eventPsi
                              -processes: 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 
                                    ⇝
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    
                                       P
                                    
                                    
                                       2
                                    
                                 
                               with 
                                 
                                    
                                       P
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                                 ∥
                                 ⦇
                                 {
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 }
                                 ⦈
                                 ∥
                                 Q
                               as well as 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                                 
                                    ⇝
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    
                                       P
                                    
                                    
                                       3
                                    
                                 
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       4
                                    
                                 
                               with 
                                 
                                    
                                       P
                                    
                                    
                                       4
                                    
                                 
                                 =
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                                 ∥
                                 ⦇
                                 {
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 }
                                 ⦈
                                 ∥
                                 Q
                              . We thus have the expected interleaving diamond.

As an aside, remark that 
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 =
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       0
                                    
                                 
                                 )
                                 ⊗
                                 {
                                 e
                                 }
                               and 
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       3
                                    
                                 
                                 )
                                 =
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       0
                                    
                                 
                                 )
                                 ⊗
                                 {
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 }
                               thus 
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 ⊗
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       3
                                    
                                 
                                 )
                                 =
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       0
                                    
                                 
                                 )
                                 ⊗
                                 {
                                 e
                                 }
                                 ⊗
                                 {
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 }
                                 =
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       4
                                    
                                 
                                 )
                              , which says that 
                                 e
                                 ∈
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 ∧
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∉
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 ∧
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       3
                                    
                                 
                                 )
                                 ∧
                                 e
                                 ∉
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       3
                                    
                                 
                                 )
                                 ∧
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 ⊗
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       3
                                    
                                 
                                 )
                                 =
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       4
                                    
                                 
                                 )
                              . Using Lemma 3.14 these can be correlated with configurations and thus we can see the definition of concurrency from configurations as in Remark 3.6(3).  □

Intuitively the next result says that any two events that in the behaviour of the 
                           eventPsi
                        -process make up the interleaving diamond are concurrent in the corresponding event structure.


                        
                           Theorem 3.18
                           Reflecting interleaving diamonds


                           
                              For any event structure 
                              
                                 E
                              
                              , in the corresponding 
                              
                                 eventPsi
                              
                              -process 
                              
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 ∅
                                 )
                              
                              , for any interleaving diamond
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   espsi
                                                
                                                (
                                                E
                                                ,
                                                C
                                                )
                                                
                                                   ⇝
                                                   e
                                                
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                   ⇝
                                                   
                                                      
                                                         e
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      2
                                                   
                                                
                                                
                                                 and 
                                             
                                          
                                          
                                             
                                                
                                                   espsi
                                                
                                                (
                                                E
                                                ,
                                                C
                                                )
                                                
                                                   ⇝
                                                   
                                                      
                                                         e
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      3
                                                   
                                                
                                                
                                                   ⇝
                                                   e
                                                
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                               
                              for some configuration 
                              
                                 C
                                 ∈
                                 
                                    
                                       C
                                    
                                    
                                       E
                                    
                                 
                              
                              , we have that the events 
                              
                                 e
                                 ‖
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               
                              are concurrent in 
                              
                                 E
                              
                              .
                           


                        
                           Proof
                           Since 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                               has two outgoing transitions labelled with the events e and 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               it means that 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                               is in the form 
                                 
                                    
                                       P
                                    
                                    
                                       0
                                    
                                 
                                 =
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                                 ∥
                                 
                                    
                                       P
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 ∥
                                 Q
                               with 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               and 
                                 
                                    
                                       P
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                               processes of kind case. From Lemma 3.14 we know that the frame of 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                               is the assertion corresponding to C, which is 
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                                 ∥
                                 
                                    
                                       P
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 ∥
                                 Q
                                 )
                                 =
                                 ∅
                                 ∪
                                 ∅
                                 ∪
                                 F
                                 (
                                 Q
                                 )
                                 =
                                 
                                    
                                       Ψ
                                    
                                    
                                       Q
                                    
                                 
                              .

We thus have that 
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∉
                                 
                                    
                                       Ψ
                                    
                                    
                                       Q
                                    
                                 
                               and 
                                 
                                    
                                       P
                                    
                                    
                                       0
                                    
                                 
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                               and 
                                 
                                    
                                       P
                                    
                                    
                                       0
                                    
                                 
                                 
                                    ⇝
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    
                                       P
                                    
                                    
                                       3
                                    
                                 
                              . This means that for these two transitions to be possible it must be that the precondition for e and 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               respectively must be met. Since 
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∉
                                 
                                    
                                       Ψ
                                    
                                    
                                       Q
                                    
                                 
                               it must be that 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∉
                                 
                                    
                                       π
                                    
                                    
                                       L
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                               and 
                                 e
                                 ∉
                                 
                                    
                                       π
                                    
                                    
                                       L
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 )
                              . Since 
                                 
                                    
                                       π
                                    
                                    
                                       L
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                               is the same as the set <e and 
                                 
                                    
                                       π
                                    
                                    
                                       L
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 )
                               the set 
                                 <
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               we have the two parts of the Definition 3.3 that concern ≤ for the causal independence (concurrency) of the events 
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                              , i.e., 
                                 ¬
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ≤
                                 e
                                 ∨
                                 e
                                 ≤
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              . After the two transitions are taken we have that 
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                                 ∥
                                 
                                    
                                       P
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 ∥
                                 Q
                               and 
                                 
                                    
                                       P
                                    
                                    
                                       3
                                    
                                 
                                 =
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                                 ∥
                                 ⦇
                                 {
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 }
                                 ⦈
                                 ∥
                                 Q
                              . We thus have that 
                                 e
                                 ∈
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 )
                               and 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       3
                                    
                                 
                                 )
                              . For the transition 
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 
                                    ⇝
                                    
                                       
                                          e
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    
                                       P
                                    
                                    
                                       2
                                    
                                 
                               to happen we must have that 
                                 e
                                 ∉
                                 
                                    
                                       π
                                    
                                    
                                       R
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 )
                               and for 
                                 
                                    
                                       P
                                    
                                    
                                       3
                                    
                                 
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       4
                                    
                                 
                               we must have 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∉
                                 
                                    
                                       π
                                    
                                    
                                       R
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                              . This is the same as 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∉
                                 ♯
                                 e
                               and 
                                 e
                                 ∉
                                 ♯
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               which makes the last part of Definition 3.3 concerning the conflict relation, i.e., 
                                 ¬
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ♯
                                 e
                                 )
                              . This completes the proof, showing 
                                 e
                                 ‖
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                              .  □


                        
                           Theorem 3.19
                           Syntactic restrictions


                           
                              For any syntactically correct 
                              
                                 eventPsi
                              
                              -process 
                              
                                 
                                    
                                       P
                                    
                                    
                                       ES
                                    
                                 
                               
                              there exists an event structure 
                              
                                 E
                               
                              and a configuration 
                              
                                 C
                                 ∈
                                 
                                    
                                       C
                                    
                                    
                                       E
                                    
                                 
                               
                              s.t.
                              
                                 
                                    
                                       
                                          
                                             espsi
                                          
                                          (
                                          E
                                          ,
                                          C
                                          )
                                          =
                                          
                                             
                                                P
                                             
                                             
                                                ES
                                             
                                          
                                          .
                                       
                                    
                                 
                              
                           


                        
                           Proof
                           From an 
                                 eventPsi
                              -process 
                                 
                                    
                                       P
                                    
                                    
                                       ES
                                    
                                 
                               defined according to the syntactic restrictions of Definition 3.10, we show how to construct an event structure 
                                 E
                                 =
                                 (
                                 E
                                 ,
                                 ≤
                                 ,
                                 ♯
                                 )
                               and a configuration C. We have that 
                                 
                                    
                                       P
                                    
                                    
                                       ES
                                    
                                 
                               is built up of assertion processes and case guarded outputs, i.e.,
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                ES
                                             
                                          
                                          =
                                          (
                                          
                                             ∏
                                             
                                                e
                                                ∈
                                                
                                                   
                                                      E
                                                   
                                                   
                                                      c
                                                   
                                                
                                             
                                          
                                          ⦇
                                          {
                                          e
                                          }
                                          ⦈
                                          )
                                          
                                          
                                          ∥
                                          
                                          (
                                          
                                             ∏
                                             
                                                f
                                                ∈
                                                
                                                   
                                                      E
                                                   
                                                   
                                                      r
                                                   
                                                
                                             
                                          
                                          
                                             case
                                          
                                          
                                          
                                             
                                                φ
                                             
                                             
                                                f
                                             
                                          
                                          :
                                          
                                             
                                                f
                                             
                                             ‾
                                          
                                          〈
                                          f
                                          〉
                                          .
                                          ⦇
                                          {
                                          f
                                          }
                                          ⦈
                                          )
                                          .
                                       
                                    
                                 
                              
                           

Because of the third restriction on 
                                 
                                    
                                       P
                                    
                                    
                                       ES
                                    
                                 
                               (i.e., from Definition 3.10(3)) we know that 
                                 
                                    
                                       E
                                    
                                    
                                       c
                                    
                                 
                               and 
                                 
                                    
                                       E
                                    
                                    
                                       r
                                    
                                 
                               are sets, since 
                                 
                                    
                                       P
                                    
                                    
                                       ES
                                    
                                 
                               cannot have in parallel two assertion processes with the same assertion, nor two case processes with the same channel. Moreover, these two sets are disjoint.

We take C to be the frame of 
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       ES
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       E
                                    
                                    
                                       c
                                    
                                 
                              . We take the set of events to be 
                                 E
                                 =
                                 
                                    
                                       E
                                    
                                    
                                       c
                                    
                                 
                                 ∪
                                 
                                    
                                       E
                                    
                                    
                                       r
                                    
                                 
                              . We construct the causality and conflict relations from the processes in the second part of 
                                 
                                    
                                       P
                                    
                                    
                                       ES
                                    
                                 
                               as follows: 
                                 <
                                 :
                                 =
                                 
                                    
                                       ∪
                                    
                                    
                                       e
                                       ∈
                                       
                                          
                                             E
                                          
                                          
                                             r
                                          
                                       
                                    
                                 
                                 {
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 e
                                 )
                                 |
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 
                                    
                                       π
                                    
                                    
                                       L
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                                 }
                               and 
                                 ♯
                                 :
                                 =
                                 
                                    
                                       ∪
                                    
                                    
                                       e
                                       ∈
                                       
                                          
                                             E
                                          
                                          
                                             r
                                          
                                       
                                    
                                 
                                 {
                                 (
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 e
                                 )
                                 |
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 
                                    
                                       π
                                    
                                    
                                       R
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                                 }
                              . We prove that the causality relation is a partial order. For irreflexivity just use the first part of the second restriction on 
                                 
                                    
                                       P
                                    
                                    
                                       ES
                                    
                                 
                              . For antisymmetry assume that 
                                 e
                                 ≤
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∧
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ≤
                                 e
                                 ∧
                                 e
                                 ≠
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               which is the same as having 
                                 e
                                 ∈
                                 
                                    
                                       π
                                    
                                    
                                       L
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 )
                                 ∧
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 
                                    
                                       π
                                    
                                    
                                       L
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                              . This contradicts the first part of the second restriction on 
                                 
                                    
                                       P
                                    
                                    
                                       ES
                                    
                                 
                              . Transitivity is easy to obtain from the second part of the second restriction which says that when 
                                 e
                                 ≤
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               then all the conditions of e are a subset of the conditions of 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                              . We prove that the conflict relation is irreflexive and symmetric. The irreflexivity follows from the first part of the first restriction on 
                                 
                                    
                                       P
                                    
                                    
                                       ES
                                    
                                 
                              , whereas the symmetry is given by the second part.

It is easy to see that for the constructed event structure and the configuration chosen above, we have 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 ,
                                 C
                                 )
                                 =
                                 
                                    
                                       P
                                    
                                    
                                       ES
                                    
                                    
                                       C
                                    
                                 
                              . The encoding function espsi takes all events from C to the left part of the 
                                 
                                    
                                       P
                                    
                                    
                                       ES
                                    
                                 
                              , whereas the remaining events, i.e., from 
                                 
                                    
                                       E
                                    
                                    
                                       r
                                    
                                 
                               are taken from case processes where for each event 
                                 f
                                 ∈
                                 
                                    
                                       E
                                    
                                    
                                       r
                                    
                                 
                               the corresponding condition 
                                 
                                    
                                       φ
                                    
                                    
                                       f
                                    
                                 
                               contains the causing events respectively the conflicting events. But these correspond to how we built the two relations above.  □


                        Notation. For a syntactically correct process P (i.e., restricted according to Definition 3.10) we will use the notation 
                           
                              
                                 E
                              
                              
                                 P
                              
                           
                         for the events associated to the process P as defined in the above proof, i.e., 
                           
                              
                                 E
                              
                              
                                 P
                              
                           
                           =
                           
                              
                                 E
                              
                              
                                 c
                              
                           
                           ∪
                           
                              
                                 E
                              
                              
                                 r
                              
                           
                        .

Below we show how to refine 
                           eventPsi
                         processes corresponding to action refinement for labelled event structures [17] as recalled below. The intuition of action refinement is to be able to give actions (which are thought of as possible abstractions) more structure, by replacing every event labelled by a particular action with a finite, conflict free event structure (with events possibly labelled by other actions). For example one action can be refined into a sequence of actions, or in general any deterministic finite concurrent process.

Since action refinement is defined using the action labels, we assume our 
                           eventPsi
                         instances have labelled events of the form 
                           (
                           e
                           ,
                           l
                           (
                           e
                           )
                           )
                         for some labelling function 
                           l
                           :
                           E
                           →
                           
                              Act
                           
                        , and as usual write 
                           
                              
                                 e
                              
                              
                                 a
                              
                           
                         for an event 
                           (
                           e
                           ,
                           a
                           )
                        .

A refinement function 
                        
                           
                              ref
                           
                           :
                           
                              Act
                           
                           →
                           
                              
                                 E
                              
                              
                                 
                                    
                                       
                                    
                                 
                              
                           
                         is then a function from the set of actions of event structures (denoted by Act) to conflict-free event structures (i.e., the conflict relation is empty) denoted by 
                           
                              
                                 E
                              
                              
                                 
                                    
                                       
                                    
                                 
                              
                           
                        . The function ref is considered as a given function to be used in the refinement operation denoted by ref.


                        
                           Definition 3.20
                           Refinement for prime event structures


                           For an event structure 
                                 E
                               with events labelled by 
                                 l
                                 :
                                 E
                                 →
                                 
                                    Act
                                 
                               a function 
                                 
                                    ref
                                 
                                 :
                                 
                                    Act
                                 
                                 →
                                 
                                    
                                       E
                                    
                                    
                                       
                                          
                                             
                                          
                                       
                                    
                                 
                               is called a refinement function (for prime event structures) iff 
                                 ∀
                                 a
                                 ∈
                                 
                                    Act
                                 
                                 :
                                 
                                    ref
                                 
                                 (
                                 a
                                 )
                               is a non-empty, finite and conflict-free labelled prime event structure.

For 
                                 E
                                 ∈
                                 E
                               and ref a refinement function, let 
                                 
                                    ref
                                 
                                 (
                                 E
                                 )
                                 ∈
                                 E
                               be the prime event structure defined by:
                                 
                                    •
                                    
                                       
                                          
                                             
                                                E
                                             
                                             
                                                
                                                   ref
                                                
                                                (
                                                E
                                                )
                                             
                                          
                                          :
                                          =
                                          {
                                          (
                                          e
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          |
                                          e
                                          ∈
                                          
                                             
                                                E
                                             
                                             
                                                E
                                             
                                          
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          
                                             
                                                E
                                             
                                             
                                                
                                                   ref
                                                
                                                (
                                                
                                                   
                                                      l
                                                   
                                                   
                                                      E
                                                   
                                                
                                                (
                                                e
                                                )
                                                )
                                             
                                          
                                          }
                                       , where 
                                          
                                             
                                                E
                                             
                                             
                                                
                                                   ref
                                                
                                                (
                                                
                                                   
                                                      l
                                                   
                                                   
                                                      E
                                                   
                                                
                                                (
                                                e
                                                )
                                                )
                                             
                                          
                                        denotes the set of events of the event structure 
                                          
                                             ref
                                          
                                          (
                                          
                                             
                                                l
                                             
                                             
                                                E
                                             
                                          
                                          (
                                          e
                                          )
                                          )
                                       ,


                                       
                                          (
                                          d
                                          ,
                                          
                                             
                                                d
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          
                                             
                                                ≤
                                             
                                             
                                                
                                                   ref
                                                
                                                (
                                                E
                                                )
                                             
                                          
                                          (
                                          e
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                        iff 
                                          d
                                          
                                             
                                                ≤
                                             
                                             
                                                E
                                             
                                          
                                          e
                                        or 
                                          (
                                          d
                                          =
                                          e
                                          ∧
                                          
                                             
                                                d
                                             
                                             
                                                ′
                                             
                                          
                                          
                                             
                                                ≤
                                             
                                             
                                                
                                                   ref
                                                
                                                (
                                                
                                                   
                                                      l
                                                   
                                                   
                                                      E
                                                   
                                                
                                                (
                                                d
                                                )
                                                )
                                             
                                          
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                       ,


                                       
                                          (
                                          d
                                          ,
                                          
                                             
                                                d
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          
                                             
                                                ♯
                                             
                                             
                                                
                                                   ref
                                                
                                                (
                                                E
                                                )
                                             
                                          
                                          (
                                          e
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                        iff 
                                          d
                                          
                                             
                                                ♯
                                             
                                             
                                                E
                                             
                                          
                                          e
                                       ,


                                       
                                          
                                             
                                                l
                                             
                                             
                                                
                                                   ref
                                                
                                                (
                                                E
                                                )
                                             
                                          
                                          (
                                          e
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          :
                                          =
                                          
                                             
                                                l
                                             
                                             
                                                
                                                   ref
                                                
                                                (
                                                
                                                   
                                                      l
                                                   
                                                   
                                                      E
                                                   
                                                
                                                (
                                                e
                                                )
                                                )
                                             
                                          
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                       .


                        
                           Example 3.21
                           
                              Fig. 4
                              (a) provides an illustrative example (taken from [17]) of action refinement applied to a process which receives and sends data. We may think of giving more details to the sending event by refining it with a sequential process which first prepares the data and then carries out the actual sending. This refined process is shown in Fig. 4(b). In turn, Fig. 4(c) shows a further refinement, where the preparation of data is refined by a process which in parallel formats the data and asks permission to send.


                        
                           Remark 3.22
                           Action refinement as presented here was introduced by Wirth [16] under the name of stepwise refinement and is quite different than the more recent notion of refinement in process algebras where the refined process is seen as an implementation of the abstract one. In these settings usually refinement is seen as an inclusion-like relation of the behaviours, such as trace inclusion or simulation.

We can define a refinement function 
                           
                              
                                 ref
                              
                              
                                 ψ
                              
                           
                           :
                           
                              Act
                           
                           →
                           
                              
                                 P
                              
                              
                                 eventPsi
                              
                           
                         for 
                           eventPsi
                        -processes from a given refinement function ref for event structures as follows: 
                           
                              
                                 ref
                              
                              
                                 ψ
                              
                           
                           (
                           a
                           )
                           =
                           
                              espsi
                           
                           (
                           
                              ref
                           
                           (
                           a
                           )
                           )
                        . For syntactically correct 
                           eventPsi
                        -processes these two functions are one-to-one inter-definable in the sense that for 
                           eventPsi
                        -processes that represent finite conflict-free event structures (i.e., that have the right elements of the conditions always empty) we can define ref from 
                           
                              
                                 ref
                              
                              
                                 ψ
                              
                           
                         by an analogous definition as before, going through Theorem 3.19. In the rest of this section, we prefer to work with the simpler notation provided by ref.

We define an action refinement operation for 
                           eventPsi
                        -process terms.


                        
                           Definition 3.23
                           Given a refinement function ref for event structures over events E, we define an operation 
                                 
                                    
                                       ref
                                    
                                    
                                       Ψ
                                    
                                 
                               that refines an 
                                 eventPsi
                              -process over events E to a new one over the terms
                                 
                                    
                                       
                                          
                                             
                                                T
                                             
                                             
                                                Ψ
                                             
                                          
                                          =
                                          {
                                          (
                                          e
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          |
                                          e
                                          ∈
                                          T
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          
                                             
                                                E
                                             
                                             
                                                
                                                   ref
                                                
                                                (
                                                l
                                                (
                                                e
                                                )
                                                )
                                             
                                          
                                          }
                                          .
                                       
                                    
                                 
                               A syntactically correct 
                                 eventPsi
                              -process P, built according to Definition 3.10, with frame 
                                 F
                                 (
                                 P
                                 )
                                 =
                                 
                                    
                                       Ψ
                                    
                                    
                                       P
                                    
                                 
                              , is refined into a process
                                 
                                    
                                       
                                          
                                             
                                                ref
                                             
                                             
                                                Ψ
                                             
                                          
                                          (
                                          P
                                          )
                                          =
                                          
                                             ∏
                                             
                                                (
                                                e
                                                ,
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                )
                                                ∈
                                                
                                                   
                                                      T
                                                   
                                                   
                                                      Ψ
                                                   
                                                
                                             
                                          
                                          
                                             
                                                P
                                             
                                             
                                                (
                                                e
                                                ,
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                )
                                             
                                          
                                          ,
                                       
                                    
                                 
                               and
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                (
                                                e
                                                ,
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                )
                                             
                                          
                                          =
                                          
                                             {
                                             
                                                
                                                   
                                                      ⦇
                                                      {
                                                      (
                                                      e
                                                      ,
                                                      
                                                         
                                                            e
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                      }
                                                      ⦈
                                                   
                                                   
                                                      if
                                                      
                                                      e
                                                      ∈
                                                      
                                                         
                                                            Ψ
                                                         
                                                         
                                                            P
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         case
                                                      
                                                      
                                                      
                                                         
                                                            φ
                                                         
                                                         
                                                            (
                                                            e
                                                            ,
                                                            
                                                               
                                                                  e
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      :
                                                      
                                                         
                                                            (
                                                            e
                                                            ,
                                                            
                                                               
                                                                  e
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            )
                                                         
                                                         ‾
                                                      
                                                      〈
                                                      (
                                                      e
                                                      ,
                                                      
                                                         
                                                            e
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                      〉
                                                      .
                                                      ⦇
                                                      {
                                                      (
                                                      e
                                                      ,
                                                      
                                                         
                                                            e
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                      }
                                                      ⦈
                                                   
                                                   
                                                      otherwise
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                               with the conditions being
                                 
                                    
                                       
                                          
                                             
                                                φ
                                             
                                             
                                                (
                                                e
                                                ,
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                )
                                             
                                          
                                          =
                                          (
                                          <
                                          (
                                          e
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          ,
                                          ♯
                                          (
                                          e
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          )
                                          ,
                                       
                                    
                                 
                               where
                                 
                                    
                                       
                                          <
                                          (
                                          e
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          =
                                          {
                                          (
                                          d
                                          ,
                                          
                                             
                                                d
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          |
                                          d
                                          ∈
                                          
                                             
                                                π
                                             
                                             
                                                L
                                             
                                          
                                          (
                                          
                                             
                                                φ
                                             
                                             
                                                e
                                             
                                          
                                          )
                                          ∨
                                          (
                                          d
                                          =
                                          e
                                          ∧
                                          
                                             
                                                d
                                             
                                             
                                                ′
                                             
                                          
                                          
                                             
                                                <
                                             
                                             
                                                
                                                   ref
                                                
                                                (
                                                l
                                                (
                                                d
                                                )
                                                )
                                             
                                          
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          }
                                       
                                    
                                 
                               and
                                 
                                    
                                       
                                          ♯
                                          (
                                          e
                                          ,
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          =
                                          {
                                          (
                                          d
                                          ,
                                          
                                             
                                                d
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          |
                                          d
                                          ∈
                                          
                                             
                                                π
                                             
                                             
                                                R
                                             
                                          
                                          (
                                          
                                             
                                                φ
                                             
                                             
                                                e
                                             
                                          
                                          )
                                          }
                                          .
                                       
                                    
                                 
                              
                           

The set of events (which constitute the terms) is the set of pairs of an event from the original process and one of the events from the refinement processes. Note that the above definition is still part of the 
                           eventPsi
                         instance because we can map 
                           
                              
                                 T
                              
                              
                                 Ψ
                              
                           
                         onto T. Take any total order < on E and define from it a total order 
                           (
                           e
                           ,
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                           )
                           <
                           (
                           d
                           ,
                           
                              
                                 d
                              
                              
                                 ′
                              
                           
                           )
                            iff 
                           e
                           <
                           d
                           ∨
                           (
                           e
                           =
                           d
                           ∧
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                           <
                           
                              
                                 d
                              
                              
                                 ′
                              
                           
                           )
                         on the pairs; map any pair to an event from E while preserving the order, thus making 
                           
                              
                                 T
                              
                              
                                 Ψ
                              
                           
                         the same as the T of 
                           eventPsi
                        .

We make new conditions for each event 
                           (
                           
                              
                                 e
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 e
                              
                              
                                 2
                              
                           
                           )
                        , where 
                           <
                           (
                           
                              
                                 e
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 e
                              
                              
                                 2
                              
                           
                           )
                         contains all pairs of events 
                           (
                           
                              
                                 e
                              
                              
                                 1
                              
                              
                                 ′
                              
                           
                           ,
                           
                              
                                 e
                              
                              
                                 2
                              
                              
                                 ′
                              
                           
                           )
                         s.t. either 
                           
                              
                                 e
                              
                              
                                 1
                              
                              
                                 ′
                              
                           
                           <
                           
                              
                                 e
                              
                              
                                 1
                              
                           
                        , or 
                           
                              
                                 e
                              
                              
                                 1
                              
                              
                                 ′
                              
                           
                           =
                           
                              
                                 e
                              
                              
                                 1
                              
                           
                           ∧
                           
                              
                                 e
                              
                              
                                 2
                              
                              
                                 ′
                              
                           
                           <
                           
                              
                                 e
                              
                              
                                 2
                              
                           
                        . We define conflicts by 
                           ♯
                           (
                           
                              
                                 e
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 e
                              
                              
                                 2
                              
                           
                           )
                           =
                           {
                           (
                           
                              
                                 e
                              
                              
                                 1
                              
                              
                                 ′
                              
                           
                           ,
                           
                              
                                 e
                              
                              
                                 2
                              
                              
                                 ′
                              
                           
                           )
                           |
                           
                              
                                 e
                              
                              
                                 1
                              
                           
                           #
                           
                              
                                 e
                              
                              
                                 1
                              
                              
                                 ′
                              
                           
                           }
                         (recalling that the refinement process is conflict-free). The refinement generates for each new pair one process which is either an assertion or a case process, depending on whether the first part of the event pair was in the frame of the old P respectively not.


                        
                           Theorem 3.24
                           Refinement in 
                                 eventPsi
                               corresponds to that in ES


                           
                              For any prime event structure 
                              
                                 E
                               
                              we have that:
                              
                                 
                                    
                                       
                                          
                                             espsi
                                          
                                          (
                                          
                                             ref
                                          
                                          (
                                          E
                                          )
                                          ,
                                          ∅
                                          )
                                          =
                                          
                                             
                                                ref
                                             
                                             
                                                Ψ
                                             
                                          
                                          (
                                          
                                             espsi
                                          
                                          (
                                          E
                                          ,
                                          ∅
                                          )
                                          )
                                          .
                                       
                                    
                                 
                              
                           


                        
                           Proof
                           As 
                                 T
                                 =
                                 E
                               and 
                                 
                                    
                                       T
                                    
                                    
                                       Ψ
                                    
                                 
                               is built from T in Definition 3.23 with rules analogous to those 
                                 
                                    
                                       E
                                    
                                    
                                       ref
                                    
                                 
                               is built from E in Definition 3.20, we have that 
                                 
                                    
                                       T
                                    
                                    
                                       Ψ
                                    
                                 
                                 =
                                 
                                    
                                       E
                                    
                                    
                                       ref
                                    
                                 
                              . Since the processes we work with are parallel compositions of assertion and case processes, it means we have to show that any assertion processes on the left is also found on the right of the equality (and vice versa), and the same for the case processes. Since we work with the empty initial configuration, then there are no assertion processes on either sides.

The case processes on the left side of the equality are those generated by espsi from the pairs of events returned by the ref from the event structure 
                                 E
                              , i.e., 
                                 
                                    
                                       P
                                    
                                    
                                       (
                                       e
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                 
                                 =
                                 
                                    case
                                 
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       (
                                       e
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                 
                                 :
                                 
                                    
                                       (
                                       e
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                    ‾
                                 
                                 〈
                                 (
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 〉
                                 .
                                 ⦇
                                 {
                                 (
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 }
                                 ⦈
                               with the condition 
                                 
                                    
                                       φ
                                    
                                    
                                       (
                                       e
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                 
                                 =
                                 (
                                 <
                                 (
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 ,
                                 ♯
                                 (
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 )
                               which is build according to Definition 3.20 from 
                                 
                                    
                                       ♯
                                    
                                    
                                       E
                                    
                                 
                                 e
                              , 
                                 
                                    
                                       <
                                    
                                    
                                       E
                                    
                                 
                                 e
                              , and 
                                 
                                    
                                       <
                                    
                                    
                                       
                                          ref
                                       
                                       (
                                       l
                                       (
                                       d
                                       )
                                       )
                                    
                                 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                              . On the right side we have case processes for the original process before the refinement, with their respective conditions. But the 
                                 
                                    
                                       ref
                                    
                                    
                                       Ψ
                                    
                                 
                               replaces each one of these 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               with several case processes, one for each new pair 
                                 (
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 )
                               that involves e. Therefore, according to Definition 3.23 we will have 
                                 
                                    
                                       P
                                    
                                    
                                       (
                                       e
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                 
                                 =
                                 
                                    case
                                 
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       (
                                       e
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                 
                                 :
                                 
                                    
                                       (
                                       e
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                    ‾
                                 
                                 〈
                                 (
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 〉
                                 .
                                 ⦇
                                 {
                                 (
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 }
                                 ⦈
                               with its condition being built from 
                                 
                                    
                                       π
                                    
                                    
                                       R
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                              , 
                                 
                                    
                                       π
                                    
                                    
                                       L
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                              , and 
                                 
                                    
                                       <
                                    
                                    
                                       
                                          ref
                                       
                                       (
                                       l
                                       (
                                       d
                                       )
                                       )
                                    
                                 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                              . These are respectively the same as the ones used on the left side. Checking that any case process from the right side is found in the left side is done similarly.  □

In this section we gave a representation of an encoding of the prime event structures into an instance of psi-calculi which preserves the causality relation and thereby also the notion of action refinement. To do this, we made special use of the logic of psi-calculi, i.e., of the assertions and conditions and the entailment between these, as well as the assertion processes. It is noteworthy that we have not used neither names nor the communication mechanism of psi-calculi, which is known to increase expressiveness.
                           8
                        
                        
                           8
                           In π-calculus communication of channel names allows to reach Turing completeness [43], in contrast to CCS with only synchronisation and replication (called 
                                 
                                    
                                       CCS
                                    
                                    
                                       !
                                    
                                 
                              ) where the expressiveness is weaker [44].
                        
                     

Dynamic Condition Response graphs (DCR graphs) [15,45] is a model of concurrency which generalises event structures in two dimensions: Firstly, it allows finite models of (regular) infinite behaviour, while retaining the possibility of infinite models. The finite models are regular in the automata-theoretic sense, i.e. they (if concurrency is ignored) capture exactly the languages that are the union of a regular and an omega-regular language [46]. Finite DCR graphs have found applications in practice for the description, implementation and automated verification of flexible workflow systems [47,18]. Infinite DCR graphs allow for representation of non-regular behaviour and denotational semantics. Secondly, the DCR graphs model provides an event-based notion of acceptance criteria for both finite and infinite computations in terms of scheduled responses. In the present paper we focus on the first dimension, leaving the interesting question of representing event-based acceptance criteria for infinite computations to future work. We follow the notations for DCR graphs from [15,45].


                        
                           Definition 4.1
                           DCR graphs


                           We define a Dynamic Condition Response Graph to be a tuple 
                                 D
                                 =
                                 (
                                 E
                                 ,
                                 M
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 L
                                 ,
                                 l
                                 )
                               where
                                 
                                    1.
                                    
                                       E is a set of events,


                                       
                                          M
                                          ∈
                                          
                                             
                                                2
                                             
                                             
                                                E
                                             
                                          
                                          ×
                                          
                                             
                                                2
                                             
                                             
                                                E
                                             
                                          
                                          ×
                                          
                                             
                                                2
                                             
                                             
                                                E
                                             
                                          
                                        is the initial marking,


                                       
                                          
                                             
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                
                                             
                                          
                                          ⊆
                                          E
                                          ×
                                          E
                                        are respectively called the condition, response, milestone, include, and exclude relations,


                                       
                                          l
                                          :
                                          E
                                          →
                                          L
                                        is a labelling function mapping events to labels taken from L.

For any relation 
                           →
                           ∈
                           {
                           
                              
                                 
                              
                           
                           ,
                           
                              
                                 
                              
                           
                           ,
                           
                              
                                 
                              
                           
                           ,
                           
                              
                                 
                              
                           
                           ,
                           
                              
                                 
                              
                           
                           }
                        , we use the notation e→ for the set 
                           {
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                           ∈
                           E
                           |
                           e
                           →
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                           }
                         and →e for the set 
                           {
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                           ∈
                           E
                           |
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                           →
                           e
                           }
                        .

A marking 
                        
                           M
                           =
                           (
                           
                              Ex
                           
                           ,
                           
                              Re
                           
                           ,
                           
                              In
                           
                           )
                         represents a state of the DCR graph. One should understand Ex as the set of executed events, Re the set of scheduled response events
                           9
                        
                        
                           9
                           Similar to the notion of restless events in [48, ch. 6.4.].
                         that must happen sometime in the future or become excluded for the run to be accepting (see Definition 4.4), and In the set of currently included events. The five relations impose constraints on the events and dictate the dynamic inclusion and exclusion of events.

Intuitively, the condition relation 
                           e
                           
                              
                                 
                              
                           
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                         requires the event e to have happened (at least once) or currently be excluded in order for 
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                         to happen. The response relation 
                           e
                           
                              
                                 
                              
                           
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                         means that if the event e happens, then the event 
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                         becomes scheduled as a response. The milestone relation 
                           e
                           
                              
                                 
                              
                           
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                         imposes the constraint that 
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                         cannot happen as long as e is a scheduled response and included. Finally, the exclusion and inclusion relations generalise the conflict relation from event structures. An event e that excludes another event 
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                         can be thought as being in (one-sided) conflict; but another event may include 
                           
                              
                                 e
                              
                              
                                 ′
                              
                           
                         again, thus making the previous conflict only transient.

An event is thus enabled if it is included, all its included preconditions have been executed, and none of the included events that are milestones for it are scheduled responses. In particular, an event can happen an arbitrary number of times as long as it is enabled. We express the enabling condition formally as follows.


                        
                           Definition 4.2
                           Enabling events


                           For a DCR graph 
                                 D
                                 =
                                 (
                                 E
                                 ,
                                 M
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 )
                               with an initial marking 
                                 M
                                 =
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 )
                              , we say that an event 
                              
                                 e
                                 ∈
                                 E
                               
                              is enabled in M, written 
                                 M
                                 ⊢
                                 e
                              , iff
                                 
                                    
                                       
                                          e
                                          ∈
                                          
                                             In
                                          
                                          
                                          ∧
                                          
                                          (
                                          
                                             In
                                          
                                          
                                          ∩
                                          
                                             
                                                
                                             
                                          
                                          e
                                          )
                                          ⊆
                                          
                                             Ex
                                          
                                          
                                          ∧
                                          
                                          (
                                          
                                             In
                                          
                                          
                                          ∩
                                          
                                             
                                                
                                             
                                          
                                          e
                                          )
                                          ⊆
                                          (
                                          E
                                          ∖
                                          
                                             Re
                                          
                                          )
                                          .
                                       
                                    
                                 
                              
                           

Having defined when events are enabled, we can define an event labelled transition semantics for DCR graphs. Since the execution of an event only changes the marking, we define the transition relation between the markings of a given DCR graph and regard the marking M given in the DCR graph as the initial marking.


                        
                           Definition 4.3
                           Transitions


                           The behaviour of a DCR graph is given through transitions between markings done by executing enabled events. The result of the execution in a DCR graph 
                                 D
                                 =
                                 (
                                 E
                                 ,
                                 
                                    
                                       M
                                    
                                    
                                       0
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 )
                               from marking 
                                 M
                                 =
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 )
                               of an enabled event 
                                 M
                                 ⊢
                                 e
                               results in the new marking
                                 
                                    
                                       
                                          
                                             
                                                M
                                             
                                             
                                                ′
                                             
                                          
                                          
                                             =
                                             
                                                def
                                             
                                          
                                          (
                                          
                                             Ex
                                          
                                          ∪
                                          {
                                          e
                                          }
                                          ,
                                          (
                                          
                                             Re
                                          
                                          ∖
                                          {
                                          e
                                          }
                                          )
                                          ∪
                                          e
                                          
                                             
                                                
                                             
                                          
                                          ,
                                          (
                                          
                                             In
                                          
                                          ∖
                                          e
                                          
                                             
                                                
                                             
                                          
                                          )
                                          ∪
                                          e
                                          
                                             
                                                
                                             
                                          
                                          )
                                       
                                    
                                 
                               and is written as the e-labelled transition 
                                 M
                                 
                                    →
                                    e
                                 
                                 
                                    
                                       M
                                    
                                    
                                       ′
                                    
                                 
                              . The (interleaving) semantics of the DCR graph is then defined as the event-labelled transition system with markings as states and 
                                 
                                    
                                       M
                                    
                                    
                                       0
                                    
                                 
                               the initial state.

We can now define (possibly infinite) runs of DCR graphs and the acceptance criteria formally. As stated above, every event scheduled as response must either happen or be excluded in the future, in order for the run to be accepting. An event is no longer scheduled as a response after it has happened, unless it is related to itself by a response relation.


                        
                           Definition 4.4
                           Accepting runs [15]
                           


                           A run of a DCR graph with initial marking 
                                 
                                    
                                       M
                                    
                                    
                                       0
                                    
                                 
                               is a (possibly infinite) sequence of transitions 
                                 
                                    
                                       M
                                    
                                    
                                       i
                                    
                                 
                                 
                                    →
                                    
                                       
                                          e
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    
                                       M
                                    
                                    
                                       i
                                       +
                                       1
                                    
                                 
                              , with 
                                 0
                                 ≤
                                 i
                                 <
                                 k
                              , 
                                 k
                                 ∈
                                 N
                                 ∪
                                 {
                                 ω
                                 }
                              , and 
                                 
                                    
                                       M
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       Ex
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       Re
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       In
                                    
                                    
                                       i
                                    
                                 
                                 )
                              . A run of a DCR graph is accepting (or completed) if it holds that
                                 
                                    
                                       
                                          ∀
                                          i
                                          ≥
                                          0
                                          ,
                                          e
                                          ∈
                                          
                                             
                                                Re
                                             
                                             
                                                i
                                             
                                          
                                          .
                                          ∃
                                          j
                                          ≥
                                          i
                                          :
                                          (
                                          e
                                          =
                                          
                                             
                                                e
                                             
                                             
                                                j
                                             
                                          
                                          ∨
                                          e
                                          ∉
                                          
                                             
                                                In
                                             
                                             
                                                j
                                             
                                          
                                          )
                                       
                                    
                                 
                               In words, a run of a DCR graph is accepting if no event scheduled as an response is included and pending forever without happening, i.e. it must either eventually happen on the run or become excluded.

Since in psi-calculi we do not have readily available a notion of accepting run, we will ignore this aspect for the rest of this paper. However, since our encoding captures the response and milestone relations of DCR graphs, it is prepared for adding a notion of accepting runs via scheduled responses to psi-calculi.

It is worth noting that the labelling function on events adds the possibility of non-determinism by taking the language of a DCR graph to be the sequences of labels of events (abstracting from the events) of accepting runs. This extra level of labelling increases the expressive power of finite DCR graphs, which have been shown to capture exactly the languages that are the union of a regular and an omega-regular language [46]. In contrast, by following an encoding along the lines of [49] unlabelled, finite DCR graphs can be represented by Linear-time Temporal Logic (LTL), which is known to be strictly less expressible than omega-regular languages.

As given by the mapping in Definition 4.5 below, prime event structure can be seen as a special case of a DCR graph (see [15, Prop. 1&3] for details) where the exclusion relation (capturing the conflict relation) is reflexive and symmetric, the condition relation (capturing the causality relation) is irreflexive and transitive, and the include, response, and milestone relations are empty. The initial marking has no executed events, no scheduled responses and all events are included. Hereto comes of course the two conditions on the causality and conflict relation of event structures, i.e. finite causes and hereditary conflict. The reflexivity of the exclusion relation and emptiness of the inclusion relation imply that events can be executed at most once.


                        
                           Definition 4.5
                           Prime event structures as DCR graphs [15]
                           


                           Define a mapping dcr which takes an event structure 
                                 E
                                 =
                                 (
                                 E
                                 ,
                                 ≤
                                 ,
                                 ♯
                                 ,
                                 l
                                 )
                               and returns its presentation as a DCR graph 
                                 (
                                 E
                                 ,
                                 M
                                 ,
                                 <
                                 
                                 ,
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 ♯
                                 ∪
                                 {
                                 (
                                 e
                                 ,
                                 e
                                 )
                                 |
                                 e
                                 ∈
                                 E
                                 }
                                 )
                               with the marking 
                                 M
                                 =
                                 (
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 E
                                 )
                              .


                        
                           Example 4.6
                           Consider the small DCR graph 
                                 D
                               shown in Fig. 5
                              , corresponding to the event structure of Fig. 4(a) which was representing a process of first reading data (r) and then sending data (s). The DCR graph is formalised as
                                 
                                    
                                       
                                          
                                             
                                                D
                                             
                                             
                                                1
                                             
                                          
                                          =
                                          (
                                          {
                                          
                                             r
                                          
                                          ,
                                          
                                             s
                                          
                                          }
                                          ,
                                          (
                                          ∅
                                          ,
                                          ∅
                                          ,
                                          {
                                          
                                             r
                                          
                                          ,
                                          
                                             s
                                          
                                          }
                                          )
                                          ,
                                          {
                                          (
                                          
                                             r
                                          
                                          ,
                                          
                                             s
                                          
                                          )
                                          }
                                          ,
                                          ∅
                                          ,
                                          ∅
                                          ,
                                          ∅
                                          ,
                                          {
                                          (
                                          
                                             r
                                          
                                          ,
                                          
                                             r
                                          
                                          )
                                          ,
                                          (
                                          
                                             s
                                          
                                          ,
                                          
                                             s
                                          
                                          )
                                          }
                                          )
                                          .
                                       
                                    
                                 
                               Here we can see that each event removes itself from the included set when it happens, and that for s to happen its prerequisite r must happen. This corresponds to the causality relation in the event structure in Fig. 4(a).

In DCR graphs is possible to demand that if we read some data we will eventually send this data. This is modelled in the DCR graph of Fig. 6
                               formalised as
                                 
                                    
                                       
                                          
                                             
                                                D
                                             
                                             
                                                2
                                             
                                          
                                          =
                                          (
                                          {
                                          
                                             r
                                          
                                          ,
                                          
                                             s
                                          
                                          }
                                          ,
                                          (
                                          ∅
                                          ,
                                          ∅
                                          ,
                                          {
                                          
                                             r
                                          
                                          ,
                                          
                                             s
                                          
                                          }
                                          )
                                          ,
                                          {
                                          (
                                          
                                             r
                                          
                                          ,
                                          
                                             s
                                          
                                          )
                                          }
                                          ,
                                          {
                                          (
                                          
                                             r
                                          
                                          ,
                                          
                                             s
                                          
                                          )
                                          }
                                          ,
                                          ∅
                                          ,
                                          ∅
                                          ,
                                          {
                                          (
                                          
                                             r
                                          
                                          ,
                                          
                                             r
                                          
                                          )
                                          ,
                                          (
                                          
                                             s
                                          
                                          ,
                                          
                                             s
                                          
                                          )
                                          }
                                          )
                                          ,
                                       
                                    
                                 
                               where we added a response relation from r to s. This means that a run is only accepting if any r is eventually followed by an s, e.g., the empty run and the run 
                                 
                                    r
                                 
                                 .
                                 
                                    s
                                 
                               are accepting, while the run consisting of the single event r is not.

The examples above only allow each event to happen once. However, as exemplified below, in DCR graphs the set of events needed for an event to be enabled can change during the run, as events are included or excluded. Moreover, the conflict in DCR graphs is not permanent as is the case with event structures. Conflict in DCR graphs is transient since an event can be included and later excluded during a run. So, already at the conflict and causality relations, the DCR graphs depart from event structures in a non-trivial manner.


                        
                           Example 4.7
                           A message forwarding machine, where the events can happen several times, but alternating, can be represented by the DCR graph in Fig. 7
                               formalised as
                                 
                                    
                                       
                                          
                                             
                                                D
                                             
                                             
                                                3
                                             
                                          
                                          =
                                          (
                                          {
                                          
                                             r
                                          
                                          ,
                                          
                                             s
                                          
                                          }
                                          ,
                                          (
                                          ∅
                                          ,
                                          ∅
                                          ,
                                          {
                                          
                                             r
                                          
                                          ,
                                          
                                             s
                                          
                                          }
                                          )
                                          ,
                                          {
                                          (
                                          
                                             r
                                          
                                          ,
                                          
                                             s
                                          
                                          )
                                          }
                                          ,
                                          {
                                          (
                                          
                                             r
                                          
                                          ,
                                          
                                             s
                                          
                                          )
                                          }
                                          ,
                                          ∅
                                          ,
                                          {
                                          (
                                          
                                             r
                                          
                                          ,
                                          
                                             s
                                          
                                          )
                                          ,
                                          (
                                          
                                             s
                                          
                                          ,
                                          
                                             r
                                          
                                          )
                                          }
                                          ,
                                          {
                                          (
                                          
                                             r
                                          
                                          ,
                                          
                                             r
                                          
                                          )
                                          ,
                                          (
                                          
                                             s
                                          
                                          ,
                                          
                                             s
                                          
                                          )
                                          }
                                          )
                                          .
                                       
                                    
                                 
                               Each time one of the two events happens it excludes itself but includes the other event, modelling the alternation between reading and sending. We still have that if r happens, eventually s must happen for the run to be accepting, but we make no requirements on how many times the events can happen, so the unique infinite execution and every finite execution of even length will be accepting.

Below we provide an encoding of finite DCR graphs as a psi-calculi instance. As was done with configurations of event structures, markings are kept in the frame of the process. Also, similarly to the event structure representation, for each event of the DCR graph we use a case process, and conditions and entailment relation to capture the information needed to decide when events of a DCR graph are enabled in a marking.

However, in contrast to the encoding of event structures, it appears that we need the communication constructs on processes to keep track of the current marking of a DCR graph. The expressiveness of DCR graphs seems not to allow for a simple way of updating the marking, as was the case for event structures where union with the newly executed event was enough. But once we use the communication we get a nice natural encoding for DCR graphs in a psi-calculus instance. The idea is to internally communicate a term representing the current marking, and incorporate a generation (or age) of an assertion and then keep the assertion with the latest generation when composing assertions. Generations are inspired by [50], where they are used in a similar way to represent the changing topology of a mobile communication network.

Since a step is now an internal communication, we can no longer observe the event that happened by just looking at the communication channel. Instead, we record all executed events in a multi-set part of the assertion. The underlying set of this multi-set corresponds to the set of executed events in the marking of the DCR graph. By recording also the multiplicity of each event one can identify, by multi-set subtraction, which event happened in a transition, as expressed formally below.


                        
                           Notation 4.8
                           For a multi-set S we will denote its underlying set by 
                                 ⌊
                                 S
                                 ⌋
                               and write 
                                 |
                                 S
                                 |
                               for the number of elements of S, summing multiplicities.


                        
                           Definition 4.9
                           
                              
                                 dcrPsi
                               instance


                           Given a set of constants E (denoting events), we define the 
                                 dcrPsi
                               instance over a set of names 
                                 N
                               as:
                                 
                                    
                                       
                                          
                                             
                                                T
                                             
                                             
                                                
                                                
                                                   =
                                                   
                                                      def
                                                   
                                                
                                                
                                                N
                                                ∪
                                                A
                                                ∪
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      op
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ∪
                                                
                                                   
                                                      2
                                                   
                                                   
                                                      op
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ∪
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      op
                                                   
                                                
                                                
                                                A
                                                
                                                
                                                   =
                                                   
                                                      def
                                                   
                                                
                                                
                                                (
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      op
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ×
                                                
                                                   
                                                      2
                                                   
                                                   
                                                      op
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ×
                                                
                                                   
                                                      2
                                                   
                                                   
                                                      op
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ×
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      op
                                                   
                                                
                                                )
                                                ∪
                                                
                                                   1
                                                
                                                
                                                
                                                   1
                                                
                                                
                                                
                                                   =
                                                   
                                                      def
                                                   
                                                
                                                
                                                ⊥
                                             
                                          
                                          
                                             
                                                C
                                             
                                             
                                                
                                                
                                                   =
                                                   
                                                      def
                                                   
                                                
                                                
                                                (
                                                
                                                   
                                                      2
                                                   
                                                   
                                                      op
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ×
                                                
                                                   
                                                      2
                                                   
                                                   
                                                      op
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ×
                                                E
                                                )
                                                ∪
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      op
                                                   
                                                
                                                ∪
                                                {
                                                M
                                                
                                                   ↔
                                                   ⋅
                                                
                                                N
                                                |
                                                M
                                                ,
                                                N
                                                ∈
                                                T
                                                }
                                                .
                                             
                                          
                                       
                                    
                                 
                               where 
                                 
                                    
                                       N
                                    
                                    
                                       op
                                    
                                    
                                       E
                                    
                                 
                               are the multi-sets over E with the operators of Example 2.19 and possibly containing names from 
                                 N
                              , 
                                 
                                    
                                       N
                                    
                                    
                                       op
                                    
                                 
                               is the data structure capturing natural numbers from Example 2.18, and ⊥ is a special constant term assertion. (We will refer to assertions containing only ground terms as ground assertions, and assertions containing names as open assertions.) For ground assertions, i.e., when 
                                 
                                    Ex
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 ,
                                 g
                               denote ground terms, define
                                 
                                    
                                       
                                          (
                                          
                                             Ex
                                          
                                          ,
                                          
                                             Re
                                          
                                          ,
                                          
                                             In
                                          
                                          ,
                                          g
                                          )
                                          ⊗
                                          (
                                          
                                             
                                                Ex
                                             
                                             
                                                ′
                                             
                                          
                                          ,
                                          
                                             
                                                Re
                                             
                                             
                                                ′
                                             
                                          
                                          ,
                                          
                                             
                                                In
                                             
                                             
                                                ′
                                             
                                          
                                          ,
                                          
                                             
                                                g
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          
                                             =
                                             
                                                def
                                             
                                          
                                          
                                             {
                                             
                                                
                                                   
                                                      (
                                                      
                                                         Ex
                                                      
                                                      ,
                                                      
                                                         Re
                                                      
                                                      ,
                                                      
                                                         In
                                                      
                                                      ,
                                                      g
                                                      )
                                                   
                                                   
                                                      if
                                                      
                                                      g
                                                      >
                                                      
                                                         
                                                            g
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                   
                                                
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            Ex
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            Re
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            In
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            g
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      if
                                                      
                                                      g
                                                      <
                                                      
                                                         
                                                            g
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                   
                                                
                                                
                                                   
                                                      (
                                                      ∅
                                                      ,
                                                      ∅
                                                      ,
                                                      ∅
                                                      ,
                                                      g
                                                      )
                                                   
                                                   
                                                      if
                                                      
                                                      g
                                                      =
                                                      
                                                         
                                                            g
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                               where the comparison 
                                 g
                                 <
                                 
                                    
                                       g
                                    
                                    
                                       ′
                                    
                                 
                               is done using sub-term relation, e.g., 
                                 s
                                 (
                                 g
                                 )
                                 >
                                 g
                               (we usually denote generations by 
                                 g
                                 ,
                                 k
                                 ∈
                                 N
                              ). For the other cases define
                                 
                                    
                                       
                                          
                                             
                                                Ψ
                                             
                                             
                                                a
                                             
                                          
                                          ⊗
                                          
                                             
                                                Ψ
                                             
                                             
                                                b
                                             
                                          
                                          
                                             =
                                             
                                                def
                                             
                                          
                                          
                                             {
                                             
                                                
                                                   
                                                      
                                                         
                                                            Ψ
                                                         
                                                         
                                                            a
                                                         
                                                      
                                                   
                                                   
                                                      when 
                                                      
                                                         
                                                            Ψ
                                                         
                                                         
                                                            b
                                                         
                                                      
                                                       is open or
                                                      
                                                      1
                                                      ,
                                                      
                                                      and 
                                                      
                                                         
                                                            Ψ
                                                         
                                                         
                                                            a
                                                         
                                                      
                                                      is ground
                                                      ,
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            Ψ
                                                         
                                                         
                                                            b
                                                         
                                                      
                                                   
                                                   
                                                      when
                                                      
                                                         
                                                            Ψ
                                                         
                                                         
                                                            a
                                                         
                                                      
                                                      isopen or
                                                      
                                                      1
                                                      ,
                                                      
                                                      and 
                                                      
                                                         
                                                            Ψ
                                                         
                                                         
                                                            b
                                                         
                                                      
                                                      is ground
                                                      ,
                                                   
                                                
                                                
                                                   
                                                      1
                                                   
                                                   
                                                      otherwise
                                                      .
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                               Entailment ⊢ is defined as:
                                 
                                    
                                       
                                          
                                             
                                                (
                                                
                                                   Ex
                                                
                                                ,
                                                
                                                   Re
                                                
                                                ,
                                                
                                                   In
                                                
                                                ,
                                                g
                                                )
                                                ⊢
                                                (
                                                
                                                   Co
                                                
                                                ,
                                                
                                                   Mi
                                                
                                                ,
                                                e
                                                )
                                                 iff 
                                                e
                                                ∈
                                                
                                                   In
                                                
                                                ∧
                                                (
                                                
                                                   In
                                                
                                                ∩
                                                
                                                   Co
                                                
                                                )
                                                ⊆
                                                
                                                   Ex
                                                
                                                ∧
                                                (
                                                (
                                                
                                                   In
                                                
                                                ∩
                                                
                                                   Mi
                                                
                                                )
                                                ∩
                                                
                                                   Re
                                                
                                                )
                                                =
                                                ∅
                                             
                                          
                                          
                                             
                                                (
                                                
                                                   Ex
                                                
                                                ,
                                                
                                                   Re
                                                
                                                ,
                                                
                                                   In
                                                
                                                ,
                                                k
                                                )
                                                ⊢
                                                g
                                                ∈
                                                N
                                                 iff 
                                                k
                                                =
                                                g
                                             
                                          
                                          
                                             
                                                (
                                                
                                                   Ex
                                                
                                                ,
                                                
                                                   Re
                                                
                                                ,
                                                
                                                   In
                                                
                                                ,
                                                g
                                                )
                                                ⊢
                                                a
                                                
                                                   ↔
                                                   ⋅
                                                
                                                b
                                                 iff 
                                                a
                                                ,
                                                b
                                                ∈
                                                N
                                                 and 
                                                a
                                                =
                                                b
                                                .
                                             
                                          
                                       
                                    
                                 
                               For any other assertions (e.g. the open ones) or conditions the entailment is undefined.


                        
                           Notation 4.10
                           We denote ground assertions, and the respective four ground terms, by 
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 ,
                                 g
                                 )
                              . In the few cases where we need to talk about open terms we will use capital letters 
                                 
                                    
                                       X
                                    
                                    
                                       E
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       R
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       I
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       G
                                    
                                 
                               possibly indexed to indicate the respective component in the tuple, to stand for a name. We do not always mention explicitly if the assertions or terms are ground when this is clear from the context or the notation.

Terms can be either a name or assertions (and their components) which will be the data communicated. Assertions are four-tuples of one multi-set and two sets containing events, whereas the fourth element is a number which we intend to hold the generation of the assertion.
                           10
                        
                        
                           10
                           For all these terms we allow operators to be present, but for simplicity we work with their mathematical presentation, and assume that when evaluated the equations of the respective operators would produce the ground final form, like numbers, sets, multi-sets.
                         The multi-sets capture which events have been executed, and also count how many times each event has been executed. This will allow, in Definition 4.23, to infer from the change in the frame, which event happened in an execution step. The second set holds those events that are pending responses, and the third set those events that are included. The multi-set and set operations in the terms allow us to construct terms for updating the sets when an event is executed. The underlying set of the multi-set represents the first set of a marking from DCRs, whereas the two other sets of an assertion represent the second and third set of a marking of a DCR graph. The generation number helps to get the properties of the assertion composition, which are somewhat symmetric, but still have the composition return only the latest marking/assertion (i.e., somewhat asymmetric).

The composition of two assertions keeps the assertion with highest generation if both are tuples of ground terms. For technical reasons, when we compose two ground assertions with the same generation we obtain an assertion where the first three elements are emptysets, and the generation number remains unchanged. Intuitively, we do not want two assertions with the same generation number to exist because this can be thought as an error in the process computation (i.e., assertion generations are supposed to constantly increase). But in our encodings and results this never happens, which can be easily checked. Moreover, technically it is a nice solution to make any two assertions with the same generation disappear.

When any of the assertions contain names (i.e., either one of the tuple elements is a name or a term contains a name) then the composition returns the ground assertion when it exists or the identity assertion, when both assertions contain names. In other words, we are interested only in the ground assertions, those containing the actual data, without undefined parts. This makes the composition operation associative, commutative, compositional wrt. assertion equivalence,
                           11
                        
                        
                           11
                           Recalling from Section 2, compositionality refers to: 
                                 Ψ
                                 ≃
                                 
                                    
                                       Ψ
                                    
                                    
                                       ′
                                    
                                 
                                 ⇒
                                 
                                    
                                       Ψ
                                    
                                    
                                       ″
                                    
                                 
                                 ⊗
                                 Ψ
                                 ≃
                                 
                                    
                                       Ψ
                                    
                                    
                                       ″
                                    
                                 
                                 ⊗
                                 
                                    
                                       Ψ
                                    
                                    
                                       ′
                                    
                                 
                              .
                         and with identity being the special constant term ⊥.

The conditions are tuples of two sets of events and a single event as the third tuple component. The first set is intended to capture the set of events that are conditions for the single event. The second set is intended to capture the set of events that are milestones for the single event.

As in [50], we added the set of natural numbers as conditions for technical reasons, so that assertion equivalence will be compositional. Without this we would have 
                           (
                           
                              Ex
                           
                           ,
                           
                              Re
                           
                           ,
                           
                              In
                           
                           ,
                           0
                           )
                           ≃
                           (
                           
                              Ex
                           
                           ,
                           
                              Re
                           
                           ,
                           
                              In
                           
                           ,
                           2
                           )
                        , but when composed with another assertion 
                           (
                           
                              
                                 Ex
                              
                              
                                 ′
                              
                           
                           ,
                           
                              
                                 Re
                              
                              
                                 ′
                              
                           
                           ,
                           
                              
                                 In
                              
                              
                                 ′
                              
                           
                           ,
                           1
                           )
                        , where 
                           
                              In
                           
                           ∩
                           
                              
                                 In
                              
                              
                                 ′
                              
                           
                           =
                           ∅
                        , we would get 
                           (
                           
                              Ex
                           
                           ,
                           
                              Re
                           
                           ,
                           
                              In
                           
                           ,
                           0
                           )
                           ⊗
                           (
                           
                              
                                 Ex
                              
                              
                                 ′
                              
                           
                           ,
                           
                              
                                 Re
                              
                              
                                 ′
                              
                           
                           ,
                           
                              
                                 In
                              
                              
                                 ′
                              
                           
                           ,
                           1
                           )
                           ≄
                           (
                           
                              Ex
                           
                           ,
                           
                              Re
                           
                           ,
                           
                              In
                           
                           ,
                           2
                           )
                           ⊗
                           (
                           
                              
                                 Ex
                              
                              
                                 ′
                              
                           
                           ,
                           
                              
                                 Re
                              
                              
                                 ′
                              
                           
                           ,
                           
                              
                                 In
                              
                              
                                 ′
                              
                           
                           ,
                           1
                           )
                         which contradicts compositionality: On the left side we would keep the assertion with highest generation 1 whereas on the right side we would keep the one with 2. As the sets of included events are different we have that they cannot entail the same conditions. With the natural numbers as conditions we can distinguish between the two assertions 
                           (
                           
                              Ex
                           
                           ,
                           
                              Re
                           
                           ,
                           
                              In
                           
                           ,
                           0
                           )
                           ≄
                           (
                           
                              Ex
                           
                           ,
                           
                              Re
                           
                           ,
                           
                              In
                           
                           ,
                           2
                           )
                         since we have that 
                           (
                           
                              Ex
                           
                           ,
                           
                              Re
                           
                           ,
                           
                              In
                           
                           ,
                           0
                           )
                           ⊬
                           2
                         but 
                           (
                           
                              Ex
                           
                           ,
                           
                              Re
                           
                           ,
                           
                              In
                           
                           ,
                           2
                           )
                           ⊢
                           2
                        .


                        
                           Remark 4.11
                           On sorting


                           We rely on sorting to properly define in 
                                 dcrPsi
                               the terms, substitutions, matching, etc. We rarely mention sorting aspects, only when necessary for clarifications, and rely on the intuition in most cases. For instance, in Definition 4.9 we silently use sorts for several aspects: to distinguish the different kinds of terms (like a sort for natural numbers, another sort for multi-sets); several corresponding name sorts; the assertion tuple operand is multi-sorted; the substitution takes care that names on the respective place in a tuple are replaced by terms of respective sort. We thus make careful use of notation to be in accordance with the sorting aspects; e.g., the notation 
                                 (
                                 a
                                 ,
                                 a
                                 ,
                                 a
                                 ,
                                 b
                                 )
                               is unacceptable, opposed to 
                                 (
                                 a
                                 ,
                                 c
                                 ,
                                 c
                                 ,
                                 b
                                 )
                               which allows both second and third elements of a tuple to be the same term.


                        
                           Lemma 4.12
                           
                              For two assertions 
                              
                                 Ψ
                                 =
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 ,
                                 g
                                 )
                                 ,
                                 
                                    
                                       Ψ
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       Ex
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       Re
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       In
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       g
                                    
                                    
                                       ′
                                    
                                 
                                 )
                               
                              we have that 
                              
                                 Ψ
                                 ≃
                                 
                                    
                                       Ψ
                                    
                                    
                                       ′
                                    
                                 
                                 ⇒
                                 g
                                 =
                                 
                                    
                                       g
                                    
                                    
                                       ′
                                    
                                 
                              
                              .
                           


                        
                           Proof
                           Since 
                                 Ψ
                                 ≃
                                 
                                    
                                       Ψ
                                    
                                    
                                       ′
                                    
                                 
                               and 
                                 Ψ
                                 ⊢
                                 g
                               then also 
                                 
                                    
                                       Ψ
                                    
                                    
                                       ′
                                    
                                 
                                 ⊢
                                 g
                               which means that 
                                 
                                    
                                       g
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 g
                              .  □


                        
                           Lemma 4.13
                           Correctness of 
                                 dcrPsi
                              
                           


                           
                              The 
                              
                                 dcrPsi
                               
                              instance fulfils the requirements of being a psi-calculi instance, cf. 
                              
                                 Definitions 2.2 and 2.4
                              
                              .
                           


                        
                           Proof
                           We have to show that the channel equivalence and the composition of assertions conform with the requirements from Definition 2.4. We also need to show that the operators and nominal datatypes of Definition 2.2 are well defined.

For the channel equivalence it is easy to see that symmetry and transitivity are respected since in Definition 4.9 (last line) channel equivalence is defined in terms of name equality.

For assertion composition we have to look at three different scenarios, one where all the assertions are open or 1, one where we have a mix of open or 1 and ground assertions, and last where we have only ground assertions.

We first point out that all open assertions are assertion equivalent through the fact that they cannot entail any conditions (i.e., entailment in Definition 4.9 is undefined for open assertions). The same goes for 1 which also does not entail any conditions, and thus assertion equivalent with all open assertions. Whenever we compose two open assertions we obtain 1, i.e., composition of open assertions results in the identity assertion that is assertion equivalent with all open assertions. (From here on we will refer to 1 as an open assertion for the sake of simplicity because we only care about assertion equivalence for the correctness proofs). Since the four requirements from Definition 4.9 on assertion composition are defined in terms of assertion equivalence, then they are trivially satisfied when only open assertions are involved.
                                 12
                              
                              
                                 12
                                 For example the identity is satisfied since 
                                       Ψ
                                       ⊗
                                       
                                          1
                                       
                                       
                                          =
                                          
                                             def
                                          
                                       
                                       
                                          1
                                       
                                     and 
                                       
                                          1
                                       
                                       ≃
                                       Ψ
                                     when Ψ is open.
                              
                           

For the case where we have a mix of open and ground assertions, the composition returns the ground assertion (i.e., open assertions are absorbed by any ground ones). It is easy to check the four requirements from Definition 4.9. Also note that it is not possible for any ground assertion to be equivalent with any open assertion since the ground assertion will at least entail the condition g when is its generation.

When we have only ground assertions the composition will maintain the one with the highest generation, when composing assertions with different generations; otherwise, if we have two ground assertions with the same generation g we obtain the assertion 
                                 (
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 g
                                 )
                              .

For commutativity it is easy to see that when the generations are the same we will always get the same assertion, independent of the order we compose them. When the assertions have different generations, keeping the one with the highest generation is independent of its place in the composition.

For compositionality we know, by Lemma 4.12, that if two assertions 
                                 Ψ
                                 ,
                                 
                                    
                                       Ψ
                                    
                                    
                                       ′
                                    
                                 
                               are equivalent then they have the same generation g. Therefore, when composed with another assertion 
                                 
                                    
                                       Ψ
                                    
                                    
                                       ″
                                    
                                 
                               with generation 
                                 
                                    
                                       g
                                    
                                    
                                       ″
                                    
                                 
                               we must treat three cases. If 
                                 g
                                 <
                                 
                                    
                                       g
                                    
                                    
                                       ″
                                    
                                 
                               then for both 
                                 Ψ
                                 ⊗
                                 
                                    
                                       Ψ
                                    
                                    
                                       ″
                                    
                                 
                               and 
                                 
                                    
                                       Ψ
                                    
                                    
                                       ′
                                    
                                 
                                 ⊗
                                 
                                    
                                       Ψ
                                    
                                    
                                       ″
                                    
                                 
                               we obtain 
                                 
                                    
                                       Ψ
                                    
                                    
                                       ″
                                    
                                 
                              . If 
                                 g
                                 =
                                 
                                    
                                       g
                                    
                                    
                                       ″
                                    
                                 
                               then on both sides we obtain the assertion 
                                 (
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 g
                                 )
                              . When 
                                 g
                                 >
                                 
                                    
                                       g
                                    
                                    
                                       ″
                                    
                                 
                               we have that 
                                 Ψ
                                 ⊗
                                 
                                    
                                       Ψ
                                    
                                    
                                       ″
                                    
                                 
                                 =
                                 Ψ
                               and 
                                 
                                    
                                       Ψ
                                    
                                    
                                       ′
                                    
                                 
                                 ⊗
                                 
                                    
                                       Ψ
                                    
                                    
                                       ″
                                    
                                 
                                 =
                                 
                                    
                                       Ψ
                                    
                                    
                                       ′
                                    
                                 
                               which are equivalent by assumption.

For associativity, when all the generations are different we remain with the assertion that has the highest generation (i.e., by virtue of the associativity of the max function on natural numbers). When two or more assertions have the same generation g the result depends on whether this is the largest generation or not. When g is the largest we obtain the assertion 
                                 (
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 g
                                 )
                              . Otherwise, the assertion with highest generation will be returned, on both sides.

To make sure that the nominal datatypes and operators of the instance are well defined consider the following observations. Assertion composition always returns a correct assertion term, whereas channel equality operation always returns a condition by virtue of the definition including all terms 
                                 M
                                 
                                    ↔
                                    ⋅
                                 
                                 N
                              .

It is not difficult to see that 
                                 T
                                 ,
                                 A
                               and C are nominal datatypes when the correct sorting is used. In particular, assertions are four-tuple terms that can take a name of sort multiset, two names of sort set, and one of sort natural numbers; each of which can be substituted with terms of corresponding data sorts. All these terms have finite support since they are finite. Terms can be either names, assertion tuples, or the individual terms that can be used by the substitution functions. There are then closed under name swapping, as well as under substitutions that respect the sorting discipline.  □

As stated in the lemma below, the entailment mimics the definition in DCR graphs for when an event (i.e., the third component of the conditions) is enabled in a marking (i.e., the first three components of the assertions).


                        
                           Lemma 4.14
                           Correlation between entailment in DCRs and 
                                 dcrPsi
                              
                           


                           
                              For any DCR graph 
                              
                                 D
                               
                              we have that
                              
                                 
                                    
                                       
                                          (
                                          
                                             Hi
                                          
                                          ,
                                          
                                             Re
                                          
                                          ,
                                          
                                             In
                                          
                                          ,
                                          g
                                          )
                                          ⊢
                                          (
                                          
                                             
                                                
                                             
                                          
                                          e
                                          ,
                                          
                                             
                                                
                                             
                                          
                                          e
                                          ,
                                          e
                                          )
                                           iff 
                                          (
                                          ⌊
                                          
                                             Hi
                                          
                                          ⌋
                                          ,
                                          
                                             Re
                                          
                                          ,
                                          
                                             In
                                          
                                          )
                                          ⊢
                                          e
                                          .
                                       
                                    
                                 
                              
                           


                        
                           Proof
                           Follows directly from Definition 4.2 and Definition 4.9  □

We are now ready to provide the mapping of DCR graphs to 
                           dcrPsi
                        . To facilitate proving the semantical correspondence we provide a slightly more general mapping that takes a DCR graph and a multi-set history of executed events.


                        
                           Definition 4.15
                           DCR-graphs to 
                                 dcrPsi
                              
                           


                           We define a function 
                                 
                                    dcrpsi
                                 
                                 (
                                 D
                                 ,
                                 
                                    Hi
                                 
                                 )
                               which takes a DCR 
                                 D
                                 =
                                 (
                                 E
                                 ,
                                 M
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 L
                                 ,
                                 l
                                 )
                              , with initial marking 
                                 M
                                 =
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 )
                              , and a multi-set Hi representing the history of events that have happened, with underlying set 
                                 ⌊
                                 
                                    Hi
                                 
                                 ⌋
                                 =
                                 
                                    Ex
                                 
                              , and returns a 
                                 dcrPsi
                               process
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                d
                                                c
                                                r
                                             
                                          
                                          =
                                          (
                                          ν
                                          m
                                          )
                                          (
                                          
                                             
                                                P
                                             
                                             
                                                k
                                             
                                          
                                          ∥
                                          
                                             
                                                P
                                             
                                             
                                                E
                                             
                                          
                                          )
                                       
                                    
                                 
                               where
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                k
                                             
                                          
                                          =
                                          ⦇
                                          (
                                          
                                             Hi
                                          
                                          ,
                                          
                                             Re
                                          
                                          ,
                                          
                                             In
                                          
                                          ,
                                          |
                                          
                                             Hi
                                          
                                          |
                                          )
                                          ⦈
                                          ∥
                                          
                                             
                                                m
                                             
                                             ‾
                                          
                                          〈
                                          (
                                          
                                             Hi
                                          
                                          ,
                                          
                                             Re
                                          
                                          ,
                                          
                                             In
                                          
                                          ,
                                          |
                                          
                                             Hi
                                          
                                          |
                                          )
                                          〉
                                          .
                                          
                                             0
                                          
                                          
                                           and 
                                          
                                          
                                             
                                                P
                                             
                                             
                                                E
                                             
                                          
                                          
                                          =
                                          
                                          
                                             ∏
                                             
                                                e
                                                ∈
                                                E
                                             
                                          
                                          
                                             
                                                P
                                             
                                             
                                                e
                                             
                                          
                                       
                                    
                                 
                               with
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      e
                                                   
                                                
                                             
                                             
                                                =
                                             
                                             
                                                !
                                                (
                                                
                                                   case
                                                
                                                
                                                
                                                   
                                                      φ
                                                   
                                                   
                                                      e
                                                   
                                                
                                                :
                                                
                                                   
                                                      m
                                                   
                                                   _
                                                
                                                〈
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                〉
                                                .
                                             
                                          
                                          
                                             
                                             
                                             
                                                
                                                   !
                                                   (
                                                
                                                (
                                                
                                                   
                                                      m
                                                   
                                                   ‾
                                                
                                                〈
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                +
                                                {
                                                e
                                                }
                                                ,
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ∖
                                                {
                                                e
                                                }
                                                )
                                                ∪
                                                e
                                                
                                                   
                                                      
                                                   
                                                
                                                ,
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ∖
                                                e
                                                
                                                   
                                                      
                                                   
                                                
                                                )
                                                ∪
                                                e
                                                
                                                   
                                                      
                                                   
                                                
                                                ,
                                                s
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                )
                                                〉
                                                .
                                                
                                                   0
                                                
                                                ∥
                                             
                                          
                                          
                                             
                                             
                                             
                                                
                                                   !
                                                   (
                                                   (
                                                
                                                ⦇
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                +
                                                {
                                                e
                                                }
                                                ,
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ∖
                                                {
                                                e
                                                }
                                                )
                                                ∪
                                                e
                                                
                                                   
                                                      
                                                   
                                                
                                                ,
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ∖
                                                e
                                                
                                                   
                                                      
                                                   
                                                
                                                )
                                                ∪
                                                e
                                                
                                                   
                                                      
                                                   
                                                
                                                ,
                                                s
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                )
                                                ⦈
                                                )
                                                )
                                             
                                          
                                       
                                    
                                 
                               where 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       
                                    
                                 
                                 e
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 e
                                 ,
                                 e
                                 )
                               and 
                                 
                                    
                                       X
                                    
                                    
                                       E
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       R
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       I
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       G
                                    
                                 
                               are names.

The process 
                           
                              
                                 P
                              
                              
                                 d
                                 c
                                 r
                              
                           
                         resulting from dcrpsi contains the process 
                           
                              
                                 P
                              
                              
                                 k
                              
                           
                         that models the initial marking of the encoded DCR graph as an assertion process, and also communicates this assertion on the channel name m. We give this assertion the generation 
                           |
                           
                              Hi
                           
                           |
                        . The rest of the process, i.e., 
                           
                              
                                 P
                              
                              
                                 E
                              
                           
                        , captures the events and relations of the DCR graph as a parallel composition of processes 
                           
                              
                                 P
                              
                              
                                 e
                              
                           
                         for each of the events of the encoded DCR graph. We will write 
                           
                              dcrpsi
                           
                           (
                           D
                           )
                         for 
                           
                              dcrpsi
                           
                           (
                           D
                           ,
                           
                              Hi
                           
                           )
                        , when 
                           
                              Hi
                           
                           =
                           
                              Ex
                           
                        .

Each event is encoded, following the ideas for event structures, using the case construct with a single guard 
                           
                              
                                 φ
                              
                              
                                 e
                              
                           
                        . The guard contains the information for the event e that needs to be checked against the current marking (i.e., the assertion) to decide if the event is enabled: The set of events that are prerequisites for e (i.e., 
                           
                              
                                 
                              
                           
                           e
                        ) and must either be executed or excluded, the set of milestones related to e (i.e., 
                           
                              
                                 
                              
                           
                           e
                        ) that must either be excluded or not be scheduled as responses, and the event e itself, that must be included. The events in a DCR graph can happen multiple times, hence the use of the replication operation as the outermost operator.

As for event structures, there may be several events enabled by a marking, hence several of the parallel case processes may have their guards entailed by the current assertion. Only one of these input actions will communicate with the single output action on m, and will receive in the four variables the current marking. After the communication, the input process will leave behind an assertion process containing an updated marking, and also a process ready to output on m this updated marking. In fact, after a communication, what is left behind is something looking like a 
                           
                              
                                 P
                              
                              
                                 k
                              
                           
                         process, but with an updated marking and an increased generation number. The updating of the marking follows the same definition from the DCR graphs. We also guard the channel name m so that no other input or output transitions can happen on this channel, except the internal communications.


                        
                           Notation 4.16
                           In the context of Definition 4.15, i.e., when encoding a DCR through the dcrpsi, we will use the following shorthand notation to stand for the often and similar way of updating a marking:
                                 
                                    
                                       
                                          
                                             
                                                U
                                             
                                             
                                                e
                                             
                                          
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          )
                                          
                                             =
                                             
                                                def
                                             
                                          
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          +
                                          {
                                          e
                                          }
                                          ,
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ∖
                                          {
                                          e
                                          }
                                          )
                                          ∪
                                          e
                                          
                                             
                                                
                                             
                                          
                                          ,
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ∖
                                          e
                                          
                                             
                                                
                                             
                                          
                                          )
                                          ∪
                                          e
                                          
                                             
                                                
                                             
                                          
                                          ,
                                          s
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          )
                                          )
                                          .
                                       
                                    
                                 
                               The updating notation is parametrised by an event e which is enough to extract the sets of events that are used in the denoted term. The four names can be substituted as in any term, thus a substitution
                                 
                                    
                                       
                                          
                                             
                                                U
                                             
                                             
                                                e
                                             
                                          
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          )
                                          [
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          :
                                          =
                                          
                                             Ex
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          :
                                          =
                                          
                                             Re
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          :
                                          =
                                          
                                             In
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          :
                                          =
                                          g
                                          ]
                                       
                                    
                                 
                               would produce the term
                                 
                                    
                                       
                                          (
                                          
                                             Ex
                                          
                                          +
                                          {
                                          e
                                          }
                                          ,
                                          (
                                          
                                             Re
                                          
                                          ∖
                                          {
                                          e
                                          }
                                          )
                                          ∪
                                          e
                                          
                                             
                                                
                                             
                                          
                                          ,
                                          (
                                          
                                             In
                                          
                                          ∖
                                          e
                                          
                                             
                                                
                                             
                                          
                                          )
                                          ∪
                                          e
                                          
                                             
                                                
                                             
                                          
                                          ,
                                          s
                                          (
                                          g
                                          )
                                          )
                                          ,
                                       
                                    
                                 
                               and we usually just write 
                                 
                                    
                                       U
                                    
                                    
                                       e
                                    
                                 
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 ,
                                 g
                                 )
                              .


                        
                           Example 4.17
                           Taking the DCR graph 
                                 
                                    
                                       D
                                    
                                    
                                       1
                                    
                                 
                               from Fig. 5, we can create a 
                                 dcrPsi
                              -process 
                                 P
                                 =
                                 
                                    dcrpsi
                                 
                                 (
                                 
                                    
                                       D
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 ∅
                                 )
                              , with initial generation 
                                 |
                                 ∅
                                 |
                                 =
                                 0
                              , as follows
                                 
                                    
                                       
                                          
                                             
                                                P
                                                =
                                             
                                             
                                                (
                                                ν
                                                m
                                                )
                                                (
                                                ⦇
                                                (
                                                ∅
                                                ,
                                                ∅
                                                ,
                                                {
                                                
                                                   r
                                                
                                                ,
                                                
                                                   s
                                                
                                                }
                                                ,
                                                0
                                                )
                                                ⦈
                                                ∥
                                                
                                                   
                                                      m
                                                   
                                                   ‾
                                                
                                                〈
                                                (
                                                ∅
                                                ,
                                                ∅
                                                ,
                                                {
                                                
                                                   r
                                                
                                                ,
                                                
                                                   s
                                                
                                                }
                                                ,
                                                0
                                                )
                                                〉
                                                .
                                                
                                                   0
                                                
                                                ∥
                                             
                                          
                                          
                                             
                                             
                                                !
                                                (
                                                
                                                   case
                                                
                                                
                                                (
                                                ∅
                                                ,
                                                ∅
                                                ,
                                                
                                                   r
                                                
                                                )
                                                :
                                                
                                                   
                                                      m
                                                   
                                                   _
                                                
                                                〈
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                〉
                                                .
                                                (
                                                ⦇
                                                
                                                   
                                                      U
                                                   
                                                   
                                                      
                                                         r
                                                      
                                                   
                                                
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                ⦈
                                                ∥
                                                
                                                   
                                                      m
                                                   
                                                   ‾
                                                
                                                〈
                                                
                                                   
                                                      U
                                                   
                                                   
                                                      
                                                         r
                                                      
                                                   
                                                
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                〉
                                                .
                                                
                                                   0
                                                
                                                )
                                                )
                                                ∥
                                             
                                          
                                          
                                             
                                             
                                                !
                                                (
                                                
                                                   case
                                                
                                                
                                                (
                                                {
                                                
                                                   r
                                                
                                                }
                                                ,
                                                ∅
                                                ,
                                                
                                                   s
                                                
                                                )
                                                :
                                                
                                                   
                                                      m
                                                   
                                                   _
                                                
                                                〈
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                〉
                                                .
                                                (
                                                ⦇
                                                
                                                   
                                                      U
                                                   
                                                   
                                                      
                                                         s
                                                      
                                                   
                                                
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                ⦈
                                                ∥
                                                
                                                   
                                                      m
                                                   
                                                   ‾
                                                
                                                〈
                                                
                                                   
                                                      U
                                                   
                                                   
                                                      
                                                         s
                                                      
                                                   
                                                
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                〉
                                                .
                                                
                                                   0
                                                
                                                )
                                                )
                                                )
                                                .
                                             
                                          
                                       
                                    
                                 
                               From the entailment we can see that this process may only have a synchronisation between the output 
                                 
                                    
                                       m
                                    
                                    ‾
                                 
                                 〈
                                 (
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 {
                                 
                                    r
                                 
                                 ,
                                 
                                    s
                                 
                                 }
                                 ,
                                 0
                                 )
                                 〉
                                 .
                                 
                                    0
                                 
                               and the input guarded by the 
                                 
                                    case
                                 
                                 
                                 (
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 
                                    r
                                 
                                 )
                              , making a transition 
                                 P
                                 
                                    →
                                    τ
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               with
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                =
                                             
                                             
                                                (
                                                ν
                                                m
                                                )
                                                (
                                                ⦇
                                                (
                                                ∅
                                                ,
                                                ∅
                                                ,
                                                {
                                                
                                                   r
                                                
                                                ,
                                                
                                                   s
                                                
                                                }
                                                ,
                                                0
                                                )
                                                ⦈
                                                ∥
                                                
                                                   0
                                                
                                                ∥
                                             
                                          
                                          
                                             
                                             
                                                ⦇
                                                (
                                                {
                                                
                                                   r
                                                
                                                }
                                                ,
                                                {
                                                
                                                   s
                                                
                                                }
                                                ,
                                                {
                                                
                                                   s
                                                
                                                }
                                                ,
                                                1
                                                )
                                                ⦈
                                                ∥
                                                
                                                   
                                                      m
                                                   
                                                   ‾
                                                
                                                〈
                                                (
                                                {
                                                
                                                   r
                                                
                                                }
                                                ,
                                                {
                                                
                                                   s
                                                
                                                }
                                                ,
                                                {
                                                
                                                   s
                                                
                                                }
                                                ,
                                                1
                                                )
                                                〉
                                                .
                                                
                                                   0
                                                
                                                ∥
                                             
                                          
                                          
                                             
                                             
                                                !
                                                (
                                                
                                                   case
                                                
                                                
                                                (
                                                ∅
                                                ,
                                                ∅
                                                ,
                                                
                                                   r
                                                
                                                )
                                                :
                                                
                                                   
                                                      m
                                                   
                                                   _
                                                
                                                〈
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                〉
                                                .
                                                (
                                                ⦇
                                                
                                                   
                                                      U
                                                   
                                                   
                                                      
                                                         r
                                                      
                                                   
                                                
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                ⦈
                                                ∥
                                                
                                                   
                                                      m
                                                   
                                                   ‾
                                                
                                                〈
                                                
                                                   
                                                      U
                                                   
                                                   
                                                      
                                                         r
                                                      
                                                   
                                                
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                〉
                                                .
                                                
                                                   0
                                                
                                                )
                                                )
                                                ∥
                                             
                                          
                                          
                                             
                                             
                                                !
                                                (
                                                
                                                   case
                                                
                                                
                                                (
                                                {
                                                
                                                   r
                                                
                                                }
                                                ,
                                                ∅
                                                ,
                                                
                                                   s
                                                
                                                )
                                                :
                                                
                                                   
                                                      m
                                                   
                                                   _
                                                
                                                〈
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                〉
                                                .
                                                (
                                                ⦇
                                                
                                                   
                                                      U
                                                   
                                                   
                                                      
                                                         s
                                                      
                                                   
                                                
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                ⦈
                                                ∥
                                                
                                                   
                                                      m
                                                   
                                                   ‾
                                                
                                                〈
                                                
                                                   
                                                      U
                                                   
                                                   
                                                      
                                                         s
                                                      
                                                   
                                                
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                〉
                                                .
                                                
                                                   0
                                                
                                                )
                                                )
                                                )
                                                .
                                             
                                          
                                       
                                    
                                 
                               The other input was blocked from synchronisation with the output by the entailment relation.


                        
                           Definition 4.18
                           Syntactic restrictions for 
                                 dcrPsi
                              
                           


                           We define a 
                                 dcrPsi
                              -process P to be syntactically correct for a set of events E if it is of the following form, up to structural congruence:
                                 
                                    
                                       
                                          P
                                          =
                                          (
                                          ν
                                          m
                                          )
                                          (
                                          (
                                          
                                             ∏
                                             
                                                0
                                                ≤
                                                k
                                                ≤
                                                g
                                                ≤
                                                
                                                   
                                                      k
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          ⦇
                                          
                                             
                                                Ψ
                                             
                                             
                                                g
                                             
                                          
                                          ⦈
                                          )
                                          ∥
                                          
                                             
                                                m
                                             
                                             ‾
                                          
                                          〈
                                          (
                                          
                                             
                                                Ex
                                             
                                             
                                                
                                                   
                                                      k
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                Re
                                             
                                             
                                                
                                                   
                                                      k
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                In
                                             
                                             
                                                
                                                   
                                                      k
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                k
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          〉
                                          .
                                          
                                             0
                                          
                                          ∥
                                          (
                                          
                                             ∏
                                             
                                                e
                                                ∈
                                                E
                                             
                                          
                                          
                                             
                                                P
                                             
                                             
                                                e
                                             
                                          
                                          )
                                          )
                                       
                                    
                                 
                               with 
                                 k
                                 ∈
                                 N
                               and
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      Ψ
                                                   
                                                   
                                                      g
                                                   
                                                
                                                :
                                                =
                                                ⦇
                                                (
                                                
                                                   
                                                      Ex
                                                   
                                                   
                                                      g
                                                   
                                                
                                                ,
                                                
                                                   
                                                      Re
                                                   
                                                   
                                                      g
                                                   
                                                
                                                ,
                                                
                                                   
                                                      In
                                                   
                                                   
                                                      g
                                                   
                                                
                                                ,
                                                g
                                                )
                                                ⦈
                                                 where 
                                                |
                                                
                                                   
                                                      Ex
                                                   
                                                   
                                                      g
                                                   
                                                
                                                |
                                                =
                                                g
                                                ,
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      e
                                                   
                                                
                                                :
                                                =
                                                
                                                !
                                                (
                                                
                                                   case
                                                
                                                
                                                
                                                   
                                                      φ
                                                   
                                                   
                                                      e
                                                   
                                                
                                                :
                                                
                                                   
                                                      m
                                                   
                                                   _
                                                
                                                〈
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      I
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                〉
                                                .
                                                (
                                                
                                                   
                                                      m
                                                   
                                                   ‾
                                                
                                                〈
                                                
                                                   
                                                      U
                                                   
                                                   
                                                      e
                                                   
                                                
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                〉
                                                .
                                                
                                                   0
                                                
                                                ∥
                                                ⦇
                                                
                                                   
                                                      U
                                                   
                                                   
                                                      e
                                                   
                                                
                                                (
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      E
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      R
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ,
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      G
                                                   
                                                
                                                )
                                                ⦈
                                                )
                                                )
                                                
                                                ,
                                             
                                          
                                       
                                    
                                 
                               with 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       
                                    
                                 
                                 e
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 e
                                 ,
                                 e
                                 )
                              , where the indexed Ex are multi-sets of events, and the indexed 
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                              , as well as 
                                 
                                    
                                       
                                    
                                 
                                 e
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 e
                               are sets of events.

The lemma below states some easy observations that we will use in the following.


                        
                           Lemma 4.19
                           
                              In a syntactically correct 
                              
                                 dcrPsi
                              
                              -process P we have that:
                              
                                 
                                    1.
                                    
                                       Different assertion processes have different generations, not necessarily starting at 0, and less or equal to the assertion in the unique output at the top level.
                                    


                                       Each 
                                       
                                          
                                             
                                                P
                                             
                                             
                                                e
                                             
                                          
                                        
                                       sub-process corresponds to a unique event.
                                    


                                       There is a unique sub-process 
                                       
                                          
                                             
                                                m
                                             
                                             ‾
                                          
                                          〈
                                          (
                                          
                                             Ex
                                          
                                          ,
                                          
                                             Re
                                          
                                          ,
                                          
                                             In
                                          
                                          ,
                                          g
                                          )
                                          〉
                                          .
                                          
                                             0
                                          
                                        
                                       at top level, and moreover, 
                                       
                                          F
                                          (
                                          P
                                          )
                                          =
                                          (
                                          
                                             Ex
                                          
                                          ,
                                          
                                             Re
                                          
                                          ,
                                          
                                             In
                                          
                                          ,
                                          g
                                          )
                                       
                                       .
                                    


                                       The process P needs only five names 
                                       
                                          {
                                          m
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          }
                                        
                                       since in each 
                                       
                                          
                                             
                                                P
                                             
                                             
                                                e
                                             
                                          
                                        
                                       the names 
                                       
                                          {
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          }
                                        
                                       are bound by the input construct.
                                    

In the following when we refer to a 
                           dcrPsi
                        -process we will assume that it is a syntactically correct process, over some finite set E of event constants. In Theorem 4.28 we prove that for any syntactically correct P there exists a DCR graph which is bisimilar to P. Before that we need a few preparatory results.


                        
                           Lemma 4.20
                           
                              For any 
                              
                                 D
                               
                              and Hi, the 
                              
                                 dcrPsi
                              
                              -process 
                              
                                 
                                    dcrpsi
                                 
                                 (
                                 D
                                 ,
                                 
                                    Hi
                                 
                                 )
                              
                              , if defined, is syntactically correct.
                           


                        
                           Proof
                           Follows directly from Definition 4.15 of dcrpsi.  □


                        
                           Lemma 4.21
                           Frame-marking correspondence


                           
                              For any 
                              
                                 D
                               
                              and Hi, then the following statements are equivalent
                              
                                 
                                    •
                                    
                                       the frame of 
                                       
                                          
                                             dcrpsi
                                          
                                          (
                                          D
                                          ,
                                          
                                             Hi
                                          
                                          )
                                        
                                       is 
                                       
                                          (
                                          
                                             Hi
                                          
                                          ,
                                          
                                             Re
                                          
                                          ,
                                          
                                             In
                                          
                                          ,
                                          |
                                          
                                             Hi
                                          
                                          |
                                          )
                                       
                                    


                                       the marking of 
                                       
                                          D
                                        
                                       is 
                                       
                                          (
                                          ⌊
                                          
                                             Hi
                                          
                                          ⌋
                                          ,
                                          
                                             Re
                                          
                                          ,
                                          
                                             In
                                          
                                          )
                                       
                                       .
                                    


                        
                           Proof
                           The 
                                 
                                    dcrpsi
                                 
                                 (
                                 D
                                 ,
                                 
                                    Hi
                                 
                                 )
                               returns a 
                                 dcrPsi
                               process with only one assertion 
                                 (
                                 
                                    Hi
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 ,
                                 |
                                 
                                    Hi
                                 
                                 |
                                 )
                               which forms the frame. This assertion is made directly from the marking 
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 )
                               of 
                                 D
                              , together with the given generation 
                                 |
                                 
                                    Hi
                                 
                                 |
                              , and we know that 
                                 ⌊
                                 
                                    Hi
                                 
                                 ⌋
                                 =
                                 
                                    Ex
                                 
                              .  □


                        
                           Lemma 4.22
                           Transitions preserve syntactic correctness


                           
                              For any syntactically correct 
                              
                                 dcrPsi
                              
                              -process
                              
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                0
                                             
                                          
                                          ≡
                                          (
                                          ν
                                          m
                                          )
                                          (
                                          (
                                          
                                             ∏
                                             
                                                k
                                                ≤
                                                g
                                                ≤
                                                
                                                   
                                                      g
                                                   
                                                   
                                                      0
                                                   
                                                
                                             
                                          
                                          ⦇
                                          
                                             
                                                Ψ
                                             
                                             
                                                g
                                             
                                          
                                          ⦈
                                          )
                                          ∥
                                          
                                             
                                                m
                                             
                                             ‾
                                          
                                          〈
                                          (
                                          
                                             
                                                Ex
                                             
                                             
                                                0
                                             
                                          
                                          ,
                                          
                                             
                                                Re
                                             
                                             
                                                0
                                             
                                          
                                          ,
                                          
                                             
                                                In
                                             
                                             
                                                0
                                             
                                          
                                          ,
                                          
                                             
                                                g
                                             
                                             
                                                0
                                             
                                          
                                          )
                                          〉
                                          .
                                          
                                             0
                                          
                                          ∥
                                          (
                                          
                                             ∏
                                             
                                                e
                                                ∈
                                                E
                                             
                                          
                                          
                                             
                                                P
                                             
                                             
                                                e
                                             
                                          
                                          )
                                          )
                                       
                                    
                                 
                               
                              if 
                              
                                 
                                    1
                                 
                                 ▷
                                 
                                    
                                       P
                                    
                                    
                                       0
                                    
                                 
                                 
                                    →
                                    α
                                 
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                               
                              and 
                              
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 (
                                 
                                    
                                       Ex
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       Re
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       In
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       g
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                              , for 
                              
                                 i
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                              
                              , then
                              
                                 
                                    1.
                                    
                                       
                                          α
                                          =
                                          τ
                                       
                                    


                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ≡
                                                   (
                                                   ν
                                                   m
                                                   )
                                                   (
                                                   (
                                                   
                                                      ∏
                                                      
                                                         k
                                                         ≤
                                                         g
                                                         ≤
                                                         
                                                            
                                                               g
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         +
                                                         1
                                                      
                                                   
                                                   ⦇
                                                   
                                                      
                                                         Ψ
                                                      
                                                      
                                                         g
                                                      
                                                   
                                                   ⦈
                                                   )
                                                   ∥
                                                   
                                                      
                                                         m
                                                      
                                                      ‾
                                                   
                                                   〈
                                                   (
                                                   
                                                      
                                                         Ex
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         Re
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         In
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         g
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   )
                                                   〉
                                                   .
                                                   
                                                      0
                                                   
                                                   ∥
                                                   (
                                                   
                                                      ∏
                                                      
                                                         e
                                                         ∈
                                                         E
                                                      
                                                   
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   )
                                                   )
                                                
                                             
                                          
                                       
                                    


                                       
                                          ∃
                                          e
                                          ∈
                                          E
                                        
                                       such that: 
                                       
                                          
                                             
                                                Ex
                                             
                                             
                                                1
                                             
                                          
                                          =
                                          
                                             
                                                Ex
                                             
                                             
                                                0
                                             
                                          
                                          +
                                          {
                                          e
                                          }
                                          ,
                                          
                                             
                                                Re
                                             
                                             
                                                1
                                             
                                          
                                          =
                                          (
                                          
                                             
                                                Re
                                             
                                             
                                                0
                                             
                                          
                                          ∖
                                          {
                                          e
                                          }
                                          )
                                          ∪
                                          e
                                          
                                             
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                In
                                             
                                             
                                                1
                                             
                                          
                                          =
                                          (
                                          
                                             
                                                In
                                             
                                             
                                                0
                                             
                                          
                                          ∖
                                          e
                                          
                                             
                                                
                                             
                                          
                                          )
                                          ∪
                                          e
                                          
                                             
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                g
                                             
                                             
                                                1
                                             
                                          
                                          =
                                          s
                                          (
                                          
                                             
                                                g
                                             
                                             
                                                0
                                             
                                          
                                          )
                                       
                                       .
                                    


                                       In particular, it follows that transitions of syntactically correct 
                                       
                                          dcrPsi
                                       
                                       -processes preserve syntactic correctness.
                                    


                        
                           Proof
                           
                              
                                 
                                    1.
                                    In psi-calculi there are three different types of transitions: input, output, and τ transitions. Syntactically correct 
                                          dcrPsi
                                       -processes communicate over only one channel name m which is guarded, and therefore there cannot exist input nor output transitions. Thus the only possibility is τ-transitions.

To see that 
                                          
                                             
                                                P
                                             
                                             
                                                1
                                             
                                          
                                        is syntactically correct note that any transition in 
                                          
                                             
                                                P
                                             
                                             
                                                0
                                             
                                          
                                        is between the unique top level output 
                                          
                                             
                                                m
                                             
                                             ‾
                                          
                                          〈
                                          (
                                          
                                             
                                                Ex
                                             
                                             
                                                0
                                             
                                          
                                          ,
                                          
                                             
                                                Re
                                             
                                             
                                                0
                                             
                                          
                                          ,
                                          
                                             
                                                In
                                             
                                             
                                                0
                                             
                                          
                                          ,
                                          
                                             
                                                g
                                             
                                             
                                                0
                                             
                                          
                                          )
                                          〉
                                          .
                                          
                                             0
                                          
                                        and a case -guarded input
                                          
                                             
                                                
                                                   
                                                      case
                                                   
                                                   
                                                   
                                                      
                                                         φ
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   :
                                                   
                                                      
                                                         m
                                                      
                                                      _
                                                   
                                                   〈
                                                   (
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         E
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         R
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         I
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         G
                                                      
                                                   
                                                   )
                                                   〉
                                                   .
                                                   (
                                                   
                                                      
                                                         m
                                                      
                                                      ‾
                                                   
                                                   〈
                                                   
                                                      
                                                         U
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         E
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         R
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         G
                                                      
                                                   
                                                   )
                                                   〉
                                                   .
                                                   
                                                      0
                                                   
                                                   ∥
                                                   ⦇
                                                   
                                                      
                                                         U
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         E
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         R
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         G
                                                      
                                                   
                                                   )
                                                   ⦈
                                                   )
                                                
                                             
                                          
                                        coming from the replication of some 
                                          
                                             
                                                P
                                             
                                             
                                                e
                                             
                                          
                                       . After the transition and substitution updating the marking, the output becomes 0, whereas the case process becomes 
                                          
                                             
                                                m
                                             
                                             ‾
                                          
                                          〈
                                          (
                                          
                                             
                                                Ex
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                Re
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                In
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                g
                                             
                                             
                                                1
                                             
                                          
                                          )
                                          〉
                                          .
                                          
                                             0
                                          
                                          ∥
                                          ⦇
                                          (
                                          
                                             
                                                Ex
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                Re
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                In
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                g
                                             
                                             
                                                1
                                             
                                          
                                          )
                                          ⦈
                                        where 
                                          
                                             
                                                Ex
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                Re
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                In
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                g
                                             
                                             
                                                1
                                             
                                          
                                        are as in the statement, cf. Definition 4.15 and Notation 4.16. Since 
                                          
                                             
                                                Ex
                                             
                                             
                                                1
                                             
                                          
                                          =
                                          
                                             
                                                Ex
                                             
                                             
                                                0
                                             
                                          
                                          +
                                          {
                                          e
                                          }
                                        we can find the event e responsible for the current τ-transition through 
                                          
                                             
                                                Ex
                                             
                                             
                                                1
                                             
                                          
                                          ∖
                                          
                                             
                                                Ex
                                             
                                             
                                                0
                                             
                                          
                                          =
                                          {
                                          e
                                          }
                                       . In consequence:
                                          
                                             (a)
                                             The single output of 
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         0
                                                      
                                                   
                                                 has been reduced in 
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                 to 0 and we obtained exactly one new output of the correct form, as required.

Since no assertions from 
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         0
                                                      
                                                   
                                                 were removed, we can write the assertions in 
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                 as 
                                                   
                                                      
                                                         ∏
                                                      
                                                      
                                                         k
                                                         ≤
                                                         g
                                                         ≤
                                                         
                                                            
                                                               g
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                      
                                                   
                                                   ⦇
                                                   
                                                      
                                                         Ψ
                                                      
                                                      
                                                         g
                                                      
                                                   
                                                   ⦈
                                                   ∥
                                                   ⦇
                                                   (
                                                   
                                                      
                                                         Ex
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         Re
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         In
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ,
                                                   s
                                                   (
                                                   
                                                      
                                                         g
                                                      
                                                      
                                                         0
                                                      
                                                   
                                                   )
                                                   )
                                                   ⦈
                                                , which can be written as 
                                                   
                                                      
                                                         ∏
                                                      
                                                      
                                                         k
                                                         ≤
                                                         g
                                                         ≤
                                                         s
                                                         (
                                                         
                                                            
                                                               g
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                   ⦇
                                                   
                                                      
                                                         Ψ
                                                      
                                                      
                                                         g
                                                      
                                                   
                                                   ⦈
                                                .

The application of rule (rep) reduces 
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                 to itself in parallel with the case-process that participated in the communication above. Therefore, the product of 
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                 processes remains the same, whereas the case process becomes the new output and a new assertion process.

Follows directly from the Notation 4.16 for 
                                          
                                             
                                                U
                                             
                                             
                                                e
                                             
                                          
                                        after substitutions. □

Based on Lemma 4.22 we can define transitions labelled by event constants between two 
                           dcrPsi
                        -processes as follows.


                        
                           Definition 4.23
                           Event transitions


                           Define 
                                 P
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               iff 
                                 
                                    1
                                 
                                 ▷
                                 P
                                 
                                    →
                                    τ
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               and 
                                 
                                    
                                       Ex
                                    
                                    
                                       ′
                                    
                                 
                                 ∖
                                 
                                    Ex
                                 
                                 =
                                 {
                                 e
                                 }
                               from 
                                 F
                                 (
                                 P
                                 )
                                 =
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 ,
                                 g
                                 )
                               and 
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 =
                                 (
                                 
                                    
                                       Ex
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       Re
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       In
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       g
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              . Define event-labelled transition systems, denoted 
                                 LTS
                              , to have as states all 
                                 dcrPsi
                              -processes and transitions between states defined by the above event-labelled transitions. For some 
                                 dcrPsi
                              -process P, we call the event-labelled transition system of P, denoted 
                                 
                                    LTS
                                 
                                 (
                                 P
                                 )
                              , only the part of 
                                 LTS
                               reachable from P.

We are now ready to show that the 
                           dcrPsi
                        -mapping preserves the behaviour.


                        
                           Proposition 4.24
                           Preserving behaviour


                           
                              For
                              
                                 
                                    
                                       
                                          P
                                          ≡
                                          (
                                          
                                             ∏
                                             
                                                k
                                                ≤
                                                g
                                                <
                                                |
                                                
                                                   Hi
                                                
                                                |
                                             
                                          
                                          ⦇
                                          
                                             
                                                Ψ
                                             
                                             
                                                g
                                             
                                          
                                          ⦈
                                          )
                                          ∥
                                          
                                             dcrpsi
                                          
                                          (
                                          D
                                          ,
                                          
                                             Hi
                                          
                                          )
                                       
                                    
                                 
                               
                              then
                              
                                 
                                    
                                       
                                          P
                                          
                                             ⇝
                                             e
                                          
                                          
                                             
                                                P
                                             
                                             
                                                ′
                                             
                                          
                                          ⇔
                                          D
                                          
                                             →
                                             e
                                          
                                          
                                             
                                                D
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                 
                               
                              s.t.
                              
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                ′
                                             
                                          
                                          ≡
                                          (
                                          
                                             ∏
                                             
                                                k
                                                ≤
                                                g
                                                <
                                                |
                                                
                                                   Hi
                                                
                                                |
                                             
                                          
                                          ⦇
                                          
                                             
                                                Ψ
                                             
                                             
                                                g
                                             
                                          
                                          ⦈
                                          )
                                          ∥
                                          ⦇
                                          F
                                          (
                                          
                                             dcrpsi
                                          
                                          (
                                          D
                                          ,
                                          
                                             Hi
                                          
                                          )
                                          )
                                          ⦈
                                          ∥
                                          
                                             dcrpsi
                                          
                                          (
                                          
                                             
                                                D
                                             
                                             
                                                ′
                                             
                                          
                                          ,
                                          
                                             Hi
                                          
                                          +
                                          {
                                          e
                                          }
                                          )
                                          .
                                       
                                    
                                 
                              
                           


                        
                           Proof
                           First it is easy to see that 
                                 F
                                 (
                                 P
                                 )
                                 =
                                 F
                                 (
                                 
                                    dcrpsi
                                 
                                 (
                                 D
                                 ,
                                 
                                    Hi
                                 
                                 )
                                 )
                               from Definitions 4.15 and 4.18.

From Definitions 4.2, 4.9 and 4.15, and Lemma 4.21, we can see that an event is enabled in P iff it is enabled in 
                                 D
                              . Therefore, whenever a transition exists on one side of the double implication, it exists on the other side as well.

It is easy to see from Definitions 4.3 and 4.15, that after a transition 
                                 P
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                              , the updates to the frame 
                                 F
                                 (
                                 P
                                 )
                                 =
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 ,
                                 g
                                 )
                               that we see in the frame of 
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                                 )
                               are the same as when updating the marking to 
                                 
                                    
                                       M
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       Ex
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       Re
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       In
                                    
                                    
                                       ′
                                    
                                 
                                 )
                               in the transition 
                                 D
                                 
                                    →
                                    e
                                 
                                 
                                    
                                       D
                                    
                                    
                                       ′
                                    
                                 
                              , with the exception of Ex being a multi-set and the generation g. In particular, 
                                 
                                    
                                       Ex
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    Ex
                                 
                                 +
                                 {
                                 e
                                 }
                              , which in a marking it means that e is added to Ex if it was not already there, whereas in the assertion the multiplicity of e is increased.

Therefore, 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               is the same as P with the addition of the above new assertion process 
                                 ⦇
                                 
                                    
                                       Ψ
                                    
                                    
                                       |
                                       
                                          Hi
                                       
                                       +
                                       {
                                       e
                                       }
                                       |
                                    
                                 
                                 ⦈
                               left behind by the communication, and that the output has been changed to match the new state. Since this has highest generation, it becomes the frame of 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                              . Moreover, this assertion together with 
                                 
                                    dcrpsi
                                 
                                 (
                                 D
                                 ,
                                 
                                    Hi
                                 
                                 )
                               are the same as 
                                 
                                    dcrpsi
                                 
                                 (
                                 
                                    
                                       D
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    Hi
                                 
                                 +
                                 {
                                 e
                                 }
                                 )
                              .  □


                        
                           Definition 4.25
                           Event bisimulation


                           We define event bisimulation 
                                 
                                    ∼
                                    •
                                 
                               between 
                                 dcrPsi
                              -processes 
                                 P
                                 
                                    ∼
                                    •
                                 
                                 Q
                              , to be the standard bisimulation between their corresponding event-labelled transition systems 
                                 
                                    LTS
                                 
                                 (
                                 P
                                 )
                                 ∼
                                 
                                    LTS
                                 
                                 (
                                 Q
                                 )
                              . This particularly means that there exists a relation 
                                 R
                                 ⊆
                                 
                                    LTS
                                 
                                 (
                                 P
                                 )
                                 ×
                                 
                                    LTS
                                 
                                 (
                                 Q
                                 )
                               between the states of the two transition systems such that 
                                 (
                                 P
                                 ,
                                 Q
                                 )
                                 ∈
                                 R
                               and for any e
                              
                                 
                                    1.
                                    if 
                                          P
                                          
                                             ⇝
                                             e
                                          
                                          
                                             
                                                P
                                             
                                             
                                                ′
                                             
                                          
                                        then 
                                          ∃
                                          
                                             
                                                Q
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                        s.t. 
                                          Q
                                          
                                             ⇝
                                             e
                                          
                                          
                                             
                                                Q
                                             
                                             
                                                ′
                                             
                                          
                                        and 
                                          (
                                          
                                             
                                                P
                                             
                                             
                                                ′
                                             
                                          
                                          ,
                                          
                                             
                                                Q
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          ∈
                                          R
                                       ;

if 
                                          Q
                                          
                                             ⇝
                                             e
                                          
                                          
                                             
                                                Q
                                             
                                             
                                                ′
                                             
                                          
                                        then 
                                          ∃
                                          
                                             
                                                P
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                        s.t. 
                                          P
                                          
                                             ⇝
                                             e
                                          
                                          
                                             
                                                P
                                             
                                             
                                                ′
                                             
                                          
                                        and 
                                          (
                                          
                                             
                                                P
                                             
                                             
                                                ′
                                             
                                          
                                          ,
                                          
                                             
                                                Q
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          ∈
                                          R
                                       .

The same notion of event bisimulation can be defined for DCR graphs over their event-labelled transition systems.


                        
                           Theorem 4.26
                           
                              For a DCR graph 
                              
                                 D
                               
                              with marking 
                              
                                 M
                                 =
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 )
                               
                              then
                              
                                 
                                    
                                       
                                          
                                             LTS
                                          
                                          (
                                          D
                                          )
                                          
                                             ∼
                                             •
                                          
                                          
                                             LTS
                                          
                                          (
                                          
                                             dcrpsi
                                          
                                          (
                                          D
                                          ,
                                          
                                             Ex
                                          
                                          )
                                          )
                                          .
                                       
                                    
                                 
                              
                           


                        
                           Proof
                           We denote by 
                                 
                                    
                                       E
                                    
                                    
                                       →
                                    
                                 
                               a sequence of events, and by 
                                 
                                    →
                                    
                                       
                                          E
                                       
                                       
                                          →
                                       
                                    
                                 
                               a sequence of transitions labelled by the respective evens in the sequence 
                                 
                                    
                                       E
                                    
                                    
                                       →
                                    
                                 
                              . Indexes are used to refer to elements in such sequences.

We show that the following set is a bisimulation:
                                 
                                    
                                       
                                          {
                                          (
                                          
                                             
                                                D
                                             
                                             
                                                k
                                             
                                          
                                          ,
                                          
                                             
                                                P
                                             
                                             
                                                k
                                             
                                          
                                          )
                                          |
                                          D
                                          
                                             →
                                             
                                                
                                                   E
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             
                                                D
                                             
                                             
                                                k
                                             
                                          
                                          ,
                                          
                                             dcrpsi
                                          
                                          (
                                          D
                                          ,
                                          
                                             Ex
                                          
                                          )
                                          
                                             ⇝
                                             
                                                
                                                   E
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             
                                                P
                                             
                                             
                                                k
                                             
                                          
                                          }
                                          .
                                       
                                    
                                 
                              
                           

This is equivalent to the single steps coinductive statement of Definition 4.25. The initial pair, for the empty sequence, is 
                                 (
                                 D
                                 ,
                                 
                                    dcrpsi
                                 
                                 (
                                 D
                                 ,
                                 
                                    Ex
                                 
                                 )
                                 )
                              .

Proving that all pairs respect the requirements of Definition 4.25 is easy by induction over the length k. The induction has as basis the above initial pair. The Proposition 4.24 ensures that whenever a transition exists from one element of the pair, then the same transition exists from the other element. By the above construction, this new pair is in our bisimulation relation, thus respecting Definition 4.25.  □


                        
                           Proposition 4.27
                           Determinism in 
                                 dcrPsi
                              
                           


                           
                              Syntactically correct 
                              
                                 dcrPsi
                              
                              -processes are deterministic; i.e., in the execution graph, at any point P if 
                              
                                 P
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               
                              then 
                              
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               
                              is unique.
                           


                        
                           Proof
                           For any syntactically correct 
                                 dcrPsi
                              -processes we know that there is only one output process, cf. Lemma 4.19(3), and all input processes have a unique event e, cf. Lemma 4.19(2). Since event-labelled transitions are communications between one input and the single output, cf. Definition 4.23, then there can be at most one transition labelled by e. Lemma 4.22 ensures that any point in the execution graph is a syntactically correct process, thus finishing the proof.  □


                        
                           Theorem 4.28
                           Syntactic restrictions


                           
                              For any syntactically correct 
                              
                                 dcrPsi
                              
                              -process 
                              
                                 
                                    
                                       P
                                    
                                    
                                       DCR
                                    
                                 
                              
                              , i.e., built according to the syntactic restrictions in 
                              
                                 Definition 4.18
                              
                              , there exists a DCR graph 
                              
                                 D
                               
                              s.t.
                              
                                 
                                    
                                       
                                          
                                             LTS
                                          
                                          (
                                          (
                                          D
                                          )
                                          )
                                          
                                             ∼
                                             •
                                          
                                          
                                             LTS
                                          
                                          (
                                          )
                                          (
                                          
                                             
                                                P
                                             
                                             
                                                DCR
                                             
                                          
                                          )
                                          .
                                       
                                    
                                 
                              
                           


                        
                           Proof
                           We take the set of events of the DCR graph to be the set of event constants of the 
                                 dcrPsi
                               instance. We know from Definition 4.18 that 
                                 
                                    
                                       P
                                    
                                    
                                       DCR
                                    
                                 
                               is built as
                                 
                                    
                                       
                                          P
                                          =
                                          (
                                          ν
                                          m
                                          )
                                          (
                                          (
                                          
                                             ∏
                                             
                                                k
                                                ≤
                                                g
                                                ≤
                                                
                                                   
                                                      k
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          ⦇
                                          
                                             
                                                Ψ
                                             
                                             
                                                g
                                             
                                          
                                          ⦈
                                          )
                                          ∥
                                          
                                             
                                                m
                                             
                                             ‾
                                          
                                          〈
                                          (
                                          
                                             
                                                Ex
                                             
                                             
                                                
                                                   
                                                      k
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                Re
                                             
                                             
                                                
                                                   
                                                      k
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                In
                                             
                                             
                                                
                                                   
                                                      k
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                k
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          〉
                                          .
                                          
                                             0
                                          
                                          ∥
                                          (
                                          
                                             ∏
                                             
                                                e
                                                ∈
                                                E
                                             
                                          
                                          
                                             
                                                P
                                             
                                             
                                                e
                                             
                                          
                                          )
                                          )
                                       
                                    
                                 
                               where 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               is of the form
                                 
                                    
                                       
                                          !
                                          (
                                          
                                             case
                                          
                                          
                                          φ
                                          :
                                          
                                             
                                                m
                                             
                                             _
                                          
                                          〈
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          )
                                          〉
                                          .
                                          (
                                          
                                             
                                                m
                                             
                                             ‾
                                          
                                          〈
                                          
                                             
                                                U
                                             
                                             
                                                e
                                             
                                          
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          )
                                          〉
                                          .
                                          
                                             0
                                          
                                          ∥
                                          ⦇
                                          
                                             
                                                U
                                             
                                             
                                                e
                                             
                                          
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          )
                                          ⦈
                                          )
                                          )
                                       
                                    
                                 
                               with 
                                 φ
                                 =
                                 (
                                 
                                    
                                       
                                    
                                 
                                 e
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 e
                                 ,
                                 e
                                 )
                               and 
                                 
                                    
                                       U
                                    
                                    
                                       e
                                    
                                 
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       E
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       R
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       I
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       G
                                    
                                 
                                 )
                                 =
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       E
                                    
                                 
                                 ∪
                                 {
                                 e
                                 }
                                 ,
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       R
                                    
                                 
                                 ∖
                                 {
                                 e
                                 }
                                 )
                                 ∪
                                 e
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       I
                                    
                                 
                                 ∖
                                 e
                                 
                                    
                                       
                                    
                                 
                                 )
                                 ∪
                                 e
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 s
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       G
                                    
                                 
                                 )
                                 )
                               for 
                                 
                                    
                                       
                                    
                                 
                                 e
                              , 
                                 
                                    
                                       
                                    
                                 
                                 e
                              , 
                                 e
                                 
                                    
                                       
                                    
                                 
                              , 
                                 e
                                 
                                    
                                       
                                    
                                 
                              , 
                                 e
                                 
                                    
                                       
                                    
                                 
                               some subsets of E. We define the relations of the DCR graph 
                                 D
                               from these subsets, i.e. for 
                                 e
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 E
                               define 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 
                                    
                                       
                                    
                                 
                                 e
                               if 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 
                                    
                                       
                                    
                                 
                                 e
                              , and similarly for the other relations.

Finally, define the marking M of 
                                 D
                               by taking the frame of the process 
                                 
                                    
                                       P
                                    
                                    
                                       DCR
                                    
                                 
                              .

The bisimulation follows easily from Theorem 4.26.  □

An interesting problem is to look more closely at the encoding of event structures through the espsi and the encoding through dcrpsi when seen as a special case of DCR graphs; a question on these lines could be:

are 
                           
                              espsi
                           
                           (
                           E
                           )
                         and 
                           
                              dcrpsi
                           
                           (
                           
                              dcr
                           
                           (
                           E
                           )
                           )
                         similar in any way? Answering this question is not immediate. First of all, espsi translates into the 
                           eventPsi
                         instance, whereas dcrpsi into the 
                           dcrPsi
                         instance, and these two instances work with different terms and operator definitions. Even more, the encoding of event structures exhibits behaviour through labelled transitions, whereas for the encoding of DCRs we need to look into the frames of the processes before and after a transition to find the event that made this transition (cf. Lemma 4.22). Therefore, to find the correspondence that we are looking for we need to work in the same psi-instance, or establish correlations between the instances.

Let us first see how the 
                           
                              dcrpsi
                           
                           (
                           
                              dcr
                           
                           (
                           E
                           )
                           )
                         process looks like, and then we will see a correlation between this and an 
                           eventPsi
                        -process for the same 
                           E
                        .


                        
                           Lemma 4.29
                           
                              For an event structure 
                              
                                 E
                               
                              the 
                              
                                 dcrPsi
                              
                              -process 
                              
                                 
                                    dcrpsi
                                 
                                 (
                                 
                                    dcr
                                 
                                 (
                                 E
                                 )
                                 )
                               
                              has:
                              
                                 
                                    1.
                                    
                                       all conditions of the form 
                                       
                                          (
                                          
                                             Co
                                          
                                          ,
                                          ∅
                                          ,
                                          e
                                          )
                                        
                                       (for arbitrary Co and e) and
                                    


                                       the initial assertion 
                                       
                                          (
                                          ∅
                                          ,
                                          ∅
                                          ,
                                          E
                                          ,
                                          0
                                          )
                                       
                                       .
                                    


                        
                           Proof
                           From Definition 4.5 we know that the DCR graph 
                                 
                                    dcr
                                 
                                 (
                                 E
                                 )
                               has 
                                 
                                    
                                       
                                    
                                 
                                 =
                                 ∅
                              , which implies that the encoding function dcrpsi produces conditions 
                                 (
                                 
                                    Co
                                 
                                 ,
                                 ∅
                                 ,
                                 e
                                 )
                               with the second element always empty. The initial assertion is made directly from the initial marking in the start process 
                                 
                                    
                                       P
                                    
                                    
                                       |
                                       
                                          Hi
                                       
                                       |
                                    
                                 
                               in Definition 4.15, which in the case of 
                                 
                                    dcr
                                 
                                 (
                                 E
                                 )
                               is 
                                 (
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 E
                                 )
                              , cf. Definition 4.5.  □


                        
                           Lemma 4.30
                           
                              If 
                              
                                 
                                    dcrpsi
                                 
                                 (
                                 
                                    dcr
                                 
                                 (
                                 E
                                 )
                                 ,
                                 
                                    Ex
                                 
                                 )
                                 
                                    
                                       
                                          ⇝
                                          
                                       
                                    
                                    
                                       ⁎
                                    
                                 
                                 P
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               
                              and frame 
                              
                                 F
                                 (
                                 P
                                 )
                                 =
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 ∅
                                 ,
                                 
                                    In
                                 
                                 ,
                                 g
                                 )
                              
                              , then the new frame is
                              
                                 
                                    
                                       
                                          F
                                          (
                                          
                                             
                                                P
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          =
                                          (
                                          
                                             Ex
                                          
                                          +
                                          {
                                          e
                                          }
                                          ,
                                          ∅
                                          ,
                                          
                                             In
                                          
                                          ∖
                                          (
                                          ♯
                                          e
                                          ∪
                                          {
                                          e
                                          }
                                          )
                                          ,
                                          s
                                          (
                                          g
                                          )
                                          )
                                          .
                                       
                                    
                                 
                              
                           


                        
                           Proof
                           The fact that the generation increases to 
                                 s
                                 (
                                 g
                                 )
                               is easy to see from how the assertions are created on transitions. The proof of Lemma 4.22 shows that the first element of the updated frame will be 
                                 
                                    
                                       Ex
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    Ex
                                 
                                 +
                                 {
                                 e
                                 }
                              . From Definition 4.5 of 
                                 
                                    dcr
                                 
                                 (
                                 E
                                 )
                               we have 
                                 
                                    
                                       
                                    
                                 
                                 =
                                 ♯
                                 ∪
                                 {
                                 (
                                 e
                                 ,
                                 e
                                 )
                                 |
                                 e
                                 ∈
                                 E
                                 }
                               which implies that 
                                 
                                    
                                       
                                    
                                 
                                 e
                                 =
                                 (
                                 ♯
                                 e
                                 ∪
                                 {
                                 e
                                 }
                                 )
                              . Since 
                                 
                                    
                                       
                                    
                                 
                                 =
                                 ∅
                              , we have that the update of the third element of an assertion, when event e happens, is 
                                 
                                    
                                       In
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 (
                                 
                                    In
                                 
                                 ∖
                                 e
                                 
                                    
                                       
                                    
                                 
                                 )
                                 ∪
                                 e
                                 
                                    
                                       
                                    
                                 
                                 =
                                 (
                                 
                                    In
                                 
                                 ∖
                                 (
                                 ♯
                                 e
                                 ∪
                                 {
                                 e
                                 }
                                 )
                                 )
                                 ∪
                                 ∅
                                 =
                                 
                                    In
                                 
                                 ∖
                                 (
                                 ♯
                                 e
                                 ∪
                                 {
                                 e
                                 }
                                 )
                              . From Definition 4.5 we also have 
                                 
                                    
                                       
                                    
                                 
                                 =
                                 ∅
                              , which implies that the second element of the new frame is 
                                 
                                    
                                       Re
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 (
                                 ∅
                                 ∖
                                 {
                                 e
                                 }
                                 )
                                 ∪
                                 ∅
                                 =
                                 ∅
                              .  □


                        
                           Lemma 4.31
                           
                              For a 
                              
                                 dcrPsi
                              
                              -process 
                              
                                 
                                    dcrpsi
                                 
                                 (
                                 
                                    dcr
                                 
                                 (
                                 E
                                 )
                                 ,
                                 
                                    Ex
                                 
                                 )
                                 
                                    
                                       
                                          ⇝
                                          
                                       
                                    
                                    
                                       ⁎
                                    
                                 
                                 P
                              
                              , if 
                              
                                 F
                                 (
                                 P
                                 )
                                 =
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 
                                    Re
                                 
                                 ,
                                 
                                    In
                                 
                                 ,
                                 g
                                 )
                               
                              then
                              
                                 
                                    1.
                                    
                                       
                                          
                                             Re
                                          
                                          =
                                          ∅
                                       
                                       ,
                                    


                                       
                                          
                                             Ex
                                          
                                          ∩
                                          
                                             In
                                          
                                          =
                                          ∅
                                       
                                       ,
                                    


                                       
                                          
                                             In
                                          
                                          =
                                          E
                                          ∖
                                          (
                                          
                                             
                                                ∪
                                             
                                             
                                                e
                                                ∈
                                                
                                                   Ex
                                                
                                             
                                          
                                          (
                                          ♯
                                          e
                                          ∪
                                          {
                                          e
                                          }
                                          )
                                          )
                                       
                                       .
                                    


                        
                           Proof
                           For each of the three points of the statement we use an inductive argument. For 1 the base case is given by Lemma 4.29(2) which shows that in the execution of the process initially we have 
                                 
                                    Re
                                 
                                 =
                                 ∅
                              . For the inductive case we use Lemma 4.30.

For 2 the base case is given by Lemma 4.29 which says that initially 
                                 
                                    Ex
                                 
                                 ∩
                                 
                                    In
                                 
                               is the same as 
                                 ∅
                                 ∩
                                 E
                                 =
                                 ∅
                              . For the inductive case assume that the frame is 
                                 F
                                 (
                                 P
                                 )
                                 =
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 ∅
                                 ,
                                 
                                    In
                                 
                                 ,
                                 g
                                 )
                              , with 
                                 
                                    Ex
                                 
                                 ∩
                                 
                                    In
                                 
                                 =
                                 ∅
                               from the induction hypothesis. Consider a transition 
                                 P
                                 
                                    ⇝
                                    e
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               and we show that the second claim holds for 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                              . Having the transition implies that the event e is enabled in the frame of P; i.e., Definition 4.23 implies a communication with a case process 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               for which the 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                               is enabled by 
                                 F
                                 (
                                 P
                                 )
                              , which by Definition 4.9 implies that 
                                 e
                                 ∈
                                 
                                    In
                                 
                              . From Lemma 4.30 we know that 
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 =
                                 (
                                 
                                    
                                       Ex
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    Ex
                                 
                                 +
                                 {
                                 e
                                 }
                                 ,
                                 
                                    
                                       Re
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 ∅
                                 ,
                                 
                                    
                                       In
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    In
                                 
                                 ∖
                                 (
                                 ♯
                                 e
                                 ∪
                                 {
                                 e
                                 }
                                 )
                                 ,
                                 s
                                 (
                                 g
                                 )
                                 )
                               which only adds 
                                 {
                                 e
                                 }
                               to 
                                 
                                    
                                       Ex
                                    
                                    
                                       ′
                                    
                                 
                               compared to Ex. Since 
                                 e
                                 ∈
                                 
                                    In
                                 
                               it means that 
                                 
                                    
                                       Ex
                                    
                                    
                                       ′
                                    
                                 
                                 ∩
                                 
                                    In
                                 
                                 =
                                 {
                                 e
                                 }
                              . But for 
                                 
                                    
                                       In
                                    
                                    
                                       ′
                                    
                                 
                               we remove e from In, thus we have that 
                                 
                                    
                                       Ex
                                    
                                    
                                       ′
                                    
                                 
                                 ∩
                                 
                                    
                                       In
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 ∅
                              .

For 3 the base case is given by Lemma 4.29 which says that initially 
                                 
                                    In
                                 
                                 =
                                 E
                               and 
                                 
                                    Ex
                                 
                                 =
                                 ∅
                              , thus allowing for the equality 
                                 
                                    In
                                 
                                 =
                                 E
                                 ∖
                                 (
                                 
                                    
                                       ∪
                                    
                                    
                                       e
                                       ∈
                                       ∅
                                    
                                 
                                 )
                                 (
                                 ♯
                                 e
                                 ∪
                                 {
                                 e
                                 }
                                 )
                              . For the induction case we assume that we have a process P with frame 
                                 (
                                 
                                    Ex
                                 
                                 ,
                                 ∅
                                 ,
                                 
                                    In
                                 
                                 ,
                                 g
                                 )
                               where 
                                 
                                    In
                                 
                                 =
                                 E
                                 ∖
                                 (
                                 
                                    
                                       ∪
                                    
                                    
                                       e
                                       ∈
                                       
                                          Ex
                                       
                                    
                                 
                                 (
                                 ♯
                                 e
                                 ∪
                                 {
                                 e
                                 }
                                 )
                                 )
                              . Consider a transition 
                                 P
                                 
                                    ⇝
                                    f
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                              , implying by definition that 
                                 f
                                 ∈
                                 
                                    In
                                 
                              , and the new frame 
                                 F
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 =
                                 (
                                 
                                    
                                       Ex
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    Ex
                                 
                                 +
                                 {
                                 f
                                 }
                                 ,
                                 ∅
                                 ,
                                 
                                    
                                       In
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 s
                                 (
                                 g
                                 )
                                 )
                               which has 
                                 
                                    
                                       In
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    In
                                 
                                 ∖
                                 (
                                 ♯
                                 f
                                 ∪
                                 {
                                 f
                                 }
                                 )
                               by Lemma 4.30. Using the induction hypothesis, this is equal to 
                                 E
                                 ∖
                                 (
                                 
                                    
                                       ∪
                                    
                                    
                                       e
                                       ∈
                                       
                                          Ex
                                       
                                    
                                 
                                 (
                                 ♯
                                 e
                                 ∪
                                 {
                                 e
                                 }
                                 )
                                 )
                                 ∖
                                 (
                                 ♯
                                 f
                                 ∪
                                 {
                                 f
                                 }
                                 )
                                 =
                                 E
                                 ∖
                                 (
                                 
                                    
                                       ∪
                                    
                                    
                                       e
                                       ∈
                                       
                                          
                                             Ex
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 (
                                 ♯
                                 e
                                 ∪
                                 {
                                 e
                                 }
                                 )
                                 )
                              .  □

From the lemmas above we can define an embedding 
                           
                              
                                 emb
                              
                              
                                 g
                              
                           
                        , parametrised by some natural number 
                           g
                           ∈
                           N
                        , from the assertions in 
                           eventPsi
                         to the assertions in 
                           dcrPsi
                         as follows.


                        
                           Definition 4.32
                           Correlations between assertions


                           For 
                                 
                                    
                                       Ψ
                                    
                                    
                                       C
                                    
                                 
                               an assertion of 
                                 eventPsi
                               and 
                                 g
                                 ∈
                                 N
                               a natural number define
                                 
                                    
                                       
                                          
                                             
                                                emb
                                             
                                             
                                                g
                                             
                                          
                                          (
                                          
                                             
                                                Ψ
                                             
                                             
                                                C
                                             
                                          
                                          )
                                          =
                                          (
                                          
                                             
                                                Ψ
                                             
                                             
                                                C
                                             
                                          
                                          ,
                                          ∅
                                          ,
                                          (
                                          E
                                          ∖
                                          
                                             
                                                Ψ
                                             
                                             
                                                C
                                             
                                          
                                          )
                                          ∖
                                          (
                                          
                                             
                                                ∪
                                             
                                             
                                                e
                                                ∈
                                                
                                                   
                                                      Ψ
                                                   
                                                   
                                                      C
                                                   
                                                
                                             
                                          
                                          ♯
                                          e
                                          )
                                          ,
                                          g
                                          )
                                          .
                                       
                                    
                                 
                              
                           

We used the notation 
                           
                              
                                 Ψ
                              
                              
                                 C
                              
                           
                         to remind that the assertion in 
                           eventPsi
                         is a set of events corresponding to a configuration C in the event structure, cf. Lemma 3.14. The above definition of embedding is motivated by Lemma 4.31, in particular, having the second element of the assertion being ∅ comes from Lemma 4.31(2) and the shape of the third element is because of Lemma 4.31(3).

The opposite direction of the embedding from Definition 4.32 is obvious the projection on the first element of the 
                           dcrPsi
                         assertion, keeping only the support set of the multi-set; denote this projection by 
                           
                              prj
                           
                           (
                           Ψ
                           )
                        .

From Lemma 4.29 we can define a similar embedding of conditions, which we will also denote by 
                           
                              
                                 emb
                              
                              
                                 e
                              
                           
                        . We use these embeddings in the proofs and definitions later on.


                        
                           Definition 4.33
                           Correlations between conditions


                           For some event constant e and condition 
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       <
                                    
                                 
                                 ,
                                 
                                    
                                       S
                                    
                                    
                                       ♯
                                    
                                 
                                 )
                               of 
                                 eventPsi
                               define
                                 
                                    
                                       
                                          
                                             
                                                emb
                                             
                                             
                                                e
                                             
                                          
                                          (
                                          (
                                          
                                             
                                                S
                                             
                                             
                                                <
                                             
                                          
                                          ,
                                          
                                             
                                                S
                                             
                                             
                                                ♯
                                             
                                          
                                          )
                                          )
                                          =
                                          (
                                          
                                             
                                                S
                                             
                                             
                                                <
                                             
                                          
                                          ,
                                          ∅
                                          ,
                                          e
                                          )
                                          .
                                       
                                    
                                 
                               We can also define an opposite embedding 
                                 
                                    
                                       
                                          
                                             emb
                                          
                                          
                                             ←
                                          
                                       
                                    
                                    
                                       S
                                    
                                 
                              , parametrised by a set of events S, taking a condition 
                                 (
                                 
                                    Co
                                 
                                 ,
                                 ∅
                                 ,
                                 e
                                 )
                               of 
                                 dcrPsi
                               and returning a condition in 
                                 eventPsi
                               as follows:
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      emb
                                                   
                                                   
                                                      ←
                                                   
                                                
                                             
                                             
                                                S
                                             
                                          
                                          (
                                          (
                                          
                                             Co
                                          
                                          ,
                                          ∅
                                          ,
                                          e
                                          )
                                          )
                                          =
                                          (
                                          
                                             Co
                                          
                                          ,
                                          S
                                          )
                                          .
                                       
                                    
                                 
                              
                           


                        
                           Lemma 4.34
                           Correlation between entailment relations


                           
                              For an event structure 
                              
                                 E
                               
                              and its encoding 
                              
                                 
                                    espsi
                                 
                                 (
                                 E
                                 )
                              
                              , and one of its conditions 
                              
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 (
                                 <
                                 e
                                 ,
                                 ♯
                                 e
                                 )
                               
                              entailed by some assertion Ψ, then
                              
                                 
                                    
                                       
                                          Ψ
                                          ⊢
                                          
                                             
                                                φ
                                             
                                             
                                                e
                                             
                                          
                                          
                                          
                                          ⇒
                                          
                                          
                                          
                                             
                                                emb
                                             
                                             
                                                g
                                             
                                          
                                          (
                                          Ψ
                                          )
                                          ⊢
                                          
                                             
                                                emb
                                             
                                             
                                                e
                                             
                                          
                                          (
                                          
                                             
                                                φ
                                             
                                             
                                                e
                                             
                                          
                                          )
                                       
                                    
                                 
                               
                              in 
                              
                                 dcrPsi
                              
                              , under the assumption that 
                              
                                 e
                                 ∉
                                 Ψ
                              
                              , and for some arbitrary 
                              
                                 g
                                 ∈
                                 N
                              
                              .
                           


                        
                           Proof
                           We need to prove that
                                 
                                    
                                       
                                          
                                             
                                                emb
                                             
                                             
                                                g
                                             
                                          
                                          (
                                          Ψ
                                          )
                                          =
                                          (
                                          Ψ
                                          ,
                                          ∅
                                          ,
                                          (
                                          E
                                          ∖
                                          Ψ
                                          )
                                          ∖
                                          (
                                          
                                             
                                                ∪
                                             
                                             
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                ∈
                                                Ψ
                                             
                                          
                                          ♯
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          ,
                                          g
                                          )
                                          ⊢
                                          (
                                          <
                                          e
                                          ,
                                          ∅
                                          ,
                                          e
                                          )
                                          =
                                          
                                             
                                                emb
                                             
                                             
                                                e
                                             
                                          
                                          (
                                          
                                             
                                                φ
                                             
                                             
                                                e
                                             
                                          
                                          )
                                       
                                    
                                 
                               under the assumptions that 
                                 <
                                 e
                                 ⊆
                                 Ψ
                               and 
                                 ♯
                                 e
                                 ∩
                                 Ψ
                                 =
                                 ∅
                              , coming from the definition of entailment for 
                                 eventPsi
                              . For proving the above, the definition of entailment for 
                                 dcrPsi
                               requires that we prove three points (see Definition 4.9)
                                 
                                    1.
                                    
                                       
                                          e
                                          ∈
                                          
                                             In
                                          
                                          =
                                          (
                                          E
                                          ∖
                                          Ψ
                                          )
                                          ∖
                                          (
                                          
                                             
                                                ∪
                                             
                                             
                                                
                                                   
                                                      e
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                ∈
                                                Ψ
                                             
                                          
                                          ♯
                                          
                                             
                                                e
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                       ;


                                       
                                          
                                             In
                                          
                                          ∩
                                          <
                                          e
                                          ⊆
                                          Ψ
                                       ;


                                       
                                          (
                                          
                                             In
                                          
                                          ∩
                                          ∅
                                          )
                                          ∩
                                          ∅
                                          =
                                          ∅
                                       ;

For the first point, the assumption that 
                                 e
                                 ∉
                                 Ψ
                               implies that 
                                 e
                                 ∈
                                 E
                                 ∖
                                 Ψ
                              . To finish the proof it means we are left with proving the fact 
                                 e
                                 ∉
                                 
                                    
                                       ∪
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             ′
                                          
                                       
                                       ∈
                                       Ψ
                                    
                                 
                                 {
                                 
                                    
                                       e
                                    
                                    
                                       ″
                                    
                                 
                                 ∈
                                 E
                                 ∖
                                 
                                    
                                       Ψ
                                    
                                    
                                       C
                                    
                                 
                                 |
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 ♯
                                 
                                    
                                       e
                                    
                                    
                                       ″
                                    
                                 
                                 }
                              , thus implying that 
                                 e
                                 ∈
                                 
                                    In
                                 
                              . We do this proof by reductio ad absurdum and assume the contrary, i.e., 
                                 ∃
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 Ψ
                                 :
                                 e
                                 ∈
                                 ♯
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                              . We know from the fact that in event structures the conflict relation is symmetric, that if 
                                 e
                                 ∈
                                 ♯
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                               then also 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 ♯
                                 e
                              . This, together with the fact that 
                                 
                                    
                                       e
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 Ψ
                              , implies that 
                                 ♯
                                 e
                                 ∩
                                 Ψ
                                 ≠
                                 ∅
                              , which is a contradiction, thus making our assumption false and finishing the proof.  □

In a 
                           dcrPsi
                        -processes generated by the encoding function dcrpsi any event (i.e., the associated case processes 
                           
                              
                                 P
                              
                              
                                 e
                              
                           
                        ) may happen (i.e., participate in a communication) infinitely many times, as long as it is enabled. On the other hand, in an event structure an event can happen at most once.


                        
                           Lemma 4.35
                           
                              No event in a process 
                              
                                 
                                    dcrpsi
                                 
                                 (
                                 
                                    dcr
                                 
                                 (
                                 E
                                 )
                                 )
                               
                              can happen more than once.
                           


                        
                           Proof
                           For an event to be enabled the corresponding condition must be enabled by the assertion and the frame of the process, which from the definition implies that 
                                 e
                                 ∈
                                 
                                    In
                                 
                              . We also know that initially there are no events that have happened and 
                                 
                                    Ex
                                 
                                 =
                                 ∅
                              . From Lemma 4.30 we know that after a transition the respective event is added to the new Ex and from Lemma 4.31 we know that any events in Ex cannot simultaneously be in In. Since Ex does not decrease we thus have that if an event e has happened it will never be enabled again.  □

We are now ready to define an embedding of 
                           eventPsi
                         processes in the context of Theorem 3.19, i.e., generated by espsi, into 
                           dcrPsi
                        -processes. Assertions in 
                           eventPsi
                         are sets and in the next definition we use the number of elements of the set Ψ as the g parameter that the 
                           
                              
                                 emb
                              
                              
                                 g
                              
                           
                         requires when applied over assertions.


                        
                           Definition 4.36
                           
                              
                                 Embedding
                                 
                                 
                                    eventPsi
                                 
                                 
                                 into
                                 
                                 
                                    dcrPsi
                                 
                              
                           


                           We define an embedding function emb which takes an 
                                 eventPsi
                              -processes 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 )
                               generated from an event structure 
                                 E
                              , which according to Definition 3.9 is 
                                 
                                    
                                       
                                          espsi
                                       
                                       (
                                       E
                                       )
                                       =
                                       ∥
                                    
                                    
                                       e
                                       ∈
                                       E
                                    
                                 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               with
                                 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                e
                                             
                                          
                                          =
                                          
                                             {
                                             
                                                
                                                   
                                                      ⦇
                                                      {
                                                      e
                                                      }
                                                      ⦈
                                                   
                                                   
                                                      if
                                                      
                                                      e
                                                      ∈
                                                      C
                                                   
                                                
                                                
                                                   
                                                      
                                                         case
                                                      
                                                      
                                                      
                                                         
                                                            φ
                                                         
                                                         
                                                            e
                                                         
                                                      
                                                      :
                                                      
                                                         
                                                            e
                                                         
                                                         ‾
                                                      
                                                      〈
                                                      e
                                                      〉
                                                      .
                                                      ⦇
                                                      {
                                                      e
                                                      }
                                                      ⦈
                                                   
                                                   
                                                      otherwise
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                               where 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 (
                                 <
                                 e
                                 ,
                                 ♯
                                 e
                                 )
                              ; and returns the 
                                 dcrPsi
                              -process 
                                 
                                    emb
                                 
                                 (
                                 
                                    espsi
                                 
                                 (
                                 E
                                 )
                                 )
                               as follows:
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      emb
                                                   
                                                   (
                                                   
                                                      espsi
                                                   
                                                   (
                                                   E
                                                   )
                                                   )
                                                   
                                                
                                                
                                                   :
                                                   =
                                                   
                                                
                                                
                                                   (
                                                   ν
                                                   m
                                                   )
                                                   (
                                                   
                                                      emb
                                                   
                                                   
                                                      
                                                         (
                                                         ∥
                                                      
                                                      
                                                         e
                                                         ∈
                                                         C
                                                      
                                                   
                                                   ⦇
                                                   {
                                                   e
                                                   }
                                                   ⦈
                                                   )
                                                   ∥
                                                
                                             
                                             
                                                
                                                   
                                                
                                                
                                                   
                                                
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      ‾
                                                   
                                                   〈
                                                   
                                                      emb
                                                   
                                                   (
                                                   ⦇
                                                   
                                                      
                                                         ⊗
                                                      
                                                      
                                                         e
                                                         ∈
                                                         C
                                                      
                                                   
                                                   {
                                                   e
                                                   }
                                                   ⦈
                                                   )
                                                   〉
                                                   .
                                                   
                                                      0
                                                   
                                                   ∥
                                                
                                             
                                             
                                                
                                                   
                                                
                                                
                                                   
                                                
                                                
                                                   
                                                      
                                                         ∥
                                                      
                                                      
                                                         
                                                            
                                                               P
                                                            
                                                            
                                                               e
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      emb
                                                   
                                                   (
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   )
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                               where 
                                 
                                    emb
                                 
                                 (
                                 ⦇
                                 Ψ
                                 ⦈
                                 )
                                 :
                                 =
                                 ⦇
                                 
                                    
                                       emb
                                    
                                    
                                       g
                                    
                                 
                                 (
                                 Ψ
                                 )
                                 ⦈
                              , with 
                                 g
                                 =
                                 |
                                 Ψ
                                 |
                              , and 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               ranges over all the case processes from 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 )
                               with 
                                 
                                    emb
                                 
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                                 )
                               being defined as:
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      emb
                                                   
                                                   (
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   )
                                                   
                                                
                                                
                                                   :
                                                   =
                                                   
                                                
                                                
                                                   !
                                                   (
                                                   
                                                      case
                                                   
                                                   
                                                   
                                                      
                                                         emb
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         φ
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   )
                                                   :
                                                   
                                                      
                                                         m
                                                      
                                                      _
                                                   
                                                   〈
                                                   (
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         E
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         R
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         I
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         G
                                                      
                                                   
                                                   )
                                                   〉
                                                   .
                                                   (
                                                   
                                                      
                                                         m
                                                      
                                                      ‾
                                                   
                                                   〈
                                                   
                                                      
                                                         U
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         E
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         R
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         I
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         G
                                                      
                                                   
                                                   )
                                                   〉
                                                   .
                                                   
                                                      0
                                                   
                                                   ∥
                                                   ⦇
                                                   
                                                      
                                                         U
                                                      
                                                      
                                                         e
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         E
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         R
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         I
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         G
                                                      
                                                   
                                                   )
                                                   ⦈
                                                   )
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                               with 
                                 
                                    
                                       U
                                    
                                    
                                       e
                                    
                                 
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       E
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       R
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       I
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       G
                                    
                                 
                                 )
                                 =
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       E
                                    
                                 
                                 ∪
                                 {
                                 e
                                 }
                                 ,
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       R
                                    
                                 
                                 ∖
                                 {
                                 e
                                 }
                                 )
                                 ∪
                                 ∅
                                 ,
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       I
                                    
                                 
                                 ∖
                                 (
                                 {
                                 e
                                 }
                                 ∪
                                 ♯
                                 e
                                 )
                                 ∪
                                 ∅
                                 ,
                                 s
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       G
                                    
                                 
                                 )
                                 )
                              . When 
                                 C
                                 =
                                 ∅
                              , the empty composition becomes the minimal assertion 1.


                        
                           Theorem 4.37
                           
                              For an event structure 
                              
                                 E
                               
                              and an initial empty configuration 
                              
                                 C
                                 =
                                 ∅
                              
                              , we have:
                              
                                 
                                    
                                       
                                          
                                             emb
                                          
                                          (
                                          
                                             espsi
                                          
                                          (
                                          E
                                          )
                                          )
                                          =
                                          
                                             dcrpsi
                                          
                                          (
                                          
                                             dcr
                                          
                                          (
                                          E
                                          )
                                          ,
                                          ∅
                                          )
                                          .
                                       
                                    
                                 
                              
                           


                        
                           Proof
                           On the left side of the equality the process 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 )
                               looks like 
                                 
                                    
                                       ∥
                                    
                                    
                                       e
                                       ∈
                                       E
                                    
                                 
                                 
                                    case
                                 
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 :
                                 
                                    
                                       e
                                    
                                    ‾
                                 
                                 〈
                                 e
                                 〉
                                 .
                                 ⦇
                                 {
                                 e
                                 }
                                 ⦈
                              , without any assertion process because the initial configuration is 
                                 C
                                 =
                                 ∅
                              . This process is embedded into 
                                 dcrPsi
                              , using Definition 4.36, as:
                                 
                                    
                                       
                                          (
                                          ν
                                          m
                                          )
                                          (
                                          
                                             
                                                emb
                                             
                                             
                                                0
                                             
                                          
                                          (
                                          
                                             1
                                          
                                          )
                                          
                                             
                                                ∥
                                                
                                                   
                                                      m
                                                   
                                                   ‾
                                                
                                                〈
                                                
                                                   
                                                      emb
                                                   
                                                   
                                                      0
                                                   
                                                
                                                (
                                                1
                                                )
                                                〉
                                                .
                                                0
                                                ∥
                                             
                                             
                                                e
                                                ∈
                                                E
                                             
                                          
                                          
                                             emb
                                          
                                          (
                                          
                                             
                                                P
                                             
                                             
                                                e
                                             
                                          
                                          )
                                          )
                                          .
                                       
                                    
                                 
                               Since the assertion 
                                 
                                    1
                                 
                                 =
                                 (
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 0
                                 )
                               then 
                                 
                                    
                                       emb
                                    
                                    
                                       0
                                    
                                 
                                 (
                                 
                                    1
                                 
                                 )
                                 ∥
                                 
                                    
                                       m
                                    
                                    ‾
                                 
                                 〈
                                 
                                    
                                       emb
                                    
                                    
                                       0
                                    
                                 
                                 (
                                 
                                    1
                                 
                                 )
                                 〉
                                 .
                                 
                                    0
                                 
                               becomes 
                                 ⦇
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 E
                                 ,
                                 0
                                 ⦈
                                 ∥
                                 
                                    
                                       m
                                    
                                    ‾
                                 
                                 〈
                                 (
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 E
                                 ,
                                 0
                                 )
                                 〉
                                 .
                                 
                                    0
                                 
                              . Each of the 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               are translated as in Definition 4.36.

On the right side of the equality, the Definition 4.5 for dcr says that the DCR 
                                 
                                    dcr
                                 
                                 (
                                 E
                                 )
                                 =
                                 (
                                 E
                                 ,
                                 M
                                 ,
                                 <
                                 
                                 ,
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 ♯
                                 ∪
                                 {
                                 (
                                 e
                                 ,
                                 e
                                 )
                                 |
                                 e
                                 ∈
                                 E
                                 }
                                 )
                               has the initial marking 
                                 M
                                 =
                                 (
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 E
                                 )
                              . This means that the 
                                 
                                    
                                       P
                                    
                                    
                                       k
                                    
                                 
                              , 
                                 k
                                 =
                                 0
                              , generated by 
                                 
                                    dcrpsi
                                 
                                 (
                                 
                                    dcr
                                 
                                 (
                                 E
                                 )
                                 ,
                                 0
                                 )
                               is the same as what we had on the left side above, i.e., 
                                 ⦇
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 E
                                 ,
                                 0
                                 ⦈
                                 ∥
                                 
                                    
                                       m
                                    
                                    ‾
                                 
                                 〈
                                 (
                                 ∅
                                 ,
                                 ∅
                                 ,
                                 E
                                 ,
                                 0
                                 )
                                 〉
                                 .
                                 
                                    0
                                 
                              .

It remains to check that the processes 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               that Definition 4.15 of dcrpsi generates are the same as 
                                 
                                    emb
                                 
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                                 )
                              , when considering the empty sets that dcr generates. Recall that the 
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                               generated by dcrpsi, on the right of the equality, are:
                                 
                                    
                                       
                                          !
                                          (
                                          
                                             case
                                          
                                          
                                          
                                             
                                                φ
                                             
                                             
                                                e
                                             
                                          
                                          :
                                          
                                             
                                                m
                                             
                                             _
                                          
                                          〈
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          )
                                          〉
                                          .
                                          (
                                          
                                             
                                                m
                                             
                                             ‾
                                          
                                          〈
                                          
                                             
                                                U
                                             
                                             
                                                e
                                             
                                          
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          )
                                          〉
                                          .
                                          
                                             0
                                          
                                          ∥
                                          ⦇
                                          
                                             
                                                U
                                             
                                             
                                                e
                                             
                                          
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          )
                                          ⦈
                                          )
                                          )
                                          
                                          ,
                                       
                                    
                                 
                               with 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       
                                    
                                 
                                 e
                                 ,
                                 
                                    
                                       
                                    
                                 
                                 e
                                 ,
                                 e
                                 )
                               and 
                                 
                                    
                                       U
                                    
                                    
                                       e
                                    
                                 
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       E
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       R
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       I
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       G
                                    
                                 
                                 )
                                 =
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       E
                                    
                                 
                                 ∪
                                 {
                                 e
                                 }
                                 ,
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       R
                                    
                                 
                                 ∖
                                 {
                                 e
                                 }
                                 )
                                 ∪
                                 e
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       I
                                    
                                 
                                 ∖
                                 e
                                 
                                    
                                       
                                    
                                 
                                 )
                                 ∪
                                 e
                                 
                                    
                                       
                                    
                                 
                                 ,
                                 s
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       G
                                    
                                 
                                 )
                                 )
                              .

Since the response, milestone, and include relations are empty, then the above has 
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       
                                    
                                 
                                 e
                                 ,
                                 ∅
                                 ,
                                 e
                                 )
                               and
                                 
                                    
                                       
                                          
                                             
                                                U
                                             
                                             
                                                e
                                             
                                          
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ,
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          )
                                          =
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                E
                                             
                                          
                                          ∪
                                          {
                                          e
                                          }
                                          ,
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                R
                                             
                                          
                                          ∖
                                          {
                                          e
                                          }
                                          )
                                          ∪
                                          ∅
                                          ,
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                I
                                             
                                          
                                          ∖
                                          e
                                          
                                             
                                                
                                             
                                          
                                          )
                                          ∪
                                          ∅
                                          ,
                                          s
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                G
                                             
                                          
                                          )
                                          )
                                       
                                    
                                 
                               where 
                                 e
                                 
                                    
                                       
                                    
                                 
                               is the same as 
                                 {
                                 e
                                 }
                                 ∪
                                 ♯
                                 e
                              . This shows it is equal with 
                                 
                                    emb
                                 
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       e
                                    
                                 
                                 )
                               since 
                                 
                                    
                                       emb
                                    
                                    
                                       e
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                               is, by Definition 4.33, the same as 
                                 (
                                 <
                                 e
                                 ,
                                 ∅
                                 ,
                                 e
                                 )
                              , and 
                                 
                                    
                                       
                                    
                                 
                                 =
                                 <
                               in our case.  □

We must make sure that the embedding from Definition 4.36 is correct in the sense that it preserves behaviour, as expressed below.


                        
                           Proposition 4.38
                           Embedding preserves behaviour


                           
                              For an event structure 
                              
                                 E
                              
                              , then 
                              
                                 
                                    espsi
                                 
                                 (
                                 E
                                 )
                               
                              and 
                              
                                 
                                    emb
                                 
                                 (
                                 
                                    espsi
                                 
                                 (
                                 E
                                 )
                                 )
                               
                              have the same behaviour, i.e.:
                              
                                 
                                    
                                       
                                          
                                             LTS
                                          
                                          (
                                          
                                             espsi
                                          
                                          (
                                          E
                                          )
                                          )
                                          
                                             ∼
                                             •
                                          
                                          
                                             LTS
                                          
                                          (
                                          
                                             emb
                                          
                                          (
                                          
                                             espsi
                                          
                                          (
                                          E
                                          )
                                          )
                                          )
                                          .
                                       
                                    
                                 
                              
                           


                        
                           Proof
                           In short, the proof follows from Lemma 4.34 that correlates the entailment relations, thus showing that whenever an event is enabled in the 
                                 eventPsi
                              -process then it is also enabled in its embedding.

Construct the bisimulation relation 
                                 
                                    ∼
                                    •
                                 
                               between the states of the two event-labelled transition systems as follows; and then show that this respects the requirements of being a bisimulation. We take 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 )
                                 
                                    ∼
                                    •
                                 
                                 
                                    emb
                                 
                                 (
                                 
                                    espsi
                                 
                                 (
                                 E
                                 )
                                 )
                               to be the initial points. We continue the construction procedure exactly as in the proof of Theorem 4.26. Therefore, for any 
                                 
                                    
                                       E
                                    
                                    
                                       ′
                                    
                                 
                               reachable from 
                                 
                                    espsi
                                 
                                 (
                                 E
                                 )
                               by some event e, take the process 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               reachable from 
                                 
                                    emb
                                 
                                 (
                                 
                                    espsi
                                 
                                 (
                                 E
                                 )
                                 )
                               by the same e, if one such exists, and put 
                                 
                                    
                                       E
                                    
                                    
                                       ′
                                    
                                 
                                 
                                    ∼
                                    •
                                 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                              . The 
                                 
                                    
                                       E
                                    
                                    
                                       ′
                                    
                                 
                               and 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               are necessarily unique. In the proof all we are interested in is the structure of building this relation, which is given by the above procedure.

We are left with proving that for any pair 
                                 E
                                 ,
                                 P
                               in the bisimulation, we have the following two statements
                                 
                                    1.
                                    if 
                                          E
                                          
                                             ⇝
                                             e
                                          
                                          
                                             
                                                E
                                             
                                             
                                                ′
                                             
                                          
                                        then there exists the transition 
                                          P
                                          
                                             ⇝
                                             e
                                          
                                          
                                             
                                                P
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    

if 
                                          P
                                          
                                             ⇝
                                             e
                                          
                                          
                                             
                                                P
                                             
                                             
                                                ′
                                             
                                          
                                        then there exists the transition 
                                          E
                                          
                                             ⇝
                                             e
                                          
                                          
                                             
                                                E
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    

These are enough since the determinism and uniqueness of the construction of the relation 
                                 
                                    ∼
                                    •
                                 
                               ensure that the reachable states 
                                 
                                    
                                       E
                                    
                                    
                                       ′
                                    
                                 
                               and 
                                 
                                    
                                       P
                                    
                                    
                                       ′
                                    
                                 
                               are bisimilar (for both statements), thus completing the requirements of Definition 4.25.

For the first statement we use Lemma 4.34.

For the second statement we need to prove 
                                 
                                    
                                       emb
                                    
                                    
                                       g
                                    
                                 
                                 (
                                 Ψ
                                 )
                                 ⊢
                                 
                                    
                                       emb
                                    
                                    
                                       e
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                                 ⟹
                                 Ψ
                                 ⊢
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                              . This is the same as proving 
                                 
                                    prj
                                 
                                 (
                                 
                                    
                                       emb
                                    
                                    
                                       g
                                    
                                 
                                 (
                                 Ψ
                                 )
                                 )
                                 =
                                 Ψ
                               and 
                                 
                                    
                                       
                                          
                                             emb
                                          
                                          
                                             ←
                                          
                                       
                                    
                                    
                                       ♯
                                       e
                                    
                                 
                                 (
                                 
                                    
                                       emb
                                    
                                    
                                       e
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                                 )
                                 =
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                              . These are both easy to see from the definition of the embedding functions, and we have the second statement.  □

We have presented encodings of the declarative event-based models for concurrency of finite prime event structures and finite DCR graphs, a generalisation of event structures allowing finite representations of infinite computations, into corresponding instances of psi-calculi. We proved that computation in the event structures and DCR graph models corresponds to reduction steps in the corresponding psi-processes. Moreover, for both encodings we made use of the expressive logic that psi-calculus provides to capture the causality and conflict relations of the prime event structures and DCR graphs. This made it possible to prove that action refinement is respected by the encoding of event structures.

For the encoding of DCR graphs we made use of the communication mechanism of psi-calculi, whereas for prime event structures this was not needed.

For both encodings we gave the syntactic restrictions that capture the psi-processes that correspond precisely to prime event structures respectively DCR graphs.

Finally, we proved that the encoding of DCR graphs conservatively generalises the encoding of event structures. For this we showed that the two psi-processes obtained by (i) mapping an event structure first to DCR graphs and then to the 
                        dcrPsi
                     -calculus, respectively (ii) mapping the same event structure first to the 
                        eventPsi
                     -calculi and then embed this in the 
                        dcrPsi
                     -calculus, are event-labelled bisimilar.

The purpose of our investigations was to provide psi-calculi models of event based, non-interleaving (or causal) concurrency models as a first step towards a study of adaptable, distributed and mobile computational artefacts. We believe that we succeeded showing that the psi-calculi is indeed well suited for representing causal, non-interleaving models for concurrency.

Nevertheless, the encodings leave open issues. Firstly, a discrepancy remains between the interleaving semantics based on SOS rules of psi-calculi, and the non-interleaving nature of the two models we considered. Further investigations would look for a non-interleaving concurrency semantics for psi-calculi (with initial results presented as [51]). Secondly, it is not completely satisfactory that the behaviour of the 
                           dcrPsi
                        -processes is observed by a somewhat intentionally constructed event-labelled transition semantics. An improvement could be to consider a more compositional definition of event structures and DCR graphs as considered in [46]. Thirdly, it would be interesting to look into adding responses to psi-calculi as introduced in DCR graphs, allowing to represent liveness/progress properties, continuing along the lines of the work in [52] for Transition Systems with Responses.

The next steps towards studying adaptable, distributed and mobile computational artefacts will be to consider cases of workflows identified in field studies within the CompArt project and the notion of run-time refinement and adaptation supported by DCR graphs as presented in [46]. By embedding DCR graphs in the richer framework of psi-calculi we anticipate being able to experiment with richer process models, e.g. representing locations, mobility and resources used by actors in workflows.


                        
                           Remark 5.1
                           On infinite set of events


                           If one would want to apply our encoding to infinite event structures then the set E may be infinite, hence the process and individual elements of A and C may be infinite terms (i.e., infinite sets). In the encoding produced by espsi, the conditions 
                                 
                                    
                                       π
                                    
                                    
                                       L
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                               would be finite, because of the principle of finite causes of Definition 3.1 that event structures respects. Still, the 
                                 
                                    
                                       π
                                    
                                    
                                       R
                                    
                                 
                                 (
                                 
                                    
                                       φ
                                    
                                    
                                       e
                                    
                                 
                                 )
                               may be infinite, because there is no restriction on the conflict relation in event structures, and thus an event can be in conflict with infinitely many events.

A simple example where this would appear is pictured in Fig. 8
                              , where we have a labelled transition system on the left and its unfolding as a labelled event structure on the right. The loop is unfolded into infinitely many sequential events, and for every second event we have a branch with a new c-labelled event which is in conflict with the rest of the infinite 
                                 a
                                 ,
                                 b
                               labelled sequence. Executing one of these c-labelled events would mean cancelling all the infinitely many events that encode this branch. That is to say, the single event is in conflict with all the events on the looping branch, which are infinitely many.

Assertion terms from A, produced by espsi, are always finite because they encode, cf. Lemma 3.14, configurations, which are finite sets. Still, it is problematic to have the infinite right part of the conditions, since it is used in deciding the entailment relation where one needs to decide if the intersection of an infinite and finite set is empty.

Besides this, the encoding espsi would result in infinitely many parallel processes if the set of events is infinite, since a process is created for each 
                                 e
                                 ∈
                                 E
                              . For practical use, infinite terms are not desirable, but for a theoretical encoding they could be fine, just like e.g. infinite summation in Milner's work on SCCS, infinite case construct for psi-calculi, or infinite conjunctions in some logics.

When building infinite nominal terms and infinite psi-processes one has to take care of not using infinitely many different free names, i.e., not to have infinite support for the nominal terms. Otherwise essential properties like alpha-renaming fail to work [53].

@&#REFERENCES@&#

