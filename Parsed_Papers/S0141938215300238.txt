@&#MAIN-TITLE@&#A reversible data hiding algorithm based on probabilistic DNA-XOR secret sharing scheme for color images

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We present a new probabilistic secret sharing scheme by using the DNA-XOR (n,
                              n).


                        
                        
                           
                           We suggest a new reversible data hiding algorithm based on the probabilistic secret sharing scheme for color images.


                        
                        
                           
                           We create an optimum data hiding algorithm by using the DNA-XOR secret sharing scheme.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Data hiding

Probabilistic DNA-XOR secret sharing

Image steganography

Watermarking

Information security

@&#ABSTRACT@&#


               
               
                  In this paper, a new data hiding method is proposed based on secret sharing scheme with the DNA exclusive or (DNA-XOR) operator for color images. The DNA-XOR secret sharing scheme uses a DNA-XOR truth table. Each input value of truth table is evaluated and according to that evaluation, highest PSNR (Peak Signal-to-Noise Ratio) value is selected for secret sharing. These selected values are embedded into cover image. Cover image is used as an encryption key in the proposed secret sharing process. In this study, the hidden data are divided into three secret shares and embedded into the red, green and blue channels of a cover image respectively. In here, the DNA-XOR operator has been firstly used as secret sharing operator in data hiding literature. Our proposed data hiding method was compared with previous methods. The comparison of these methods shows that our proposed method gives the most successful result.
               
            

@&#INTRODUCTION@&#

Nowadays, in parallel to improvements in technology, information security techniques have been developed. Data hiding is one of these techniques [1]. Data hiding is a technique, which involves hidden data that is known only by the sender and the receiver. In this technique, hidden data is obtained only by a person who has stego key. Data can be hidden in seemingly innocent multimedia files (image, audio signal, video, etc.) with the condition not to exceed size of the cover data during transmission. If the receiver side knows the stego key, he/she can obtain the hidden data by operating embedding function in reverse [2,3].

Multimedia data (image, audio, video) has more size than plain text in computer environment. Therefore, images, audios, videos are very convenient to use as cover objects [4]. In order to prevent hidden data in cover object from third parties, embedding algorithm must satisfy some certain criteria. Not to be perceived by the human visual system is one of these criteria. At the same time to hide the data with embedding algorithm, data must be able to embed with appropriate capacity into cover data. In order to evaluate the success of data hiding algorithms the following points should be considered [5].
                        
                           •
                           The optimum way of embedding mechanism.

The optimum way of extraction of embedded data.

The optimum amount of data: Capacity.

Robustness to attacks.

Transparency.

Reliability.

To ensure these criteria, various data hiding algorithms have been developed [6–9]. The data hiding algorithms usually examined in 3 groups, according to the domain of data hiding algorithm.
                        
                           Spatial Domain: In this domain, Least Significant Bit (LSB) [10,11] method is widely used. The pixel values of the cover object are used for data hiding process.

Frequency Domain: Data hiding process is used by obtaining coefficients from conversions of Discrete Cosine Transform (DCT) [12,13], Discrete Wavelet Transform (DWT) [14] and Discrete Fourier Transform (DFT) [15].

Compression Domain: In this domain, Vector Quantization (VQ) method is used for data hiding [16].

Also, histogram shifting mechanism is used for data hiding and steganographic schemes [17].

Frequency domain is used for increasing durability [18,19]. Many studies are available for improving the data hiding algorithm by obtaining the coefficients of cover data in Frequency domain.

Recently, some researchers started to use the complementary rule of the DNA to ensure information security and data hiding. Huang et al. [20] suggested a DNA-based data hiding technique with low modification. This method solved many problems of previous DNA based data hiding algorithms. Liu et al. [21] proposed a new data hiding method based on deoxyribonucleic acid (DNA) coding, which used a word document as a cover object. In their method, the plain message became a cipher sequence after being encoded to a DNA sequence and being encrypted by the addition operation. The cipher sequence was attached to a random DNA primer sequence and circularly shifted for finite times, then the whole sequence was embedded into a Word document through substituting each character’s color. The plaintext was extracted according to the keys, and the key space was large enough to resist brute force attacks. Zhang et al. [22] presented a new image fusion encryption algorithm based on image fusion and DNA sequence operation and hyper-chaotic system. Two DNA sequence matrices were obtained by encoding the original image and the key image. Secondly, the chaotic sequences generated by Chen’s hyper-chaotic maps were used to scramble the locations of elements in the DNA sequence matrices which were generated from the original images. Finally using a XOR operator matrix was embedded. Lee [18] addressed issues regarding watermarking DNA coding sequences in the frequency domain. Chang et al. [23] proposed two data hiding schemes. In their schemes, secret messages were hidden in a DNA sequence. The host DNA sequence could be reconstructed after the reverse operation. This property ensured the security of the secret data and preserved the functionality of the original DNA. Risca [24] presented an implementation of steganography using DNA molecules. This study showed that the steganographically hidden message was retrieved only by using the two secret primers, meaning that the only applicable cryptanalytic approach was a brute-force search for the two primer sequences. At the same time in the literature, there are many studies supported by the secret sharing method to improve the success of data hiding application. Liu et al. [25] presented a robust readable H.264/AVC data hiding algorithm without intra-frame distortion drift. They first divided the original embedded data into several groups by using the secret sharing technique. Then they used the BCH syndrome code (BCH code) technique to encode each grouping of data. Finally, they embed the encoded data into the paired-coefficients of the 4×4 Discrete Cosine Transform (DCT) block of the selected frames which meet our conditions to avert the distortion drift. Lee and Tsai [26] presented a new data hiding method via PNG images based on Shamir’s (k,
                     n)-threshold secret sharing scheme. Wei et al. [27] proposed new information hiding scheme for color images based on the concept of visual cryptography and the XOR operation. Three different schemes with noise-like, meaningful and binary shares were presented. Their proposed model could be extended from 256 colors to 65,536 or true color images by expanding the block size from 3×3 to 4×4 or 5×5. In this paper, for improving the success rate of data hiding techniques an efficient method is proposed based on DNA-XOR secret sharing. In Section 2, we briefly describe the basic concept of DNA encoding and decoding for color image. Section 3 contains a detailed explanation of the proposed algorithm. In Section 4, we describe the results of proposed method in the context of PSNR, bit error rate (BER), pixel distortion (PD) and structural similarity (SSIM). Finally, we present our conclusion in Section 5.

A DNA sequence consists of DNA molecules. DNA sequence is essential information for living, surviving and reproducing [28]. A DNA sequence is formed by four nucleic acids which are A (adenine), C (cytosine), G (guanine), T (thymine). A, T and G, C are complementary like 0 and 1 in binary. DNA sequencing is important for biological research [29].

In a DNA sequence, there are four different nucleic acids which are, A (adenine), T (thymine), C (cytosine), and G (guanine). Therefore, Watson–Crick complement rule is valid in here [30]. Table 1
                         shows encoding and decoding map by using DNA sequence in this paper.

The Watson–Crick complementarity rule gives fundamental information which can be transferred to daily life. Firstly, a color image is separated to RGB channels. Secondly, these RGB channels are converted to binary coding. Then, each pixel of RGB channels can be expressed as a DNA sequence. For example, the binary code of the pixel value of blue channel image is [11001001]. DNA sequence of this binary code is [TACG] according to definition of first column in Table 1 
                        [31].

A x-bit color image, which has m
                        ×
                        n size and can be defined as a three-dimensional (Red, Green and Blue) binary matrix, which is denoted as 
                           
                              A
                              =
                              
                                 
                                    
                                       
                                          
                                             
                                                s
                                             
                                             
                                                i
                                                ,
                                                j
                                                ,
                                                k
                                             
                                          
                                       
                                    
                                 
                                 
                                    m
                                    ×
                                    n
                                    ×
                                    k
                                 
                              
                           
                        . Where 
                           
                              
                                 
                                    s
                                 
                                 
                                    i
                                    ,
                                    j
                                    ,
                                    k
                                 
                              
                              ∈
                              {
                              0
                              ,
                              1
                              }
                           
                        , and (i,
                        j,
                        k) 
                           
                              ∈
                              {
                              0
                              ,
                              1
                              ,
                              …
                              ,
                              m
                              -
                              1
                              }
                              ×
                              {
                              0
                              ,
                              1
                              ,
                              …
                              ,
                              n
                              -
                              1
                              }
                              ×
                              {
                              0
                              ,
                              1
                              ,
                              …
                              ,
                              k
                              -
                              1
                              }
                           
                        .

The XOR operation for R, G, B channels of the image are defined in Eq. (1):
                           
                              (1)
                              
                                 R
                                 ⊕
                                 G
                                 ⊕
                                 B
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   s
                                                
                                                
                                                   i
                                                   ,
                                                   j
                                                   ,
                                                   1
                                                
                                             
                                             ⊕
                                             
                                                
                                                   s
                                                
                                                
                                                   i
                                                   ,
                                                   j
                                                   ,
                                                   2
                                                
                                             
                                             ⊕
                                             
                                                
                                                   s
                                                
                                                
                                                   i
                                                   ,
                                                   j
                                                   ,
                                                   3
                                                
                                             
                                          
                                       
                                    
                                    
                                       m
                                       ×
                                       n
                                       ×
                                       k
                                    
                                 
                              
                           
                        Binary code of the represented value of pixel Ai
                        
                        ,
                        
                           j
                         at point (i,
                        j) can be converted to a decimal number by using Eq. (2) 
                        [32].
                           
                              (2)
                              
                                 
                                    
                                       A
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       a
                                    
                                    
                                       i
                                       ,
                                       j
                                       ,
                                       k
                                       -
                                       1
                                    
                                 
                                 
                                    
                                       2
                                    
                                    
                                       k
                                       -
                                       1
                                    
                                 
                                 +
                                 
                                    
                                       a
                                    
                                    
                                       i
                                       ,
                                       j
                                       ,
                                       k
                                       -
                                       2
                                    
                                 
                                 
                                    
                                       2
                                    
                                    
                                       k
                                       -
                                       2
                                    
                                 
                                 +
                                 …
                                 +
                                 
                                    
                                       a
                                    
                                    
                                       i
                                       ,
                                       j
                                       ,
                                       1
                                    
                                 
                                 
                                    
                                       2
                                    
                                    
                                       1
                                    
                                 
                                 +
                                 
                                    
                                       a
                                    
                                    
                                       i
                                       ,
                                       j
                                       ,
                                       0
                                    
                                 
                                 
                                    
                                       2
                                    
                                    
                                       0
                                    
                                 
                              
                           
                        In DNA computing, biological and mathematical operators based on DNA sequences are used. XOR operator has been widely utilized in DNA computing. Table 2
                         shows the DNA-XOR rules [30].


                        Fig. 1
                         illustrates the deterministic finite automata of XOR operator for DNA sequences using a state diagram [33].

In this study, the secret data is divided into three secret shares with using DNA-XOR operator. Each part of hidden data is embedded into each channel of color image. Cover images size is 512×512×3. Size of each secret share is 512×1024 (524,288) bits which is embedded into the cover image.

Secret sharing based methods have been introduced to protect the reliability of the encryption key or data. Shamir’s (k,
                        n) threshold method is the best known of these methods. Purpose of secret sharing is to provide the key reliability. In the literature, many secret sharing based data hiding algorithms are proposed. To achieve an optimum data hiding scheme, a new probabilistic secret sharing method is proposed [34,35].

In this paper, we presented a new probabilistic secret sharing scheme based on DNA-XOR operator. This scheme is similar to Wang’s scheme. Construction of Wang’s scheme is given in Fig. 2
                         
                        [34].

The probabilistic DNA-XOR secret sharing scheme is applied on a test image. The test image is divided into secret shares by using the probabilistic DNA-XOR secret sharing scheme and results are given in Fig. 3
                        .

The flow diagram of embedding procedure is given in Fig. 4
                        .
                           
                              
                                 Step 1: Transform cover image into R, G and B channels.


                                 Step 2: Convert secret data to binary form.


                                 Step 3: Convert binary data to the DNA form of the hidden data.


                                 Step 4: Apply the DNA XOR secret sharing operator to the hidden data.


                                 Step 5: Calculate all MSE (Mean Square Error) of all probabilities.


                                 Step 6: Select the best triple combination which has minimum MSE as secret shares and embed secret shares into the cover image.

For example, combinations of A are shown in Table 3
                        . These combinations are obtained from DNA-XOR truth table.

The embedding function is modulo and its equation is given in Eq. (3). For example, if secret data is A and the best combination is TTG. Thus, 
                           
                              T
                              ⊕
                              T
                              ⊕
                              G
                              =
                              A
                           
                        . T, T, G are embedded into channels of the color images, respectively.
                           
                              (3)
                              
                                 
                                    
                                       bits
                                    
                                    
                                       i
                                       ,
                                       j
                                       ,
                                       k
                                    
                                 
                                 =
                                 ⌊
                                 
                                    
                                       A
                                    
                                    
                                       i
                                       ,
                                       j
                                       ,
                                       k
                                    
                                 
                                 
                                 mod
                                 
                                 
                                    
                                       2
                                    
                                    
                                       2
                                    
                                 
                                 ⌋
                                 
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 m
                                 ,
                                 
                                 j
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 m
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 3
                              
                           
                        An example of the proposed data embedding is shown in Fig. 5
                        .

As shown in Fig. 5, G, G and A is the secret shares which have minimum MSE values. These values are embedded into cover channels of the cover image respectively. As a result of the embedding process, there has not been any changing in the pixel values. For this reason, a higher PSNR value is obtained. If multiple values have the minimum MSE, one of these values is randomly selected. In Fig. 5, there has been no change in the pixel values because of minimum value of MSE is zero.

The extraction algorithm is given below.
                           
                              
                                 Step 1: Obtain RGB channels of the stego image.


                                 Step 2: Find embedded indices using the stego-key.


                                 Step 3: Obtain embedded location for each channel and apply invert bit with modulo 22.


                                 Step 4: Convert extracted bits to DNA-code.


                                 Step 5: Apply DNA-XOR operation to DNA code of each channel as shown in Eq. (1).


                                 Step 6: Extract DNA sequence and convert to appropriate form.

@&#EXPERIMENTAL RESULTS@&#

In this section, performance of the proposed method is evaluated according to 6 performance metrics and these metrics are given below.
                        
                           
                              The optimum way of embedding mechanism: LSB or modulo function based methods are used as data hiding functions in the proposed method. These data hiding functions are widely used and these functions have the optimum way of embedding mechanism. In this study, we used the optimum data hiding functions and the DNA-XOR secret sharing scheme together.


                              The optimum way of extraction of embedded data: Firstly, image is divided into R, G and B layers and then modulo function is used with the DNA-XOR operator to extract the secret data. This method is the optimum way for data extraction.


                              The optimum amount of data: The proposed method allows data hiding with high payload capacity. In this paper, 2bpp (bit per pixel) payload capacity is used.


                              Robustness to attacks: Data hiding algorithms based on secret sharing are used for image authentication. For this reason, the proposed algorithm is fragile.


                              Transparency: The DNA-XOR secret sharing scheme uses the DNA-XOR truth table and multiple values are obtained for one secret share. The proposed algorithm selects the optimum value for embedding. For this reason, transparency of the proposed algorithm is very high.


                              Reliability: The DNA-XOR secret sharing scheme divides the secret data into secret shares and this scheme is uses image as an encryption key. The DNA-XOR operator uses 8 different encoding techniques. Reliability of the secret data is provided by using the DNA-XOR secret sharing scheme in the proposed data hiding algorithm.

Experimental results are offered for comparing the performance of the proposed method with the previously selected methods. In the experiments, eight general test images with the size of 512×512×3 are used as cover images, namely, “Lena”, “Peppers”, “Tiffany”, “Goldhill”, “Baboon”, “Jet”, “Barbara” and “House”. These test images are shown in Fig. 6
                     .

The operating system is Windows 8.1 and the proposed algorithm is programmed in Matlab 2013a. The payload capacity is 2bpp. To compare visual quality, MSE, PSNR, BER, PD and SSIM are defined in Eqs. (4)–(8) respectively [35–43].
                        
                           (4)
                           
                              MSE
                              =
                              
                                 
                                    1
                                 
                                 
                                    mn
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             
                                                CI
                                             
                                             
                                                i
                                                ,
                                                j
                                             
                                          
                                          -
                                          
                                             
                                                SI
                                             
                                             
                                                i
                                                ,
                                                j
                                             
                                          
                                       
                                    
                                 
                                 
                                    2
                                 
                              
                           
                        
                     
                     
                        
                           (5)
                           
                              PSNR
                              =
                              10
                              log
                              
                                 
                                    Max
                                    (
                                    
                                       
                                          CI
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                                 
                                    MSE
                                 
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              PD
                              =
                              
                                 
                                    total number of bits changes
                                 
                                 
                                    total number of bits embedded
                                 
                              
                           
                        
                     
                     
                        
                           (7)
                           
                              BER
                              =
                              
                                 
                                    total number of bit changes
                                 
                                 
                                    total number of bits
                                 
                              
                           
                        
                     
                     
                        
                           (8)
                           
                              SSIM
                              (
                              CI,SI
                              )
                              =
                              
                                 
                                    (
                                    2
                                    
                                       
                                          μ
                                       
                                       
                                          CI
                                       
                                    
                                    
                                       
                                          μ
                                       
                                       
                                          SI
                                       
                                    
                                    +
                                    
                                       
                                          c
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    (
                                    2
                                    
                                       
                                          σ
                                       
                                       
                                          CISI
                                       
                                    
                                    +
                                    
                                       
                                          c
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                                 
                                    (
                                    
                                       
                                          μ
                                       
                                       
                                          CI
                                       
                                       
                                          2
                                       
                                    
                                    +
                                    
                                       
                                          μ
                                       
                                       
                                          SI
                                       
                                       
                                          2
                                       
                                    
                                    +
                                    
                                       
                                          c
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    (
                                    
                                       
                                          σ
                                       
                                       
                                          CI
                                       
                                       
                                          2
                                       
                                    
                                    +
                                    
                                       
                                          σ
                                       
                                       
                                          SI
                                       
                                       
                                          2
                                       
                                    
                                    +
                                    
                                       
                                          c
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                        
                     
                     
                        
                           CI
                        
                      is cover image, SI is stego-image, μ
                     CI is the average of cover image, μ
                     SI is the average of stego image, 
                        
                           
                              
                                 σ
                              
                              
                                 CI
                              
                              
                                 2
                              
                           
                        
                      is the variance of cover image, 
                        
                           
                              
                                 σ
                              
                              
                                 SI
                              
                              
                                 2
                              
                           
                        
                      is the variance of stego image, 
                        
                           
                              
                                 σ
                              
                              
                                 CI
                              
                           
                        
                      is the covariance of cover image and stego image, c
                     1;(k
                     1
                     L)2, c
                     2;(k
                     2
                     L)2, L: dynamic range of pixel values, k1; 0.01 and k2; 0.03 by default in SSIM equation [38–42].

The results of the proposed method are given in Table 4
                      for test images.

The PSNR/Capacity change rate of the proposed algorithm is shown in Fig. 7
                     .

The proposed method is compared with Lin and Tsai’s method [40], Yang et al.’s method [41], Chang et al.’s method [42], Wu et al.’s method [43] and Kanan and Nazeri’s method [44]. The obtained results for the test images are shown in Table 5
                     .

Yuan has also proposed to secret sharing methods for natural images based on multi-cover adaptive steganography in 2014 [10]. Our proposed method is also compared to Yuan’s method and obtained results as shown in Table 6
                     .

@&#CONCLUSION@&#

In this paper, a new high quality, secure, reversible, simple and applicable data hiding algorithm is proposed. The proposed data hiding algorithm provides an optimum way of embedding mechanism, an optimum way of extraction of embedded data, high payload capacity, high visual quality and reliability of the secret data for data hiding. In the proposed scheme, the hidden data is embedded by modulo function and the DNA-XOR operator is used for secret sharing. As we know there has been no proposed secret sharing scheme in the literature, which uses DNA-XOR operator. The proposed method is compared to previously popular approaches from the viewpoint of data hiding effectiveness and visual quality parameters. Although the capacity is 2bpp (bit per pixel), the average PSNR of our proposed method is greater than 52dB (52>48.13dB (
                        
                           10
                           
                              
                                 log
                              
                              
                                 10
                              
                           
                           
                              
                                 255
                              
                              
                                 2
                              
                           
                           /
                           1
                        
                     )). Therefore, this result clarified that the best PSNR values are obtained by using our proposed methods.

@&#ACKNOWLEDGEMENTS@&#

We thank reviewers for their positive comments, Fatih Özyurt, Mustafa Eriş and Hüseyin Yüce Kürüm for careful reading of the paper.

@&#REFERENCES@&#

