@&#MAIN-TITLE@&#A framework for fully integrated building information models in a federated environment

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We discuss the importance of the use of federated models in the AECO industry.


                        
                        
                           
                           We highlight shortcomings of the current IFC schema to deal with the federated models.


                        
                        
                           
                           We propose simple yet powerful modification to the IFC schema to support this.


                        
                        
                           
                           We introduced the concept of deferred reference and object snap in.


                        
                        
                           
                           We demonstrated the potential use of the concept for federated models and versioning.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

BIM

IFC

Federated model

Partial models

@&#ABSTRACT@&#


               
               
                  The nature of building projects necessitates building models to be designed by various parties representing disciplines in the Architecture, Engineering, Construction and Owner-operator (AECO) Industries. The federated model emerges as the most practical approach to deal with the various models, especially during design stage, construction coordination and beyond. One of the issues with the current approach is there is no real integration between the various models beyond their spatial co-location. This paper proposes a framework to enable fuller integration of otherwise disparate models into integrated models in the federated environment by enabling two critical concepts – deferred reference and an automatic object snap-in. The concepts are applied in a proposed change to an IFC schema and standardized procedure to enable the automatic snap-in mechanism. With these concepts, models could be designed and exported independently as valid, perhaps partial models and yet will remain integrated when they are inserted into the federated model. A prototype system has been developed to show the effectiveness of such integrated models.
               
            

@&#INTRODUCTION@&#

Models in the life-cycle of a building project are increasingly complex and require evermore closer collaboration between various parties to improve efficiency. A scheme of federated models arises as a practical answer to current issues. Despite the benefits of using federated models, they are currently nothing more than a collection of models that are co-located. Each of the models holds its own structure, points to data only within itself and typically contains redundant or duplicate data [1]. The use of model servers does not alleviate this issue because of the way the data model is currently defined, that is, single-model centric. Even within native BIM authoring tools, federated models are still not fully integrated since separate models are stored in their own documents. Authoring tools such as Autodesk Revit allow references across models, for example to generate a room or space objects. But even with such references, incomplete representations may be generated when the underlying referenced models are unloaded, i.e. an object does not have the right geometry until the referenced models are loaded back to the session [2]. Unfortunately, in general object references will not work in a heterogeneous environment typical to a building project. Unless a new framework that is designed to make the models integrated is introduced, the intelligence expected from federated models would be limited. This paper introduces a new framework to enable models to have references to one another even when they come from different sources. This framework allows the models to be consistent and valid as individual models, and integrated when they are placed together in federated models. This model integration maintains integrity of models including a consistent structure and well-organized relationships regardless of their modelling environment, eliminating duplicates in geometries and semantics of models.

A building design has never been completely integrated. It is perhaps a legacy that is left over from the historical precedent. Until recently, building projects were commonly designed on paper. With the limitation of paper as a medium, symbolic representations have been broadly used to capture the intent of the building design. They were done in many drawing pages, one set of pages for one category of drawings, e.g. structural, mechanical, landscape, etc. The digitalization of drawings in the early 1970s with the advancement of CAD did not fundamentally change the structure of data. It merely transformed the medium from paper to electronic media, retaining the same symbolic representations in one drawing (or one layer) for each category of drawings. But when CAD advanced to 3D in the 1970s and early ideas of BIM were introduced in the early 1990s [3–5], the building industry was very slow in embracing it and kept to the earlier practice. It somewhat influenced the development of BIM in that BIM continues to rely on individual models to represent various disciplines within the building project. The only form of integration of the models are in federated models. Within the authoring tools, these are usually achieved by linking the files, i.e. XRef in AutoCAD based tools, or link files in Revit.

The development of the IFC schema in 1996 using STEP resource libraries and the Express language [6] maintained the notion of a single model, with a slight tone change that the models should be consolidated into a single IFC file. But in practice, this is never really achieved and it is ever more remote now as the models are increasingly more complex and larger in size, making it impractical to combine them into a single model. The rise of popularity of federated models by tools such as Autodesk Navisworks [7], and Bentley Navigator [8], is the reaction to overcome the limitation imposed by the concept of a single integrated model. Unfortunately, this mode of integration is limited to the support of heterogeneous environment where models from various sources can be federated into one based on the spatial co-location and hardly anything else.

Several papers highlighted the importance of federated models in the AECO industries. The concept has been discussed in several papers as early as the late 1990s. It focused on the collaboration aspect, which works in tandem with the federated models [9,10]. Both papers recognized that virtually every building project involves multiple participants, often from separate organizations, who need to collaborate with each other in the design process. As discussed in [9], the earlier effort to deal with this topic employed data exchange models starting with IGES, IPAD, PDES, STEP, COMBINE. In these two papers, the approach shifted toward providing a shared and centralized model. Since multiple parties in the building project often use different model authoring tools with their unique data model, such an approach faces an uphill battle to be universally adopted by the design tools. The exchange model seems to be more practical as evident by the adoption of the IFC exchange model by major BIM applications. By defining standard interfaces on what data to exchange, applications continue to have their own liberty to develop the optimized data model internally for their own application and yet allow interoperability with other applications. However, the need to have better collaboration is still critical in a building project. One very successful use of collaboration in practice today is a clash detection. To support clash detection, applications that are able to aggregate data from various formats are found to be popular. They include Autodesk Navisworks and Bentley Navigator. With the rising popularity of IFC, even the freely available IFC-based BIMSight [11] is starting to find a role in this collaboration. The kind of federated model as required by clash detection is still very limited to geometry co-location and mostly still requires human intervention when dealing with the results. Thus the intelligence still resides with human experts to a large extent. For more advanced automated applications such as building rule checking, the federated model must be able to support the intelligence built into the computer applications.

Steel et al. [12] outlined the need for collaboration using the federated model with several levels of interoperability that includes file and syntax level interoperability, visualization, semantic, and modelling style level. The file and syntax level interoperability deals with the file format that for the most part the standard format IFC is able to support. But another issue is also highlighted as part of file and syntax interoperability level, i.e. file size. With the increasing complexity of information that goes into building models, a monolithic approach to the model with the current IFC becomes impractical. Splitting the model into separate disciplines is a commonly used approach, which causes the loss of linkage that is usually built in the authoring applications (Fig. 1
                     ). Becerik-Gerber and Kensek [13] also highlighted the need for breaking up the model to deal with the need for collaboration. Rosenman et al. [14] took on the issue by proposing a shared model concept that supports a multiple view representing the same building object depending on the domain application that accesses it. This approach resembles the concept in the late 1990s. It also recognizes the semantic level of interoperability. However, the semantic level of interoperability addressed is still limited to the individual element level.

Recognizing the need for much better model integration, the idea of model servers was adopted, partially influenced by the concept of PLM in the manufacturing industries and similar to the earlier approach of a centralized shared model. In a review on BIM data storage and exchange mechanisms, Isikdag et al. [15] described three types of database storage models for building model integration, i.e. a central project database represented by products such as EDM Model Server [16], a federated (loosely coupled) project database as advocated by Bentley in the Bentley white paper [17] and a web services approach as prototyped by the SABLE project [18]. In recent developments, an open source approach of IFC based database servers is gaining traction, represented by the BIMServer project [19]. All of these are based on the IFC schema. Since the IFC schema itself is designed to work as a single model, and separate authoring tools still produce separate models, the servers suffer the same issue of a lack of integration between the models to make up an integrated and coherent building model covering all related models [1].

The papers reviewed have identified critical needs for collaboration and the use of the federated model is almost assumed. Only a few have recognized the need to support a semantic level of interoperability in the federated model such as in [12,14]. But even then the richer set of semantic interoperability that is important in maintaining the consistency of the federated model across different disciplines is largely left unaddressed.

This paper deals with what has been unaddressed, namely a semantic model that includes elements and their relationship with other elements regardless of their source. To support that, we propose a framework that enables a flexible approach to integrate models in the federated environment without a single “super” model, but a collection of models that maintain their relationships. This framework removes the need for redundant and sometimes inconsistent data in each member model. The framework proposed is based on the IFC schema and it involves small changes to the schema that introduce a concept of deferred references and defining a standard procedure to allow implementation of an object snap-in, a concept not dissimilar with plug-and-play technology.

There are generally two approaches to handle federated models. The first approach is a proprietary approach that supports multiple heterogeneous file format readers that maps to its own managed data structure (Table 1
                     ). Autodesk Navisworks and Bentley Navigator are among the most popular in the AECO industries due to their wide-range support of various BIM native formats. Solibri Model Checker and Tekla BIMSight employ a similar approach although they mainly support the IFC format and provide only very limited support for native formats. The second approach is the use of database servers, otherwise known as model servers. The EDM model server [16] is an example of a commercial implementation of this approach. BIMServer [19] is an open source alternative of such implementations based on the Java platform. Both approaches are based on the IFC schema. As model servers, they offer more than the scope of this paper since they also provide typical database features such as access control, check-in and check-out mechanism, version control, and differences. In this paper, the focus is extending model integration based on the IFC schema.

As previously highlighted, since the IFC schema is designed to be a monolithic model, the model server implementation of IFC suffers from the same restriction. The model server only offers a centralized location in which it is possible to access information in another model as long as the application knows what to look for. In this respect, it is no different from other applications that aggregate several models and spatially co-locate them in one place. One tremendous benefit just from co-location is the availability of the models for spatial coordination such as clash detection. The construction industry has greatly benefited from this capability. But since the models are not fully integrated, users must manage the rest of all the information produced by the clash detection and update the changes required. There are potential side effects of these updates, which users must manually deal with.

Integrated models are important especially in downstream applications such as rule or code checking and Facility Management, which live much longer than the models for construction projects. Unfortunately, in the current practice the requirements for FM has been conspicuously absent due to late or no involvement of FM expertise in most construction projects. Several studies showed the importance of FM involvement in the early stage of the project to ensure that the handover models contain the necessary information for the FM operators to take over [20–23] and that their maintenance and operation requirements can be accurately reflected to a building design during the early design phase. Despite these credible demands the need for consistent and integrated models have not yet been addressed adequately. The following discussions highlight several areas that require an accurate model integration.
                        
                           1.
                           
                              Project spatial structure: IFC specifies a well-defined hierarchical spatial structure that allows a project to cover one or more sites, and each site may consist of one or more buildings. Each building may be defined to be a complete (standalone) building or an aggregation of partial buildings, essentially allowing parts of the building to be described separately under an instance of IfcBuilding. One of the use cases is a building complex, which has common parts at the base and two or more towers above. Each of the building in turn may be made of several building stories and in each building storey there may be a series of spaces. Fig. 2
                               illustrates a IFC spatial structure as found in the IFC4 documentation. The design of the IFC model assumes that the spatial structure is consistent throughout the project with just a single spatial hierarchy. However, in practice this hardly happens due to the practice of having different contractors working on different trades, or the inability of the software to handle huge amounts of data, or lack of easy collaboration. This means that a building project is typically a collection of many models in the IFC context, each of which has its own copy of the spatial structure, which unfortunately may not be exactly the same (Fig. 3
                              ). This recognition requires Navisworks to transform all local or relative coordinate to global coordinates and eliminate the spatial nesting arrangements of users, requiring manual management of locations for updating.


                              Space containment: Space containment, through IfcRelContainedInSpatialStructure, is one of the very essential features for support of Facilities Management and Asset Management functions, after the building project handover. Most, if not all, of the current BIM authoring tools support space containment, but do not support containment across different files, i.e. the space belongs to a different file (link file) than the objects contained in it. Fig. 4
                               illustrates this case. Even though the MEP objects and the furniture inside the same space are reportedly contained in the same space, space number 108, there are two spaces numbered 108, each in a different file: one from architecture (in Revit: Room object) and one from MEP (in Revit, MEP Space object).


                              Systems and system connectivity (including prefabrication assembly): Considering that MEP systems can be large, there is always a possibility that a large interconnected system for a whole building may be split into several files. In most BIM authoring tools today, the connection between members of a system that are separated by different files will not preserve the connection information. Fig. 5
                               shows the connectivity relationship through IfcDistributionPort, IfcRelConnectsPortToElement and IfcRelConnectsPort for MEP system member connections found in the IFC4 documentation. This capability works within a single file. The file boundary limitation is a fundamental limitation for all but a few systems.


                              Space boundary: The space boundary, represented by IfcRelSpaceBoundary, is crucial information for energy analysis, quantity take-off for cost estimating, and code checking applications [24]. In these applications, the space boundary is assumed to be complete and reliable as their very basic premise for meaningful analyses. In particular, during the conceptual design phase where a model still do not contain numerous objects, space boundaries are critical in cost estimation of walls and slabs, and their finish materials. If this information is missing or not consistent, the results will not be reliable. In many BIM applications today, there are many ways users could create the model. For various legitimate reasons, one may split the model into separate files for the façade of the building, the interior of the building and the structural part of the building (e.g. floor slab). This organization can result in incomplete space boundary information if the BIM tool is unable to link the space and its boundary from other linked files, or if it exports the file individually as a separate IFC file. The general strategy practiced today is to partition the project in a manner that minimizes the cut links, even though it is not always possible to do if different organizations are involved.


                              Element connection: IFC defines other types of connections between objects. One such connection is IfcRelConnectsPathElements that is used to describe wall connections among others. The connection type between walls, i.e. T connection or L connection, is important especially for importing applications to be able to create the correct connections between walls and re-create or maintain the integrity of the model for the walls. Similar to the situation described in the space boundary above, when external walls as part of the façade are separated in a different file than the internal walls, the connection information is likely to be missing in the resulting IFC model.


                              Version relationship: Versioning is an old issue that has never been fully implemented in CAD related design modelling due to the complexity in managing entities and their relationships [25]. One instance of versioning that can be found in the BIM world is in the form of Level of Development (LOD) [26]. It is only beginning to draw attention due to the fact that modelling a building is not a one step process. The building model usually goes through a step-wise process in which the model contains varying levels of detail based on the stage of the project development. One issue that starts to emerge is how one would link the same object that is represented in increasing detail as the model goes through further development. The current BIM tool may not be able to deal with this issue well, especially when the object is simply replaced with a different representation in the subsequent versions. It is noteworthy that CIS/2, the steel fabrication model [27], explicitly defined three parallel models, a design model and a manufacturing model representing two different phases of a project, and a structural model, with cross reference mappings between them.

One important observation from the issues above is that all the relevant items deal with IfcRelationship entity and its subtypes. Hence, the key to solving the issues discussed that deals with integration lies with the new approach to deal with IfcRelationship entities. This paper proposes the concept of deferred reference with the following considerations in mind:
                        
                           1.
                           The federated model scheme is here to stay. Models may be structured by system or spatially, or possibly other aspects. The proposal will harness the federated model scheme by allowing creation of valid albeit partial IFC models (partial is because certain references may be missing in the file, hence the name “deferred reference”).

Changes proposed to the IFC schema are simple and allows smooth backward compatibility.

Changes proposed to the IFC schema is simple enough for BIM authoring tools to implement.

Not everything can be dealt with at the schema level. It will require standardized procedures or standardized specifications for export and import implementations to support the combination of the deferred reference with automatic snap-in capability.

In the current IFC schema every relationship is represented with one of the subtypes of IfcRelationship. It links two or more entities via its attributes that has direct reference to the linked entities. In this case we are interested in building products (Fig. 6
                        ). This design requires both ends of the building products to exist in the model, otherwise it will form an incomplete or invalid model, and violate the schema integrity. In the event where two or more connected models need to be exported separately, a special arrangement is needed to maintain the link between related objects without the presence of the objects. Fig. 8
                        
                         shows the proposed change to IfcRelationship entities allowing the reference to an object to be represented by a minimum reference, mainly its GUID. A new generic entity is IfcDeferredReference. IfcDeferredReference is a subtype to IfcObjectDefinition is defined for this purpose (Fig. 7). The use of deferred reference to an “incomplete” object specification by its GUID allows validity of the model and provides the necessary information to resolve the reference at a later stage when the object with the associated GUID is present in the federated model.

The relationship objects in IFC will have a new Select type for both attributes referencing both sides of the relationship. Fig. 8 shows a diagram of the use of this select type for IfcRelContainedInSpatialStructure. The Select type allows a choice of either the actual IFC object, which is the original IFC specification, or the IfcDeferredReference entity that keeps a GUID to the actual IFC entity it eventually should refer to. In all cases of deferred references, it makes sense that only one side of the relationship object has the deferred reference while the other side refers to an IFC entity present in the current model. To achieve this, a constraint OnlyOneDRef is applied to the relationship object to limit the reference only to one side of the select type to the IfcDeferredReference (Fig. 9
                        ).

The proposed definition allows for the flexibility to support federated models in the form of multiple IFC files while maintaining integrated references to the right object. This allows mix and match features where the relationship may refer to the objects present in the current model/file, or may refer to the deferred reference entity for a later matching process. The design also will maintain backward compatibility. All earlier IFC formats, e.g. IFC4 and IFC2×3, will be supported seamlessly as they will have a valid subset of the deferred reference select type that points to the IFC entity(ies) that are found inside the current model (Fig. 10
                        ).

To ensure a final integrated federated model, a deferred reference needs to be combined with a protocol for a standardized mechanism of object snap-in. The object snap-in is the step when the deferred reference is resolved, i.e. the reference to the actual IFC entity in the federated model is restored replacing the temporary deferred reference. This situation must happen when the referred object(s) become available, either when the object is being imported or the model with deferred reference(s) find the match of the actual entity(ies) in the existing model that the current IFC file is added to. This object snap-in has a similar concept to the plug-and-play approach popular in the computer hardware.


                        Fig. 11
                         shows the diagram on the workflow to enable object snap-in. It should handle both cases when the object imported has the reference or is referred to by existing objects in the model. The workflow requires simple additional steps to resolve any deferred references whenever the object becomes available.

The concept of deferred reference can also be applied to provide the link of an entity to its predecessor, creating references to the earlier version of the object. To achieve this ability, this paper proposes a new subtype of IfcRelAssociates, i.e. IfcRelAssociatesPriorReference as shown in Fig. 12
                        . The versioned relationship does not have to be a 1–1 relationship, it could be 1-to-many. Nevertheless, it provides a basic linkage between otherwise unrelated entities. Since the prior reference points to the predecessor of an entity, the reference is not expected to be resolved. In the context of an IFC model server, an application will be able to track and follow the prior relationship through these relation instances and thus create a rudimentary versioned relationship of an object. The full versioning mechanism involves more than just a relationship entity and requires the whole environment to perform a check-in check-out mechanism, consistency check of equality constraints, etc. [25]. Such implementation is suitable to be developed as part of a model server capability that is beyond the scope of this paper. Nevertheless, even with such a simple concept, there are potentially many applications that can make use of the feature, for example tracking changes of an object throughout its LOD (level of development) phases. This will be discussed further in the following section.

One significant potential for this simple versioned relationship is the ability to perform a comparison of what changes an object goes through regardless of how the change is actually performed. Currently, model difference is tracked mainly using GUID, i.e. objects of the same GUIDs in the different models are compared. Operations that delete an object and create a new one in its place will render this ineffective. Some applications may use other means of comparison, for example by geometry signature or its position. This technique is limited as there is no well-defined criterion to define two objects as related unless they bear the same signature. The IfcAssociatesPriorReference changes that by providing information of relations between two objects (or set of objects), which otherwise are not related. This allows for much better differential comparison of a model beyond a simple 1-to-1 GUID matching.

A slight modification of the IFC schema regarding IfcRelationship is required to support deferred references. It also requires modifications to support exporting deferred references in export functionality and to support resolving the deferred references upon import. In this section simple scenarios for one of the possible uses of this concept is presented with details how the implementation may be carried out and the expected results. The scenarios involve the export and import process with tools that support IFC export and/or import.
                        
                           1.
                           
                              Integrated spatial structure: Spatial structure in IFC is an important piece of information. This information is currently separated in the federated model as described in the earlier section. Attempts were made in the past to try to derive the consistent spatial structure from the federated model, but it has been proven to be unreliable because the receiving application has no way to know whether two separate models are actually from the same building or different buildings, for example the application has no way to know whether “Level 1” from model 1, is exactly the same with “Level 1” in model 2 because they could be representing “Level 1” from different buildings. To get accurate information regarding the correct and consistent spatial structure, the exporting application must be the one sending the right information.


                              Fig. 13
                               shows how it might be implemented in Autodesk Revit. For all practical purposes, a project that contains spatial structure information, i.e. Level, can be created with each of the Levels having their own pre-defined GUID. To make a project consistent, each of the Revit models should have a consistent naming convention, where the same Level must have the same information across the project. Each model linked together in Revit needs to overlay the spatial structure model and specify the spatial structure file as a reference upon export. The resulting IFC file (with modified schema) would use deferred references.


                              Fig. 26 shows how the IFC files are imported in sequence and the resolution of the deferred reference occurs as the referenced objects become available in the second import into the federated model. This requires an import capability cognizant of deferred relations.


                              Integrated space boundary: Another possible implementation example is the space boundary. In practice today, designers often split the model into several files and link them together. For example in Fig. 14
                              , the model is separated into a model for external walls, internal walls and structure. In order to create a room object that is bounded by all these elements, the room object is defined in the federated model and all the link files are set to be “room bounding”. When the individual models are imported, we would expect the outcome of the export to be what is shown in Fig. 14. For this to happen, the room needs to know GUIDs for all the bounding elements. It could be done by pre-assigned GUID to the elements or assigning them automatically during export and saving them. This would necessitate that all the references be exported first and the federated model last. Since Revit knows the boundary objects (when creating the room object by the “room bounding” constraint), it should be able to export the deferred reference information for export, with relatively straightforward modification.


                              Figs. 15–18
                              
                              
                              
                               show the sequence of progress when the models are imported into the federated IFC model. The figures also show a possible sequence of import where the object snap-in may occur when the referenced objects become available.


                              Version tracking: Present BIM authoring tools are hardly able to maintain a relational link between an object and its ancestor. The lack of this relationship makes it hard to track changes that have occurred to an object and the history of those changes. In the current implementation a whole model is simply a separate model from the predecessor, and the only clue for tracking the relationship is by their GUID. This has severe limitations as often an object is replaced by the newer version, e.g. deleted and re-created with different information. Also, often an object goes through significant enhancements as the model goes through further development where information about the object becomes more complete. In such a scenario an object may go through changes to its representation by using a different entity, for example from a simple boxed representation of IfcBuildingElementProxy to become an aggregation of objects represented by multiple objects or aggregated through IfcElementAssembly. The example adapted from the BIM Forum’s documentation on LOD [26] demonstrates such a scenario (Fig. 19
                              ).

A simple implementation supporting such usage can be achieved semi-manually by the user assigning the GUID of the ancestor inside the BIM authoring tool (Fig. 20
                              ). The reference could be a single reference to the immediate ancestor creating a similar structure to a linked list where the complete history can be traced one generation at a time. It could also be in the form of multiple references to various ancestors. Since the referenced object is in a separate model (not federated), the reference may remain unresolved and will be left for a query system to make use of the information to get the relevant information from the database.

To validate the concept, we will focus on two areas: spatial structure containment, and space boundary relationship. The same concept is easily extended to all other items of deferred references described in this paper. Since the deferred reference is basically a pair of relation between one object in one model and another object, or a set of objects in a separate model, it can be described as a set of relationship pairs that one member in each pair shall be a deferred reference:
                        
                           
                              
                                 
                                    φ
                                 
                                 
                                    D
                                 
                              
                              =
                              {
                              (
                              
                                 
                                    A
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    B
                                 
                                 
                                    1
                                 
                              
                              )
                              ,
                              (
                              
                                 
                                    A
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    B
                                 
                                 
                                    2
                                 
                              
                              )
                              ,
                              (
                              
                                 
                                    A
                                 
                                 
                                    2
                                 
                              
                              ,
                              
                                 
                                    B
                                 
                                 
                                    3
                                 
                              
                              )
                              ,
                              (
                              
                                 
                                    A
                                 
                                 
                                    4
                                 
                              
                              ,
                              
                                 
                                    B
                                 
                                 
                                    1
                                 
                              
                              )
                              ,
                              (
                              
                                 
                                    A
                                 
                                 
                                    4
                                 
                              
                              ,
                              
                                 
                                    B
                                 
                                 
                                    4
                                 
                              
                              )
                              ,
                              …
                              ,
                              (
                              
                                 
                                    A
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    B
                                 
                                 
                                    j
                                 
                              
                              )
                              }
                           
                        
                     where 
                        
                           (
                           
                              
                                 A
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 B
                              
                              
                                 j
                              
                           
                           )
                        
                      represents the pair relation of exactly one object to another. Either 
                        
                           
                              
                                 A
                              
                              
                                 i
                              
                           
                        
                     , or 
                        
                           
                              
                                 B
                              
                              
                                 j
                              
                           
                        
                      shall be a deferred reference but not both.

A relationship pair that is formed by a 1:n relationship: 
                        
                           (
                           
                              
                                 A
                              
                              
                                 i
                              
                           
                           ,
                           {
                           
                              
                                 B
                              
                              
                                 j
                              
                           
                           ,
                           
                              
                                 B
                              
                              
                                 k
                              
                           
                           ,
                           
                              
                                 B
                              
                              
                                 l
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 B
                              
                              
                                 m
                              
                           
                           }
                           )
                        
                     , shall be resolved into a set of their distributive pairs: 
                        
                           {
                           (
                           
                              
                                 A
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 B
                              
                              
                                 j
                              
                           
                           )
                           ,
                           (
                           
                              
                                 A
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 B
                              
                              
                                 k
                              
                           
                           )
                           ,
                           (
                           
                              
                                 A
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 B
                              
                              
                                 l
                              
                           
                           )
                           ,
                           …
                           ,
                           (
                           
                              
                                 A
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 B
                              
                              
                                 m
                              
                           
                           )
                           }
                        
                     . This is a valid operation since the relationship is independent from each other. Furthermore, if we use the convention that 
                        
                           A
                        
                      is the local object and 
                        
                           B
                        
                      is the deferred reference in the relationship pair, we can also state that 
                        
                           B
                        
                      must be a member of only one model in the federated models that is not the current or main model.

Since in the original authoring environment all the references are fully resolved, the 
                        
                           
                              
                                 φ
                              
                              
                                 D
                              
                           
                        
                      should be an empty set to begin with:
                        
                           
                              
                                 
                                    φ
                                 
                                 
                                    D
                                 
                              
                              =
                              ∅
                           
                        
                     
                  

By implication, if it can be tested that the set of the relationship pair in the imported federated models also points to an empty set: 
                        
                           
                              
                                 φ
                              
                              
                                 D
                              
                              
                                 ′
                              
                           
                           =
                           ∅
                        
                     , it can be said that the completeness criteria is met and the federated models are in the same state as the originating models. This will satisfy the necessary condition for completeness of the deferred references, but it does not guarantee the correctness and completeness of the imported model. However, the issues of import is not part of the scope of this paper and have been addressed in details in [28].

The set of relationship pair 
                        
                           
                              
                                 φ
                              
                              
                                 D
                              
                           
                        
                      should be built up during the split phase when essentially the application exports its model without the referenced model(s). This set should be inherent inside the model represented by the appropriate relationship entities with IfcDeferredReference at the one end of the relationship. During the import process, a subtract operation is needed to remove the pair that has its member 
                        
                           B
                        
                      that is fully resolved, i.e.
                        
                           
                              
                                 
                                    φ
                                 
                                 
                                    D
                                 
                                 
                                    ′
                                 
                              
                              =
                              
                                 
                                    φ
                                 
                                 
                                    D
                                 
                              
                              -
                              
                                 
                                    ψ
                                 
                                 
                                    D
                                 
                              
                           
                        
                     where 
                        
                           
                              
                                 ψ
                              
                              
                                 D
                              
                           
                        
                      is the set of relationship pair 
                        
                           (
                           
                              
                                 A
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 B
                              
                              
                                 j
                              
                           
                           )
                        
                      that is fully resolved by the current import process. If the import is complete with the federated models are being aggregated completely, the relationship set in the federated models shall point to an empty set 
                        
                           
                              
                                 φ
                              
                              
                                 D
                              
                              
                                 ′
                              
                           
                           =
                           ∅
                        
                     , which satisfies the necessary condition for fully resolved deferred references. This condition is relatively easy to validate.

To further validate and test the concepts, we have also developed a prototype implementation. In this implementation, we use a modified open source xBIM toolkit (http://www.xbim.net) to parse the IFC files, import, and aggregate (federate) IFC models. The actual integration of the models is implemented using part of our research on BIM rule checking systems called BIMRL (BIMR Rule Language) [29] that resolves the deferred references when each model is imported. This allows the import to be done in any sequence and the system is able to perform the object snap-in when it detects that the complete entity information becomes available, or to match the deferred references to the actual entities that have been imported earlier.

As this concept requires a modification to the IFC schema, we are unable to alter the way export is done directly. Instead, a post processing step is applied to modify the standard IFC output into the modified version. There are only two straightforward modifications required:
                        
                           1.
                           Change the elements that are referenced in another model to an IfcDeferredReference in each of the individual models from the various disciplines. A sample of such changes is shown below:
                                 
                                    •
                                    The original line for a building storey: #130= IFCBUILDINGSTOREY(’1KDsPJhOj48Q_lsUui8fIa’,#41,’FLOOR 1’,$,$,#129,$,’FLOOR 1’,.ELEMENT.,194.);
                                    

The modified line using IfcDeferredReference (The GUID is based on the actual IfcBuildingStorey entity in the template file): #130= IFCDEFERREDREFERENCE(’00Anm4s4r7luYkA9gSCCRV’,#41,’FLOOR 1’,$,’IFCBUILDINGSTOREY’);
                                    

Remove the information that is not needed in the models with the references. For example, in the spatial structure test case, the aggregation relationships of the original spatial structure elements need to be removed as their associated entities have been replaced. Whereas in the space boundary case, the space boundary relationships in the model where the referenced boundaries are present are removed since the relationship is only known in the model where the space element is being created.

In the first case for an integrated spatial structure, a template file was created. This template contains the spatial structure information alone with pre-assigned GUIDs for the spatial structure elements. This template file is used in all the models to provide a consistent spatial structure definition and the complete information of the entities. To test the concept a realistic model originating from Autodesk Revit was used. This model is a federated model that has three individual models: Architectural, MEP and Structural models. The models are available in the IFC model repository site maintained by the University of Auckland (http://openifcmodel.cs.auckland.ac.nz/Model/Details/302) [30] courtesy of Autodesk. This is an office building that houses the Revit team in Waltham, MA. The diagram in Fig. 21
                      shows the process of this validation test. The result is shown in Fig. 22
                     (B) showing that all elements are consistently assigned to a single containment structure while maintaining their own reference to the original source. In contrast, a typical model aggregation today will result in separate models with duplicated spatial structure. While the spatial elements may use the same name, they are distinct entities with their own GUID and own containment details (Fig. 22(A)). Such information poses a challenge for automation efforts since only human intervention can validate the correctness of the relationship across different models. In Fig. 23
                      with the Basement level expanded, the differences can be noticed. In (B) all elements contained in the basement levels from all discipline models are identified to be in the same containers.

For the second test, a smaller model was used for a practical reason: to show the validation result. A slightly different process was done as shown in Fig. 24
                     . Fig. 25
                     
                     (A) and (B) shows that the individual models that contain unresolved references still maintain their data integrity, except that the references remain unresolved until the actual elements are imported. Fig. 25(C) shows the result when the models are federated. The references are now resolved and the actual links are now activated and the deferred reference relationship pair points to an empty set.

This proof-of-concept demonstrated that achieving a well-integrated federation of models is possible with relatively small changes both in the IFC schema, and in the exporting and importing applications. Only a few lines of codes are affected to support this prototype.

@&#CONCLUSIONS@&#

A new concept extending the IFC relationship entities for integrating federated models has been presented. It defines a select type for a reference, whereby it either points to an existing entity or to a bare minimum reference of just the GUID. The minimum reference is used for a purpose to resolve the references later when the objects become available (or remain unresolved in the case of a versioned relationship). This approach offers a simple extension to an IFC schema and maintains backward compatibility with the exiting formats. Our proof-of-concept requires minimum changes to the xBim toolkit and BIMRL to be able to deal with the deferred references. Using this concept, BIM tools now can be modified to support consistent references when the models are split into smaller and more manageable sets of models without compromising the integrity of the relationship. The references allow for non-redundant objects and relationships, and maintain consistent and complete references to all the related objects in the original models, regardless the originating application. For example Revit may import a reference model produced by Tekla and create deferred references to objects in Tekla by using the GUIDs without the need to deal with the original data that is the responsibility of Tekla. This concept guarantees data consistency when the models are of the same revision, i.e. they are exported at the same time or exported when all data are in the same state. Problems may arise when some parts of the model are edited and exported without updates done to the other unchanged models. In this case, certain references may never be resolved and they become orphaned references. The impact however is minimum since the model is still consistent without error. At the same time this is a common issue not specific to our proposal, but generally to any merge operations in any field. For such cases, a semi-automatic process with the user input might be required to resolve conflicts or orphaned references. This is outside of the scope of this paper.

There are other issues that need to be addressed with federated models. The paper addresses one – a major one. This is the change propagation associated with relations among objects, captured with IfcRelationship. These may include IfcRelAggregate, IfcRelAssociates, IfcRelConnects and others. Others deal with parametric modelling where there are topological relations between spatially distributed building elements. Another issue is managing interface problems related to the boundary between two federated models. Many federated models are not spatially defined, but systems defined, where there is a piping system and a structural system in separate partial models and we want rule relationships to transfer between them. Thus this paper addresses one aspect of the Federated Model issue on the basis of supporting this path. Federated models and deferred propagation of changes is an area of high importance to the future of BIM. With this concept, change propagation may be implemented more easily and in a deferred mode. This could be a future research topic.

@&#REFERENCES@&#

