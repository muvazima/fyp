@&#MAIN-TITLE@&#Efficient decomposition of line drawings of connected manifolds without face identification

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Decomposes a complex drawing into its constituting simple manifolds.


                        
                        
                           
                           Does not require face information to achieve the task.


                        
                        
                           
                           Basic two stage strategy: basic decomposition and subsequent repair.


                        
                        
                           
                           Reduces the time for subsequent face finding and 3D reconstruction greatly.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

3D reconstruction

Decomposition

Internal face

Line drawing

Manifold

@&#ABSTRACT@&#


               
               
                  This paper presents an algorithm for decomposing complex line drawings which depict connected 3D manifolds into multiple simpler drawings of individual manifolds. The decomposition process has three stages: decomposition at non-manifold vertices, along non-manifold edges and across internal faces. Once non-manifold vertices and/or edges are found, the decomposition can be performed straightforwardly. Thus the major task in this paper is decomposition across internal faces. This has two steps: basic decomposition and repair of incomplete parts. The decomposition process is performed before face identification which is computationally expensive. After decomposition, the time for face finding is much reduced and this, in turn, greatly improves the process for 3D reconstruction, which is the ultimate goal.
               
            

@&#INTRODUCTION@&#

3D reconstruction from 2D line drawings has been an active research topic for decades. An early general 3D recovery method, the optimization-based method, was first proposed by Marill  [1], and improved by Leclerc and Fischler  [2], Lipson and Shpitalni  [3] and Liu et al.  [4]. This method can recover 3D objects true to human perception, but the performance is inconsistent, as the experiments of Lee and Fang  [5] show. Most algorithms have two major components: face finding and 3D recovery. There are a number of algorithms reported for face finding. The algorithms of Lipson and Shpitalni  [6], Liu and Lee  [7,8] and Liu and Tang  [9] have an exponential complexity over the number of input vertices, 
                        n
                     , while that of Varley and Company  [10] has a complexity of O(
                        
                           
                              n
                           
                           
                              5
                           
                        
                     ). Leong et al.  [11] developed a face finding algorithm that is an improvement over existing methods in general, but still has an exponential worst case complexity.

The complexity of the actual 3D recovery is O(
                        
                           
                              n
                           
                           
                              3
                           
                        
                     )  [3]. Lee and Fang  [12] proposed a different recovery method exploiting cubic corners, which are trihedral vertices with mutually perpendicular edges. The method also requires face finding, with the same accompanying time complexity, but its complexity for 3D recovery is linear over 
                        n
                     . Whether one uses the optimization-based method, the cubic corner method, or their hybrid  [5], it is clear that the lower the value of 
                        n
                     , the better the algorithms perform. If a drawing with 
                        n
                      vertices can be partitioned into 
                        m
                      components each with an average of 
                        n
                        /
                        m
                      vertices, then the overall complexity for face finding using the algorithm by Varley and Company would be 
                        
                           O
                        
                        
                           (
                           
                              
                                 m
                              
                              
                                 ∗
                              
                           
                           
                              
                                 
                                    (
                                    n
                                    /
                                    m
                                    )
                                 
                              
                              
                                 5
                              
                           
                           )
                        
                        =
                        
                           O
                        
                        
                           (
                           
                              
                                 n
                              
                              
                                 5
                              
                           
                           /
                           
                              
                                 m
                              
                              
                                 4
                              
                           
                           )
                        
                     , which is a lot lower. Hence, drawing partition is a useful preprocess to actual face finding and 3D object recovery provided, of course, it is sufficiently efficient itself.

This paper proposes a novel method for decomposing complex line drawings without requiring face information. It is important to note that vertices exist explicitly when edges in the same plane intersect and the decomposition is made at existing vertices and edges, without introducing any new ones.

We introduce here the special terms that appear in the rest of the paper. Fig. 1
                      shows the decomposition of a line drawing and illustrates some of the terms.


                     Manifold: A manifold is a solid where every point in its surface has a neighborhood topologically equivalent to an open disk in the 2D Euclidean space  [13].


                     Simple manifold: A simple manifold is a manifold that cannot be decomposed into simpler manifolds at existing vertices, along existing edges or across internal faces.


                     Complex manifold: A complex manifold is a manifold that can be decomposed into simpler manifolds at existing vertices, along existing edges or across internal faces.


                     Degree of vertex: The degree of a vertex is the number of edges meeting at the vertex.


                     Rank of edge: The rank of an edge is the number of faces sharing the edge.


                     Non-manifold vertex: A non-manifold vertex is a vertex where a non-manifold can be decomposed to produce multiple simpler manifolds.


                     Non-manifold edge: A non-manifold edge is an edge along which a non-manifold can be decomposed to produce multiple simpler manifolds.


                     Internal face: An internal face could be thought of as the face formed by gluing two faces of two manifolds together to form one manifold, and is thus internal to the combined manifold and is not a true face.


                     Isolated vertex: A vertex that belongs to only one simple manifold after the decomposition of a complex manifold.


                     Complete part: A complete part is a decomposed part that contains vertices with degree 3 or more.


                     Incomplete part: An incomplete part is a decomposed part that contains vertices with degree 2 or less.

The decomposition of a complex manifold or non-manifold must result in a collection of simpler manifolds and, in the best case, a collection of simple manifolds. There should not be any dangling edges containing vertices with degree 1 or faces containing vertices with degree 2. This is a condition that we use to check for the correctness of the decomposition, because a drawing with all its vertices having degree 3 or more can be considered as a manifold topologically  [14,11].

@&#RELATED WORK@&#

There are four works in the literature on the partition of line drawings. Sun and Lee  [14] analyzed the topology of a line drawing that may contain manifold and non-manifold entities. Manifolds may be joined at vertices or edges to form non-manifolds. Sun and Lee provided algorithms to determine the existence of such non-manifolds without actually partitioning them into simpler manifolds. Manifolds may be joined at faces, either fully or partly, resulting in internal faces. They also defined an internal face as a face with all its edges ranked higher than 2, and proposed that a line drawing may be decomposed along an internal face. But their definition is not complete; for example, the internal face 
                        
                           
                              f
                           
                           
                              1
                           
                        
                      in Fig. 1(a) will not be identified by their definition.

Chen et al.  [15] proposed a divide-and-conquer method to recover 3D objects from line drawings. This method first decomposes a complex line drawing into multiple simple manifolds by using internal faces, which are identified in the face finding process. The decomposition of a manifold across an internal face produces two simpler manifolds. The decomposed line drawings are then recovered separately and the results are merged together to form the complete object depicted in the original line drawing. This method can handle complex objects more efficiently than other known methods. Even though the computation time for 3D reconstruction is much reduced in  [15], face finding is still required, with its ensuing high computational cost.

Liu et al. proposed several properties that are used to identify an internal face in a line drawing  [16]. The line drawing can be decomposed easily across the internal faces once they are identified. Xue et al.  [17] proposed that a complex line drawing can be decomposed across “cuts”. A cut is a planar cycle consisting of some edges of the line drawing and/or new edges. An internal face is a special case of a cut.

These two decomposition methods require knowing the faces beforehand. Therefore, the partitioning can reduce the time for 3D reconstruction but not for face finding, since the decomposition requires the faces to be found first.

In this paper, we further the work in  [14] by providing improved algorithms for line drawing decomposing at non-manifold vertices and edges. The authors of  [14] proposed that not only a complex manifold can be decomposed into multiple simple manifolds, but also a non-manifold can be divided into simple manifolds and dangling entities. In our paper, we focus only on the decomposition of line drawings of complex manifolds and non-manifolds formed by manifolds joined together. This is because the identification and removal of dangling edges and faces can be done straightforwardly, as Sun and Lee reported  [14].

We also decompose a line drawing of manifolds across internal faces to obtain multiple drawings of simpler manifolds, all directly from the line drawing itself without finding faces first.

The inputs are line drawings which represent the projections of the wireframes of planar 3D objects in a generic view, in which all the edges and vertices are visible, no edges overlap and no edge is projected into a point.

There may be non-manifolds connected at a vertex or an edge, or a manifold connected at a face, as shown in Fig. 2
                     . When the connection is at a vertex, the vertex is a non-manifold vertex, and has a degree of at least 6  [14]. When the connection is at an edge, the edge is a non-manifold edge, and each of its end vertices normally has a degree of at least 5  [14]. In the special situation when the non-manifold edge is collinear with another incident edge, an end vertex may have degree 4. When the connection is at a face, the face is called internal face  [16].

The decomposition aims to produce a collection of simple manifolds, and the process has three stages according to the type of connection: decomposition at non-manifold vertices, non-manifold edges and internal faces. These stages are carried out sequentially. The decomposition here is along existing vertices and edges; it does not create or delete either. Therefore, the vertices and edges in each separated component are inherited from the original line drawing.

In our system, the input consists of a vertex adjacency matrix, which indicates which two vertices have an edge connecting them, and an edge connectivity list showing the list of edges connect to a given vertex. The latter can be derived from the former but is stored explicitly for computational efficiency.

Any vertex of degree 6 or greater is a potential non-manifold vertex (NMV). In our method, decomposing a line drawing at a NMV requires finding all the adjacent vertices of the NMV, which can be inferred from the edge connectivity list. For example, Vertex 0 in Fig. 3
                         is a NMV, and it has six adjacent vertices, 1, 3, 7, 8, 12 and 14. A drawing may have multiple NMVs; all of them are detected and stored in a set which we call U.

Vertices belonging to one manifold must have a connecting path that does not pass through any vertex in U. Hence, in Fig. 3, Vertices 11 and 14 belong to the same manifold because there exists a path, such as 11–8–9–14, connecting them without containing Vertex 0, the NMV. Conversely, Vertices 3 and 14 belong to two different manifolds because every path that connects them contains Vertex 0. Hence, to form a manifold, the algorithm simply goes round collecting vertices that are connected without going through any vertex in U. It does so until all the vertices have been collected into individual manifolds. The process is summarized in the NMV Algorithm below, in which a vertex is said to be open if the edges connected to it have not been traversed. It requires the NMV and the list of vertices directly adjacent to the NMV as input.


                        NMV Algorithm: Decomposition at a non-manifold vertex
                     


                        
                           
                              1.
                              
                                 Let
                                 
                                    s
                                 
                                 be an empty set
                              


                                 Put one adjacent vertex of the NMV into
                                 
                                    s
                                 
                              


                                 For every open vertex in
                                 
                                    s
                                 
                              


                                 
                                 For every edge connected to this vertex
                              


                                 
                                 If the other endpoint of the edge is not
                                 in U and does not exist
                                 in
                                 
                                    s
                                 
                                 , store the endpoint in
                                 
                                    s
                                 
                              


                                 
                                 End For
                              


                                 End For
                              


                                 Add to
                                 
                                    s
                                 
                                 the NMV and other vertices in U with one or more adjacent vertices already in
                                 
                                    s
                                 
                              


                                 Store the vertices in
                                 
                                    s
                                 
                                 as a separate manifold
                              


                                 While the number of unused adjacent vertices of the NMV is not 0


                                 
                                 Move to the next unused adjacent vertex
                              


                                 
                                 If this vertex does not belong to an existing manifold
                              


                                 
                                 Empty
                                 
                                    s
                                 
                              


                                 
                                 Put this vertex in
                                 
                                    s
                                 
                                 and go to step 3


                                 
                                 End If
                              


                                 End While
                              

This algorithm will visit every potential NMV, i.e. a vertex with degree 6 or greater, and return separate manifolds with all their vertices. If the NMV is a manifold vertex, then a single component is returned, except for a special case dealt with in Section  3.4. Take as an example the line drawing in Fig. 3, where Vertex 0 is a NMV. First, one adjacent vertex (Vertex 1 say) of the NMV is put into an empty set 
                           s
                        . Then we search for the endpoint of each adjacent edge; Vertices 2 and 6 are found and added to 
                           s
                        . These two vertices then bring in Vertices 3, 5, 7, and 4. After that, no more vertices can be added to 
                           s
                        . Finally, the NMV is added to 
                           s
                         to complete the decomposition of one simpler manifold.

The next step is to reorganize the structure and contents of the vertex adjacency matrix and the edge connectivity list. For the object in Fig. 3, instead of one matrix and one list, there are now two each, for the two simpler manifolds. Their contents are simply inherited from the values in the original. This reorganization process also needs to take place after decomposing a part along non-manifold edge and across an internal face.

Since the NMV Algorithm visits every vertex only once, its complexity is O(
                           n
                        ), where 
                           n
                         is the number of vertices. Upon exit from the algorithm, a component may contain other NMVs. It is then necessary to apply the algorithm again to each component, until every NMV is processed. Hence, the overall algorithm complexity is the sum of the complexities in applying the algorithm, each time with a smaller 
                           n
                        . In the worst case, all the vertices are potentially NMVs, giving a complexity of O(
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                        ). On average, we can expect 
                           n
                         to be halved each time, and then the overall complexity would be O(
                           n
                           +
                           n
                           /
                           2
                           +
                           n
                           /
                           4
                           +
                           ⋯
                        ) which tends to O(
                           n
                           log
                           n
                        ). But in reality, the situation is usually better than that. Fig. 4
                         shows three examples of decomposition at non-manifold vertices.

This algorithm differs from that of Sun and Lee  [14] where the task was merely to identify the existence of a non-manifold vertex. Their work was done by checking whether all the vertices immediately adjacent to the NMV can be joined by one single loop of edges, in which case, it is a manifold vertex. Their algorithm cannot be used for decomposition because it does not reach out to the vertices beyond those immediately adjacent to the NMV.

A non-manifold edge (NME) is identified by having both its end vertices to be of degree 4 or higher. At a vertex where the degree is 4, the NME has to be collinear with one other incident edge as well. Decomposition along a NME is similar to decomposition at a NMV. We also need to find all the vertices adjacent to the two endpoints of a NME. For example, in Fig. 5
                        , the NME is marked with a bold line and its adjacent vertices are marked with circles.

The basic idea for this decomposition is similar to that of the NMV Algorithm: vertices are in the same manifold if there exists a path connecting them that do not contain a vertex of any NME. We refrain from listing this NME Algorithm as it is identical to the NMV Algorithm; instead of putting NMVs in the set U, we now put the end vertices of the NMEs.

Again, the complexity of the algorithm is O(
                           n
                        ), since it visits each of the 
                           n
                         vertices only once. Also, this algorithm is different from its counterpart in  [14], because the latter again only verifies the existence of a NME by visiting the vertices immediately adjacent to the NME without attempting partition. Fig. 6
                         shows three examples of decomposition along non-manifold edges.

For drawings with a mixture of NMVs and NMEs, we apply the NMV and NME algorithms in sequence, simply by first putting all the NMVs into the set U and invoke the NMV algorithm, and then putting the end vertices of the NMEs into U and invoke the NME algorithm.

To perform decomposition across internal faces, the methods of Chen et al. [15] and Liu et al.  [16] require the detection of the internal faces, for which it needs to find all the faces first. As explained earlier, face finding is not a trivial problem, and is best avoided.

An internal face is generated by gluing two real faces, say 
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                         and 
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                        , together  [16]. Internal faces can be divided into two types: (1) 
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                         and 
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                         do not share vertices, (2) 
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                         and 
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                         share some or all vertices.

The internal face of the drawing in Fig. 7
                        (a) belongs to Type 1; the two face loops (with edges in bold) are coplanar but in two disjoint graphs. To indicate coplanarity between two disjoint faces requires additional information from the user. It is also possible to have only one edge-vertex graph that contains coplanar face loops. In Fig. 7(b), the two faces share their edges completely. In Fig. 7(c), the two faces share their edges partially. In Fig. 7(d), the two faces share no edges but two common vertices.


                        Fig. 7(c) has the complication of two different ways to define the overlapping edges. The short edges ab and ad must exist for the bottom face of the top block. But for the bottom block, there are two ways to define the two edges ac and ae, either as single edges ac and ae, or connected edges abc and ade, with mid vertices 
                           b
                         and 
                           d
                         respectively. Both situations produce valid drawings. In the former case, the two blocks share only Vertex 
                           a
                        , which is the common corner vertex. This reduces the situation to two blocks connecting at a non-manifold vertex, and the NMV algorithm applies. If only one of ac and ae has a mid vertex, then it is a case of non-manifold edge, and is dealt with by the NME algorithm. If both edges have a mid vertex, then an internal face exists and it is the subject of this section.

Decomposition of Type 1 is trivial, as the groups of vertices are already disjoint. In this paper, we focus on the decomposition of Type 2, formed by gluing two real faces completely or partially.

In the rest of this paper, for convenience of expression, a vertex with degree larger than 3 is called LV (L for larger and V for vertex); a vertex with degree less than 3 is called IV (for incomplete vertex). An IV is the result of an earlier decomposition when it produces manifold and non-manifold components. How this comes about will be explained in Section  3.3.2. A decomposed part containing an IV is not a manifold, and is thus an incomplete part. One that contains no IV is a manifold, a complete part.

Decomposition across internal faces is much more difficult than at non-manifold vertices or edges because, unlike a vertex or edge, a face is not directly available in a line drawing. We do not have face information, let alone internal faces.

Our strategy to decompose across an internal face is to decompose at vertices on the boundary of the internal face. There are two stages: basic decomposition and repair for incomplete parts. Not all drawings require both the stages; after the basic decomposition, there might be no incomplete part and hence repair is not required.

After finishing decomposition at non-manifold vertices and/or edges, what remain are separate drawings of manifolds, which may be complex manifolds formed by a combination of simple manifolds. The next step then is to decompose these complex manifolds into the constituting simple manifolds. Recall that the decomposition needs to be done along existing edges and vertices. We note that a decomposition may be non-unique, but for now, we will simply be seeking a legitimate decomposition and address the non-uniqueness issue later.

The decomposition strategy is to remove a simple manifold or a part thereof from the drawing at a time. The process is repeated until the remaining drawing belongs to only one simple manifold. Hence decomposition involves collecting all the vertices that belong to one simple manifold into a set, together with their connecting edges. We start by stating four properties which form the basis of our decomposition algorithm:
                              Property 1
                              
                                 A trihedral vertex belongs to only one simple manifold   [18]
                                 .
                              

This is true except when two simple manifolds join at two overlapping faces that do not share their edges completely. Such a vertex appears in Fig. 7(c) and (d) as a vertex of one face in the middle of the overlapping face. But they would belong to only one simple manifold upon decomposition.


                           
                              Property 2
                              
                                 A vertex connected to another vertex known to belong to only one simple manifold must belong to the same simple manifold.
                              

If a vertex belongs to only one simple manifold, all the edges connected to it must belong to that simple manifold, which means all the vertices at the other ends of those edges must belong to the same manifold.


                           
                              Property 3
                              
                                 As a partition must be made along existing edges, these edges must form a loop. Such a loop bounds an internal face, which may be planar or non-planar.
                              


                           
                              Property 4
                              
                                 A vertex of degree  4  or greater (an LV) may belong to an internal face and may therefore border two simple manifolds.
                              

Our method to collect all the vertices that belong to the same simple manifold is summarized in the Simple Manifold Algorithm.


                           Simple Manifold Algorithm: Forming of a Simple Manifold
                        


                           
                              
                                 1.
                                 
                                    Start with a vertex (call it start vertex) belonging to only one simple manifold
                                 


                                    Add it and all its adjacent vertices to an empty set (Property 2)


                                    For each vertex in the set
                                 


                                    
                                    If its degree is 3 or less
                                 


                                    
                                    Add its neighboring vertices to the set as they must belong to
                                    the same simple manifold (Property 2 again)


                                    
                                    Else the neighbors are not added to the set, which means
                                    disconnection occurs at the vertex
                                 


                                    When no more vertices can be added to the set, the part containing the vertices already added is decomposed from the original line drawing
                                 

This method may produce a part that is not a complete manifold. An LV may or may not belong to more than one simple manifold. Not knowing which the case is, we therefore do not collect the vertices connected to an LV. This means that decomposition may happen at an LV belonging to only one simple manifold. This LV then ends up in two decomposed parts. Vertex 
                              a
                            in Fig. 8
                           (a) is an example; it is an LV belonging to only one simple manifold. If we decompose the top part first, decomposition across it leads to two parts shown in Fig. 8(b) and (c). Both parts contain IVs, therefore, they are incomplete. So, the existence of an LV belonging to only one simple manifold will result in an incomplete part.

There are two situations by which incomplete parts may be formed; we call the above Situation 1. Situation 2 is more complex; it arises when the face at the decomposition of a part is not a single but multiple connected internal faces. For example, decomposing the top part of the drawing in Fig. 8(d) will result in the incomplete top part shown in Fig. 8(e) because there is no direct (i.e. single edge) connection between the two end points marked by circles and the two marked by squares due to the intervening vertices marked by dots. Incomplete parts can be repaired; this will be discussed in the next section.

The basic decomposition has three steps: start vertex picking, vertex adding and result confirmation.


                           Start vertex picking: a start vertex should belong to a single simple manifold only, which is the case for vertices of degree 3 or lower. This can be ensured by making the start vertex a vertex of the lowest degree in the current drawing. When both trihedral vertices and IVs are present, an IV has a higher priority because parts containing IVs have dangling components which need to be decomposed from the remaining drawing first. In the case where all the vertices in the remaining drawing are LVs, we stop decomposing, unless there are such LVs (for example, isolated vertices which will be introduced later) that we know must belong to one simple manifold only.


                           Vertex adding: here we collect the vertices which belong to the same simple manifold as the start vertex into a set, which we shall call S1. For this we use Property 2. As noted earlier, collection stops at an LV. After adding all the qualified vertices to S1, we put those vertices in the original line drawing but not in S1 in another empty set, S2. An LV that has been added to S1 may also belong to other manifolds. So if an LV has at least one of its adjacent vertices in S2, it is added to S2 also. After that, the original line drawing has been decomposed into two simpler parts.


                           Result confirmation: the two simpler parts are S1 and S2. S1, by the very nature of the decomposition, is either a simple manifold or a part of one and does not require further decomposition, but S2 may. The edges between the vertices in S1 and S2 are inherited from the original drawing. The degree of each vertex can thus be computed.

Let 
                              C
                            be the current drawing we are decomposing; it may have zero or more decompositions before it. 
                              C
                            may contain multiple vertices of the lowest degree which can serve as the start vertex, and different start vertices may result in different decomposed parts. We prefer to have S1 as a complete simple manifold, as this reduces the subsequent repair.

If the start vertex is an IV, 
                              S
                           1 must be incomplete since it contains the start vertex. We then proceed immediately to decompose 
                              S
                           2 if it needs further decomposition.

If all the available start vertices of 
                              C
                            are trihedral, we can only arbitrarily pick one of them as the start vertex. At the end of the decomposition, if there is no IV in S1, then S1 is saved as a complete simple manifold, and we proceed to decompose S2. As mentioned earlier, we prefer to have 
                              S
                           1 as a complete simple manifold, but different start vertices may result in different decomposed parts, some of which may be incomplete. Therefore, if there are IVs in S1, we go back to try to decompose 
                              C
                            by picking another start vertex that has not been used in the previous tries. The attempt is repeated until there is no IV in S1 or there is no more start vertex available.

Meanwhile, we save the decomposition result of each attempt. If S1 still contains an IV after trying all the start vertices available, then we keep the result of one of the attempts which meet the following requirement: the combination of the current decomposition result and the part decomposed immediately before 
                              C
                            contains the least number of IVs. This ensures that when no more complete part can be decomposed from 
                              C
                           , those incomplete parts that belong to the same simple manifold are most likely to be from successive decompositions. This is because, in general, the combination of two parts that belong to the same simple manifold is more likely to be complete than two parts that do not. If the current decomposed part is the very first, in other words, 
                              C
                            is the original drawing, we keep the decomposition result of any one attempt since there is no part decomposed before 
                              C
                           . Then, move to the next decomposition.

In short, the basic strategy of this step is, if there are multiple parts that can be decomposed from the current drawing, we should attempt to decompose a complete simple manifold first. If we have to decompose an incomplete part, the decomposition should produce as few IVs as possible.

Upon the completion of a decomposition, the part in S1 does not need further decomposition because it must be a simple manifold or is incomplete. The part in S2 is a simpler drawing than the original; we only need to further decompose this part by repeating the process.

Here, we use the example in Fig. 9
                            to illustrate how the basic decomposition is done. We are interested only in the topology of the object and not the geometry.

We pick a trihedral vertex as the first start vertex as they are vertices of the lowest degree in the drawing; there are ten such vertices and we can pick anyone of them. Assume that we pick Vertex 0. Then in the vertex adding step, we add it and all its adjacent vertices to an empty set S1, as they must belong to the same simple manifold, 
                              S
                           . Now, vertices 0, 1, 3 and 7 are in S1. Then, we further add to S1all the vertices that must belong to 
                              S
                           . This means there are now eight vertices in S1: 0, 1, 2, 3, 4, 5, 6 and 7 (see Property 2). No more vertices can be added because vertices 4, 5, 6 and 7 are LVs. Then, we put the vertices in the original line drawing but not in S1 into another empty set S2. Check each LV that has been added to S1; add it to S2 if at least one of its adjacent vertices is in S2. So, S2 contains 12 vertices: 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 and 15. Note that the edge existing between two vertices in a set follows the vertices into the set. Then, we check that the two decomposed parts as shown in Fig. 10
                           (a) are manifolds; both are simpler than the original line drawing. We then proceed to further decompose the drawing in S2.

Alternatively, if we pick Vertex 8 as the start vertex, we would obtain the two parts as shown in Fig. 10(b); one contains vertices 4, 7, 8, 9, 10, and 11, the other contains vertices 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14 and 15. In the first part, there are four IVs: vertices 4, 7, 9 and 10. Since this decomposition results in IVs, we would try other start vertices and redo the decomposition. In this example, after changing to another initial vertex, such as 0 or 1, the original line drawing can be decomposed into two simpler manifolds.

Although most objects contain trihedral vertices, there are some which have none; for example, the objects in Fig. 11
                           (a) and (b). Such objects may contain LVs that belong to only one simple manifold. But these LVs cannot be differentiated from the LVs that are on internal faces. But there are two properties we can exploit to detect some of the LVs belonging only to one simple manifold.


                           
                              Property 5
                              
                                 If the edges connecting the LVs (must be LV, because only an LV may belong to multiple simple manifolds) adjacent to a vertex form a loop, then the vertex is isolated. The vertex and all its adjacent vertices can be decomposed as a simple manifold.
                              


                           
                              Property 6
                              
                                 If the edges connecting the LVs (also must be LVs) adjacent to an edge form a loop, then the edge is isolated. The edge and all its adjacent vertices can be decomposed as a simple manifold.
                              

For example, the top and bottom vertices in Fig. 11(a) as well as the top and bottom edges in Fig. 11(b) possess such properties. Such vertices and edges are said to be isolated because they are isolated from other parts by the loop formed by the edges connecting their adjacent vertices. In addition, the loop formed by the edges connecting the adjacent vertices of an isolated vertex or edge does not have to lie on a plane; i.e., it may self-intersect (such as the top bold loop in Fig. 11(a)). Vertex 
                              i
                            in Fig. 11(c) is not an isolated vertex because, among its adjacent vertices, there are two vertices (marked by circles) with degree 3. To perform a basic decomposition, we need to find isolated entities first and decompose them and all their adjacent vertices from the current drawing.

The basic decomposition algorithm is summarized in the Internal Face Algorithm.


                           Internal Face Algorithm: Decomposition across internal face
                        

The current line drawing is stored in a set 
                              C
                           .


                           
                              
                                 1.
                                 
                                    Find an isolated entity in C and decompose it with all its adjacent vertices as a simple manifold; repeat this step until no more isolated entity exists in C
                                 


                                    Execute the Simple Manifold Algorithm to decompose a simple manifold, all qualified vertices are stored in set S1
                                 


                                    Save vertices in C but not in S1 to another empty set S2
                                 


                                    For each LV in S1, if at least one of its adjacent vertices is in S2, add it to S2
                                 


                                    If the start vertex is trihedral, keep the decomposition results according to the results confirmation step
                                 


                                    Save vertices in S1 as a decomposed part and clear S1
                                 


                                    Replace vertices in C with vertices in S2, and clear S2
                                 


                                    Compute the degree for each vertex in C and obtain the edges between the vertices
                                 


                                    If there is no more LV in C, stop the decomposition
                                 


                                    Else go to Step 1

If all the LVs in a line drawing are on internal faces and the decomposition is across a single internal face, then the drawing can be decomposed into multiple simpler drawings of manifolds completely after the basic decomposition. Two examples of such line drawings are shown in Fig. 12
                           .

In decomposing a part, the algorithm only visits each decomposed vertex once. The complexity of each decomposition attempt would therefore be O(
                              n
                           ), where 
                              n
                            is the number of vertices decomposed. But there may be multiple choices for the start vertex, say 
                              m
                            of them, and in the worst case, everyone is tried in obtaining the desired result. The number of visits to vertices is therefore 
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 
                                    m
                                 
                              
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                           , where 
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                            is the number of vertices visited at the 
                              i
                           th attempt. If there are 
                              k
                            simple manifolds to be decomposed, then the total number of vertices visited is 
                              
                                 
                                    ∑
                                 
                                 
                                    j
                                    =
                                    1
                                 
                                 
                                    k
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 
                                    
                                       
                                          m
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                           , where 
                              
                                 
                                    m
                                 
                                 
                                    j
                                 
                              
                            is the number of available start vertices for the 
                              j
                           th simple manifold. If 
                              m
                            and 
                              n
                            have similar values for every decomposition, then the worst case complexity is simply O(kmn).

Recall that, besides drawings that contain dangling edges and faces, an incomplete part may arise in two situations: (1) the drawing contains LVs which are not on internal faces; (2) decomposition takes place across a series of connected faces. Incomplete parts need to be repaired to form manifolds.

Note that although both situations will result in incomplete parts, only the first one may result in an IV in the remaining drawing, as Fig. 8 illustrates. Given an incomplete part, we perform a step which we call P1.


                           Step  P1: If the incomplete part resulted from an IV as the start vertex, combine it with its immediately previous decomposed part and save the combination as a new part.

An IV as the start vertex means that disconnection happened at an LV belonging to only one simple manifold during the decomposition of the immediately previous part. The adjacent vertices of the IV in the remaining drawing were adjacent to the LV in the original drawing. Therefore, the part that takes the IV as the start vertex should share the same simple manifold with the immediately previous decomposed part. Remember that IVs have the highest priority to be selected as the start vertex during basic decomposition. Therefore, these two parts that share the same simple manifold are decomposed successively.

Take the line drawing in Fig. 13
                           (a) as an example. The top part contains an LV, Vertex 
                              a
                           , that does not lie on an internal face. If the part was decomposed first, the decomposed part and the remaining part would be as shown in Fig. 13(b) and (c) respectively. There is an IV (marked with a black dot) in the remaining part in Fig. 13(c). This IV has the highest priority as the next start vertex, resulting in the triangle in Fig. 13(d) to be decomposed from the remaining drawing. Step P1 combines the part in Fig. 13(d) with the part in Fig. 13(b) to form the new part shown in Fig. 13(e). Note that the two edges in the base missing in Fig. 13(b) and (e) are brought back automatically into the part in 13(e) because their end vertices are brought into the same part.

After executing Step P1, one thing can be guaranteed: the last decomposed part must be complete. This can be proved by contradiction. Assume that the last decomposed part is incomplete, which means that there is an IV in the remaining drawing after decomposing the second last part. Then, the start vertex of the last decomposed part must be an IV. Therefore, the last part will be combined with the second last part to form a new part according to Step P1. Then, the new part will be the last part. Once the start vertex of an incomplete part is detected as an IV, the incomplete part will be combined with its immediately previous decomposed part. For the last decomposed part, its IVs only result from the decomposition between it and its previous decomposed parts. Therefore, the last decomposed part must be complete after executing Step P1.

If all the decomposed parts are simple manifolds after the basic decomposition, we save them and the decomposition is complete. If incomplete parts exist, then we perform Step P1. If there still exist incomplete parts after that, we save only the last part as a simple manifold and combine all the other parts into a new part, part 
                              N
                           . 
                              N
                            is simpler than the original drawing. Then perform Step P2.


                           Step  P2: Execute the basic decomposition on 
                              N
                           , then perform Step P1 on all its decomposed parts.

Every time we perform Step P2, we can decompose a simple manifold, the last decomposed part, from the drawing. Therefore, the drawing will become simpler and simpler by repeating Step P2, until part 
                              N
                            cannot be decomposed further.

Take the drawing in Fig. 14
                           (a) as an example; it is to be decomposed into two simple manifolds shown in Fig. 14(b). If the top part is decomposed first, the basic decomposition would produce three incomplete parts, as shown in Fig. 14(c). Then the bottom part can be decomposed completely. Assume that the three incomplete parts in Fig. 14(c) are decomposed in the order of top to bottom. After executing Step P1, those incomplete parts still exist. Therefore, we save the last (bottom) part as a simple manifold and combine the other three into a new drawing, to perform the basic decomposition on it. But this new part is in fact complete and cannot be decomposed further. Hence, we save it as a simple manifold. So, the original drawing is decomposed into two simple manifolds, as shown in Fig. 14(b).

The incomplete parts produced by the basic decomposition and those produced by Step P1 have the same structure. Therefore, Step P2 can repair all incomplete parts resulting from both the situations we mentioned earlier.

There is a possibility that part N is incomplete. The drawing in Fig. 15
                           (a) is such an example. In the basic decomposition, the trihedral vertex marked with a black dot can be used to start the decomposition, and the drawing would be decomposed into two parts, as shown in Fig. 15(b) and (c). The part in Fig. 15(c) is the last one, and it is complete, since all its vertices are of degree 3 or higher. Although the part contains an LV, it cannot be decomposed further. Hence, we save it as a simple manifold. The part 
                              N
                            in Fig. 15(b) is incomplete. Therefore, we cannot save it as a simple manifold. In this case, we perform Step P3.


                           Step  P3: Combine the part 
                              N
                            with simple manifolds that share vertices which are IVs in 
                              N
                            until there is no IV in 
                              N
                           .

The combination will be saved as a simple manifold and those simple manifolds that have been combined with 
                              N
                            will be deleted. So, for the drawing in Fig. 15(a), finally, we get only one simple manifold which is the same as the original drawing. This example illustrates the situation that a drawing may not be decomposable, but we have to perform the algorithm in order to ascertain that, wasting a little time in the process.

The full algorithm is summarized thus:


                           The Full Algorithm: Decompose and Repair
                        


                           
                              
                                 1.
                                 
                                    Perform the basic decomposition
                                 


                                    Check all decomposed parts
                                 


                                    If there is no incomplete part
                                 


                                    
                                    Save all parts as simple manifolds and finish.
                                 


                                    Else
                                 


                                    
                                    Perform Step P1


                                    
                                    Save the last decomposed part as simple manifold
                                 


                                    
                                    Combine all parts except decomposed simple manifolds into a
                                    new drawing, N
                                 


                                    
                                    If N can be decomposed further
                                 


                                    
                                    Perform Step P2, clear N and go to step 7


                                    
                                    If N is complete
                                 


                                    
                                    Save it as a simple manifold
                                 


                                    
                                    Else
                                 


                                    
                                    Perform Step P3

A special situation arises when manifold vertices of degree 6 or higher in a drawing form a loop that encloses an internal face. Partition occurs when this drawing is processed by the NMV Algorithm, even though there are no non-manifold vertices. That is because vertices of degree 6 or higher are assumed to be non-manifold vertices initially. In such a situation, the NMV Algorithm actually performs the task of the Internal Face Algorithm, and decomposes the object across the internal face.


                        Fig. 16
                        (a) shows an example of a manifold object with eight degree-6 vertices that form six internal faces. None of the vertices are non-manifold. But because they are of degree 6, they are taken as non-manifold vertices and the NMV Algorithm is invoked first. Normally there is no decomposition at a degree-6 vertex that is not non-manifold. But in this case, because sets of four such vertices form loops of internal faces that separate one simple manifold from another, the NMV Algorithm decomposes one simple manifold upon the first application. Assume that the simple manifold connected to the loop abcda is decomposed, the remaining drawing still contains four vertices of degree 6, 
                           e
                        , 
                           f
                           ,
                           g
                         and 
                           h
                        . So the NMV Algorithm is applied again, and this time the simple manifold connected to loop efghe is decomposed. The result is shown in Fig. 16(b), with the cross remaining to be decomposed further. This cross has eight vertices of degree 5. So the algorithm for NME is invoked, even though the object contains no non-manifold edge. As in the case of degree-6 vertices, this algorithm is applied twice, and Fig. 16(c) shows the outcome, with the two decompositions across loops abfea and dcghd. The remaining bar with eight vertices of degree 4 is then decomposed using the Internal Face Algorithm to produce the final decomposition shown in Fig. 16(d).

The whole drawing is therefore decomposed correctly, even though both the NMV and NME algorithms are employed on manifolds. This special situation of high degree vertices forming loops of internal faces is the only one where the two non-manifold algorithms perform decomposition on manifold objects, with correct outcomes.

@&#RESULTS@&#

We implemented the algorithm on a PC with Intel Core™ 2 Duo CPU E6750 @ 2.66 GHz in C++. Fig. 17
                      shows a set of test objects successfully decomposed into simple manifolds.

These examples all depict 3D objects. Some, such as Fig. 17(g) and (h), depict objects with what we humans would perceive as holes. But they could be solids also. Our method returns them all as solids because, without further inputs, we cannot decide on one or the other. Fig. 17(i) is a more complex drawing exhibiting the special situation discussed in Section  3.4; the decomposition is done correctly.

To show that decomposition will significantly reduce the computational time for the subsequent face finding process, we use an example first used in  [16] (Fig. 18
                     ) to compare the time consumed for a line drawing for two processes: (1) decomposition first, followed by face finding and (2) direct face finding without decomposition.

In Table 1
                     , the first column shows the time consumed for decomposing the line drawings in Fig. 18. The second column shows the computation time for face finding after decomposition, where the face finding algorithm is that of Liu and Lee  [7]. The last column shows the time for finding the internal faces by Liu et al.  [16]; the times for the full face finding must be larger than those shown in the column, because internal faces usually constitute a small proportion of all the faces. Their face finding algorithm is that of Liu and Tang  [9].


                     Table 1 shows that our method is much more efficient than that of  [16]. Also, it will result in simpler and more reliable face finding and 3D recovery, as these processes have high complexity over the number of vertices in the drawing.

Earlier, we mentioned the non-uniqueness issue in decomposing across internal faces, resulting in multiple solutions in internal face (planar or non-planar) identification. Fig. 19
                     (a) shows an example. The object has three internal faces, as shown in bold in Fig. 19(b)–(d). Therefore, there are three options to decompose the object, which bring about three sets of simpler manifolds and all of them are correct. In this case, our method is able to return every of the three decompositions; which one is delivered depends on the start vertex. Vertex 
                        i
                        ,
                        j
                      or 
                        k
                      as the start vertex give the results shown in Fig. 19(b)–(d) respectively.

@&#CONCLUSION@&#

This paper presents a novel method to decompose line drawings depicting complex manifolds or non-manifolds into ones of simple manifolds, directly without face finding. Our method performs decomposition at non-manifold vertices and/or edges and across internal faces successively if necessary. Decomposition along non-manifold vertices and edges are relatively simple. But decomposition across internal faces is not, since we do not have face information. The method for decomposition across internal faces has two stages: basic decomposition to collect edges and vertices that must belong to the same simple manifold, followed by repair, which returns incomplete decomposed parts as correct complete manifolds. A complex line drawing may not be decomposable into simple manifolds, but if it can be, then the decomposed entities must be manifolds simpler than the original line drawing.

Finding the faces of a complex manifold in a line drawing has high computational complexity. By decomposing the drawing into a collection of drawings of simple or simpler manifolds would reduce the computational cost greatly. The crux of the matter lies in the fact that our algorithm for decomposition is very efficient. Its cost is therefore small, and in general is a lot less than the savings that can be achieved in face finding. Furthermore, the downstream process of 3D object recovery benefits greatly too from the decomposition. In the worst case, when the decomposition process results in no decomposition, which means that there is no saving in face finding or 3D recovery, this additional cost is so small that it would not unduly affect the overall performance.

@&#ACKNOWLEDGMENTS@&#

We wish to thank the reviewers of the paper for their incisive comments which resulted in a much improved paper. One of the reviewers provided the third examples in Figs. 4 and 6, and also Figs. 16(a) and 17(i). In particular, the special case in Section  3.4 emerged from this reviewer’s comments.

@&#REFERENCES@&#

