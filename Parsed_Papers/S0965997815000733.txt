@&#MAIN-TITLE@&#Real-time finite element structural analysis in augmented reality

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           An integrated platform for performing real-time FEA simulations in AR.


                        
                        
                           
                           AR visualization of FEA solutions and a tangible interface for enhanced data exploration.


                        
                        
                           
                           AR-assisted configuration of wireless sensor network to acquire loads onsite for FEA.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Real-time finite element analysis

Augmented reality

Scientific visualization

Wireless sensor network

Enhanced data exploration

Structural analysis

@&#ABSTRACT@&#


               
               
                  Conventional finite element analysis (FEA) is usually carried out in offsite and virtual environments, i.e., computer-generated graphics, which does not promote a user’s perception and interaction, and limits its applications. With the purpose of enhancing structural analysis with augmented reality (AR) technologies, the paper presents a system which integrates sensor measurement and real-time FEA simulation into an AR-based environment. By incorporating scientific visualization technologies, this system superimposes FEA results directly on real-world objects, and provides intuitive interfaces for enhanced data exploration. A wireless sensor network has been integrated into the system to acquire spatially distributed loads, and a method to register the sensors onsite has been developed. Real-time FEA methods are employed to generate fast solutions in response to load variations. As a case study, this system is applied to monitor the stresses of a step ladder under actual loading conditions. The relationships among accuracy, mesh resolution and frame rate are investigated.
               
            

@&#INTRODUCTION@&#

Numerical simulation has been widely conducted by engineers to analyze and predict the behavior of real-world physical systems. As a versatile tool, finite element analysis (FEA) has been implemented in various fields of engineering, such as structural mechanics, electromagnetics, heat and fluid flow. Nowadays, almost all practical FEA studies are completed with the help of computers and professional software, such as ANSYS, Abaqus and COMSOL. Benefitted by the well-developed computational techniques, such as automatic mesh generation and scientific visualization, engineers are able to handle complex modeling and result interpretation easily.

However, traditional computer setup has limited the FEA processes, from model building to result display, in a totally virtual and offline environment. The virtual environment deprives the human senses of the physical characteristics, such as scale, orientation and material, and the surrounding physical context is usually not provided. It is not intuitive and efficient to examine and interpret FEA results without senses of scale and the necessary context. Before performing FEA, engineers must obtain proper loads and boundary conditions (BCs). To acquire these parameters in an actual operating environment, measurements can be conducted onsite, for instance, measuring the load variations on a crane with load cells. The load data will be processed and transferred into FEA systems, which usually involves some tedious and error prone tasks, such as manual data transfer and coordinate transformations, and the results are obtained offline.

Another problem lies in the interactivity. Traditional FEA usually consists of three steps, i.e., pre-processing, solving and post-processing. In the pre-processing stage, a mesh model is created and the relevant parameters, such as loads, material properties and constraints, are prescribed, normally via manual entry. Next, the FEA system builds and solves the equations. The results are post-processed and displayed according to user’s requirements. The computation time depends largely on the number of nodes and the processor performance. There is always a tradeoff between model accuracy and computation time. In practice, most FEAs tend to achieve accurate and detailed results by using fine meshes and nonlinear models, which would certainly require considerable computation time. Users usually have to repeat certain standardized steps to cope with parameter variations. Traditional FEA systems thus have weak interactivity. In a number of situations, FEA systems are expected to update results efficiently in response to parameter variations, e.g., geometry modifications in product design [1]. Real-time performance is required in certain special applications such as interactive entertainment and surgery simulation [2]. This demand motivates the development of real-time interactive FEA technologies.

Augmented reality (AR) technology has been developed in the last two decades to enhance a user’s perception of and interaction with the real world. AR supplements reality by superimposing computer-generated information, such as graphics, texts and audio, over the real-world environment in real time. AR allows the utilization of physical objects, the properties of which cannot be sufficiently embodied in a virtual FEA environment, e.g., scale, orientation, etc. An intact physical context is also preserved for reference. Superimposing FEA results on the corresponding real objects will facilitate results exploration and interpretation. The onsite environments also make it possible to acquire loads and BCs directly using proper sensors and instruments. Tangible interfaces can be developed for intuitive user interaction.

With the goal of utilizing AR technologies to assist structural analysis, this paper proposes a novel system which integrates FEA simulation, scientific visualization and load measurement into an AR-based environment. Unlike traditional FEA systems, the integrated system is able to acquire load data directly from real-world environments, and the deformations and stresses of structures are simulated in real time. A wireless sensor network (WSN) is established and registered onsite to acquire spatially distributed loads. The real-time FEA results are superimposed on physical structures to give lucid illustrations. The rest of the paper is organized as follows. A review of related studies is given in Section 2. Section 3 elaborates the architecture of the integrated system, as well as the relevant methodologies. The proposed system is implemented with a case study in Section 4 followed by a discussion in Section 5, and conclusions are drawn in Section 6.

@&#RELATED WORKS@&#

To overcome the shortcomings of conventional FEA environment, virtual reality (VR) techniques have been employed by many researchers to achieve immersive environments. Various visualization approaches and interactive applications have been developed. Scherer and Wabner [3] proposed a method to visualize FEA results and constraints with stereoscopic visualization methods and glyph-based display, in order to improve human perception and comprehension of complex datasets. Hafner et al. [4] introduced an approach for post-processing electromagnetic solutions in VR. By using Visualization Toolkit (VTK) [5], interactive cutting and operating of solution data are achieved. The FEMvrml system built by Lee and El-Tawil [6] adopted Virtual Reality Markup Language (VRML) to visualize the results of structural analysis for internet. Java-based interactions were developed to control and explore the animation prepared beforehand.

With the goal of integrating VR technologies in the entire product design process rather than only post-processing CAD models and FEA results, Ingrassia and Cappello [7] developed a system called VirDe, which allows the designers to perform the design processes, including CAD modeling and FEA simulation, in a VR environment. To facilitate the architecture students and practitioners’ understanding of the structural behaviors of buildings, Setareh et al. [8] presented an application which allows the users to build structures and simulate the effects of various environmental loads. Standard FEA programs are adopted in these two systems, such that the users have to repeat the FEA processes for parameters changes. In contrast, interactive FEA applications are more efficient and immersive. Connell and Tullberg [9] presented a framework for the integration of FEA simulation and visualization within VR. To achieve real-time response for changes on loading patterns, an approximation module is established to generate simplified results efficiently before accurate results are available. Ryken and Vance [10] created a VR application for the design of a tractor arm in a CAVE-like system. In this application, the designers can modify the shape of a component and view the updated stresses interactively. With a sensitivity analysis carried out beforehand, a linear interpolation was implemented to approximate stresses in real time.

Compared with VR, the most definite advantage that AR provides to numerical simulation is the visualization of various datasets with real-world backgrounds. In the ARVIKA project [11], AR technology was used to support immediate comparison of the real and simulated results of a vehicle crash test, such as stress, strain and internal energy, by overlaying simulated results on a crashed vehicle. To visualize industrial engineering data in AR, Bruno et al. [12] developed a framework, called VTK4AR, that provides a set of classes for the AR visualization of scientific datasets with the VTK. Buchau et al. [13] applied AR technology in the context of teaching electrodynamics in a lecture room. In this system, 3-D magnetic fields and electromagnetic fields are prepared with FEA software, and imported to a special visualization system for the AR environment, namely, COVISE. Weidlich et al. [14] visualized the FEA results of machines with a mobile AR system. The reported system has a client–server architecture in which the server reads the data, generates the mesh and calculates the result. The client performs result rendering and some interactive functions for visualization. Taking the advantages of mobile AR systems, Heuveline et al. [15] presented a system for outdoor applications. A computational fluid dynamics (CFD) simulation of urban buildings was carried out on a server. An AR visualization of the results was displayed on smartphones using a hybrid tracking technique. Besides visualization, AR can also be used in collaborative environments for multiple users. Uva et al. [16] augmented traditional 2-D technical drawings with FEA simulation results and annotations. The web-based application enables multiple users to work collaboratively. Each client can explore CAD and FEA data, and create annotations on the augmented drawings. Modifications of annotations are synchronized instantly among the users, and converge to a new design finally.

However, in these reported applications, the physical surrounding is merely a site to render the simulation results. The advantages of AR environments are not fully utilized. Indeed, AR environments allow simulation systems to acquire parameters from the real world directly, resulting in more intuitive user interfaces. Niebling et al. [17] presented an AR application for the prototyping of a water turbine. In this application, the users can adjust the rotational angle of real turbine blades, which leads to parameter changes that have to be input to the CFD software for simulation so as to update the CFD results that are superimposed on the turbine. This application allows the efficient investigation of blade angles for different operating conditions. In a project carried out at the University of California at Davis, an AR sandbox [18] has been developed for teaching earth science. With this system, the user can create topography models by shaping real sands, and a water flow simulation is performed responsively with the depth frames captured using a Kinect camera.

In large-scale numerical simulation, a detailed or stable simulation usually causes time delay to interaction. For those models of which real-time simulations are possible, the interactivity provided by an AR environment provides more attractive features because the user can receive feedbacks which are correct both in space and time. Fiorentino et al. [19] reported an interactive simulation approach for engineering education in AR. Their approach updates FEA results with changes in displacement BCs tracked using a camera. Tests were implemented on a cantilever that is deformed by hand. By using the COMSOL software, FEA results were refreshed at a rate of 6.5Hz for a mesh of 132 nodes. More evaluations of this tangible simulation approach can be found in the literature [16]. Valentini and Pezzuti proposed the methodologies for achieving interactive kinematic and dynamic simulation of rigid [20] and deformable bodies [21]. Real-time simulation can be achieved with simplified models. The user can move a marker to perform an inverse kinematics simulation intuitively, or set the initial conditions of a dynamic simulation and view real-time animated results. Mannus et al. [22] presented an educational system for magnetic field simulation. The user is able to explore the behavior of magnetic fields using two real magnets with both visual and haptic feedbacks. The magnetic fields are simulated in real time taking advantages of parallel processing with GPU. Another real-time AR visualization system for magnetics education was developed by Matsutomo et al. [23]. In this system, the user can move the mock-up magnetic objects freely to investigate the behaviors of magnetic fields. A 2-D mesh deformation method was developed to cope with the mock-up movements. The finite element equations are solved rapidly using the conjugate gradient method by setting the former solution as an initial value for the next step. Malkawi and Srinivasan [24] built an interactive AR environment to visualize CFD results of a room. Sensors were used to track air temperature and velocity changes within the room, so as to update the BCs for the CFD simulation. Rather than computing exact results online, an artificial neural network was built to approximate the results for real-time dynamic visualization. However, neural networks need training, and the performances on untrained parameters are unstable, and hence the estimation may be erroneous.

Most of the simulations in AR mentioned above only focus on user control of the parameters, and user inputs are normally captured using cameras. For physical objects in real-world conditions and environments, the parameters are usually not controllable by the users, but depend on the events occurring during the operation. To acquire these parameters, measurements should be performed using appropriate sensors. Besides that, some real-time applications can achieve fast simulation by using simplified models, which limits the applications to education and demonstration purposes only.

Many real-time finite element (FE) models have been developed, and most of the advances are motivated by the demand for computing deformation and feedback forces of human tissues in surgery simulations. A number of studies adopted linear elastic models with pre-computation techniques. Pioneering work was done by Bro-Nielsen and Cotin [25]. They developed real-time deformation using tetrahedral elements of linear elasticity. To minimize online computational cost, the stiffness matrix is condensed to involve only surface nodes, and inverted explicitly in a pre-processing step. Only a matrix–vector multiplication is performed during computation and simulation. Cotin et al. [26] investigated a method to calculate real-time deformation driven by constraints in displacement rather than in force. For each surface node, an elementary displacement is applied, and the deformation of all other nodes as well as the force at the surface node is pre-computed and stored. A linear combination is performed online to calculate the total deformation of each node and feedback forces. Nikitin et al. [27] presented a system for the simulation of large elastic objects in an interactive VR environment. An offline inversion of a stiffness matrix is performed. Berkley et al. [28] developed a real-time FE methodology for simulation of suturing. In this method, a constraint-based approach is applied to the linear elastic model of soft tissue, so that contact is not limited on the nodes, but any points on the surface. Although the inverse of the stiffness matrix can be pre-computed, the inverse of an intermediate matrix is inevitable during the online computation. In spite of this, the deformation of an arm model could be visualized at 30Hz.

The studies mentioned above adopted linear elastic models. Quasi-static loads were assumed, i.e., dynamic effects caused by inertial and damping forces were neglected, due to insufficient computational power and restrictions on time step. The approximation is considered reasonable to speed up the solution processes. Some real-time deformation models can handle geometry nonlinearity by extracting local material rotations from co-rotational models [29], and many studies employed explicit integration schemes to develop real-time methodologies for nonlinear models [30]. However, these methods are only applicable to models that allow large time integration steps.

Linear elastic models have been extensively applied to mechanical and civil structures, and deriving structural stresses from deformation based on these models is straightforward and efficient. Quasi-static load approximation is acceptable in many practical situations where the loads do not have high frequencies or short application time. These facts make it rational to apply real-time elastic FE models to practical engineering structures.

The system construction is guided by the essential idea of acquiring simulation parameters onsite, such as loads and BCs, using appropriate sensing technologies, and achieving real-time simulation results to be visualized in an AR environment. To achieve these objectives, user interfaces and interaction methods are developed. Considering the measurable parameters in practical problems, applicable sensors and real-time FE models available, the proposed system is focused on real-time simulation with varying loading conditions.


                        Fig. 1
                         illustrates the proposed system. Besides AR fundamental modules, the system contains other three modules, namely, the load data acquisition module, real-time solution module, and post-processing module. The load acquisition module acquires external loads using appropriate sensors and instruments, and converts them to nodal loads for FEA simulation. In this paper, a WSN is established to monitor spatially distributed load, and an interactive approach is developed to register the sensor nodes onsite. Load conversion is performed automatically after sensor registration. With the acquired load data, the real-time solution module generates time-dependent displacements and stresses. It is implemented in two phases, i.e., offline pre-computation and online solution. In the offline pre-computation phase, mesh models are created, and the parameters, such as material properties and BCs, are specified by the user. Relevant matrices are computed and variables are initialized subsequently. In the online solution phase, nodal loads are computed with the sensor data, and FEA results, e.g., deformations and stresses, are computed at a fast speed.

A typical AR system has three fundamental modules, i.e., tracking, rendering and interaction. The tracking techniques include sensor-based methods, vision-based methods and hybrid methods [31]. Vision-based methods are selected for this research because of their stability and accuracy. With video frames captured using a camera, the camera matrices are computed in the tracking module and transferred to the post-processing module. The post-processing module is established based on scientific visualization technologies, such as color coding and data slicing. In this module, the simulation result datasets received from the real-time solution module are processed with data filters, and visualized according to the user’s requirements. The visualized results are finally registered onto the video frames of the real-world environment, and rendered to the user via display devices, such as head-mounted displays (HMD) and PC monitors.

The user interaction module is developed for various user operations, e.g., registering wireless sensors into the AR environment onsite, exploring the volumetric FEA result datasets using a handheld cutting plane, etc. A customized user interface has been developed, which consists of a 3-D input device and a virtual panel [32]. As shown in Fig. 2
                        , the 3-D input device is built with a marker cube for positioning and a button for triggering. Wireless transmission is enabled using a radio frequency (RF) module. With the input device, the user can operate the virtual objects in the AR environment, e.g., cutting planes, virtual buttons, etc. The virtual panel consists of buttons and text displays. User events are triggered by clicking the buttons with the input device. Text messages are displayed for assisting the user during the operations.

To simulate structures subjected to dynamic loads, standard dynamic FEA adopts time integration strategies, such as explicit and implicit methods. The size of the time step is determined according to the material properties, mesh size and natural frequencies. A real-time simulation is achievable if the computation time for a time step is less than the time step duration [33]. Engineering structures are normally built with stiff materials, limiting the time step to an extremely small size. Simulating the dynamic responses in real time is difficult. Nevertheless, dynamic analysis is not always necessary for varying loads. When the time of load application is at least three times higher than the lowest natural period of the elastic structure, the load can be assumed to be static [34]. This condition makes the quasi-static approximation feasible for many real-life situations. In view of the fact that linear elastic models are applied extensively in practical structural analysis, a real-time solver is developed based on the concept of pre-computing the inverse of the stiffness matrix [27]. The system can be adapted easily to other types of real-time solvers because all the solvers have the same function, i.e., outputting time-dependent displacements 
                           
                              u
                              (
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              )
                           
                         with corresponding load inputs 
                           
                              f
                              (
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              )
                           
                        , 
                           
                              i
                              =
                              1
                              ,
                              2
                              ,
                              3
                              ,
                              …
                              ,
                              n
                           
                        .

An elastic FE model is expressed using a sparse linear system in Eq. (1).
                           
                              (1)
                              
                                 Ku
                                 =
                                 f
                              
                           
                        
                     

The stiffness matrix K is established after the mesh models, material properties and BCs have been specified. The load vector f is updated online with sensor data, and the displacement vector u is generated accordingly by performing a matrix–vector multiplication according to Eq. (2).
                           
                              (2)
                              
                                 u
                                 =
                                 
                                    
                                       K
                                    
                                    
                                       -
                                       1
                                    
                                 
                                 f
                              
                           
                        
                     


                        K
                        −1 is pre-computed offline. To achieve this, a unit load is applied to each degree of freedom (DOF) and the linear systems are solved using iterative methods, e.g., the preconditioned conjugate gradient (PCG) algorithm which is one of the best known methods for solving sparse linear systems. The resulting displacement ui
                         for the i-th DOF corresponds to the i-th column in the inverse stiffness matrix. This offline computation may take minutes to hours depending on the matrix size and system performance. The computation time is also affected by the error threshold and stop criteria set for the precision required. The online solution phase essentially conducts a linear superposition of the columns of the inverse matrix. With displacement solution, the stresses at any point inside an element can be evaluated from Eq. (3), where E is the elasticity matrix and B is the strain–displacement matrix. Nodal stresses can be calculated using conventional methods [35], e.g., direct evaluation at nodes, extrapolation from Gauss points, etc.
                           
                              (3)
                              
                                 σ
                                 =
                                 EBu
                              
                           
                        
                     

In practice, computing the entire inverse matrix is not necessary when the external loads will only act on certain regions of the structure, e.g., certain faces of the structure. Computing the columns for the nodes on these regions only will largely reduce the pre-computation time. This simplification can be applied when the regions that may be subject to loading are known beforehand. The exact loading locations in the regions could be variable. The online solution process can also be sped up by skipping the zero entries in the load vectors that have a large proportion of zero entries. In addition, if only partial results are expected, e.g., the stresses in certain critical regions, the online solution time can be further reduced by computing results only for the elements involved. However, extra efforts are needed to extract the relevant elements from the mesh data.

WSN technologies have been widely employed to monitor environmental conditions. A WSN normally consists of sensor nodes, gateways and client application software. To acquire spatially distributed load data for real-time analysis and simulation, a WSN is built with RF modules. Fig. 3
                         shows the remote sensor node and the gateway node fabricated for the network. The remote sensor node acquires the load data and transfers the data to the client application, while the gateway node provides connection between the sensor nodes and the client application. Only one gateway node is required to connect a client to multiple sensor nodes, and the communication between them relies on standard XML-RPC protocol.

To acquire load data in practical applications, appropriate sensors should be selected and installed according to the measurement requirements, e.g., position tracking sensors are used for moving constant loads. In this research, force sensors are employed to measure the external loads exerted on a structure, and the configuration method will be elaborated, but it could be adapted to other types of sensors.

All the load data measured by the force sensors should be converted to nodal loads for FEA simulation. Two operations are performed for the load conversion, namely, coordinate transformation and load allocation. As the real-world loads are measured in the sensor coordinate systems, they should be transformed to the world coordinate system. Regular 
                           
                              3
                              ×
                              3
                           
                         rotation transformation matrices are sufficient for the transformation of the triaxial force sensors. By setting some entries to zero, the transformation matrices can be generalized for uniaxial and biaxial load sensors. After the coordinate transformation, the loads are allocated to the FE nodes subjected to them, i.e., converted to nodal forces. The allocation is achieved by assigning weights to the relevant FE nodes, which can be derived by computing the nodal forces with applied unit loads. The loaded nodes and their weights are determined according to load locations or regions. After a sensor is registered in the AR environment, the corresponding load conversion relationship is established. As an example, Fig. 4
                         illustrates the load conversion for the force sensor employed. The force measured is simplified as a point load at the center of the sensor, and converted to equivalent nodal forces according to the load location on the mesh model.

For load conversion, a data table as shown in Table 1
                         is established to store the load information. An entry in the data table corresponds to a sensor node. Using this data table, multiple sensor nodes are registered in the world coordinate system one by one in the following steps.
                           
                              (a)
                              The user switches on a sensor node. The node continues to send requests for registration via remote procedure calls (RPCs) which contain its network address.

The system receives the requests and informs the user to register the sensor node.

The user specifies the sensor coordinate system and load location with the input device. Input methods can be developed according to sensor types and input devices, e.g., casting a ray normal to the loaded area to register a uniaxial sensor attached on it, aligning the coordinate system of a 3-D input device to that of a triaxial sensor. After that, the load transformation matrix is computed. The loaded nodes and nodal weights are determined with the specified load location. An entry for this sensor node is added to the data table subsequently.

A RPC is sent to the sensor node to record the successful registration, and an ID number is assigned. After receiving the RPC, the sensor node switches on the LED to inform the user, and starts sending force values and the ID number instead of registration requests.

With force values and ID number received, the system indexes the entry corresponding to the sensor node and updates the load value efficiently.

In each rendering loop, the load vector f in Eq. (2) is updated with the nodal loads computed throughout the table entries using Eq. (4).
                           
                              (4)
                              
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          n
                                       
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       ij
                                    
                                 
                                 ·
                                 
                                    
                                       T
                                    
                                    
                                       j
                                    
                                 
                                 ·
                                 
                                    
                                       F
                                    
                                    
                                       j
                                    
                                 
                              
                           
                        
                     

In Eq. (4), wij
                         is weight of node i subjected to load j. Fj
                         and Tj
                         are the corresponding load value and transformation matrix. An important feature of the established WSN is that all the sensor nodes use the same code, such that it is very efficient to add new sensor nodes to cope with variable loading conditions.

VTK is applied to visualize FEA results in an AR environment. As an object-oriented library supporting a wide variety of scientific visualization algorithms, VTK is an ideal tool for achieving interactive visualization and post-processing of FEA results. Fig. 5
                         illustrates the approach to integrate VTK with AR for visualizing FEA solutions. Each dataset processed in the VTK pipeline has an organized structure and associated data attributes. The topology and geometry of the organized structure are specified by cells and points. VTK is capable of handling both structured and unstructured FE meshes. A vtkUnstructuredGrid dataset is established for a FE mesh by assigning elements to the cells and nodes to the points, and FE elemental or nodal solutions are the attributes associated. vtkFilters are optional for data manipulation and modification. The data will be mapped to graphic primitives using vtkDatasetMappers. A vtkLookupTable is created to color code the scalar solutions in the hue-saturation-value (HSV) color space. The visualization entity is formed using a vtkActor, which is rendered with a vtkCamera configuration. To register the vtkActor in the world coordinate system, the vtkCamera is configured with the intrinsic matrix from camera calibration and the extrinsic matrix from AR tracking. The vtkActor is finally rendered with a background of real-world environments.

With various vtkFilters, interactive post-processing methods can be developed by keeping the filter parameters in control. Fig. 6
                         shows an interactive post-processing approach developed based on vtkCutter. The internal stresses of a saddle support are examined with a handheld cutter. Since opaque visualization as shown in Fig. 6(a) will make the data slices invisible, translucent visualization is adopted. The data slices are updated as the user moves the 3-D input device (Fig. 6(b) and (c)), which contributes to intuitive and efficient data exploration. By pressing the button on the input device, the user can create multiple slices at different locations for comparison (Fig. 6(d)).

Occlusion often occurs when real objects are overlaid with virtual objects directly. As shown in Fig. 7
                        (a), incorrect images are generated when a bracket is overlaid with the mesh graphics obtained using the vtkExtractEdges filter. To address this problem, a mask is created with the mesh model to remove the graphics which are supposed to be invisible. Correct images are achieved as shown in Fig. 7(b), which are ideal for sensor registration.


                        Fig. 8
                         shows the workflow of the system, which starts with FE model pre-computation and relevant initialization tasks. After that, three computation threads will be running for the rendering loop, real-time solution and load acquisition, respectively. Load acquisition and real-time solution are activated after the registration of the WSN. The former continues to receive force signals and updates the load data table. The latter converts the current load data in the table into nodal loads, and generates solutions. The solutions will be input to the post-processing module to update the VTK datasets.

The load acquisition, FEA simulation and rendering loops are performed concurrently in different computation threads. Considering different computation time and dependences among the processes, a time synchronization scheme is developed as shown in Fig. 9
                        . Among these three processes, load acquisition can achieve the highest updating rate by employing appropriate WSN equipment. The simulation rate should be higher than the frame rendering rate so that simulation results are updated and rendered in each frame. Multiple simulation steps are needed for a rendering frame if a standard dynamic analysis is performed; however, only one step is sufficient with quasi-static approximation. At the beginning of each rendering loop, the latest load data is input to the simulator for a simulation step. The synchronization between the load data and the simulation step is not performed because the time offset is smaller than the load sampling interval. The simulation results are input to the post-processing module after AR tracking is completed. The rendering loop has to wait for the simulation results if the tracking results arrive earlier than the simulation results. As soon as both the tracking and simulation results are achieved, they are input to the post-processing module for filtering and visualization.

A prototype system has been developed on a PC with a 3.2GHz Intel processor and 8GB RAM. AR tracking is implemented using ARToolkit [36], and a webcam with a capture rate of 30fps is employed. A virtual panel with a customized menu is created, which can be activated with a 3-D input device. The entire system is developed using C++ language and runs on a Microsoft Windows operating system. A case study has been performed on an off-the-shelf step ladder (Fig. 10
                     ) to demonstrate the system. It is noted that the purpose of the case study is to prove the feasibility and evaluate the performance of the integrated system, rather than conducting an accurate structural analysis.


                     Fig. 10 shows the step ladder used for the case study. The FEA software ANSYS is employed to handle the meshing task and matrix formation. The wooden components are modeled with linear 8-node hexahedral elements, and the two metal linkages are modeled with truss elements. The truss elements are connected to the hexahedral elements by applying linear constraints. A few non-essential features are neglected to simplify the mesh model. The material properties are assumed to be elastic isotropic. Constraints are applied to the faces of the four legs that contact the ground. After the linear system has been established, the stiffness matrix is extracted from the ANSYS database, and the inverse matrix is computed using an external PCG solver. In view of the fact that only three faces as shown in Fig. 10(b) can be subjected to loading by the user, the inverse matrix are computed for the nodes on these faces only so as to reduce the offline computation time. The mesh data, including the node list and element list, is extracted and stored in text files. In addition, the surface mesh data, which contains the nodes and facets information for each face, is extracted. All these data are input into the system during initialization. The exact loading regions of the ladder are determined based on observation of the users stepping on it, and four force sensors are attached at the locations as shown in Fig. 10(a) for receiving the load input.

After the preparation steps described in the previous paragraph, the system is operated as follows. The FE mesh data and inverse matrix are input into the system after the user triggers the “READ” button (Fig. 11
                     (a)). The FE mesh is visualized subsequently, and sensor registration is allowed for adding or removing wireless sensor nodes (Fig. 11(b)). All the sensor nodes are powered off at the beginning. To add a sensor, the user switches on the power and a text message “New sensor node detected!” is displayed. The user specifies the sensor coordinate system by casting a ray to the region where the sensor is attached (Fig. 11(c)). The normal of the surface, which is coincident to the sensor axis, is computed for establishing the coordinate transformation. The forces that are measured are approximated as concentrated loads, and allocated to the nodes of the loaded elements. The LED bulb is switched on to inform the user of the successful registration. All the sensor nodes are registered by repeating these operations. The real-time simulation is launched next after triggering the “RUN” button (Fig. 11(d)). The mesh turns blue at the beginning since no load has been applied.

Nodal stresses of the hexahedral elements are derived by performing extrapolation from the Gauss points. Fig. 12
                      shows the variations of von Mises stresses when a user steps on the ladder. In Fig. 12(a), the color scale is updated with the maximum and minimum stress values for each frame so the results can always be visualized with the most number of colors. This visualization approach is suitable for analyzing the stress distribution of an arbitrary frame, but not intuitive for comparing results of different frames because the color scale varies. With a consistent color scale as shown in Fig. 12(b), the comparison of different frames becomes intuitive. Traditional FEA normally adopts consistent color scales for animation. However, unlike the offline simulations in traditional FEA, the color scale should be determined beforehand for real-time simulation. Unsuitable scale would lead to invalid visualization.

A test is conducted to evaluate the performance of the system. Three subjects of different weights were asked to step on the ladder in a similar way. Fig. 13
                      shows the results with the same preset color scale. It can be observed that the proportion of the colors indicating higher stresses becomes larger as the weight of the subject increases. Exploration of results by slicing is allowed while the simulation is running, and the results in the slices are updated in every frame as shown in Fig. 14
                     . The test indicates that the system has the potential to allow efficient evaluation of a product for different customers.

A finer mesh normally generates more accurate results but requires a longer solution time. Hence, there is a tradeoff between accuracy and frame rate. To evaluate the effect, four models of different mesh resolutions are created as shown in Fig. 15
                     . Models A, B and C are used for real-time simulations, while Model D which is used for reference and has a fine mesh and is used for a static stress analysis performed with ANSYS. The stress distributions under the same loading conditions are compared and shown in Fig. 16
                     . As expected, the stress distribution becomes more detailed and accurate as the mesh resolution increases, but the frame rate drops dramatically towards zero (Fig. 17
                     ).

The test results show that the tracking algorithm only requires around 7ms, but the tracking update rate cannot exceed 30fps due to the restriction from the video capture rate of webcam. The load values are updated at 48Hz with the established WSN. The computation time for the other relevant processes is illustrated in Fig. 18
                     . A shorter time is required to achieve FEA results for Model A, but the frame rate cannot exceed 30fps due to the restriction from webcam. As the number of node increases, the time for computing displacements, i.e., solving the linear system, increases significantly and becomes dominant.

@&#DISCUSSION@&#

With the pre-computed inverse stiffness matrix, FEA solutions are generated online by conducting matrix–vector multiplication. However, the solution time is still significant when thousands of nodes are used. The solution time is determined by the size of the inverse stiffness matrix and the number of non-zero entries in the load vector. Table 2
                      shows the results achieved in the case study and in the literature [16]. The solution time can be roughly compared although the hardware devices used are different. For example, the cantilever model of 314 nodes requires a solution time of 323ms. Taking into account the fact that the node of a shell element has six DOFs while the node of a hexahedron element has three DOFs, the solution time is still much longer than that of the step ladder model which has more than twice the number of nodes, i.e., 26ms for 758 nodes. The comparison results indicate that the proposed approach can achieve higher update rates even when the models are more complex. Although the computation time is affected by the performance of the different hardware, the benefits of pre-computation are outstanding and previous tests showed that solution method using matrix–vector multiplication is at least ten times faster than other solution methods, such as conjugate gradient with and without preconditioner, Gaussian elimination and several factorization techniques [25]. With a fast solution method, the simulation and AR rendering can be performed synchronously to ensure FEA results are updated in every frame.

The online solution is sped up at the expense of an offline pre-computation process. Table 2 shows the pre-computation time when the PCG solver has a tolerance of 1.0E−5. The inverse stiffness matrix is computed only once before the simulation starts and can be stored for reuse. If the stiffness matrix varies, the inverse matrix should be updated correspondingly. It may occur when the FEA parameters, such as the geometry and boundary conditions are changed. The Sherman–Morrison–Woodbury formula can be employed to update the inverse matrix quickly under certain conditions [37]. Proper simplification of the model is an effective way to shorten the pre-computation and solution time, e.g., using an uneven mesh of which the resolution is fine in the regions of interest and coarse in the rest, choosing low-dimensional elements instead of 3-D solid elements, etc.

Benefitted from the onsite environment and the intelligence of WSN, the user can configure the sensors interactively to cater the simulation for different loading conditions. Through sensor registration, the connection between sensor measurement and the loads on the finite element model is established. The accuracy of the sensor registration is determined by the accuracy of vision-based tracking, and the ARTookit tracking method is not reliable for applications demanding millimeter accuracy. Moreover, the loads in the case study are simplified to point loads and are allocated to the nearest quadrilateral vertices, which may impose unrealistic high stress gradients in the loaded areas especially when a fine mesh is applied. To improve this, the loads can be allocated to more nodes in the loaded areas during the sensor registration process. In some practical situations, loads are not directly measured with force sensors but indirectly measured with other types of sensors, such as strain gauges. The load data acquisition module can be adapted accordingly.

@&#CONCLUSIONS@&#

Load data acquisition and FEA simulations are carried out separately in practical applications due to the virtual and offline environment imposed by traditional FEA tools. With the use of AR, the coupling of these two processes becomes possible and promising. This paper proposes a framework to integrate sensor measurement, FEA simulation and scientific visualization into an AR-based environment. Integrating scientific visualization into the AR-based environment allows superimposing of FEA results on physical objects, and facilitating result data post-processing and interpretation. The FEA simulator is able to acquire load data directly from the onsite environment. The load acquisition module plays the role of interface between the simulator and real-world loads. Utilizing an offline pre-computation, the simulator is able to update the results in real time. A case study was carried using a step ladder, which is considered having moderate failure risks in usage. The relationships among the node numbers, accuracy of the result and frame rate were investigated. The current real-time FE model has limitations for dynamic and nonlinear problems. However, it is competent for addressing many practical situations. The research contributes a novel method to investigate full-field structural stresses onsite, which has the potential to be applied to monitor mechanical or civil structures in the actual operating environments.

@&#REFERENCES@&#

