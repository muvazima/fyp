@&#MAIN-TITLE@&#Sequential Interval Network for parsing complex structured activity

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           SIN parses structured activity sequence (or time series data in general).


                        
                        
                           
                           SIN is not a time sliced graphical model.


                        
                        
                           
                           SIN is equivalent to a left-right segmental model (HSMM) and allows exact inference.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Activity parsing

Activity prediction

Action recognition

Stochastic context-free grammar

Sequential Interval Network

@&#ABSTRACT@&#


               
               
                  We propose a new graphical model, called a Sequential Interval Network (SIN), for parsing complex, structured activities whose composition can be represented by a stochastic grammar. By exploiting the grammar, the generated network captures an activity’s global temporal structure while avoiding a time-sliced manner model. In this network, the hidden variables are the start and end times of the component actions, which allows reasoning about duration and observation on interval/segment level. Exact inference can be achieved and yield the posterior probabilities of the timing variables as well as each frame’s component label. Importantly, by using uninformative expected value of future observations, the network can predict the probability distribution of the timing of future component actions. We demonstrate this framework on vision tasks such as recognition and temporally segmentation of action sequence, or parsing and making future prediction online when running in streaming mode while observing an assembly task.
               
            

@&#INTRODUCTION@&#

This paper addresses the problem of parsing complex structured activity. By complex activity, we mean extended sequences of multiple component actions, as opposed to being visually complex or how unconstrained the video is. By structured, we mean the extended composite activities are formed by a concatenation of actions whose sequencing are typically constrained by rules. For a variety of activity monitoring tasks ranging from surveillance to work-flow monitoring to quality control inspection, the challenge is to observe some complex activity being performed and to be able to label which action has been performed and often to parse or segment the input sequence into its component actions. Additionally, if a system is intended to respond appropriately and at the correct time with respect to an activity, it is necessary to perform such parsing while the activity is occurring and predict when a component action is like to occur; examples of this last task are seen in the domain of human robot interaction [1,2].

Considering the problem of parsing complex structured activities, we recursively define such activities to be compositions of some combination of (sub-)activities and primitive actions. We presume as given the temporal structure and decomposition of the activity, such as a task plan of an assembly process where there may be partially ordered or even optional steps. We further assume that probabilistic low level visual detectors are provided or learned from training examples; these detectors provide noisy evidence as to occurrence of some primitive action. The goal is to develop a probabilistic representation of such activities that leverage the temporal constraints and local sensing and which allows the system to assess, at any moment in time, the probability as to which actions have occurred or will occur and when.

The pipeline of our framework is shown in Fig. 1
                     . The input grammar is used to generate a graphical model whose variables encode the start and end times of component actions. All the conditional probability tables (CPT) will be constructed from learned prior probabilities of the primitive actions’ duration and from evidence provided by primitive action detections. Finally exact inference is performed by a forward–backward message passing algorithm. The output of our network will be the posterior probabilities of which of the different courses of actions took place, and the timing of each action, which can be used for recognition and future prediction. From this, we can also compute the posterior of each frame’s label and perform temporal segmentation.

It should be noted that our main contribution is not really activity recognition, but a framework for combining available detection result of different component actions leveraging the temporal relationship between them. On previously recorded data, the method can be used as a post-processing step of raw-detection results in place of, say, the common sliding window, non-maxima suppression. In streaming mode, the system can be used to make predictions about which and when different actions are likely to occur. Our method is only applicable when there is known temporal structure information to be exploited. Presented here is an enhanced version of our previous conference paper [3] where we have added more detail and discussion, as well as additional experiments to validate the proposed method.

We organize this paper as follows. The related work is discussed in the next section. After describing the grammar representation for modeling the temporal structure of the activity in Section 3, we introduce our graphical model in Section 4 and the inference mechanism in Section 5. In Sections 6 and 7, we perform different activity recognition experiments. Finally we conclude in Section 8.

@&#RELATED WORK@&#

Within computer vision community, the problem of recognizing short, low-level action has been being actively studied. Different video feature such as STIP, HOG3D, Cuboid [4], Dense Trajectories [5] were proposed and proved successful within the popular Bag-of-Word framework. Also, spatial and temporal structure can be exploited [6–9] When we consider long video sequences that might contain one or multiple short action segments, this results in the challenging task of action detection: temporally segmenting the sequence or localizing the actions. Leveraging the same visual feature, different adaptations were made to handle this task. In [10,11], SVMs are used for classification and segmentation is chosen to maximize the total SVM score using dynamic programming. Pirsiavash and Ramanan [12] discover temporal pattern of the action via generating a Context-Free-Grammar; action localization is then done by a new efficient parsing technique. Most recently, Huang et al [13] proposed Sequential Max-Margin Event Detectors to handle the temporal segmentation task. This Max-Margin approach is able to scale well with respect to number of action classes.

In this paper, we consider complex activities that can be meaningfully decomposed into components, which can in turn are composed of smaller components and so on. The task is then to parse the sequence with a learned or given temporal structure of the activity. A popular approach is to first detect potential actions in a pre-processing step and then reason about their temporal composition. String and language parsing technique can be applied to such discreet set of detected actions. In [14,15], traditional stochastic context free grammar parsing algorithm was adapted for computer vision problems; adjustments were made to handle different types of errors. To the same end, Damen et al [16] proposed Attribute Multiset Grammars which can encode richer constraints on activity structure. For parsing, an automatically generated Bayesian Network is used to find the detections that correspond to the best explanation. Albanese et al. [17] used Probabilistic Petri Nets to detect interesting human activities. In [18], Probabilistic Suffix Trees were used to learn the pattern of symbols (or “actionlets”) for early detection of on-going activity. Similarly in [19,20], an AND–OR grammar is learned from example strings of symbols, each representing a possible action consistent with the grammar’s language. The learned grammar discovers the pattern of actions and can be used for prediction. Different from these approaches, we assume the detection of primitive actions is not a discrete set of events, but significantly more general: a “heatmap” that represents the action likelihood for every interval. This enables our framework to handle a wide range of detection uncertainties.

The work most related to what’s proposed here is Dynamic Bayes Network (DBN) approaches, such as Hidden Markov Model (HMM), where detection of actions and their temporal composition are jointly inferred. In [21,22], special DBNs were proposed, in which the system’s state encodes when each action starts and ends. Inference by a particle filter is done in an online mode. While the current state can be inferred, it is computationally infeasible to derive the distribution of the start and end of actions at arbitrary points in the past or future (prediction) using all available observation up till the current time. Koppula et al. [23] introduce Anticipatory Temporal Conditional Random Field, which is an undirected graphical model designed to run online like a DBN. Prediction is done by extending the network into the future and performing simulation. Most recently, Wei et al. [24] proposed a method for modeling sequences that incorporates rich information (e.g. duration and object/human poses) about each action. However, these approaches have to resort to approximate inference since it is infeasible to explore every possible state of every timesteps. Our framework can be considered a class of Hidden Semi-Markov Model (HSMM) [25,26]. By reasoning about the timings of actions, it has the similar rich capability while permitting exact inference.

First, we introduce the stochastic grammar notation for modeling complex activity in this section. Because grammar induction is a focus of this work, we assume that the activity’s grammar known a priori. We do, however, provide some simple grammar construction techniques in the experiments when the activity’s grammar is not available in advance.

We define a complex composite activity to be represented in hierarchical fashion: the activity consists of several actions, which can in turn consist of even smaller actions and so on. Therefore we define two types of actions: the action that is represented as a composition of other actions, and the primitive action which is explicitly modeled using a learned duration model and visual detectors. The whole activity is the top-level composition.

We use a stochastic grammar, that resembles a context-free grammar, to model this hierarchical structure. The grammar is formally defined as G = (S, T, N, R) where: T is the set of terminal symbols, corresponding to the primitives, N is the set of non-terminal symbols, corresponding to the compositions, S is the starting symbol, corresponding to the top-level activity, R is the set of probabilistic production rules, which define the compositions. The production rule will be the kind of context-free grammar production rule: 1 non-terminal on the left hand side and a string of symbols (either terminals or non-terminals) on the right hand side (combined using AND operation and OR operation). The stochastic component of the grammar is reflected in the probabilities associated with these production rules.

Before generating the Sequential Interval Network SIN, a pre-processing step is necessary to convert the original grammar to a “compiled version” that satisfies three constraints:

                           
                              1.
                              Each production rule must be either an AND-rule or an OR-rule. Mixing of AND and OR operations in one rule is not permitted. However, such prohibited rule can be trivially converted to several pure AND-rules and OR-rules. Note that since the grammar is stochastic, each symbol on the right hand side of the OR-rule is associated with a probability and they sum to 1.

Every symbol can only appear on the right hand side of a production rule at most once. That is every copy of a single action that appears in more than one rule must be a distinct instance. However, these instances will share detectors and duration models (described later) making the system no more difficult to implement. This is required because our system tries to differentiate the actions of the same class happening multiple times or in different parses.

The grammar cannot generate arbitrary long strings since our Bayes network will cover all possible sequences. This means rules causing loop such as: “S → SA∣A” are not allowed. Explicitly unrolling such loops to a maximum number of times can be done to avoid this situation.

The first two of these constraints are merely syntactic and do not restrict the structure of the top level activity. They help to simplify the implementation of the graphical model generation process. The last constraint, however, places a string-length limitation that bounds the length of time it takes to complete the activity and more importantly limits number of iterations of any individual component. Hence even though the original grammar can be a context-free grammar, the compiled one is a finite, acyclic grammar. For many scenarios, such as assembly monitoring, this is a reasonable assumption since we are always working with a finite time activity. In addition, though the length is not known in advance, most activities we consider can not be arbitrary long. As we also learn the duration of each primitive, any context-free grammar can be converted into a finite one such that any suitably bounded finite random sequence generated by the original grammar is also generated by the finite one and its associated probability is as desired.

An simple example grammar is shown in Fig. 2(a). The top-level activity is a partially ordered sequence of the actions a, b in any order, followed by action c, ending with an optional action d. Fig. 2(b) displays the AND-OR tree of the grammar.

We describe how to generate the network that will reason about timings in sequential data. The input will be the compiled grammar of the activity. First, for every symbol A in the grammar, we define the hidden random variables As
                      and Ae
                      representing the starting time and ending time of the action A. We also define ZA
                      to be the observations of the detector associated with action A; we will describe ZA
                      shortly. Our formulation is defined on a discrete and bounded representation of time where 1 ≤ As
                      ≤ Ae
                      ≤ T, where T is defined to be large enough to cover all variations in the activity’s length.

In non-trivial grammars that represent actions with choices, an action A may or may not happen at all. We employ the special value 
                        
                           −
                           1
                        
                      to denote the case when action A does not happen. We will use the notations (∃A) and (!A) to stand for the case A happens (1 ≤ As
                      ≤ Ae
                      ≤ T) and A does not happen (
                        
                           
                              A
                              s
                           
                           =
                           
                              A
                              e
                           
                           =
                           −
                           1
                        
                     ).

We now design a network that includes nodes As, Ae
                      and observations ZA
                      for every symbol A in the grammar. The basic idea is that the SIN is constructed in a hierarchical fashion, similar to the AND-OR tree (Fig. 2(b)). To do so, we describe how to construct it recursively for the three cases of action primitives, AND-rules, and OR-rules. We then show a recursive message passing algorithm to perform exact inference on the constructed network; the output of the inference are the posterior distributions of the start and the end of every action P(As
                     |Z), P(Ae
                     |Z) including the possibility that the action does not occur (
                        
                           P
                           (
                           
                              A
                              s
                           
                           =
                           
                              A
                              e
                           
                           =
                           −
                           1
                           |
                           Z
                           )
                        
                     ).
                     
                     
                  


                     Observation notation: when multiple observation are together such as ZM, ZN
                     , we will group them together as Z
                     
                        M, N
                     . In addition, we will use Z
                     
                        pre(A) and Z
                     
                        post(A) to stand for the observation of all actions that happen before and after an action A, respectively.

The portion of the network that corresponds to a primitive v is shown in Fig. 3(a). There are two conditional probabilities required for this component:

represents the prior information about the duration of action v. In our implementation we define: 
                                 
                                    P
                                    
                                       (
                                       
                                          v
                                          e
                                       
                                       |
                                       
                                          v
                                          s
                                       
                                       )
                                    
                                    ∝
                                    N
                                    
                                       (
                                       
                                          v
                                          e
                                       
                                       −
                                       
                                          v
                                          s
                                       
                                       ;
                                       
                                          μ
                                          v
                                       
                                       ,
                                       
                                          σ
                                          v
                                       
                                       )
                                    
                                 
                               if 
                                 
                                    
                                       v
                                       e
                                    
                                    −
                                    
                                       v
                                       s
                                    
                                    ≥
                                    d
                                    m
                                    i
                                    
                                       n
                                       v
                                    
                                    ,
                                 
                               or 0 otherwise, where N(.; .) is the Gaussian density function and μv, σv
                               are parameters learned from labeled training data. Note that the Gaussian is truncated to avoid too small (or even negative) duration. For the special case when the action does not happen the duration is defined as: 
                                 
                                    P
                                    (
                                    
                                       v
                                       e
                                    
                                    =
                                    −
                                    1
                                    |
                                    
                                       v
                                       s
                                    
                                    =
                                    −
                                    1
                                    )
                                    =
                                    1
                                 
                              : if an action does not start then it does not happen.

each primitive has a visual detector that outputs a detection score Fv
                              [α, β] representing the evidence that the action starts at time α and ends at time β for every possible interval (α, β) of the range [1, T] (covering the entire activity). Then the likelihood can be computed based on that detection: 
                                 
                                    P
                                    
                                       (
                                       
                                          Z
                                          v
                                       
                                       |
                                       
                                          v
                                          s
                                       
                                       =
                                       α
                                       ,
                                       
                                          v
                                          e
                                       
                                       =
                                       β
                                       )
                                    
                                    =
                                    
                                       h
                                       v
                                    
                                    
                                       F
                                       v
                                    
                                    
                                       [
                                       α
                                       ,
                                       β
                                       ]
                                    
                                 
                               for some constant hv
                              . Calculation of Fv
                               can be assumed to be a black box procedure.

We also need to define the likelihood for the special case 
                                 
                                    P
                                    (
                                    
                                       Z
                                       v
                                    
                                    |
                                    
                                       v
                                       s
                                    
                                    =
                                    −
                                    1
                                    ,
                                    
                                       v
                                       e
                                    
                                    =
                                    −
                                    1
                                    )
                                 
                               which can be written as 
                                 
                                    P
                                    
                                       (
                                       
                                          Z
                                          v
                                       
                                       |
                                       !
                                       v
                                       )
                                    
                                    =
                                    
                                       h
                                       v
                                    
                                    
                                       F
                                       v
                                    
                                    
                                       [
                                       −
                                       1
                                       ,
                                       −
                                       1
                                       ]
                                    
                                 
                              . We assign to 
                                 
                                    
                                       F
                                       v
                                    
                                    
                                       [
                                       −
                                       1
                                       ,
                                       −
                                       1
                                       ]
                                    
                                 
                               a “null value” defined as the expected detection score (Alternatively if the detector can detect if the action does not happen, it can be incorporated into this likelihood).

More detail on the design of the primitives will be discussed in Section 5.4.

This rule defines the action A to be the sequence of sub-action M and N (possibly more). The network is shown in Fig. 3(b). Here we make some important assumptions: (1) the start and end of the composition are the start of the first action and the end of the last action in the sequence respectively (
                           
                              
                                 A
                                 s
                              
                              =
                              
                                 M
                                 s
                              
                              ,
                              
                                 A
                                 e
                              
                              =
                              
                                 N
                                 e
                              
                           
                        ), (2) the end of one action is equal the start of the next action in the sequence (
                           
                              
                                 N
                                 s
                              
                              =
                              
                                 M
                                 e
                              
                           
                        ),
                           1
                        
                        
                           1
                           If time between actions is needed we can insert a special Dummy action between them.
                         (3) the observation of the action consists of all observations of its sub-actions 
                           
                              
                                 Z
                                 A
                              
                              =
                              
                                 Z
                                 
                                    M
                                    ,
                                    N
                                 
                              
                           
                        
                     

The OR-rule defines a composite action A to be either M (∃M and !N, which means 
                           
                              
                                 A
                                 s
                              
                              =
                              
                                 M
                                 s
                              
                              ,
                              
                                 A
                                 e
                              
                              =
                              
                                 M
                                 e
                              
                              ,
                              
                                 N
                                 s
                              
                              =
                              
                                 N
                                 e
                              
                              =
                              −
                              1
                           
                        ) or N (∃N and !M, which means 
                           
                              
                                 A
                                 s
                              
                              =
                              
                                 N
                                 s
                              
                              ,
                              
                                 A
                                 e
                              
                              =
                              
                                 N
                                 e
                              
                              ,
                              
                                 M
                                 s
                              
                              =
                              
                                 M
                                 e
                              
                              =
                              −
                              1
                           
                        ), more accurately it is an exclusive OR operation. Fig. 3(c) shows the OR network structure.

The standard approach to realizing this “OR” condition in a Bayes network is to use the multiplexer CPT, with a “selector” variable [27] which we write as Ai
                         in our network. Ai
                         ∈ {M, N} indicating whether ∃M or ∃N. The prior probability P(Ai
                        |∃A), or equivalently P(∃M|∃A) and P(∃N|∃A), is extracted from the grammar’s production rule. Note that it can be manually defined or learned from training data (usually we will choose 
                           
                              P
                              
                                 (
                                 
                                    A
                                    i
                                 
                                 =
                                 M
                                 |
                                 ∃
                                 A
                                 )
                              
                              =
                              P
                              
                                 (
                                 
                                    A
                                    i
                                 
                                 =
                                 N
                                 |
                                 ∃
                                 A
                                 )
                              
                              =
                              0.5
                              ,
                           
                         unless otherwise stated).

for every composition A (both AND and OR), we can define 
                                 
                                    P
                                    
                                       (
                                       
                                          Z
                                          A
                                       
                                       |
                                       !
                                       A
                                       )
                                    
                                    =
                                    
                                       ∏
                                       
                                          M
                                          
                                          in
                                          
                                          A
                                       
                                    
                                    P
                                    
                                       (
                                       
                                          Z
                                          M
                                       
                                       |
                                       !
                                       M
                                       )
                                    
                                 
                              . However, as we show when describing the inference procedure shortly, scaling the likelihood P(Zv
                              |vs, ve
                              ) does not affect the final result. Therefore in the implementation we could choose the scaling such that 
                                 
                                    
                                       h
                                       v
                                    
                                    
                                       F
                                       v
                                    
                                    
                                       [
                                       −
                                       1
                                       ,
                                       −
                                       1
                                       ]
                                    
                                    =
                                    1
                                 
                               for every primitive v, then we can safely ignore the factors P(ZA
                              |!A) for every A.

Beside the CPT P(ve
                              |vs
                              ) and P(Zv
                              |vs, ve
                              ) for every primitive v (described in Section 4.1), we need 3 more inputs: (1) The prior P(∃S), (2) P(Ss
                              |∃S): the constraint about the start, and (3) P(Zend
                              |Se
                              , ∃S): the constraint about the end. We set 
                                 
                                    P
                                    (
                                    ∃
                                    S
                                    )
                                    =
                                    1
                                 
                               to make following formulation simple (though rule such as “S → A∣∅” can be used to emulate the case where the activity does not happen all together). For the task of activity segmentation, we can have: the start is the first time step/frame and the end is the last time step/frame of the test sequence (experiment in Section 7). On the other hand, we can assume uniform distributions about the start and the end of the activity (experiment in Section 6). In that case, our framework effectively performs detection and parsing at the same time.

has 4 main steps as following, we refer the readers to the appendix section for more detailed description:

                                 
                                    1.
                                    Forward phase: Starting from P(Ss
                                       |∃S), the propagation is performed from the high level actions to their subactions recursively, from the start of the action to the end, integrating all observations in the process. The output is P(As, Z
                                       
                                          pre(A)|∃A), P(Ae, Z
                                       
                                          pre(A), A
                                       |∃A) for every action A.

Backward phase: similarly, starting from P(Zend
                                       |Se
                                       , ∃S), we compute P(Z
                                       
                                          post(A)|Ae
                                       , ∃A) and P(Z
                                       
                                          A, post(A)|As
                                       , ∃A) for every action A (propagation in the opposite direction to the first step).

Compute the posteriors: by multiplying forward and backward messages, we get P(As, Z|∃A), P(Ae, Z|∃A) for every action A. Normalization is performed to get P(As
                                       |Z, ∃A), P(Ae
                                       |Z, ∃A). The probability of observation P(Z) can also be obtained.

Compute the probability that each action happened: we find P(∃A|Z) for every action A.

the probability of action A happening P(∃A|Z), and if that is the case, the distribution of the start and the end P(As
                              |Z, ∃A), P(Ae
                              |Z, ∃A), or even the joint of them if A is a primitive. Optionally one can choose to compute the joint posterior of the start and the end of every action, though this will significantly increase the process time.

The inference complexity to produce the above output is linear in number of nodes (number of actions in the grammar: K) and the size of CPT (T
                              2), hence it is O(K 
                              T
                              2).

First if a symbol A is on the right hand side of an OR-rule, then P(∃A|Z) is the posterior probability associated with that OR-rule. Hence we can do action recognition and infer the most probable course of actions.

Secondly we can compute P(As
                        |Z), P(Ae
                        |Z):

                           
                              (1)
                              
                                 
                                    P
                                    
                                       (
                                       
                                          A
                                          s
                                       
                                       |
                                       Z
                                       )
                                    
                                    =
                                    P
                                    
                                       (
                                       ∃
                                       A
                                       |
                                       Z
                                       )
                                    
                                    P
                                    
                                       (
                                       
                                          A
                                          s
                                       
                                       |
                                       Z
                                       ,
                                       ∃
                                       A
                                       )
                                    
                                 
                              
                           
                        for values between 1 and T (note that 
                           
                              P
                              
                                 (
                                 
                                    A
                                    s
                                 
                                 =
                                 −
                                 1
                                 |
                                 Z
                                 )
                              
                              =
                              P
                              
                                 (
                                 !
                                 A
                                 |
                                 Z
                                 )
                              
                              =
                              1
                              −
                              P
                              
                                 (
                                 ∃
                                 A
                                 |
                                 Z
                                 )
                              
                           
                        ). These distributions are shown in the experiment in Section 5. Using these distributions, estimation of when an action starts or ends can be made by picking the expected value, or the value that maximize the posterior. Even better, one could consume this whole distribution to account for the inferred uncertainty depending on specific application.

These results can be mapped back to the original grammar: to compute the distribution of actions’ timing in the original grammar, one can combine the distributions of separate actions in the compiled version corresponding to the same action in the original version.

While not the explicit goal of this paper, we can also label individual frames in terms of the action probabilities. The probability of a time step t having the label of primitive v can be computed easily:

                           
                              (2)
                              
                                 
                                    P
                                    
                                       (
                                       l
                                       a
                                       b
                                       e
                                       
                                          l
                                          t
                                       
                                       =
                                       v
                                       |
                                       Z
                                       )
                                    
                                    =
                                    
                                       ∑
                                       
                                          α
                                          =
                                          1
                                       
                                       t
                                    
                                    
                                       ∑
                                       
                                          β
                                          =
                                          t
                                       
                                       T
                                    
                                    P
                                    
                                       (
                                       
                                          v
                                          s
                                       
                                       =
                                       α
                                       ,
                                       
                                          v
                                          e
                                       
                                       =
                                       β
                                       |
                                       Z
                                       )
                                    
                                 
                              
                           
                        
                     

We obtain the distribution of the label of time step t. If A is a composition, 
                           
                              P
                              (
                              l
                              a
                              b
                              e
                              
                                 l
                                 t
                              
                              =
                              A
                              |
                              Z
                              )
                           
                         can be found be summing over all its subactions. Therefore a temporal segmentation can be produced in any hierarchy level by choosing the label that maximizes the probability. We perform activity segmentation in term of primitives in the experiments to demonstrate this feature. Even though this approach maximizes the expected frame classification accuracy, the result labeling might not represent a valid sequence of actions; this is analogous to what happens in HMMs when looking at individual time slice predictions as opposed to allowed sequences. An alternative is to derive the parsing with highest probability (the most probable course of actions), estimates the start and the end of the actions in that sequence, and then labels the frames. This is similar to applying the Viterbi parse for HMMs and then choosing the state labels for each time step within that sequence of states.

Our method as presented is an offline process: i.e. it is assumed that the entire video sequence is given available for consideration. However we can adapt it to run in an online, streaming mode if desired. This can be done by pretending the entire sequence is available and constructing the entire network at the start of the activity, where we require T to be large enough to cover all possible execution lengths. Notice that the construction of the network does not depend on the test sequence, but only on the grammar. That is, the structure of the network is fixed and can be generated in advance; the input test sequence is only used to fill in the primitive likelihood tables based upon the detectors. To do this we define the “null value” of the primitive detectors 
                           
                              
                                 F
                                 v
                              
                              
                                 [
                                 −
                                 1
                                 ,
                                 −
                                 1
                                 ]
                              
                           
                         to be the expected detection score measured over all observed intervals in the training data. This essentially sets the detectors to a value that provides no information.

As new observations are obtained, the primitive detectors are run, the likelihoods are updated and the inference process is re-computed. Each time inference is performed, we get a new distribution of the start and end times off all the actions, even those that will happen in the future. Note that each inference is independent of the other: our graphical model is not running online like a DBN. This strategy is easily applied to partially observed sequences: if calculation of Fv
                        [α, β] for some α, β cannot be done due to observation needed not available, they will keep the prior value 
                           
                              
                                 F
                                 v
                              
                              
                                 [
                                 −
                                 1
                                 ,
                                 −
                                 1
                                 ]
                              
                           
                        .

The primitive actions are the basic building blocks of the activity and the primitive detectors are the only component that processes the actual video data. Not only do they affect the action localization result, they impact the OR-rule situations. For example given A → M|N, a strong detection of subactions in M can make P(∃M|Z) higher, while diminishing P(∃N|Z) at the same time.

We view the detectors as black-boxes so that we can employ a variety detector approaches. For example it can be driven by explicitly detecting the start and the end of the action (experiment in Section 6 and 6.2). An alternative way is to perform sliding-window-detection using statistics/features computed over the [α, β] segment (experiment in Section 7.1 and Section 7.3). Ideally if the action starts at α
                        0 and ends at β
                        0 then Fv
                        [α
                        0, β
                        0] would be high and Fv
                        [α, β] would be low for every other α, β value. Note that the calculation 
                           
                              P
                              
                                 (
                                 
                                    Z
                                    v
                                 
                                 |
                                 
                                    v
                                    s
                                 
                                 =
                                 α
                                 ,
                                 
                                    v
                                    e
                                 
                                 =
                                 β
                                 )
                              
                              ∝
                              
                                 F
                                 v
                              
                              
                                 [
                                 α
                                 ,
                                 β
                                 ]
                              
                           
                         can leverage all the observation data available, not just the segment [α, β]. For example, when evaluating whether some primitive v started at time α it might make sense to look at times before 
                           
                              t
                              =
                              α
                           
                        .

If the detector provides a value that can be thought of as a likelihood, then the score can be used directly. If it is a discriminative method, then a post-processing step to calibrate the score is needed (because each detector might output different kinds of confidence scores). For example one can normalize the SVM-score and apply a sigmoid function, or apply a exponential function to the negative of the energy-score in order to obtain a score that better indicates the likelihood. The likelihood value 0 is usually discouraged as it could nullify the likelihood of other actions.

As the factor P(ve
                        |vs
                        ) accounts for the duration of the action and the factors P(Zv
                        |vs, ve
                        ) accounts for the visual information of the action, the visual detector do not need to concern consider duration. Although one could derive a detector that does separate time from visual evidence (i.e. combines the 2 factors into 1 single factor P(ve, Zv
                        |vs
                        )), we find that keeping these 2 factors separate is more flexible. In Fig. 4
                        , we show some examples of the input factors (P(ve
                        |vs
                        ) and P(Zv
                        |vs, ve
                        )) and the output (P(vs, ve
                        |Z)) of framework.

This value represents the output of the detector when the action v does not happen. A common detection strategy with a classifier is to perform non-maxima suppression and thresholding on the heatmap Fv
                            to obtain a set of detections. The 
                              
                                 
                                    F
                                    v
                                 
                                 
                                    [
                                    −
                                    1
                                    ,
                                    −
                                    1
                                    ]
                                 
                              
                            plays similar role as the threshold: a high value means the action more likely does not happen. Informally 
                              
                                 
                                    F
                                    v
                                 
                                 
                                    [
                                    α
                                    ,
                                    β
                                    ]
                                 
                                 /
                                 
                                    F
                                    v
                                 
                                 
                                    [
                                    −
                                    1
                                    ,
                                    −
                                    1
                                    ]
                                 
                                 >
                                 1
                              
                            means segment [α, β] is a positive and the confidence is proportional to that ratio value. Where 
                              
                                 
                                    F
                                    v
                                 
                                 
                                    [
                                    α
                                    ,
                                    β
                                    ]
                                 
                                 /
                                 
                                    F
                                    v
                                 
                                 
                                    [
                                    −
                                    1
                                    ,
                                    −
                                    1
                                    ]
                                 
                                 =
                                 1
                              
                            basically means “nothing is known about [α, β]” (we made use of this in streaming mode). In our implementation, we choose 
                              
                                 
                                    F
                                    v
                                 
                                 
                                    [
                                    −
                                    1
                                    ,
                                    −
                                    1
                                    ]
                                 
                              
                            to be the expected detection score so that it has above properties.

Intuitively, Fv
                           [α, β] and 
                              
                                 
                                    F
                                    v
                                 
                                 
                                    [
                                    −
                                    1
                                    ,
                                    −
                                    1
                                    ]
                                 
                              
                            put relative weights on the probability of sequence where the action happens and the sequences where it does not, respectively, when we are considering the OR-rule. For example if 
                              
                                 
                                    F
                                    v
                                 
                                 
                                    [
                                    α
                                    ,
                                    β
                                    ]
                                 
                                 /
                                 
                                    F
                                    v
                                 
                                 
                                    [
                                    −
                                    1
                                    ,
                                    −
                                    1
                                    ]
                                 
                              
                            is very big for some value α, β and these values are also temporally consistent with overall activity’s structure, this would contribute to increase the posterior probability of the sequence where action v does happen. Note that: (1) scaling Fv
                            won’t change relative ratios for different α and β and hence won’t change the inference result, (2) if the grammar does not have any OR-rules, then the value 
                              
                                 
                                    F
                                    v
                                 
                                 
                                    [
                                    −
                                    1
                                    ,
                                    −
                                    1
                                    ]
                                 
                              
                            does not matter since all actions happen.

To demonstrate the capability of SIN, we designed a simple toy assembly task, where the human operator takes wooden pieces provided in 5 different bins in the workspace and puts them together to construct an airplane model. The task’s structure is shown in Fig. 5
                     
                     . The subject first assembles the body part; follow by the optional wheel part and one of the two nose parts. Then the wing part and tail part can be done in any order. Finally the subject puts the sticker on the model. There are 40 different primitive actions and 12 complete task variations. Our dataset consists of 29 sequences; each one is about 2–3 min long. Results are generated by performing 20 trials where on each trial 3 sequences (1 of each airplane model A, B and C) are randomly selected for testing and the remaining are for training.

Each primitive action is defined as getting a piece from a bin and assembling it. The start of the action is defined as when the hand reaches the piece. In order to detect such actions, first we implement a simple color blob detector to detect the hand positions in the input frame (note that its performance is not extremely accurate: it fails to to detect the correct hands roughly 30% of the time). Then we can compute 
                        
                           
                              F
                              v
                           
                           
                              [
                              α
                              ,
                              β
                              ]
                           
                           ∝
                           N
                           
                              (
                              
                                 H
                                 α
                              
                              ;
                              
                                 μ
                                 v
                              
                              ,
                              
                                 σ
                                 v
                              
                              )
                           
                           +
                           
                              u
                              v
                           
                        
                      , where Ht
                      is the position of the hands at frame t, N(.;.) is the Gaussian density function and parameters μv, σv
                      are learned, and uv
                      is a small uniform component representing the likelihood in case the hand detector fails. Notice that: (1) in this case the action detectors reduce to special case: event detectors of the actions’ starts; (2) actions corresponding to different pieces in the same bin will end up having similar detectors (our method naturally resolves this ambiguity). One example of detection result is shown in Fig. 6.

in Fig. 7
                              , some example posterior distribution outputs when running our method on a sequence in streaming mode are shown (we encourage readers to watch the supplementary video [3]). At first no observation is available; the distributions are determined by the prior information about the start of the task (which we set to be a uniform in first 30s) and duration models of primitives. In the second plot, some first actions (Body and Nose) are detected; however it is still not clear which model is being done, hence the distributions of all possible actions overlap both in the past and future. Finally, these uncertainties are resolved when the subject is about to finish TailA part. It is recognized that model A is being assembled and the next actions going to be WingA; distributions of model B and C’s actions have all diminished. As we can see as time progresses: (1) ambiguities both in the past and future are resolved, (2) the distributions get tighter, hence the prediction of when the actions are going to happen becomes more certain. The system can also output the joint posterior of the start and end of each action, one example is shown in Fig. 6.

In Fig. 8
                              , we show the final result on a test sequence, where all actions that happened are identified and localized. To demonstrate that the system can handle noise and uncertainty, we show the result of the same sequence in 2 other cases. The second graph in the figure illustrates results where we completely disable the detectors of all actions involving bin 3. Note the bin 3 actions such as that around time-step 180 are still localized within the overall time-line, but that there is not great precision. The temporal structure — the sequencing and the duration models — provide constraint as to when action occurred.

Next consider the bottom graph of Fig. 8. Here we disable all sensing during a 45s interval. Again, the system is still able to correctly recognize the sequence of actions and roughly estimate the timings of unobserved actions, thanks to known temporal constraints.

we can use the mean of the distributions as the timing estimation, and then the event localization error can be defined as the difference between this estimation and the true timing. Fig. 9
                              
                              
                               shows how the result changes as more observations are available: the classification of the model being assembled (A, B or C) gets better, the average localization error of every actions’ start time decreases, and the entropy of those distributions (representing the uncertainty) decreases. When the whole sequence has been seen, the average localization error is less than 1 second. We also performed segmentation in offline mode (all observation is available) and the accuracy is 91.8%.

Note that by taking the mean of the distributions, we are making a guess that minimizes the expected squared distance error. On the other hand, one can integrate a custom cost function over the distribution in order to make a prediction that minimizes the expected cost. Earlier version of the framework was used in a Human Robot Collaboration experiment [28,29] where the inference runs online in real-time. The robot was required to anticipate when a human would need a given part so that it could make a plan as to when to fetch bins and when to remove them. The goal was to create a plan that minimizes the human operator’s idle time; in that situation the robot considered the entire timing distribution not just the mean.

We conducted temporal segmentation experiments on 3 different activity datasets. To apply our method, 2 components must be defined: the grammar for the activity and the visual detectors for the primitive actions. In the following sections, we describe each experiment in detail.

The first experiment is crafted to simply demonstrate the power of simple temporal coherence in labeling. The Weizmann dataset [30] has 93 sequences of 10 actions: walk, run, jump, side, bend, wave1, wave2, jump, jumpjack, skip (Fig. 10); we will consider these to be primitives [30]. To create composite activities, we concatenate 10 different actions to create long sequences in the manner of [11]. We randomly choose 1 long sequence for testing and the remaining for training.

We first describe how we implement the primitive detector: like [11] we extract the foreground mask for each frame, compute the distance transform, and then perform k-mean clustering with k  =  100 to form a codebook of visual words. For every possible interval [α, β] of the test sequence, we compute the normalized histogram of visual words h[α, β]. To detect a primitive v, we compute the distance score dv
                        [α, β] as the χ
                        2 distance to the nearest neighbor (in the set of positive training examples). Finally we define the similarity score 
                           
                              
                                 F
                                 v
                              
                              
                                 [
                                 α
                                 ,
                                 β
                                 ]
                              
                              ∝
                              
                                 
                                    (
                                    m
                                    a
                                    x
                                    
                                       (
                                       
                                          10
                                          
                                             −
                                             5
                                          
                                       
                                       ,
                                       1
                                       −
                                       
                                          d
                                          v
                                       
                                       
                                          [
                                          α
                                          ,
                                          β
                                          ]
                                       
                                       )
                                    
                                    )
                                 
                                 2
                              
                           
                        . One detection example is shown in Fig. 11(a).

Next we manually define the grammar assuming that the activity is a sequence of 30 unknown actions, each of which is either one of the 10 primitives
                        
                         or empty: 
                        S → AAAAAAAAAAAAAAAAAAAAAA...


                        A → walk∣run∣jump∣side∣bend∣wave1∣wave2∣jump∣jumpjack∣skip∣∅

This grammar covers a wide range of different sequences including the true sequence of 10 actions. Note that further increasing the maximum number of actions will not affect the segmentation result because the primitives’ duration models would eliminate the possibilities where each action is too short or too long.

The task is to recognize and segment at the same time, as in [11]. Our segmentation accuracy is 93.6%, while state-of-the-art result is 69.7% and 87.7% by discriminative methods in [10] and [11]. We can assert the confidence about each frame label using its distribution, one example shown in Fig. 11(b). We note that the grammar leverage here does not have significant structural complexity. All the system is doing is leveraging the temporal coherence enforced by duration modeling arbitrarily sequenced primitive actions.

The GeorgiaTech Egocentric Activity dataset (GTEA) [31,32] consists of 7 high level activities such as making a cheese sandwich or making coffee (Fig. 12); each action is performed by 4 subjects. There are 61 primitives (such as take spoon, take cup, open sugar, scoop sugar spoon, open water, pour water, etc). Following [32], 16 sequences are used for training and 7 for testing.

For detection, we obtained the beginning state detection scores SB
                         and ending state detection scores SE
                         of every primitive from the author [32] (the classification accuracy is 39.7%). Since these raw scores are not a good indicator of the likelihood, we define our detection score of a primitive v as Fv
                        [α, β]∝(SB
                        [v, α]SE
                        [v, β])2 to magnify the difference between positive and negative detections. To consider the sensitivity to the precise form of the detector, also test a 2nd measure with a higher exponent, where we use Fv
                        [α, β]∝(SB
                        [v, α]SE
                        [v, β])10.

The grammar is very important and design of a good grammar is not trivial. We derive our grammar using training sequences in a very simple way: S → Activity1∣Activity2∣...


                        Activity1 → Sequence1∣Sequence2|...


                        
                           
                              S
                              e
                              q
                              u
                              e
                              n
                              c
                              e
                              1
                              →
                              p
                              _
                              a
                              c
                              t
                              i
                              o
                              n
                              1
                              
                              p
                              _
                              a
                              c
                              t
                              i
                              o
                              n
                              2
                              
                              p
                              _
                              a
                              c
                              t
                              i
                              o
                              n
                              3
                              .
                              .
                              .
                           
                        
                     

...

Note that the grammar is not perfect and does not generate the test sequences. However in most case the parse that is most similar to the test sequence is recognized.

Our segmentation accuracy is 51% in the first detection score and 58% in the 2nd setting, compare with [32]’s 42% and [31]’s 33%. One example result is shown in Fig. 13.

Unlike [32], our method models the global structure of the activity and is able to natively classify high level activity using posterior probabilities associated with the first OR-rule. In this experiment, our method correctly classifies the high level activity label 6 out of 7 test sequences.

This dataset has a variety of kitchen activities performed by several subjects [33]. While the dataset does provide data from several sensors, we will only use the egocentric video data (Fig. 14). In this experiment, we work on 13 sequences of [making brownie] activity, where the action label are available [34]. The task is also performing temporal segmentation, we do it in leave-one-out cross-validation setting and report the average segmentation accuracy across 13 runs. There are 43 primitive actions; each sequence is 2 min long and has 60 actions on average.

First the grammar is needed. Since the activity is much longer (in term of string length) and the number of training sequences is limited, the simple technique in the GTEA experiment is not adequate to model the temporal structure’s variation. Therefore we derive a slightly different strategy. For each training example, we break it into N parts of equal length. The activity is then defined as a sequence of N parts, each part can be taken from the pool of training examples:


                        S → Part1 Part2 Part3...


                        Part1 → Sequence1Part1∣Sequence2Part1|...


                        Part2 → Sequence1Part2∣Sequence2Part2|...


                        
                           
                              S
                              e
                              q
                              u
                              e
                              n
                              c
                              e
                              1
                              P
                              a
                              r
                              t
                              1
                              →
                              p
                              _
                              a
                              c
                              t
                              i
                              o
                              n
                              1
                              
                              p
                              _
                              a
                              c
                              t
                              i
                              o
                              n
                              2
                              
                              p
                              _
                              a
                              c
                              t
                              i
                              o
                              n
                              3
                              .
                              .
                              .
                           
                        
                     

...

The constructed grammar admits many variations including all training example sequences. Note that (1) not all sequence generated by the grammar are valid, and (2) similar to the GTEA experiment, the grammar likely does not generate the test sequence, however it might generate something close (in term of string distance).

For the primitive action detectors, we use Dense Trajectory [5] as feature. A codebook is learned and for each video segment, a histogram of visual words is computed. Then detection scores are computed based on the χ
                        2 distance to positive examples similar to experiment in Section 7.1. However, we perform 2 additional steps: (1) raise the score to the power of M = 10, 50, 100, 300 , and (2) divide the detection score by the sum of score of all detectors. We found that this normalization step helps to make the detectors more discriminative. Fig. 4 shows an example.

The segmentation result is shown in Table 1
                        ; one example result of the frame label’s posteriors is shown in Fig. 15 where our best performance is 60%. Previous work [34] on the same task achieved 32%; though it is not directly comparable since we consider all 43 primitive actions provided in the annotation, while [34] classified 35 actions. First observe that big value of parameter M improves the performance to a certain extent. Secondly, increasing N, which means increasing the grammar’s variation, helps even though this means the grammar is becoming more ambiguous. Lastly, even with the ground-truth grammar (i.e. the test sequence is used to “train” the grammar), the performance is only at 70%, hinting that significant improvement requires better primitive detectors.

@&#CONCLUSION@&#

In this paper, we introduced the Sequential Interval Network, a novel graphical model for parsing complex structured activity sequences. First, the temporal structure of the activity is presented in the form of a stochastic context free grammar, which allows multiple levels of composition using the AND-rule and OR-rule. Next, the network is generated, where the hidden variables are the timings of the action components, allowing reasoning on interval/segmental level. Finally, we proposed an exact inference algorithm to compute the posteriors of the actions’ timings and the frames’ label.

We applied the framework for future prediction, recognizing and temporally segmenting the sequence of actions. Our method can handle noise and uncertainty in a principle and probabilistic manner. In such cases, it’s performance degrades gracefully, as demonstrated in the experiments where some detectors are disabled, or where a non-perfect grammar is used. In order to better understand and improve, future work is to further study and extend the grammar formulation and the primitive detectors.

@&#ACKNOWLEDGMENT@&#

We’d like to thank Alireza Fathi for providing data on GTEA dataset. This work was supported in part by BMW project #RD441.

we apply the implementation trick explained in Section 4.3 to safely ignore the factors P(ZA
                              |!A) for every A.

Starting from P(Ss
                              |∃S), the propagation is performed from the high level actions to their subactions recursively, from the start of the action to the end, integrating all observations in the process. The output is P(As, Z
                              
                                 pre(A)|∃A), P(Ae, Z
                              
                                 pre(A), A
                              |∃A) for every action A.

For primitive v, given P(vs, Z
                              
                                 pre(v)|∃v): we can multiply it with the duration factor P(ve
                              |vs
                              ) and visual observation factor P(Zv
                              |vs, ve
                              ) to get P(vs, ve, Z
                              
                                 pre(v), v
                              |∃v). Then marginalization can be done to get P(ve, Z
                              
                                 pre(v), v
                              |∃v) .

                                 
                                    (A.1)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                v
                                                s
                                             
                                             ,
                                             
                                                v
                                                e
                                             
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   v
                                                   )
                                                   ,
                                                   v
                                                
                                             
                                             |
                                             ∃
                                             v
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                v
                                                s
                                             
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   v
                                                   )
                                                
                                             
                                             |
                                             ∃
                                             v
                                             )
                                          
                                          P
                                          
                                             (
                                             
                                                v
                                                e
                                             
                                             |
                                             
                                                v
                                                s
                                             
                                             )
                                          
                                          P
                                          
                                             (
                                             
                                                Z
                                                v
                                             
                                             |
                                             
                                                v
                                                s
                                             
                                             ,
                                             
                                                v
                                                e
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (A.2)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                v
                                                e
                                             
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   v
                                                   )
                                                   ,
                                                   v
                                                
                                             
                                             |
                                             ∃
                                             v
                                             )
                                          
                                          =
                                          
                                             ∑
                                             
                                                t
                                                =
                                                1
                                             
                                             T
                                          
                                          
                                             P
                                             (
                                             
                                                v
                                                s
                                             
                                             =
                                             t
                                             ,
                                             
                                                v
                                                e
                                             
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   v
                                                   )
                                                   ,
                                                   v
                                                
                                             
                                             |
                                             ∃
                                             v
                                             )
                                          
                                       
                                    
                                 
                              
                           

For AND-rule A → MN: given P(As, Z
                              
                                 pre(A)|∃A), the variable Ms
                               has the same distribution:

                                 
                                    (A.3)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                M
                                                s
                                             
                                             =
                                             t
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   M
                                                   )
                                                
                                             
                                             |
                                             ∃
                                             M
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                A
                                                s
                                             
                                             =
                                             t
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             ∃
                                             A
                                             )
                                          
                                       
                                    
                                 
                              Recursively perform forward phase on M to get P(Me, Z
                              
                                 pre(M), M
                              |∃M). Next the variable Ns
                               has the same distribution:

                                 
                                    (A.4)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                N
                                                s
                                             
                                             =
                                             t
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   N
                                                   )
                                                
                                             
                                             |
                                             ∃
                                             N
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                M
                                                e
                                             
                                             =
                                             t
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   M
                                                   )
                                                   ,
                                                   M
                                                
                                             
                                             |
                                             ∃
                                             M
                                             )
                                          
                                       
                                    
                                 
                              So we can perform forward phase on N to get P(Ne, Z
                              
                                 pre(N), N
                              |∃N). The final result is the same as distribution P(Ae, Z
                              
                                 pre(A), A
                              |∃A):

                                 
                                    (A.5)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                A
                                                e
                                             
                                             =
                                             t
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   A
                                                   )
                                                   ,
                                                   A
                                                
                                             
                                             |
                                             ∃
                                             A
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                N
                                                e
                                             
                                             =
                                             t
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   N
                                                   )
                                                   ,
                                                   N
                                                
                                             
                                             |
                                             ∃
                                             N
                                             )
                                          
                                       
                                    
                                 
                              
                           

For OR-rule A → M∣N: given P(As, Z
                              
                                 pre(A)|∃A), we can represent the distribution of Ae
                               in term of Me
                               and Ne
                              . For example if A is M, then the distribution P(Ms, Z
                              
                                 pre(M)|∃M) is the same as As
                              :

                                 
                                    (A.6)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                M
                                                s
                                             
                                             =
                                             t
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   M
                                                   )
                                                
                                             
                                             |
                                             ∃
                                             M
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                A
                                                s
                                             
                                             =
                                             t
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             ∃
                                             A
                                             )
                                          
                                       
                                    
                                 
                              We can therefore perform forward phase on M to get P(Me, Z
                              
                                 pre(M), M
                              |∃M). Similarly we can find P(Ne, Z
                              
                                 pre(N), N
                              |∃N). Then distribution of Ae
                               is:

                                 
                                    
                                       
                                          
                                             
                                                
                                                   P
                                                   
                                                      (
                                                      
                                                         A
                                                         e
                                                      
                                                      
                                                      =
                                                      
                                                      t
                                                      ,
                                                      
                                                         Z
                                                         
                                                            p
                                                            r
                                                            e
                                                            (
                                                            A
                                                            )
                                                            ,
                                                            A
                                                         
                                                      
                                                      |
                                                      ∃
                                                      A
                                                      )
                                                   
                                                   
                                                   =
                                                   
                                                   P
                                                   
                                                      (
                                                      ∃
                                                      M
                                                      |
                                                      ∃
                                                      A
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         Z
                                                         N
                                                      
                                                      |
                                                      !
                                                      N
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         M
                                                         e
                                                      
                                                      
                                                      =
                                                      
                                                      t
                                                      ,
                                                      
                                                         Z
                                                         
                                                            p
                                                            r
                                                            e
                                                            (
                                                            M
                                                            )
                                                            ,
                                                            M
                                                         
                                                      
                                                      |
                                                      ∃
                                                      M
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   +
                                                   P
                                                   
                                                      (
                                                      ∃
                                                      N
                                                      |
                                                      ∃
                                                      A
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         Z
                                                         M
                                                      
                                                      |
                                                      !
                                                      M
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         N
                                                         e
                                                      
                                                      
                                                      =
                                                      
                                                      t
                                                      ,
                                                      
                                                         Z
                                                         
                                                            p
                                                            r
                                                            e
                                                            (
                                                            N
                                                            )
                                                            ,
                                                            N
                                                         
                                                      
                                                      |
                                                      ∃
                                                      N
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

Similarly, starting from P(Zend
                              |Se
                              , ∃S), we compute P(Z
                              
                                 post(A)|Ae
                              , ∃A) and P(Z
                              
                                 A, post(A)|As
                              , ∃A) for every action A (propagation in the opposite direction to the first step).

For primitive v, given P(Z
                              
                                 post(v)|ve
                              , ∃v):

                                 
                                    (A.7)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                v
                                                e
                                             
                                             ,
                                             
                                                Z
                                                
                                                   v
                                                   ,
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   v
                                                   )
                                                
                                             
                                             |
                                             
                                                v
                                                s
                                             
                                             ,
                                             ∃
                                             v
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   v
                                                   )
                                                
                                             
                                             |
                                             
                                                v
                                                e
                                             
                                             ,
                                             ∃
                                             v
                                             )
                                          
                                          P
                                          
                                             (
                                             
                                                v
                                                e
                                             
                                             |
                                             
                                                v
                                                s
                                             
                                             )
                                          
                                          P
                                          
                                             (
                                             
                                                Z
                                                v
                                             
                                             |
                                             
                                                v
                                                s
                                             
                                             ,
                                             
                                                v
                                                e
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (A.8)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   v
                                                   ,
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   v
                                                   )
                                                
                                             
                                             |
                                             
                                                v
                                                s
                                             
                                             ,
                                             ∃
                                             v
                                             )
                                          
                                          =
                                          
                                             ∑
                                             
                                                t
                                                =
                                                1
                                             
                                             T
                                          
                                          
                                             P
                                             (
                                             
                                                v
                                                e
                                             
                                             =
                                             t
                                             ,
                                             
                                                Z
                                                
                                                   v
                                                   ,
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   v
                                                   )
                                                
                                             
                                             |
                                             
                                                v
                                                s
                                             
                                             ,
                                             ∃
                                             v
                                             )
                                          
                                       
                                    
                                 
                              
                           

For AND-rule A → MN: given P(Z
                              
                                 post(A)|Ae
                              , ∃A), then Ne
                               has the same distribution:

                                 
                                    (A.9)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   N
                                                   )
                                                
                                             
                                             |
                                             
                                                N
                                                e
                                             
                                             =
                                             t
                                             ,
                                             ∃
                                             N
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             
                                                A
                                                e
                                             
                                             =
                                             t
                                             ,
                                             ∃
                                             A
                                             )
                                          
                                       
                                    
                                 
                              Recursively perform backward phase on N to get P(Z
                              
                                 N, post(N)|Ns
                              , ∃N), then Me
                               has the same distribution:

                                 
                                    (A.10)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   M
                                                   )
                                                
                                             
                                             |
                                             
                                                M
                                                e
                                             
                                             =
                                             t
                                             ,
                                             ∃
                                             M
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   N
                                                   ,
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   N
                                                   )
                                                
                                             
                                             |
                                             
                                                N
                                                s
                                             
                                             =
                                             t
                                             ,
                                             ∃
                                             N
                                             )
                                          
                                       
                                    
                                 
                              Recursively perform backward phase on M to get P(Z
                              
                                 M, post(M)|Ms
                              , ∃M), then As
                               has the same distribution:

                                 
                                    (A.11)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   A
                                                   ,
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             
                                                A
                                                s
                                             
                                             =
                                             t
                                             ,
                                             ∃
                                             A
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   M
                                                   ,
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   M
                                                   )
                                                
                                             
                                             |
                                             
                                                M
                                                s
                                             
                                             =
                                             t
                                             ,
                                             ∃
                                             M
                                             )
                                          
                                       
                                    
                                 
                              
                           

For OR-rule A → M∣N: given P(Z
                              
                                 post(A)|Ae
                              , ∃A), then Me
                               and Ne
                               has the same distribution:

                                 
                                    (A.12)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   M
                                                   )
                                                
                                             
                                             |
                                             
                                                M
                                                e
                                             
                                             =
                                             t
                                             ,
                                             ∃
                                             M
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             
                                                A
                                                e
                                             
                                             =
                                             t
                                             ,
                                             ∃
                                             A
                                             )
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (A.13)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   N
                                                   )
                                                
                                             
                                             |
                                             
                                                N
                                                e
                                             
                                             =
                                             t
                                             ,
                                             ∃
                                             N
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             
                                                A
                                                e
                                             
                                             =
                                             t
                                             ,
                                             ∃
                                             A
                                             )
                                          
                                       
                                    
                                 
                              Recursively perform backward phase on M and N to get P(Z
                              
                                 M, post(M)|Ms
                              , ∃M) and


                              P(Z
                              
                                 N, post(N)|Ns
                              , ∃N). Then:

                                 
                                    
                                       
                                          
                                             
                                             
                                             
                                                
                                                   P
                                                   (
                                                   
                                                      Z
                                                      
                                                         A
                                                         ,
                                                         p
                                                         o
                                                         s
                                                         t
                                                         (
                                                         A
                                                         )
                                                      
                                                   
                                                   |
                                                   
                                                      A
                                                      s
                                                   
                                                
                                             
                                          
                                          
                                             
                                             
                                             
                                                
                                                   
                                                      =
                                                      
                                                      t
                                                      ,
                                                      ∃
                                                      A
                                                      )
                                                      =
                                                      P
                                                      
                                                         (
                                                         ∃
                                                         M
                                                         |
                                                         ∃
                                                         A
                                                         )
                                                      
                                                      P
                                                   
                                                   
                                                      (
                                                      
                                                         Z
                                                         N
                                                      
                                                      |
                                                      !
                                                      N
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         Z
                                                         
                                                            M
                                                            ,
                                                            p
                                                            o
                                                            s
                                                            t
                                                            (
                                                            M
                                                            )
                                                         
                                                      
                                                      |
                                                      
                                                         M
                                                         s
                                                      
                                                      =
                                                      t
                                                      ,
                                                      ∃
                                                      M
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             
                                             
                                             
                                                
                                                   
                                                   +
                                                   
                                                   P
                                                   
                                                      (
                                                      ∃
                                                      N
                                                      |
                                                      ∃
                                                      A
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         Z
                                                         M
                                                      
                                                      |
                                                      !
                                                      M
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         Z
                                                         
                                                            N
                                                            ,
                                                            p
                                                            o
                                                            s
                                                            t
                                                            (
                                                            N
                                                            )
                                                         
                                                      
                                                      |
                                                      
                                                         N
                                                         s
                                                      
                                                      =
                                                      t
                                                      ,
                                                      ∃
                                                      N
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

by multiplying forward and backward messages:

                                 
                                    (A.14)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                A
                                                s
                                             
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   A
                                                   )
                                                   ,
                                                   A
                                                   ,
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             ∃
                                             A
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                A
                                                s
                                             
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             ∃
                                             A
                                             )
                                          
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   A
                                                   ,
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             
                                                A
                                                s
                                             
                                             ,
                                             ∃
                                             A
                                             )
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (A.15)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                A
                                                e
                                             
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   A
                                                   )
                                                   ,
                                                   A
                                                   ,
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             ∃
                                             A
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                A
                                                e
                                             
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   A
                                                   )
                                                   ,
                                                   A
                                                
                                             
                                             |
                                             ∃
                                             A
                                             )
                                          
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             
                                                A
                                                e
                                             
                                             ,
                                             ∃
                                             A
                                             )
                                          
                                       
                                    
                                 
                              
                           

These are equivalent to P(As, Z|∃A) and P(Ae, Z|∃A) thanks to step 0. Normalization is done to obtain the posterior P(As
                              |Z, ∃A) and P(Ae
                              |Z, ∃A).

If v is a primitive, we can have the joint:

                                 
                                    (A.16)
                                    
                                       
                                          
                                             
                                             
                                             
                                                
                                                   P
                                                   (
                                                   
                                                      v
                                                      s
                                                   
                                                   ,
                                                   
                                                      v
                                                      e
                                                   
                                                   ,
                                                   Z
                                                   |
                                                   ∃
                                                   v
                                                   )
                                                
                                             
                                          
                                          
                                             
                                             
                                             
                                                
                                                   =
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         v
                                                         s
                                                      
                                                      ,
                                                      
                                                         Z
                                                         
                                                            p
                                                            r
                                                            e
                                                            (
                                                            v
                                                            )
                                                         
                                                      
                                                      |
                                                      ∃
                                                      v
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         v
                                                         e
                                                      
                                                      |
                                                      
                                                         v
                                                         s
                                                      
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         Z
                                                         v
                                                      
                                                      |
                                                      
                                                         v
                                                         s
                                                      
                                                      ,
                                                      
                                                         v
                                                         e
                                                      
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         Z
                                                         
                                                            p
                                                            o
                                                            s
                                                            t
                                                            (
                                                            v
                                                            )
                                                         
                                                      
                                                      |
                                                      
                                                         v
                                                         e
                                                      
                                                      ,
                                                      ∃
                                                      v
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

Also we can find

                                 
                                    (A.17)
                                    
                                       
                                          P
                                          
                                             (
                                             Z
                                             )
                                          
                                          =
                                          
                                             ∑
                                             t
                                          
                                          P
                                          
                                             (
                                             
                                                S
                                                s
                                             
                                             =
                                             t
                                             ,
                                             Z
                                             )
                                          
                                       
                                    
                                 
                              
                           

starting with 
                                 
                                    P
                                    (
                                    ∃
                                    S
                                    |
                                    Z
                                    )
                                    =
                                    P
                                    (
                                    ∃
                                    S
                                    )
                                    =
                                    1
                                    ,
                                 
                               we find P(∃A|Z) for every action A recursively.

For AND-rule A → MN: given P(∃A|Z), then:

                                 
                                    (A.18)
                                    
                                       
                                          P
                                          (
                                          ∃
                                          M
                                          |
                                          Z
                                          )
                                          =
                                          P
                                          (
                                          ∃
                                          N
                                          |
                                          Z
                                          )
                                          =
                                          P
                                          (
                                          ∃
                                          A
                                          |
                                          Z
                                          )
                                       
                                    
                                 
                              
                           

For OR-rule A → M∣N: given P(∃A|Z), we compute:

                                 
                                    (A.19)
                                    
                                       
                                          P
                                          
                                             (
                                             ∃
                                             M
                                             ,
                                             Z
                                             |
                                             ∃
                                             A
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             ∃
                                             M
                                             |
                                             ∃
                                             A
                                             )
                                          
                                          
                                             ∑
                                             
                                                t
                                                >
                                                0
                                             
                                          
                                          P
                                          
                                             (
                                             
                                                M
                                                e
                                             
                                             =
                                             t
                                             ,
                                             Z
                                             |
                                             ∃
                                             M
                                             )
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (A.20)
                                    
                                       
                                          P
                                          
                                             (
                                             ∃
                                             N
                                             ,
                                             Z
                                             |
                                             ∃
                                             A
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             ∃
                                             N
                                             |
                                             ∃
                                             A
                                             )
                                          
                                          
                                             ∑
                                             
                                                t
                                                >
                                                0
                                             
                                          
                                          P
                                          
                                             (
                                             
                                                N
                                                e
                                             
                                             =
                                             t
                                             ,
                                             Z
                                             |
                                             ∃
                                             N
                                             )
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (A.21)
                                    
                                       
                                          P
                                          
                                             (
                                             ∃
                                             M
                                             |
                                             Z
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             ∃
                                             A
                                             |
                                             Z
                                             )
                                          
                                          
                                             
                                                P
                                                (
                                                ∃
                                                M
                                                ,
                                                Z
                                                |
                                                ∃
                                                A
                                                )
                                             
                                             
                                                P
                                                (
                                                ∃
                                                M
                                                ,
                                                Z
                                                |
                                                ∃
                                                A
                                                )
                                                +
                                                P
                                                (
                                                ∃
                                                N
                                                ,
                                                Z
                                                |
                                                ∃
                                                A
                                                )
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (A.22)
                                    
                                       
                                          P
                                          
                                             (
                                             ∃
                                             N
                                             |
                                             Z
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             ∃
                                             A
                                             |
                                             Z
                                             )
                                          
                                          
                                             
                                                P
                                                (
                                                ∃
                                                N
                                                ,
                                                Z
                                                |
                                                ∃
                                                A
                                                )
                                             
                                             
                                                P
                                                (
                                                ∃
                                                M
                                                ,
                                                Z
                                                |
                                                ∃
                                                A
                                                )
                                                +
                                                P
                                                (
                                                ∃
                                                N
                                                ,
                                                Z
                                                |
                                                ∃
                                                A
                                                )
                                             
                                          
                                       
                                    
                                 
                              
                           

first recursively compute P(Ae, ZA
                              |As
                              ).

For primitive v:

                                 
                                    (A.23)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                v
                                                e
                                             
                                             ,
                                             
                                                Z
                                                v
                                             
                                             |
                                             
                                                v
                                                s
                                             
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                v
                                                e
                                             
                                             |
                                             
                                                v
                                                s
                                             
                                             )
                                          
                                          P
                                          
                                             (
                                             
                                                Z
                                                v
                                             
                                             |
                                             
                                                v
                                                s
                                             
                                             ,
                                             
                                                v
                                                e
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           

For AND-rule A → MN:

                                 
                                    (A.24)
                                    
                                       
                                          
                                             
                                             
                                             
                                                
                                                   P
                                                   (
                                                   
                                                      A
                                                      e
                                                   
                                                   =
                                                   β
                                                   ,
                                                   
                                                      Z
                                                      A
                                                   
                                                   |
                                                   
                                                      A
                                                      s
                                                   
                                                   =
                                                   α
                                                   )
                                                
                                             
                                          
                                          
                                             
                                             
                                             
                                                
                                                   =
                                                   
                                                   
                                                      ∑
                                                      
                                                         t
                                                         >
                                                         0
                                                      
                                                   
                                                   
                                                      P
                                                      
                                                         (
                                                         
                                                            M
                                                            e
                                                         
                                                         =
                                                         t
                                                         ,
                                                         
                                                            Z
                                                            A
                                                         
                                                         |
                                                         
                                                            M
                                                            s
                                                         
                                                         =
                                                         α
                                                         )
                                                      
                                                      P
                                                      
                                                         (
                                                         
                                                            N
                                                            e
                                                         
                                                         =
                                                         β
                                                         ,
                                                         
                                                            Z
                                                            A
                                                         
                                                         |
                                                         
                                                            N
                                                            s
                                                         
                                                         =
                                                         t
                                                         )
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

For OR-rule A → M∣N:

                                 
                                    
                                       
                                          
                                             
                                                
                                                   P
                                                   
                                                      (
                                                      
                                                         A
                                                         e
                                                      
                                                      =
                                                      β
                                                      ,
                                                      
                                                         Z
                                                         A
                                                      
                                                      |
                                                      
                                                         A
                                                         s
                                                      
                                                      =
                                                      α
                                                      )
                                                   
                                                   =
                                                   P
                                                   
                                                      (
                                                      ∃
                                                      M
                                                      |
                                                      ∃
                                                      A
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         Z
                                                         N
                                                      
                                                      |
                                                      !
                                                      N
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         M
                                                         e
                                                      
                                                      =
                                                      β
                                                      ,
                                                      
                                                         Z
                                                         A
                                                      
                                                      |
                                                      
                                                         M
                                                         s
                                                      
                                                      =
                                                      α
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   +
                                                   P
                                                   
                                                      (
                                                      ∃
                                                      N
                                                      |
                                                      ∃
                                                      A
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         Z
                                                         M
                                                      
                                                      |
                                                      !
                                                      M
                                                      )
                                                   
                                                   P
                                                   
                                                      (
                                                      
                                                         N
                                                         e
                                                      
                                                      =
                                                      β
                                                      ,
                                                      
                                                         Z
                                                         A
                                                      
                                                      |
                                                      
                                                         N
                                                         s
                                                      
                                                      =
                                                      α
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

Then for each A:

                                 
                                    (A.25)
                                    
                                       
                                          P
                                          
                                             (
                                             
                                                A
                                                s
                                             
                                             ,
                                             
                                                A
                                                e
                                             
                                             ,
                                             Z
                                             |
                                             ∃
                                             A
                                             )
                                          
                                          =
                                          P
                                          
                                             (
                                             
                                                A
                                                s
                                             
                                             ,
                                             
                                                Z
                                                
                                                   p
                                                   r
                                                   e
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             ∃
                                             v
                                             )
                                          
                                          P
                                          
                                             (
                                             
                                                A
                                                e
                                             
                                             ,
                                             
                                                Z
                                                A
                                             
                                             |
                                             
                                                A
                                                s
                                             
                                             )
                                          
                                          P
                                          
                                             (
                                             
                                                Z
                                                
                                                   p
                                                   o
                                                   s
                                                   t
                                                   (
                                                   A
                                                   )
                                                
                                             
                                             |
                                             
                                                A
                                                e
                                             
                                             ,
                                             ∃
                                             A
                                             )
                                          
                                       
                                    
                                 
                              
                           

@&#REFERENCES@&#

