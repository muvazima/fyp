@&#MAIN-TITLE@&#The two-machine no-wait general and proportionate open shop makespan problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We consider the two-machine no-wait open shop makespan problem.


                        
                        
                           
                           We reduce the pair sequencing problem to a solvable traveling salesman problem.


                        
                        
                           
                           We present an O(n
                              log
                              n) algorithm for the proportionate problem.


                        
                        
                           
                           We also analyze the proportionate problem with unequal machine speeds.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Scheduling

Open shop

No wait

@&#ABSTRACT@&#


               
               
                  We consider the two-machine no-wait open shop minimum makespan problem in which the determination of an optimal solution requires an optimal pairing of the jobs followed by the optimal sequencing of the job pairs. We show that the required enumeration can be curtailed by reducing the pair sequencing problem for a given pair set to a traveling salesman problem which is equivalent to a two-machine no-wait flow shop problem solvable in O(n
                     log
                     n) time. We then propose an optimal O(n
                     log
                     n) algorithm for the proportionate problem with equal machine speeds in which each job has the same processing time on both machines. We show that our O(n
                     log
                     n) algorithm also applies to the more general proportionate problem with equal machine speeds and machine-specific setup times. We also analyze the proportionate problem with unequal machine speeds and conclude that the required enumeration can be further curtailed (compared to the problem with arbitrary job processing times) by eliminating certain job pairs from consideration.
               
            

@&#INTRODUCTION@&#

The open shop scheduling problem has attracted considerable attention in the literature since Gonzalez and Sahni (1976) analyzed the well-known two-machine minimum makespan O2//C
                     max problem solvable in O(n) time. Gonzalez and Sahni used the standard assumptions of job availability at time zero, no job preemption, and continuous machine availability among others. The open shop permits flexible job routing and the interest in open shop scheduling research stems from both its practical applications and computational complexity considerations. In this paper, we focus on the no-wait O2/nwt/C
                     max problem in which once a job starts processing on a machine, it must complete both operations with no waiting.


                     Sahni and Cho (1979) showed that the O2/nwt/C
                     max problem is strongly NP-hard when each job has to visit both machines. Gonzalez (1982) showed that when missing operations are allowed, the more general O/nwt/C
                     max problem (with a variable number of machines) is strongly NP-hard even if all non-missing operations have equal length. In the rest of the paper, we assume that there are no missing operations in the sense that a zero processing time implies that the job has to visit the machine for an infinitesimal amount of time ε
                     >0.

The complexity of the O2/nwt/C
                     max problem motivated researchers to consider two approaches to analyze it. The first approach is to find exact solutions through implicit enumeration and/or approximate solutions using heuristic algorithms. Liaw, Chen, and Chen (2005) proposed an exact branch and bound algorithm which can solve problems with up to 100 jobs in reasonable computational time.

With respect to heuristic algorithms, Sidney and Sriskandarajah (1999) used the exact solution for the corresponding two-machine no-wait flow shop F2/nwt/C
                     max problem (proposed by Gilmore and Gomory (1964) and implemented in O(n
                     log
                     n) time) as a heuristic solution for the O2/nwt/C
                     max problem. Sidney and Sriskandarajah (1999) showed that this heuristic algorithm has a tight worst-case ratio bound of 3/2. Yao, Soewandi, and Elmaghraby (2000) presented experimental results for this heuristic, two additional constructive heuristics and a random search algorithm.

The second approach to the O2/nwt/C
                     max problem is to impose additional conditions on the job processing times so that the problem becomes solvable in polynomial time. As Gonzalez (1982) pointed out, the O2/nwt/C
                     max problem is trivially solvable when all job processing times have equal length. A sample of restricted job processing times can be drawn from the research on the corresponding Om//C
                     max problem without the no-wait restriction. Liu and Bulfin (1987), Adiri and Aizikowitz (Hefetz) (1989) and Dror (1992) among others imposed restrictions on the job processing times so that the Om//C
                     max problem becomes solvable in polynomial time. These restrictions include machine-dependent processing times, dominant/dominated machines and ordered job processing times among others. To the best of our knowledge, no additional research has been conducted for the O2/nwt/C
                     max problem with restricted job processing times. In this paper, we consider the proportionate no-wait two-machine open shop minimum makespan problem.

The proportionate processing times assumption implies that each job j has the same processing requirement pj
                      on each machine i
                     =1,2; in that case, the resulting problem is called the proportionate no-wait open shop O2/pij
                     
                     =
                     pj
                     ,
                     nwt/C
                     max problem (see Pinedo, 2012, p. 239) where pij
                      denotes the processing time of job j
                     =1,…,
                     n on machine i
                     =1,2. A generalization of the O2/pij
                     
                     =
                     pj
                     , nwt/C
                     max problem allows for unequal machine speeds. In that case, 
                        
                           
                              
                                 p
                              
                              
                                 ij
                              
                           
                           =
                           
                              
                                 
                                    
                                       p
                                    
                                    
                                       j
                                    
                                 
                              
                              
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        
                      where si
                     
                     ⩾1 is the speed of machine i
                     =1,2; the resulting problem is denoted as the O2/pij
                     
                     =
                     pj
                     /si
                     , nwt/C
                     max problem. An alternative generalization of the O2/pij
                     
                     =
                     pj
                     , nwt/C
                     max problem allows for machine-specific setup times qi
                     , i
                     =1, 2 so that pij
                     
                     =
                     pij
                     
                     +
                     qi
                      leading to the O2/pij
                     
                     =
                     pj
                     
                     +
                     qi
                     , nwt/C
                     max problem.

We should point out that there is a significant body of research for the proportionate flow shop problem as indicated in the recent survey of Panwalkar, Smith, and Koulamas (2013). In the case of the open shop, it was shown by Liu and Bulfin (1987) and also by Dror (1992) that the O3/pij
                     
                     =
                     pj
                     /C
                     max problem is ordinary NP-hard.

While the O3/pij
                     
                     =
                     pj
                     /C
                     max problem has been shown to be ordinary NP-hard by Liu and Bulfin (1987), we will show that the O2/pij
                     
                     =
                     pj
                     , nwt/C
                     max problem and the O2/pij
                     
                     =
                     pj
                     
                     +
                     qi
                     , nwt/C
                     max problem are solvable in O(n
                     log
                     n) time. We will also show that the required enumeration for the O2/nwt/C
                     max problem (with arbitrary job processing times) and for the O2/pij
                     
                     =
                     pj
                     /si
                     , nwt/C
                     max problem can be significantly curtailed by exploiting their structural similarity to the F2/nwt/C
                     max problem.

The rest of the paper is organized as follows: In Section 2, we present some analysis for the O2/nwt/C
                     max problem with arbitrary job processing times. An optimal O(n
                     log
                     n) algorithm for the O2/pij
                     
                     =
                     pj
                     , nwt/C
                     max problem and for the O2/pij
                     
                     =
                     pj
                     
                     +
                     qi
                     , nwt/C
                     max problem is presented in Section 3. The O2/pij
                     
                     =
                     pj
                     /si
                     , nwt/C
                     max problem is analyzed in Section 4 and the conclusions of this research are summarized in Section 5.

Let A, B denote the first and the second machine respectively; we assume that the jobs are re-numbered according to the shortest processing time (SPT) order on machine A (with ties broken according to the SPT order on machine B). If the total number of jobs is odd, we add a dummy job as the first job with an infinitesimal processing time equal to ε
                     >0 on both machines to make the total number of jobs even (n
                     =2k, k integer). Let 
                        
                           P
                           =
                           
                              
                                 ∑
                              
                              
                                 j
                                 =
                                 1
                              
                              
                                 n
                              
                           
                           
                              
                                 p
                              
                              
                                 1
                                 j
                              
                           
                        
                     .

Using the common practice of defining a 
                        sequence
                      as the job ordering on a machine, there are potentially n! sequences on machine A and n! sequences on machine B. A 
                        schedule
                      is defined as a complete ordering on both machines. A permutation schedule has the same job ordering on both machines. Clearly, we can have non-permutation schedules in the open shop. Hence the number of potential schedules can approach (n!)2.

From Sahni and Cho (1979) as well as from Sidney and Sriskandarajah (1999), we know that the jobs in the two-machine no-wait open shop will be selected in pairs so we can partition the sequence of the n jobs on machine A into k pairs of jobs. When we partition a complete sequence into k pairs, we have a 
                        pair set. If two jobs {u,
                     v} form a pair, then these jobs can be scheduled (while observing the no-wait restriction) according to four different partial schedules as shown in Fig. 1
                     .

In each partial schedule in Fig. 1, the dotted lines depict the idle time(s), the double solid line depicts one job and the single solid line depicts the other job in the pair. Once we know the sequence on machine A, we have the opposite sequence on machine B. Note that due to the no-wait restriction, the completion times of the first operations for each job pair are equal to the start times of the second operations of these two jobs. Henceforth, when we refer to a schedule, we can simply identify it by the sequence on machine A.

Define δuv
                     
                     =
                     p
                     2
                     
                        v
                     
                     −
                     p
                     1
                     
                        u
                      and θuv
                     
                     =
                     p
                     2
                     
                        u
                     
                     −
                     p
                     1
                     
                        v
                     . If δuv
                     
                     >0, then δuv
                      represents the idle time on machine A at the beginning of the schedule when {u,
                     v} is scheduled and no other pairs are scheduled before it. Similarly, if θuv
                     
                     >0, then θuv
                      represents the idle time on machine A at the end of the schedule when {u,
                     v} is scheduled and no other pairs are scheduled after it. Obviously, non-positive values should be interpreted as zero idle times.

Let us assume that there are only two pairs in the set, e.g. {u,
                     v} and {x,
                     y} respectively. When these two pairs are concatenated, the actual idle time between them on machine A is given as max(0,
                     θuv
                     
                     +
                     δxy
                     ) for all partial schedules depicted in Fig. 1. The concatenated schedule will be denoted as {u,
                     v|x,
                     y}. Observe that depending on the actual job processing times values, the four partial schedules depicted in Fig. 1 differ with respect to the position of the idle time on machine A. This idle time may be at either end or at both ends of the partial schedule or it may be zero. A similar observation applies for the position of the idle time on machine B.

In order to simplify notation somewhat, we will simply use j to denote the jth pair in a schedule along with δj
                      and θj
                     . Whenever needed, we will add two dummy pairs 0 and k
                     +1 (at the beginning and at the end of the schedule respectively) with δ
                     0
                     =
                     δk
                     
                     +1
                     =
                     θ
                     0
                     =
                     θk
                     
                     +1
                     =0. We can now define the idle time on machine A between the pairs in positions j and j
                     +1 as I
                     [
                     
                        j
                     
                     ]
                     =max(0,
                     δj
                     
                     +1
                     +
                     θj
                     ). Then, the makespan can be expressed as 
                        
                           
                              
                                 C
                              
                              
                                 max
                              
                           
                           =
                           P
                           +
                           
                              
                                 ∑
                              
                              
                                 j
                                 =
                                 0
                              
                              
                                 k
                              
                           
                           
                              
                                 I
                              
                              
                                 [
                                 j
                                 ]
                              
                           
                        
                     .

Define the 
                        status
                      of a pair i as 0 (denoted by i
                     0) if the two jobs in the pair, e.g. {u,
                     v}, are such that u
                     <
                     v (that is if p
                     1
                     
                        u
                     
                     ⩽
                     p
                     1
                     
                        v
                     ); otherwise, the status of the pair is 1 (denoted by i
                     1). Also, define a pair {u,
                     v} as a 
                        standard pair
                      if u
                     =2i
                     −1, v
                     =2i, 1⩽
                     i
                     ⩽
                     k. By definition, the status of any standard pair will be zero but the reverse is not true. Some useful properties of standard pairs will be defined in the next section in connection with the proportionate open shop.

A specific way to enumerate all possible O2/nwt/C
                     max solutions is as follows:
                        
                           (1)
                           Suppose that we want to form different pair sets without making a distinction with respect to the ordering within each pair. This is equivalent to forming pair sets so that each pair has zero status. We can do this in (2k
                              −1)*(2k
                              −3)*⋯*1 different ways (see Cameron, 1994). This number is sometimes called a double factorial and is written as (2k
                              −1)!!.

For each pair set in (1) we can form 2
                                 k
                               distinct pair sets so that any two of these 2
                                 k
                               sets have non-identical pair status patterns.

There are k! possible ways to obtain a complete schedule by considering all possible pair concatenations for each pair set defined in (1) and (2) above.

Consequently, the total number of possible O2/nwt/C
                     max sequences is equal to (2k
                     −1)!!*k!*2
                        k
                     
                     =(2k)!=
                     n!.

The enumeration problem in (3) above can be formulated as a traveling salesman problem (TSP) as follows. Assume that the schedule consists of k
                     +1 pairs {0,1,…,
                     j,…,
                     k}. The “distance” values dij
                      correspond to the idle times on machine A so that the total tour distance is 
                        
                           
                              
                                 ∑
                              
                              
                                 j
                                 =
                                 0
                              
                              
                                 k
                              
                           
                           
                              
                                 I
                              
                              
                                 [
                                 j
                                 ]
                              
                           
                        
                     ; that is,
                        
                           
                              
                                 
                                    d
                                 
                                 
                                    ij
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   max
                                                
                                                (
                                                0
                                                ,
                                                
                                                   
                                                      δ
                                                   
                                                   
                                                      j
                                                   
                                                
                                                +
                                                
                                                   
                                                      θ
                                                   
                                                   
                                                      i
                                                   
                                                
                                                )
                                             
                                             
                                                ∀
                                                i
                                                
                                                ≠
                                                
                                                j
                                                ,
                                             
                                          
                                          
                                             
                                                ∞
                                                ;
                                             
                                             
                                                otherwise
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     We will now show that this is a solvable TSP by proposing a polynomial time solution procedure. Since δj
                     , θj
                      are unrestricted in sign, the structure of the dij
                      values motivates the “matching” of the θi
                      value of the prior pair i with a δj
                      value of the next pair j of opposite sign so that the sum of the max(0,
                     δj
                     
                     +
                     θi
                     ) values for the resulting complete tour is minimal.

This logic is similar to the logic used by Gilmore and Gomory (1964) to solve the F2/nwt/C
                     max problem. Let aj
                     , bj
                      denote the job processing times on machine A, B respectively in the F2/nwt/C
                     max problem. If job j follows job i, then the idle time on the first machine between the completion time of job i and the start time of job j is equal to max(0,
                     bi
                     
                     −
                     aj
                     ). This motivates the matching of the bi
                      and aj
                      values so that the sum of the max(0,
                     bi
                     
                     −
                     aj
                     ) idle time values on the first machine is minimal.

We will now outline how the k-pair TSP problem can be converted to an equivalent F2/nwt/C
                     max problem with k jobs. Observe that δj
                     , θj
                      are unrestricted in sign whereas ai
                      and bi
                      must be nonnegative. Therefore, the following transformation is needed.

Let 
                        
                           λ
                           =
                           max
                           
                              
                                 
                                    
                                       
                                          max
                                       
                                       
                                          j
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          k
                                       
                                    
                                    (
                                    
                                       
                                          
                                             
                                                
                                                   θ
                                                
                                                
                                                   j
                                                
                                             
                                          
                                       
                                    
                                    )
                                    ,
                                    
                                       
                                          max
                                       
                                       
                                          j
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          k
                                       
                                    
                                    (
                                    |
                                    
                                       
                                          δ
                                       
                                       
                                          j
                                       
                                    
                                    |
                                    )
                                 
                              
                           
                        
                     . Then, the processing times for the F2/nwt/C
                     max problem are defined as 
                        
                           
                              
                                 a
                              
                              
                                 j
                              
                           
                           =
                           -
                           
                              
                                 θ
                              
                              
                                 j
                              
                           
                           +
                           λ
                        
                      and 
                        
                           
                              
                                 b
                              
                              
                                 j
                              
                           
                           =
                           
                              
                                 δ
                              
                              
                                 j
                              
                           
                           +
                           λ
                        
                      respectively so that aj
                     
                     ⩾0 and bj
                     
                     ⩾0 for all jobs j
                     =1,…,
                     k in the F2/nwt/C
                     max problem. Also bi
                     
                     −
                     aj
                     
                     =
                     δi
                     
                     +
                     θj
                      for any i,
                     j
                     =1,…,
                     k; that is, the addition of 
                        
                           λ
                        
                      does not affect the differences of the job processing times in the F2/nwt/C
                     max problem.

We also add two dummy jobs 0 and k
                     +1 respectively at the two ends with 
                        
                           
                              
                                 a
                              
                              
                                 0
                              
                           
                           =
                           λ
                           ,
                           
                           
                              
                                 b
                              
                              
                                 0
                              
                           
                           =
                           0
                           ,
                           
                           
                              
                                 a
                              
                              
                                 k
                                 +
                                 1
                              
                           
                           =
                           0
                        
                      and 
                        
                           
                              
                                 b
                              
                              
                                 k
                                 +
                                 1
                              
                           
                           =
                           λ
                        
                      respectively (which is equivalent to adding two dummy pairs to the corresponding O2/nwt/C
                     max problem).

The two ends of a sequence for this F2/nwt/C
                     max problem are shown in Fig. 2
                      below (in which the non-zero processing times of the dummy jobs are shown with double dashed lines).


                     Gilmore and Gomory (1964) showed that the above F2/nwt/C
                     max problem can be solved in O(k
                     log
                     k) time. Therefore, the equivalent problem of concatenating optimally the k pairs (for a given pair set of the O2/nwt/C
                     max problem) can also be solved in O(k
                     log
                     k) time.

The above analysis eliminates the need to consider all possible k! pair sequences for a given pair set and therefore the required enumeration to solve the O2/nwt/C
                     max problem is curtailed from (2k
                     −1)!!*k!*2
                        k
                      to (2k
                     −1)!!*O(k log; k)*2
                        k
                      respectively.

In the O2/pij
                     
                     =
                     pj
                     , nwt/C
                     max problem, p
                     1
                     
                        j
                     
                     =
                     p
                     2
                     
                        j
                     
                     =
                     pj
                      for all jobs j
                     =1,…,2k. Also, the sequencing of any pair with status 0 yields the partial schedule I in Fig. 1 and the sequencing of any pair with status 1 yields the partial schedule II in Fig. 1. In either case, δj
                     
                     =−θj
                     
                     ⩾0 for all pairs j.
                        Observation 1
                        When we concatenate two consecutive pairs j and j
                           +1, the actual idle time between them on machine A is given as max(0,
                           δj
                           
                           +1
                           +
                           θj
                           )=max(0,
                           δj
                           
                           +1
                           −
                           δj
                           ). In other words, we can state that δj
                           
                           +1 absorbs δj
                            when δj
                           
                           +1
                           ⩾
                           δj
                           .

This observation implies that the total idle time on machine A for a complete sequence will be δ
                     max
                     =max{δj
                     } when the sequence is formed by sequencing the pairs so that the pair with the δ
                     max value is sequenced in some position w (1⩽
                     w
                     ⩽
                     k), all pairs placed in positions 1,…,
                     w
                     −1 are sequenced in the non-decreasing order of their δ values and all pairs placed in positions w
                     +1,…,
                     k are sequenced in the non-increasing order of their δ values. This type of sequence is called an SPT–LPT sequence or a pyramid sequence. Smith, Panwalkar, and Dudek (1976) showed that there are 2(
                     
                        k
                     
                     −1) possible pyramid sequences of k pairs.

Let us demonstrate this finding using a 6-job numerical example with processing times 
                        
                           
                              
                                 p
                              
                              
                                 〈
                                 1
                                 ,
                                 2
                                 ,
                                 3
                                 ,
                                 4
                                 ,
                                 5
                                 ,
                                 6
                                 〉
                              
                           
                           =
                           〈
                           1
                           ,
                           2
                           ,
                           4
                           ,
                           10
                           ,
                           11
                           ,
                           19
                           〉
                        
                      and with the jobs paired as {1,2}, {3,4} and {5,6} yielding the 1, 2, 3 job pairs respectively; therefore, δ
                     1
                     =
                     δ
                     {1,2}
                     =1, δ
                     2
                     =
                     δ
                     {3,4}
                     =6 and δ
                     3
                     =
                     δ
                     {5,6}
                     =8=
                     δ
                     max. There are 2(3−1)
                     =4 pyramid pair sequences, namely the {1,2,3}, {1,3,2},{2,3,1} and {3,2,1} pair sequences each with total idle time on machine A equal to δ
                     max
                     =8. Each of the {2,1,3} and {3,1,2} non-pyramid pair sequences has a total idle time on machine A equal to 13.

Since the total idle time on machine A of any pyramid sequence of a pair set is δ
                     max, we restrict our attention to one of these pyramid sequences, namely, the SPT sequence which is formed by arranging the job pairs in the non-decreasing order (the δ
                     ↑ order) of their δ values. Then, the problem reduces to determining a job pairing scheme so that the resulting δ
                     max value is the smallest possible. The following lemma shows that this can be accomplished by pairing the jobs according to the standard pairing scheme.
                        Lemma 1
                        
                           The standard pair set yields the minimum δmax value among all possible job pairings.
                        

Assume that the schedule with the standard pair set (S) is {1,2|3,4|⋯|n
                           −1,
                           n} and that δ
                           max corresponds to the ith pair, e.g., δ
                           max(S)=
                           δi
                           
                           =
                           p
                           2
                           
                              i
                           
                           −
                           p
                           2
                           
                              i
                           
                           −1. Consider any other non-standard pair set NS and its δ
                           max(NS) value. We will show that δ
                           max(NS)⩾
                           δ
                           max(S). If the standard pair {2i
                           −1,2i}∈
                           NS, then δ
                           max(NS)⩾
                           δ
                           max(S). If {2i
                           −1,2i}∉
                           NS, then the un-pairing of the {2i
                           −1,2i} pair in NS combined with any alternative pairing of the jobs will necessitate the pairing of two jobs x, y in NS with x
                           ⩽2i
                           −1 and y
                           ⩾2i so that {x,
                           y}≠{2i
                           −1,2i}. By the way the standard pairs are constructed, δ
                           {
                           
                              x
                           
                           ,
                           
                              y
                           
                           }
                           ⩾
                           δ
                           {2
                           
                              i
                           
                           −1,2
                           
                              i
                           
                           }; therefore, δ
                           max(NS)⩾
                           δ
                           {
                           
                              x
                           
                           ,
                           
                              y
                           
                           }
                           ⩾
                           δ
                           {2
                           
                              i
                           
                           −1,2
                           
                              i
                           
                           }
                           =
                           δ
                           max(S).□

The proposed solution procedure for the O2/pij
                     
                     =
                     pj
                     ,
                     nwt/C
                     max problem can now be summarized as follows in an algorithmic form.
                        
                           
                              
                              
                                 
                                    
                                       Algorithm: PRPT_NWT for the O2/pij
                                       
                                       =
                                       pj
                                       ,
                                       nwt/C
                                       max problem.
                                 
                              
                              
                                 
                                    
                                       Step 1: If the number of jobs is odd, then add a dummy job with zero processing times. Re-number the 2k jobs according to the SPT order and consider the standard pair set {1,2|3,4|,⋯|n
                                       −1,
                                       n}.
                                 
                                 
                                    
                                       Step 2: For each job pair {2j
                                       −1,2j}, compute δj
                                       
                                       =
                                       p
                                       2
                                       
                                          j
                                       
                                       −
                                       p
                                       2
                                       
                                          j
                                       
                                       −1.
                                 
                                 
                                    
                                       Step 3: Sequence the pairs according to the δ
                                       ↑ order of their δ values and concatenate them to form an active schedule. The resulting schedule is optimal with 
                                          
                                             
                                                
                                                   C
                                                
                                                
                                                   max
                                                
                                                
                                                   ∗
                                                
                                             
                                             =
                                             P
                                             +
                                             
                                                
                                                   δ
                                                
                                                
                                                   max
                                                
                                             
                                          
                                        where 
                                          
                                             
                                                
                                                   C
                                                
                                                
                                                   max
                                                
                                                
                                                   ∗
                                                
                                             
                                          
                                        denotes the optimal makespan value.
                                 
                                 
                                    
                                       End.
                                 
                              
                           
                        
                     
                  

The running time of the PRPT_NWT algorithm is O(n
                     log
                     n)+
                     O(k
                     log
                     k)≈
                     O(n
                     log
                     n) dominated by the initial sorting operation of the n jobs. The optimality of the PRPT_NWT algorithm follows from the 
                        
                           
                              
                                 C
                              
                              
                                 max
                              
                              
                                 ∗
                              
                           
                        
                      expression and Lemma 1.

We show next that our findings for the O2/pij
                     
                     =
                     pj
                     , nwt/C
                     max problem also extend to the more general O2/pij
                     
                     =
                     pj
                     
                     +
                     qi
                     , nwt/C
                     max problem. In the O2/pij
                     
                     =
                     pj
                     
                     +
                     qi
                     , nwt/C
                     max problem, pij
                     
                     =
                     pj
                     
                     +
                     qi
                      where qi i
                     =1,2 is the machine setup time same for all jobs on a given machine.

In a no-wait environment, the actual processing should commence immediately after the setup for both operations of each job. Let us assume that the original setup times are 
                        
                           
                              
                                 q
                              
                              
                                 1
                              
                              
                                 ′
                              
                           
                           ,
                           
                           
                              
                                 q
                              
                              
                                 2
                              
                              
                                 ′
                              
                           
                        
                      with 
                        
                           
                              
                                 q
                              
                              
                                 2
                              
                              
                                 ′
                              
                           
                           ⩾
                           
                              
                                 q
                              
                              
                                 1
                              
                              
                                 ′
                              
                           
                        
                      (the case 
                        
                           
                              
                                 q
                              
                              
                                 2
                              
                              
                                 ′
                              
                           
                           <
                           
                              
                                 q
                              
                              
                                 1
                              
                              
                                 ′
                              
                           
                        
                      is symmetric). It is well known that if all actual job processing times in a given problem instance are reduced by the same amount, the optimal sequence does not change. Therefore, we can analyze an equivalent problem with 
                        
                           
                              
                                 q
                              
                              
                                 2
                              
                           
                           =
                           q
                           =
                           
                              
                                 q
                              
                              
                                 2
                              
                              
                                 ′
                              
                           
                           -
                           
                              
                                 q
                              
                              
                                 1
                              
                              
                                 ′
                              
                           
                           ⩾
                           0
                        
                      and q
                     1
                     =0; that is, there is a fixed set up time only on the second machine.

The findings of lemma 1 hold for the O2/pij
                     
                     =
                     pj
                     
                     +
                     qi
                     , nwt/C
                     max problem because all p
                     2
                     
                        j
                      values are increased by the same constant value q. It is more convenient to consider the total idle time on machine B when analyzing the O2/pij
                     
                     =
                     pj
                     
                     +
                     qi
                     , nwt/C
                     max problem. Then, the PRPT_NWT algorithm will utilize standard job pairing with status 0 pairs and sequence them in the δ
                     ↑ order yielding a schedule with exactly one idle time interval equal to δ
                     max at the end of the sequence on machine B.

Let us generate a sequence for the O2/pij
                     
                     =
                     pj
                     
                     +
                     qi
                     , nwt/C
                     max problem by implementing the PRPT_NWT algorithm. The resulting schedule will have exactly one idle time interval equal to max(0,
                     δ
                     max
                     −
                     q) at the end of the sequence on machine B. In other words, if q
                     ⩾
                     δ
                     max, there is no idle time at all on machine B and the constructed schedule is optimal because the total processing requirements on machine B is a lower bound on 
                        
                           
                              
                                 C
                              
                              
                                 max
                              
                              
                                 ∗
                              
                           
                        
                     . On the other hand, if q
                     <
                     δ
                     max, there is exactly one idle time interval equal to δ
                     max
                     −
                     q at the end of the sequence on machine B. The optimality of the constructed schedule follows from lemma 1 and the fact that q is a constant.

We close this section by commenting on our findings for the O2/pij
                     
                     =
                     pj
                     , nwt/C
                     maxproblem from the viewpoint of time lags. Fondrevelle, Oulamara, and Portmann (2006), Fondrevelle, Oulamara, Portmann, and Allahverdi (2009) define three types of time lags: minimal, maximal and exact. These lags also can be start–start, stop–stop or stop–start. A minimal start–start (stop–stop) time lag represents the minimum amount of time that must elapse between the start (completion) of the first operation and the start (completion) of the second operation. A positive exact stop–start lag represents the travel time between the two operations and the job must start the second operation immediately upon the transfer. A positive minimal stop–start lag represents the travel time between two operations and the job can start the second operation any time after the transfer. The no wait condition is equivalent to a zero exact stop–start lag for jobs. The classical open shop problem has a minimal stop–start lag equal to zero for all jobs.


                     Yu (1996) showed that the O2/pij
                     
                     =
                     pj
                     /C
                     max problem is at least ordinary NP-hard when there is a minimal positive stop–start lag even if it has equal value for all jobs. Our findings in this section show that the replacement of the minimal positive stop–start lag with an exact zero stop–start lag for all jobs makes the above ordinary NP –hard problem solvable in O(n
                     log
                     n) time.

Without loss of generality we may assume that s
                     2
                     >
                     s
                     1
                     =1. It was shown in the previous section that the standard pair set is dominant for the O2/pij
                     
                     =
                     pj
                     , nwt/C
                     max problem. Unfortunately, this property does not extend to the O2/pij
                     
                     =
                     pj
                     /si
                     , nwt/C
                     max problem.

Consider, for example, the following 10-job problem with s
                     2
                     =1.25;
                        
                           
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                                 
                                    Job j
                                    1
                                    2
                                    3
                                    4
                                    5
                                    6
                                    7
                                    8
                                    9
                                    10
                                 
                              
                              
                                 
                                    
                                       p
                                       1
                                       
                                          j
                                       
                                    
                                    1
                                    4
                                    4
                                    12
                                    13
                                    15
                                    16
                                    20
                                    21
                                    40
                                 
                              
                           
                        
                     
                  

If we only consider the standard pair set, the resulting best schedule is {5,6,1,2,7,8,3,4,9,10} with C
                     max
                     =148.2. However, 
                        
                           
                              
                                 C
                              
                              
                                 max
                              
                              
                                 ∗
                              
                           
                           =
                           P
                           =
                           146
                        
                      for the {4,5,6,9,3,7,8,10,1,2} schedule. Therefore, in the worst case, the enumeration of all (2k
                     −1)!! pair sets is needed to solve the O2/pij
                     
                     =
                     pj
                     /si
                     , nwt/C
                     max problem.

We can show that the computational effort for the O2/pij
                     
                     =
                     pj
                     /si
                     , nwt/C
                     max problem is smaller compared to the one for the O2/nwt/C
                     max problem with arbitrary job processing times. We begin with the following observation about job pairs for the O2/pij
                     
                     =
                     pj
                     /si
                     , nwt/C
                     max problem.
                        Observation 2
                        For any j
                           0 pair, θj
                           
                           <0 and |θj
                           |⩾|δj
                           |. Similarly, for any j
                           1 pair, δj
                           
                           <0 and |δj
                           |⩾|θj
                           |. When we concatenate two pairs i and j, the idle time between them on machine A is given as max(0,
                           δj
                           
                           +
                           θi
                           ) and the only way δj
                           , θi
                            can be both non-negative is when i and j do not have the same status. Therefore it is beneficial for all pairs in a sequence to have the same status.

Observation 2 leads to the following lemma.
                        Lemma 2
                        
                           For the O2/pij
                              =pj/si, nwt/Cmax problem, there exists an optimal schedule with zero status for all pairs.
                        

Without loss of generality, we may assume that the first pair in an optimal sequence has zero status. Let us also assume that the second pair in that sequence has status one. By observation 2, the idle time on machine A is no greater if we reverse the status of the second pair. The repeated application of this argument to all subsequent pairs in the sequence yields the desired result.□

Lemma 2 implies that only (2k
                     −1)!! pair sets should be evaluated. The optimal sequence for each pair set can be determined by defining and solving in O(k
                     log
                     k) time the equivalent F2/nwt/C
                     max problem as in Section 2.

By combining all our findings so far, we conclude that the O2/pij
                     
                     =
                     pj
                     /si
                     , nwt/C
                     max problem can be solved in (2k
                     −1)!!*O(k
                     log
                     k) time in the worst case. Our findings do not settle the issue of the complexity of the O2/pij
                     
                     =
                     pj
                     /si
                     , nwt/C
                     max problem which remains open. The problem instance used by Sahni and Cho (1979) in their complexity proof for the general O2/nwt/C
                     max problem does not satisfy the assumptions of the proportionate problem with unequal machine speeds. However, the non-dominance of the standard pair set diminishes the possibility of a polynomial time algorithm for the O2/pij
                     
                     =
                     pj
                     /si
                     ,
                     nwt/C
                     max problem.

@&#CONCLUSIONS@&#

We analyzed the O2/nwt/C
                     max problem with arbitrary job processing times and showed that the required enumeration can be curtailed from (2k
                     −1)!!*k!*2
                        k
                      to (2k
                     −1)!!*O(k
                     log
                     k)*2
                        k
                      by reducing the pair sequencing problem for a given pair set to a traveling salesman problem which is equivalent to an F2/nwt/C
                     max problem solvable in O(k
                     log
                     k) time. We then proposed an optimal O(n
                     log
                     n) time algorithm for the O2/pij
                     
                     =
                     pj
                     , nwt/C
                     max problem and showed that the proposed algorithm also solves the more general O2/pij
                     
                     =
                     pj
                     
                     +
                     qi
                     , nwt/C
                     max problem with machine-specific setup times. We then showed that the required enumeration for the O2/pij
                     
                     =
                     pj
                     /si
                     , nwt/C
                     max problem (with unequal machine speeds) can be further curtailed to (2k
                     −1)!!*O(klog k) because only pairs with status 0 should be considered in that case.

Our results also apply to the corresponding two-machine open shop problem with blocking (the O2/blk/C
                     max problem) in which there is no buffer space between the two machines and any job completing its first operation must remain on the respective machine until the other machine becomes available. The no wait environment is generated in line robotic cells in which robots are located along a transport system such as a conveyor. The blocking environment is generated in just-in-time production lines in which the kanban control system maintains a fixed limit of in-process inventory. As pointed out by Yao et al. (2000), the O2/blk/C
                     max problem is essentially the same as the O2/nwt/C
                     max problem. This is because, an O2/blk/C
                     max schedule can be converted to an O2/nwt/C
                     max schedule with the same makespan value by shifting appropriately any blocked operation so that its completion time coincides with the start time of the other operation of the same job.

The complexity of the three-machine O3/pij
                     
                     =
                     pj
                     , nwt/C
                     max problem cannot be deduced from known complexity results and it remains open. Our analysis in Section 3 is not extendable to the O3/pij
                     
                     =
                     pj
                     , nwt/C
                     max open shop problem.

The concept of standard pairs for the two-machine proportionate open shop can be extended to other objective functions such as the minimization of the total job completion time (∑
                     Cj
                     ) in future research initiatives. One conjecture, suggested by a referee, is whether the arrangement of the standard job pairs according to the SPT order of the job processing times is optimal for the O2/pij
                     
                     =
                     pj
                     , nwt/∑
                     Cj
                      problem. This SPT order does not necessarily coincide with the optimal δ
                     ↑ order for the O2/pij
                     
                     =
                     pj
                     ,
                     nwt/C
                     max problem. We obtained optimal solutions by enumeration for a number of O2/pij
                     
                     =
                     pj
                     ,
                     nwt/∑
                     Cj
                      problem instances (with a small number of jobs per problem) without identifying a counter example to this conjecture. However, a formal proof of this conjecture (or the identification of a counter example) will require substantial additional research effort.

@&#ACKNOWLEDGEMENTS@&#

We would like to thank two anonymous referees for their constructive criticism which helped us improve earlier versions of this paper.

@&#REFERENCES@&#

