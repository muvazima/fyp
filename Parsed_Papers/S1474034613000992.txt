@&#MAIN-TITLE@&#A semantic knowledge management system for laminated composites

@&#HIGHLIGHTS@&#


               
                  
                   Knowledge management issues in laminated composites engineering are identified. • A semantic framework for laminated composites design based on ontologies is built. • Integrated with public material databases and manufacturability and analysis tools. • Design of a wind turbine blade used as case study. • Powerful querying and inferencing abilities demonstrated.
               
            

@&#KEYPHRASES@&#

Ontologies

Laminated composites

Semantic

Integration

Interoperability

@&#ABSTRACT@&#


               
               
                  The engineering of laminated composite structures is a complex task for design engineers and manufacturers, requiring significant management of manufacturing process and materials information. Ontologies are becoming increasingly commonplace for semantically representing knowledge in a formal manner that facilitates sharing of rich information between people and applications. Moreover, ontologies can support first-order logic and reasoning by rule engines that enhance automation. To support the engineering of laminated composite structures, this work developed a novel Semantic LAminated Composites Knowledge management System (SLACKS) that is based on a suite of ontologies for laminated composites materials and design for manufacturing (DFM) and their integration into a previously developed engineering design framework. By leveraging information from CAD/FEA tools and materials data from online public databases, SLACKS uniquely enables software tools and people to interoperate, to improve communication and automate reasoning during the design process. With SLACKS, this paper shows the power of integrating relevant domains of the product life cycle, such as design, analysis, manufacturing and materials selection through the engineering case study of a wind turbine blade. The integration reveals a usable product-life-cycle knowledge tool that can facilitate efficient knowledge creation, retrieval and reuse from design inception to manufacturing of the product.
               
            

The use of laminated composites in engineered products has seen a rapid rise in recent years. Companies dealing with projects involving laminated composites have a difficult time trying to efficiently manage the large amount of knowledge throughout the product life cycle. There is usually some loss of clarity about the information in the design-to-manufacturing process flow as the cycle advances [1]. This is especially true in the case of automobile and aerospace industries where laminated composites are heavily used. For example, consider the construction of Boeing’s Dreamliner. It includes thousands of parts and involves designing laminated composite structures for which the design engineers spend days trying to evaluate the right choice of material combinations. This is because there is an abundance of materials to choose from in the design of a laminated composite part. Ideally, design engineers will constantly interact with the analysis and manufacturing engineers to brainstorm and discuss major issues of laminated composites such as materials selection, zonal stresses, failure criteria, fiber orientations, draping and warpage, to name a few [2]. However, in reality, design, analysis and manufacturing engineers do not work together constantly. Instead, they often tend to recede from the big picture and focus on their own domains, often leading to conflicts of interest [2]. Thus, the large amount of knowledge coupled with a serial product development process usually causes multiple design iterations, excessive design reviews, large lead times and high costs.

Since the design and manufacturing of laminated composites are highly knowledge intensive activities, efficient mechanisms for capturing, reusing, and sharing the wealth of knowledge involved are sorely needed. The first challenge is the creation of web-enabled knowledge bases that will replace existing knowledge structures to facilitate consistent exploitation of knowledge throughout its life cycle. Creation of such knowledge models requires a solid understanding of the concepts of the attendant domain along with the interrelationships and concept attributes [3]. Also, the problem of the increasingly heterogeneous and distributed nature of current engineering environments and the lack of synergy needs to be addressed [4]. Hence, the second challenge is to bridge the gap between legacy systems and to integrate the various product life cycle domains. This can be done, for example, by leveraging output information from Computer Aided Design (CAD) or Finite Element Analysis (FEA) software typically used in organizations that design with laminated composites.

Another critical aspect is that the scientific data and knowledge such as laminated composite materials testing data generated in organizations and institutes are available on the Internet as Wikis, e-Journals, and online databases [5]. These resources are often de-coupled or at best loosely linked with each other, and their “representation, terminology, and formats are not standardized” [5]. Hence, the third challenge is to develop an efficient knowledge structure which unifies such existing web resources for laminated composite materials and integrates these information resources with the design, analysis and manufacturing domains for laminated composite products.

Ontologies are extensively used to formalize domain knowledge with concepts, attributes, relationships and instances resulting in “reliable, verifiable and computer-interpretable knowledge mappings of a domain” [3]. Formal engineering ontologies can also address semantic interoperability issues between legacy systems because of their compatibility with the Semantic Web. Thus, ontologies offer the promise of efficient integration and transfer of knowledge between the various domains in the product life cycle. Further, automated reasoning capabilities of ontologies can provide us with a semantic knowledge base that can act as an expert system for engineers to aid in certain design situations such as materials selection. Hence, we find that ontologies are potentially a powerful tool to help address all of the three challenges mentioned before.

In summary, the engineering of laminated composite products (1) involves a large volume of information and knowledge spread across the domains of design, manufacturing, and analysis, (2) there is a general lack of formal semantic information models for capturing and sharing this engineering information and knowledge, and (3) the result is a disjoint nature of work between the domain experts that hinders efficient collaboration, and a lack of reuse of information and knowledge. To resolve this situation, we developed SLACKS – the Semantic LAminated Composites Knowledge Management System. The foundation of SLACKS is a laminated composite materials ontology that can assist the design engineers in finding adequate and relevant information. Furthermore, the laminated composite materials ontology standardizes the domain knowledge structure to enable consolidation of scientific and engineering data from existing resources. The design of laminated composites is closely related to its manufacturing processes and techniques, as the lay-up on the mold and the curing stage describe the setting of the final design. This is one specific reason for multiple design reviews and increased production times in laminated composites manufacturing environments. Hence, better integration of design, analysis and manufacturing domains in laminated composites engineering is required. Accordingly, SLACKS includes complementary ontologies related to the design for manufacturing (DFM) of laminated composite products. To facilitate a holistic approach to the laminated composites design process, SLACKS is integrated with a previously developed suite of ontologies for facilitating engineering design, called the e-Design framework (see [6–15]). The application and effectiveness of SLACKS is demonstrated through the design, analysis, and manufacturing of a laminated composite wind turbine blade.

The field of knowledge management and representation has been evolving continuously over the past three decades. Alavi and Leidner [16] summarize the conceptual foundations, taxonomies and research issues in the field of knowledge management systems. Of particular importance are the definitions for data, information and knowledge. In short, data are facts, information is processed data and knowledge is personalized information [16]. Therefore, one can possibly have too much information or too little knowledge. However, there exist knowledge taxonomies based on different perspectives. Examples include tacit, explicit, declarative and pragmatic types of knowledge [16]. In the case of engineering design, we tend to deal mostly with explicit knowledge.

In the engineering realm, collaboration between knowledge experts in different domains is one of the first steps towards effective knowledge management strategies [17–19]. In 1994, the International Organization for Standardization (ISO) came up with ISO 10303 – STandard for the Exchange of Product model data (STEP) for efficiently exchanging electronic product data between computer-based product life cycle tools. Pratt [20] has given a brief review of STEP. Since then, there has been a strong push to effectively use structured knowledge to improve the work in the engineering domain. For instance, one of the key research efforts was the Methodology and tools Oriented to Knowledge-based engineering Applications (MOKA) project [21]. The MOKA project aimed at developing a standard methodology for the development and maintenance of knowledge-based engineering applications for product design [21]. Szykman et al. [22] introduced the concept of design repositories through the National Institute of Standards and Technology (NIST) Design Repository Project that helps store a large amount of corporate engineering design knowledge and thus reduce product development times. Also, an infrastructure for efficient exchange of information to address the issue of poor interoperability between Computer-Aided Engineering (CAE) software tools was put forth by Szykman et al. [23]. The drive towards the importance of knowledge in representing product models along with representing design rationale began with Szykman et al. [24]. Substantial efforts on the NIST Design Repository Project later evolved into the NIST Core Product Model (CPM) which divides artifact information into categories of form, function and behavior [25]. Unified Modeling Language (UML) diagrams detail the structure of CPM [25].

The use of ontologies in engineering and scientific knowledge management can be dated as far back as 1994 when the Plinius ontology for ceramic materials was created [26]. In 1996, an ontology for managing requirements in engineering design was proposed by Lin et al. [27]. Horváth et al. [28] then proposed formalizing design concepts using ontologies. It was becoming evident that ontologies not only provided formal structures for concepts and vocabularies, but they also had the potential for supporting inferences based on collective knowledge [29]. Shortly thereafter, the vision of a machine-interpretable “Semantic Web” was born [30]. The application of the Semantic Web in the field of knowledge management is discussed by Fensel et al. [31]. Earlier efforts in semantic mark-up languages include the Extensible Markup Language (XML), Resource Description Framework (RDF), Ontology Inference Layer (OIL) and Defense Advanced Research Projects Agency (DARPA) Agent Markup Language (DAML). Currently, the Web Ontology Language (OWL) is the de facto standard for developing and representing ontologies. OWL is recommended by the World Wide Web Consortium (W3C) as the ontology language of the Semantic Web. OWL uses RDF/XML as the standard serialization which means that OWL-based ontologies can be parsed through open-source web-based technologies. OWL-DL is a sub-language of OWL that employs Description Logic (DL), which is an implementation of first-order logic. Mocko et al. [32] have discussed DL in detail and the necessities for its use in engineering information management.

Recent research efforts focused on ontologies and ontology development methods for engineering design include the Product Family Ontology Development Methodology (PFODM) by Nanda et al. [33]. Ahmed et al. [34] describe a six-stage methodology for developing ontologies for engineering design. Also, an ontology-based approach is used to develop product configuration systems [35]. Li et al. [36] propose an Engineering Ontology (EO) based semantic framework for representing design information in documents, thus aiding their efficient retrieval. Chang et al. [37] describe the development and utilization of ontologies specifically for Design for Manufacturing (DFM). A design ontology development approach is presented by Storga et al. [38]. Bock et al. [39] combined model-based approaches such as CPM with the open world semantics of ontologies for improving collaborative design. Finally, Barbau et al. [40] went further by integrating STEP geometric models and non-geometric product model information with OWL to create semantically rich OntoSTEP models.

In contrast to general engineering design, the area of composites design, and in particular laminated composites design, has seen considerably less work with respect to knowledge management and ontological modeling. Verhagen and Curran [3] have developed an ontology that is limited to the composites manufacturing domain pertaining to the field of aerospace. SLACKS is significantly different in that the design, analysis, materials and manufacturing domains are integrated to effectively aid engineers with collaboration and sharing of information pertaining to laminated composites.

On another note, Sapuan [41] has shown that a knowledge-based system for materials selection is essential for efficient engineering design. Similarly, efforts have been made to efficiently standardize and exchange materials information. For example, the Materials Markup Language (MatML) [42] is one of the popular efforts to create a materials information exchange standard based on XML schemas. However, lack of semantics in XML representation has led to comprehensive development efforts in OWL such as the research performed by Cheung et al. [43] and Ashino [5]. Ashino and Fujita [44] have proposed an OWL structure for design-oriented materials selection. Thus, there is a close correlation between engineering knowledge management, information exchange and materials selection. With SLACKS, this work demonstrates the integration of the design and analysis domains with the materials domain to address issues such as materials selection while designing laminated composite parts.


                     SLACKS is built upon the concepts borrowed from a previously developed suite of ontologies for engineering design called the e-Design framework [6–15]. The sections that follow will explain SLACKS and its benefits in detail. Section 3 will introduce SLACKS with relevant background information and then expand the description on its underlying knowledge structure. Section 4 will show how SLACKS was developed into a knowledge base for storing and retrieving materials information. Then, Section 5 will outline the process of integrating the design and analysis domains through SLACKS and the advantages of the overall integration.

The purpose of SLACKS is twofold. Firstly, this development effort is tailored towards the creation of the right knowledge structure for use with the design for laminated composite products and the standardization of concepts in that domain. Secondly, the goal is to support the transfer of relevant product life cycle related information from CAD/FEA tools and spreadsheets to provide an integrated environment for collaboration between people and software tools within an organization. As a result of these efforts, this work also develops an expert materials selection knowledge base when combined with DL rules that operate on the domain knowledge.


                     Fig. 1
                      outlines the relevant domains that are integrated in SLACKS. SLACKS is written in OWL-DL as mentioned earlier in Section 2. The tool used to develop ontologies for SLACKS is Protégé-OWL. Consistency checking is a functionality of many Protégé plug-in reasoners which ensures that the implemented ontology is logically correct. One of the primary consistency checks is satisfiability. For example, the satisfiability check of the PELLET reasoner [45] verifies whether or not it is possible for an instance to be created in a class given the restrictions implemented in the classes. Protégé also supports the Semantic Web Rule Language (SWRL) that assists in making assertions and logical inferences within SLACKS. SWRL rules combined with OWL provide the intelligence that makes SLACKS an expert system for materials selection in the domain of laminated composite products.

The e-Design framework consists of a suite of previously developed ontologies for the purposes of collaboration and automated reasoning during the engineering design process. This framework of modular ontologies allows the storing and reuse of design knowledge throughout the entire design process and improves communication at all design stages by sharing information in a formal documentation platform [46]. In this framework individual modules can be dynamically linked as needed for a given application. The knowledge base for any specific design may be created by instantiation within the framework with the relevant information [46]. Furthermore, designers will benefit directly from the improved documentation for access to the most applicable information. Advantages include maintaining the consistency of the information throughout the process while limiting any redundancy in the entering or use of the specific information. More details about the framework can be found in earlier publications [6–15].

To facilitate the standardization of units, NASA has already developed a ‘Units’ domain ontology which is available from and maintained by the Jet Propulsion Laboratory in their suite of Semantic Web for Earth and Environmental Terminology (SWEET) ontologies on their website. The development of SLACKS reuses this ‘Units’ ontology to leverage their work. Reusing existing domain ontologies is one of the primary advantages of developing other related ontologies and is recommended [47]. The value of any property in SLACKS that requires units will draw upon the published NASA ‘Units’ ontology.

A number of generic methodologies to construct ontologies are available apart from specific methodologies for engineering design as described in Section 2. Pinto and Martins [47] give an overview of these generic development methodologies such as the Tove, Enterprise and Methontology methodologies. However, none of these methodologies are a de facto standard. The common steps involved in the ontology development life cycle as summarized by Pinto and Martins [47] involves (1) Specification, (2) Conceptualization, (3) Formalization, (4) Implementation, (5) Maintenance, (6) Knowledge Acquisition, (7) Evaluation, and (8) Documentation. SLACKS was developed along these lines.


                     Fig. 2
                      shows a high-level diagrammatic representation of the concepts as classes in SLACKS encompassing the composite materials and DFM laminated composites ontologies. In SLACKS the general concepts for components, design models and engineering analyses have been adopted from the e-Design framework. Now, any composite structure composed of laminated composites has the concept of ‘Laminate’, ‘Ply’ and ‘Core’ [48]. These classes are assigned to be sub-classes of the ‘Artifact’ class [25]. This is part of the formalization step. When the formalization is developed in Protégé, the ontology has been implemented. Practically, a laminate can have sub-laminates but a ply cannot have sub-plies. All laminates will have one to many plies for which the fibers are oriented in certain directions represented by the property of ‘has_Fiber_Orientation’. The set of laminated composite materials is populated in the ‘Fiber-reinforced Composite’ class which is a sub-class of ‘Composite’ under the ‘Material’ class (Fig. 2). Under the ‘Fiber-Reinforced_Composite’ class, we have the ‘Continuous_Fiber’ class under which we have the ‘Laminated’ class [48].

The ‘Laminated’ class has sub-classes that define the orientation of the fibers. These classes are excellent examples of class restrictions implemented in SLACKS. For example, the sub-class, ‘Uni-Directional’ has a necessary condition that the object property ‘has_Fiber_Orientation’ is exactly one, while the class ‘Multi-directional’ has a necessary condition that it ‘has_Fiber_Orientation’ of a minimum of two. Such class restrictions help to automatically populate instances to the relevant classes without violating the theory of the concepts present in the domain.

The ‘Material’ class in SLACKS is categorized based on the OWL structure classification in the MatOnto ontology proposed by Cheung et al. [43], one major difference being that the concept of “Hybrid Material” is replaced by the ‘Composite’ class. The high-level classification of the ‘Material_Property’ class in SLACKS is based on the structure of the Property ontology presented by Ashino [5]. The datatype properties of the laminated composite materials such as transverse and longitudinal moduli of elasticity are assigned based on the availability and organization of data presented in MIL-HDBK-17. MIL-HDBK-17 is a composite materials handbook series approved for use by all departments and agencies of the Department of Defense (DoD). By organizing and gathering data based on such an influential source, we are able to standardize relevant composite material information in the ontology. A class called ‘Textile’ also exists in SLACKS that can represent the fiber properties such as tow, mats and woven fabrics for the lay-up materials used in composite laminates [48]. For instance, all woven fabrics can be always considered to be biaxial materials of the ‘Multi-Directional’ class but not vice versa.

The ‘Ply’ class has references to its parent laminates. In addition, each ply links to its choice of material from the ‘Laminated’ class. Instances of ‘Laminated’ class refer to the fiber and matrix material from the appropriate class in ‘Material’. For example, a laminated composite material having 60% e-glass fiber will have the object property ‘has_Fiber_Material’ of ‘e-glass’ instantiated in the ‘Glass’ sub-class under ‘Material’ and the datatype property ‘has_Fiber_Volume_Fraction’ set to 0.6.

This section builds upon the composite material ontology research initiated by Liotta [49]. To show the benefits of SLACKS, data is consolidated from the publicly available Sandia National Laboratories/Montana State University/Department of Energy (SNL/MSU/DOE) and OptiDAT databases, both of which are related to materials used in wind turbine blades [49]. OptiDAT is a database for the Optimat Blades project that investigated different failure methods that affect material on wind turbine blades. Thus the results can be used as “degradation models and design rules” [50]. The database consists of more than 3000 composite material tests performed in various test laboratories. Since the objective of the project was to find various degradation methods, the database contains many different test types. These test types vary between their loading type, environmental conditions, and geometry. Within the loading type category, each test could differ in whether they were static or fatigue. The geometries differ in the lay-ups and orientations of the laminates [50]. The environmental conditions include different temperature and humidity levels. Included in the OptiDAT database Excel spreadsheet is documentation on all the parameters of the test.

The SNL/MSU/DOE database contains composite material testing for 190 materials for a combined total of 12,000 material tests. The objective of the SNL/MSU/DOE project was to test the same material from the same lab in various loading conditions to make a good approximation of life for a given material [51]. It is important to note that this objective is different from the Optimat Blades project and thus the data structure will differ to meet the objectives. The majority of the data for this database is for material testing of static and fatigue tests. Other tests include ply drop tests, stress rupture tests, crack growth tests, and environmental tests. This consolidation focuses on the static and fatigue tests for both databases.

These databases, which consist of large spreadsheets, contain information about materials and their tests in a manner that is not standardized in any way. Hence, we identify the overlaps and the differences in the data structure of the two spreadsheets. To import data from the spreadsheets into Protégé, Protégé plug-in called Mapping Master is used. Mapping Master makes use of a Domain Specific Language (DSL) to give users the ability to identify which columns of an Excel file correspond to classes, instances, or properties of instances. This allows a user to simultaneously map instances and their properties from Excel into ontologies. The following code is a sample DSL mapping used in this research:
                        
                           Individual: @Q*(rdf:ID) Facts: has_Material @A*, has_lay-up @B*, has_volume_fraction @C* (xsd:float)

Additional reasoning capabilities are needed to properly structure the instances into their proper classes. Two types of reasoning operations can be used to achieve this: class restrictions and SWRL rules. An example of class restriction was discussed in the previous section. The following is an example of a SWRL rule:
                        
                           Composite (?c) ^ has_Material(?c,?m) ^ swrlb:equal(?m,”UD1”)→Uni-Directional(?c)

The SPARQL query language makes use of Resource Description Framework (RDF) structuring to query the ontology. RDF uses Uniform Resource Identifier (URI) structuring to name the relationship between two objects. This formatting is called an RDF triple because it uses three URI’s: The first object, the second object, and the name of the relationship between the two objects. Using the triple structure, RDFs allow structured and semi-structured data to be mixed, exposed, and shared across different applications. Thus SPARQL is not Protégé specific and can be used within other RDF based frameworks. But, this comes with a drawback in that it cannot make use of the Protégé class structure for its querying purposes. The following query arranges all instances of the material tests of the database with the longitudinal modulus of elasticity greater than 60 in descending order and the results are shown in Fig. 3
                     .
                        
                           
                              
                              
                                 
                                    SELECT ?label ?has_Material ?has_volume_fraction ?has_e ?
                                 
                                 
                                    FROM <http://edesign.ecs.umass.edu/ontologies/Framework2.0/SLACKS_DFM.owl>
                                 
                                 
                                    WHERE {
                                 
                                 
                                    ?Composite rdfs:label ?label.
                                 
                                 
                                    ?Composite:has_Material ?has_Material.
                                 
                                 
                                    ?Composite:has_volume_fraction ?has_volume_fraction.
                                 
                                 
                                    ?Composite:has_e ?has_e.
                                 
                                 
                                    FILTER(?has_e>60)}
                                 
                                 
                                    ORDER BY DESC(?has_e)
                                 
                              
                           
                        
                     SQWRL rules can be used to make querying in Protégé much more expressive. This is due to the fact that SQWRL is an OWL specific query language that can make use of an ontology class structure for its queries. Thus the original SPARQL query can be extended to include a restriction that the designer not only wants to find composite materials within a given modulus range, but in addition ones that are uni-axial. The following code shows how such a query would be expressed. The output of the query is shown in Fig. 4
                     .
                        
                           Composite(?x) ^ has_e(?x,?e) ^ swrlb:greaterThan(?e,60) ^ has_Material(?x,?m) ^ swrlb:contains(?m,”UNI”)→sqwrl:select(?x) ^ sqwrl:select(?e) ^ sqwrl:count(?x)

The following paragraphs explore both the original naming structure of the databases and the subsequent Protégé naming structure in SLACKS. Fig. 5
                      depicts the translation of the naming structure of each material test in the OptiDAT database [50]. It can be seen from the figure that without the translation presented here, it would be very hard to discern what this seemingly random string of letters and numbers represents. However, in Protégé each material and material test has been separated into its own individual class. For each individual composite material in the class, there are properties for the embedded information. Fig. 6
                      depicts such an instance and shows how the properties have been represented.

The above example shows how information from two differently organized composite material databases can be cohesively combined and reasoned upon. It can be seen from this execution that the problems of inconsistent naming structures is easily resolved and that the functionality of SLACKS allows for added reasoning not available with the original flat database structure. Moreover, this work provides a standardized repository and an expert system for accessing composite materials information.

Laminated composites are heavily used in the wind energy industry especially to make wind turbine blades. To understand the intricacies in the design process of a product made of laminated composites, lay-ups/plies of laminates were modeled for a 30m wind turbine blade model provided by SIEMENS Specialized Engineering Software located in Waltham, MA using their shell-based composites engineering software ‘FiberSIM’. The FiberSIM software suite provided is integrated within Creo/Elements Pro software from Parametric Technology Corporation (PTC) located in Needham, MA. This integration essentially makes the sequential lay-ups of laminates relate to the actual geometric model of the panel or structure. FiberSIM is used by design engineers for laying up plies and laminates of composite structures based on an approximate structural topology of the blade determined during the early design stages. The software can then show various characteristics of the fibers and simulate draping based on the complexity of geometry within a manufacturing setting. Once the lay-ups are defined, the information can be transferred to FEA software. This study deployed the Composite PrepPost module from ANSYS located in Canonsburg, PA for FEA purposes. The information from FiberSIM is transferred to ANSYS using the HDF5 interface. HDF5 is a file format or library for storing and managing data. Furthermore, finite element analysis based on specific loading conditions allows determination of deflection, stresses and failure plies of the wind turbine blade. FiberSIM records the information regarding the plies, laminates and cores of the composite structure. This is part of the composites design process. The information about plies and laminates along with other design parameters can be exported to an XML file that has a schema called Encapta XML. Another important point to be noted is that FiberSIM stores its materials data in a file called MaterialsDB.xml for the engineers to add or modify material parameters. The ANSYS Engineering Knowledge Management (EKM) tool also provides XML output for simulation files relevant to the ANSYS Workbench projects.

XML files can be converted to OWL format for efficient integration into SLACKS. Many conversion methods have been proposed but the most popular and proven method is the one which involves Extensible Stylesheet Language Transformations (XSLT) [52], part of the Extensible Stylesheet Language (XSL) family. A proof-of-concept of this method can be found in a paper by Rodrigues et al. [53]. Other notable works on XML to OWL conversions based on XSLT include those of Bohring and Auer [54] and of Bosch and Mathiak [55]. XSLT templates help to map any XML-based output from software to existing OWL ontologies and efficiently automate the conversion process. This research used Microsoft Visual Studio as the favored XSLT processor. Using this conversion procedure, we can instantiate the classes, properties and other relevant information in SLACKS. A snippet of the XSLT code for mapping the relevant information of the blade laminate design ‘Laminate_Upper_1’ of Fig. 8
                     
                      is shown below.
                        
                           
                              
                              
                                 
                                    <xsl:variable name=“root” select=“/”/>
                                 
                                 
                                    
                                       <xsl:for-each select=“EnCapta/Document/ApplicationData/Ply”>
                                 
                                 
                                    
                                       
                                       <H:Ply rdf:ID=“Ply_LU1_001”>
                                 
                                 
                                    
                                       
                                       
                                       <xsl:for-each select=“$root/EnCapta/Document/ApplicationData/Ply/Name”>
                                 
                                 
                                    
                                       
                                       
                                       
                                       <H:has_Name rdf:datatype=“http://www.w3.org/2001/XMLSchema#string”>
                                 
                                 
                                    
                                       
                                       
                                       
                                       <xsl:value-of select=“.”/>
                                 
                                 
                                    
                                       
                                       
                                       </H:has_Name>
                                 
                                 
                                    
                                       
                                       </xsl:for-each>
                                 
                                 
                                    
                                       <xsl:for-each select=“$root/EnCapta/Document/ApplicationData/Ply/Sequence”>
                                 
                                 
                                    
                                       <H:has_Sequence rdf:datatype=“http://www.w3.org/2001/XMLSchema#string”>
                                 
                                 
                                    
                                       
                                       <xsl:value-of select=“.”/>
                                 
                                 
                                    
                                       </H:has_Sequence>
                                 
                                 
                                    
                                       </xsl:for-each>
                                 
                                 
                                    
                                       <xsl:for-each select=“$root/EnCapta/Document/ApplicationData/Ply/Step”>
                                 
                                 
                                    
                                       
                                       <xsl:variable name=“step”>
                                 
                                 
                                    
                                       
                                       <xsl:value-of select=“.”/>
                                 
                                 
                                    
                                       </xsl:variable>
                                 
                                 
                                    
                                       <H:has_Step rdf:datatype=“http://www.w3.org/1999/02/22-rdf-syntax-ns#”>
                                 
                                 
                                    
                                       
                                       <xsl:value-of select=“number($step)”/>
                                 
                                 
                                    
                                       </H:has_Step>
                                 
                                 
                                    
                                       </xsl:for-each>
                                 
                              
                           
                        
                     
                  


                     Fig. 7 shows an overview of how relevant information is instantiated relating to different domains in the case of the wind turbine blade after the integration. The connection of the ‘Upper_Mold_Part’ component of the ‘Wind_Turbine_Blade_Assembly’ with the design, analysis and manufacturing domains is shown. Instances of various classes and the integration between various domains are presented. Arrows show the object property relationships between the instances.

The information gathering phase begins with the design information being mapped from FiberSIM’s Encapta XML file using the XSLT mechanism as shown in the top half of Fig. 8. Then, the bottom half shows the analysis data mapped from the simulation project XML files within ANSYS EKM. Fig. 8 shows some of the relevant information mapped into SLACKS based on the instances shown in Fig. 7. The information regarding ‘Laminate_Upper_1’, instance of the ‘Upper_Mold_Part’ component shown in Fig. 7 from the design and analysis models of the wind turbine blade is represented in Fig. 8. The ‘has_Step’ and ‘has_Sequence’ properties represent the order of lay-up during manufacturing of the laminate part. The design engineers can have access to the analysis information of the FEA model that includes loads, stresses, deformation and failure criteria. The design engineers can make decisions and infer knowledge on the design faster based on the analysis results. As an example, assume a scenario where the blade deflection represented by the ‘has_Maximum_Deflection’ value should not exceed one meter. This constraint is defined as a customer requirement in SLACKS under the ‘Requirement’ class. Here, the following SWRL implementation will help the engineer to identify such requirement violations in SLACKS:
                        
                           Result_FEM (?r) ^ has_Maximum_Deflection (?r,?m) ^ Requirement (?req) ^ has_Maximum_Allowable_Deflection (?req,?max) ^ swrlb:greaterthan(?m,?max)→Violation(?r)

Hence, if the designer chooses to modify the material type for a specific ply, in a specific laminate for the blade, he or she can do that just by the click of a button. This is possible because SLACKS already has a setup for an expert system for materials selection by interfacing with public materials databases for wind turbine blades as explained in Section 4. The choice of material for each ply along with the fiber directions affect the structural properties, which are treated as design variables for further optimizing the structure of the blade. Due to the design changes, subsequent analysis in FiberSIM might affect the draping results and allowable tolerance for shrinkage, thus possibly altering the manufacturability of the parts. This could also lead to reassessment of manufacturers or manufacturing processes. A few of the processing techniques that can be mapped to SLACKS through the FiberSIM interface include hand layup using flat pattern data or laser projection systems, automated tape layup, and fiber placement through automated deposition machines. This study reveals that once all the necessary information is included in SLACKS, the relationships within the laminated composites design information are automatically propagated to other domains, provided the other domains are populated with knowledge in a similar manner. Thus, SLACKS enables seamless integration of information across different domains and instant access to all relevant information, since all the domains are interlinked and standardized. Therefore, along with addressing the underlying semantics of the design process, the use of SLACKS can be expected to save the design engineer considerable time by having automated and instantaneous access to the necessary information in a concurrent engineering platform.

@&#DISCUSSION@&#

The case study shows that SLACKS offers an effective and comprehensive knowledge structure to support the design of laminated composite products. Notable efforts to develop pertinent knowledge structures or standardized models, as mentioned in Section 2, include STEP and MatML. While STEP has a specific application protocol in the form of AP209 to address data exchange during the design and analysis of composite structures, it does not have any semantics associated with the underlying information. On the other hand, MatML standardizes materials data using XML for information interchange. However, XML too falls short in the area of semantics. As an OWL-DL knowledge structure, SLACKS is fully compatible with the semantic web and is able to incorporate other ontologies and share information among engineers. Thus, the design engineer will be able to see the results of an analysis model from an analyst, enhancing collaboration. The design engineer can also infer knowledge based on the customer requirements to flag design violations instantly. The ability to incorporate materials data from the web in a standardized manner and the integration of such data with the composites design domain is an added advantage. Furthermore, current description logic rules implemented in SLACKS show that we can both query and reason about the knowledge and create new knowledge to assist the engineer in making better decisions. Another important aspect of SLACKS is the ability to store design revision history and document the associated design differences through the use of the XSLT mechanism and SWRL rules. XSLT enables capturing of information during design iterations. In addition, SWRL rules provide a basis to compare design instances and to automatically generate the salient information in different designs. These features would be difficult to achieve by navigating through the Graphical User Interface (GUI) of any CAD/FEA tool.

The current SLACKS system has some limitations. The major limitation is the ability to only support knowledge acquisition from spreadsheets and software tools that deliver XML outputs. Another limitation is the inability to incorporate information that is not provided by the source. For example, the Encapta XML file of FiberSIM provides detailed information regarding the composite lay-up but does not provide any information regarding design intent. Such information must be explicitly added into SLACKS. Further research in knowledge acquisition techniques and improved automation mechanisms along with enriched source files are required to overcome these limitations. Finally, user interaction with SLACKS is limited to current ontology user interfaces. Protégé is a powerful ontology development tool but does not provide a suitable user interface for end-users, especially for non-computer scientists. The recent emergence of semantic wikis, such as DataWiki and OntoWiki, offers the promise of a much friendly end-user interface to ontological knowledge bases.


                     SLACKS has been developed as a tool to improve the process of engineering laminated composites. However, the underlying ideas and methods of this research are applicable to any other domain where a large volume of unstructured and inconsistent information has to be managed. The core idea involved in this research is the ability of OWL ontologies to integrate various domains and acquire knowledge from spreadsheets or XML-based software tools using already existing automation mechanisms. It is the compatibility of OWL with the semantic web, and the capability of implementing logic rules and queries, that ultimately makes for an efficient knowledge management tool.

@&#SUMMARY@&#

This paper introduces SLACKS, a novel semantic knowledge management system for supporting the design, analysis and manufacturing of laminated composite products. Salient features of SLACKS include (1) a standardized knowledge representation scheme for laminated composites domain for varying material databases, (2) an ontological framework for laminated composite materials and their design for manufacturing (DFM), and (3) an integrated engineering design framework for laminated composites that can facilitate and enhance collaboration between domain experts. Through the results of the wind turbine blade case study, this work demonstrates that SLACKS can offer engineers an efficient platform for integrating information among product life cycle domains and managing the flow of information and access to inferred knowledge throughout the process of designing laminated composite products. As a result of the assimilation and centralization of laminated composite information using ontologies, SLACKS offers an integrated and shareable knowledge base that is seamlessly compatible with the semantic web with unique capabilities for automated reasoning and inferring of new knowledge from existing knowledge.

@&#ACKNOWLEDGEMENTS@&#

This material is based upon work supported by the National Science Foundation (NSF) under Grant Nos. 0332508 and 0838747, and by industry members of the NSF Center for e-Design.

@&#REFERENCES@&#

