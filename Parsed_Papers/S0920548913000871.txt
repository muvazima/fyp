@&#MAIN-TITLE@&#Location service and session mobility for streaming media applications in home networks

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose a digital multimedia home environment based on SIP, RTP and SLP.


                        
                        
                           
                           We design the MediaService extension header in SIP to provide a streaming service.


                        
                        
                           
                           The SLP UA and SIP UA are integrated to discover and initiate a streaming service.


                        
                        
                           
                           The Substitute Request is introduced to provide service discovery across domains.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Service Location Protocol

Session Initiation Protocol

Session mobility

Home network

Open Service Gateway initiative

@&#ABSTRACT@&#


               
               
                  In the near future, home networks are expected to become an important part of the user's ubiquitous environment. However, how to provide service discovery and multimedia services in such networks becomes a great challenge. In the paper, we propose an extension header, referred to as the “MediaService” header, into the Session Initiation Protocol to provide video streaming service. The streaming control and session mobility functions are also considered in the MediaService header. We also propose a peer to peer Service Location Protocol architecture for users to search for location of services across domains. We added a Substitute Request Message and cache policy into the Service Location Protocol to search for location of services across domains. A prototype implementation shows the performance of our prototype.
               
            

@&#INTRODUCTION@&#

In recent years, both mobile and fixed communication technologies have evolved to offer opportunities for interoperation between mobile devices and devices residing in a home network. The network interface embedded into various home appliances improves our daily life at home. Using these home networked appliances, users can remotely access and control home electrical appliances from their office, and the network services can access appliances in the kitchen, living room, or bathroom. The long expected intelligent home network will come of age in the near future.

The rapid advancement of communication technologies has increased the demand for network multimedia services in home. These multimedia services are proliferating at an accelerated pace and today include: video blogs, YouTube, and audio or video streaming. Due to the various multimedia services, the processes of accessing, managing, and searching for desired information have become a great challenge. Numerous different protocols, standards, and transmission modes, such as Service Location Protocol (SIP) [1], Service Location Protocol (SLP) [2,3], Universal Plug and Play (UPnP) [4], and Juxtapose (JXTA) [5] have been proposed for interconnection or discovery with these home networked devices and services.

In this research, we will propose a digital home environment with multimedia services. We utilize the SIP to create and maintain the multimedia session. SIP is an application layer signaling protocol, and has been adopted by the Voice over Internet Protocol (VoIP) and third Generation Partnership Project (3GPP) communities for their signaling protocol. SIP can be used to create, modify, and terminate sessions using one or more devices. However, SIP cannot be used to create and control a video streaming with RTP.

Thus, we design an extension header, referred to as the “MediaService”, to provide a video streaming service using SIP with RTP [27]. The control functions for the video streaming service, such as pause, replay, and session mobility, are considered in the MediaService header. We implement the MediaService header in a SIP user agent (UA) based on the results proposed in [6]. We also integrated the SLP user agent function into the results proposed in [6]. Thus, the user can use the SLP UA to discover the video streaming or channel information which is provided by the media server, and initiate a video streaming session with the media server using SIP.

Moreover, the user may access the video stream from the Internet, such as MOD. The user can discover these potential video streams using a search engine via his or her computer. These search results are maintained only in the local host and cannot be shared by any other user. The Substitute Request Message and a cache mechanism are introduced into the SLP directory agent. Based on the Substitute Request Message, the SLP directory agent can discover services from another SLP directory agent and caches these search results in the SLP directory agent. To evaluate the ability of the proposed architecture, we implement the proposed architecture through modification of the code from several open source projects.

The remainder of this paper is organized as follows. The related literatures and standards are discussed in Section 2. A digital home environment with a multimedia services architecture is proposed in Section 3. Section 4 presents the digital home environment implementation with multimedia services. A performance evaluation for the proposed system is provided in Section 5. Our conclusions and future works are given in Section 6.

@&#RELATED WORKS@&#

Universal Plug and Play (UPnP) [4] was proposed by Microsoft. UPnP uses a Peer-to-Peer network architecture and works with existing standard protocols such as HTTP, TCP, UDP, IP, and XML. The simple Service Discovery Protocol (SSDP) is defined in UPnP and can be used to provide service discovery. Based on UPnP standards, when the UPnP device joins the network, it announces its services by multicasting. The control point, which works as a UPnP device manager and can receive UPnP service and device descriptions, automatically receives the advertisement and subsequently uses their capabilities. The control points can also pro-actively the desired devices and services using SSDP, then subsequently control these services and devices.

Service Location Protocol (SLP) is a standard protocol defined by the IETF [2]. Three network components are involved in the SLP architecture to efficiently manage and discover services: They are Service Agents (SAs), Directory Agents (DAs), and User Agents (UAs). The SLP UA is a software entity used to search for network services, while SLP SA is a device that provides one or more services in a network. The SLP DA is a process that manages the services registered by the SLP SAs, or service manually configured in the DA's local database.

The Session Initiation Protocol (SIP) as in RFC 3261 [1] is a signaling protocol for Internet conferencing, telephony, and event notification. There are many elements that can be part of the SIP architecture: These elements involve Proxy Servers, Redirect Servers, Registrar Servers, and User Agents (UAs). A SIP UA is a software entity used to create or manage a SIP session. The Proxy Server acts as a SIP router and is responsible for forwarding SIP messages sent from other Proxy Servers or SIP UAs, to other Proxy Server or to one or more destination SIP UAs. The Redirect Server simply returns redirection information rather than forwarding a SIP request. A Registrar Server maintains a database that is used to resolve a SIP URI into an IP address of one or more SIP User Agents.

The Open Service Gateway initiative (OSGi) is an open standard service platform defined by the OSGi Alliance [7]. The OSGi Service Platform is an industry plan that proposes a residential gateway to connect internal and external networks. The OSGi Service Platform is composed of three key components: the framework, bundle, and service. The OSGi framework is built on top of a Java virtual machine. This framework is responsible for computing applications. The bundles are entities for deploying Java-based applications. Each bundle is a Java Archive (JAR) file that is comprised of Java classes and other resources. The bundle can provide its own Service Export to other bundles and also import services from other services into its applications. Each service is a set of java classes and interfaces implemented in bundles. These bundles are dynamically loaded, managed, and instantiated by the framework.

@&#RELATED WORKS@&#

Numerous researchers have examined the services discovery issue. In [8], the authors proposed a strategy to provide a service location in SIP. The author used the SIP REGISTER method with the SLP registration to provide SLP registration, and defined a new header to carry the service message. They also used the SIP OPTIONS method to carry the service discovery information, and to retrieve the service information. In [9], the authors propose a service discovery mechanism in a home environment. They implement the service discovery mechanism into the OSGi platform. The OSGi platform can provide interconnection between heterogeneous network devices, but it cannot provide service discovery between heterogeneous devices. Therefore, the authors proposed an architecture for service discovery between heterogeneous devices. With the proposed architecture the users can easily search and access services available via different networks.

In [10], the authors proposed to integrate IPS into the OSGi platform to provide service discovery and interconnection in a SIP-based mobile network. They added a SIP device registration method into the SIP and OSGi platform. Thus, a SIP Device can registry the OSGi Service Registry. The authors also implemented a SIP bridging bundle to import heterogeneous services and devices into the OSGi platform and export to the SIP service. With their proposed architecture the users can easily search and access heterogeneous services using SIP.

Henning et al. proposed a smart home network environment for ubiquitous computing [11]. In their environment, the system can detect the user's location using sensor nodes or a GPS receiver within the user's handset device. The user can discover services and devices using Bluetooth and SLP and access these services and devices using SIP or HTTP through a wireless local area network (WLAN).

We proposed a residential gateway based on the OSGi architecture for a smart home network in [12]. To achieve automated heterogeneous discovery, registry, and management an SLP bridge bundle worked as SLP SA to discover the UPnP devices and services from the Service Registry of the OSGi platform, and to register these services and devices into SLP DA. An SIP bridge bundle was a module that can provide interconnection service between a SIP UA at outer network and UPnP devices at home network. Based on our proposed architecture, the user can easily discover and access UPnP devices and service using the SLP UA and SIP UA.

Session mobility is the key issue in SIP mobility management. A lot of researches were proposed in the services discovery issue. Shacham et al. proposed mechanisms to provide session mobility over multiple devices [13,25]. Their mechanisms can be divided into two different modes. The Mobile Node Control (MNC) mode using the Third Party Call Control (3PCC) [14] control mechanism and the Session Handoff (SH) mode using the REFER method [15]. In the MNC mode, 3PCC was introduced to establish a SIP session with each device used in the transfer in order to update its session with the corresponding node. The SH mode uses the REFER method to establish a SIP session with each device. The Multi-Device System was introduced to efficiently manage the transferred session between multiple devices in SH mode. In [16], the authors integrate the service discovery mechanism into the architecture proposed in [13]. They add the service discovery function into the Multi-Device System Manager. The SIP UAs will work as a SLP SA to advertise their services to the Multi-Device System Manager, which works as a SLP DA. Thus, the SLP UA can be integrated into a SIP UA, enabling them of a service from the Multi-Device System Manager.

We propose the session mobility over multiple devices using SIP [6,17]. In [17], we add the extension header “Mobility” to the REFER method to make transparent to the remote party and introduce the concept of an “Association” to solve the problem of the user having to terminate all devices separately when a session is split over multiple devices. In [6], we propose a complete mechanism, referred to as a “Session Integration Service”, to transfer and retrieve a session over multiple devices. The Nested Refer mechanism [18] was used to achieve the retrieval session action and the session manager transformation (SMT) and session manager acquirement (SMA) were proposed to provide much more flexibility in the session mobility. Based on the Session Integration Service, the user can transfer, split, and retrieve a session over multiple devices. Moreover, the split session can be integrated at any devices.

Mukhtar et al. proposed session mobility for multimedia streaming service using UPnP [19]. They used a control point to establish one-way streaming between the media server and media renderer and used the UPnP Action control message to provide session mobility from one media renderer to another. The Action control message can also be used to control one-way streaming services, such as pause and replay. Martínez et al. proposed another architecture to distribute the services between two different home networks, and to create end to end connections between two hosts in the different home networks [24]. They used SIP to remote management of the UpnP Media Servers through OSGi technology. However, the session mobility mechanism was not considered in the proposed architecture, and the proposed architecture will increase the overhead of the residential gateway. Evaluation of SIP with RTSP for use in streaming media applications was proposed in [26]. In the proposed solution, trick plays and media control features can be mapped to the SIP. However, the proposed solution is needed change to RTSP, and the mechanisms of service discovery and session mobility were not considered.

Let us consider a scenario in which a media server and a residential gateway with SLP DA are deployed in a home network. During the holidays, we are at home and would view some movies from a media server. We may use a TV remote control or PDA to discover the streaming information from the media server or SLP DA in the home network. However, we may not find an interesting movie in the local database. We could look for an interesting movie on the Internet or the neighbor's network. In the latter case we initiate the streaming from a media server attached to the Internet to the media renderer. Later, we may want to move this movie streaming to the media renderer in our bedroom. We will need a session mobility mechanism to transfer the on-going movie streaming to the TV in the bedroom. The media renderer in the living room should not be available to the other members of our family once we have moved the stream elsewhere.

We know that the SIP can provide the required to redirect the stream to the IP address and port number of the media renderer in the bedroom, but it cannot be used to initiate and control the video streaming. Thus, we introduce an extension header “MediaService” into the SIP to provide a video streaming service. We added a Substitute Request Message and cache policy into the SLP. Thus, the user can send Substitute Request Message to a SLP DA to discover services from another SLP DA, and the SLP DA will cache the search results and provide these results for the next search request. For example, we can send the Substitute Request message to discover the moves in the neighbor's SLP DA, and cache the search results in our SLP DA for the next search request.

The system overview is shown in Fig. 1
                        . The left block in Fig. 1 shows the home network. In my home network, the SLP DA is implemented in the residential gateway and the media server works as the SLP SA to register its services into the SLP DA. The Service Integrated User Agent (SIUA) contains the SIP UA and SLP UA functions. The SIUA can send a service discovery message or Substitute Request Message to my home DA. The Substitute Request Message carries the hostname of the other SLP DA in another domain. Thus, the local SLP DA will send a service discovery message to another SLP DA, cache the search results in the database (register the search results) and forward the search results to the SIUA.

The SLP DA only maintains the service information that has been registered by a SLP SA. A SLP UA uses a multicast SLP message to discover the services from other SLP SAs or uses a unicast SLP message to discover services from the SLP DA. Thus, the SLP UA can only search the network devices and services within its SLP network domain.

Therefore we introduce a Substitute Request Message into SLP in order to search the location for services across domains. The Substitute Request Message format is a modified form of the Service Request message (see Table 1
                        ). The Function ID of this Substitute Request Message is 13. In order to pass the address of the remote DA we include an added the <DA add> string length field and the <DA add> string into the Service Request message. <DA add >string length field indicates the number of bytes in the <DA add> string, and the <DA add> string field contains another DA address.

The Substitute Request function needs to be implemented in both the SLP UA and DA. If so, then a SLP UA can send a Substitute Request Message to its default SLP DA. This Substitute Request Message contains another SLP DA's address and a discover request. When the default SLP DA receives this Substitute Request Message, it uses the <DA add> string to retrieve the IP address of another SLP DA and sends the Service Request message to this SLP DA. The remote DA will send its reply to the originating DA. A caching mechanism should be implemented into the extended SLP DA so that this DA can cache the search results for use in the subsequent service discovery. The detailed procedures are shown in Fig. 2
                        .

As shown in Fig. 2, the SLP DA for a home domain has the IP address 140.126.130.1, and the SIUA with its embedded SLP UA is in the home domain. Another media server is in a neighbor domain and it registers its service with the neighbor's DA. When the SIUA wants to discover a media server in the home domain and it sends a Service Request message to its local SLP DA, the Service Reply message will not contain any service information because there is no local media server. The SIUA then sends a Substitute Request Message with the neighbor's DA address and the SLP discovery message to its local SLP DA. (The neighbor's DA address can be manually configured in the DA's local database.) The local SLP DA will resolve the neighbor's DA IP address and send a Service Request message to the neighbor's DA.

Because the neighbor's DA contains the service information registered by the media server, a Service Reply message is sent from the neighbor's DA containing the service information. When the home DA receives the Service Reply message, the service information will be extracted from the Service Reply message and registered by the home DA, and a copy of the Service Reply message will be sent to SIUA. Later, when a new Service Request is sent to the home DA, the Service Reply message will contain the media server information.

We introduced the extension header, “MediaService”, into the SIP to provide a streaming service [27]. There are four fields involved in the MediaService header. The first field is the type field with one byte. The type field used to describe the streaming status provided by local services. The type value 0 indicates that this message is sent from a one-way receiver and 1 is sent from a one-way transmission. The second field is the admin field with one byte. The admin field is used to denote a control command. The admin value 0 indicates that this message is used to establish a session and select the channel or file carried in the option field. The admin value 1 is to pause and 2 to resume the paused streaming service. When the user wants to transfer the session to another media renderer, the admin value is 3. The length field is one byte, which indicates the number of bytes in the option field. The option field contains the selected channel or the selected file name.

As shown in Figs. 1 and 2, the information about the existence of a streaming service can be retrieved from the search results in the reply from the SLP DA. For example, the channel 1 of a media server can be accessed, the URL is MS://MediaServer@140.126.130.59/1. Thus, the length field is 1, the option field is 1, and the URI is MediaServer@140.126.130.59. When the URI and service information are retrieved from the search results, the SIUA can establish a multimedia streaming with the media service. Fig. 3
                         shows an example of a streaming control procedure. In Fig. 3, steps 1 to 3 are the procedures to establish a streaming session using a SIP INVITE message. Step 1: when SIUA1 wants to establish a streaming session to the home network's media server, it sends an INVITE message with the MediaService header and SDP to the media server (MS@domain). The SDP may include all needed information about the UA that may be required and supported for the streaming. Because the INVITE message is sent from SIUA1 to the media server and the SIUA1 is the streaming receiver, the type field is 0. The INVITE message is used to establish a new streaming session, and selects the channel 4. Thus, the admin value is 0, the option field value is 4 and the option length field is 1byte. Therefore, in step 1, the MediaService header value is 0014.

In step 2, when the media server receives the INVITE message and the system accepts the INVITE message, the server will return a 200 OK with the MediaService header. Because the response message is sent from the media server, which is the streaming server, the MediaService header value is 100. After receiving the response message, the SIUA will send an ACK message to the media server and establish a one-way streaming session between the SIUA and the media server.

In Fig. 3, steps 4 to 6 are to pause the streaming session using a re-INVITE message. In step 4, the SIUA1 will send an INVITE message to the media server with the MediaService header and a MediaService header value of 010, when users want to pause a streaming session. In step 5, when the media server receives the pause message, the media server will stop packet transmission and reply with 200 OK to the SIUA1. The MediaService header value will then be 110. Steps 7 to 9 in Fig. 4
                         are the procedures to resume the streaming session using yet another re-INVITE message. In step 7, when users wanted to replay the streaming session, SIUA will send an INVITE message to the media server, and the value of MediaService header is 020. After receiving the resume message, the media server will reply with a 200 OK with the MediaService header (value is 120) and resume RTP transmission.

In [13,24], an integration mechanism had been proposed to provide session mobility over multiple devices. This proposed mechanism has the advantages of both the 3PCC mechanism and the REFER method. However, the operation of proposed mechanism is very complicated and is used to transfer the session over multiple devices. In our scenario, the streaming session will only be transferred between two devices. Thus, in order to provide session mobility we introduce the REFER mechanism and the Nested REFER mechanism. As shown in Fig. 4, steps 1 to 8 are used to transfer the session of SIUA1 to SIUA2. In the first, the SIUA1 will send a pause message to the media server. The SIUA1 will then send a REFER message to the SIUA2 and the MediaService header value will be 030. After receiving the REFER message the SIUA2 will send an INVITE message with the MediaService header (value is 030) to the media server. When the media server receives the INVITE message and the system finds that this message is a referral message according to the MediaService header, the media server will return with a 200 OK, and transfer the session with the SIUA1 to the SIUA2.

Steps 9 to 15 are used to retrieve the session back to SIUA1. In step 9, when the SIUA1 retrieves a session that had been previously transferred to the SIUA2, the SIUA1 will send the Nested REFER mechanism to the SIUA2 and the MediaService header value will be 030. After receiving the Nested REFER message the SIUA2 will send a REFER message to the SIUA1, and the MediaService header value will still be 030. Moreover, in step 11, the SIUA2 will also send a pause message to the media server. After receiving the REFER message, the SIUA1 will send an INVITE message with the MediaService header (value is 030) to the media server. When the media server receives the INVITE message and the system finds that this message is a referral message according to the MediaService header, the media server will return with a 200 OK, and transfer the session with the SIUA2 to the SIUA1.

For our implementation we integrated the SLP UA and SIP UA functions into the Service Integrated User Agent (SIUA). We implemented the SIUA based on the SIP communicator project [20] and the ideas proposed in [6,17]. We also integrated the SLP SA and SIP UA functions into the media server, and implemented the media server on top of the J2SE. We extended the SLP implementation to add a Substitute Request Message and a cache mechanism into the SLP DA. We implemented the proposed mechanism based on the open-source code for Maven jSLP [21]. We also integrated the proposed mechanism into the residential gateway proposed in [12], which was implemented based on the open-source project of the OW2 Forge Oscar [22].

In our implementation, jSLP is installed in the residential gateway. We added an SLP bridge bundle, as we described in [12], referred to as “SACP”, as shown in Fig. 6. SACP works as SLP SA to discover devices and services from the Service Registry of the OSGi platform and registers these services and devices into the SLP DA. Using the SACP, the residential gateway provides automated heterogeneous device discovery, registry, and management.

As shown in Fig. 5
                     , the media server includes a SLP SA, SIP UA, and Media Content. The SLP SA (Advertiser) announces the media service to the SLP DA. The SIP UA is used to initiate and maintain a SIP session with the SIUA. SIP session mobility, RTP connections, and streaming control functions are also implemented in the SIP UA module. The module of Media Content is used to manage the streaming files in the media server.

As shown in Fig. 5, the SLP DA is installed in the residential gateway, and contains three major modules: SLPDaemon, SLPCore, and Locator. The SLPDaemon is used to process the registration messages sent from SLP SAs to cache the service information retrieved from the Substitute Request results. The SLPCore is used to process the Service Request messages sent from the SLP UA, and sends the reply message to a SLP UA. The Locator will send a Service Request to another SLP DA after receiving the Substitute Request message. Thus, we added a procedure for the Substitute Request Message into SLPCore. When SLPCore receives a Substitute Request Message sent from a SLP UA, it calls the Locator to send a Service Request message to another SLP DA according to the information in the Substitute Request Message. When the Locator receives a Service Reply, it sends the registration message to the SLPDaemon and passes the reply message to the SLPCore. The SLPCore forwards the Service Reply to the SLP UA.

The SIUA contains the SLP UA and SIP UA functions and we implemented the SIUA based on the SIP communicator. The SIP communicator has two major modules for network communication. The SIP Manager creates and maintains the SIP session with the SIUA. The session mobility and streaming control functions were also implemented in the SIP Manager module. The Media Manager is used to maintain a RTP session. When the SIUA wants to create a streaming session, the SIP Manager calls the SendRequest() function to send a INVITE message to the media server. When the media server wants to reply to a message, the SipManager calls SendOK() function to reply to the message. The Media Manager then creates a RTP session between the media server and SIUA, and uses the SendStream() function to send the RTP packets. Moreover, when the SIP Manager receives a streaming control command, it will pass the command to the Media Manager, and the Media Manager will pause or resume the streaming.

We conducted experiments with our prototype to ensure the functionality of the location service and streaming service session mobility. The OSGi platforms are hosted on gateways in a home network and in a neighbor's network. These gateways utilized an Intel Core 2 Quad process running at 2.40GHz with 2.0GB of RAM. We deployed the media server on an Intel Duo E6300 1.86GHz with 1.0GB of RAM in the neighbor's network. All the SIUAs were notebooks with an Intel Duo P8700 processor running at 2.53GHz with 2.0GB of RAM.

We used Wireshark [23] to capture the SLP or SIP packets. Initially, as shown in Fig. 2, the media server registers the streaming services into the SLP DA in the neighbor's network. The SIUA1 then sends a Service Request to the Home DA in the home network to discover a streaming service, as shown in Fig. 6
                        . However, the Home DA in the home network has no streaming service information and will send the Service Reply with an empty entry. Thus, the SIUA1 sends the Substituted Request to the home DA with the neighbor DA's address.

When the Home DA in the home network receives the Substituted Request, it sends the Service Request to the neighbor DA to discover the streaming service, as shown in Fig. 7
                        . When the Home DA receives the Service Reply with the streaming service information sent from the neighbor DA, as shown in Fig. 8
                        , the Home DA will register the service information, and forward the Service Reply to the SIUA1, as shown in Fig. 9
                        . When the SIUA1 receives the Service Reply, the streaming service information will be shown on the GUI, as shown in Figs. 10
                        , and 11
                        .

The SIUA1 and media server then create a streaming session. The SIUA1 will then transfer the session to the SIUA2, as shown on the left in Fig. 12
                        , and the session between the SIUA1 and media server will be transferred to the SIUA2 and media server, as shown on the right side in Fig. 12. Finally, the SIUA1 will retrieve the session between the SIUA2 and media server, as shown in Fig. 13
                        .

We conducted three experiments to study the performance of our prototype implementations. In the first experiment, we want to measure the turnaround time for each Service Request between two DAs (T1) and the turnaround time for each Substitute Request between SIUA1 and the DA in neighbor's network (T2). SIUA2 is used to generate background traffic to the DA in neighbor's network. The background traffic is a specified number of TCP connection requests per second. In the second experiment, the SIUA2 is used to generate background traffic to the DA in the home network. The execution details are shown in Fig. 14
                        .

As shown in Fig. 15
                        , the results of first experiment are denoted as #1, and the results of second experiment are denoted as #2. As shown in the figure, the turnaround time for each Service Request is slightly increased when the amount of background traffic (TCP request) to media server increases. However, the turnaround time for each Substitute Request between SIUA1 and the DA in neighbor's network is very stable and not affected by the amount of background traffic to the DA in neighbor's network. However, when the amount of background traffic to the DA in the home network increases, both the turnaround times for each Service Request and Substitute Request are slightly increased. From these performance results, we can see that the turnaround time for each Substitute Request will be affected by Internet traffic.

In the last experiment, we want to evaluate the performance of our Media Server. The SIUA2 is used to generate background traffic to the media server. The background traffic is the number of RTP connections between SIUA2 and media server. In the experiment, we measure the time to establish each streaming service between SIUA1 and the media server and the average transmission rate for each service between SIUA1 and media server. The execution details are shown in Figs. 16 and 17
                        
                        . As shown in Figs. 16 and 17, the time to establish an RTP stream increased and the average transmission rate decreased when the number of RTP was more than 23. This means that our Media Server can only provide at most 23 streaming services at one time.

In recent years, numerous Internet services have grown at an accelerated pace, with ubiquitous computing receiving increased attention. In a home network, how to provide service discovery and multimedia services is a great challenge. In this paper, we proposed a MediaService header for SIP in order to provide a video streaming service for a home network using RTP. With the MediaService header and REFER method, session mobility for a streaming service can be provided. We also added a Substitute Request Message and cache mechanism into the SLP to provide substitute service discovery and caching. Based on the Substitute Request Message, the SLP DA can discover services from another SLP DA and cache these search results. A prototype system was implemented and used to test the functionality and performance of the proposed architecture. In the future, we will extend our proposed architecture to support an intelligent gateway in both a Home network and a Vehicle network.

@&#ACKNOWLEDGMENTS@&#

This work was supported by the National Science Council of Taiwan, ROC under grants NSC96-2221-E-216-010, NSC97-2221-E-259-036, and NSC98-2221-E-259-014.

@&#REFERENCES@&#

