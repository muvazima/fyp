@&#MAIN-TITLE@&#Integrating a multi-objective optimization framework into a structural design software

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Ebes+jMetal is an open source graphical tool for designing spatial bar structures.


                        
                        
                           
                           The proposed tools enable civil engineers to use advanced multi-objective solvers.


                        
                        
                           
                           Metaheuristic practitioners can also use spatial bar structures as testbed.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Spatial bar structures

Design

Multi-objective optimization

Software tools

Metaheuristics

Open source

@&#ABSTRACT@&#


               
               
                  In this paper, we present a tool combining two software applications aimed at optimizing structural design problems of the civil engineering domain. Our approach lies in integrating an application for designing 2D and 3D bar structures, called Ebes, with the jMetal multi-objective optimization framework. The result is a software package that helps civil engineers to create bar structures which can be optimized further with multi-objective metaheuristics according to different goals, such as minimizing the structure weight and minimizing the deformation. The main features of both Ebes and jMetal are described and how they are combined together in one single tool is explained. Finally a case study to illustrate how the application works is presented.
               
            

@&#INTRODUCTION@&#

Civil Engineering encompasses different phases in the process of building bridges, roads, and many other built environments. Some of these phases are the design, construction and maintenance of these environments. In this field, as in many other disciplines such as economics or biology, complex optimization problems continuously arise, making the tasks that civil engineers must face daily much harder. In such a situation, an expert on structural design but with a lack of knowledge about optimization techniques may be confronted with a complex optimization problem that needs to be addressed properly.

To complicate matters even further, most of the time these problems need to be optimized taking into account two or more conflicting criteria. If we focus on the design of a particular structure, this means that if we are looking to minimize the structure’s weight and minimize the stiffness, improving one optimization criterion implies worsening at least another criterion. These kinds of problems are usually referred to as Multi-Objective Optimization Problems (MOP) in the literature [6]. Their main intrinsic feature is that usually, there is no a unique solution which optimizes all the criteria at the same time. The solution to these problems therefore consists of a set of trade-off solutions between the different optimization criteria. In the field of multi-objective optimization, these solutions are said to be non-dominated, and the entire set of solutions that cannot be further improved in any criterion is referred to as the Pareto optimal set. This set, when it is plotted in terms of the optimization criteria being considered, is referred to as the Pareto front. If the MOP to be optimized is the design of a structure, the Pareto front represents an useful tool for civil engineers as it allows the trade-off between the different criteria to be graphically displayed, therefore enabling the designer to select the solution which better suits his/her interests at any given moment.

Most MOPs arising in real world scenarios, like civil engineering, can have NP-Hard complexity, present non-linear formulations, epistasis, and many other features that make the application of exact techniques infeasible. Therefore, approximation techniques, aimed at computing an accurate approximation of the Pareto front in polynomial time, are considered. Metaheuristics are an example of non-exact techniques which have been successfully applied to solving MOPs [6,7]. A metaheuristic is usually defined as a high-level strategy that governs a set of underlaying simpler operations (usually heuristics); an accurate coordination of these underlaying operations is what makes metaheuristics such a powerful search method [5]. The most well-known metaheuristics are evolutionary algorithms, but other techniques are also being used (e.g., Particle Swarm Optimization, Artificial Immune Systems, etc.). Some examples applied to structural design are [13,16,17]. Interested readers can refer to [14,22] for surveys of metaheuristics applied, respectively, to single- and multi-objective problems related to the design of civil structures.

In order to produce an optimized design of the structure of a building, different tasks must be completed. First, provide a sketch of the structure; second, define the MOP associated with that structure (i.e., the optimization criteria for the structure); third, apply an optimization technique (usually a metaheuristic); fourth, visualize the Pareto front of possible alternatives; and fifth, select a solution from the Pareto front. These tasks require knowledge in many different fields; furthermore, some of them are not specific to a particular design and can be applied to different structures; for example, the same optimization technique can be applied to optimizing many different types of structures. In this context, there is a lack of tools that (1) free civil engineers from having to have a deep knowledge on optimization, and at the same time and (2) allows them to apply different kinds of metaheuristics to optimize the same design or to apply the same metaheuristic to different problems with minimum effort.

The aim of this paper is to fill this gap and to describe the tool that covers all these issues. Specifically, our tool, called Ebes+jMetal, is intended to aid civil engineers from the very first design step of the structure to the last phase in which a solution from the approximated Pareto front is chosen. Ebes+jMetal integrates two existing open-source software applications: Ebes,
                        1
                        Ebes: http://ebes.sourceforge.net.
                     
                     
                        1
                      which incorporates a graphical tool for defining the components a structure is composed of a structure, and jMetal [10], which is a powerful optimization framework containing the implementation of many advanced metaheuristics for multi-objective optimization. There are a number of structural design software packages (e.g., Frame3DD,
                        2
                        Frame3DD: http://frame3dd.sourceforge.net/.
                     
                     
                        2
                      PowerFrame,
                        3
                        PowerFrame: http://www.buildsoft.eu/en/product/powerframe.
                     
                     
                        3
                      RISA-3D,
                        4
                        RISA-3D: http://www.risatech.com/p_risa3d.html.
                     
                     
                        4
                      etc.) but, to the best of our knowledge, none of them have an integrated multi-objective metaheuristics optimization framework.

Our goal is for Ebes+jMetal to become a useful tool in the field of civil engineering, enabling the application of unexplored optimization methods in the field. In this context, the survey [22] revealed that the vast majority of existing approaches only explore the application of NSGA-II [8] and SPEA2 [23], two algorithms that were developed more than ten years ago. The use of jMetal can facilitate the application of state-of-the-art optimizers to structural design problems.

The benefit of using our Ebes+jMetal software is therefore twofold. First, civil engineers are endowed with a software package covering the full process of developing bar structures including a powerful optimization module that can be used with a minimum knowledge of the metaheuristic internals. Second, the problems defined within Ebes can be used as benchmark problems by researchers working on the design of new optimization techniques, which can lead to new algorithmic advances that can be applied to improve the design of 2D and 3D bar structures.

Our tool can be used according to the work flow presented below:
                        
                           1.
                           The bar structure is designed using Ebes. Once this step has finished, an output file with the description of the design is generated.

The parameters of the metaheuristics intended to be used as optimizers are set.

The selected jMetal algorithm is chosen from Ebes, which launches the jMetal solver. The algorithm takes the file previously created in Step 1 as an input; the output of the jMetal algorithm consists of two files containing the Pareto optimal set approximation and its corresponding Pareto front.

The resulting files of the solver are loaded back into Ebes, so that the generated structural designs can be analyzed. The user of the tool can then decide which of the optimized designs fits more closely within the context.

We would like to remark that our software has a Web site
                        5
                        
                           http://ebesjmetal.sourceforge.net.
                     
                     
                        5
                      containing support information, such as tutorials, examples of use and a set of ready-defined structures.

The rest of the paper is structured as follows. Section 2 describes the main features of Ebes and jMetal. The process of combining both tools is detailed in Section 3. A case study illustrating how the Ebes+jMetal software works is included in Section 4. Finally, Section 5 presents the conclusions of the paper and suggests further lines of research.

In this section, we describe the main features of Ebes and jMetal.

Ebes is a software application aimed at the design, calculus, and analysis of bar structures including trusses, frames, and a combination of the two, supporting flat (2D) and spatial (3D) structures. It is written in Visual Basic.Net and is intended for students and professionals of disciplines such as civil engineering, mechanical engineering, and architecture.

The numerical model incorporated in Ebes for calculus is the direct stiffness method also known as the matrix stiffness method [21], based on the first-order conventional linear elastic stiffness matrix, so forces and deformations are linearly related [1]. Second order effects include the geometric stiffness matrix [18,12], which considers the effects of axial load on the bending stiffness of a member. The effect of buckling can also be considered in the calculus.

Ebes provides pre- and post-processing modules, which allow the users, respectively, to design the overall design of the structure and to analyze the results both numerically and graphically.

The main features of Ebes are:
                           
                              •
                              The maximum number of nodes and bars which compose an structure is unlimited and it is only bound by the main memory of the computer.

Automatic grouping of bars that present similar behavior according to a set of acceptable parameters, thus simplifying the input of the data into the application.

Self deduced bars weight according to the type of material and the bar cross-section, static excess of loads in the node, and static excess of load distributed over the bars.

Up to seven combinations of hypotheses using different weight vectors.

Computation of the variable efforts along bars as part of the post-processing component.

Verification of the bar stress according to the shape and measurements of the bar’s cross section.

Capability to import files with DXF v12 architectures generated with third party CAD/CAM software. This feature is particularly useful for structures with a complex geometry and shape.

Ebes incorporates a graphical interface which is sub-divided into three parts: Tabs, Toolbox, and Graphics. The Tabs section which can be seen on the left-side of Fig. 1
                        , and contains data about the working structure, such as geometry (nodes and bars), load nodes, load bars and groups. The Toolbox section (see left of Fig. 2
                        ) offers a number of options for visualizing the structure (scaling, moving, displaying elements such as axis, labels and inertias) and edition of nodes and elements. The Graphical section contains the 3D representation of the structure.

The designed structure can be stored in a text file (with “.ebes” extension), as depicted in Fig. 3
                        . Most of the data are stored as pairs 
                           
                              <
                              key
                              :
                              value
                              >
                           
                        , except those related to the nodes, groups and elements, which are included using a tabular scheme.

As an alternative to editing the numerical data sheets within Tabs, the user can draw the topology of the structure in the viewport Graph. The objects created in Graph as nodes, bars, loads, etc., are also reflected in numerical data sheets within Tab. The tool allows some operations to be recorded thus easing repetitive operations like the input of nodes and bars load.

Ebes has a large number of diagrams related to 3D structures, such as representations of loads in nodes, loads in bars (see Fig. 1), equivalent loads and reactions, deformation diagram, bending moment diagram (see Fig. 2), torques diagram, shear diagram, axial force diagram, volumetric representation of the structure, depending on the dimensions of the sections of the bars and proportional representation of the shapes of the cross sections of the bars with their measurements.

jMetal is a Java object-oriented framework aimed at solving multi-objective optimization problems with metaheuristic techniques [9]10. The jMetal project started in 2006 and has become a popular software package in the multi-objective optimization research community.

Compared with other frameworks based on Java (e.g., EVA2,
                           6
                           EVA2: http://www.ra.cs.uni-tuebingen.de/software/EvA2/.
                        
                        
                           6
                         OPT4j,
                           7
                           OPT4j: http://opt4j.sourceforge.net/.
                        
                        
                           7
                         or ECJ
                           8
                           ECJ: http://cs.gmu.edu/eclab/projects/ecj/.
                        
                        
                           8
                        ) and other programming languages (e.g., PISA [4] and MOEAT [19]), jMetal has two clear advantages: the large amount of included features (algorithms, problems, operators, quality indicators) and its clear object-oriented architecture, which makes it easy to use and extend.

The main features of jMetal are
                           9
                           See http://jmetal.sourceforge.net.
                        
                        
                           9
                        :
                           
                              •
                              Algorithms: 20 multi-objective and 4 single-objective solvers.

Problems: 5 benchmarks (ZDT, DTLZ, WFG, LZ09, CEC2009), classical (5), constrained (6), parallel (3), and combinatorial (mTSP, mQAP).

Quality indicators: hypervolume, spread, generational distance, inverted generational distance, additive epsilon.

Variable representations: binary, real, binary-coded real, integer, permutation.

A Web site (http://jmetal.sourceforge.net) containing the source codes, the user manual and, among other things, the Pareto fronts of the included MOPs, references to the implemented algorithms, and references to papers using jMetal.

The jMetal architecture is depicted in Fig. 4
                        . This object-oriented architecture is composed of a set of classes that can be used as building blocks for most of existing multi-objective algorithms. For this reason, by taking advantage of code-reusing, the algorithms share the same base components, such as implementations of genetic operators and density estimators, thus facilitating not only the development of new multi-objective techniques but also offering the possibility to carry out different kinds of experimental studies. The object-oriented architecture is flexible and extensible, so it is easy to add new algorithms, encodings, operators, and problems.

jMetal is implemented using plain Java objects, which do not require additional software to be executed, which facilitates its integration into other Java applications.

As Ebes and jMetal are independent systems, coming from different disciplines, our challenge was to combine them in a unique tool intended to design bar structures aided with multi-objective optimization techniques. An important source of difficulties is that Ebes is implemented in Visual Basic.Net and the jMetal in Java.

The approach that have been adopted is to use text files to interconnect both systems. The idea is simple: the initial designs sketched in Ebes are stored in an “.ebe” file (as Fig. 3 illustrates), and jMetal has been extended with the capacity to load this file and solving the corresponding optimization design problem; once this problem has been solved, the Pareto set and Pareto front approximations computed by a metaheuristic within jMetal are stored in two files, called by default VAR (from decision variables) and FUN (from function values), which can be loaded and processed by Ebes.

We now provide the technical details of the integration next. As jMetal has an extensible architecture, we started by developing a subclass of the Problem class, called Ebes.java, which contains a translation into Java of a part of the original Ebes Visual Basic code (resulting in more than 3000 lines of Java code). This class, by loading the contents of an “.ebe” file, is instantiated to a bar structure problem to be optimized. The file contains, among other things, the limits of the decision variables (to determine the valid values) as well as the side constraints. The Ebes.java class defines two objectives to be minimized: the total weight of the structure and the deformation in certain points. In the future, it will be possible to easily extend this class with more objectives. These objectives represent the typical trade-off of MOPs; in this case, they are related to cost and safety, which are conflicting goals. Given a particular configuration of variables, Ebes.java calculates the corresponding structural stability.

The workflow of the resulting integration of Ebes and jMetal is as follows (see Fig. 5
                     ). The first steps consist of designing the structure in Ebes and configuring the jMetal algorithms to be used as optimization solvers (e.g., the population size, number of evaluations, crossover and mutation probabilities, etc., in the case of using genetic algorithms). Then, a multi-objective metaheuristic to solve the problem is selected in Ebes. The selected optimization method is then executed as an external process. Once the algorithm has finished, a module in Ebes allows the VAR and FUN files reached by the solver to be imported, showing the obtained Pareto front approximation (see Fig. 6
                     ). The decision maker (i.e., the civil engineer) can then select a specific solution from this front, and the corresponding decision variable values are assigned to the geometric features of each bar group. Finally, the Ebes calculus module is executed to analyze the results.

To illustrate how our proposal is used, in this section we detail its application in the design of a cable-stayed 3D bridge which is shown in Fig. 7
                     .

Here we follow the typical workflow that will be applied by the user of the tool, which consists of the aforementioned four steps:
                        
                           •
                           Initial design in Ebes.

Configuring the optimization algorithms that can be selected as a solver.

Running the chosen optimization algorithm.

Loading the output of the algorithm in Ebes to be analyzed by the engineer.

The bridge design is formulated as a bi-objective optimization problem. The first objective is to minimize the total weight of the structure; the second one is to minimize the summation of the deformations in all the nodes.

The bridge has a total length of 9.00m and the deck length and width are 6.00m and 3.5m, respectively. In addition, the bridge contains two pillars (towers) 3.5m heigh with an upper beam. The main longitudinal beam, made of malleable steel, is suspended using two high resistance tensioners, so two materials with different elastic properties are used.

From a mechanical point of view, the structure comprises 25 nodes, 35 bars, and 8 groups of bars. Each bar can have one out of three different cross-sections: hollowed rectangle, I-beam, or circular. Each kind of bar is distinguished by a set of measurements, as illustrated in Fig. 8
                        , which lead to the encoding that will be used by the metaheuristic algorithms. Specifically, the solution to the problem is an array of values featuring a concrete instance of the bridge.

For the sake of simplifying the construction, we have configured groups of bars, in such a way that the elements composing the groups have the same shape, material and similar position in the structure. After applying this grouping strategy, the total number of decision variables is 26 and the total number of side-constraints is 68: the sum of 3 mechanical constraints per element, 4 geometrical constraints per groups of I-beam and hollowed rectangle elements, and 20 deflection constraints (see Table 1
                        ).

Attending to the load cases, we consider that the secondary crossbeams transmit to the longitudinal ones, the static stress resulting from the applied loads due to the weight of the bearing surface (deck) plus the weight of vehicles applied as distributed loads. Furthermore, the effect of the wind acting on the columns and main beams, transversely to the longitudinal axis, is taken into account. The gravitational static loads caused by the weight of each bar are not constant, and are due to the density of the material and the dimensions defined in the design stage.

After the initial design has been completed using the Ebes graphical interface, the next steps are (1) to select the algorithms to optimize the design and (2) to configure these solvers. For the example used throughout this study, we select two metaheuristics that belong to the family of Evolutionary Computation [3,11]. In particular, we consider the Non-dominated Sorting Genetic Algorithm II (NSGA-II) [8], which is by far the most popular and widely applied multi-objective optimization technique
                           10
                           The NSGA-II algorithm was cited more than 2750 times by the end of 2013
                        
                        
                           10
                        , and the Multi-Objective Evolutionary Algorithm based on Decomposition (MOEA/D) [15], a recent technique which is gaining momentum. In the work presented here we apply the cMOEA/D version [2], an extension of the original algorithm able of dealing with side constraints.

As said, NSGA-II and MOEA/D are evolutionary algorithms. These techniques share some common behavior and therefore some common elements to be configured. More specifically, evolutionary algorithms work with a set of solutions (known as the population) of the problem being solved which are evolved in an iterative process with the purpose of generating better solutions. Evolutionary algorithms made use three operators to evolve solutions: crossover, mutation, and selection. The crossover operator is aimed at generating new solutions by recombining the content of two existing solutions, while mutation produces a slightly modification of a new created or existing solution; both crossover and mutation are applied with a given probability. Finally, selection takes place so as to choose which solutions should be combined by crossover, and which ones survive from iteration to iteration. In most existing algorithms, selection is fixed and does not depend on the problem, while the recombination and mutation operators can be customized and are bound to the solution encoding. In summary, for each of the two algorithms under consideration it is necessary to specify the population size, the recombination and mutation operators, and the probability application of these operators.

In this study we use NSGA-II with a population of 100 solutions. As recombination and mutation operators for this algorithm we use, respectively, SBX (Simulated Binary Crossover) and polynomial mutation [7], both working with solutions that are represented as a vector of double values (as is the case of this problem). The former is applied with a probability of 0.9 to generate new solutions in each iteration and the latter is applied with a probability of 
                           
                              1
                              /
                              n
                           
                         (n is the number of variables; in our example, 
                           
                              n
                              =
                              26
                           
                        ) to modify on average one decision variable in each application of the operator. These values correspond to a typical configuration of NSGA-II.

In the case of MOEA/D, we also consider a population of size 100. In this case, the solutions are recombined using the differential evolution operator [20]. This operator requires two parameters to be set and applied: CR and F. We use 
                           
                              CR
                              =
                              1.0
                           
                         and 
                           
                              F
                              =
                              0.5
                           
                         in our study. For the mutation operator we also apply the polynomial mutation with a probability of being applied of 1/26 (as in NSGA-II).

Finally, in both algorithms it is necessary to set a termination criterion, i.e. when the algorithms have to stop iterating. A common criterion is to set a maximum number of evaluations (i.e., a maximum number of generated solutions). In this study, we use 50,000 as the maximum number of evaluations. We have determined this value after some initial trials.

It should be noted that these configurations only refer to the algorithms to be applied, not to the problem itself, and the parameter values are set with Ebes without needing to modify the jMetal code.

Once the desired configurations have been set, the user can select the metaheuristics in Ebes and run them. This is illustrated in Fig. 9
                        , which shows the execution trace of an algorithm.

An important issue is the total running time of the multi-objective optimization solvers. This time is highly problem dependent, and it has to be noted that for complex time consuming problems the computing power of a typical personal computer could be insufficient.

In the case of our cable-stayed bridge, the times of running NSGA-II and MOEA/D are in the order of 5min on average, in terms of performance, a laptop equipped with an Intel i3 processor and 4GB of RAM running Windows 7 was used. jMetal provides multithreaded versions of some algorithms (e.g., pNSGA-II, pSMPSO, pMOEAD), which can take advantage of the multicores of modern processors, thus allowing the solvers to be run faster.

Nevertheless, when dealing with very complex design problems solving them with a single computer can be infeasible despite having multiple cores. For example, we considered the design of a considerably larger cable-stayed bridge in [22], and so a parallel distributed approach was adopted, requiring more than 350 cores to complete the execution of the chosen algorithm in a reasonable amount of time (about 10h). This kind of parallel support is not available in the current version of Ebes+jMetal, but it will be incorporated in the future.

Once the algorithms have finished their execution, the computed Pareto fronts’ approximations are loaded and shown in Ebes. Fig. 10
                         shows what the graphical user interface of Ebes for doing so looks like.

In the previous figure, the fronts computed by NSGA-II and cMOEA/D algorithms after performing 50,000 function evaluations for the problem instance addressed in this study are depicted. The horizontal axis shows the values of the first objective (weight of the structure of the bridge) of the solutions contained in the Pareto front; while, the vertical axis shows the value of the second objective (deformation of the structure). In this example, it is possible to see that the two algorithms being considered have computed different Pareto front approximations. The Ebes+jMetal user has to take into account that metaheuristics are stochastic techniques, so each algorithm run usually produces a different outcome. The fronts included in Fig. 10 represent a typical result.

In the following, we analyze in more detail the fronts produced by both algorithms from two perspectives: the algorithmic point of view and the view of the civil engineer.

If we focus on analyzing the returned fronts, without taking into account the meaning of the solutions to the decision maker, the first noticeable fact is that MOEA/D has computed a front which spreads across a wider range of values than NSGA-II. These kinds of properties are usually highly useful to for the decision maker, since the range of different possible solutions to choose from is broader. In addition, some of the solutions computed by MOEA/D dominate some Pareto solutions computed by NSGA-II: they have lower weight and lower deformation. This only happens in the solutions located in the central part of the Pareto front. Despite these two advantages of the front computed by MOEA/D over the one computed by NSGA-II, the latter also deserves further attention. In particular, if we focus on the right side of the Pareto front (those solutions containing the minimum value of the second objective), we see that NSGA-II has provided a set of better distributed solutions than MOEA/D. This can be also a valuable point for a decision maker interested in that part of the Pareto front.

From the perspective of the civil engineer, the fronts obtained allow her or him to decide about which particular trade-off solution could be the most suitable for the design problem. For a given problem is not usual to get the quantity and variety of possible solutions yielded by the multi-objective metaheuristic algorithms. In the case of the bridge design and the two executed algorithms, the choice is the front returned by cMOEA/D. In particular, those solutions on the left of the fronts are highly desirable, because they provide designs with the lowest weight while keeping the final result safe as all the solutions obtained comply with the set of problem constraints. Each solution provided from the Pareto front approximation guarantees the balanced and stable behavior of the structure. The variety of solutions has its origin in the different sizes of the bar sections found during the search process, which define the mass distribution as a consequence of the location and combination of the bars in the structure. The resultant geometric dimensions are within a limited range which has been previously established, fulfilling the constraints bound to the geometric proportions. Each solution corresponds to a specific and different behavior of deformation and tension. Table 2
                         shows the configuration of the solution with lowest weight from the front computed by cMOEA/D.
                           11
                           Glossary:
                                 
                                    –
                                    Shape: transversal geometry of the bar for each group.

Description: tag that identifies and locates the bar group in the structure.

Gr.: Number of groups of bars with similar mechanical and geometrical features.


                                       Y: section height or diameter for circle.


                                       Z: section width.


                                       ty: thickness on y-axis.


                                       tz: thickness on z-axis.


                                       
                                          
                                             
                                                
                                                   σ
                                                
                                                
                                                   max
                                                
                                             
                                          
                                       : maximum stress calculation for group.


                                       
                                          
                                             
                                                
                                                   σ
                                                
                                                
                                                   min
                                                
                                             
                                          
                                       : minimum stress (compression) calculation for group.


                                       
                                          
                                             τ
                                          
                                       : shear calculation for group.


                                       
                                          
                                             
                                                
                                                   σ
                                                
                                                
                                                   a
                                                
                                             
                                          
                                       : (+) allowable stress and (−) allowable compression.


                                       
                                          
                                             
                                                
                                                   τ
                                                
                                                
                                                   a
                                                
                                             
                                          
                                       : allowable shear.


                                       
                                          
                                             OF
                                             1
                                          
                                       : weight in meganewton.


                                       
                                          
                                             OF
                                             2
                                          
                                       : sum of deformations of selected nodes in meter.


                                       
                                          
                                             
                                                
                                                   γ
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       : specific weigh of the material for the i bar.


                                       
                                          
                                             
                                                
                                                   l
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       : bar length.


                                       
                                          
                                             
                                                
                                                   Ω
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       : optimized trasnsversal section of the bar.


                                       
                                          
                                             
                                                
                                                   δ
                                                
                                                
                                                   j
                                                
                                             
                                          
                                       : deflection in selected node j.

@&#CONCLUSIONS AND FUTURE WORK@&#

We have presented Ebes+jMetal, a software package for the optimization of the design of bar structures, resulting in the combination of two open source tools: Ebes, aimed at the design of structures, and jMetal, a framework for multi-objective optimization with metaheuristics. With the proposed software solution, the civil engineer has a complete package to design bar structures which can be optimized, at the same time, by using a wide range of multi-objective metaheuristics. In this way, contradictory objectives such as the structure weight and deformation can be minimized at the same time by metaheuristic solvers, which yield a front of solutions from which the designer can choose the best trade-off result.

The main features of Ebes and jMetal have been summarized, as well as their integration into a single tool. The use of our proposal has been illustrated taking as an example the design of a cable-stayed bridge, detailing the steps involved in the entire process: initial design with Ebes, configuring the metaheuristics in jMetal, selecting and running the optimizers, and analysis of the results obtained with Ebes.

There are a several possible lines of future work. A clear extension is to add preference articulation to Ebes+jMetal, so that the engineer can select the region of interest to be searched instead of the full Pareto front. Given the large number of algorithms available in jMetal, the civil engineer could be overwhelmed when deciding which algorithm to choose to optimize the design of a new structure; in practice, this means that NSGA-II (the standard de facto algorithm) will be the chosen one. Thus, a desirable extension is to add the possibility of automatically performing a set of preliminary experiments to give the user a hint as to the most promising algorithm. Finally, additional objective functions could be added in Ebes, such as minimizing the squared errors from the working stresses with respect to the allowable stress values.

@&#ACKNOWLEDGEMENTS@&#

Antonio J. Nebro has been supported by Grants TIN2011-25840 (Ministerio de Ciencia e Innovación) and P11-TIC-7529 and P12-TIC-1519 (Plan Andaluz de Investigación, Desarrollo e Innovación). Francisco Luna acknowledges partial support form PRI-IB13113 (Gobierno de Extremadura).

@&#REFERENCES@&#

