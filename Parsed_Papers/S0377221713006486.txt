@&#MAIN-TITLE@&#The bi-objective Pollution-Routing Problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A bi-objective variant of the Pollution-Routing Problem (PRP) is introduced.


                        
                        
                           
                           Several multi-objective optimization techniques are developed and tested for the problem.


                        
                        
                           
                           The proposed methods find trade-offs between fuel consumption and driver times.


                        
                        
                           
                           Results of experimentation conducted on realistic instances are presented.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Vehicle routing

Fuel consumption

CO2 emissions

Multicriteria optimization

Heuristics

@&#ABSTRACT@&#


               
               
                  The bi-objective Pollution-Routing Problem is an extension of the Pollution-Routing Problem (PRP) which consists of routing a number of vehicles to serve a set of customers, and determining their speed on each route segment. The two objective functions pertaining to minimization of fuel consumption and driving time are conflicting and are thus considered separately. This paper presents an adaptive large neighborhood search algorithm (ALNS), combined with a speed optimization procedure, to solve the bi-objective PRP. Using the ALNS as the search engine, four a posteriori methods, namely the weighting method, the weighting method with normalization, the epsilon-constraint method and a new hybrid method (HM), are tested using a scalarization of the two objective functions. The HM combines adaptive weighting with the epsilon-constraint method. To evaluate the effectiveness of the algorithm, new sets of instances based on real geographic data are generated, and a library of bi-criteria PRP instances is compiled. Results of extensive computational experiments with the four methods are presented and compared with one another by means of the hypervolume and epsilon indicators. The results show that HM is highly effective in finding good-quality non-dominated solutions on PRP instances with 100 nodes.
               
            

@&#INTRODUCTION@&#

Freight transportation lies at the forefront of logistics planning. Until now, the planning of freight transportation activities has mainly focused on ways of saving money and increasing profitability by considering internal transportation costs only, e.g., fuel cost, drivers’ wages (see, e.g., Crainic, 2000; Forkenbrock, 1999, 2001).

Freight transportation in the United Kingdom (UK) is responsible for 22% of the CO2 emissions from the transportation sector, amounting to 33.7 million tonnes, or 6% of the CO2 emissions in the country, of which road transport accounts for a proportion of 92% (McKinnon, 2007). The 2008 Climate Change Act commits the UK to an ambitious and legally binding 80% reduction in greenhouse gases (GHG) emissions by 2050, from a 1990 baseline. The situation in Europe is not much different. According to the TERM 2011 Report published by the European Environment Agency, transport (including international maritime) contributed 24% of the overall GHG emissions in the EU-27 countries in 2009, with road transport accounting for 17% of the total GHG emissions Vicente (2011). The transportation sector therefore has an important role to play, as one of the largest GHG contributor, in achieving reduction targets (Tight, Bristow, Pridmore, & May, 2005).

The carbon dioxide equivalent (CO2e) measures how much global warming a given type and amount of GHG may cause, using the functionally equivalent amount or concentration of CO2 as the reference. The selection of GHGs to include in the carbon footprint is an important issue. Wright, Kemp, and Williams (2011) suggest that a significant proportion of emissions can be captured through measurement of the two most prominent anthropogenic GHGs, CO2 and CH4. The emissions of CO2 are directly proportional to the amount of fuel consumed by a vehicle. This amount is dependent on a variety of vehicle, environment and traffic-related parameters, such as vehicle speed, load and acceleration (Demir, Bektaş, & Laporte, 2011). On the other hand, the emissions of CH4 are a function of many complex aspects of combustion dynamics and of the type of emission control systems used.

Freight companies also generate significant amounts of air pollution besides GHG, including particulate matter (small particles of dust, soot, and organic matter suspended in the atmosphere), carbon monoxide (colorless, odorless, poisonous gas produced when carbon-containing fuel is not burned completely), ozone (formed when emissions of nitrogen oxides (NO
                        x
                     ) and volatile organic compounds (VOCs) chemically react in the presence of sunlight) and hazardous air pollutants, also referred to as air toxics (chemicals emitted into the atmosphere that cause or are suspected to cause cancer or other severe health effects) (PSRC, 2010).

Freight transportation planning has many facets, particularly when viewed from the multiple levels of decision making. Arguably the most famous problem at this level is the well-known Vehicle Routing Problem (VRP), which consists of determining routes for a fleet of vehicles to satisfy the demands of a set of customers. The traditional objective in the standard VRP is to minimize a cost function which is traditionally considered to be the total distance traveled by all vehicles. Taking a more explicit look at externalities of freight transportation, and in particular vehicle routing, Bektaş and Laporte (2011) introduced the Pollution-Routing Problem (PRP) which aims at minimizing a total cost function comprising fuel and driving costs in the presence of time windows.

Most real-world problems involve multiple objectives. In the context of the PRP, two important objectives should be taken into account, namely minimization of fuel consumption and the total driving time. Fuel consumption depends on the energy required to move a vehicle from one point to another, and is proportional to the amount of emissions. As discussed in Demir, Bektaş, and Laporte (2012) for each vehicle there exists an optimal speed yielding a minimum fuel consumption. However, this speed is generally lower than the speed preferred by vehicle drivers in practice. Another important issue in road transportation is time management. In freight transport terminology, time is money and it is essential for firms to perform timely deliveries in order to establish and keep a good reputation. In practice, drivers’ schedules tend to be flexible, with different numbers of hours worked each day, subject to driving time regulations. If a saving of one hour can be achieved on a given vehicle route, this would imply reducing the corresponding driver’s costs by an hour (Fowkes & Whiteing, 2006). Reduction in time spent on a route can be achieved by traveling at higher speed, but this, in turn, increases fuel costs and emissions. Since the two objectives of minimizing fuel and time are conflicting, the problem requires the use of multi-objective optimization to allow an evaluation of the possible trade-offs.

In practice, companies would like to minimize their total operating cost, including those related to fuel and time. However, costs of fuel, emissions and time might differ from one organization to another, and in some cases rather significantly. As an example, it is found that driver costs are paid as hourly wages in some countries (e.g., UK and USA) whereas they are a monthly salary in others. Fuel costs also differ between countries. Finally, carbon costs vary significantly (£60–£225 per tonne) as discussed in Bektaş and Laporte (2011). In this paper, we investigate a bi-objective vehicle routing problem in which one of the objectives is related to fuel consumption and the other to driving time. The two objectives are treated in their natural units of measurement in order to eliminate the bias resulting from the cost differences just mentioned. The benefit is that managers or users of the approach described in the paper can attach cost figures relevant to their organization and can produce tailored trade-off curves for their operations.

We propose a solution method based on an enhanced adaptive large neighborhood search (ALNS) and a specialized speed optimization algorithm described in Demir et al. (2012). The scientific contribution of this study is threefold: (i) to introduce of a bi-objective variant of the Pollution-Routing Problem, (ii) to apply and test multi-objective techniques to solve the bi-objective PRP, and (iii) to perform extensive computational experiments using four a posteriori methods evaluated by means of two performance indicators. In contrast to existing studies on the “green” VRP (for which a brief review is presented below), this paper breaks away from the literature by considering two objectives, one of them being a comprehensive emissions function incorporating the effect of load and speed. This study also contributes to the multi-objective optimization literature by presenting a comprehensive comparison of four methods on the bi-objective PRP.

The remainder of this paper is organized as follows. In Section 2 we provide a general overview of multi-objective optimization and we summarize the existing literature on multi-objective and “green” VRPs. Section 3 presents the bi-objective PRP along with a mathematical programming pformulation. Section 4 includes a brief description of the heuristic algorithm. Section 5 presents the generation of the instances and the results of extensive computational experiments, together with managerial insights. Conclusions are stated in Section 6.

Multi-objective optimization (MOO), also known as multi-objective programming, multi-criteria or multi-attribute optimization, is the process of simultaneously optimizing two or more conflicting objectives subject to a number of constraints. In this section, we consider a MOO problem of the form
                        
                           (1)
                           
                              (
                              MOO
                              )
                              
                              minimize
                              
                              {
                              
                                 
                                    f
                                 
                                 
                                    1
                                 
                              
                              (
                              x
                              )
                              ,
                              
                                 
                                    f
                                 
                                 
                                    2
                                 
                              
                              (
                              x
                              )
                              ,
                              …
                              ,
                              
                                 
                                    f
                                 
                                 
                                    k
                                 
                              
                              (
                              x
                              )
                              }
                           
                        
                     
                     
                        
                           (2)
                           
                              subject
                              
                              to
                              
                              x
                              ∈
                              S
                           
                        
                     where f
                     
                        k
                     : 
                        
                           
                              
                                 R
                              
                              
                                 n
                              
                           
                           →
                           R
                        
                      are k
                     ⩾2 objective functions to be minimized simultaneously. The decision variables x
                     =(x
                     1,…,
                     x
                     
                        n
                     )
                        T
                      belong to a non-empty feasible region (set) 
                        
                           S
                           ⊆
                           
                              
                                 R
                              
                              
                                 n
                              
                           
                        
                     . If there is no conflict between the objective functions, then a solution in which every objective attains its optimum values can be found. In this case, no special methods are needed. To avoid such trivial cases, we assume that no such solution exists. This means that the objective functions are at least partly conflicting. They may also be incommensurable, i.e., measured in different units (Miettinen, 1999), as is the case in this paper.

For non-trivial multi-objective problems, one cannot identify a single solution that simultaneously optimizes every objective. While searching for solutions, one reaches a point such that, when attempting to improve an objective, other objectives suffer as a result. A solution is called non-dominated, Pareto optimal, or Pareto efficient if it cannot be eliminated from consideration by replacing it with another solution which improves upon one of the objectives without worsening another. Finding such non-dominated solutions, and quantifying the trade-offs in satisfying the different objectives, is the goal of setting up and solving a MOO problem. The next section presents formal definitions of Pareto optimality.

In this section, we review several methods for solving MOO problems and for generating Pareto optimal solutions. General references on this topic can be found in Ehrgott and Gandibleux (2002) and Jozefowiez, Semet, and Talbi (2008a).

Methods for MOO can be classified in various ways. One of them is based on whether many Pareto optimal solutions are generated or not, and on the role of the decision maker in solving the MOO problem (Rangaiah, 2009). One possible classification is where the methods are initially grouped into two: (i) generating methods and (ii) preference-based methods. The former group of methods aims at generating one or more Pareto optimal points without any prior input from a decision maker. In contrast, the latter uses extra information from a decision maker as part of the solution process. Generating methods are further divided into three: (i) no-preference methods, (ii) a posteriori methods using a scalarization approach, and (iii) a posteriori method using a multi-objective approach.

No-preference methods do not require any prior information and generally yield only one Pareto optimal point. Examples of such methods include global criterion and the multi-objective bundle method (Wierzbicki, 1999). The second type of a posteriori methods use a scalarization approach. Scalarization means converting the problem into a single or a family of single objective optimization problems using a real-valued objective function, termed the scalarizing function. The weighting and ∊-constraint methods belong to a posteriori methods based on a scalarization approach in which a series of scalarized single objective problems have to be solved to find the Pareto optimal points (Coello, Lamont, & Van Veldhuizen, 2002; Deb, 2001). The third type of a posteriori methods use a multi-objective rank trial solutions based on the objective function values. Examples are the non-dominated sorting genetic algorithm and ant colony optimization. All a posteriori methods provide many Pareto optimal solutions to the decision maker who will then select their preferred one (Fonseca & Fleming, 1995).

Preference-based methods are further divided into two: (i) a priori and (ii) interactive methods. In the former, preferences of a decision maker are sought and are then included in the initial formulation of a single objective problem. Some of the a priori methods are values function methods, lexicographic ordering and goal programming. The latter requires interaction with the decision maker during the solution process. Examples are interactive surrogate worth trade-off method and the NIMBUS method (Deb & Chaudhuri, 2007).

This paper focuses on the use of a posteriori methods using scalarization of the objective functions. The methods used in this paper are described below.

In the weighting method, the idea is to associate each objective function with a weighting coefficient and to minimize the weighted sum of the objectives. This way, multiple objective functions are transformed into a single objective function as in Miettinen (1999). We assume that the weighting coefficients w
                           
                              i
                            are non-negative for all i
                           =1,…,
                           k. Weights are normalized in such a way that 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       k
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 1
                              
                           . The MOO is then transformed into the following problem:
                              
                                 (3)
                                 
                                    minimize
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             k
                                          
                                       
                                    
                                    
                                       
                                          w
                                       
                                       
                                          i
                                       
                                    
                                    
                                       
                                          f
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    x
                                    )
                                 
                              
                           
                           
                              
                                 (4)
                                 
                                    subject
                                    
                                    to
                                    
                                    x
                                    ∈
                                    S
                                 
                              
                           Problem (3) and (4) is a single-objective optimization problem which can be solved by existing methods, such as linear or integer programming.

This method is an extension of weighting method where the objective functions are normalized to take values between 0 and 1 (Grodzevich & Romanko, 2006). This is done by using the differences of optimal function values in the worst (called the Nadir) and the best (called the Utopia) points, which yield the length of the intervals in which objective functions vary within the Pareto optimal set. The MOO problem is transformed into the following problem:
                              
                                 (5)
                                 
                                    minimize
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             k
                                          
                                       
                                    
                                    
                                       
                                          w
                                       
                                       
                                          i
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   i
                                                
                                             
                                             (
                                             x
                                             )
                                             -
                                             
                                                
                                                   z
                                                
                                                
                                                   i
                                                
                                                
                                                   U
                                                
                                             
                                          
                                       
                                    
                                    /
                                    
                                       
                                          
                                             
                                                
                                                   z
                                                
                                                
                                                   i
                                                
                                                
                                                   N
                                                
                                             
                                             -
                                             
                                                
                                                   z
                                                
                                                
                                                   i
                                                
                                                
                                                   U
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (6)
                                 
                                    subject
                                    
                                    to
                                    
                                    x
                                    ∈
                                    S
                                 
                              
                           where z
                           
                              U
                            is the ideal objective vector, i.e., the Utopia point, and z
                           
                              N
                            is the Nadir point. The ideal point, which optimizes all objective functions, is not normally feasible because of the conflicting objectives but provides lower bounds for the Pareto optimal set. The ideal point can be calculated as 
                              
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                    
                                       U
                                    
                                 
                                 =
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       [
                                       i
                                       ]
                                    
                                 
                                 )
                              
                            where 
                              
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 arg
                                 
                                 
                                    
                                       min
                                    
                                    
                                       x
                                    
                                 
                                 {
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 x
                                 )
                                 :
                                 x
                                 ∈
                                 S
                                 }
                              
                           . The Nadir point, which corresponds to the worst objective value for each of the objectives, may be feasible and provides upper bounds for the Pareto optimal set. It is calculated as 
                              
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                    
                                       N
                                    
                                 
                                 =
                                 
                                    
                                       max
                                    
                                    
                                       1
                                       ⩽
                                       j
                                       ⩽
                                       k
                                    
                                 
                                 
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       [
                                       j
                                       ]
                                    
                                 
                                 )
                                 ,
                                 ∀
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 k
                              
                           . In practice, these points can be found by calculating the best and the worst values of each objective function.

In the ∊-constraint method, only one of the objective functions is selected to be optimized, while all others are converted into constraints by imposing an upper bound. The problem to be solved then takes the form
                              
                                 (7)
                                 
                                    minimize
                                    
                                    
                                       
                                          f
                                       
                                       
                                          l
                                       
                                    
                                    (
                                    x
                                    )
                                 
                              
                           
                           
                              
                                 (8)
                                 
                                    subject
                                    
                                    to
                                    
                                    
                                       
                                          f
                                       
                                       
                                          j
                                       
                                    
                                    (
                                    x
                                    )
                                    ⩽
                                    
                                       
                                          ∊
                                       
                                       
                                          j
                                       
                                    
                                    
                                    ∀
                                    j
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    k
                                    ;
                                    
                                    j
                                    
                                    ≠
                                    
                                    l
                                 
                              
                           
                           
                              
                                 (9)
                                 
                                    
                                    x
                                    ∈
                                    S
                                 
                              
                           
                        

In order to generate as many Pareto optimal solutions as possible, the right-hand side of constraint (8) is gradually increased by a small amount and the problem is solved again whenever ∊
                           
                              j
                            is increased. As indicated by Mavrotas (2009), this method offers several advantages over WM and WMN. The weighting method may lead to an extreme solution. In contrast, the ∊-constraint method is able to produce non-extreme (interior) efficient solutions. Moreover, the computational effort is less than that of the weighting method. Furthermore, WMN requires the normalization of the objective functions which may affect the results, whereas this is not required for the ∊-constraint method. Other extensions of the ∊-constraint method are discussed by Ehrgott and Ryan (2002) and Laumanns, Thiele, and Zitzler (2006).

This method combines the adaptive weighting and ∊-constraint methods. The name “hybrid” was suggested by Chankong and Haimes (1983). The proposed hybrid method takes the form
                              
                                 (10)
                                 
                                    minimize
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             k
                                          
                                       
                                    
                                    
                                       
                                          w
                                       
                                       
                                          i
                                       
                                    
                                    
                                    
                                       
                                          
                                             
                                                
                                                   f
                                                
                                                
                                                   i
                                                
                                             
                                             (
                                             x
                                             )
                                             -
                                             
                                                
                                                   z
                                                
                                                
                                                   i
                                                
                                                
                                                   U
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (11)
                                 
                                    subject
                                    
                                    to
                                    
                                    
                                       
                                          f
                                       
                                       
                                          j
                                       
                                    
                                    (
                                    x
                                    )
                                    ⩽
                                    
                                       
                                          ∊
                                       
                                       
                                          j
                                       
                                    
                                    
                                    ∀
                                    j
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    k
                                 
                              
                           
                           
                              
                                 (12)
                                 
                                    
                                    x
                                    ∈
                                    S
                                 
                              
                           where w
                           
                              i
                           
                           >0 ∀(i) i
                           =1,…,
                           k.

In this section, we look at the existing studies on the multi-objective VRP. The VRP has been the subject of intensive research efforts both for heuristic and exact optimization approaches. However, the multi-objective variant of the VRP has not been intensively investigated. A survey of multi-objective on VRPs can be found in Jozefowiez, Semet, and Talbi (2008b), who present a classification of objectives related to different aspects of VRPs. These are: tour (cost, profit, makespan, balance, etc.), nodes/arcs (time windows, customer satisfaction, etc.), and resources (management of the fleet, characteristics of the product to collect/deliver, etc.).

Evolutionary algorithms constitute a widely popular approach in solving multi-objective VRPs. Due to their population-based nature, these algorithms are able to approximate the whole Pareto front (or surface) in a single run. An extensive survey on multi-objective evolutionary algorithms can be found in Zitzler, Deb, and Thiele (2000), Veldhuizen and Lamont (2000) and Zhou et al. (2011).

A relevant study is that of Paquette, Cordeau, Laporte, and Pascoal (2013), who proposed a tabu search algorithm incorporating a routing cost and quality of service in the dial-a-ride problem, where the reference point method is used to generate several non-dominated solutions. Another study by Qian, Gribkovskaia, Laporte, and Halskau (2011) who seek to improve helicopter transportation safety by solving a routing problem with a risk objective expressed in terms of expected number of fatalities. Finally, Jabali, Van Woensel, and de Kok (2012) consider a VRP model that takes into account of travel time, fuel, and CO2 emissions costs in a time-dependent context, where the latter are estimated using emission functions provided in the MEET report (Hickman, Hassel, Joumard, Samaras, & Sorenson, 1999). The authors describe a tabu search algorithm for the problem and show, through computational experiments, that limiting vehicle speeds to a certain extent is effective in reducing emissions although costly in terms of total travel time.

This section first reviews the methodological on the green VRP, followed by case studies.

A relevant study is by Maden, Eglese, and Black (2009), who look at the vehicle routing and scheduling problem to minimize the total travel time under congestion. The authors take into account regular congestion due to volume of traffic, and long-term road works, which can be predicted from historical data. They propose a heuristic algorithm to consider time-varying travel times. In order to reflect the characteristics of a real-life problem, their algorithm allows the time required to travel between locations to vary according to the time at which the journey starts (Eglese, Maden, & Slater, 2006). The authors consider the current driving legislation such that: (i) there must be a driving break of 45minutes every 4.5hours, (ii) if the total working time is greater than 6hours then a 30minutes break must be taken and (iii) if the total working time is greater than nine hours then a 45minutes break must be taken. Their results suggest that the proposed approach may yield up to 7% savings in CO2 emissions.

In the context of CO2 minimization, Urquhart, Scott, and Hart (2010b) study the Traveling Salesman Problem (TSP) to identify tours with low CO2 emissions. The authors examine two different fuel emission models, which are a power based instantaneous fuel consumption model introduced by Bowyer, Biggs, and Akçelik (1985) and a simpler spreadsheet based model from the UK National Atmospheric Emission Inventory. The authors use the latter model in their solution approach. Computational results on six randomly generated instances, each with between 10 and 30 delivery points, suggest that only a small improvement can be achieved using the fuel emission model because of the inadequacy of the simple spreadsheet emission model. Another work by Urquhart, Hart, and Scott (2010a) studies the VRPTW to build low CO2 solutions using evolutionary algorithms, using an instantaneous fuel consumption model (Bowyer et al., 1985). The authors look at the trade-off between CO2 savings, distance and the required number of vehicles. Their results indicate that savings of up to 10% can be achieved, depending on the problem instance and the ranking criterion used in the evolutionary algorithm. In a related study by Scott, Urquhart, and Hart (2010), the authors study the effect of topology and payload on CO2 optimized vehicle routing, by using the COPERT estimation model which is based on the average speed of a vehicle and includes payload and correction factors for heavy goods vehicles (Ntziachristos & Samaras, 2000). They work on two different sets of problem data: delivery of groceries to households and delivery of paper from a central warehouse. They also work on several TSP instances randomly chosen from problem datasets, and assign average speeds for each road category. Their results suggest that the effect of gradient and payload are highly dependent on the mixture of the problems studied. The difference in CO2 emissions between the solutions is found to be less than 2.1% for the COPERT model as in stated in the literature.

An emissions VRP (EVRP), which is an extension of the TDVRP, was introduced by Figliozzi (2010), who also describes a formulation and solution approaches for the problem. The objective of the EVRP is the minimization of emission costs, which are proportional to the amount of GHG emitted which, in turn, is a function of speed and distance traveled. In the solution approach, a partial EVRP is first solved to minimize the number of vehicles by using a TDVRP algorithm, and emissions are then optimized subject to a fleet size constraint. The departure times are also optimized using the proposed algorithm for any pair of customers. Computational results obtained on Solomon’s test instances suggest that route characteristics and the type of the dominant constraint both play a significant role in the results. In a related study, Figliozzi (2011) focused on the analysis of CO2 emissions for different levels of congestion and time-definitive customer demands. Travel time data from an extensive archive of freeway sensors were used to analyze the impacts of congestion on commercial vehicle emissions. Computational results suggest that congestion impacts on commercial vehicle emissions are highly significant, and public agencies and highway operators must carefully study the implications of policies that limit travel speeds or increase speed limits since they may lead to an increase in CO2 emissions. According to Figliozzi (2011), if travel speed is reduced to an optimal level from an emissions perspective, emissions can be reduced without a significant increase in fleet size or distance traveled.


                           Bektaş and Laporte (2011) introduced the Pollution-Routing Problem (PRP), which considers minimization of fuel cost and driver costs. In estimating pollution, the authors investigate factors such as speed, load, and time windows, using the emissions functions proposed by Barth, Younglove, and Scora (2005). In these functions, the engine-out emission rate is directly related to the rate of fuel use. Bektaş and Laporte (2011) assume that in a vehicle trip all parameters will remain constant on a given arc, but load and speed may change from one arc to another. Their model approximates the total amount of energy consumed on the arc, which directly translates into fuel consumption and into GHG emissions. The authors have run experiments on three classes of 10 instances with 10, 15 and 20 nodes, where the nodes represent UK cities. They have analyzed cases where customer demands are generated randomly based on a discrete uniform distribution, as well as the effects of variance in demand, of vehicle type and of time windows. Computational results reported by the authors suggest that, by using the proposed approach, energy savings can be up to 10% when time windows are in place, and up to 4% when the demand variation is high.


                           Tavares, Zsigraiova, Semiao, and da Graça Carvalho (2008) looked at optimization of routing networks for waste transportation. The authors proposed the use of geographic information systems (GIS) 3D route modeling to optimize the route with an aim to minimize fuel consumption in different municipalities of the island of Santo Antao of Cape Verde. Their model takes into account of both the road angle and the vehicle load. Their findings indicate that optimization of fuel consumption yields up to 52% savings in fuel when compared to routes with the shortest distance, even if this implies increasing the travel distance by 34%. Another work by Tavares, Zsigraiova, Semiao, and Carvalho (2009) is on the optimization of municipal solid waste collection routes to minimize fuel consumption using 3D GIS modeling. The authors make use of the COPERT model described by Ntziachristos and Samaras (2000). For the case of the city of Praia, their approach reduces the traveled distance by 29% and fuel consumption by 16%. For the case of the Santiago island, savings in fuel consumption is found to be 12%. Another real-life application was presented by Apaydin and Gonullu (2008). The authors attempt to control emissions in the context of route optimization of solid waste in Trabzon, Turkey, with a constant emission factor to estimate fuel consumption. The authors aim to minimize the distance traveled by the trucks. Their results suggest that the route distance and time can be decreased by 24.6% using their approach, with implications of reducing CO2 emission by 831.4grams on each route.

A heterogeneous fleet to reduce emissions was studied by Pitera, Sandoval, and Goodchild (2011). The authors gave a mathematical formulation and proposed metaheuristics algorithm. According to their results, emissions and costs can be reduced by an average of almost 6% and 9%, respectively. They have also looked at the service quality. For example, reducing delivery frequency to once a day leaded to emissions and cost savings close to 35% and 3%, respectively. The last case study reviewed here is by Ubeda, Arcelus, and Faulin (2011), who investigated the environmental effects of routing in Eroski, Spain. The authors compared four different approaches, namely the current approach, rescheduling (CVRP), backhauling (VRPB) and green VRP. They used a matrix of emissions based on the estimation of CO2 emitted between each link as described by Palmer (2007). Their results suggest that the implementation of the green routing approach has benefits from economic and ecological perspectives. In terms of the green aspect of routing, the results indicate that savings of 13.06% in distance and of 13.15% in emissions can be achieved using the green VRP approach.

We now formally describe the bi-objective PRP. This problem is defined on a complete directed graph 
                        
                           G
                           =
                           (
                           N
                           ,
                           A
                           )
                        
                      where 
                        
                           N
                           =
                           {
                           0
                           ,
                           …
                           ,
                           n
                           }
                        
                      is the set of nodes, 0 is a depot and 
                        
                           A
                           =
                           {
                           (
                           i
                           ,
                           j
                           )
                           :
                           i
                           ,
                           j
                           ∈
                           N
                        
                      and i
                     ≠
                     j} is the set of arcs. The distance from node i to node j is denoted by d
                     
                        ij
                     . A fixed-size fleet of m vehicles, each of capacity Q, is available to serve the nodes. The set 
                        
                           
                              
                                 N
                              
                              
                                 0
                              
                           
                           =
                           N
                           ⧹
                           {
                           0
                           }
                        
                      is a customer set, and each customer 
                        
                           i
                           ∈
                           
                              
                                 N
                              
                              
                                 0
                              
                           
                        
                      has a non-negative demand q
                     
                        i
                      as well as a time interval [a
                     
                        i
                     , b
                     
                        i
                     ] in which service must start; early arrivals to customer nodes are permitted but a vehicle, arriving early must wait until time a
                     
                        i
                      before service can start. The service time of customer i is denoted by t
                     
                        i
                     . The PRP, proposed by Bektaş and Laporte (2011) and further studied by Demir et al. (2012), is a single-objective optimization problem.

The bi-objective PRP consists of constructing routes for a set of vehicles to meet the demands of all customers in a way that all vehicles depart from and return to the depot node, no vehicle carries load more than its capacity and each customer is visited within its respective time window. There are two conflicting objectives in the PRP, namely fuel consumption and total driving time. These objectives are described in greater detail below, following the definition of the decision variables.

In order to model the PRP, we use a discretized speed function defined by R non-decreasing speed levels 
                           
                              
                                 
                                    
                                       
                                          v
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    r
                                 
                              
                              (
                              r
                              =
                              1
                              ,
                              …
                              ,
                              R
                              )
                           
                        . The decision variables are defined as follows: 
                           
                              
                                 
                                    z
                                 
                                 
                                    ij
                                 
                                 
                                    r
                                 
                              
                           
                         is a binary variable equals 1 if arc 
                           
                              (
                              i
                              ,
                              j
                              )
                              ∈
                              A
                           
                         is traversed at a speed level r, and 0 otherwise; x
                        
                           ij
                         is a binary variable equal to 1 if and only if arc (i, j) appears in the solution; f
                        
                           ij
                         is a non-negative continuous variable representing the total amount of flow on each arc 
                           
                              (
                              i
                              ,
                              j
                              )
                              ∈
                              A
                           
                        ; y
                        
                           j
                         is a non-negative continuous variable representing the time at which service starts at node 
                           
                              j
                              ∈
                              
                                 
                                    N
                                 
                                 
                                    0
                                 
                              
                           
                        .

The fuel consumption objective is based on the comprehensive emissions model described by Barth et al. (2005), Scora and Barth (2006), and Barth and Boriboonsomsin (2008), which is an instantaneous model estimating fuel consumption for a given time instant. According to this model, the fuel rate is given by
                           
                              (13)
                              
                                 FR
                                 =
                                 ξ
                                 (
                                 kNV
                                 +
                                 P
                                 /
                                 η
                                 )
                                 /
                                 κ
                              
                           
                        where ξ is the fuel-to-air mass ratio, k is the engine friction factor, N is the engine speed, V is the engine displacement, and η and κ are constants. The parameter P is the second-by-second engine power output (in kilowatt), and can be calculated as
                           
                              (14)
                              
                                 P
                                 =
                                 
                                    
                                       P
                                    
                                    
                                       tract
                                    
                                 
                                 /
                                 
                                    
                                       η
                                    
                                    
                                       tf
                                    
                                 
                                 +
                                 
                                    
                                       P
                                    
                                    
                                       acc
                                    
                                 
                              
                           
                        where η
                        
                           tf
                         is the vehicle drive train efficiency, and P
                        
                           acc
                         is the engine power demand associated with running losses of the engine and the operation of vehicle accessories such as air conditioning. The parameter P
                        
                           tract
                         is the total tractive power requirements (in kilowatt) placed on the wheels:
                           
                              (15)
                              
                                 
                                    
                                       P
                                    
                                    
                                       tract
                                    
                                 
                                 =
                                 (
                                 M
                                 τ
                                 +
                                 Mg
                                 sin
                                 
                                 θ
                                 +
                                 0.5
                                 
                                    
                                       C
                                    
                                    
                                       d
                                    
                                 
                                 ρ
                                 
                                    
                                       Av
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 
                                    
                                       MgC
                                    
                                    
                                       r
                                    
                                 
                                 cos
                                 
                                 θ
                                 )
                                 v
                                 /
                                 1000
                              
                           
                        where M is the total vehicle weight (kilogram). More specifically, M
                        =
                        w
                        +
                        f, where w is the curb weight (i.e., the weight of an empty vehicle) and f is the vehicle load. Furthermore, v is the vehicle speed (meter/second), τ is the acceleration (meter/square second), θ is the road angle, g is the gravitational constant, and C
                        
                           d
                         and C
                        
                           r
                         are the coefficients of the aerodynamic drag and rolling resistance, respectively. Finally, ρ is the air density and A is the frontal surface area of the vehicle. For a given arc (i, j) of length d, let v be the speed of a vehicle speed traversing this arc. To simplify notation, let λ
                        =
                        ξ/κψ and γ
                        =1/1000n
                        
                           tf
                        
                        η be constants and ψ is the conversion factor of fuel from gram/second to liter/second, and α
                        =
                        τ
                        +
                        gsin
                        θ
                        +
                        gC
                        
                           r
                        cos
                        θ be a vehicle-arc specific constant and β
                        =0.5C
                        
                           d
                        
                        ρA be a vehicle-specific constant.

If one omits the indices (i, j) on the variables v, d, f and α to simplify the presentation, the fuel consumption of a vehicle on this arc as a function of speed v and load f can be expressed as follows:
                           
                              (16)
                              
                                 F
                                 (
                                 v
                                 ,
                                 M
                                 )
                                 =
                                 λ
                                 (
                                 kNV
                                 +
                                 w
                                 γ
                                 α
                                 v
                                 +
                                 γ
                                 α
                                 fv
                                 +
                                 β
                                 γ
                                 
                                    
                                       v
                                    
                                    
                                       3
                                    
                                 
                                 )
                                 d
                                 /
                                 v
                              
                           
                        
                        Fig. 1
                         presents how fuel consumption (liter/100kilometer) changes with respect to speed (kilometer/hour) for an empty and fully loaded medium-duty vehicle using the expression (16).


                        Fig. 1 shows that the vehicle speed that minimizes fuel consumption is around 55kilometer/hour using the assumed values, which holds for both when the vehicle is empty and loaded.

The mathematical representation of the fuel consumption objective is shown below:
                           
                              (17)
                              
                                 minimize
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 kNV
                                 λ
                                 
                                    
                                       d
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          =
                                          1
                                       
                                       
                                          R
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       ij
                                    
                                    
                                       r
                                    
                                 
                                 /
                                 
                                    
                                       
                                          
                                             v
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       r
                                    
                                 
                              
                           
                        
                        
                           
                              (18)
                              
                                 +
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 w
                                 γ
                                 λ
                                 
                                    
                                       α
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       d
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                              
                           
                        
                        
                           
                              (19)
                              
                                 +
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 γ
                                 λ
                                 
                                    
                                       α
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       d
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       f
                                    
                                    
                                       ij
                                    
                                 
                              
                           
                        
                        
                           
                              (20)
                              
                                 +
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 β
                                 γ
                                 λ
                                 
                                    
                                       d
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          =
                                          1
                                       
                                       
                                          R
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       ij
                                    
                                    
                                       r
                                    
                                 
                                 
                                    
                                       (
                                       
                                          
                                             
                                                
                                                   v
                                                
                                                
                                                   ¯
                                                
                                             
                                          
                                          
                                             r
                                          
                                       
                                       )
                                    
                                    
                                       2
                                    
                                 
                              
                           
                        The objective function (17)–(20) is derived from (16). For further details, the reader is referred to Demir et al. (2012).

The driving time objective is the sum of the total journey time of all routes starting and ending at the depot. This time is equal to the arrival time to the depot under assumption that vehicles start their journey at time zero. The variable s
                        
                           j
                         represents the total time spent on a route that has a node 
                           
                              j
                              ∈
                              
                                 
                                    N
                                 
                                 
                                    0
                                 
                              
                           
                         as last visited before returning to the depot. The mathematical representation of the driving time objective is
                           
                              (21)
                              
                                 minimize
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          
                                             
                                                N
                                             
                                             
                                                0
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       s
                                    
                                    
                                       j
                                    
                                 
                              
                           
                        
                     

This objective measures the total driving time. The total time spent on a route where customer 
                           
                              j
                              ∈
                              
                                 
                                    N
                                 
                                 
                                    0
                                 
                              
                           
                         is visited last before returning to the depot can be calculated as
                           
                              (22)
                              
                                 
                                    
                                       s
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       c
                                    
                                    
                                       j
                                    
                                 
                                 +
                                 
                                    
                                       t
                                    
                                    
                                       j
                                    
                                 
                                 +
                                 
                                    
                                       d
                                    
                                    
                                       j
                                       0
                                    
                                 
                                 /
                                 
                                    
                                       v
                                    
                                    
                                       r
                                    
                                 
                              
                           
                        where c
                        
                           j
                         is the waiting time at node j, t
                        
                           j
                         is the service time at node j, and (d
                        
                           j0/v
                        
                           r
                        ) is the journey time from last node of a route to the depot.

The constraints of the integer programming formulation of the bi-objective PRP are similar to those given in Bektaş and Laporte (2011) and Demir et al. (2012), and are shown below:
                           
                              (23)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          N
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       0
                                       j
                                    
                                 
                                 =
                                 m
                              
                           
                        
                        
                           
                              (24)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          N
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 i
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       0
                                    
                                 
                              
                           
                        
                        
                           
                              (25)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          N
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 j
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       0
                                    
                                 
                              
                           
                        
                        
                           
                              (26)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          N
                                       
                                    
                                 
                                 
                                    
                                       f
                                    
                                    
                                       ji
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          N
                                       
                                    
                                 
                                 
                                    
                                       f
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 
                                 ∀
                                 i
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       0
                                    
                                 
                              
                           
                        
                        
                           
                              (27)
                              
                                 
                                    
                                       q
                                    
                                    
                                       j
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 
                                    
                                       f
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 (
                                 Q
                                 -
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 
                                 ∀
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                              
                           
                        
                        
                           
                              (28)
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 
                                    
                                       y
                                    
                                    
                                       j
                                    
                                 
                                 +
                                 
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       d
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       ij
                                    
                                    
                                       r
                                    
                                 
                                 /
                                 
                                    
                                       
                                          
                                             v
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       r
                                    
                                 
                                 ⩽
                                 
                                    
                                       K
                                    
                                    
                                       ij
                                    
                                 
                                 (
                                 1
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 )
                                 
                                 ∀
                                 i
                                 ∈
                                 N
                                 ,
                                 j
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       0
                                    
                                 
                                 ,
                                 
                                 i
                                 
                                 ≠
                                 
                                 j
                              
                           
                        
                        
                           
                              (29)
                              
                                 
                                    
                                       a
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 
                                    
                                       b
                                    
                                    
                                       i
                                    
                                 
                                 
                                 ∀
                                 i
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       0
                                    
                                 
                              
                           
                        
                        
                           
                              (30)
                              
                                 
                                    
                                       y
                                    
                                    
                                       j
                                    
                                 
                                 +
                                 
                                    
                                       t
                                    
                                    
                                       j
                                    
                                 
                                 -
                                 
                                    
                                       s
                                    
                                    
                                       j
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       d
                                    
                                    
                                       j
                                       0
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       j
                                       0
                                    
                                    
                                       r
                                    
                                 
                                 /
                                 
                                    
                                       
                                          
                                             v
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       r
                                    
                                 
                                 ⩽
                                 L
                                 (
                                 1
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       j
                                       0
                                    
                                 
                                 )
                                 
                                 ∀
                                 j
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       0
                                    
                                 
                              
                           
                        
                        
                           
                              (31)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          =
                                          1
                                       
                                       
                                          R
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       ij
                                    
                                    
                                       r
                                    
                                 
                                 =
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 
                                 ∀
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                              
                           
                        
                        
                           
                              (32)
                              
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                              
                           
                        
                        
                           
                              (33)
                              
                                 
                                    
                                       f
                                    
                                    
                                       ij
                                    
                                 
                                 ⩾
                                 0
                                 
                                 ∀
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                              
                           
                        
                        
                           
                              (34)
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 ⩾
                                 0
                                 
                                 ∀
                                 i
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       0
                                    
                                 
                              
                           
                        
                        
                           
                              (35)
                              
                                 
                                    
                                       z
                                    
                                    
                                       ij
                                    
                                    
                                       r
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                                 ,
                                 
                                 r
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 R
                              
                           
                        Constraints (23) state that each vehicle must leave the depot. Constraints (24) and (25) are the degree constraints which ensure that each customer is visited exactly once. Constraints (26) and (27) define the arc flows. Constraints (28)–(30), where K
                        
                           ij
                        
                        =max{0, b
                        
                           i
                        
                        +
                        t
                        
                           i
                        
                        +
                        d
                        
                           ij
                        /l
                        
                           ij
                        
                        −
                        a
                        
                           j
                        }, and L is a large number, enforce the time window restrictions. Constraints (31) ensure that only one speed level is selected for each arc and 
                           
                              
                                 
                                    z
                                 
                                 
                                    ij
                                 
                                 
                                    r
                                 
                              
                              =
                              1
                           
                         if x
                        
                           ij
                        
                        =1.

The PRP is NP-hard since it is an extension of the classical VRP. Bektaş and Laporte (2011) have shown that even a simplified version of this problem cannot be solved optimally for mid-size instances. For this reason, heuristics are needed to obtain good-quality solutions within short computational times, one which we use in this study.

To solve the bi-objective PRP, we use an enhanced version of the ALNS algorithm introduced in Demir et al. (2012). The ALNS algorithm is used as a search engine to find a set of non-dominated solutions. Here, we only briefly describe the ALNS for reasons of space but refer the interested reader to Demir et al. (2012) for further details.

The ALNS metaheuristic is an extension of the large neighborhood search (LNS) heuristic first proposed by Shaw (1998), and based on the idea of modifying an initial solution by means of destroy and repair operators. If the new solution is better than the current best solution, it replaces it and use as an input to the next iteration. The ALNS heuristic was put forward by Ropke and Pisinger (2006) to solve variants of the VRP. Rather than using one large neighborhood as in LNS, it applies several removal and insertion operators to a given solution. Insertion operators are used to repair a partially destroyed solution by inserting the nodes in the removal list back into the solution. These operators insert the removed nodes back into the existing routes when feasibility with respect to the capacity and time windows can be maintained, or they create new routes. The neighborhood of a solution is obtained by removing some customers from the solution and reinserting them back. Our implementation uses the classical Clarke and Wright (1964) heuristic to construct an initial solution. Furthermore, we use 12 removal and five insertion operators in the ALNS algorithm, which are selected dynamically in the algorithm according to their past performance. To this end, each operator is assigned a score which is increased whenever it improves the current solution. The new solution is accepted if it satisfies a criterion defined by the simulated annealing (Kirkpatrick, Gelatt, & Vecchi, 1983) used as local search framework applied at the outer level.

Although genetic algorithms appear to be the standard approach of multi-objective optimization for vehicle routing, our choice behind the use of the ALNS is primarily due to its effectiveness as was shown by Ropke and Pisinger (2006), Demir et al. (2012). At each iteration of the algorithm a speed optimization procedure (SOP) is applied. Given a vehicle route, the SOP consists of computing the optimal speed on each arc of the route in order to minimize an objective function comprising fuel consumption and driving time. This is the same algorithm as described in Demir et al. (2012) to which interested readers may refer.

This section presents the results of extensive computational experiments performed to assess the performance of the multi-objective methods using our ALNS algorithm with speed optimization procedure. We first describe the generation of the test instances, the parameters and the quality indicators used to assess the performance of the proposed methods. We then present the computational results. The parameters used in the experiments are given in Table 1
                     .

For the parameters listed in Table 1, lower and upper speed limits are initially set to 20kilometer/hour and 100kilometer/hour, respectively. At first glance, these limits may not be seen as being very practical. To shed light on this question, we conduct in Section 5.5.1 some experiments with these settings. We show that the lower speed limit does not significantly influence the resulting speeds.

For the experiments, 13 sets of 10 instances each were generated, resulting in a total of 130 instances. Each instance has 100 nodes, which represent randomly selected cities from the UK, and uses real road distances. Table 2
                         provides the design of each instance set. This table presents the number of vehicles, the lower and upper bounds of time windows, the service times and the load intervals for each instance set. Data pertaining to time windows, service times and load are randomly generated within these intervals. Each instance set is of a different nature, characterized by the average number of vehicles (minimum number required based on load), time windows (loose or tight) and load (homogeneous or heterogeneous). All instances are available for downloading from http://www.apollo.management.soton.ac.uk/prplib.htm.

The proposed algorithm was implemented in C. All experiments were conducted on a server with 3gigahertz speed and 1gigabyte RAM. A preliminary analysis was conducted to fine-tune the parameters. No claim is made that our choice of parameter values is the best possible. However, the settings used worked well in our preliminary analysis. The detailed values of all ALNS parameters are presented in Demir et al. (2012), with the exception of the new settings given in Table 3
                        .

We ran the algorithm, N
                        1 times each with N
                        2 iterations for each instance. The scores of the operators were updated every N
                        3 iterations. The removable nodes are randomly chosen between 
                           s
                        
                        =4 and 
                           
                              
                                 
                                    s
                                 
                                 
                                    ¯
                                 
                              
                              =
                              16
                           
                         at each iteration.

We have tested the following four methods. In each, the ALNS is used as the search engine to find and store the non-dominated solutions. (i) WM: Here the objective is to minimize the sum of a weighted bi-objective function. The weights are increased from zero to one in increments of 0.1. The aggregated objective function is calculated as w f
                        1
                        +(1−
                        w) f
                        2 where, f
                        1 is the fuel consumption (in liter) and f
                        2 is the driving time (in hour). (ii) WMN: The objective functions are normalized using Nadir 
                           
                              
                                 
                                    
                                       
                                          
                                             z
                                          
                                          
                                             i
                                          
                                          
                                             N
                                          
                                       
                                    
                                 
                              
                           
                         and Utopian 
                           
                              
                                 
                                    
                                       
                                          
                                             z
                                          
                                          
                                             i
                                          
                                          
                                             U
                                          
                                       
                                    
                                 
                              
                           
                         points (i
                        =1, 2). The aggregated objective function is calculated as 
                           
                              w
                              
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             1
                                          
                                       
                                       -
                                       
                                          
                                             z
                                          
                                          
                                             1
                                          
                                          
                                             U
                                          
                                       
                                    
                                 
                              
                              /
                              
                                 
                                    
                                       
                                          
                                             z
                                          
                                          
                                             1
                                          
                                          
                                             N
                                          
                                       
                                       -
                                       
                                          
                                             z
                                          
                                          
                                             1
                                          
                                          
                                             U
                                          
                                       
                                    
                                 
                              
                              +
                              (
                              1
                              -
                              w
                              )
                              
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             2
                                          
                                       
                                       -
                                       
                                          
                                             z
                                          
                                          
                                             2
                                          
                                          
                                             U
                                          
                                       
                                    
                                 
                              
                              /
                              
                                 
                                    
                                       
                                          
                                             z
                                          
                                          
                                             2
                                          
                                          
                                             N
                                          
                                       
                                       -
                                       
                                          
                                             z
                                          
                                          
                                             2
                                          
                                          
                                             U
                                          
                                       
                                    
                                 
                              
                           
                        , where f
                        1 and f
                        2 are defined as above. (iii) ECM: The algorithm is first run to find the value ∊
                        2 which is the minimum value f
                        2 attains at the end of N
                        2 iterations. The arrival time to the depot is then fixed to ∊
                        2. The algorithm is then run to minimize f
                        1, and ∊
                        2 is increased by ς at every iteration. (iv) HM: The algorithm starts as in ECM. However, the objective function is calculated as the weighted sum of two functions as 
                           
                              w
                              
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             1
                                          
                                       
                                       -
                                       
                                          
                                             z
                                          
                                          
                                             1
                                          
                                          
                                             U
                                          
                                       
                                    
                                 
                              
                              +
                              (
                              1
                              -
                              w
                              )
                              
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             2
                                          
                                       
                                       -
                                       
                                          
                                             z
                                          
                                          
                                             2
                                          
                                          
                                             U
                                          
                                       
                                    
                                 
                              
                           
                        . The weight w is updated during the algorithm. To update the weights during the search, we have used the same procedure as in Paquette et al. (2013):
                           
                              (36)
                              
                                 
                                    
                                       w
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       w
                                    
                                    
                                       i
                                       -
                                       1
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          x
                                          )
                                          -
                                          
                                             
                                                z
                                             
                                             
                                                i
                                             
                                             
                                                U
                                             
                                          
                                       
                                    
                                 
                                 
                                 (
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 k
                                 )
                              
                           
                        
                        
                           
                              (37)
                              
                                 
                                    
                                       w
                                    
                                    
                                       h
                                    
                                 
                                 =
                                 
                                    
                                       w
                                    
                                    
                                       h
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   k
                                                
                                             
                                          
                                          
                                             
                                                w
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                 (
                                 h
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 k
                                 )
                              
                           
                        where w
                        
                           h
                         is the normalized weight of the objective function h.

The performance assessment of techniques in multi-obective optimization is less straightforward than in single objective optimization. Whereas the output of a single objective function can be compared directly with lower or upper bounds, the output of multi-objective optimization is a set of solutions approximating the Pareto optimal front. Zitzler, Thiele, Laumanns, Fonseca, and da Fonseca (2003) present a review of the existing quality assessment indicators. We use two of these to compare our four methods, namely the hypervolume indicator and the ∊-indicator (Fig. 2
                        ). These are described in more detail below. We also use the number of Pareto solutions found as an additional way of assessing performance.

This metric was proposed by Zitzler and Thiele (1998a, 1998b). The hypervolume indicator 
                              
                                 
                                    
                                       I
                                    
                                    
                                       hv
                                    
                                 
                                 (
                                 H
                                 )
                              
                            computes the volume of a given region H. It is depicted in Fig. 2(a) for the bi-objective case. In this case, each point in the approximation set forms a rectangle shown by the shaded area with respect to a reference point (generally the Nadir point) that lies beyond the bounds of the approximation set. The hypervolume indicator is the area of the union of all rectangles (see Fig. 2(a)). The larger the value of the indicator (area), the better is the set of solutions.

The epsilon indicator 
                              
                                 
                                    
                                       I
                                    
                                    
                                       ∊
                                    
                                 
                                 (
                                 S
                                 ,
                                 R
                                 )
                              
                            was proposed by Zitzler et al. (2003). An illustration of the epsilon indicator in two dimensions is given in Fig. 2(b). The epsilon indicator relies on the concept of epsilon-dominance which is explained below:
                              Definition 1
                              Additive ∊-dominance relation. Let 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             x
                                          
                                          
                                             j
                                          
                                       
                                       ∈
                                       S
                                       ,
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                       
                                    
                                  is said to additively ∊-dominate x
                                 
                                    j
                                 , and written as x
                                 
                                    j
                                 
                                 ⪰
                                 
                                    ∊+
                                 x
                                 
                                    i
                                  (or equivalently f(x
                                 
                                    i
                                 )⩽
                                 ∊
                                 +
                                 f(x
                                 
                                    j
                                 )).

Multiplicative ∊-dominance relation. Let 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             x
                                          
                                          
                                             j
                                          
                                       
                                       ∈
                                       S
                                       ,
                                       
                                          
                                             x
                                          
                                          
                                             i
                                          
                                       
                                    
                                  is said to multiplicatively ∊-dominate x
                                 
                                    j
                                 , and written as x
                                 
                                    j
                                 
                                 ⪰
                                 
                                    ∊
                                 
                                 x
                                 
                                    i
                                  (or equivalently f(x
                                 
                                    i
                                 )⩽
                                 ∊f(x
                                 
                                    j
                                 )).

Of these two definitions, the multiplicative one is the most commonly used one in the literature. The ∊-indicator is based on the weakly dominated dominance relation. For any method, the smaller is the ∊ value, the better is the performance of the method. In two dimensions, the ∊-indicator can be calculated as 
                              
                                 
                                    
                                       I
                                    
                                    
                                       ∊
                                    
                                 
                                 (
                                 S
                                 ,
                                 R
                                 )
                                 =
                                 
                                    
                                       max
                                    
                                    
                                       r
                                       ∈
                                       R
                                    
                                 
                                 
                                    
                                       min
                                    
                                    
                                       s
                                       ∈
                                       S
                                    
                                 
                                 ∊
                                 (
                                 s
                                 ,
                                 r
                                 )
                                 =
                                 max
                                 {
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 s
                                 )
                                 -
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                 
                                 |
                                 1
                                 ⩽
                                 i
                                 ⩽
                                 k
                                 }
                              
                           , where r
                           
                              i
                            is the ith component of the objective vector r, and 
                              
                                 R
                              
                            is the reference set defined here as the union of all known Pareto optimal solutions.

We now present the computational results obtained on PRP instances. Table 4
                         provides, for each method tested, the average CPU time (in seconds) required to solve all instances of each set. All values are averaged over the 10 instances of each set. In this table, the instance sets are grouped into five. Group I is characterized by homogeneous loads and loose time windows, whereas Group II has homogeneous loads but tight time windows. Group III instances have heterogeneous loads and loose time windows. Finally, Group IV and V instances have heterogeneous loads and tight time windows.

As can be seen from Table 4, the methods are fast. Instances of 100 nodes are solved within 155seconds on average for the HM method, based on around 110,000 iterations in total. The data in Table 4 reveal that for any type of instance, the overall CPU times required by HM is smaller than that of the other methods. The ECM method has the second best performance in terms of CPU times. The average computation times of two weighting methods (WM and WMN) are almost the same. This is because these two methods require a similar computational effort. The average CPU time of Group I is around 138seconds for HM whereas Group II is around 148seconds. The difference is due to the heterogeneous load distribution of customers. The effect of time windows can be seen from the performance of Group III instances, for which HM requires 165seconds on average. The combined effect of time windows and load can be analyzed by looking at the average CPU time of instances Group IV, which is about 171seconds. Group IV, namely the instance set of thirteen, is solved in 142seconds.

Computational results of the performance measurements are summarized in Table 5
                        . This table presents, for each method, the number of Pareto solutions found, as well as the values of the hypervolume and the ∊-indicators. These results confirm that HM performs very well for all methods, with an average number of 40 Pareto solutions across all instances. The ECM yields the second best performance after HM. The number of Pareto solutions found are similar for WM and WMN, which are 11.6 and 9.4, respectively. We now compare the four methods using the two quality indicators. According to the hypervolume indicator, HM is superior to the other methods with an average value of 1386.3. In other words, the solutions found by HM represents a larger area than the other methods. The same indicator yields very poor results for WM and WMN. With the ∊-indicator, HM once again exhibits the best performance, yielding the minimum value. The WM and ECM have a very similar performances based on ∊-indicator, whereas WMN performs the worst.

We have also looked the effect of increasing a number of vehicles on the performance measure. For each method, Table 6
                         presents the number of Pareto optimal solutions found, the hypervolume and ∊-indicators. In this table, the instance sets are grouped by the number of vehicles to see the effect on the resulting solutions.

The analysis of Table 6 shows that the average number of Pareto solutions increases with the number of vehicles. This is because the solution space is enlarged when more vehicles are needed. Finally, the number of successes of each method using the two indicators is reported in Table 7
                        .

All results show that WM, WMN and ECM are clearly dominated by HM, as far as the success rate is concerned, indicating that a hybrid use of the existing methods is better suited to our problem. The weighting methods (WM and WMN) are better for finding extreme (corner) solutions, but they do not generate many Pareto solutions. On the other hand, the ∊-constraint method finds more solutions but most of them are inferior to those provided by WM.

In this part of the analysis, we look at the nature of the Pareto solutions identified by the algorithm for the speed level between 20 and 100kilometer/hour. For this purpose, we provide graphs of a sample instance for comparing the four methods in Fig. 3
                        , and detailed results in Table 8
                        . In Fig. 3, the values on the x-axes represent the driving time objective (f
                        2) and the values on the y-axes show the fuel consumption (f
                        1).


                        Fig. 3(a)–(b) exhibit the Pareto solutions found by each method. A recurring theme in the results presented in Fig. 3(d) is that driving time can be decreased from about 39hours to 37hours, depending on the instance tested, without much change in the fuel consumption. Conversely, fuel consumption can be brought down quite significantly, from around 305liters to 285liters with only a slight increase in driving time. Furthermore, all four methods tested here are consistent with respect to the solutions generated and yield similar insights. Interestingly, these results on the trade-off between fuel consumption and driving time show that one does not necessarily need to sacrifice one objective heavily in order to improve the other. The tools presented in this paper offer ways in which good quality solutions for the two objectives can be found.


                        Table 8 shows detailed results of this experiment found by HM for all 13 instance sets, in particular the minimum and maximum values for cost, time and fuel consumption for each instance.


                        Table 8 shows that the results heavily depend on the number of vehicles used. For group III, for example, savings in fuel can be up to 200liters for around 20 vehicles, and the driving time can also be decreased by up to nine hours, depending on the instance tested. In other words, the total fuel consumption and driving time increase when more routes are needed. This means that more savings in fuel or driving time can be achieved. Also, for instance set 12, one achieves a reduction on fuel consumption of about 52% by increasing the driving time by about 19%.

In this section, we look at the nature of the Pareto solutions identified by the algorithm for more practical lower and upper speed levels, set to 60kilometer/hour and 112kilometer/hour, respectively (The Government of the United Kingdom, 2013). Using the same instances as for Fig. 3, we provide similar graphs with the settings obtained by using the four methods. The new results are presented in Fig. 4
                           . Detailed results for 13 instances are provided in Table 9
                            in the same way as in Table 8.

The results reported in Table 9 do not significantly differ from those of Table 8. In particular, the average differences for cost, fuel and time are £99.9, 82.9liters and 4.1hours, respectively, when the speed limits lie between 60kilometer/hour and 112kilometer/hour. The same statistics are observed for the case where speed limits are chosen between 20kilometer/hour and 100kilometer/hour are £92.7, 81.1liters and 3.9hours, respectively.

We have also calculated some statistics on the resulting speeds. When speed limits lie between 20kilometer/hour and 100kilometer/hour, the minimum speed used in any solution is 55kilometer/hour, which is the speed minimizing fuel consumption, as shown in Fig. 1. For the same case, 85.4% of all speeds obtained across the instances are contained within the interval [70, 85), whereas the remaining 8.9% lie the interval [85,100]. When speed limits of 60kilometer/hour and 112kilometer/hour are enforced, 5.6% of all speeds are contained within the interval [60,75), 86.1% lie within the interval [75, 90), and the rest are in the interval [90, 112]. This simple analysis shows that the resulting speeds are not very dependent on the initial range of speeds, and that the resulting solutions use reasonably practical speeds. These experiments were performed with a unique maximum speed for the entire network. We are aware that different speed limits may apply to various route segments, but the analysis we have performed enables us to derive meaningful conclusions on the nature of Pareto solutions.

This section presents the results of a 30-node instance. Our aim is to take a closer look at the trade-off between the two objectives. Table 10
                         presents two non-dominated solutions obtained by HM on the total fuel consumption (in liter), the total driving time (in hour), the total fuel cost, the total driving time and the total amount of CO2. In calculating the latter, we assume that a liter of diesel fuel produces 3.135kilograms of CO2e.

Solution A and B are depicted in Fig. 5
                        , with each route shown in a different shade. Solution A (Fig. 5(a)) shows a time-minimizing tour of length 1621.7kilometers consuming approximately 321.57liters diesel fuel. The tour needs 21.16hours to be traversed, and the total amount of CO2e emitted is 1008.12kilograms. Solution B (Fig. 5(b)) shows a fuel-minimizing tour of length 1270.1kilometers consuming around 233.54liters diesel fuel. The total amount of CO2e for this tour is around 732.15kilograms, with a driving time of 23.21hours and a total distance of 1270.1kilometers.

The trade-off between fuel consumption and time for this particular instance indicates that savings in energy can be achieved by increasing the total duration of routes. The 9.7% increase in driving time leads to a 27% saving in energy requirements. The reduction of CO2e is around 276kg if Solution B is preferred to Solution A. In contrast, the reduction in driving time from 23.21hours to 21.16hours (about 8.8%) afforded by solution A implies an increase in CO2e emissions of about 37.7%.

@&#CONCLUSIONS@&#

We have studied the bi-criteria PRP in which one of the objectives is related to CO2e emissions, and the other to driving time. An enhanced adaptive large neighborhood search (ALNS) algorithm was used for the generation of non-dominated/Pareto optimal solutions. The algorithm integrates the classical ALNS with a specialized speed optimization procedure. The proposed algorithm first calls the ALNS using fixed speeds as inputs, then optimizes speed on each route. Our approach implicitly assumes that vehicle speed can be optimized independently of the remaining road traffic. Taking congestion into account cannot readily be incorporated in a model such as ours since full traffic data are not available at the planning stage. This is clearly a limitation of our study.

Using the ALNS as the search engine, four a posteriori methods, namely the weighting method, the weighting method with normalization, the epsilon-constraint method and a new hybrid method (HM), were tested using a scalarization of the two objective functions. The HM combines an adaptive weighting with the epsilon-constraint method. To fully evaluate the effectiveness of the algorithm, new sets of instances based on real geographic data were generated, and a library of bi-criteria PRP instances was compiled. Results of extensive computational experimentation of the four methods were presented and compared with one another. Hypervolume and epsilon indicators were used to evaluate the performance of the four methods. Our results show that the HM is highly effective in finding good-quality non-dominated solutions on 100-node instances, both in terms of the hypervolume and of the epsilon indicators, as compared to the rest of the methods.

The benefits of tools described in the paper can be summarized as follows: (i) to establish the cost of reducing CO2e emissions through routing decisions; (ii) to help achieve CO2e neutral transportation and use speed adaptation as one of the ways of achieving it; and (iii) to be prepared for changes (i.e. increases) in fuel prices without having to reschedule the routes over and over again, i.e., create a “robust” schedule.

One interesting insight derived from the experiments conducted here is that there is no need to greatly compromise on driving time in order to achieve a significant reduction in fuel consumption and CO2e emissions. The converse of this conclusion also holds, at least for the instances tested in this paper, i.e., considerable reductions in driving time may be obtained if one is willing to increase fuel consumption only slightly. Our results indicate that the trade-offs between the conflicting objectives of fuel and time do not necessarily require great sacrifices to be made with respect to an objective in order to improve the other. However, we urge caution in that these results may not apply to the entire logistics industry. One particular example arises in systems or industries employing a just-in-time policy, where the cost functions used may be such that the cost of late deliveries easily outweighs the CO2e costs.

Other costs, such as equipment and labor which are not considered in this paper, could also affect our conclusions on the time vs. fuel objective, provided that these costs are adequately reflected within the model presented in this paper. The tools described here should help decision makers by providing them with a set of solutions from which they can choose.

One immediate use of the approach described here is when managers or route-planners are faced with carbon taxes in the event that they exceed prescribed amounts of emissions. Such taxes are already being imposed in the airline industry. Through the use of the tool proposed in this paper, managers would then be able to assess the impact of exceeding tolerable levels of emission and weigh the effects of taxes against other measures, such as time and prompt delivery. Again, the fact that our approach is independent of costs implies the use of the technique for differing values of carbon tax, which is likely to be the case from one country or geographical region to another.

@&#ACKNOWLEDGEMENTS@&#

The authors gratefully acknowledge funding provided by the University of Southampton School of Management and by the Canadian Natural Sciences and Engineering Research Council under Grant 39682-10. Thanks are due to two anonymous reviewers for their useful comments and for raising interesting points for discussion.

@&#REFERENCES@&#

