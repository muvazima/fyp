@&#MAIN-TITLE@&#Robust optimization of the 0–1 knapsack problem: Balancing risk and return in assortment optimization

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Demand for products in retail assortments is stochastic.


                        
                        
                           
                           Our robust retail assortment optimization problem balances risk and return.


                        
                        
                           
                           We propose a novel and efficient heuristic to solve the robust assortment problem.


                        
                        
                           
                           The heuristic provides solutions in a matter of seconds.


                        
                        
                           
                           The solutions offer substantial risk reduction, yet only small reductions in return.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Retailing

Assortments

Risk-return

Efficient Frontier

Robust optimization

Knapsack problem

@&#ABSTRACT@&#


               
               
                  Retailers face the important but challenging task of optimizing their product assortments. The challenge is to find, for every category in every store, the assortment that maximizes (expected) category profit. Adding to the complexity of this 0–1 knapsack problem, retailers should also consider the risk associated with every assortment. While every product in the assortment offers an expected return, there is also uncertainty around its expected demand and profit contribution. Therefore, retailers face the difficult task of designing a portfolio of products that balances risk and return. In this paper, we develop a robust approach to optimize retail assortments that offers this balance. Since the dimensionality of this robust 0–1 knapsack problem in practice often precludes full enumeration, we propose a novel, efficient and real-time heuristic that solves this problem. The heuristic constructs an approximation of the risk-return Efficient Frontier of assortments. We find that the robust solutions offer the retailer a considerable reduction in risk (variance), yet only imply a small reduction in expected return. The constructed approximations contain assortments that are optimal solutions to the robust assortment optimization problem. Moreover, they represent insightful visualizations of the solution space, allowing for interactivity (“what risk premium should the retailer pay?”) in real-time (matter of seconds).
               
            

@&#INTRODUCTION@&#

One of the most challenging decisions for retailers is which assortment to carry (Rooderkerk, van Heerde, & Bijmolt, 2013). The Retail Assortment Optimization problem is the problem of selecting an assortment of products such that category profit is maximized and the total amount of shelf space that is used does not exceed the available amount (see e.g., Chong, Ho, & Tang, 2001, Kök & Fisher, 2007)
                        1
                     
                     
                        1
                        This can be seen as a 0–1 knapsack problem where the decision per item is whether to include it in the assortment (knapsack) or not, representing a binary decision. Every item has a certain profit (benefit), while taking up a given amount of shelf space (weight). The knapsack's capacity constraint is the consequence of the limited amount of available shelf space for the category as a whole.
                     . While this is already a complicated optimization problem, it is compounded by the fact that consumer demand cannot be assumed to be fixed. Rather, demand of individual products is stochastic (Cachon, Randall, & Schmidt, 2007; Fischer, Shin, & Hanssens, 2013; Lee, Padmanabhan, & Whang, 1997), and it may show positive or negative correlations with the demand of other products in the assortment, depending on whether products are complements or substitutes. Consequently, the total risk associated with an assortment is not just related to the variances of the individual items in the assortment, but also to the nature and extent of covariance between every pair of items in the assortment.


                     Fischer et al. (2013) note that increased demand volatility at the retail level has led to many undesirable consequences such as the bullwhip effect (Cachon et al., 2007; Lee et al., 1997). For the retailer the unpredictability of consumer demand results in a high variance of the associated cash flows. Such volatility increases a retailer's need for working capital (Rhao & Bharadwaj, 2008)
                        2
                     
                     
                        2
                        Walmart uses its cash flows to fund its operations and global expansion plans (Walmart 2014). To deal with the volatility in cash flows Walmart resorts to short-term borrowings to meet capital requirements. The most recent annual report (Walmart 2014) reveals that these short-term borrowings are quite sizeable ($7.67 billion).
                     . Hence, retailers would benefit from hedging the risks arising from demand uncertainty of product assortments. Consequently, the domain of assortment optimization could benefit greatly from adopting a risk-return approach. Despite the importance of this challenge, research has been restricted to theoretical approaches (Cardozo & Smith Jr., 1983; Devinney & Stewart, 1988) and numerical experiments (e.g., Rusmevichientong & Topaloglu, 2012). However, an empirical approach is lacking (Kouvelis, Chambers, & Wang, 2006). This study aims to fill this gap by developing an empirical risk-return approach to assortment optimization. This is a special case of the robust 0–1 knapsack problem that aims to maximize the expected total benefit of all items in a knapsack while accounting for the uncertainty in each item's benefit.

An additional complicating factor of this retail challenge is the high dimensionality of the knapsack problem: retailers carry more products and categories than before (Rooderkerk et al., 2013), and increasingly customize their assortment at the store level (Rigby & Vishwanath, 2006). Consequently, the potential of a risk-return approach for assortment optimization should be assessed with the dimensionality challenges in mind. In other words, an empirical method for risk-return assortment optimization should work efficiently on large data sets. Therefore, the goal of this paper is to twofold: (1) to develop an empirical risk-return approach to assortment optimization, and (2) to develop an efficient heuristic that is able to deal with the large data dimensions and provides real-time (near-)optimal solutions that optimally balance risk and return.

We derive a robust counterpart of the Retail Assortment Problem that balances risk (profit uncertainty) and return (expected profit) of assortments. The objective function of the robust multi-objective counterpart favors returns while simultaneously penalizing risk. The premise is that the retailer may prefer an assortment that is associated with slightly less return (expected profit) yet with a lot less risk (uncertainty). Using full enumeration, we test the robust approach on both synthetic and empirical data concerning retail assortment optimization problems. We find that many of the robust solutions provide retailers with a considerable reduction in uncertainty (variance), with only a small reduction in expected profit.

In practice, the sizeable dimensions of assortment planning problems preclude the use of full enumeration. Therefore, we propose an Efficient Frontier heuristic that provides assortments that (near-) optimally balance return and risk in real-time. The heuristic does so by quickly constructing a subset of the risk-return Efficient Frontier. For an assortment on this frontier, a so-called efficient (or Pareto-optimal) assortment, no other assortment exists with a higher expected profit without increasing variance, and conversely no other assortment exists that has a reduced variance without decreasing expected profit.
                        3
                     
                     
                        3
                        The term Efficient Frontier originates in the domain of modern portfolio theory (Markowitz 1952) and was originally used to indicate stock portfolios that are efficient with respect to the associated risk and return.
                      These efficient assortments form a very small subset of the total solution space, effectively reducing the complexity of the large problem. An additional benefit of this approach is that the retailer obtains a visualization of a set of efficient assortments that trade-off risk (profit variance) and return (expected profit). The visualized Efficient Frontier aids the retailer in deciding on how risk-averse s/he wants to be (or conversely what risk-premium is required). This makes the heuristic an example of an a posteriori method of solving a multi-objective function (Hwang & Masud, 1979), in which a subset of the Pareto optimal solutions is generated, allowing the decision maker to determine his/her weight between the objective functions after seeing the trade-off between them. That is useful as it is unlikely that the retailer exactly knows how risk-averse s/he is before seeing the trade-off between risk and return. Finally, we derive an upper bound on the optimal robust profit.

Our study contributes to the marketing, operations management, and operations research literature in a number of ways. First, we introduce an empirical risk-return approach to the important domain of assortment optimization, a central problem in the fields of marketing and operations management. Current practice in the assortment optimization literature assumes profits are deterministic, and there is no risk aversion. We allow for situations in which profit is stochastic and the decision maker is risk averse. In doing so, we broaden the scope by taking risk into account during the optimization of the assortment composition as opposed to just afterwards through sensitivity analysis.

Second, we introduce a state-of-the art heuristic for solving a robust 0–1 knapsack problem. The heuristic is able to solve the multi-objective function balancing expected return and risk, where the latter is highly non-linear in the binary decision variables in a real-time manner. The heuristic finds the optimal or near-optimal solution, alongside a subset of the efficient frontier of solutions. The latter allows the retailer to set the desired level of risk aversion a posteriori; after seeing the risk-return trade-off in the set of generated efficient assortments. This allows for much more flexibility than a scalarized approach in which the level of risk aversion is fixed beforehand and only one corresponding best solution is generated.

Finally, the empirical application provides substantive insights to retailers and the literature on robust optimization. We find that on aggregate, a large gain (risk reduction) only requires a small sacrifice (decrease in expected return). However, the findings also show that the benefits (risk reduction) and costs (sacrificing expected profit) differ substantially across stores. For a substantial number of stores, the optimal nominal (risk-neutral) assortment is also the optimal robust one. Among the stores for which the two optimal assortments deviate, there are those for which the risk premium is quite small (a small decrease in expected profit achieves a strong risk shelter), while for others the price to pay for more certainty is quite steep. This suggests that retailers should take a store-level, a posteriori approach to risk-return assortment optimization; based on the store-specific efficient assortments retailers should decide how risk averse they want to be when constructing the focal store's assortment.

The rest of the paper is organized as follows. In Section 2, we formally introduce the Retail Assortment Optimization problem, and illustrate that assortments that solely maximize return (so-called nominal assortments) are vulnerable to the uncertainty in the estimated profit contributions of the products. We next formulate the Robust Retail Assortment Optimization problem in Section 3. Section 4 describes the new heuristic for constructing a subset of the Efficient Frontier assortments and a (near-) optimal solution to the Robust Retail Assortment Optimization problem. In Section 5, we determine the usefulness of the heuristic by contrasting the optimal nominal - and optimal robust assortments in an empirical application. We end with conclusions and recommendations for future research in Section 6.
                  

Suppose a retailer is considering n products that can be included in the assortment with the available amount of shelf space equal to c. Every product k (k = 1,…,n) occupies an amount of shelf space wk
                         and contributes pk
                         to profit when it is included in the assortment. We define binary decision variables {xk
                        }
                           k
                        
                        =
                        
                           1,...,n
                        , which are equal to 1 if product k is included in the assortment and 0 otherwise. The Retail Assortment Optimization problem can now be defined as the following 0–1 knapsack problem:

(RAO)

                           
                              
                                 
                                    
                                       maximize
                                       x
                                    
                                    
                                    
                                       ∑
                                       
                                          k
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          p
                                          k
                                       
                                       
                                          x
                                          k
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (1)
                              
                                 
                                    
                                       subject
                                       
                                       to
                                    
                                    
                                    
                                       ∑
                                       
                                          k
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          w
                                          k
                                       
                                       
                                          x
                                          k
                                       
                                    
                                    
                                    ≤
                                    
                                    c
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    
                                    
                                       x
                                       k
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    
                                    k
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    n
                                    .
                                 
                              
                           
                        
                     

Restriction (1) is the capacity constraint whereas (2) forces every product to be in or out. The occupied shelf space per item (the wk
                         parameters) and the available shelf space for the category (the c parameter) are fixed quantities. The binary integer linear program defined by (RAO) is an example of a 0–1 knapsack problem. The knapsack problem is NP-hard, that is, it is unlikely that the problem can be solved in polynomial time (Papadimitriou & Steiglitz, 1982). Several algorithms and heuristics exist to provide (near-) optimal solutions to the ordinary knapsack problem (e.g., Kellerer, Pferschy, & Pisinger, 2004; Martello & Toth, 1990).

We focus on the core of the retail assortment optimization problem, abstracting from decisions on product pricing, number of facings, and inventory levels. The product selection decision typically precedes pricing and other more tactical decisions. Future research on robust retail assortment optimization could seek to integrate these extensions.

If demand is uncertain, the profit parameters 
                           
                              p
                              =
                              
                                 
                                    [
                                    
                                       
                                          p
                                          1
                                       
                                       …
                                       
                                          p
                                          n
                                       
                                    
                                    ]
                                 
                                 T
                              
                           
                         in the assortment optimization problem may be subject to uncertainty. A naive approach to deal with profit parameter uncertainty is to use expected profit values in the optimization. The problem of this approach is that the optimal assortment becomes sub-optimal under small parameter perturbations, as illustrated by the problem instance in Table 1.
                     

Suppose three products are available that require the same amount of shelf space when included (=1), and the available shelf space for the category allows for at most two items. Next, suppose that the profit contributions follow a multivariate normal distribution with mean equal to the expected profit contributions 
                           
                              
                                 p
                                 ¯
                              
                              =
                              
                                 
                                    [
                                    
                                       
                                          
                                             p
                                             ¯
                                          
                                          1
                                       
                                       …
                                       
                                          
                                             p
                                             ¯
                                          
                                          n
                                       
                                    
                                    ]
                                 
                                 T
                              
                           
                         and covariance matrix equal to Θ. Items 2 and 3 have a large positive covariance, which may be driven by similar sensitivity to demand shocks. For instance, if these are outdoor items, items 2 and 3 may be for good weather (e.g., a barbecue and a surf board), which may be simultaneously in high demand (when the weather is good) or in low demand (when the weather is bad). Item 1 has a negative covariance with items 2 and 3, which indicates an opposite sensitivity to demand shocks. Following the example, item 1 may be an item for bad weather (e.g., an umbrella or a board game).


                        Table 2
                         shows that the solution that maximizes expected profit, i.e., the optimal nominal assortment, {2, 3}, has a large variance (23) relative to the other solutions. This implies that, even though the nominal profit is maximal, there is a lot of uncertainty regarding the actual profit realization. The assortments {1, 2} and {1, 3} are associated with a substantially lower risk (variance) while only entailing a small decrease in return (expected profit) compared to assortment {2, 3}. This illustrates the need to construct assortments that balance risk and return. To this end, we formulate the Robust Assortment Optimization problem in the next section.

Many optimization problems experience uncertainty in the parameter estimates. Researchers have defined robust versions of such optimization problems in which the parameters lie within some “uncertainty set”, a convex set of possible parameter values. The resulting optimization problems are referred to as the robust counterparts (Ben-Tal & Nemirovski, 1998, 1999). Such a robust counterpart can be formulated for a knapsack problem as well, i.c., the Retail Assortment Optimization problem. Defining Uas the uncertainty region in which the true profit parameters in (RAO) lie, the robust counterpart of the Retail Assortment Optimization problem (RAORobust) is:

(RAORobust)

                           
                              
                                 
                                    
                                       maximize
                                       x
                                    
                                    
                                    
                                       minimize
                                       
                                          p
                                          ∈
                                          U
                                       
                                    
                                    
                                       ∑
                                       
                                          k
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          p
                                          k
                                       
                                       
                                          x
                                          k
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       subject
                                       
                                       to
                                    
                                    
                                    
                                       ∑
                                       
                                          k
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          w
                                          k
                                       
                                       
                                          x
                                          k
                                       
                                    
                                    
                                    ≤
                                    
                                    c
                                 
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       x
                                       k
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    
                                    k
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    n
                                    .
                                 
                              
                           
                        
                     

The goal of (RAORobust) is to maximize, using decision variables x, the worst possible profit outcome among parameters p in the uncertainty set U. We adopt a commonly applied type in the robust optimization literature, the ellipsoidal uncertainty region. Ellipsoidal uncertainty sets are flexible approximations to various uncertainty sets and typically result in computational tractable robust optimization problems (Ben-Tal & Nemirowski, 1999). This type of uncertainty region is defined as:

                           
                              (5)
                              
                                 
                                    U
                                    =
                                    {
                                    p
                                    |
                                    
                                       
                                          (
                                          p
                                          −
                                          
                                             p
                                             ¯
                                          
                                          )
                                       
                                       T
                                    
                                    
                                       
                                          Θ
                                       
                                       
                                          −
                                          1
                                       
                                    
                                    
                                       (
                                       p
                                       −
                                       
                                          p
                                          ¯
                                       
                                       )
                                    
                                    ≤
                                    
                                       r
                                       2
                                    
                                    }
                                    ,
                                 
                              
                           
                        where 
                           
                              p
                              ¯
                           
                         is the vector with expected profit values. It is assumed that Θ is a symmetric positive definite matrix. We use 
                           
                              θ
                              
                                 k
                                 
                                    k
                                    ′
                                 
                              
                           
                         to denote element (k, k′) of Θ. Note that r relates to the amount of confidence we have that the true profit parameter values are included in the uncertainty set. A larger r will increase the confidence.

Based on Ben-Tal and Nemirovski (1998, 1999), El-Ghaoui, Oustry and Lebret (1998), we can rewrite the (RAORobust) objective function with U given by (5), as the following Robust Retail Assortment Optimization (RRAO) problem:
                     

(RRAO)

                           
                              
                                 
                                    
                                       maximize
                                       x
                                    
                                    
                                    
                                       ∑
                                       
                                          k
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          
                                             p
                                             ¯
                                          
                                          k
                                       
                                       
                                          x
                                          k
                                       
                                       −
                                       r
                                       
                                          
                                             
                                                ∑
                                                
                                                   k
                                                   =
                                                   1
                                                
                                                n
                                             
                                             
                                                
                                                   ∑
                                                   
                                                      
                                                         k
                                                         ′
                                                      
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                                
                                                   
                                                      θ
                                                      
                                                         k
                                                         
                                                            k
                                                            ′
                                                         
                                                      
                                                   
                                                   
                                                      x
                                                      k
                                                   
                                                   
                                                      x
                                                      
                                                         k
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    subject
                                    
                                    to
                                    
                                    
                                       ∑
                                       
                                          k
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          w
                                          k
                                       
                                       
                                          x
                                          k
                                       
                                    
                                    
                                    ≤
                                    
                                    c
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       x
                                       k
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    
                                    k
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    n
                                    .
                                 
                              
                           
                        
                     

Parameter r can be interpreted as the risk penalty coefficient in the objective function. If r > 0, the objective function of RRAO penalizes the standard deviation in profit (i.e., risk), which is consistent with the notion of risk aversion (see Rabin & Thaler, 2001) and aversion to post decision disappointment (Bell, 1982, 1985). In line with portfolio theory (Markowitz, 1952
                        
                           4
                        
                        
                           4
                           We refer to the recent special edition of the European Journal of Operational Research commemorating Markowitz's seminal work on portfolio optimization based on a risk-return (mean-variance) analysis (e.g., the editorial by Zopounidis, Doumpos, & Fabozzi, 2014; reflections and clarifications on the applicability of modern portfolio theory by Markowitz himself 2014).
                        ) an assortment becomes more risky (has a higher standard deviation
                           5
                        
                        
                           5
                           Our robust formulation implies the standard deviation of profit as proxy for risk rather than the variance, which was suggested in portfolio theory (Markowitz, 1952). However, Markowitz (p. 89) notes that an investor may just as well be concerned with the standard deviation as proxy for risk. Moreover, the Efficient Frontier of assortments, a notion key to the heuristic solution approach (to be presented later), is invariant to the actual choice out of these two risk proxies. The optimal robust assortment would always lie on the Efficient Frontier, irrespective of the choice for standard deviation vs. variance as proxy for risk. In addition, the heuristic can easily be adjusted to consider variance as risk proxy instead of the standard deviation.
                        ) when items are included that have highly uncertain profit contributions (large θkk
                         values) and/or when pairs of items are included to have a (high) positive covariance (positive 
                           
                              θ
                              
                                 k
                                 
                                    k
                                    ′
                                 
                              
                           
                         if k ≠ k′). If the decision maker requires more confidence (i.e., a larger r), s/he penalizes risk more heavily.

We construct an ellipsoidal uncertainty set by assuming a multivariate normal distribution for the profit parameters, i.e., 
                           
                              p
                              ∼
                              N
                              (
                              
                                 p
                                 ¯
                              
                              
                                 ,
                                 Θ
                                 )
                                 .
                              
                           
                         Consequently, the total profit associated with a given assortment x follows a normal distribution, i.e., 
                           
                              
                                 p
                                 T
                              
                              x
                              ∼
                              N
                              (
                              
                                 
                                    p
                                    ¯
                                 
                                 T
                              
                              x
                              ,
                              
                                 x
                                 T
                              
                              
                                 Θ
                                 x
                                 )
                                 .
                              
                           
                         We use this expression to set a value for r as follows. We set the probability that the true (unobserved) profit is lower than the robust profit equal to a specified confidence level α (0 ≤ α ≤ 1). That is, we set 
                           
                              P
                              (
                              
                                 p
                                 T
                              
                              x
                              ≤
                              
                                 
                                    p
                                    ¯
                                 
                                 T
                              
                              x
                              −
                              r
                              
                                 
                                    
                                       x
                                       T
                                    
                                    Θ
                                    x
                                 
                              
                              
                                 )
                                 =
                                 α
                                 .
                              
                           
                         This implies that 
                           
                              r
                              =
                              
                                 Φ
                                 
                                    −
                                    1
                                 
                              
                              
                                 (
                                 1
                                 −
                                 α
                                 )
                              
                              ,
                           
                        where Φ(⋅) is the cumulative density function of the standard normal distribution.

We now define the nominal versus robust profit of an assortment x:

                           
                              (8)
                              
                                 
                                    Nominal
                                    
                                    profit
                                    =
                                    
                                       Π
                                       NOM
                                    
                                    (
                                    x
                                    )
                                    =
                                    
                                       ∑
                                       
                                          k
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          
                                             p
                                             ¯
                                          
                                          k
                                       
                                       
                                          x
                                          k
                                       
                                       .
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    Robust
                                    
                                    profit
                                    =
                                    
                                       Π
                                       ROB
                                    
                                    (
                                    x
                                    )
                                    =
                                    
                                       ∑
                                       
                                          k
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          
                                             p
                                             ¯
                                          
                                          k
                                       
                                       
                                          x
                                          k
                                       
                                       −
                                       r
                                       
                                          
                                             
                                                ∑
                                                
                                                   k
                                                   =
                                                   1
                                                
                                                n
                                             
                                             
                                                
                                                   ∑
                                                   
                                                      
                                                         k
                                                         ′
                                                      
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                                
                                                   
                                                      θ
                                                      
                                                         k
                                                         
                                                            k
                                                            ′
                                                         
                                                      
                                                   
                                                   
                                                      x
                                                      k
                                                   
                                                   
                                                      x
                                                      
                                                         k
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       .
                                    
                                 
                              
                           
                        
                     

The nominal profit is equivalent to the expected return of the selected assortment. The robust profit, on the other hand, provides a balance between return and risk. We define the “optimal nominal assortment” 
                           
                              (
                              =
                              
                                 x
                                 
                                    NOM
                                 
                                 *
                              
                              )
                           
                         as the assortment that optimizes the nominal profit function in (RAO). The “optimal robust assortment” 
                           
                              (
                              =
                              
                                 x
                                 
                                    ROB
                                 
                                 *
                              
                              )
                           
                         is the assortment that optimizes the robust profit function in (RRAO). The next section illustrates the differences between the Nominal and Robust Retail Assortment Optimization problem using the example presented earlier.


                        Table 3 extends the overview in Table 2 with the robust profit for each feasible solution for three values of r, corresponding with an increasingly risk-averse decision maker: r = 1.28 (α = 10 percent), r = 1.64 (α = 5 percent), and r = 2.33 (α = 1 percent). We find that the optimal nominal solution {2, 3} is not the optimal solution to the Robust Retail Assortment Optimization problem for any of these three (commonly used) values of r. This is due to the high variance associated with this solution. The optimal solution to each of the three robust optimization problems is the same: {1, 2}. Since items 1 and 2 have a strong negative covariance (see Table 1), including both items in the assortment provides a hedging mechanism for the retailer.

Comparing the optimal robust solution {1, 2} to the optimal nominal solution {1, 3}, we see that the robust set of items provides a much lower variance (2) for profit than the nominal set of items (23). This is illustrated by Fig. 1
                        , which compares the probability distribution of the total profit generated by the optimal nominal and robust solution.


                        Fig. 1 shows that the uncertainty in the profit realization of an assortment can be reduced substantially by choosing an assortment that is only slightly worse in terms of expected profit. In fact, the expected profit (17) of the optimal robust assortment is only 10.5 percent less than that of the optimal nominal solution (19), but its robust profit (13.70, using r = 2.33) is almost twice the robust profit of the optimal nominal solution (7.83). This example shows the fundamentals of robust optimization to provide solutions to the Retail Assortment Optimization problem: trade off a relatively small loss in return (expected profit) against a large reduction in risk (uncertainty) surrounding the true realization.

At this point, we would like to caution against another approach to deal with the uncertainty in profit parameters. This method is based on simulating profit parameters from its estimated distribution, e.g., using the posterior draws from a Bayesian estimation scheme. A researcher may be inclined to solve the optimization problem for multiple realizations of the profit parameter vector, leading to multiple optimal assortments. Next, we can compute the fraction of times each assortment outperforms the others in terms of profit, which is what we did for the example in the last column of Table 3. We note that solution {2, 3} wins 59.95 percent of the times, which is more than any other solution, and hence {2, 3} is seemingly “robust” against profit parameter permutations. However, one has to be aware that this approach is risk neutral in the sense it does not provide a probabilistically guaranteed lower bound on the profit that will be achieved, which is something the (RAORobust) approach does.

We also note that some studies perform sensitivity analysis with respect to parameter perturbations after assortments have been optimized (e.g., Miller, Smith, McIntyre, & Achabal 2010; Rooderkerk et al., 2013). These studies still optimize expected returns without the consideration of risk. Our study is fundamentally different from this approach in that we account for risk, in addition to return, during the optimization of the assortment. Hence, in our study risk co-determines the composition of the optimal assortment.

In the next section, we describe a new heuristic that can be used when complete enumeration is infeasible. The heuristic constructs a set of assortments that trade off expected profit versus profit risk, and it also results in a (near-optimal) solution to the Robust Retail Assortment Optimization problem.

The Robust Retail Assortment Optimization (RRAO) problem is essentially a multi-objective integer program
                           6
                        
                        
                           6
                           See Rasmussen (1986) for an overview of this class of problems.
                        , in which the decision maker aims to maximize expected profit while minimizing risk at the same time. Fixing the value of balancing parameter r results in a single-objective optimization problem. Optimal solutions to this single-objective problem are part of the set of Pareto-optimal solutions
                           7
                        
                        
                           7
                           A Pareto-optimal (efficient) assortment is an assortment for which neither of the objective functions (return and risk) can be improved in value by another feasible assortment without degrading the other in value. In other words, it is not dominated.
                         to the multi-objective function. For a given value of r the optimization problem (RRAO) is an example of a non-linear binary program, a class of optimization problems that is hard to solve. For small instances (such as the example discussed in Sections 2 and 3), we can solve this problem through complete enumeration. However, in practice most realistic assortment optimization problems are too large to solve in this way. Consequently, we need to resort to heuristics to solve this optimization problem. Heuristics that aim at finding the best solution to (RRAO) for a given value of r are referred to as a priori methods (Hwang & Masud, 1979). Hence, these methods assume that the decision maker sets his relative preference beforehand (before seeing any data).

However, retailers likely find it very hard to elicit their amount of risk aversion before seeing the trade-off between risk and return in some actual assortment solutions. That is why we opt for a so-called a posteriori heuristic (Hwang & Masud, 1979), which aims to construct a representative subset of all Pareto-optimal assortments. This approximation of the Pareto curve or Efficient Frontier represents the trade-off between risk and return, allowing the decision maker to determine/adjust his risk aversion a posteriori. Consequently, the next section presents an efficient solution method that rapidly constructs an approximation of the Efficient Frontier of assortments. It will simultaneously determine the solution on this approximated Efficient Frontier that bests fits the risk preference elicited a priori (i.e., the value of r), while providing the retailer with the (visual) means to adapt this preference a posteriori. The heuristic is specifically designed to deal with the fact that one of the objective functions, risk, is a non-linear function of the binary decision variables.


                        Fig. 2
                         shows the set of efficient assortments for the example from Section 2. The horizontal axis plots each assortment's profit variance and the vertical axis its expected or nominal profit. Note that the assortments {2} and {3} are not part of the Efficient Frontier as these two assortments do not satisfy efficiency: they lead to less expected profit than assortment {1, 3} while at the same time they have larger variances.

If the retailer disapproves the loss in expected (nominal) profit of the optimal robust assortment relative to the optimal nominal assortment (dashed line in Fig. 2), s/he could use the Efficient Frontier to find an assortment that provides a better balance between expected profit and uncertainty, such as {1, 3}. This means that the decision maker implicitly adjusts the value of r, the amount of uncertainty s/he is willing to take into consideration.

In Fig. 2, the Efficient Frontier consists of five assortments only. In empirical applications, this number is much higher. In the empirical application in Section 5, the number of efficient assortments per store ranges between 104 and 408, with a median of 196. To deal with realistic problems, we develop the “Efficient Frontier heuristic”. The idea behind this heuristic is to approximate the Efficient Frontier set by rapidly constructing a subset of efficient assortments. The heuristic also provides a (near-) optimal solution to the Robust Retail Assortment Optimization problem.

The heuristic capitalizes on the property of the Efficient Frontier that there is no efficient assortment with a variance that exceeds the variance of the optimal nominal assortment 
                              
                                 
                                    q
                                    
                                       NOM
                                    
                                    max
                                 
                                 .
                              
                           
                           
                              8
                           
                           
                              8
                              If there are multiple optimal solutions to the nominal assortment optimization problem 
                                    
                                       q
                                       
                                          NOM
                                       
                                       max
                                    
                                  refers to the minimum variance among these solutions. In this way we secure that the corresponding optimal nominal assortment is also efficient.
                            This property can be seen as follows. Suppose there is an assortment with variance exceeding 
                              
                                 
                                    q
                                    
                                       NOM
                                    
                                    max
                                 
                                 .
                              
                            In order for the assortment to satisfy efficiency (being on the Efficient Frontier), its nominal profit should exceed the nominal profit of the optimal nominal assortment 
                              
                                 
                                    Π
                                    
                                       NOM
                                    
                                    *
                                 
                                 ,
                              
                           which is not possible by definition. Exploiting this property, the heuristic starts by solving the nominal assortment optimization problem. After this, it solves a reformulated version of the nominal assortment optimization problem by limiting the profit variance from above (to an upper bound q), starting from the variance of the optimal nominal assortment.
                              9
                           
                           
                              9
                              As stated in footnote 5, the Efficient Frontier is invariant to the use of variance or standard deviation as proxy for risk (Markowitz, 1952). Limiting the variance from above leads to an optimization problem that is equivalent to one in which we limit the standard deviation from above. However, limiting the variance leads to an optimization problem that is easier to solve.
                            By systematically lowering this upper bound, the heuristic constructs a set of assortments that approximates the Efficient Frontier.

Limiting the profit variance introduces a non-linear restriction to the nominal assortment optimization problem (RAO) formulated in Section 2.1. That is because the expression for the profit variance, 
                              
                                 
                                    ∑
                                    
                                       k
                                       =
                                       1
                                    
                                    n
                                 
                                 
                                    
                                       ∑
                                       
                                          
                                             k
                                             ′
                                          
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          θ
                                          
                                             k
                                             
                                                k
                                                ′
                                             
                                          
                                       
                                       
                                          x
                                          k
                                       
                                       
                                          x
                                          
                                             k
                                             ′
                                          
                                       
                                    
                                 
                                 ,
                              
                            is non-linear (quadratic) in the decision variables. However, we can replace the non-linear expression for the profit variance by a linear combination of binary variables through the separation of the on-diagonal and off-diagonal elements of Θ. To achieve this, we define θkk
                            as the kth diagonal element of Θ, and 
                              
                                 
                                    θ
                                    
                                       k
                                       
                                          k
                                          ′
                                       
                                    
                                    *
                                 
                                 =
                                 
                                    θ
                                    
                                       k
                                       
                                          k
                                          ′
                                       
                                    
                                 
                                 +
                                 
                                    θ
                                    
                                       
                                          k
                                          ′
                                       
                                       k
                                    
                                 
                                 ,
                              
                           
                           
                              
                                 k
                                 =
                                 1
                                 ,
                                 .
                                 .
                                 ,
                                 n
                                 −
                                 1
                                 ,
                                 
                                    k
                                    ′
                                 
                                 =
                                 k
                                 +
                                 1
                                 ,
                                 .
                                 .
                                 ,
                                 n
                                 .
                              
                            Since Θ is symmetric, we can restate this as 
                              
                                 
                                    θ
                                    
                                       k
                                       
                                          k
                                          ′
                                       
                                    
                                    *
                                 
                                 =
                                 2
                                 
                                    θ
                                    
                                       k
                                       
                                          k
                                          ′
                                       
                                    
                                 
                                 .
                              
                            Furthermore, we define the following auxiliary binary variables 
                              
                                 
                                 
                                    v
                                    
                                       k
                                       
                                          k
                                          ′
                                       
                                    
                                 
                                 =
                                 
                                    x
                                    k
                                 
                                 
                                    x
                                    
                                       k
                                       ′
                                    
                                 
                              
                           , i.e., 
                              
                                 
                                    v
                                    
                                       k
                                       
                                          k
                                          ′
                                       
                                    
                                 
                                 =
                                 1
                                 
                                 if
                                 
                                 
                                    x
                                    k
                                 
                                 =
                                 1
                                 
                                 and
                                 
                                 
                                    x
                                    
                                       k
                                       ′
                                    
                                 
                                 =
                                 1
                              
                           , 0 otherwise. This leads to the following reformulation of the profit variance:

                              
                                 (10)
                                 
                                    
                                       var
                                       
                                          (
                                          
                                             
                                                ∑
                                                
                                                   k
                                                   =
                                                   1
                                                
                                                n
                                             
                                             
                                                
                                                   p
                                                   k
                                                
                                                
                                                   x
                                                   k
                                                
                                             
                                          
                                          )
                                       
                                       =
                                       
                                          ∑
                                          
                                             k
                                             =
                                             1
                                          
                                          n
                                       
                                       
                                          
                                             ∑
                                             
                                                
                                                   k
                                                   ′
                                                
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             
                                                θ
                                                
                                                   k
                                                   
                                                      k
                                                      ′
                                                   
                                                
                                             
                                             
                                                x
                                                k
                                             
                                             
                                                x
                                                
                                                   k
                                                   ′
                                                
                                             
                                          
                                       
                                       =
                                       
                                          ∑
                                          
                                             k
                                             =
                                             1
                                          
                                          n
                                       
                                       
                                          
                                             θ
                                             
                                                k
                                                k
                                             
                                          
                                          
                                             x
                                             k
                                          
                                          +
                                          
                                             ∑
                                             
                                                k
                                                =
                                                1
                                             
                                             
                                                n
                                                −
                                                1
                                             
                                          
                                          
                                             
                                                ∑
                                                
                                                   
                                                      k
                                                      ′
                                                   
                                                   =
                                                   k
                                                   +
                                                   1
                                                
                                                n
                                             
                                             
                                                
                                                   θ
                                                   
                                                      k
                                                      
                                                         k
                                                         ′
                                                      
                                                   
                                                   *
                                                
                                                
                                                   v
                                                   
                                                      k
                                                      
                                                         k
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       .
                                    
                                 
                              
                           
                        

The benefit of this reformulation is that it is linear in the decision variables. However, we now have auxiliary decision variables 
                              
                                 (
                                 
                                    v
                                    
                                       k
                                       
                                          k
                                          ′
                                       
                                    
                                 
                                 )
                              
                            that are non-linear functions of the original decision variables (xk
                           ). However, we will show below how we can relate the auxiliary variables to the original decision variables through a set of linear constraints.

We now define the reformulated version (RAOLimited) of the nominal assortment optimization problem that restricts the variance by an upper bound q:

(RAOLimited)

                              
                                 
                                    
                                       
                                          maximize
                                          
                                             x
                                             ,
                                             v
                                             ,
                                             h
                                          
                                       
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      k
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                                
                                                   
                                                      
                                                         p
                                                         ¯
                                                      
                                                      k
                                                   
                                                   
                                                      x
                                                      k
                                                   
                                                
                                             
                                             ︸
                                          
                                          
                                             nominal
                                             
                                             profit
                                          
                                       
                                       +
                                       
                                          
                                             
                                                m
                                                h
                                             
                                             ︸
                                          
                                          
                                             contribution
                                             
                                             due
                                             
                                             to
                                             
                                             variance
                                             
                                             slack
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (11)
                                 
                                    
                                       subject
                                       
                                       to
                                       
                                       
                                          ∑
                                          
                                             k
                                             =
                                             1
                                          
                                          n
                                       
                                       
                                          
                                             w
                                             k
                                          
                                          
                                             x
                                             k
                                          
                                       
                                       
                                       ≤
                                       
                                       c
                                       
                                       
                                          [
                                          c
                                          a
                                          p
                                          a
                                          c
                                          i
                                          t
                                          y
                                          
                                          c
                                          o
                                          n
                                          s
                                          t
                                          r
                                          a
                                          i
                                          n
                                          t
                                          ]
                                       
                                    
                                 
                              
                           
                           
                              
                                 (12)
                                 
                                    
                                       
                                          ∑
                                          
                                             k
                                             =
                                             1
                                          
                                          n
                                       
                                       
                                          
                                             θ
                                             
                                                k
                                                k
                                             
                                          
                                          
                                             x
                                             k
                                          
                                          +
                                          
                                             ∑
                                             
                                                k
                                                =
                                                1
                                             
                                             
                                                n
                                                −
                                                1
                                             
                                          
                                          
                                             
                                                ∑
                                                
                                                   
                                                      k
                                                      ′
                                                   
                                                   =
                                                   k
                                                   +
                                                   1
                                                
                                                n
                                             
                                             
                                                
                                                   θ
                                                   
                                                      k
                                                      
                                                         k
                                                         ′
                                                      
                                                   
                                                   *
                                                
                                                
                                                   v
                                                   
                                                      k
                                                      
                                                         k
                                                         ′
                                                      
                                                   
                                                
                                                +
                                                h
                                             
                                          
                                       
                                       
                                       =
                                       
                                       q
                                       
                                       
                                          [
                                          v
                                          a
                                          r
                                          i
                                          a
                                          n
                                          c
                                          e
                                          
                                          c
                                          o
                                          n
                                          s
                                          t
                                          r
                                          a
                                          i
                                          n
                                          t
                                          ]
                                       
                                    
                                 
                              
                           
                           
                              
                                 (13)
                                 
                                    
                                       
                                          v
                                          
                                             k
                                             
                                                k
                                                ′
                                             
                                          
                                       
                                       ≤
                                       
                                          x
                                          k
                                       
                                       
                                       
                                          (
                                          k
                                          ,
                                          
                                             k
                                             ′
                                          
                                          )
                                       
                                       ∈
                                       
                                          V
                                          −
                                       
                                    
                                 
                              
                           
                           
                              
                                 (14)
                                 
                                    
                                       
                                          v
                                          
                                             k
                                             
                                                k
                                                ′
                                             
                                          
                                       
                                       ≤
                                       
                                          x
                                          
                                             k
                                             ′
                                          
                                       
                                       
                                       
                                          (
                                          k
                                          ,
                                          
                                             k
                                             ′
                                          
                                          )
                                       
                                       ∈
                                       
                                          V
                                          −
                                       
                                    
                                 
                              
                           
                           
                              
                                 (15)
                                 
                                    
                                       
                                          v
                                          
                                             k
                                             
                                                k
                                                ′
                                             
                                          
                                       
                                       ≥
                                       
                                          x
                                          k
                                       
                                       +
                                       
                                          x
                                          
                                             k
                                             ′
                                          
                                       
                                       −
                                       1
                                       
                                       
                                          (
                                          k
                                          ,
                                          
                                             k
                                             ′
                                          
                                          )
                                       
                                       ∈
                                       
                                          V
                                          +
                                       
                                    
                                 
                              
                           
                           
                              
                                 (16)
                                 
                                    
                                       
                                          x
                                          k
                                       
                                       ∈
                                       
                                          {
                                          0
                                          ,
                                          1
                                          }
                                       
                                       
                                       k
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       n
                                    
                                 
                              
                           
                           
                              
                                 (17)
                                 
                                    
                                       
                                          v
                                          
                                             k
                                             
                                                k
                                                ′
                                             
                                          
                                       
                                       ∈
                                       
                                          [
                                          0
                                          ,
                                          
                                          1
                                          ]
                                       
                                       
                                       
                                          (
                                          k
                                          ,
                                          
                                             k
                                             ′
                                          
                                          )
                                       
                                       ∈
                                       V
                                    
                                 
                              
                           
                           
                              
                                 (18)
                                 
                                    
                                       h
                                       ∈
                                       
                                          R
                                          +
                                       
                                    
                                 
                              
                           with

                              
                                 (19)
                                 
                                    
                                       
                                          V
                                          −
                                       
                                       =
                                       
                                          {
                                          k
                                          =
                                          1
                                          ,
                                          .
                                          .
                                          ,
                                          n
                                          −
                                          1
                                          ,
                                          
                                             k
                                             ′
                                          
                                          =
                                          k
                                          +
                                          1
                                          ,
                                          .
                                          .
                                          ,
                                          n
                                          |
                                          
                                             θ
                                             
                                                k
                                                
                                                   k
                                                   ′
                                                
                                             
                                             *
                                          
                                          <
                                          0
                                          }
                                       
                                    
                                 
                              
                           
                           
                              
                                 (20)
                                 
                                    
                                       
                                          V
                                          +
                                       
                                       =
                                       
                                          {
                                          k
                                          =
                                          1
                                          ,
                                          .
                                          .
                                          ,
                                          n
                                          −
                                          1
                                          ,
                                          
                                             k
                                             ′
                                          
                                          =
                                          k
                                          +
                                          1
                                          ,
                                          .
                                          .
                                          ,
                                          n
                                          |
                                          
                                             θ
                                             
                                                k
                                                
                                                   k
                                                   ′
                                                
                                             
                                             *
                                          
                                          >
                                          0
                                          }
                                       
                                    
                                 
                              
                           
                           
                              
                                 (21)
                                 
                                    
                                       V
                                       =
                                       
                                          V
                                          −
                                       
                                       ∪
                                       
                                          V
                                          +
                                       
                                    
                                 
                              
                           
                        

The objective function of (RAOLimited) consists of the nominal profit (return) and the contribution of a newly introduced slack variable h times m. Slack variable 
                              
                                 h
                                 =
                                 q
                                 −
                                 var
                                 (
                                 
                                    
                                       ∑
                                       
                                          k
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          p
                                          k
                                       
                                       
                                          x
                                          k
                                       
                                    
                                 
                                 )
                              
                           is the difference between the imposed variance upper bound, q, and the actual profit variance given by (10). By adding the slack variable in the objective function with a small positive profit contribution m, we impose that the optimal assortment is efficient while obeying the variance upper bound. That is, first expected profit is maximized, and if multiple assortments maximize expected profit, the assortment with minimum variance will be selected. A theoretically optimal choice for m is m = δ/q, with δ = the minimum profit difference between any two feasible assortments that display a trade-off between expected profit and variance. In this way, 0 ≤ m⋅h < (δ/q)⋅q = δ. Consequently, every possible increase in profit will always be preferred to a decrease in variance, since the former will always contribute more to profit than the latter. Only when no profit difference is possible, i.e., maximum profit is attained, the term m⋅h forces to choose the assortment with minimum variance among them. To derive δ we would have to solve a separate discrete optimization problem, which resembles a multiple knapsack problem and is very hard to solve. For practical reasons we use a value of δ = .0001 in the empirical application. We verified that this value was sufficiently small, in the sense that smaller values did not affect the solutions.
                              10
                           
                           
                              10
                              We refer to Online Appendix A for more details on the derivation of m and the chosen value for δ.
                           
                        


                           Eq. (11) again represents the capacity constraint. Eqs. (12)–(21) restrict the profit variance to be equal to or below the variance upper bound. Although the vkk
                           
                           ’ variables are binary by definition, we can relax them to assume values within the [0,1] domain because of the structure of the formulation above. This is attractive since the use of continuous decision variables typically leads to a simpler optimization procedure relative to having binary decision variables.
                              11
                           
                           
                              11
                              Formally, the use of the auxiliary variables reduced a quadratic binary program to a linear binary program. Next, through the relaxation of the auxiliary variables (continuous versus integer) the optimization problem became a mixed binary program rather than a pure binary program. In the empirical application the mixed binary formulation proved much easier to solve than the original pure binary formulation.
                            To explain why the decision variables are effectively binary, we note that the objective function and restrictions (12)–(21) together require that 
                              
                                 
                                    v
                                    
                                       k
                                       
                                          k
                                          ′
                                       
                                    
                                 
                                 =
                                 
                                    x
                                    k
                                 
                                 
                                    x
                                    
                                       k
                                       ′
                                    
                                 
                                 =
                                 1
                                 
                                 if
                                 
                                 
                                    x
                                    k
                                 
                                 =
                                 1
                                 
                                 
                                    and
                                    
                                 
                                 
                                    x
                                    
                                       k
                                       ′
                                    
                                 
                                 =
                                 1
                              
                           , 0 otherwise. We enforce this by distinguishing the situation in which 
                              
                                 
                                    θ
                                    
                                       k
                                       
                                          k
                                          ′
                                       
                                    
                                    *
                                 
                                 <
                                 0
                              
                            from 
                              
                                 
                                    θ
                                    
                                       k
                                       
                                          k
                                          ′
                                       
                                    
                                    *
                                 
                                 >
                                 0
                              
                            for every pair (k, k′| k < k′) of Stock-Keeping Units (SKUs, i.e., individual products that are considered to be part of the assortment). When 
                              
                                 
                                    θ
                                    
                                       k
                                       
                                          k
                                          ′
                                       
                                    
                                    *
                                 
                                 <
                                 0
                              
                            holds, the objective function and Eq (12) will result in variable 
                              
                                 v
                                 
                                    k
                                    
                                       k
                                       ′
                                    
                                 
                              
                           being set to its maximum value (1). However, when xk
                            and/or xk
                           
                           ’ are equal to 0, Eqs. (13) and (14) force 
                              
                                 v
                                 
                                    k
                                    
                                       k
                                       ′
                                    
                                 
                              
                            to be equal to 0. In case 
                              
                                 
                                    θ
                                    
                                       k
                                       
                                          k
                                          ′
                                       
                                    
                                    *
                                 
                                 >
                                 0
                              
                            holds, the objective function and Eq. (12) will result in the variable 
                              
                                 v
                                 
                                    k
                                    
                                       k
                                       ′
                                    
                                 
                              
                            being set to its minimum value (0). However, when both xk
                            and xk
                           
                           ′ are equal to 1, Eq. (15) forces 
                              
                                 v
                                 
                                    k
                                    
                                       k
                                       ′
                                    
                                 
                              
                            to be equal to 1. Thus, while we allow 
                              
                                 v
                                 
                                    k
                                    
                                       k
                                       ′
                                    
                                 
                              
                            to move freely in the domain [0,1], effectively they will be 0 or 1. We now describe the Efficient Frontier heuristic in more detail:


                           Initialization
                        


                           
                              
                                 1.
                                 
                                    Solve the nominal Retail Assortment Optimization problem (RAO).
                                 

This provides the optimal nominal profit 
                                       
                                          
                                             Π
                                             
                                                NOM
                                             
                                             *
                                          
                                          .
                                       
                                    
                                 


                                    Find the assortment that results in the optimal nominal profit
                                    
                                       
                                          Π
                                          
                                             NOM
                                          
                                          *
                                       
                                    
                                    with minimum risk.
                                 

If there are multiple optimal nominal assortments, we want to obtain the optimal nominal assortment with minimum variance. Hence we solve an optimization problem in which the objective is to minimize variance while enforcing the assortment to be feasible and result in the optimal nominal profit.


                                    Initialize the following variables:
                                    
                                       
                                          •
                                          Set the maximum variance 
                                                
                                                   q
                                                   
                                                      NOM
                                                   
                                                   max
                                                
                                              equal to the variance of the assortment found in step 2.

Set the best robust profit found so far, 
                                                
                                                   
                                                      Π
                                                      
                                                         ROB
                                                      
                                                      best
                                                   
                                                   ,
                                                
                                              equal to the robust profit associated with the assortment found in step 2.

Set the variance of the efficient assortment most recently found, q
                                             recent, equal to 
                                                
                                                   
                                                      q
                                                      
                                                         NOM
                                                      
                                                      max
                                                   
                                                   .
                                                
                                             
                                          

Set the step size, s (in percent), for the variance grid; the implied variance grid is now described by the following set: {(1 – (n*s) /100)× 
                                                
                                                   
                                                      q
                                                      
                                                         NOM
                                                      
                                                      max
                                                   
                                                   ,
                                                   n
                                                   =
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   
                                                      
                                                         100
                                                         s
                                                      
                                                   
                                                   
                                                      }
                                                      .
                                                   
                                                
                                             
                                          


                                    Repeat until termination
                                 


                                    Set the variance upper bound q in optimization problem (RAOLimited) equal to the nearest point on the variance grid below q
                                    recent 
                                    and solve (RAOLimited).

In every iteration of the heuristic, the upper bound on the variance is set to the nearest point on the grid that has a variance below the actual variance of the efficient assortment most recently found. This ensures that we find a different assortment in every step of the heuristic.


                                    Set q
                                    recent 
                                    equal to the variance of the assortment found in the most recent step 4.
                                 


                                    If the robust profit of the assortment found in the most recent step 4 is higher than the best robust profit found so far, replace
                                    
                                       
                                          Π
                                          
                                             ROB
                                          
                                          best
                                       
                                    
                                    by this value.
                                 

The assortment with maximum robust profit among those constructed by the heuristic is the heuristic's solution to the Robust Assortment Optimization problem.


                                    Terminate when the end of the grid is reached or when it is certain that no better robust solution can be found.
                                 

The Efficient Frontier heuristic will continue until the end of the grid is reached. However, if we are only interested in finding a (near-) optimal solution to the Robust Assortment Optimization problem, we let the heuristic terminate when the nominal profit 
                                    of the efficient assortment most recently obtained is less than or 
                                    equal to the best robust profit found so far. When this is the case it is certain that no better robust assortment will be found, reason for the heuristic to terminate.


                           Fig. 3
                            illustrates the heuristic for the example in Section 2 with r equal to 2.33, consistent with a confidence level of 99 percent, and step size s equal to 5 percent, while using the underlined termination criterion. A given assortment x has nominal profit Π
                           NOM(x) based on the profit (objective) function of (RAO); similarly, assortment x has robust profit Π
                           ROB(x)corresponding to the robust profit function in (RRAO). After three iterations in which the upper bound on the variance, q, is systematically lowered and (RAOLimited) is solved, the Efficient Frontier heuristic terminates. The top panel of Fig. 3 shows the assortments found by the heuristic (red dots), which in this case corresponds to the full efficient set (blue squares). The bottom panel depicts the robust profit corresponding to these assortments.

Note that a benefit of the heuristic is that, upon termination, the robust profit plot (panel b in Fig. 3) can be constructed for any given degree of risk aversion (i.e., for any value of r); even when termination depended on a different value for r (using the underlined termination criterion in step 7 of the heuristic). This allows finding a robust solution for any given value of r after the Efficient Frontier heuristic is terminated.
                              12
                           
                           
                              12
                              Note that, when the underlined criterion is used, termination depends on the level of risk aversion (r) as it affects robust profit. Because higher values of r (higher risk aversion) imply lower robust profits it will be harder for the termination criterion (nominal profit of most recent solution < best robust profit found so far) to be met. Consequently, the heuristic will start to terminate later for higher values of r. More specifically, suppose we have two levels of risk aversion r
                                 1 and r
                                 2, such that r
                                 1< r
                                 2, then the set of efficient assortments generated under r
                                 2 will contain all those generated under r
                                 1, and potentially more. As the generated set of efficient assortments for a given value for r is always contained in the set generated under a larger value for r, it makes most sense to use a large value for r in the termination criterion and (also) evaluate the resulting robust profit for lower values of r rather than the other way around.
                            This enables the retailer to decide how risk averse s/he wants to be based on the risk-return tradeoff displayed by the problem at hand. Hence, the heuristic falls in the class of a posteriori methods to solving a multi-objective optimization problem (Hwang & Masud, 1979).

The empirical application considers the product category of paper towel rolls. The objective is to maximize category profit per store by optimizing the store-level assortment composition. Information Resources, Inc. (France) has provided weekly store-level scanner data for 21 SKUs from 54 stores from a large national French retail chain for the 156-week period between September 2002 and September 2005. The dimensionality of the problem is not excessively large, which allows us to contrast the approach to full enumeration. In the absence of margin data, we assume an equal profit margin (of 1) per unit of volume (i.e., paper towel roll).

We need an estimate for an SKU's mean and variance in sales, as well as the covariance in sales with other SKUs. To represent typical, average conditions, these estimates need to be corrected for marketing activities such as in-store promotions. To achieve this, we use an SKU sales response model, regressing SKU sales on a set of SKU dummies, a relative price index variable (relative to competition to capture own and competitive effects parsimoniously), dummies representing feature and display activity, and a relative shelf space index variable (again relative to competition to allow for cross effects). We use a linear model to ensure that the model predictions can be directly interpreted as sales levels (rather than, e.g., log sales levels). To allow for heterogeneity in the marketing-mix effects, we include brand-specific parameters for the marketing-mix variables. Finally, all parameters are allowed to be store specific. The resulting sales model is given by the following expression:

                           
                              (22)
                              
                                 
                                    
                                       
                                          
                                             S
                                             
                                                k
                                                t
                                                i
                                             
                                          
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                β
                                                
                                                   0
                                                   k
                                                   i
                                                
                                             
                                             +
                                             
                                                β
                                                
                                                   1
                                                   b
                                                   (
                                                   k
                                                   )
                                                   i
                                                
                                             
                                             ·
                                             
                                                
                                                   (
                                                   
                                                      Price
                                                      
                                                         k
                                                         t
                                                         i
                                                      
                                                   
                                                   −
                                                   
                                                      
                                                         Price
                                                         
                                                            k
                                                            •
                                                            i
                                                         
                                                      
                                                      ¯
                                                   
                                                   )
                                                
                                                
                                                   
                                                      1
                                                      
                                                         N
                                                         
                                                            t
                                                            i
                                                         
                                                      
                                                   
                                                   ·
                                                   
                                                      (
                                                      
                                                         ∑
                                                         
                                                            
                                                               k
                                                               ′
                                                            
                                                            =
                                                            1
                                                         
                                                         K
                                                      
                                                      
                                                         Price
                                                         
                                                            
                                                               k
                                                               ′
                                                            
                                                            t
                                                            i
                                                         
                                                      
                                                      ·
                                                      
                                                         z
                                                         
                                                            
                                                               k
                                                               ′
                                                            
                                                            t
                                                            i
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             +
                                             
                                             
                                                β
                                                
                                                   2
                                                   b
                                                   (
                                                   k
                                                   )
                                                   i
                                                
                                             
                                             ·
                                             
                                                
                                                   Feature
                                                   
                                                   only
                                                
                                                
                                                   k
                                                   t
                                                   i
                                                
                                             
                                             +
                                             
                                                β
                                                
                                                   3
                                                   b
                                                   (
                                                   k
                                                   )
                                                   i
                                                
                                             
                                             ·
                                             
                                                
                                                   Display
                                                   
                                                   only
                                                
                                                
                                                   k
                                                   t
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             +
                                             
                                             
                                                β
                                                
                                                   4
                                                   b
                                                   (
                                                   k
                                                   )
                                                   i
                                                
                                             
                                             ·
                                             
                                                
                                                   Feature
                                                   
                                                   &
                                                   
                                                   Display
                                                
                                                
                                                   k
                                                   t
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             +
                                             
                                             
                                                β
                                                
                                                   5
                                                   b
                                                   (
                                                   k
                                                   )
                                                   i
                                                
                                             
                                             ·
                                             
                                                
                                                   (
                                                   
                                                      
                                                         Shelf
                                                         
                                                         space
                                                      
                                                      
                                                         k
                                                         t
                                                         i
                                                      
                                                   
                                                   −
                                                   
                                                      
                                                         
                                                            Shelf
                                                            space
                                                         
                                                         
                                                            k
                                                            •
                                                            i
                                                         
                                                      
                                                      ¯
                                                   
                                                   )
                                                
                                                
                                                   
                                                      1
                                                      
                                                         N
                                                         
                                                            t
                                                            i
                                                         
                                                      
                                                   
                                                   ·
                                                   
                                                      (
                                                      
                                                         ∑
                                                         
                                                            
                                                               k
                                                               ′
                                                            
                                                            =
                                                            1
                                                         
                                                         K
                                                      
                                                      
                                                         
                                                            Shelf
                                                            
                                                            space
                                                         
                                                         
                                                            
                                                               k
                                                               ′
                                                            
                                                            t
                                                            i
                                                         
                                                      
                                                      ·
                                                      
                                                         z
                                                         
                                                            
                                                               k
                                                               ′
                                                            
                                                            t
                                                            i
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                             +
                                             
                                                
                                                   ɛ
                                                
                                                
                                                   k
                                                   t
                                                   i
                                                
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where k is an index for SKU, k ∈ {1,..,K}, K denotes the number of SKUs; t is a week index, t ∈ {1, …,T}, T denotes the number of weeks, and i is a store index, i ∈ {1, …,I}, and I denotes the number of stores. The other symbols are defined in Table 4.
                        
                     

We assume the store-specific parameters to be independently, identically distributed according to a normal population distribution:

                           
                              (23)
                              
                                 
                                    
                                       β
                                       i
                                    
                                    =
                                    
                                       
                                          (
                                          
                                             β
                                             
                                                01
                                                i
                                             
                                          
                                          ⋯
                                          
                                             β
                                             
                                                0
                                                K
                                                i
                                             
                                          
                                          |
                                          
                                             β
                                             
                                                11
                                                i
                                             
                                          
                                          ⋯
                                          
                                             β
                                             
                                                1
                                                B
                                                i
                                             
                                          
                                          |
                                          ⋯
                                          |
                                          
                                             β
                                             
                                                51
                                                i
                                             
                                          
                                          ⋯
                                          
                                             β
                                             
                                                5
                                                B
                                                i
                                             
                                          
                                          )
                                       
                                       T
                                    
                                    ∼
                                    N
                                    
                                       (
                                       β
                                       ,
                                       
                                          V
                                          β
                                       
                                       )
                                    
                                    .
                                 
                              
                           
                        
                     

Further, we assume store-specific contemporaneous correlations between the error terms:

                           
                              (24)
                              
                                 
                                    
                                       
                                          
                                             
                                                ɛ
                                             
                                             
                                                t
                                                i
                                             
                                          
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                (
                                                
                                                   
                                                      
                                                         ɛ
                                                      
                                                      
                                                         1
                                                         t
                                                         i
                                                      
                                                   
                                                   ⋯
                                                   
                                                   
                                                      
                                                         ɛ
                                                      
                                                      
                                                         K
                                                         t
                                                         i
                                                      
                                                   
                                                
                                                )
                                             
                                             
                                                iid
                                                ∼
                                                N
                                                (
                                             
                                             0
                                             ,
                                             
                                                Ω
                                                i
                                             
                                             
                                                )
                                                ,
                                             
                                             
                                                Ω
                                                i
                                             
                                             
                                             a
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                             full
                                             
                                             error
                                             
                                             variance
                                             
                                             -
                                             
                                             covariance
                                             
                                             matrix
                                             
                                             for
                                             
                                             store
                                             
                                             i
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Of course, we could use a different specification for the sales response model. The point is that any model will entail uncertainty in the sales predictions and hence in the profit predictions. Online Appendix B describes the Bayesian estimation of the model. Visual inspection and formal tests confirm the convergence of the Gibbs chain. Online Appendix C shows that the median hyper parameters have the expected signs and the posterior intervals mostly exclude zero.

Next, we optimize the assortments for each store separately. We compute the expected profit parameters and the covariance of the profit parameters based on the posterior parameter distribution. We optimize for a regular situation with regular price and shelf space, and no marketing support such as feature or display. Consequently, the only relevant part of the model is formed by the store-specific SKU intercepts and error covariance matrix. For a given posterior draw j=1, …,J, the SKU sales vector in a given week t in store i can be sampled from the following posterior distribution:

                              
                                 (25)
                                 
                                    
                                       
                                          S
                                          
                                             t
                                             i
                                          
                                          
                                             (
                                             j
                                             )
                                          
                                       
                                       =
                                       
                                          
                                             [
                                             
                                                
                                                   S
                                                   
                                                      1
                                                      t
                                                      i
                                                   
                                                   
                                                      (
                                                      j
                                                      )
                                                   
                                                
                                                ⋯
                                                
                                                   S
                                                   
                                                      K
                                                      t
                                                      i
                                                   
                                                   
                                                      (
                                                      j
                                                      )
                                                   
                                                
                                             
                                             ]
                                          
                                          T
                                       
                                       ∼
                                       N
                                       
                                          (
                                          
                                             β
                                             
                                                0
                                                i
                                             
                                             
                                                (
                                                j
                                                )
                                             
                                          
                                          ,
                                          
                                             Ω
                                             i
                                             
                                                (
                                                j
                                                )
                                             
                                          
                                          )
                                       
                                       ,
                                    
                                 
                              
                           where 
                              
                                 
                                    β
                                    
                                       0
                                       i
                                    
                                    
                                       (
                                       j
                                       )
                                    
                                 
                                 =
                                 
                                    
                                       [
                                       
                                          
                                             β
                                             
                                                01
                                                i
                                             
                                             
                                                (
                                                j
                                                )
                                             
                                          
                                          ⋯
                                          
                                             β
                                             
                                                0
                                                K
                                                i
                                             
                                             
                                                (
                                                j
                                                )
                                             
                                          
                                       
                                       ]
                                    
                                    T
                                 
                              
                            denotes posterior draw j of vector 
                              
                                 
                                    β
                                    
                                       0
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       [
                                       
                                          
                                             β
                                             
                                                01
                                                i
                                             
                                          
                                          ⋯
                                          
                                             β
                                             
                                                0
                                                K
                                                i
                                             
                                          
                                       
                                       ]
                                    
                                    T
                                 
                                 ,
                              
                            and 
                              
                                 Ω
                                 i
                                 
                                    (
                                    j
                                    )
                                 
                              
                           posterior draw j of the error covariance matrix 
                              
                                 
                                    Ω
                                    i
                                 
                                 .
                              
                            For every posterior draw we sample T weeks of posterior data, allowing us to compute the expected sales vector and corresponding covariance matrix of the sales vector. Next we take the average across all posterior draws of the expected sales vector and covariance matrix, and use these as inputs for the nominal and robust optimization.

To assess the full potential of the robust approach, we first solve the nominal and robust store-level Retail Assortment Optimization problem using full enumeration in Matlab 2015a. An average store has space for 15 SKUs, in which case full enumeration entails 
                              
                                 
                                    ∑
                                    
                                       k
                                       =
                                       1
                                    
                                    15
                                 
                                 
                                    (
                                    
                                       
                                          
                                             
                                                21
                                             
                                          
                                       
                                       
                                          
                                             
                                                k
                                             
                                          
                                       
                                    
                                    )
                                 
                              
                            = 2,069,255 possible assortments. We perform the robust store-level optimizations for three different values for r: 1.28 (i.e., 90 percent certainty), 1.64 (i.e., 95 percent certainty), and 2.33 (i.e., 99 percent certainty). The average computation time per store was respectively 28.1, 28.0, and 28.0 seconds on a laptop PC equipped with a quad-core Intel i7 2.30 GigaHertz processor and 16 GigaByte memory capacity. Consequently, more than 25 minutes were required to solve the robust optimizations across all 54 stores for a given value of r. While this amount of time is not excessive, the size of the problem grows very fast when the assortment dimensions increase. For instance, if we double the size of the assortment (15–30) and the number of available SKUs (42 vs. 21), the number of potential assortments increases by a factor 2.1 million.

We now compare the optimized assortments based on the nominal and robust profit. When moving from the nominal optimal assortment to the robust optimal assortment, we naturally experience a decrease in nominal profit and increase in robust profit. But how large are these changes? Table 5
                            illustrates the comparison for one of the stores.


                           Table 5 shows that, when comparing the robust optimal to the nominal optimal assortments, the relative decrease in nominal profit is quite small (.19 percent). At the same time the relative increase in robust profit is quite substantial (4.35 percent). Hence, a large gain (risk reduction) only requires a small sacrifice (decrease in expected return).


                           Fig. 4
                            summarizes the comparison made in Table 5 across all stores for different values of r. For each store, Fig. 4 contrasts the relative difference in robust profit between the robust and nominal assortment to the relative difference in nominal profit. The stores in each plot are sorted in ascending order of relative gain in robust profit. In Fig. 4a (r = 1.28), 29 out of 54 stores have the same nominal and robust optimal assortments, which is represented by the absence of bars at the left-hand side of the figure. For a considerable number of the other 25 stores the optimal robust assortment results in a large increase in robust profit (large white bar) yet a small decrease in nominal profit (small black bar). This holds in particular for the stores at the right-hand side of the plots. In these stores, the robust assortments trade off a small decrease in expected profit for a large reduction in uncertainty. However, it is interesting to note that the opposite situation also occurs. For some stores a small increase in robust profit is accompanied by a large decrease in nominal profit. Thus, for these stores the reduction in uncertainty of the outcome comes at a large cost, i.e., a significant decrease in expected profit.

When we move from Fig. 4a to b and c, r increases and hence, the uncertainty set increases. Consequently, for an increasing number of stores (25, 30, and 40 out of 54) the nominal and robust assortments deviate. As expected, the increases in robust profit become larger when the value of r increases (r = 1.28, avg. change = .72 percent; r = 1.64, avg. change = 1.23 percent; r = 2.33, avg. change = 2.86 percent). Interestingly, the corresponding decrease in nominal profit does not grow as progressively (r = 1.28, avg. change = −.42 percent; r = 1.64, avg. change = −.81 percent; r = 2.33, avg. change = −1.40 percent).
                        

The results in the preceding section were obtained with full enumeration. We now compare them to the Efficient Frontier heuristic, which we implemented in the optimization package AIMMS 3.13. The software code is available upon request. All optimization problems in the heuristic were solved with the state-of-the-art solver CPLEX 15.0. Sequentially, in an automated fashion, for each store we ran the Efficient Frontier heuristic for different values of r (i.e., 1.28, 1.64, 2.33). To investigate the role of the step size, the heuristic was run for different step size values (i.e., s = 1 percent, 2.5 percent, and 5 percent).


                        Table 6 shows that the heuristic performs very well compared to full enumeration. For almost all stores (between 49 and 54 out of 54) the heuristic finds the optimal robust assortment, even for the largest step size. In fact, for the smallest step size of 1 percent the heuristic finds the optimal robust assortment for every store, irrespective of the value of r. Moreover, even in the worst-case scenario (which happens for r = 2.33 with step size 5 percent), the resulting assortment is very near to the optimum (99.48 percent of the optimum). Another observation is that the running time for the heuristic is very short, in the worst-case only 1.88 seconds. Obviously, a smaller step size results in a more detailed heuristic and more stores for which the heuristic finds the optimal robust assortment. However, this also results in an increase in average running time from .49 seconds (step size s = 5 percent) to1.33 seconds (step size s = 1 percent) for a value of 2.33 for r. Finally, we note that the reduction in average running time compared to full enumeration is 92.9 percent or better across all cases, which is very substantial. This indicates the potential of the Efficient Frontier heuristic for larger problem instances when full enumeration is not feasible.

In the empirical application, we could use complete enumeration to assess the best robust assortments found with the Efficient Frontier heuristic. However, typically we would apply the heuristic in cases where the optimal solution is not known or hard to find. In those cases, we would also like to have some idea of the quality of the heuristic solution. To this end, we present an upper bound on the actual optimal robust profit, which we can compare with the best assortment found by the heuristic. As Online Appendix D shows, we can derive the following upper bound (UB) on the optimal robust profit after running the Efficient Frontier Heuristic:

                           
                              (26)
                              
                                 
                                    
                                       Π
                                       
                                          ROB
                                       
                                       *
                                    
                                    <
                                    
                                       
                                          
                                             
                                                max
                                                
                                                   f
                                                   =
                                                   0
                                                   ,
                                                   .
                                                   .
                                                   ,
                                                   F
                                                   −
                                                   
                                                   1
                                                
                                             
                                             
                                                (
                                                
                                                   
                                                      Π
                                                      NOM
                                                   
                                                   
                                                      (
                                                      
                                                         x
                                                         f
                                                      
                                                      )
                                                   
                                                   −
                                                   r
                                                   
                                                      
                                                         
                                                            q
                                                            f
                                                         
                                                         ̲
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                          ︸
                                       
                                       
                                          U
                                          B
                                       
                                    
                                    ,
                                 
                              
                           
                        where xf
                         indicates the assortment found in step f (=0,..,F) of the heuristic, and 
                           
                              
                                 q
                                 f
                              
                              ̲
                           
                         the next variance upper bound used in (RAOLimited) after finding xf
                        . The assortment in step 0, x
                        0, corresponds to the optimal nominal assortment that is efficient with corresponding variance, q
                        0, equal to 
                           
                              
                                 q
                                 
                                    NOM
                                 
                                 max
                              
                              .
                           
                        
                     

The Online Appendix shows that, ceteris paribus, the upper bound given by (26) decreases when step size s decreases, thus leading to a tighter upper bound. So, not only does decreasing the step size in the heuristic lead to an assortment with a higher robust profit (see Table 6), it is also expected to tighten the upper bound. Fig. 5 summarizes the average and worst-case relative gap between the best robust profit found by the heuristic and the upper bound. The results are displayed for different values of r and step size s.

We observe that the upper bounds are quite tight: the average gap across different values of r and step size s does not exceed 1.17 percent; the maximum (i.e., worst-case) gap is 2.97 percent at most across different values of r and step size s. For a given value of r both the average and maximum gap increase when the step size s increases, as expected. In addition, we see that the relative gaps increase when r becomes larger. This is consistent with the upper bound in Eq. (26), which shows that the robust profit of the assortment xf
                         found in step f of the heuristic can possibly be improved by at most 
                           
                              r
                              ·
                              (
                              
                                 
                                    q
                                    f
                                 
                              
                              −
                              
                                 
                                    
                                       q
                                       f
                                    
                                    ̲
                                 
                              
                              )
                              .
                           
                         Thus, this possible improvement increases in r.

In the era of accountability of business activities, it is of key importance that managers do not only consider expected profit outcomes but also risk (Srinivasan & Hanssens, 2009). The business literature has started to recognize the importance of managing risk and return in domains such as advertising and R&D (McAlister, Srinivasan, & Kim, 2007), customer satisfaction (Tuli & Bharadwaj, 2009), and customer portfolio management (Tarasi, Bolton, Hutt, & Walker, 2011). This paper is the first to empirically study the risk-return balance for the Retail Assortment Optimization problem, a central yet challenging knapsack problem for retailers. While finding the set of SKUs that maximize profit is a hard-to-solve problem (e.g., Rooderkerk et al., 2013), it is further compounded by the fact that its solutions are not necessary robust to the uncertainty in the profit contributions. This means that possible deviations from the expected profit contributions can render the optimal nominal assortment sub-optimal in terms of the actual profit realization. Therefore, this paper proposes to solve the robust 0–1 knapsack problem, i.c., the Robust Retail Assortment Optimization problem, where return is balanced with a penalty term for risk (i.e., uncertainty in profit).

To deal with the real-life dimensionality of this problem, it is key that we can solve the robust knapsack problem in a timely manner. In a typical supermarket, a retailer may have space to stock a few hundred SKUs in a category, but has to choose among thousands of potential SKUs available in the market. The corresponding selection problem will have many potential assortments, for which full enumeration is computationally unpractical. Therefore, we have developed a heuristic to construct (near-) optimal solutions to the robust retail assortment optimization problem. The heuristic constructs a subset of the Efficient Frontier assortments. The decision maker can decide how comprehensive the subset needs to be by tuning the grid construction process. When the grid construction is more detailed, more assortments that are part of the Efficient Frontier will be constructed; the resulting set will approximate the Efficient Frontier closer and therefore increase the odds of finding the real optimal robust assortment (which is part of the Efficient Frontier).

In the empirical application, the heuristic proved to be much faster (i.e., a 92.9 percent or stronger reduction in running time) than complete enumeration. The heuristic leads to solutions that are always optimal for the smallest step size (1 percent) and very close to the optima for the largest step size of 5 percent (.52 percent difference or less). We also provide an upper bound for the gap between the heuristic and the true optimum, which is essential in case the problem dimensionality prohibits full enumeration.

A key feature of the Efficient Frontier heuristic is that it does not just result in a single solution but in an accurate subset of the assortments that make up the Efficient Frontier of the robust knapsack problem. This approximation visualizes the trade-off between risk and return, allowing for a posteriori decision making (Hwang & Masud, 1979). That is, the retailer can decide how risk-averse s/he wants to be based on the amount of return that needs to be sacrificed to reduce risk to acceptable levels, or conversely if the additional return of an assortment warrants the higher risk (if the risk-premium is high enough).

As an alternative to the heuristic we could have also opted for population-based meta-heuristics (see Talbi, 2009 for a comprehensive overview of this class of heuristics). Most of the heuristics in this class are nature or biology-based, allowing for some form of coordination among solutions. For an overview of recent advances in this domain, notably the emergence of a new technique called the Cohort Intelligence (CI) technique, we refer to Kulkarni and Shabir (2014). The CI technique allows candidate solutions to adapt/improve themselves in the direction of other, better and more feasible, candidate solutions. These types of heuristics should be able to deal with the multi- and non-linear objective optimization nature of the problem. However, an important goal in designing our heuristic was to allow for a posteriori decision making with respect to the desirable level of risk aversion by the retailer. Consequently, we require a heuristic that quickly approximates the Efficient Frontier of assortments. It is not clear how this can be done using the CI heuristic. In CI, there is coordination among the candidate solutions to ensure that candidate solutions are stochastically adapted in the direction of the best solutions (best objective solution, closest to a binding constraint). However, there is no straightforward way to ensure that the solutions in each step of a nature- and biology-inspired meta-heuristic, such as CI, are Pareto-optimal (Jaskiewicz, 2004). In addition, our method has the benefit of providing an upper bound on the optimal robust profit for a given level of risk aversion, something that is not standard in meta-heuristics.

Our results show that solutions to the Robust Retail Assortment Optimization problem lead to assortments that are more robust to the uncertainty in the profit contributions. In the empirical application for a consumer packaged goods category we find that for many retail stores, optimal robust assortments trade off a small decrease in return (expected profit) for a large reduction in risk (uncertainty). At the same time, we find that the robust approach also leads to large sacrifices for some of the stores. For these stores, a marginal increase in robust profit requires a large decrease in expected profit. This potential disadvantage of robust optimization, i.e., sometimes being conservative at a large cost, is not stressed in the robust optimization literature. Future research should investigate if we can distinguish conditions or characteristics of stores that will likely lead to a large contribution of the robust approach.

In sum, when constructing optimal assortments, retailers should not only focus on the contribution of each SKU in terms of expected profit but also in terms of its contribution to the overall risk of the assortment. The latter not only results from the variability in the item's own sales but also from the way its sales covary with those of the remaining items. Items whose sales substantially and positively covary with those of other items will greatly enhance the total risk of the assortment's profit. Hence, oftentimes a retailer may be better off, in terms of the risk-return trade-off, by sacrificing an item for one with a lower expected profit but that (more) negatively covaries with most of the assortment. For example, it may be wise for a fashion retailer to substitute one SKU with a color that is expected to do very well for one that is expected to do slightly less but whose sales may move in opposite directions (a color that will do well when the others will not). That is, it is advised not to put all eggs in the same (colored) basket.

Our results provide a number of takeaways for retailers and (local) shop managers. First, risk aversion is important in retail operations but it has its price. However, this sacrifice can differ substantially across stores. For some it may be minimal, for others quite substantial. Consequently, in line with the increasing trend of store-level customisation of assortments (Rigby & Vishwanath, 2006), risk-aversion should also be dealt with at the individual store level. Instead of choosing how risk averse to be in general it would be better for a retailer to investigate how much different levels of risk aversion “cost” per individual store. Just like insurances, different levels of risk aversion (assurance) are associated with different costs (risk premiums in the shape of sacrificing some expected profit). Ultimately, the cost structure of these insurances will determine how risk averse the retailer wants to be at an individual store.

Future research should also verify how the heuristic performs on assortment optimization problems involving categories with larger number of products. The estimation of the optimization input will be quite a challenge in these large settings. We could alleviate the need for SKU-specific parameters by adopting a more parsimonious attribute-based modelling approach (Rooderkerk et al., 2013).

Finally, it would also be interesting to apply the heuristic to the robust counterparts of other examples of knapsack problems. One example is the challenge of allocating an advertising budget across different media to maximize the predicted sales response. Since the sales response of each medium is stochastic, robust optimization is called for. Similarly, channel decisions also involve returns with stochastic and correlated profitability outcomes. We hope that this study will stimulate more research on the robust optimization of knapsack problems.

Supplementary material associated with this article can be found, in the online version, at doi:10.1016/j.ejor.2015.10.014.


                     
                        
                           Image
                           Image, application 1
                           
                        
                     
                  

@&#REFERENCES@&#

