@&#MAIN-TITLE@&#Multibody system dynamics simulator for process simulation of ships and offshore plants in shipyards

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A simulator was developed for dynamic analysis of operations in shipyards.


                        
                        
                           
                           We based the simulator on six kernels including multibody dynamics kernel.


                        
                        
                           
                           The simulator contains some functions for motion analysis of floating platforms.


                        
                        
                           
                           The graphical user interfaces were also included for the convenience.


                        
                        
                           
                           The simulator was verified by applying to the operations in shipyards.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Multibody system dynamics

Modeling and simulation

Ship

Offshore plant

Scenario management

Lifting

Transporting

@&#ABSTRACT@&#


               
               
                  Since various existing simulation tools based on multibody system dynamics focus on conventional mechanical systems, such as machinery, cars, and spacecraft, there are some problems with the application of such simulation tools to shipbuilding domains due to the absence of specific items in the field of naval architecture and ocean engineering, such as hydrostatics, hydrodynamics, and mooring forces. Thus, in this study, we developed a multibody system dynamics simulator for the process simulation of ships and offshore structures. We based the simulator on six kernels: the multibody system dynamics kernel, the force calculation kernel, the numerical analysis kernel, the hybrid simulation kernel, the scenario management kernel, and the collision detection kernel. Based on these kernels, we implemented a simulator that had the following Graphic User Interfaces (GUIs): the modeling, visualization, and report GUIs. In addition, the geometric properties of blocks and facilities in shipyards are needed to configure the simulation for the production of ships and offshore plants, so these are managed in a database and connected to a specific commercial CAD system in shipyards. We used the simulator we developed in various cases of the process simulation of ships and offshore plants. The results show that the simulator is useful for various simulations of operations in shipyards and offshore industries.
               
            

@&#INTRODUCTION@&#

Requests for accurate dynamic analysis using a simulation tool have been increasing in many engineering fields, including in the shipbuilding industry. Unlike the conventional mechanical systems such as cars and machinery, all ships and offshore structures differ in purpose, shape, and size [1]. Thus, even though process planning may be set up based on the experience of similar ships and offshore structures, many unexpected problems may occur during their production. For example, an interference between a block and the wire ropes, the desynchronization between the cranes, the excess of the maximum tension of the wire ropes, etc. can occur during the production of ships and offshore plants. Fig. 1
                      shows such problem during production in shipyards.

Moreover, due to the recent increase in the demand for offshore plants and new-concept ships, new manufacturing methods in shipyards are frequently reviewed with simulation, including with dynamic analysis, to confirm their availability and safety [2]. Since various existing simulation tools based on multibody system dynamics focus on conventional mechanical systems, such as machinery, cars, and spacecraft, there are some problems with the application of these simulation tools to shipbuilding domains due to the absence of specific items in the field of naval architecture and ocean engineering, such as hydrostatic, hydrodynamic, wake, and mooring forces. Therefore, some recent studies focused on developing a simulation tool for the shipbuilding process based on the multibody system dynamics theorem.

The remainder of this paper is as follows. Section 2 reviews previous works related to this study. In Section 3, the developed multibody system dynamics simulator for the shipbuilding process is introduced. Its application to shipbuilding follows in Section 4. The last section summarizes this study and briefly discusses the next study.

@&#RELATED WORKS@&#

There are various open-source-based or commercial software programs that are based on the multibody system dynamics theorem. However, there are few cases of their application to the simulation of the shipbuilding production process, because it is difficult for these systems to support shipbuilding-friendly external forces such as hydrostatic and hydrodynamic forces.

ADAMS (Automatic Dynamic Analysis of Mechanical Systems) is a software system with a number of integrated programs that help engineers perform three-dimensional kinematic and dynamic analyses of mechanical systems [3,4]. ADAMS generates equations of motion for multibody systems using augmented formulation. The user can define any multibody system composed of several rigid and flexible bodies that are interconnected by joints. ADAMS supplies various types of joints, such as fixed, revolute, and spherical joints. Various external forces can also be applied to multibody systems, but hydrostatic and hydrodynamic forces, which are the dominant forces exerted on the floating platform and are often used in shipyards, cannot be handled by ADAMS. ODE (Open Dynamics Engine) is an open-source library for simulating multibody dynamics [5]. Similar to ADAMS, ODE derives equations of motion for multibody systems using augmented formulation. However, ODE can treat only rigid bodies, not flexible bodies. Moreover, it cannot handle hydrostatic and hydrodynamic forces. RecurDyn [6] is a three-dimensional simulation program that combines dynamic response analysis tools and finite element analysis tools for multibody systems. It is two to 20 times faster than other dynamic solutions because of its advanced fully recursive formulation. Various joints and external forces can also be applied to multibody systems, but RecurDyn cannot handle hydrostatic and hydrodynamic forces.

Unlike these programs that are based on multibody system dynamics, MOSES (Multi-Operational Structural Engineering Simulator) is a simulation program that can analyze the motion of a single body in a fluid by applying hydrostatic and hydrodynamic forces to it [7]. With this program, a restrictively connected multibody system cannot be simulated because the program does not support a connective relation between the bodies, but a simulation that considers hydrostatic and hydrodynamic forces as external forces is possible. Thus, MOSES is often used for ocean simulation for a floating single body in shipyards.

In other areas of study that do not use the aforementioned programs, some researches related to shipbuilding domains have been conducted. Cha et al. proposed and developed a simulation framework for the dynamic analysis of the shipbuilding production process [8,9,10]. Based on Cha et al.’s studies, the formulation of multibody system dynamics was changed in order to make automated dynamic analysis efficient, and the component-based scenario management and GUIs were enhanced in this study. The aforementioned related works are summarized and compared with this study in Table 1
                     .


                        Fig. 2
                         shows the configuration of the multibody system dynamics simulator developed in this study. The developed simulator has three layers: the Database, Kernels, and Graphic User Interface (GUI). The core function of the kernels layer is to simulate the operations in shipyards and offshore industries. It has six components: the multibody system dynamics kernel, force calculation kernel, numerical analysis kernel, hybrid discrete event system specification (DEVS)/discrete time system specification (DTSS) kernel, scenario management kernel, and collision detection kernel. The GUI layer is based on these kernels and supports the users’ simple simulations from various cases in shipyards or offshore industries. In addition, the geometric properties of the block and facilities in shipyards are needed to configure the simulation for the production of ships and offshore plants, so these are managed in the database layer. In the following sections, the kernels and GUI layers are described in detail.

As mentioned in the previous section, the developed system has six core kernels. The function and role of each kernel are as follows.

The crane systems in shipyards are all multibody systems in which multiple rigid bodies are joined together. Thus, we developed the dynamic analysis kernel for the multibody system. The computer methods used in the automated dynamic analysis of multibody systems that consist of rigid bodies are generally classified into two main approaches [11]. In the first approach, the configuration of the system is identified using a set of Cartesian coordinates that describe the locations and orientations of the bodies. This approach is called “augmented formulation.” In the second approach, relative joint variables are used to formulate a minimum set of differential equations of motion, and two types of formulation use relative joint variables: embedding formulation and recursive formulation. However, embedding formulation has difficulty with automatically modeling multibody systems, so a multibody system dynamics kernel was developed based on recursive formulation [12] in a previous study [13]. To validate the developed kernel, the analysis results were compared with the data measured from a shipyard. This comparison confirmed that the simulation and measured data differed by only 10%. This 10% difference might have been caused mainly by the uncertainty of each multibody system and environmental factors, so we are planning to consider this uncertainty a factor of each term.

The dynamics of a rigid body system are described according to the system’s equations of motion, which specify the relationship between the forces that act on the system and the accelerations they produce. The developed kernel contains the algorithms for the following two calculations: the calculation of the forward dynamics, or of the acceleration response of a given rigid body system to a given applied force, and the calculation of the inverse dynamics, or of the force that must be applied to a given rigid body system to produce a given acceleration response. The equations of motion for each body of a multibody system based on recursive formulation can be summarized as follows.
                              
                                 (1)
                                 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                =
                                                
                                                   
                                                   
                                                      i
                                                   
                                                
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      i
                                                      -
                                                      1
                                                   
                                                
                                                ·
                                                
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                      -
                                                      1
                                                   
                                                
                                                +
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ·
                                                
                                                   
                                                      
                                                         
                                                            q
                                                         
                                                         
                                                            ̇
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ,
                                                
                                                
                                                   
                                                      
                                                         
                                                            a
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                =
                                                
                                                   
                                                   
                                                      i
                                                   
                                                
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      i
                                                      -
                                                      1
                                                   
                                                
                                                ·
                                                
                                                   
                                                      
                                                         
                                                            a
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                      -
                                                      1
                                                   
                                                
                                                +
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ·
                                                
                                                   
                                                      
                                                         
                                                            q
                                                         
                                                         
                                                            ¨
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                +
                                                
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            ̇
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ·
                                                
                                                   
                                                      
                                                         
                                                            q
                                                         
                                                         
                                                            ̇
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                +
                                                
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ×
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ·
                                                
                                                   
                                                      
                                                         
                                                            q
                                                         
                                                         
                                                            ̇
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      B
                                                   
                                                
                                                =
                                                
                                                   
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ·
                                                
                                                   
                                                      
                                                         
                                                            a
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                +
                                                
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                
                                                   
                                                      ×
                                                   
                                                   
                                                      ∗
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ·
                                                
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ,
                                                
                                                
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                =
                                                
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      B
                                                   
                                                
                                                +
                                                
                                                   
                                                   
                                                      i
                                                   
                                                
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      i
                                                      +
                                                      1
                                                   
                                                   
                                                      ∗
                                                   
                                                
                                                ·
                                                
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                      +
                                                      1
                                                   
                                                
                                                -
                                                
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      ext
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             
                                                
                                                   
                                                      τ
                                                   
                                                   
                                                      i
                                                   
                                                
                                                =
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      T
                                                   
                                                
                                                ·
                                                
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

The force calculation kernel calculates the forces that act on the multibody system. Some forces act on a rigid body of the system, and other forces act on a joint of the system. As shown in Fig. 2, the force calculation kernel has three kinds of forces: external forces, interactive forces, and forces that act on a floater such as a ship or an offshore plant. External forces act on a body or joint. Some forces such as wind and current forces are caused by the environment, and other forces, such as the controlling force, are planned by an engineer. Interactive forces act on two or more bodies by interconnecting them with a certain mechanical system (for example, a wire rope or a spring) or by colliding them. A tension force caused by a wire rope, a contact force caused by colliding two rigid bodies, and a mooring force are examples of interactive forces. Moreover, a load-balancing system, called an “equalizer” in shipyards, is also considered a type of this kernel. To apply equivalent tensions to all wires, the length of each wire is controlled in proportion to the tension that acts on it after classifying it as an equalizer.

The forces that act on a floater are only existing forces on the domain in ships and offshore plants (actually, these are kinds of external forces). There are two kinds of these forces: hydrostatic and hydrodynamic forces. The hydrostatic force applied to a floating body is calculated while considering the body’s instantaneous position, and is expressed as follows.
                              
                                 (2)
                                 
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                ˆ
                                             
                                          
                                       
                                       
                                          Hydrostatic
                                       
                                       
                                          ext
                                       
                                    
                                    (
                                    q
                                    ,
                                    t
                                    )
                                    =
                                    
                                       
                                          ρ
                                       
                                       
                                          sw
                                       
                                    
                                    g
                                    
                                       
                                          
                                             
                                                0
                                                ;
                                                
                                                0
                                                ;
                                                
                                                
                                                   ∫
                                                   
                                                      V
                                                      (
                                                      q
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                                dV
                                                ;
                                                
                                                
                                                   ∫
                                                   
                                                      V
                                                      (
                                                      q
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      Buoy
                                                   
                                                
                                                dV
                                                ;
                                                
                                                -
                                                
                                                   ∫
                                                   
                                                      V
                                                      (
                                                      q
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      Buoy
                                                   
                                                
                                                dV
                                                ;
                                                
                                                0
                                             
                                          
                                       
                                       
                                          T
                                       
                                    
                                 
                              
                           
                        

In the preceding equation, ρsw
                            is the density of sea water, g is the gravitational acceleration, V(q,
                           t) is the submerged volume of the floating body, and xBuoy
                            and yBuoy
                            are the coordinates of the center of buoyancy. The shape of a rigid body is modeled as a trigonalized mesh. To calculate the physical properties of the submerged volume of the floating platform, its mesh is first intersected with the waterplane, after which the mesh under the waterplane is chosen. Then this mesh is divided into a number of tetrahedrons using the triangles on the mesh surface, and the submerged volume of the floating platform can be calculated by summarizing the volumes of the tetrahedrons. Other physical properties, including the center of buoyancy and the second moment of the submerged volume, are also similarly calculated [14]. The hydrodynamic force is calculated in the time domain using the 3D Rankine panel method. The hydrodynamic force exerted on a floating body can be determined by integrating the pressure over the wet surface, as shown in the following equation.
                              
                                 (3)
                                 
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                ˆ
                                             
                                          
                                       
                                       
                                          hydrodynamic
                                       
                                       
                                          ext
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                -
                                                
                                                   
                                                      ∬
                                                   
                                                   
                                                      S
                                                   
                                                
                                                
                                                   
                                                      ∂
                                                      ϕ
                                                   
                                                   
                                                      ∂
                                                      t
                                                   
                                                
                                                n
                                                
                                                   
                                                      dS
                                                   
                                                   
                                                      (
                                                      1
                                                      ×
                                                      3
                                                      )
                                                   
                                                
                                                ;
                                                -
                                                
                                                   
                                                      ∬
                                                   
                                                   
                                                      S
                                                   
                                                
                                                
                                                   
                                                      ∂
                                                      ϕ
                                                   
                                                   
                                                      ∂
                                                      t
                                                   
                                                
                                                (
                                                r
                                                ×
                                                n
                                                )
                                                
                                                   
                                                      dS
                                                   
                                                   
                                                      (
                                                      1
                                                      ×
                                                      3
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                       
                                          T
                                       
                                    
                                 
                              
                           
                        

In the preceding equation, S is the submerged surface, and r is each panel’s position vector located on the body’s surface defined in body-fixed coordination. The algorithms for the calculation of these forces were studied in previous works [15,13] and modularized in this study.

To simulate and analyze the dynamic phenomena in the shipbuilding process for each time unit, a numerical analysis kernel was developed in this study. Because of some strict cases of simulation for the production of ships and offshore plants, the numerical analysis kernel provides various numerical integration methods such as the Euler method, Runge–Kutta method, Adams–Bashforth method, and Hilber–Hughes–Taylor method. The Runge–Kutta method is one of the best solutions for numerical integration, but the target block in shipyards is much heavier than the spring coefficient of wire ropes. Thus, the numerical integration of the operation in shipyards is often unstable when the Runge–Kutta method is used. Because of this problem, this system supports other numerical integration methods for the achievement of numerical stability, and the user can choose one method depending on his or her case. Using the kernel, the integrator integrates the equations of motion and calculates the position and velocity of each body in the given systems at each time unit.

There are two kinds of simulation. A simulation in which the state of a model changes by means of any event is called “discrete event simulation.” The discrete event simulation processes events, which change the state variables of a model, in the order in which they occur. A simulation that calculates the state of a model at each unit time is called “discrete time simulation.” It is mostly used to analyze dynamic or mechanical systems because it calculates the state of a model at each time unit.

Zeigler et al. [16] proposed formal structures, DEVS, and discrete time system specifications (DTSS) for handling simulation models of discrete events and times. They are widely used as standard modeling and simulation formalisms. The DEVS formalism is a hierarchical and modular modeling approach centered on the state concept. In its basic form, it does not consider the system structure evolution. Instead, only the states can evolve or move. Each system is described functionally (behaviorally) and structurally. Likewise, the DEVS formalism is composed of two types of models: atomic models and coupled models. The atomic model represents the basic behavior of the system, and the computed model denotes its internal structure. On the other hand, the coupled model assembles several atomic and/or coupled models to build a complex system hierarchy.

The DTSS formalism is a model structure that continuously calculates the state of a model at each time unit. An atomic model based on DTSS formalism has a structure similar to that of the DEVS formalism. In addition, it is connected to the atomic model of DEVS formalism. Its overall system is composed of a set of component models, either atomic or coupled, and thus, has a hierarchical structure. Each DEVS or DTSS model, also either atomic or coupled, corresponds to an object in the real system to be modeled.

Bang developed a simulation framework based on the hybrid DEVS and DTSS formalism [17]. To evaluate the efficiency and applicability of this simulation framework, it was applied to the block erection process in shipbuilding [8], the dive of a submarine [18], and an analysis of the evacuation of a passenger ship [19]. Most analyses based on multibody system dynamics are time-based. However, as mentioned in the previous section, the shipbuilding process is a kind of event-based analysis. Thus, in this study, the hybrid DEVS and DTSS formalism is used to cover both time-based and event-based analyses. The simulation kernel developed by Bang was also used in this study.

In this study, the scenario management kernel was developed to help configure a scenario of heavy load operations in shipyards or offshore industries. By analyzing a sequence of motions in a multibody system, the scenario can be specified by the combination of unit actions. A unit action is a user-defined input that acts on subcomponents of a multibody system. Each action should be performed at the proper time with the desired functions, so a model for performing this action, named “Actor,” was defined. An actor is a user-defined input that acts on a multibody system. All bodies, joints, and wire ropes in a multibody system can be connected with multiple actors. According to the type of interaction, the actor is specialized in the body, joint, or wire rope.

Using the actors, the user may be able to implement an action in an existing multibody system. However, to define the procedure of the action, it should be defined when the actor starts working and when it stops. The combination of the actors is a set of details of each action in a simulation procedure, and lists how to run an existing multibody system according to a given objective. Fig. 3
                            shows a sequence for generating a scenario for moving a block. The scenario for moving a block is as follows: (1) change the position and orientation of the “Crane,” (2) hoist up the “Block,” (3) change the position and orientation of the “Crane” (meaning as the “Crane” moves to the desired position and orientation), and (4) hoist down the “Block.” For example, in Step (1), to change the posture of the crane, two joint actors are allocated and connected with the two joints “J1” and “J2.” These two actors should be started after the simulation starts, so the trigger for starting the action is given by the starting time, which is normally zero, to the first group of actors, and the crane may move to the desired position and orientation.

To minimize the risk during the production of ships and offshore plants, the interferences among the bodies and wire ropes must be checked. One of the functions of the collision detection kernel is to detect their collision with other bodies and wire ropes during the simulation, which is particularly important as there can be more than 10,000 subcomponents and pieces. The collision detection modules available to the public are OPCODE, RAPID, I-COLLIDE, V-COLLIDE, SWIFT++, etc. The collision detection kernel was based on some of these modules and it modularized them.

As shown in Fig. 2, the GUI layer has three parts: the modeling GUI, the visualization GUI, and the report GUI.


                        Fig. 4
                         shows the GUI overview of the multibody system dynamics simulator developed in this study. As shown in Fig. 4(a)–(f), the GUI of the developed simulator has six components: a ribbon style menu, a model tree, a property editor, a 3D simulation view, a scenario editor, a report view, a log window, and a timeline.

The modeling GUI has two subcomponents: the multibody system modeling GUI and the scenario modeling GUI. Fig. 5
                         shows the modeling GUI of the developed simulator. It can be used to edit multibodies, rigid bodies, joints, and wire ropes, and to import or export multibodies. The multibody system can be editable in a model tree. Fig. 5 also shows an example of the modeling of a jib crane by combining four rigid bodies and three joints.


                        Fig. 6
                         shows the scenario modeling GUI developed in this study. It edits a basic actor, converts it to another actor type, and provides tools for convenience. The scenario can be created by connecting the actors, and the priority of each actor can be set by connecting it with the other actors.

The developed simulator also has the visualization GUI. The visualization GUI is used to manipulate multibodies in the 3D simulation view, as shown in Fig. 4. Finally, Fig. 7
                         shows an example of the report GUI developed in this study. To generate simulation reports, the target items should be chosen before the simulation is started. After the start of the simulation, the report GUI supports a real-time view of the simulation results, as shown in Fig. 7.

To confirm the flexibility and usefulness of the developed simulator, it was applied to various examples in the shipbuilding process. In this paper, two such examples are presented: the double compound pendulum, and the block-lifting, transportation, and turnover simulation using two goliath cranes.

@&#OVERVIEW@&#

To verify the functions of the simulator, it was first applied to a simple example, the double compound pendulum, with a simple scenario. Fig. 8
                           (a) shows the configuration of the double compound pendulum. Any swinging rigid body free to rotate around a fixed horizontal axis is called a compound pendulum. As shown in Fig. 8(a), Bodies 0, 1, and 2 are rigid bodies, and Body 1 is interconnected to Bodies 0 and 2 with rotational joints. Body 0 is fixed to the inertial space and does not move.

In the rest of the double compound pendulum, its subcomponents, i.e., rigid bodies, do not move. Thus, it attempts to act via external forces to its joints step by step. At first, we simultaneously changed the angle of Joint 0 to 45° and the angle of Joint 1 to 30°. Then we rotated Joint 0 by an additional 90°. These two actions can be represented in a scenario using the joint actor. Fig. 8(b) shows this scenario represented by multiple joint actors. When the simulation starts, Joint Actors 1 and 2 in Fig. 8(b) will be activated, so the external forces will act on the target joints – Joints 0 and 1. These actors will be deactivated when Joint 0 reaches 45° and when Joint 1 reaches 30°. When each joint finishes its job, it will send a trigger to the connected joint, Joint Actor 3 in this example. Since Joint Actor 3 gets two triggers – one each from Joint Actors 1 and 2 – it will finally be activated and will act on an external force to the connected joint (Joint 0) to rotate it by an additional 90°.


                           Fig. 9
                            shows the configuration of the double compound pendulum and the scenario configuration using the developed scenario manager. Fig. 9(a) shows that three rigid bodies are modeled and interconnected using two rotating joints. In Fig. 9(b), three joint actors are used to represent the given scenario. The two actors on the left will be activated simultaneously just after the simulation starts, and the actor on the right will be activated after the two actors on the left finish their jobs.


                           Figs. 10 and 11
                           
                            show the simulation results of the double compound pendulum with the given scenario mentioned in the previous section. As shown in Figs. 10 and 11, the change in the Euler angles of each body is divided in four steps. The simulation started, and Actors 1 and 2 were activated simultaneously. Actor 1 tried to change the degree of Joint 0 to 45°, and Actor 2 tried to change the degree of Joint 1 to 30°. Since we set those angular velocities to be the same, Actor 2 obviously did its job faster than Actor 1 did. Thus, about 5–16s after the simulation started, Actor 1 was still activated, but Actor 2 was deactivated after 5s. After about 16s, Actor 1 was also deactivated, and then Actor 3 was activated. Actor 3 tried to change the angle of Joint 0, so the angles of Joints 0 and 1 were changed. After Joint 0 was rotated by an additional 90°, Actor 3 was deactivated, and the execution of the scenario was finished after about 25s.

@&#OVERVIEW@&#

The block-lifting, transportation, and turnover procedure is the most frequently implemented production process in shipyards. Fig. 12
                            shows an example of a block-lifting, transportation, and turnover process using two goliath cranes on a dry dock. The block with a weight of about 920tons is connected to two goliath cranes via wire ropes. Some parts of these wire ropes are grouped by a block loader. Fig. 12(b) shows a sequence of the operation for the block-lifting, transportation, and turnover process. At first, two goliath cranes lift the block by shortening the connected wire ropes. Then the two goliath cranes move to a certain location to move the block into the dock. Finally, the goliath cranes continue the turnover process by alternately shortening and lengthening each wire rope.

To simulate this operation sequence, dynamic models; simulation models, including actors; and the scenario should be defined. The detailed descriptions of the configuration of the simulation will be explained in the following sections.

To analyze the dynamic responses through the simulation, we assumed that the block-lifting and transportation were carried out using two goliath cranes, six block loaders, and one block, as shown in Fig. 12(a). The goliath crane is composed of the main body, the upper trolley, and the lower trolley. The upper trolley and the lower trolley are interconnected with the main body by sliding joints. The block loader consists of two bodies interconnected by a revolute joint. To simulate the block-lifting and transportation, dynamic models should be made using the developed multibody dynamics kernel.


                           Fig. 13
                            shows the entire configuration, including the dynamic models, simulation models, and scenario, for the block-lifting, transportation, and turnover simulation. The actor atomic models are allocated to some dynamic models that need to act according to the action list in the scenario. For example, a joint connects the body “Upper Trolley” and the body “Body,” and the joint actor atomic model is allocated to this actor.

In the right box in Fig. 13, the block-lifting, transportation, and turnover sequence scenario is specified using an action list. Various actions are defined in the action list, including an action for moving the crane and an action for lifting the block up and down.


                           Fig. 14
                            shows the scenario configuration of the target simulation using the developed simulator. Since the target scenario has many operations for hoisting the wire up and down, there are many wire actors in the scenario, as shown in Fig. 14. At first, eight wire actors were activated and tried to hoist the block up after the simulation started [Fig. 14(a)]. Then two joint actors tried to move two goliath cranes to the given position for their turnover and erection [Fig. 14(b)]. Later, two joint actors for the lower trolley [Fig. 14(c)] and eight wire actors [Fig. 14(d)] tried to turn the block over.


                           Fig. 15
                            shows the simulation results. The graph shows the change in the tension that acted on Block Loader 1 of the first crane (“GOC201”). The results show that the scenario was successfully progressed by activating and deactivating the actors. At first, the wire actor tried to change the length of the target wire rope, so the graph shows that the tension that acted on the wire rope increased. After the block-lifting ended, the goliath crane started to move to the dock by activating the joint actors on it. Then the goliath carne stopped moving and the block turnover started. This procedure can be confirmed with the change in the tension that acted on the wire rope in Fig. 15.

@&#OVERVIEW@&#

A shipyard often requires handling of a mega-block that is about more than 500tons heavy. In this case, multiple cranes should co-operate to handle the block. Fig. 16
                            shows an example of the lifting and transportation of a mega-block using two goliath cranes and a floating crane. The block with a weight of about 3500tons [Fig. 16(a)] is connected to two goliath cranes [Fig. 16(b)] and a floating crane via wire ropes. Some parts of the wire ropes are grouped by a block loader. Fig. 16(c)–(e) shows a sequence of the block-lifting and transportation operation. At first, three cranes lift the block by shortening the connected wire ropes. Then the cranes move along to the right by about 100 meters to move the block into the dock. Finally, the cranes continue the lift-down process by alternately lengthening each wire rope.

The operator wanted to check the following three potential risks: (a) the interference among the three cranes, (b) the load-unbalancing phenomenon due to the wave and wind, and (c) the dynamic effect according to the change in the tension acting on each wire.

To analyze the dynamic responses through the simulation, we assumed that the block-lifting and transportation were carried out using two goliath cranes and a floating crane, as shown in Fig. 17
                           . The goliath crane is composed of the main body, the upper trolley, and the lower trolley. The upper trolley and the lower trolley are interconnected with the main body by sliding joints. To simulate the block-lifting and transportation, dynamics models should be made using the developed multibody dynamics kernel. To consider the environmental factors, we also applied hydrostatic and hydrodynamic forces and wind force.


                           Fig. 18
                            shows the scenario for the simulation of the lifting and transportation of a mega-block using two goliath cranes and a floating crane. In Fig. 18, the two body actors on the left are used to consider the environmental factors: the upper actor for the wave force acting on the floating crane and the lower actor for the wind force acting on the target block. The rest of the actors describe the procedure of the operation. At first, three cranes lift the block by shortening the 10 connected wire ropes. This operation is performed using the wire actors [Fig. 18(a)]. Then the cranes move along to the right by about 100 meters to move the block into the dock using three joint actors [Fig. 18(b)]. Finally, the cranes continue the lift-down process by alternately lengthening each wire rope [Fig. 18(c)].


                           Fig. 19
                            shows the plan view of the simulation and the points on the cranes, which were connected to the block using wires. Points x1–x4 are for the floating crane, points x5–x7 are for the left goliath crane, and points x8–x10 are for the right goliath crane.

The tensions acting on the wires of each point were calculated by performing the simulation with the given scenario. Figs. 20 and 21
                           
                            show the simulation results. The graph shows the change in the tension that acted on each wire. The results show that the scenario was successfully created by activating and deactivating the actors. From this result, we can also assume that the dynamic loads were about 10–15% larger than the static loads.

In this study, the multibody system dynamics simulator was developed for the process simulation of ships and offshore plants. To evaluate the applicability of the developed simulator, it was applied to various examples of simulation in shipyards. Among such examples, three were presented in this paper: the double compound pendulum; the block-lifting, transportation, and turnover process; and the lifting and transportation of a mega-block. From these examples, it was confirmed that the developed simulator can be applied to most examples in shipyards, and can be extended to support the functions for other exceptional situations and considerations. In a future study, we will apply the developed simulator to more diverse simulations of the shipbuilding process, such as to a simulation of the dynamic analysis of the offshore structure and the block assembly process, including the design process of ships and offshore plants, such as to the lug arrangement of blocks, and will improve the efficiency of the developed simulator and its applicability. In addition, we will improve the developed simulator to make it suitable for treating multibody system dynamics for flexible bodies.

@&#ACKNOWLEDGEMENTS@&#

This work was partially supported by,
                     
                        (a)
                        Industrial Strategic Technology Development Program (10035331, Simulation-based Manufacturing Technology for Ships and Offshore Plants) funded by the Ministry of Trade, Industry & Energy, Republic of Korea,

Brain Korea 21 Plus Program (Education and Research Center for Creative Offshore Plant Engineers of Seoul National University) funded by the Ministry of Education, Republic of Korea,


                           Engineering Research Institute of Seoul National University, Republic of Korea,


                           Research Institute of Marine Systems Engineering of Seoul National University, Republic of Korea, and


                           Dong-Eui University Grant (2014AA443), Republic of Korea.

@&#REFERENCES@&#

