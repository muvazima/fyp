@&#MAIN-TITLE@&#Comparing shapes through multi-scale approximations of the matching distance

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           This paper deals with the concepts of persistence diagram and matching distance.


                        
                        
                           
                           We present multi-scale approaches to approximate the matching distance.


                        
                        
                           
                           Experiments show the capability of the proposed methodologies for shape retrieval.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Persistence diagram

Bottleneck distance

Shape analysis

Dissimilarity criterion

@&#ABSTRACT@&#


               
               
                  Two of the main ingredients of topological persistence for shape comparison are persistence diagrams and the matching distance. Persistence diagrams are signatures capturing meaningful properties of shapes, while the matching distance can be used to stably compare them. From the application viewpoint, one drawback of these tools is the computational cost for evaluating the matching distance. In this paper we introduce a new framework for the matching distance estimation: It preserves the reliability of the entire approach in comparing shapes, extremely reducing the computational cost. Theoretical results are supported by experiments on 3D-models.
               
            

@&#INTRODUCTION@&#

Interpreting and comparing shapes are challenging issues in computer vision, computer graphics and pattern recognition [32,34]. Topological persistence [4,22] – including persistent homology [21] and size theory [24] – has proven to be a successful approach for these tasks, with applications to shape retrieval and classification.

One step in dealing with shape retrieval and classification is to define a measure of the (dis) similarity between shapes in a given database. According to topological persistence, this can be done by extracting from each element in the database a battery of persistence diagrams, shape descriptors which can be used to encode meaningful shape properties. In general, different shapes can provide the same persistence diagram: This can be seen as an equivalence with respect to the properties captured by that descriptor. The problem of determining the (dis) similarity between two shapes can be tackled by comparing the associated persistence diagrams: This can be done according to stable metrics between these descriptors, such as the Hausdorff distance or the matching (a.k.a. bottleneck) distance 
                        [14,18]. In this way a (pseudo) metric over the database can be defined, and used to quantitatively assess the (dis) similarity between different shapes [5,9,13].

Throughout the years, topological persistence has been successfully linked to a number of concrete problems concerning shape classification and retrieval, ranging from the retrieval of real-world, multi-component trademark images [11] to the analysis and classification of tumor cells [31] and melanocytic lesions [23]. This is due to properties such as robustness against different types of noise [2,26] and partial occlusion of shapes [19,20].

The main goal of this paper is to speed up the computational machinery underlying the assessment of a matching distance-based (dis) similarity metric over a dataset of shapes.

From the theoretical viewpoint, there is a good reason to consider the matching distance as the “right one” to compare persistence diagrams: It is optimal 
                        [30]. More precisely, it is possible to define a very natural notion of stability according to which, among all the distances between persistence diagrams that are stable in this sense, the matching distance turns out to be the most discriminative one (see also [18, Thm. 32] for details).

Nevertheless, evaluating the matching distance between two persistence diagrams is computationally expensive (see Section 3 for a precise formulation of this claim), making its usage not practicable when a (dis) similarity metric has to be defined on large datasets. To overcome this problem, in past works other distances have been used to compare persistence diagrams, such as the Hausdorff distance [12]. However, having the aforementioned optimality property of the matching distance in mind, we would prefer to deal with “good” approximations of it, which should be faster to compute and able to preserve its discriminative power, rather than be content with less informative metrics.

In [10], the authors introduce a multi-scale strategy for the approximation of a matching distance-based (dis) similarity metric. For each pair of persistence diagrams associated with different elements in a database, the idea is to compute a rough estimation of their matching distance, which is faster to obtain than its exact computation. This estimation is based on a “dissimilarity criterion” that is explained in detail in Section 3. It has been implemented using an algorithmic procedure which allows for a progressive refinement of such an estimation, whenever it is not sufficient to distinguish between persistence diagrams (and hence shapes) which are too similar.

In this paper we extend that work in two main respects:
                           
                              •
                              From the algorithmic viewpoint, we introduce a new scheme generalizing the one proposed in [10]. It is based on a randomized strategy to apply the aforementioned dissimilarity criterion. The outcome is a more flexible tool allowing us to obtain statistically better performances in terms of retrieval results.

As for experiments, we enlarged their setting by considering a new dataset of triangle meshes and new batteries of persistence diagrams, obtaining even in this case satisfactory results.

The present work is organized as follows. In Section 2 we recall the necessary definitions and results needed in the rest of the paper. In Section 3 we review the multi-scale construction of a matching distance-based (dis) similarity metric presented in [10], together with the dissimilarity criterion which is formalized in Theorem 3.1. Section 4 and Section 5 are devoted to present the schema we have developed for the application of the dissimilarity criterion. The experimental setting is described in Section 6, ranging from the chosen datasets to the selected batteries of persistence diagrams. In Section 7 experimental results are provided. A final discussion on the obtained results concludes the paper (Section 8).

In the classical formulation of persistence [22], the shape of an object is usually modeled as a topological space X endowed with a continuous function 
                        
                           φ
                           :
                           X
                           →
                           R
                        
                     . The role of 
                        
                           φ
                        
                      is to describe certain geometrical properties of X considered relevant to characterize the associated shape [9,24]. The topological properties of X are then captured by analyzing the sublevel sets filtration induced by 
                        
                           φ
                        
                      on X, i.e. a family of subspaces 
                        
                           
                              
                                 X
                              
                              
                                 u
                              
                           
                           =
                           
                              
                                 φ
                              
                              
                                 -
                                 1
                              
                           
                           (
                           (
                           -
                           ∞
                           ,
                           u
                           ]
                           )
                           ,
                           u
                           ∈
                           R
                        
                     , nested by inclusion. The core of persistent homology is to focus on the occurrence and the longevity of topological events along this filtration, such as the appearance and disappearance of connected components, tunnels and voids. For these reasons, the function 
                        
                           φ
                           :
                           X
                           →
                           R
                        
                      is called a filtering (or measuring) function. The levels of 
                        
                           φ
                        
                      at which these events correspond, i.e. the birth or the death of a homological class, are called homological critical values. As for homological classes, we distinguish between the classes which are born at a certain level 
                        
                           u
                           ∈
                           R
                        
                      and never die along the filtration, and the classes having a bounded lifetime. The former, called essential homological classes, represent the homological features of X; the latter represent the homological features of X with respect to the geometrical shape property described by 
                        
                           φ
                        
                     . The importance of these “bounded” classes depends on their lifetime: The basic paradigm here is that the longer a feature survives, the more meaningful or coarse the feature is for shape description. Vice-versa, noise and shape details are characterized by a shorter life.

The geometric-topological information of the shape provided by the chosen pair 
                        
                           (
                           X
                           ,
                           φ
                           )
                        
                      can be encoded in an algebraic structure known in the literature as persistent homology group. Given 
                        
                           u
                           ⩽
                           v
                           ∈
                           R
                        
                     , we consider the inclusion of 
                        
                           
                              
                                 X
                              
                              
                                 u
                              
                           
                        
                      into 
                        
                           
                              
                                 X
                              
                              
                                 v
                              
                           
                        
                     . This inclusion induces a homomorphism of homology groups 
                        
                           
                              
                                 H
                              
                              
                                 k
                              
                           
                           (
                           
                              
                                 X
                              
                              
                                 u
                              
                           
                           )
                           →
                           
                              
                                 H
                              
                              
                                 k
                              
                           
                           (
                           
                              
                                 X
                              
                              
                                 v
                              
                           
                           )
                        
                      for every 
                        
                           k
                           ∈
                           Z
                        
                     . Its image consists of the k-homological classes that live at least from the level u to the level v and is called the kth-persistent homology group of 
                     
                        
                           (
                           X
                           ,
                           φ
                           )
                        
                      
                     at 
                     
                        
                           (
                           u
                           ,
                           v
                           )
                        
                     . If X satisfies some mild conditions [8] (which will be assumed to hold throughout the paper) this group is finitely generated: In this case, we denote its rank by 
                        
                           
                              
                                 β
                              
                              
                                 k
                              
                           
                           (
                           u
                           ,
                           v
                           )
                        
                     .

A simple and compact description of persistent homology groups is provided by the associated persistence diagrams. Roughly, these are multi-sets of points obtained by pairing homological critical values corresponding to the birth-level and the death-level of one or more independent k-homological classes along the filtration induced by 
                           
                              φ
                           
                        , and vertical lines representing essential classes. In this paper, for the sake of simplicity, we focus on sub-diagrams of persistence diagrams, known in the literature as ordinary persistence diagrams (from now on simply called persistence diagrams), in which lines are not present [15]. However, we underline that all the results we present here can be extended to the classical persistence diagrams (see Remark 3.1).

Assume that a pair 
                           
                              (
                              X
                              ,
                              φ
                              )
                           
                         is fixed. To formalize the definition of a persistence diagram, let 
                           
                              
                                 
                                    
                                       
                                          Δ
                                       
                                       
                                          +
                                       
                                    
                                 
                                 
                                    ‾
                                 
                              
                              =
                              
                                 
                                    Δ
                                 
                                 
                                    +
                                 
                              
                              ∪
                              Δ
                           
                         where 
                           
                              
                                 
                                    Δ
                                 
                                 
                                    +
                                 
                              
                              =
                              {
                              (
                              u
                              ,
                              v
                              )
                              ∈
                              R
                              ×
                              R
                              :
                              u
                              <
                              v
                              }
                           
                        , and 
                           
                              Δ
                              =
                              {
                              (
                              u
                              ,
                              v
                              )
                              ∈
                              R
                              ×
                              R
                              :
                              u
                              =
                              v
                              }
                           
                        . With each point 
                           
                              (
                              u
                              ,
                              v
                              )
                              ∈
                              
                                 
                                    Δ
                                 
                                 
                                    +
                                 
                              
                           
                         let us associate a multiplicity, that is the number of independent k-homological classes born at the level u and dead at the level v 
                        [22,25]. Obviously, the sole points with a positive multiplicity are the ones having as coordinates homological critical values appropriately paired. These points are called proper points.
                           Definition 2.1
                           Multiplicity


                           Let 
                                 
                                    k
                                    ∈
                                    Z
                                 
                               and 
                                 
                                    (
                                    u
                                    ,
                                    v
                                    )
                                    ∈
                                    
                                       
                                          Δ
                                       
                                       
                                          +
                                       
                                    
                                 
                              . The multiplicity 
                              
                                 
                                    
                                       
                                          μ
                                       
                                       
                                          k
                                       
                                    
                                    (
                                    u
                                    ,
                                    v
                                    )
                                 
                               of 
                                 
                                    (
                                    u
                                    ,
                                    v
                                    )
                                 
                               is the finite non-negative number defined by
                                 
                                    (2.1)
                                    
                                       
                                          
                                             μ
                                          
                                          
                                             k
                                          
                                       
                                       (
                                       u
                                       ,
                                       v
                                       )
                                       =
                                       
                                          
                                             
                                                lim
                                             
                                             
                                                ε
                                                →
                                                
                                                   
                                                      0
                                                   
                                                   
                                                      +
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      β
                                                   
                                                   
                                                      k
                                                   
                                                
                                                (
                                                u
                                                +
                                                ε
                                                ,
                                                v
                                                -
                                                ε
                                                )
                                                -
                                                
                                                   
                                                      β
                                                   
                                                   
                                                      k
                                                   
                                                
                                                (
                                                u
                                                -
                                                ε
                                                ,
                                                v
                                                -
                                                ε
                                                )
                                                +
                                                -
                                                
                                                   
                                                      β
                                                   
                                                   
                                                      k
                                                   
                                                
                                                (
                                                u
                                                +
                                                ε
                                                ,
                                                v
                                                +
                                                ε
                                                )
                                                +
                                                
                                                   
                                                      β
                                                   
                                                   
                                                      k
                                                   
                                                
                                                (
                                                u
                                                -
                                                ε
                                                ,
                                                v
                                                +
                                                ε
                                                )
                                             
                                          
                                       
                                       .
                                    
                                 
                              
                           

The kth-persistence diagram 
                                 
                                    
                                       
                                          D
                                       
                                       
                                          k
                                       
                                    
                                 
                               is the multiset of all points 
                                 
                                    (
                                    u
                                    ,
                                    v
                                    )
                                    ∈
                                    
                                       
                                          Δ
                                       
                                       
                                          +
                                       
                                    
                                 
                               such that 
                                 
                                    
                                       
                                          μ
                                       
                                       
                                          k
                                       
                                    
                                    (
                                    u
                                    ,
                                    v
                                    )
                                    >
                                    0
                                 
                              , counted with their multiplicity, union the points of 
                                 
                                    Δ
                                 
                              , counted with infinite multiplicity.


                        Fig. 1
                         shows an example of persistence diagrams for 
                           
                              k
                              =
                              0
                              ,
                              1
                           
                        . The surface 
                           
                              X
                              ⊂
                              
                                 
                                    R
                                 
                                 
                                    3
                                 
                              
                           
                         is filtered by the height function 
                           
                              φ
                           
                        . The associated persistence diagrams 
                           
                              
                                 
                                    D
                                 
                                 
                                    0
                                 
                              
                           
                         and 
                           
                              
                                 
                                    D
                                 
                                 
                                    1
                                 
                              
                           
                         have only one proper point. The abscissa of 
                           
                              p
                              ∈
                              
                                 
                                    D
                                 
                                 
                                    0
                                 
                              
                           
                         (
                           
                              q
                              ∈
                              
                                 
                                    D
                                 
                                 
                                    1
                                 
                              
                           
                        , respectively) corresponds to the level at which a new connected component (tunnel, respectively) is born along the filtration, while its ordinate identifies the level at which this connected component (tunnel, respectively) merges with the existing one (is closed on one side, respectively). To see, for instance, that 
                           
                              
                                 
                                    μ
                                 
                                 
                                    0
                                 
                              
                              (
                              p
                              )
                              =
                              1
                           
                        , if 
                           
                              p
                              =
                              (
                              
                                 
                                    u
                                 
                                 
                                    ¯
                                 
                              
                              ,
                              
                                 
                                    v
                                 
                                 
                                    ¯
                                 
                              
                              )
                           
                        , it is sufficient to observe that, for every 
                           
                              ε
                              >
                              0
                           
                         sufficiently small, it holds that 
                           
                              
                                 
                                    β
                                 
                                 
                                    0
                                 
                              
                              (
                              
                                 
                                    u
                                 
                                 
                                    ¯
                                 
                              
                              +
                              ε
                              ,
                              
                                 
                                    v
                                 
                                 
                                    ¯
                                 
                              
                              -
                              ε
                              )
                              =
                              2
                              ,
                              
                                 
                                    β
                                 
                                 
                                    0
                                 
                              
                              (
                              
                                 
                                    u
                                 
                                 
                                    ¯
                                 
                              
                              -
                              ε
                              ,
                              
                                 
                                    v
                                 
                                 
                                    ¯
                                 
                              
                              -
                              ε
                              )
                              =
                              
                                 
                                    β
                                 
                                 
                                    0
                                 
                              
                              (
                              
                                 
                                    u
                                 
                                 
                                    ¯
                                 
                              
                              +
                              ε
                              ,
                              
                                 
                                    v
                                 
                                 
                                    ¯
                                 
                              
                              +
                              ε
                              )
                              =
                              
                                 
                                    β
                                 
                                 
                                    0
                                 
                              
                              (
                              
                                 
                                    u
                                 
                                 
                                    ¯
                                 
                              
                              -
                              ε
                              ,
                              
                                 
                                    v
                                 
                                 
                                    ¯
                                 
                              
                              +
                              ε
                              )
                              =
                              1
                           
                        , and apply Definition 2.1. In an analogous way, it can be observed that 
                           
                              
                                 
                                    μ
                                 
                                 
                                    1
                                 
                              
                              (
                              q
                              )
                              =
                              1
                           
                        .

Two persistence diagrams can be compared by means of the matching distance.

Seen that this comparison is generally performed by fixing a certain homological degree, we drop in what follows any reference to the integer k.

The matching distance between two persistence diagrams 
                           
                              D
                              ,
                              
                                 
                                    D
                                 
                                 
                                    ′
                                 
                              
                           
                         measures the cost of finding a correspondence between their points. In doing this, the cost of taking a point 
                           
                              p
                              ∈
                              D
                           
                         to a point 
                           
                              
                                 
                                    p
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              
                                 
                                    D
                                 
                                 
                                    ′
                                 
                              
                           
                         is measured as the minimum between the cost of moving one point onto the other and the cost of moving both points onto the diagonal. Matching a proper point p with a point of 
                           
                              Δ
                           
                        , which can be interpreted as the destruction of p, is allowed by the fact that the number of proper points for two persistence diagrams is usually different. See Fig. 2
                         for an example.
                           Definition 2.3
                           Matching distance


                           The matching distance between two persistence diagrams 
                                 
                                    D
                                    ,
                                    
                                       
                                          D
                                       
                                       
                                          ′
                                       
                                    
                                 
                               is defined as
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             match
                                          
                                       
                                       (
                                       D
                                       ,
                                       
                                          
                                             D
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                       =
                                       
                                          
                                             
                                                min
                                             
                                             
                                                σ
                                             
                                          
                                       
                                       
                                       
                                          
                                             
                                                max
                                             
                                             
                                                p
                                                ∈
                                                D
                                             
                                          
                                       
                                       
                                       d
                                       (
                                       p
                                       ,
                                       σ
                                       (
                                       p
                                       )
                                       )
                                       ,
                                    
                                 
                              where 
                                 
                                    σ
                                 
                               varies among all the bijections between D and 
                                 
                                    
                                       
                                          D
                                       
                                       
                                          ′
                                       
                                    
                                 
                               and
                                 
                                    (2.2)
                                    
                                       d
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         u
                                                         ,
                                                         v
                                                      
                                                   
                                                
                                                ,
                                                
                                                   
                                                      
                                                         
                                                            
                                                               u
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       =
                                       
                                          min
                                       
                                       
                                          
                                             
                                                
                                                   max
                                                
                                                
                                                   
                                                      
                                                         |
                                                         u
                                                         -
                                                         
                                                            
                                                               u
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         |
                                                         ,
                                                         |
                                                         v
                                                         -
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         |
                                                      
                                                   
                                                
                                                ,
                                                
                                                   max
                                                
                                                
                                                   
                                                      
                                                         
                                                            
                                                               v
                                                               -
                                                               u
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               
                                                                  
                                                                     v
                                                                  
                                                                  
                                                                     ′
                                                                  
                                                               
                                                               -
                                                               
                                                                  
                                                                     u
                                                                  
                                                                  
                                                                     ′
                                                                  
                                                               
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              for every 
                                 
                                    
                                       
                                          
                                             u
                                             ,
                                             v
                                          
                                       
                                    
                                    ,
                                    
                                       
                                          
                                             
                                                
                                                   u
                                                
                                                
                                                   ′
                                                
                                             
                                             ,
                                             
                                                
                                                   v
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                    ∈
                                    
                                       
                                          
                                             
                                                Δ
                                             
                                             
                                                +
                                             
                                          
                                       
                                       
                                          ‾
                                       
                                    
                                 
                              .

The main interest in this metric is due to the fact that persistence diagrams are robust with respect to the matching distance. A visual interpretation of this property is given in Fig. 3
                        , where the 0th-persistence diagram of a woman surface model filtered by the height function is considered 
                           
                              (
                              a
                              )
                           
                         together with a noisy version 
                           
                              (
                              b
                              )
                           
                        . In both diagrams, the two points which are farthest from the diagonal represent the components born once the filtration includes the woman’s hands (they do not touch the rest of the body) and dying at the height of the armpits.

Looking at Fig. 3, the stability of persistence diagrams with respect to the matching distance can be explained as follows: Small changes in the considered filtering function produce only small changes in the position of points far from the diagonal, and possibly produce variations close to the diagonal.

More formally, consider two filtering functions 
                           
                              φ
                              ,
                              
                                 
                                    φ
                                 
                                 
                                    ′
                                 
                              
                              :
                              X
                              →
                              R
                           
                        . If we measure the distance between 
                           
                              φ
                           
                         and 
                           
                              
                                 
                                    φ
                                 
                                 
                                    ′
                                 
                              
                           
                         by the 
                           
                              
                                 
                                    L
                                 
                                 
                                    ∞
                                 
                              
                           
                        -norm, and the matching distance between the corresponding persistence diagrams D and 
                           
                              
                                 
                                    D
                                 
                                 
                                    ′
                                 
                              
                           
                        , the stability result upper bounds the latter distance by the former, i.e. 
                           
                              
                                 
                                    d
                                 
                                 
                                    match
                                 
                              
                              (
                              D
                              ,
                              
                                 
                                    D
                                 
                                 
                                    ′
                                 
                              
                              )
                              ⩽
                              ‖
                              φ
                              -
                              
                                 
                                    φ
                                 
                                 
                                    ′
                                 
                              
                              
                                 
                                    ‖
                                 
                                 
                                    ∞
                                 
                              
                           
                         
                        [18,14].

From a computational viewpoint, getting the matching distance between two persistence diagrams takes 
                        
                           O
                           (
                           
                              
                                 h
                              
                              
                                 2.5
                              
                           
                           )
                        
                     , being h the total amount of their proper points [17].

This means that, in applications involving large databases, computing the matching distance for any possible shape comparison is not a viable option. In fact, noisy or detailed shape models may give origin to persistence diagrams with a large number of proper points. In light of this, we want to reduce this computational complexity by considering, at first, only a rough estimation of the metric induced by the matching distance over a database, to be possibly refined whenever it is not sufficient to distinguish between different shapes.

The main point here is that, in most cases, determine that two shapes are very dissimilar does not require the exact computation of the matching distance between the associated persistence diagrams. For example, only a fast glance is usually needed to decide whether an elephant is different from an ant. In our framework, this could be equivalent to a rough estimation of the matching distance – and hence faster than its actual computation – between the persistence diagrams associated with the “elephant shape” and the “ant shape”, respectively. On the other hand, a higher level of accuracy could be necessary to distinguish, e.g., the “wolf shape” from the “German shepherd shape”. This would lead to a sharper estimation of the matching distance between the associated persistence diagrams, possibly to its exact computation.

In light of these reasonings, we introduce a multi-scale construction of our matching distance-based (dis) similarity metric.

Let D be a persistence diagram, and A its subset of proper points. For every 
                        
                           p
                           =
                           (
                           u
                           ,
                           v
                           )
                           ∈
                           
                              
                                 Δ
                              
                              
                                 +
                              
                           
                        
                      and every 
                        
                           δ
                           >
                           0
                        
                     , let 
                        
                           
                              
                                 Q
                              
                              
                                 δ
                              
                           
                           (
                           p
                           )
                        
                      be the open square centered at p of side length equal to 
                        
                           2
                           δ
                        
                     , and let us denote by 
                        
                           ♯
                           (
                           
                              
                                 Q
                              
                              
                                 δ
                              
                           
                           (
                           p
                           )
                           ,
                           A
                           )
                        
                      the number of points of A contained in 
                        
                           
                              
                                 Q
                              
                              
                                 δ
                              
                           
                           (
                           p
                           )
                        
                     . This notation is maintained throughout the paper.
                        Theorem 3.1
                        Dissimilarity criterion


                        
                           Let 
                           
                              
                                 D
                                 ,
                                 
                                    
                                       D
                                    
                                    
                                       ′
                                    
                                 
                              
                            
                           be two persistence diagrams, and 
                           
                              
                                 A
                                 ,
                                 
                                    
                                       A
                                    
                                    
                                       ′
                                    
                                 
                              
                            
                           the respective subsets of proper points. If there exist a point 
                           
                              
                                 p
                                 =
                                 (
                                 u
                                 ,
                                 v
                                 )
                                 ∈
                                 
                                    
                                       Δ
                                    
                                    
                                       +
                                    
                                 
                              
                            
                           and two real numbers 
                           
                              
                                 δ
                                 ,
                                 ε
                                 >
                                 0
                              
                            
                           such that 
                           
                              
                                 
                                    
                                       Q
                                    
                                    
                                       δ
                                       +
                                       ε
                                    
                                 
                                 (
                                 p
                                 )
                                 ⊂
                                 
                                    
                                       Δ
                                    
                                    
                                       +
                                    
                                 
                              
                            
                           and 
                           
                              
                                 ♯
                                 (
                                 
                                    
                                       Q
                                    
                                    
                                       δ
                                    
                                 
                                 (
                                 p
                                 )
                                 ,
                                 A
                                 )
                                 -
                                 ♯
                                 (
                                 
                                    
                                       Q
                                    
                                    
                                       δ
                                       +
                                       ε
                                    
                                 
                                 (
                                 p
                                 )
                                 ,
                                 
                                    
                                       A
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 >
                                 0
                              
                           
                           , then 
                           
                              
                                 
                                    
                                       d
                                    
                                    
                                       match
                                    
                                 
                                 (
                                 D
                                 ,
                                 
                                    
                                       D
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 ⩾
                                 ε
                              
                           
                           .
                        

The assumption 
                              
                                 ♯
                                 (
                                 
                                    
                                       Q
                                    
                                    
                                       δ
                                    
                                 
                                 (
                                 p
                                 )
                                 ,
                                 A
                                 )
                                 >
                                 ♯
                                 (
                                 
                                    
                                       Q
                                    
                                    
                                       δ
                                       +
                                       ε
                                    
                                 
                                 (
                                 p
                                 )
                                 ,
                                 
                                    
                                       A
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                            implies that, for every bijection 
                              
                                 σ
                                 :
                                 D
                                 →
                                 
                                    
                                       D
                                    
                                    
                                       ′
                                    
                                 
                              
                            there exists at least one proper point 
                              
                                 
                                    
                                       q
                                    
                                    
                                       ¯
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       u
                                    
                                    
                                       ¯
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       ¯
                                    
                                 
                                 )
                                 ∈
                                 D
                              
                            such that 
                              
                                 
                                    
                                       q
                                    
                                    
                                       ¯
                                    
                                 
                                 ∈
                                 
                                    
                                       Q
                                    
                                    
                                       δ
                                    
                                 
                                 (
                                 p
                                 )
                              
                            and 
                              
                                 σ
                                 (
                                 
                                    
                                       q
                                    
                                    
                                       ¯
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       
                                          
                                             u
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          
                                             v
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 ∈
                                 
                                    
                                       D
                                    
                                    
                                       ′
                                    
                                 
                              
                           , with 
                              
                                 
                                    
                                       
                                          
                                             q
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 
                                 ∉
                                 
                                 
                                    
                                       Q
                                    
                                    
                                       δ
                                       +
                                       ε
                                    
                                 
                                 (
                                 p
                                 )
                              
                           . Then, from (2.2) it holds that
                              
                                 (3.1)
                                 
                                    d
                                    (
                                    
                                       
                                          q
                                       
                                       
                                          ¯
                                       
                                    
                                    ,
                                    
                                       
                                          
                                             
                                                q
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    ⩾
                                    
                                       min
                                    
                                    
                                       
                                          
                                             ε
                                             ,
                                             
                                                max
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  v
                                                               
                                                               
                                                                  ¯
                                                               
                                                            
                                                            -
                                                            
                                                               
                                                                  u
                                                               
                                                               
                                                                  ¯
                                                               
                                                            
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        v
                                                                     
                                                                     
                                                                        ¯
                                                                     
                                                                  
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            -
                                                            
                                                               
                                                                  
                                                                     
                                                                        u
                                                                     
                                                                     
                                                                        ¯
                                                                     
                                                                  
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    ⩾
                                    
                                       min
                                    
                                    
                                       
                                          
                                             ε
                                             ,
                                             
                                                
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         ¯
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         u
                                                      
                                                      
                                                         ¯
                                                      
                                                   
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                    =
                                    ε
                                    .
                                 
                              
                           Indeed, in (3.1), the first inequality holds because at least one between 
                              
                                 |
                                 
                                    
                                       u
                                    
                                    
                                       ¯
                                    
                                 
                                 -
                                 
                                    
                                       
                                          
                                             u
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 |
                              
                            and 
                              
                                 |
                                 
                                    
                                       v
                                    
                                    
                                       ¯
                                    
                                 
                                 -
                                 
                                    
                                       
                                          
                                             v
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 |
                              
                            is not smaller than the difference between the semi-sides of 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       δ
                                    
                                 
                                 (
                                 p
                                 )
                              
                            and 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       δ
                                       +
                                       ε
                                    
                                 
                                 (
                                 p
                                 )
                              
                           ; the second inequality is obvious; the equality follows from both the facts that 
                              
                                 
                                    
                                       v
                                    
                                    
                                       ¯
                                    
                                 
                                 -
                                 
                                    
                                       u
                                    
                                    
                                       ¯
                                    
                                 
                                 >
                                 (
                                 v
                                 -
                                 δ
                                 )
                                 -
                                 (
                                 u
                                 +
                                 δ
                                 )
                              
                           , being 
                              
                                 (
                                 
                                    
                                       u
                                    
                                    
                                       ¯
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       ¯
                                    
                                 
                                 )
                                 ∈
                                 
                                    
                                       Q
                                    
                                    
                                       δ
                                    
                                 
                                 (
                                 p
                                 )
                              
                            and 
                              
                                 (
                                 u
                                 +
                                 δ
                                 ,
                                 v
                                 -
                                 δ
                                 )
                                 ∈
                                 
                                    
                                       Δ
                                    
                                    
                                       +
                                    
                                 
                              
                            the bottom right vertex of 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       δ
                                    
                                 
                                 (
                                 p
                                 )
                              
                           , and 
                              
                                 (
                                 v
                                 -
                                 δ
                                 -
                                 ε
                                 )
                                 -
                                 (
                                 u
                                 +
                                 δ
                                 +
                                 ε
                                 )
                                 ⩾
                                 0
                              
                           , i.e. 
                              
                                 (
                                 v
                                 -
                                 δ
                                 )
                                 -
                                 (
                                 u
                                 +
                                 δ
                                 )
                                 ⩾
                                 2
                                 ε
                              
                           , being 
                              
                                 (
                                 u
                                 +
                                 δ
                                 +
                                 ε
                                 ,
                                 v
                                 -
                                 δ
                                 -
                                 ε
                                 )
                                 ∈
                                 
                                    
                                       
                                          
                                             Δ
                                          
                                          
                                             +
                                          
                                       
                                    
                                    
                                       ‾
                                    
                                 
                              
                            the bottom right vertex of 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       δ
                                       +
                                       ε
                                    
                                 
                                 (
                                 p
                                 )
                              
                           . Hence 
                              
                                 
                                    
                                       max
                                    
                                    
                                       q
                                       ∈
                                       D
                                    
                                 
                                 d
                                 (
                                 q
                                 ,
                                 σ
                                 (
                                 q
                                 )
                                 )
                                 ⩾
                                 ε
                              
                            for every bijection 
                              
                                 σ
                              
                            and, by Definition 2.3, the theorem is proved □.

The matching distance between two classical persistence diagrams is computed on the basis of bijective correspondences between the multisets of points (proper and of 
                              
                                 Δ
                              
                           ), and the ones between the multisets of vertical lines (called corner lines or points at infinity) [17]. Accordingly, Theorem 3.1 can be extended to classical persistence diagrams by working with open squares for points in 
                              
                                 
                                    
                                       Δ
                                    
                                    
                                       +
                                    
                                 
                              
                           , and open rectangles with infinite height for vertical lines.


                     Fig. 4
                      shows an example of Theorem 3.1 in action. Figs. 4(a) and (b) display two persistence diagrams D and 
                        
                           
                              
                                 D
                              
                              
                                 ′
                              
                           
                        
                     . Points belonging to A and 
                        
                           
                              
                                 A
                              
                              
                                 ′
                              
                           
                        
                      are yellow and blue colored, respectively. In Fig. 4(c) the two multisets of points are superimposed, and the two squares 
                        
                           
                              
                                 Q
                              
                              
                                 δ
                              
                           
                           (
                           p
                           )
                        
                      (yellow) and 
                        
                           
                              
                                 Q
                              
                              
                                 δ
                                 +
                                 ε
                              
                           
                           (
                           p
                           )
                        
                      (blue) are depicted. It holds that 
                        
                           ♯
                           (
                           
                              
                                 Q
                              
                              
                                 δ
                              
                           
                           (
                           p
                           )
                           ,
                           A
                           )
                           -
                           ♯
                           (
                           
                              
                                 Q
                              
                              
                                 δ
                                 +
                                 ε
                              
                           
                           (
                           p
                           )
                           ,
                           
                              
                                 A
                              
                              
                                 ′
                              
                           
                           )
                           =
                           1
                        
                     , hence Theorem 3.1 implies that 
                        
                           
                              
                                 d
                              
                              
                                 match
                              
                           
                           (
                           D
                           ,
                           
                              
                                 D
                              
                              
                                 ′
                              
                           
                           )
                           ⩾
                           ε
                        
                     .

The issue here is to find a suitable way to apply Theorem 3.1, so to improve our framework. To this end, two different schemes have been designed, which we describe in Section 4 and 5, respectively.

We conclude the section with a remark which will be useful later.
                        Remark 3.2
                        
                           Definition 2.3 of the matching distance implies that, given two persistence diagrams 
                              
                                 D
                                 ,
                                 
                                    
                                       D
                                    
                                    
                                       ′
                                    
                                 
                              
                           , and the respective subsets of proper points 
                              
                                 A
                                 ,
                                 
                                    
                                       A
                                    
                                    
                                       ′
                                    
                                 
                              
                           , if 
                              
                                 H
                                 =
                                 A
                                 ∪
                                 
                                    
                                       A
                                    
                                    
                                       ′
                                    
                                 
                              
                           , then 
                              
                                 
                                    
                                       d
                                    
                                    
                                       match
                                    
                                 
                                 (
                                 D
                                 ,
                                 
                                    
                                       D
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 ⩽
                                 (
                                 V
                                 -
                                 U
                                 )
                                 /
                                 2
                              
                           , with 
                              
                                 U
                                 =
                                 
                                    
                                       min
                                    
                                    
                                       (
                                       u
                                       ,
                                       v
                                       )
                                       ∈
                                       H
                                    
                                 
                                 u
                                 ,
                                 V
                                 =
                                 
                                    
                                       max
                                    
                                    
                                       (
                                       u
                                       ,
                                       v
                                       )
                                       ∈
                                       H
                                    
                                 
                                 v
                              
                           . Indeed, 
                              
                                 (
                                 V
                                 -
                                 U
                                 )
                                 /
                                 2
                              
                            upper bounds the cost of the bijection between D and 
                              
                                 
                                    
                                       D
                                    
                                    
                                       ′
                                    
                                 
                              
                           , taking all the points of H onto 
                              
                                 Δ
                              
                           . Since 
                              
                                 
                                    
                                       d
                                    
                                    
                                       match
                                    
                                 
                              
                            is realized by the cheapest bijection between D and 
                              
                                 
                                    
                                       D
                                    
                                    
                                       ′
                                    
                                 
                              
                           , we have the claim.

This section is devoted to review the scheme introduced in [10] to estimate from below the matching distance between two persistence diagrams by virtue of Theorem 3.1. Moreover, we describe the pseudo-code and the computational complexity of our algorithm. We called this procedure a Refinement Prefixed Grid Scheme (RPGS).
                        Algorithm 1
                        RPGS (
                              
                                 A
                                 ,
                                 
                                    
                                       A
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 N
                              
                           ) 
                              
                                 
                                    
                                    
                                       
                                          
                                             1: Input: 
                                             
                                                
                                                   A
                                                   ,
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                              – lists of proper points; N – number of iterations
                                       
                                       
                                          
                                             2: 
                                                
                                                   Res
                                                   ⇐
                                                   0
                                                
                                             
                                          
                                       
                                       
                                          
                                             3: set U to be minimum x-coordinate of points in 
                                                
                                                   A
                                                   ∪
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             4: set V to be maximum y-coordinate of points in 
                                                
                                                   A
                                                   ∪
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             5: 
                                                
                                                   ω
                                                   ⇐
                                                   (
                                                   V
                                                   -
                                                   U
                                                   )
                                                   /
                                                   10
                                                
                                             
                                          
                                       
                                       
                                          
                                             6: 
                                                
                                                   Side
                                                   ⇐
                                                   V
                                                   -
                                                   U
                                                   +
                                                   2
                                                   ω
                                                
                                             
                                          
                                       
                                       
                                          
                                             7: for 
                                             
                                             
                                                
                                                   n
                                                   =
                                                   1
                                                
                                              
                                             to 
                                             N 
                                             do
                                          
                                       
                                       
                                          
                                             8: 
                                             
                                             
                                                
                                                   t
                                                   ⇐
                                                   5
                                                   +
                                                   n
                                                
                                             
                                          
                                       
                                       
                                          
                                             9: 
                                             
                                             
                                                
                                                   sSide
                                                   ⇐
                                                   Side
                                                   /
                                                   t
                                                
                                             
                                          
                                       
                                       
                                          10: compute matrices mA and 
                                                
                                                   
                                                      
                                                         mA
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          11: 
                                             for 
                                             
                                             
                                                
                                                   i
                                                   =
                                                   2
                                                
                                              
                                             to 
                                             
                                                
                                                   (
                                                   t
                                                   -
                                                   4
                                                   )
                                                
                                              
                                             do
                                          
                                       
                                       
                                          12: 
                                             for 
                                             
                                             
                                                
                                                   j
                                                   =
                                                   (
                                                   i
                                                   +
                                                   3
                                                   )
                                                
                                              
                                             to 
                                             
                                                
                                                   (
                                                   t
                                                   -
                                                   1
                                                   )
                                                
                                              
                                             
                                             do
                                          
                                       
                                       
                                          13: compute MA and 
                                                
                                                   
                                                      
                                                         MA
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                              for the parameters i and j
                                          
                                       
                                       
                                          14: 
                                             
                                             
                                                
                                                   
                                                      
                                                         r
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ⇐
                                                   (
                                                   MA
                                                   <
                                                   
                                                      
                                                         mA
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          15: 
                                             
                                             
                                                
                                                   
                                                      
                                                         r
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   ⇐
                                                   (
                                                   
                                                      
                                                         MA
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   <
                                                   mA
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          16: 
                                             
                                             if 
                                             
                                             
                                                
                                                   (
                                                   
                                                      
                                                         r
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                
                                             
                                             or 
                                             
                                                
                                                   
                                                      
                                                         r
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   )
                                                
                                              
                                             and 
                                             
                                                
                                                   (
                                                   Res
                                                   <
                                                   sSide
                                                   )
                                                
                                              
                                             then
                                          
                                       
                                       
                                          17: 
                                             
                                             
                                                
                                                   Res
                                                   ⇐
                                                   sSide
                                                
                                             
                                          
                                       
                                       
                                          18: 
                                             
                                             end 
                                             
                                             if
                                          
                                       
                                       
                                          19: 
                                             
                                             end 
                                             
                                             for
                                          
                                       
                                       
                                          20: 
                                             end 
                                             
                                             for
                                          
                                       
                                       
                                          21: end 
                                             
                                             for
                                          
                                       
                                       
                                          22: return 
                                             Res
                                          
                                       
                                    
                                 
                              
                           
                        

An implementation of RPGS is Algorithm 1, which takes as input the lists A and 
                        
                           
                              
                                 A
                              
                              
                                 ′
                              
                           
                        
                      of proper points of two persistence diagrams D and 
                        
                           
                              
                                 D
                              
                              
                                 ′
                              
                           
                        
                     , and a parameter N which is a natural number. Algorithm 1 runs a number of iterations equal to N. It starts by creating a squared region Q, which contains all the points of A and 
                        
                           
                              
                                 A
                              
                              
                                 ′
                              
                           
                        
                     . Q has 
                        
                           (
                           U
                           -
                           ω
                           ,
                           U
                           -
                           ω
                           )
                           ,
                           (
                           U
                           -
                           ω
                           ,
                           V
                           +
                           ω
                           )
                           ,
                           (
                           V
                           +
                           ω
                           ,
                           V
                           +
                           ω
                           )
                           ,
                           (
                           V
                           +
                           ω
                           ,
                           U
                           -
                           ω
                           )
                        
                      as vertices, where U and V are as in Remark 3.2, and 
                        
                           ω
                        
                      an arbitrarily small positive real number (see e.g. Fig. 5
                     (a)). At the nth iteration a grid consisting of 
                        
                           
                              
                                 t
                              
                              
                                 2
                              
                           
                        
                      squared cells, 
                        
                           t
                           =
                           n
                           +
                           5
                        
                     , is constructed on Q. The algorithm computes the 
                        
                           t
                           ×
                           t
                        
                      matrices mA and 
                        
                           
                              
                                 mA
                              
                              
                                 ′
                              
                           
                        
                      whose entries are the number of points of A and 
                        
                           
                              
                                 A
                              
                              
                                 ′
                              
                           
                        
                      in every cell of the grid, respectively. A point 
                        
                           p
                           =
                           (
                           u
                           ,
                           v
                           )
                        
                      belonging to A (
                        
                           
                              
                                 A
                              
                              
                                 ′
                              
                           
                        
                     , respectively) is counted in the entry 
                        
                           (
                           i
                           ,
                           j
                           )
                        
                      of mA (
                        
                           
                              
                                 mA
                              
                              
                                 ′
                              
                           
                        
                     , respectively) if 
                        
                           (
                           ⌈
                           (
                           u
                           -
                           U
                           +
                           ω
                           )
                           /
                           sSide
                           ⌉
                           ,
                           ⌈
                           (
                           v
                           -
                           U
                           +
                           ω
                           )
                           /
                           sSide
                           ⌉
                           )
                           =
                           (
                           i
                           ,
                           j
                           )
                        
                     , where sSide is as in line 9. Moreover, the algorithm sets the variables MA and 
                        
                           
                              
                                 MA
                              
                              
                                 ′
                              
                           
                        
                      to the sum of the entries of the submatrices 
                        
                           mA
                           [
                           i
                           -
                           1
                           ,
                           i
                           ,
                           i
                           +
                           1
                           ;
                           j
                           -
                           1
                           ,
                           j
                           ,
                           j
                           +
                           1
                           ]
                        
                      and 
                        
                           
                              
                                 mA
                              
                              
                                 ′
                              
                           
                           [
                           i
                           -
                           1
                           ,
                           i
                           ,
                           i
                           +
                           1
                           ;
                           j
                           -
                           1
                           ,
                           j
                           ,
                           j
                           +
                           1
                           ]
                        
                     , respectively. Finally, the algorithm evaluates Theorem 3.1 on each squared cell compared with the concentric square having side length three times greater, provided that both squares are contained in 
                        
                           
                              
                                 
                                    
                                       Δ
                                    
                                    
                                       +
                                    
                                 
                              
                              
                                 ‾
                              
                           
                        
                     ; the maximum value for which the theorem holds is then returned.

An example of RPGS in action is shown in Fig. 5. Let us assume that A is the set of yellow points, and 
                        
                           
                              
                                 A
                              
                              
                                 ′
                              
                           
                        
                      the set of blue points. In the first iteration (Fig. 5(a)) we evaluate Theorem 3.1 once. Variables storing the number of points of A and 
                        
                           
                              
                                 A
                              
                              
                                 ′
                              
                           
                        
                      in the blue square are 
                        
                           MA
                           =
                           3
                           ,
                           
                              
                                 MA
                              
                              
                                 ′
                              
                           
                           =
                           2
                        
                     , respectively; variables storing the number of points of A and 
                        
                           
                              
                                 A
                              
                              
                                 ′
                              
                           
                        
                      in the yellow square are 
                        
                           mA
                           (
                           2
                           ,
                           5
                           )
                           =
                           1
                           ,
                           
                              
                                 mA
                              
                              
                                 ′
                              
                           
                           (
                           2
                           ,
                           5
                           )
                           =
                           0
                        
                     . Hence, 
                        
                           MA
                           >
                           
                              
                                 mA
                              
                              
                                 ′
                              
                           
                           (
                           2
                           ,
                           5
                           )
                        
                      and 
                        
                           
                              
                                 MA
                              
                              
                                 ′
                              
                           
                           >
                           mA
                           (
                           2
                           ,
                           5
                           )
                        
                     , and we cannot provide an estimate of the matching distance because none of the assumptions in lines 14 and 15 hold. Moving to the second iteration, shown in Fig. 5(b), the algorithm applies Theorem 3.1 three times, getting the same result. Eventually, in the third iteration (Fig. 5(c)) there is at least one case for which our assumptions hold: 
                        
                           
                              
                                 MA
                              
                              
                                 ′
                              
                           
                           =
                           1
                           ,
                           mA
                           (
                           4
                           ,
                           7
                           )
                           =
                           2
                        
                     , thus 
                        
                           
                              
                                 MA
                              
                              
                                 ′
                              
                           
                           <
                           mA
                           (
                           4
                           ,
                           7
                           )
                        
                     . In other words, the number of blue points in the blue square is less than that of yellow points in the yellow square. This implies that any bijection between A and 
                        
                           
                              
                                 A
                              
                              
                                 ′
                              
                           
                        
                      matches at least one pair of points whose mutual distance is larger than the side length sSide of the yellow square. Hence, sSide is a lower bound for the matching distance between D and 
                        
                           
                              
                                 D
                              
                              
                                 ′
                              
                           
                        
                     .

Set h to the total number of points in A and 
                           
                              
                                 
                                    A
                                 
                                 
                                    ′
                                 
                              
                           
                        . With reference to Algorithm 1, the computational complexity C of RPGS can be formalized as
                           
                              
                                 C
                                 (
                                 h
                                 ,
                                 N
                                 )
                                 =
                                 
                                    
                                       c
                                    
                                    
                                       0
                                    
                                 
                                 +
                                 
                                    
                                       c
                                    
                                    
                                       1
                                    
                                 
                                 ·
                                 h
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          n
                                          =
                                          1
                                       
                                       
                                          N
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                2
                                             
                                          
                                          +
                                          2
                                          
                                             
                                                c
                                             
                                             
                                                3
                                             
                                          
                                          
                                             
                                                (
                                                n
                                                +
                                                5
                                                )
                                             
                                             
                                                2
                                             
                                          
                                          +
                                          
                                             
                                                c
                                             
                                             
                                                4
                                             
                                          
                                          ·
                                          h
                                          +
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   2
                                                
                                                
                                                   n
                                                   +
                                                   4
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   =
                                                   i
                                                   +
                                                   3
                                                
                                                
                                                   n
                                                   +
                                                   4
                                                
                                             
                                          
                                          
                                             
                                                c
                                             
                                             
                                                5
                                             
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        with 
                           
                              
                                 
                                    c
                                 
                                 
                                    0
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    c
                                 
                                 
                                    5
                                 
                              
                           
                         constants, 
                           
                              
                                 
                                    c
                                 
                                 
                                    0
                                 
                              
                              +
                              
                                 
                                    c
                                 
                                 
                                    1
                                 
                              
                              ·
                              h
                           
                         the cost of lines 
                           
                              1
                              -
                              6
                              ,
                              2
                              
                                 
                                    c
                                 
                                 
                                    3
                                 
                              
                              
                                 
                                    (
                                    n
                                    +
                                    5
                                    )
                                 
                                 
                                    2
                                 
                              
                              +
                              
                                 
                                    c
                                 
                                 
                                    4
                                 
                              
                              ·
                              h
                           
                         the cost of line 10, and 
                           
                              
                                 
                                    c
                                 
                                 
                                    5
                                 
                              
                           
                         that of lines 8–9.

Making some simple mathematical manipulations we obtain that
                           
                              
                                 C
                                 (
                                 h
                                 ,
                                 N
                                 )
                                 =
                                 
                                    
                                       c
                                    
                                    
                                       0
                                    
                                 
                                 +
                                 
                                    
                                       c
                                    
                                    
                                       1
                                    
                                 
                                 ·
                                 h
                                 +
                                 N
                                 (
                                 
                                    
                                       c
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 
                                    
                                       c
                                    
                                    
                                       4
                                    
                                 
                                 ·
                                 h
                                 )
                                 +
                                 2
                                 
                                    
                                       c
                                    
                                    
                                       3
                                    
                                 
                                 ·
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          n
                                          =
                                          1
                                       
                                       
                                          N
                                       
                                    
                                 
                                 
                                    
                                       (
                                       n
                                       +
                                       5
                                       )
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          n
                                          =
                                          1
                                       
                                       
                                          N
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          n
                                          +
                                          3
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          n
                                          -
                                          i
                                          +
                                          1
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       5
                                    
                                 
                                 .
                              
                           
                        Now, by counting the total number of squares on which the theorem is evaluated on a run of the algorithm, which is
                           
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          n
                                          =
                                          1
                                       
                                       
                                          N
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          n
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          n
                                          -
                                          i
                                          +
                                          1
                                       
                                    
                                 
                                 1
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          n
                                          =
                                          1
                                       
                                       
                                          N
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          n
                                       
                                    
                                 
                                 (
                                 n
                                 -
                                 i
                                 +
                                 1
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          n
                                          =
                                          1
                                       
                                       
                                          N
                                       
                                    
                                 
                                 
                                    
                                       n
                                       (
                                       n
                                       +
                                       1
                                       )
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             3
                                          
                                       
                                       +
                                       3
                                       
                                          
                                             N
                                          
                                          
                                             2
                                          
                                       
                                       +
                                       2
                                       N
                                    
                                    
                                       6
                                    
                                 
                                 ,
                              
                           
                        we can conclude that the computational complexity of RPGS is 
                           
                              O
                              (
                              
                                 
                                    N
                                 
                                 
                                    3
                                 
                              
                              )
                           
                        .

In this section we elaborate on a more generic procedure for the application of Theorem 3.1 to approximate the matching distance between two persistence diagrams. In particular, we start by presenting the most general formulation of our approach (Algorithm 2), and then we describe how we implemented its main building blocks to obtain more efficient schemes of computation. Our choices lead to produce Algorithm 4, called a Randomized Bisection Squares Scheme (RBSS). Its computational cost depends on the choice between two possible structures for membership tests, kD-tree and integral image methods, which we describe in detail. Eventually, the cost of RBSS using each of these structures is compared with that of the matching distance.

In what follows, by 
                        
                           A
                           ,
                           
                              
                                 A
                              
                              
                                 ′
                              
                           
                           ,
                           H
                           ,
                           h
                           ,
                           U
                           ,
                           V
                           ,
                           Q
                        
                      we denote the same concepts as in the previous Section 4.


                        
                           Algorithm 2
                           DissimilarityScheme (
                                 
                                    A
                                    ,
                                    
                                       
                                          A
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    R
                                    ,
                                    S
                                    ,
                                    IQS
                                    ,
                                    CIR
                                 
                              ) 
                                 
                                    
                                       
                                       
                                          
                                             
                                                1: Input: 
                                                
                                                   
                                                      A
                                                      ,
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                 – lists of proper points; R – number of outer squares; S – number of inner squares; IQS – structure used to store points and make queries; CIR – structure used to choose the side length and the center of each square
                                          
                                          
                                             
                                                2: 
                                                   
                                                      r
                                                      ⇐
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      ⇐
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      ⇐
                                                      0
                                                   
                                                
                                             
                                          
                                          
                                             
                                                3: 
                                                   
                                                      H
                                                      ⇐
                                                      A
                                                      ∪
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                4: 
                                                   
                                                      Q
                                                      ⇐
                                                      IQS
                                                      (
                                                      H
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             
                                                5: for 
                                                
                                                
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                 
                                                to 
                                                R 
                                                do
                                             
                                          
                                          
                                             
                                                6: 
                                                
                                                
                                                   
                                                      p
                                                      ⇐
                                                      (
                                                      CIR
                                                      (
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            min
                                                         
                                                      
                                                      (
                                                      H
                                                      )
                                                      ,
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            max
                                                         
                                                      
                                                      (
                                                      H
                                                      )
                                                      )
                                                      ,
                                                      CIR
                                                      (
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            min
                                                         
                                                      
                                                      (
                                                      H
                                                      )
                                                      ,
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            max
                                                         
                                                      
                                                      (
                                                      H
                                                      )
                                                      )
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             
                                                7: 
                                                
                                                
                                                   
                                                      d
                                                      ⇐
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            y
                                                         
                                                      
                                                      -
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            x
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                8: 
                                                
                                                if 
                                                
                                                
                                                   
                                                      d
                                                      >
                                                      c
                                                      
                                                      *
                                                      
                                                      (
                                                      V
                                                      -
                                                      U
                                                      )
                                                   
                                                 
                                                then
                                             
                                          
                                          
                                             
                                                9: 
                                                
                                                
                                                
                                                   
                                                      δ
                                                      ⇐
                                                      CIR
                                                      (
                                                      0
                                                      ,
                                                      d
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             10: 
                                                
                                                for 
                                                
                                                
                                                   
                                                      j
                                                      =
                                                      1
                                                   
                                                 
                                                to 
                                                S
                                                
                                                do
                                             
                                          
                                          
                                             11: 
                                                
                                                
                                                   
                                                      η
                                                      ⇐
                                                      CIR
                                                      (
                                                      0
                                                      ,
                                                      δ
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             12: 
                                                
                                                if 
                                                
                                                   
                                                      #
                                                      (
                                                      
                                                         
                                                            Q
                                                         
                                                         
                                                            η
                                                         
                                                      
                                                      (
                                                      p
                                                      )
                                                      ,
                                                      A
                                                      )
                                                      -
                                                      #
                                                      (
                                                      
                                                         
                                                            Q
                                                         
                                                         
                                                            δ
                                                         
                                                      
                                                      (
                                                      p
                                                      )
                                                      ,
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                      >
                                                      0
                                                   
                                                 
                                                then
                                             
                                          
                                          
                                             13: 
                                                
                                                
                                                
                                                   
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      ⇐
                                                      δ
                                                      -
                                                      η
                                                   
                                                
                                             
                                          
                                          
                                             14: 
                                                
                                                end 
                                                
                                                if
                                             
                                          
                                          
                                             15: 
                                                
                                                if 
                                                
                                                
                                                   
                                                      #
                                                      (
                                                      
                                                         
                                                            Q
                                                         
                                                         
                                                            η
                                                         
                                                      
                                                      (
                                                      p
                                                      )
                                                      ,
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                      -
                                                      #
                                                      (
                                                      
                                                         
                                                            Q
                                                         
                                                         
                                                            δ
                                                         
                                                      
                                                      (
                                                      p
                                                      )
                                                      ,
                                                      A
                                                      )
                                                      >
                                                      0
                                                   
                                                 
                                                then
                                             
                                          
                                          
                                             16: 
                                                
                                                
                                                
                                                
                                                   
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      ⇐
                                                      δ
                                                      -
                                                      η
                                                   
                                                
                                             
                                          
                                          
                                             17: 
                                                
                                                end 
                                                
                                                if
                                             
                                          
                                          
                                             18: 
                                                
                                                
                                                   
                                                      r
                                                      ⇐
                                                      max
                                                      (
                                                      r
                                                      ,
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             19: 
                                                
                                                end 
                                                
                                                for
                                             
                                          
                                          
                                             20: 
                                                end 
                                                
                                                if
                                             
                                          
                                          
                                             21: end for
                                             
                                          
                                          
                                             22: return 
                                                
                                                r
                                             
                                          
                                       
                                    
                                 
                              
                           


                        Algorithm 2 shows the skeleton of the most general scheme.

The overall idea can be sketched as follows. We first select R random points in 
                           
                              Q
                              ∩
                              
                                 
                                    Δ
                                 
                                 
                                    +
                                 
                              
                           
                         (first for loop, lines 5–6). For each such point p, we build a square 
                           
                              
                                 
                                    K
                                 
                                 
                                    p
                                 
                              
                              ⊂
                              
                                 
                                    Δ
                                 
                                 
                                    +
                                 
                              
                           
                         (“outer” square), centered at p (first if-then construct, lines 8–9). Then S squares (“inner” squares), concentric with 
                           
                              
                                 
                                    K
                                 
                                 
                                    p
                                 
                              
                           
                        , say 
                           
                              
                                 
                                    L
                                 
                                 
                                    1
                                 
                                 
                                    p
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    L
                                 
                                 
                                    S
                                 
                                 
                                    p
                                 
                              
                           
                        , are taken inside 
                           
                              
                                 
                                    K
                                 
                                 
                                    p
                                 
                              
                           
                         (second for loop, lines 10–11). Finally, we evaluate Theorem 3.1 on the square 
                           
                              
                                 
                                    K
                                 
                                 
                                    p
                                 
                              
                           
                         compared with 
                           
                              
                                 
                                    L
                                 
                                 
                                    j
                                 
                                 
                                    p
                                 
                              
                              ,
                              j
                              =
                              1
                              ,
                              …
                              ,
                              S
                           
                         (lines 12–17). Algorithm 2 returns the maximum value r verifying our theorem.

Before going on, let us first disambiguate the pseudo-code and explain the followings key points:
                           
                              •
                              Line 2 initializes return values of Theorem 3.1. In particular r stores the highest lower bound for the matching distance, while 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             1
                                          
                                       
                                    
                                  and 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             2
                                          
                                       
                                    
                                  memorize the temporary values related to the two possible theorem applications (lines 12 and 15);

Line 4 initializes the structure used to make membership tests and to count the number of proper points of a given set (A or 
                                    
                                       
                                          
                                             A
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 ) belonging to a given squared area (
                                    
                                       IQS
                                       (
                                       H
                                       )
                                    
                                  stands for “Initialize Query Structure on the set H”);

The value c in Line 8, which is a scalar in the interval 
                                    
                                       ]
                                       0
                                       ,
                                       m
                                       [
                                       ⊂
                                       R
                                    
                                 , with m arbitrarily small, represents the discrete step we use in our measurement. Moreover the whole expression stands for “Take p only if it is over the main diagonal by at least c times V−U”;

The expression 
                                    
                                       CIR
                                       (
                                       m
                                       ,
                                       M
                                       )
                                    
                                  (that is, “Choose In Range 
                                 
                                    
                                       m
                                       …
                                       M
                                    
                                 
                                 ”) in lines 6, 9 and 11 denotes the choice of a value inside the interval 
                                    
                                       [
                                       m
                                       ,
                                       M
                                       ]
                                       ⊂
                                       R
                                    
                                 .

A first formulation of the overall computational complexity C of Algorithm 2 is
                           
                              (5.1)
                              
                                 C
                                 (
                                 h
                                 ,
                                 R
                                 ,
                                 S
                                 )
                                 =
                                 
                                    
                                       I
                                    
                                    
                                       Q
                                    
                                 
                                 (
                                 h
                                 )
                                 +
                                 
                                    
                                       E
                                    
                                    
                                       out
                                    
                                 
                                 (
                                 R
                                 )
                                 ·
                                 
                                    
                                       E
                                    
                                    
                                       int
                                    
                                 
                                 (
                                 S
                                 )
                                 ·
                                 
                                    
                                       E
                                    
                                    
                                       Q
                                    
                                 
                                 (
                                 h
                                 )
                                 ,
                              
                           
                        with 
                           
                              
                                 
                                    I
                                 
                                 
                                    Q
                                 
                              
                              (
                              h
                              )
                           
                         the cost of building a structure to make membership tests, 
                           
                              
                                 
                                    E
                                 
                                 
                                    out
                                 
                              
                              (
                              R
                              )
                           
                         the cost of evaluating R outer squares, 
                           
                              
                                 
                                    E
                                 
                                 
                                    int
                                 
                              
                              (
                              S
                              )
                           
                         the cost of evaluating S inner squares, and 
                           
                              
                                 
                                    E
                                 
                                 
                                    Q
                                 
                              
                              (
                              h
                              )
                           
                         the cost of executing a query on such a structure.

In what follows we discuss in detail how we implemented Algorithm 2 to optimize each computational cost in (5.1). Our procedure generates a Randomized Bisection Squares Scheme (RBSS) whose pseudo-code is shown in Algorithm 4.

The first block we explain is the one which realizes the search of the pair of squares (inner and outer) optimizing the matching distance estimate. Let us start with the following remark:
                           Remark 5.1
                           Assume that the side length 
                                 
                                    2
                                    δ
                                 
                               and the center p of an outer square are fixed. If Theorem 3.1 holds for this square compared with some inner square, then there is only one optimal side length of the inner square such that 
                                 
                                    ε
                                 
                               (semi-difference of square’s sides) is maximal and 
                                 
                                    #
                                    (
                                    
                                       
                                          Q
                                       
                                       
                                          δ
                                          -
                                          ε
                                       
                                    
                                    (
                                    p
                                    )
                                    ,
                                    A
                                    )
                                    -
                                    #
                                    (
                                    
                                       
                                          Q
                                       
                                       
                                          δ
                                       
                                    
                                    (
                                    p
                                    )
                                    ,
                                    
                                       
                                          A
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    >
                                    0
                                 
                               (Theorem 3.1 holds). This is a straightforward consequence of the monotonicity of 
                                 
                                    #
                                    (
                                    
                                       
                                          Q
                                       
                                       
                                          δ
                                          -
                                          ε
                                       
                                    
                                    (
                                    p
                                    )
                                    ,
                                    A
                                    )
                                    -
                                    #
                                    (
                                    
                                       
                                          Q
                                       
                                       
                                          δ
                                       
                                    
                                    (
                                    p
                                    )
                                    ,
                                    
                                       
                                          A
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                 
                               with respect to 
                                 
                                    ε
                                 
                              .

We can exploit information from Remark 5.1 to formulate Algorithm 3, which finds the optimal length for an inner square’s side with a fixed outer square. One can use the bisection method [29] to find the maximal difference in the square’s side length up to a given error 
                           
                              τ
                           
                        . Such 
                           
                              τ
                           
                         value depends on S with regard to the number of steps of the algorithm, and on a real interval to calculate the effective value. Without further constraints, the best choice of 
                           
                              τ
                           
                         is 
                           
                              τ
                              =
                              
                                 
                                    δ
                                    -
                                    η
                                 
                                 
                                    S
                                 
                              
                           
                        .
                           Algorithm 3
                           BisectionSquare (
                                 
                                    p
                                    ,
                                    δ
                                    ,
                                    η
                                    ,
                                    τ
                                    ,
                                    A
                                    ,
                                    
                                       
                                          A
                                       
                                       
                                          ′
                                       
                                    
                                 
                              ) 
                                 
                                    
                                       
                                       
                                          
                                             1: Input: p – center of square; 
                                                   
                                                      δ
                                                      ,
                                                      η
                                                   
                                                 – range for bisection search; 
                                                   
                                                      τ
                                                   
                                                 – desired tolerance; 
                                                   
                                                      A
                                                      ,
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                 – lists of proper points
                                          
                                          
                                             2: Set 
                                                   
                                                      τ
                                                   
                                                 to be the tolerance for the bisection method
                                          
                                          
                                             3: Use bisection method to find minimal 
                                                   
                                                      γ
                                                   
                                                 s.t. 
                                                   
                                                      #
                                                      (
                                                      
                                                         
                                                            Q
                                                         
                                                         
                                                            γ
                                                         
                                                      
                                                      (
                                                      p
                                                      )
                                                      ,
                                                      A
                                                      )
                                                      -
                                                      #
                                                      (
                                                      
                                                         
                                                            Q
                                                         
                                                         
                                                            δ
                                                         
                                                      
                                                      (
                                                      p
                                                      )
                                                      ,
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                      >
                                                      0
                                                   
                                                 holds
                                          
                                          
                                             4: return 
                                                
                                                   
                                                      δ
                                                      -
                                                      γ
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

The invocation of a bisection scheme to find the optimal pair of outer/inner squares (lines 11–14 of Algorithm 4) improves the overall computational complexity (5.1) reducing the cost of 
                           
                              
                                 
                                    E
                                 
                                 
                                    int
                                 
                              
                           
                         from 
                           
                              O
                              (
                              S
                              )
                           
                         down to 
                           
                              O
                              (
                              
                                 
                                    log
                                 
                                 
                                    2
                                 
                              
                              S
                              )
                           
                         (which means that we are evaluating 
                           
                              O
                              (
                              S
                              )
                           
                         inner squares in 
                           
                              O
                              (
                              
                                 
                                    log
                                 
                                 
                                    2
                                 
                              
                              S
                              )
                           
                         steps).

It is worth mentioning that this method can be easily transposed to the opposite situation, when the inner square is fixed and the outer one may vary. Accordingly, we can provide a scheme which does not degrade the overall complexity and use both these approaches, fixing in turn the outer and the inner square. For the sake of simplicity we provide here only the method for the inner square. However, in the experiments we use both methods.

The procedure to choose outer squares is quite different from the bisection scheme we have just presented. Indeed, the only constraint we have to satisfy in choosing outer squares is that their bottom-right vertex must be contained in 
                           
                              
                                 
                                    Δ
                                 
                                 
                                    +
                                 
                              
                           
                        . This requirement directly contributes to the computational complexity, which cannot be better than linear in the number of outer squares we want to consider, meaning that 
                           
                              
                                 
                                    E
                                 
                                 
                                    out
                                 
                              
                              (
                              R
                              )
                              =
                              O
                              (
                              R
                              )
                           
                        .

In Algorithm 4 the choice of outer squares is determined by selecting squares’ centers (line 6 in the for loop). We observe that a first optimization of our scheme can be obtained by taking only squares containing at least one proper point from 
                           
                              A
                              ∪
                              
                                 
                                    A
                                 
                                 
                                    ′
                                 
                              
                           
                        : We show in Section 7 how we achieve this.

The optimal estimates for inner and outer squares are computed separately as explained in the previous subsection. We use the procedure 
                           
                              Random
                              (
                              b
                              ,
                              e
                              )
                           
                         (lines 9–10 of Algorithm 4) which returns random numbers from the interval 
                           
                              [
                              b
                              ,
                              e
                              ]
                           
                        . For a point 
                           
                              p
                              =
                              (
                              
                                 
                                    p
                                 
                                 
                                    x
                                 
                              
                              ,
                              
                                 
                                    p
                                 
                                 
                                    y
                                 
                              
                              )
                           
                        , the measure of inner squares’ sides centered at p is set randomly up to 30% of the maximal possible length, which is 
                           
                              d
                              =
                              
                                 
                                    p
                                 
                                 
                                    y
                                 
                              
                              -
                              
                                 
                                    p
                                 
                                 
                                    x
                                 
                              
                           
                        . The measure of the outer squares’ sides length is set also randomly to at least 70% of d.
                           Algorithm 4
                           RBSS (
                                 
                                    A
                                    ,
                                    
                                       
                                          A
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    R
                                    ,
                                    IQS
                                 
                              ) 
                                 
                                    
                                       
                                       
                                          
                                             
                                                1: Input: 
                                                
                                                   
                                                      A
                                                      ,
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                 – lists of proper points; R – number of outer squares; IQS – structure used to store points and make queries
                                          
                                          
                                             
                                                2:
                                                   
                                                      r
                                                      ⇐
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      ⇐
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      ⇐
                                                      0
                                                   
                                                
                                             
                                          
                                          
                                             
                                                3: 
                                                   
                                                      H
                                                      ⇐
                                                      A
                                                      ∪
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                4:
                                                   
                                                      Q
                                                      ⇐
                                                      IQS
                                                      (
                                                      H
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             
                                                5: for 
                                                
                                                
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                 
                                                to 
                                                R 
                                                do
                                             
                                          
                                          
                                             
                                                6: 
                                                
                                                   
                                                      p
                                                      ⇐
                                                      (
                                                      Random
                                                      (
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            min
                                                         
                                                      
                                                      (
                                                      H
                                                      )
                                                      ,
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            max
                                                         
                                                      
                                                      (
                                                      H
                                                      )
                                                      )
                                                      ,
                                                      Random
                                                      (
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            min
                                                         
                                                      
                                                      (
                                                      H
                                                      )
                                                      ,
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            max
                                                         
                                                      
                                                      (
                                                      H
                                                      )
                                                      )
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             
                                                7: 
                                                
                                                   
                                                      d
                                                      ⇐
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            y
                                                         
                                                      
                                                      -
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            x
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                8: 
                                                if 
                                                
                                                
                                                   
                                                      d
                                                      >
                                                      c
                                                      *
                                                      (
                                                      V
                                                      -
                                                      U
                                                      )
                                                   
                                                
                                                
                                                then
                                             
                                          
                                          
                                             
                                                9: 
                                                
                                                
                                                   
                                                      δ
                                                      ⇐
                                                      d
                                                      ·
                                                      Random
                                                      (
                                                      0.7
                                                      ,
                                                      1
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             10: 
                                                
                                                   
                                                      η
                                                      ⇐
                                                      d
                                                      ·
                                                      Random
                                                      (
                                                      0
                                                      ,
                                                      0.3
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             11: 
                                                
                                                   
                                                      τ
                                                      ⇐
                                                      
                                                         
                                                            δ
                                                            -
                                                            η
                                                         
                                                         
                                                            S
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             12: 
                                                
                                                   
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      ⇐
                                                      BisectionSquare
                                                      (
                                                      p
                                                      ,
                                                      δ
                                                      ,
                                                      η
                                                      ,
                                                      τ
                                                      ,
                                                      A
                                                      ,
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             13: 
                                                
                                                   
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      ⇐
                                                      BisectionSquare
                                                      (
                                                      p
                                                      ,
                                                      δ
                                                      ,
                                                      η
                                                      ,
                                                      τ
                                                      ,
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      A
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             14: 
                                                
                                                   
                                                      r
                                                      ⇐
                                                      max
                                                      (
                                                      r
                                                      ,
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             15: 
                                                end
                                                
                                                if
                                             
                                          
                                          
                                             16: end 
                                                
                                                for
                                             
                                          
                                          
                                             17: return 
                                                r
                                             
                                          
                                       
                                    
                                 
                              
                           

The final computational cost of RBSS depends on how we implement line 4 of Algorithm 4. We propose two different structures to make membership tests: kD-tree and integral image methods.

We need a fast method to retrieve the number of points in a given square of 
                           
                              
                                 
                                    Δ
                                 
                                 
                                    +
                                 
                              
                           
                        . Using kD-trees [1] is probably one of the best possible choices. Indeed, it is linear in terms of memory usage (with respect to the number of points) and the kD-tree construction does not increase the overall computational complexity, being 
                           
                              O
                              (
                              y
                              
                                 
                                    log
                                 
                                 
                                    2
                                 
                              
                              y
                              )
                           
                        , with y the cardinality of the set on which the kD-tree is built. In our context two kD-trees are needed, one for the points of A and one for the points of 
                           
                              
                                 
                                    A
                                 
                                 
                                    ′
                                 
                              
                           
                        . Therefore, by using the kD-tree structure in Algorithm 4 we can update the overall complexity (5.1) as
                           
                              (5.2)
                              
                                 C
                                 (
                                 h
                                 ,
                                 S
                                 ,
                                 R
                                 )
                                 =
                                 O
                                 (
                                 h
                                 
                                    
                                       log
                                    
                                    
                                       2
                                    
                                 
                                 h
                                 )
                                 +
                                 O
                                 (
                                 R
                                 )
                                 ·
                                 O
                                 (
                                 
                                    
                                       log
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 S
                                 )
                                 )
                                 ·
                                 O
                                 (
                                 h
                                 )
                                 ,
                              
                           
                        with 
                           
                              O
                              (
                              h
                              )
                           
                         the cost of executing a query on a kD-tree.

Instead of using kD-trees, we may retrieve the number of points in R squares by using the integral image (or summed area) method [16,28]. Integral image algorithm uses pre-computed arrays to quickly retrieve the sum of values in rectangular subsets of a given image. In our case we consider squares instead of rectangles. Such an approach requires that the sides of the considered squares lie on a known grid. A further restriction is that vertices have integer coordinates, so we can use a two dimensional array.

In order to use the integral image method, we divide the square Q by the smallest possible grid. The number of the grid cells is set to 
                           
                              
                                 
                                    λ
                                 
                                 
                                    2
                                 
                              
                           
                        . It is then possible to count the number of points in the considered squares using this method. Preprocessing for the integral image is linear in the number of cells, and the cost of executing a query (retrieving the number of points in the square) is 
                           
                              O
                              (
                              1
                              )
                           
                        .

Using this approach the computational complexity of RBSS turns out to be
                           
                              (5.3)
                              
                                 C
                                 (
                                 λ
                                 ,
                                 R
                                 )
                                 =
                                 O
                                 (
                                 
                                    
                                       λ
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 +
                                 O
                                 (
                                 R
                                 )
                                 ·
                                 O
                                 (
                                 
                                    
                                       log
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 λ
                                 )
                                 )
                                 ·
                                 O
                                 (
                                 1
                                 )
                              
                           
                        We remark that, when evaluating the computational complexity, the parameter 
                           
                              λ
                           
                         has an effect on the range of the error 
                           
                              τ
                           
                        . More precisely, by choosing the integral image scheme, the best possible choice of 
                           
                              τ
                           
                         is 
                           
                              τ
                              =
                              
                                 
                                    V
                                    -
                                    U
                                 
                                 
                                    λ
                                 
                              
                           
                        .

We conclude this section with some final remarks on the computational costs in (5.2) and (5.3), by discussing how to keep them lower than the cost 
                           
                              O
                              (
                              
                                 
                                    h
                                 
                                 
                                    2.5
                                 
                              
                              )
                           
                         of the matching distance.

Let us begin by considering the computational complexity 
                           
                              C
                              (
                              h
                              ,
                              S
                              ,
                              R
                              )
                           
                         of our algorithm with the usage of kD-trees, see (5.2). Keeping it not grater than 
                           
                              O
                              (
                              
                                 
                                    h
                                 
                                 
                                    2.5
                                 
                              
                              )
                           
                         requires that
                           
                              
                                 O
                                 (
                                 R
                                 )
                                 ·
                                 O
                                 (
                                 
                                    
                                       log
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 S
                                 )
                                 )
                                 ·
                                 O
                                 (
                                 h
                                 )
                                 ⩽
                                 O
                                 (
                                 
                                    
                                       h
                                    
                                    
                                       2.5
                                    
                                 
                                 )
                                 ,
                              
                           
                        or equivalently
                           
                              
                                 O
                                 (
                                 R
                                 )
                                 ·
                                 O
                                 (
                                 
                                    
                                       log
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 S
                                 )
                                 )
                                 ⩽
                                 O
                                 (
                                 
                                    
                                       h
                                    
                                    
                                       1.5
                                    
                                 
                                 )
                                 .
                              
                           
                        From the above relation we can deduce that, once we fix the number S of inner squares, the number R of outer squares can range between 1 and 
                           
                              
                                 
                                    h
                                 
                                 
                                    1.5
                                 
                              
                           
                        ; while, fixing the number R of outer squares, the number S of inner squares can range between 1 and 
                           
                              
                                 
                                    2
                                 
                                 
                                    
                                       
                                          h
                                       
                                       
                                          1.5
                                       
                                    
                                 
                              
                           
                        .

Let us now analyze the computational complexity 
                           
                              C
                              (
                              λ
                              ,
                              R
                              )
                           
                         due to the usage of the integral image approach, see (5.3). In order to keep it asymptotically lower than 
                           
                              O
                              (
                              
                                 
                                    h
                                 
                                 
                                    2.5
                                 
                              
                              )
                           
                        , the following inequalities have to be verified:
                           
                              (5.4)
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   O
                                                   (
                                                   
                                                      
                                                         λ
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   )
                                                   ⩽
                                                   O
                                                   (
                                                   
                                                      
                                                         h
                                                      
                                                      
                                                         2.5
                                                      
                                                   
                                                   )
                                                
                                             
                                             
                                                
                                                   O
                                                   (
                                                   R
                                                   )
                                                   ·
                                                   O
                                                   (
                                                   
                                                      
                                                         log
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   (
                                                   λ
                                                   )
                                                   )
                                                   ⩽
                                                   O
                                                   (
                                                   
                                                      
                                                         h
                                                      
                                                      
                                                         2.5
                                                      
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        These reasonings lead us to conclude that the optimal values for 
                           
                              λ
                           
                        , i.e. the number of rows and columns in the grid, would be in the range between 2 and 
                           
                              
                                 
                                    h
                                 
                                 
                                    1.25
                                 
                              
                           
                        , while for R between 
                           
                              
                                 
                                    
                                       
                                          h
                                       
                                       
                                          2.5
                                       
                                    
                                 
                                 
                                    
                                       
                                          log
                                       
                                       
                                          2
                                       
                                    
                                    
                                       
                                          h
                                       
                                       
                                          1.25
                                       
                                    
                                 
                              
                           
                         and 
                           
                              
                                 
                                    h
                                 
                                 
                                    2.5
                                 
                              
                           
                        .

The previous considerations about 
                           
                              S
                              ,
                              λ
                           
                         and R are summarized in Table 1
                        , assuming that the minimum possible value for R to be taken is 1.

To conclude we observe that, as in the case of RGPS, we can ensure that the computational complexity of RBSS is smaller than the complexity of classical computation of matching distance. We can do this simply by forcing the parameter R to be smaller than either 
                           
                              
                                 
                                    h
                                 
                                 
                                    1.5
                                 
                              
                           
                         or 
                           
                              
                                 
                                    h
                                 
                                 
                                    2.5
                                 
                              
                           
                        , according to the usage of kD-trees or the integral image scheme. Depending on the data, varying the ratio between S and R in the former case, as well as the ratio between 
                           
                              λ
                           
                         and R in the latter one, would give a more accurate estimate for the matching distance computation.

Our goal is to validate the theoretical framework introduced in the previous Sections 4 and 5. Experiments on 3D-models represented by triangle meshes will give evidence that our algorithms are able to reduce the computational complexity in defining a matching distance-based metric over a given database, preserving the quality of results in terms of retrieval performance.

To test the proposed framework we considered two datasets of 3D-surface mesh models. As a first one, we opted for the Non-Rigid World Benchmark [6] (from now on Db1). This database contains 148 three-dimensional models such as cats, dogs, wolves, horses, lions and gorillas, in a variety of poses for non-rigid, shape similarity experiments. Fig. 6
                         shows five models belonging to the “cat” class (first row), together with some representatives for other classes in the database (second row). The second database (from now on Db2) has been introduced in [3]. It is a collection of 228 3D-surface mesh models grouped in 12 classes, each one in turn composed by 19 elements: A null model (cat0, david0, dog0,…, victoria0, wolf0) from the Non-Rigid World Benchmark, together with 18 deformations given by six non-rigid, possibly non-metric-preserving transformations applied to the null model at three different strength levels. Fig. 7
                         shows some elements for the “centaur” class.

To select the considered filtering functions we followed [3]. In that paper, the authors exploit the modularity of the persistence framework to study under different perspectives the models belonging to the two datasets. Indeed, persistence diagrams inherit their invariance properties (with respect to groups of transformations) directly from the corresponding filtering functions. Therefore, to obtain different invariance properties, it is sufficient to change the filtering function. In particular, the ones chosen in [3] fit the different purposes the two datasets are designed for: Db1 is suited to analyze non-rigid shape similarity, while Db2 has been created to deal with noise and other deformations which do not preserve the metric properties of shapes (e.g. the Riemannian metric).

According to the previous reasonings, for Db1 we considered two filtering functions which are well known to be robust with respect to non-rigid shape changes. The first one, which we denote by 
                           
                              
                                 
                                    φ
                                 
                                 
                                    HK
                                 
                              
                           
                        , is chosen to be the heat kernel signature [7,33], computed using the first 10 eigenfunctions of the Laplace–Beltrami operator and a fixed time t
                        =1000, and the second one, 
                           
                              
                                 
                                    φ
                                 
                                 
                                    G
                                 
                              
                           
                        , the integral geodesic distance [27]. The invariance to scale comes from the a priori normalization of the models.

As for Db2, to define the considered filtering functions we proceeded as follows: For each triangle mesh M of vertices 
                           
                              {
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    P
                                 
                                 
                                    n
                                 
                              
                              }
                           
                        , the center of mass B is computed, and the model is normalized to be contained in a unit sphere. Further, a vector 
                           
                              
                                 
                                    w
                                 
                                 
                                    →
                                 
                              
                           
                         is defined as
                           
                              
                                 
                                    
                                       w
                                    
                                    
                                       →
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             n
                                          
                                       
                                       (
                                       
                                          
                                             P
                                          
                                          
                                             i
                                          
                                       
                                       -
                                       B
                                       )
                                       ‖
                                       
                                          
                                             P
                                          
                                          
                                             i
                                          
                                       
                                       -
                                       B
                                       ‖
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             n
                                          
                                       
                                       ‖
                                       
                                          
                                             P
                                          
                                          
                                             i
                                          
                                       
                                       -
                                       B
                                       
                                          
                                             ‖
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        We can think of the vector 
                           
                              
                                 
                                    w
                                 
                                 
                                    →
                                 
                              
                           
                         as a generalization of the center of mass: Its computation is rotation and translation invariant, so that its relative position with respect to the corresponding triangle mesh does not change when rigid movements are taken into account. Moreover, models in Db2 are generic enough (no point-symmetries occur, etc.) to guarantee that 
                           
                              
                                 
                                    w
                                 
                                 
                                    →
                                 
                              
                           
                         is well-defined and stably oriented for all shapes. Three filtering functions 
                           
                              
                                 
                                    φ
                                 
                                 
                                    L
                                 
                              
                              ,
                              
                                 
                                    φ
                                 
                                 
                                    P
                                 
                              
                              ,
                              
                                 
                                    φ
                                 
                                 
                                    B
                                 
                              
                           
                         are computed on the vertices of 
                           
                              M
                              :
                              
                                 
                                    φ
                                 
                                 
                                    L
                                 
                              
                           
                         is the distance from the line parallel to 
                           
                              
                                 
                                    w
                                 
                                 
                                    →
                                 
                              
                           
                         and passing through the center of mass B, 
                           
                              
                                 
                                    φ
                                 
                                 
                                    P
                                 
                              
                           
                         is the distance from the plane orthogonal to 
                           
                              
                                 
                                    w
                                 
                                 
                                    →
                                 
                              
                           
                         and passing through B, and 
                           
                              
                                 
                                    φ
                                 
                                 
                                    B
                                 
                              
                           
                         is the distance from B (see Fig. 8
                         as an example). The values of 
                           
                              
                                 
                                    φ
                                 
                                 
                                    L
                                 
                              
                              ,
                              
                                 
                                    φ
                                 
                                 
                                    P
                                 
                              
                           
                         and 
                           
                              
                                 
                                    φ
                                 
                                 
                                    B
                                 
                              
                           
                         are then normalized so that they range in the interval 
                           
                              [
                              0
                              ,
                              1
                              ]
                           
                        . These filtering functions are translation and rotation invariant, as well as scale invariant because of a priori normalization of the models.

Suppose to have fixed a database, say Db=
                           
                              {
                              
                                 
                                    M
                                 
                                 
                                    i
                                 
                              
                              }
                           
                        , and a scheme, say Scm. For each corresponding filtering function 
                           
                              φ
                           
                        , we can induce a metric over Db by computing the matching distances 
                           
                              
                                 
                                    d
                                 
                                 
                                    ij
                                 
                                 
                                    φ
                                 
                              
                              =
                              
                                 
                                    d
                                 
                                 
                                    match
                                 
                              
                              (
                              
                                 
                                    D
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    D
                                 
                                 
                                    j
                                 
                              
                              )
                           
                         for every 
                           
                              i
                              ,
                              j
                              =
                              1
                              ,
                              …
                              ,
                              |
                              Db
                              |
                           
                        , with 
                           
                              
                                 
                                    D
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    D
                                 
                                 
                                    j
                                 
                              
                           
                         persistence diagrams associated with 
                           
                              
                                 
                                    M
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    M
                                 
                                 
                                    j
                                 
                              
                           
                        , respectively, and 
                           
                              |
                              Db
                              |
                           
                         the number of models in Db. To approximate such a metric, we apply Scm to get a lower bound for each 
                           
                              
                                 
                                    d
                                 
                                 
                                    ij
                                 
                                 
                                    φ
                                 
                              
                           
                        , say 
                           
                              
                                 
                                    Res
                                 
                                 
                                    ij
                                 
                                 
                                    φ
                                 
                              
                           
                        . This procedure is controlled by a threshold, 
                           
                              
                                 
                                    thresh
                                 
                                 
                                    φ
                                 
                              
                           
                        , obtained as follows: For every class in the database, 4 elements are (randomly) selected, and an average of the matching distances on this small subset is evaluated. The final value of 
                           
                              
                                 
                                    thresh
                                 
                                 
                                    φ
                                 
                              
                           
                         is then the average over all the classes in the database. In this perspective, the value 
                           
                              
                                 
                                    thresh
                                 
                                 
                                    φ
                                 
                              
                           
                         represents the average matching distance between two elements of the same class.

Now, if 
                           
                              
                                 
                                    Res
                                 
                                 
                                    ij
                                 
                                 
                                    φ
                                 
                              
                              >
                              
                                 
                                    thresh
                                 
                                 
                                    φ
                                 
                              
                           
                        , then we can assume that the shapes of 
                           
                              
                                 
                                    M
                                 
                                 
                                    i
                                 
                              
                           
                         and 
                           
                              
                                 
                                    M
                                 
                                 
                                    j
                                 
                              
                           
                         are quite dissimilar (compared with respect to 
                           
                              φ
                           
                        ) and therefore it is sufficient to have just an estimation of 
                           
                              
                                 
                                    d
                                 
                                 
                                    ij
                                 
                                 
                                    φ
                                 
                              
                           
                        : We opted for 
                           
                              (
                              (
                              V
                              -
                              U
                              )
                              /
                              2
                              +
                              
                                 
                                    Res
                                 
                                 
                                    ij
                                 
                                 
                                    φ
                                 
                              
                              )
                              /
                              2
                           
                        , with V and U taken as in Remark 3.2. In plain words, our estimation is the average between the lower bound (according to Theorem 3.1) and the upper bound (according to Remark 3.2) of 
                           
                              
                                 
                                    d
                                 
                                 
                                    ij
                                 
                                 
                                    φ
                                 
                              
                           
                        . If 
                           
                              
                                 
                                    Res
                                 
                                 
                                    ij
                                 
                                 
                                    φ
                                 
                              
                              ⩽
                              
                                 
                                    thresh
                                 
                                 
                                    φ
                                 
                              
                           
                        , then the exact value of 
                           
                              
                                 
                                    d
                                 
                                 
                                    ij
                                 
                                 
                                    φ
                                 
                              
                           
                         is computed. The overall process is described in Algorithm 5.
                           Algorithm 5
                           MetricApprox (
                                 
                                    A
                                    ,
                                    
                                       
                                          A
                                       
                                       
                                          ′
                                       
                                    
                                    ,
                                    Exp
                                    ,
                                    thresh
                                 
                              ) 
                                 
                                    
                                       
                                       
                                          
                                             1: Input: 
                                                
                                                   
                                                      A
                                                      ,
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                 – lists of proper points; Exp – control parameter for the selected scheme; thresh – dissimilarity threshold
                                          
                                          
                                             2: 
                                                   
                                                      Res
                                                      =
                                                      Scm
                                                      (
                                                      A
                                                      ,
                                                      
                                                         
                                                            A
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ,
                                                      Exp
                                                      )
                                                   
                                                 
                                                
                                                %Scm is either RPGS or RBSS
                                             
                                          
                                          
                                             3: if 
                                                
                                                
                                                   
                                                      Res
                                                      >
                                                      thresh
                                                   
                                                
                                             
                                          
                                          
                                             4: 
                                                
                                                   
                                                      Val
                                                      =
                                                      [
                                                      (
                                                      V
                                                      -
                                                      U
                                                      )
                                                      /
                                                      2
                                                      +
                                                      Res
                                                      ]
                                                      /
                                                      2
                                                   
                                                
                                             
                                          
                                          
                                             5: else
                                             
                                          
                                          
                                             6: 
                                                
                                                   
                                                      Val
                                                      =
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            match
                                                         
                                                      
                                                      (
                                                      D
                                                      ,
                                                      
                                                         
                                                            D
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             7: end if
                                             
                                          
                                          
                                             8: return 
                                                Val
                                             
                                          
                                       
                                    
                                 
                              
                           

@&#EXPERIMENTAL RESULTS@&#

Before presenting experimental results, we emphasize that our goal is not to validate the usage of persistence for shape comparison, retrieval or classification. Indeed, there is a wide literature, in part reviewed in Section 1, devoted to this.

Our experiments should be rather interpreted as a way to assess how good our approach is in approximating a (dis) similarity metric based on the exact computation of the matching distance between persistence diagrams. To achieve this, we make use of the so-called precision-recall graph, which is a standard measure to evaluate retrieval systems.

In view of the previous considerations, the point here is to show that the precision-recall graphs obtained by our approximation methods are sufficiently similar to the ones produced by a straightforward application of the persistence framework. Nevertheless, a reader coming from the retrieval domain will probably note that the precision-recall graphs reported in the paper are below the state of the art. This is actually not surprising: Indeed, it is well known that, in order to compare shapes using persistence, good results cannot be achieved by considering one single filtering function, but rather batteries of functions producing in turn collections of descriptors. Thus, for each function we would have a (dis) similarity metric, and all such metrics could be merged a posteriori by taking, e.g., their sum or maximum [11]. Additionally, it is worth noting that the filtering functions used in our experiments can be properly combined within the persistence framework to outperform the retrieval performances of other state-of-the-art methods [3].

As seen in Section 4, the computational complexity of RPGS is a function of the number of iterations N and is shown to be 
                           
                              O
                              (
                              
                                 
                                    N
                                 
                                 
                                    3
                                 
                              
                              )
                           
                        . We want to apply this scheme to pay not more than computing matching distances for all the pairs of persistence diagrams presented in our databases. Indeed, we recall that computing 
                           
                              
                                 
                                    d
                                 
                                 
                                    match
                                 
                              
                           
                         costs 
                           
                              O
                              (
                              
                                 
                                    h
                                 
                                 
                                    2.5
                                 
                              
                              )
                           
                        , where h is the number of proper points in each comparison. We set 
                           
                              N
                              =
                              
                                 
                                    h
                                 
                                 
                                    Exp
                                 
                              
                           
                        , with Exp a parameter we make vary in such a way that the inequality 
                           
                              Exp
                              ⩽
                              
                                 
                                    2.5
                                 
                                 
                                    3
                                 
                              
                           
                         is verified. With this choice, we can ensure that RPGS has a computational complexity asymptotically lower than the one of the matching distance.


                        Tables 2 and 3
                        
                         show how we applied RPGS to the two considered datasets.

In the first column of Table 2 (Table 3, respectively), from top to bottom, we display the average precision/recall (PR) graphs induced by 
                           
                              
                                 
                                    φ
                                 
                                 
                                    HK
                                 
                              
                           
                        , and 
                           
                              
                                 
                                    φ
                                 
                                 
                                    G
                                 
                              
                           
                         (
                           
                              
                                 
                                    φ
                                 
                                 
                                    L
                                 
                              
                              ,
                              
                                 
                                    φ
                                 
                                 
                                    P
                                 
                              
                           
                         and 
                           
                              
                                 
                                    φ
                                 
                                 
                                    B
                                 
                              
                           
                        ), respectively, when considering the computation of the matching distances on the whole database Db1 (Db2, respectively) and on some subparts of it after running RPGS, with Exp set at different values. As can be seen, our approximation strategy does not affect so much the PR performances even in the displayed worst cases.


                        Table 2 (Table 3, respectively), second column, gives a more general overview of the obtained results.

From top to bottom, each graph shows the reduction in the computational costs – in terms of the percentage of computed matching distances used to build the metric approximations – and an evaluation of the PR performances according to the chosen values of Exp, for the filtering functions 
                           
                              
                                 
                                    φ
                                 
                                 
                                    HK
                                 
                              
                           
                         and 
                           
                              
                                 
                                    φ
                                 
                                 
                                    G
                                 
                              
                           
                         (
                           
                              
                                 
                                    φ
                                 
                                 
                                    L
                                 
                              
                              ,
                              
                                 
                                    φ
                                 
                                 
                                    P
                                 
                              
                           
                         and 
                           
                              
                                 
                                    φ
                                 
                                 
                                    B
                                 
                              
                           
                        ), respectively. In particular, for a given value of Exp the evaluation of results is expressed as the average 
                           
                              
                                 
                                    L
                                 
                                 
                                    1
                                 
                              
                           
                        -distance between the PR graph associated to that value Exp and the one obtained by computing all the matching distances between the elements in the database. The “critical Exp” depicted in all plots represents the value of Exp for which the cost of applying RPGS equals the one of computing the matching distance between two persistence diagrams.

As our plots show, it is possible to greatly reduce the computational costs by approximating the matching distance-based metric over the database, obtaining PR graphs which are quite close to the best possible.

We performed similar experiments for RBSS. Given two lists A and 
                           
                              
                                 
                                    A
                                 
                                 
                                    ′
                                 
                              
                           
                         of proper points, we considered the integral image method to make membership tests (see Algorithm 4, line 4). As for the choice of outer squares, we optimized Algorithm 4 by replacing Line 5 with the following:
                           
                              
                                 p
                                 ⇐
                                 
                                 random point from
                                 
                                 A
                                 ∪
                                 
                                    
                                       A
                                    
                                    
                                       ′
                                    
                                 
                                 .
                              
                           
                        In other words, outer squares are randomly chosen in such a way that they are centered at proper points.

Having made use of the integral image method, by (5.3), the computational complexity of RBSS can be expressed as a function of R, i.e. the number of outer squares, and 
                           
                              λ
                           
                        , being 
                           
                              
                                 
                                    λ
                                 
                                 
                                    2
                                 
                              
                           
                         the number of cells in the finest possible grid covering the square Q. Then, we fixed the value of 
                           
                              λ
                           
                         in such a way that the number of cells in the grid and belonging to 
                           
                              
                                 
                                    Δ
                                 
                                 
                                    +
                                 
                              
                           
                         is approximately equal to the number h of points of 
                           
                              A
                              ∪
                              
                                 
                                    A
                                 
                                 
                                    ′
                                 
                              
                           
                        , that is, 
                           
                              λ
                              =
                              
                                 
                                    2
                                    h
                                 
                              
                           
                        .

Finally, we set c (Algorithm 4, line 8) accordingly.

Similarly to the case of RPGS, we want to apply RBSS to have an estimation from the bottom of 
                           
                              
                                 
                                    d
                                 
                                 
                                    match
                                 
                              
                           
                        , possibly paying less than the computational cost of the matching distance. To achieve this, by (5.4), we have to assure that 
                           
                              O
                              (
                              R
                              )
                              ·
                              O
                              (
                              
                                 
                                    log
                                 
                                 
                                    2
                                 
                              
                              (
                              λ
                              )
                              )
                              ⩽
                              O
                              (
                              
                                 
                                    h
                                 
                                 
                                    2.5
                                 
                              
                              )
                           
                        . Indeed, having fixed 
                           
                              λ
                           
                         in such a way that the first inequality in (5.4) is verified, it is sufficient to require that 
                           
                              R
                              ⩽
                              
                                 
                                    
                                       
                                          h
                                       
                                       
                                          2.5
                                       
                                    
                                 
                                 
                                    
                                       
                                          log
                                       
                                       
                                          2
                                       
                                    
                                    (
                                    
                                       
                                          2
                                          h
                                       
                                    
                                    )
                                 
                              
                           
                        .

In our experiments we set 
                           
                              R
                              =
                              
                                 
                                    
                                       
                                          h
                                       
                                       
                                          Exp
                                       
                                    
                                 
                                 
                                    
                                       
                                          log
                                       
                                       
                                          2
                                       
                                    
                                    (
                                    
                                       
                                          2
                                          h
                                       
                                    
                                    )
                                 
                              
                           
                        , letting Exp range from 1 (i.e., the number of outer squares is proportional to the number of the considered proper points) to 2.25. We observe that 
                           
                              Exp
                              =
                              2.5
                           
                         correspond to a limit situation, in which the computational cost of RBSS approaches the one of computing 
                           
                              
                                 
                                    d
                                 
                                 
                                    match
                                 
                              
                           
                        .


                        Tables 4 and 5
                        
                         show our results. We remark that, due to the intrinsic randomness of RBSS, we repeated the same experiments more than once, observing however almost identical performances. Nevertheless, we decided to present here experimental results representing the average of all considered experimental instances.

In the first column of Table 4 (Table 5, respectively), from top to bottom, we display the average PR graphs induced by 
                           
                              
                                 
                                    φ
                                 
                                 
                                    HK
                                 
                              
                           
                        , and 
                           
                              
                                 
                                    φ
                                 
                                 
                                    G
                                 
                              
                           
                         (
                           
                              
                                 
                                    φ
                                 
                                 
                                    L
                                 
                              
                              ,
                              
                                 
                                    φ
                                 
                                 
                                    P
                                 
                              
                           
                         and 
                           
                              
                                 
                                    φ
                                 
                                 
                                    B
                                 
                              
                           
                        ), respectively, when considering the computation of the matching distances on the whole database Db1 (Db2, respectively) and on some subparts of it after running RBSS, with Exp set at different values. Even for RBSS, our approximation strategy produces good results in terms of PR performances, if compared with the ones corresponding to the metrics induced by 
                           
                              
                                 
                                    d
                                 
                                 
                                    match
                                 
                              
                           
                        .


                        Table 4 (Table 5, respectively), second column, analyzes the obtained results under a different viewpoint. From top to bottom, each graph shows the reduction in the computational costs – in terms of the percentage of computed matching distances used to build the metric approximations – and an evaluation of the PR performances according to the chosen values of Exp, for the filtering functions 
                           
                              
                                 
                                    φ
                                 
                                 
                                    HK
                                 
                              
                           
                         and 
                           
                              
                                 
                                    φ
                                 
                                 
                                    G
                                 
                              
                           
                         (
                           
                              
                                 
                                    φ
                                 
                                 
                                    L
                                 
                              
                              ,
                              
                                 
                                    φ
                                 
                                 
                                    P
                                 
                              
                           
                         and 
                           
                              
                                 
                                    φ
                                 
                                 
                                    B
                                 
                              
                           
                        ), respectively. In particular, for a given value of Exp the evaluation of results is expressed as the average 
                           
                              
                                 
                                    L
                                 
                                 
                                    1
                                 
                              
                           
                        -distance between the PR graph associated to that value Exp and the one obtained by computing all the matching distances between the elements in the database.

Somewhat surprisingly, according to the plots in Tables 4 and 5, a decreasing in the number of the actually computed matching distances corresponds in general to an increasing in the quality of results (in terms of retrieval performance). This is actually shown by PR graphs we obtained by computing 
                           
                              
                                 
                                    d
                                 
                                 
                                    match
                                 
                              
                           
                         only on a subpart of the considered datasets, as well as by the 
                           
                              
                                 
                                    L
                                 
                                 
                                    1
                                 
                              
                           
                        -distance between these PR graphs and the ones obtained by computing all possible matching distances.

Having such experimental evidence in a hand, we may argue that RBSS can achieve high accuracy level in approximating the matching distance. On the other hand, we do not have any theoretical results confirming our intuition. This is certainly an open problem we plan to address in the next future.

Moreover, it would be interesting to explore the capability of RBSS in other theoretical settings, e.g., selecting the outer squares according to some probability distribution built on the mutual positions of the considered proper points.

@&#DISCUSSION@&#

This paper is the extended version of [10] and the direct continuation of the work. We presented two multi-scale strategies, RGPS and RBSS, for the evaluation of a matching distance-based (dis) similarity metric induced on a database of shapes. The capabilities of the proposed frameworks have been validated through experiments on two datasets of 3D models represented by triangle meshes, whose shapes have been analyzed by considering five batteries of persistence diagrams.

The obtained results show that, using our multi-scale approaches, it is possible to provide an approximation of the metric induced by the matching distance between persistence diagrams without compromising the quality of results – in terms of retrieval performance – and greatly reducing the computational costs characterizing the exact evaluation of the matching distance.

This opens the way to the practical usage of persistence, with particular reference to the discriminative power provided by the matching distance, in retrieval applications involving large datasets.

Also, experimental results allow us to say something about possible applications of our techniques in a shape classification context. Indeed, if two systems have similar retrieval performances, this means that (generally speaking) they provide similar retrieval results for a given query. In other words, the relative closeness (and distance) between shapes is preserved moving from one system to the other. But relative closeness between objects is indeed at the basis of several classification approaches such as the k-nearest neighbor algorithm used in machine learning. Therefore, we think it is reasonable to argue that the proposed technique can be used to approximate the classification performances of persistence-based approaches.

@&#ACKNOWLEDGMENTS@&#

The first two authors partially carried out this work within the activity of ARCES “E. De Castro”, University of Bologna. A.C. was supported by the Italian CNR Flagship project INTEROMICS, InterOmics PB05, research unit WP15.

The second author dedicates this paper to her beloved grandmother Maria.

@&#REFERENCES@&#

