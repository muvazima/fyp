@&#MAIN-TITLE@&#MDA-based visual modeling approach for resources link relationships using UML profile

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           MDA-based visual modeling approach for resources link relationships


                        
                        
                           
                           The XLinkUML profile is developed to extend UML for XLink modeling.


                        
                        
                           
                           XSLT-based approach to automatically generating the XLink documents


                        
                     
                  
               
            

@&#KEYPHRASES@&#

UML profile

MDA

XLink

Software engineering

Cloud computing

@&#ABSTRACT@&#


               
               
                  Current XML editors do not provide conceptual modeling for XLink. This leads to inefficient development processes, and a low potential for reuse. To address these shortcomings, this study presents a Model Driven Architecture (MDA) approach with the UML profile to build XLink applications for various domains. This investigation demonstrates how users can use the UML profile to provide a conceptual and visual modeling for XLink applications, and automatically generate different XLink-based documents for various domains. The proposed methodology enables Web-based system developers to generate relationships between resources, and to improve software quality by adopting software engineering techniques in XML development.
               
            

@&#INTRODUCTION@&#

The masses of resources available on the World-Wide Web mean that enabling effective use of resources is a challenging task. The web is largely unstructured, with pages authored by many people on a diverse range of topics, making simple browsing too time consuming to be practical. The XML Link Language (XLink) [1], which is a W3C [2] standard for describing the relationships among Web resources, is a useful solution to this problem. XLink provides an extendable linking model to enhance the structure and quality of content in the WWW, thus raising the value of linking information. Additionally, XLink technology can help find useful cloud resources to facilitate to build new cloud-based applications. Cloud computing [3,4] is an emerging paradigm where computing resources are offered over the Internet. There are two types of problems of using cloud computing resources. Cloud resources providers are difficult to publish their services to cloud users. On the other hand, cloud users cannot easily find useful cloud resources.

The main limitation of XLink is that it is an XML-based development, and thus focuses on syntax and format rather than semantics and knowledge. Therefore, XLink has the advantage of metadata association, but it lacks computer-interpretability to support knowledge representation for intelligent applications. In our previous research [5], we proposed an OWL-based language, called OWL-L, which is based on XLink to define a set of classes and properties, specific to the description of Web resources links. OWL-L is first approach to address the limitation using ontology technologies to modeling the structure of XLink. The main purpose of OWL-L is to make Web resources links computer-interpretable. Two aspects of OWL-L, link profile and link model are described. The link profile provides the information required for an agent to discover a link, while the link model provides information that enables an agent to exploit a link.

Considering XLink from a software engineering point of view, a visualized approach for XLink modeling is crucial. Current XML editors do not provide conceptual modeling for XLink. This shortcoming leads to inefficient development processes and a low potential for reuse. This study proposes the usage of software engineering techniques, particularly the Unified Modeling Language (UML) [6,7], which is the most accepted software engineering standard to model XLink. However, UML has few elements for modeling and representing concrete concepts of specifics domains, such as XLink modeling.

The Object Management Group (OMG) [8], which is the leading organization for object-oriented programming, defined the UML as a standard graphical language for expressing system development models. Additionally, the OMG has proposed a Model Driven Architecture (MDA) [9,10] for analysis, design and implementation of software systems. The MDA specifies three viewpoints on a software system, namely a Computation Independent Model (CIM), a Platform Independent Model (PIM) and a Platform Specific Model (PSM). The CIM focuses on the environment and the requirements of the system; but is not concerned about any structural or processing details of the system. A PIM is a model with no information specific to the platform or the technology that is adopted to realize it. A PSM combines the specifications in the PIM with the details to realize it on a specific platform.

This study adopts an MDA-based approach to solve above issues in XLink modeling. Firstly, XLink framework is formally defined as a CIM to capture the concepts and properties of XLink. The formal definitions of XLink framework is denoted by XLink-CIM. A UML profile that is a PIM based on XLink-CIM is then designed to enable visual modeling for resources link relationships. Additionally, an XSLT-based style sheet is implemented to transform PIM models prepared within the defined UML profile into a PSM. Finally, different XLink-based documents are automatically created in XML format for various XLink application domains.

The OMG defines two mechanisms for extending UML: UML profile [11] and metamodel extension [12]. The UML profile approach contains a pre-defined set of stereotypes, tagged values, constraints, and notation icons that collectively specialize and tailor the existing UML. The main construct in the profile is the stereotype that is purely an extension mechanism. The metamodel extension approach is defined through the Meta-Object Facility (MOF) [13] specification which involves the process of defining a new metamodel. The study develops a UML profile, called XLinkUML profile, based on the MDA-based approach to modeling XLink.

This study visually model XLink to fulfill the XLinkUML profile and automatic generation of the XLink schema documents. It makes three contributions. (1) This study proposes an MDA-based approach to facilitate the application of software engineering techniques for modeling resources link relationships. (2) The XLinkUML profile is developed from the metamodel to extend UML for XLink modeling. (3) We implement a prototype system with XSLT-based approach to automatically generating the XLink-based documents from the UML modeling tools. The main benefit of adapting the XSLT-based approach is in its extensibility. Each XSLT style sheet represents a specific domain application of XLink. When a new XLink application is developed, our system only needs to add a XSLT style sheet. Currently, our system supports two different application domain, including XLink schema and OWL-L ontology.

This paper is organized as follows. The next section briefly reviews some existing UML extension by the UML profile approach. Section 3 describes an MDA-based approach for XLink modeling. Section 4 presents the XLink framework. Section 5 describes the proposed XLinkUML profile. In Section 6, the study provides a concrete example to illustrate how XLinkUML profile can be adopted to extend UML for XLink modeling. In Section 7 presents the prototype system for automatically generating the XLink-based documents from a UML representation of the visual model. Finally, summary and concluding remarks are included.

@&#RELATED WORK@&#

A link in XLink is associated with metadata to explicitly describe the link relationships among resources. The main advantage of XLink is that it offers out-of-line links that allow separation of content from the link structure. The content is contained in the XML document, while the link structure is provided by the linkbase (i.e. a set of metadata). Many studies of XLink and link bases have been reported recently by researchers. These include hypermedia linking [14], link transformation [15,16], link server [16,17], intelligent linking [5,18,19], etc. Unfortunately, conventional XLink lacks the computer interpretability needed to support knowledge representation, such as dynamic link generations. Our previous research [18] addressed the issue by defining a multi-layer semantic XLink framework for integrating semantic web technologies in XLink. The framework facilitated to reveal smart hyperlink generation for Web navigations.

A UML profile customizes UML for a specific domain or purposes using extension mechanisms such as stereotypes, tagged values and constraints. A number of UML profiles are developed by OMG, such as UML profile for CORBA [20], UML profile for Enterprise Distributed Object Computing [21] and UML Test Profile [22]. They try to provide the critical links that bridge the UML community to the developer community, the middleware community, etc.

In recent years, several research studies [23–36] have developed UML profiles to enhance UML to adapt for different application domains. In [30], the authors present a Model Driven Development (MDD) approach to the development of access control policies for distributed systems. The models are expressed as MOF model enriched by UML profiles. This approach allows users to define access control models using the UML notation and use Object Constraint Language (OCL) [37] to specify constraints.

The research presented in [25] has proposed the use of UML profiles for documenting Web-based application frameworks, as a standard means for expressing their semantics. Our earlier studies [35,36] adopted UML-based mechanism to define UML profiles for different Web 2.0 applications, including Web 2.0 mashups and Web 2.0-based context-aware applications. UML profiles allow all stakeholders of a system to share a common graphical notation and vocabulary, and permit more precise specifications and better documentation on how to use and customize applications. A UML profile for modeling knowledge-based system in the context of MDA framework was proposed in [28]. It presented an extension to UML using the profile mechanism for knowledge modeling.

In [38], the authors proposed a MDA-based approach to deal with the integrated generation of on-line analytical processing (OLAP) and database schema in a platform-independent manner. The automatic generation of end-user OLAP metadata is integrated with the underlying database schema. The paper [39] addressed the issue of evaluating UML-based conceptual models. They proposed a framework to present a classification of semantic issues and some evaluation indicators. In [40], the authors recommend the use existing standards such as the UML for open distributed processing system specifications and software architecture. Our research aimed at defining a suitable UML profile for modeling resources link relationships in the context of MDA.

This section gives an overview of the proposed MDA-based approach for developing a resource link relationship model. The MDA is based on the four-layer metamodeling architecture and several complementary OMG standards, as displayed in Fig. 1
                     . These standards are the MOF, UML and UML profile. The layers are the meta-metamodel layer (M3), the metamodel layer (M2), he model layer (M1) and the real objects layer (M0).

The M0 layer model is the population of a particular application that consists of instances of M1 layer model elements. The M1 layer is the model of a particular application represented in a particular modeling system. The elements of the M1 level are the custom UML models. The M2 layer, including UML and UML profile, models the modeling languages used to build M1 layer models. It defines the syntax and semantics of the modeling languages. UML profiles support mechanisms that allow metaclasses from existing UML metamodels to be extended to adapt them for different applications. This includes the ability to tailor the UML metamodel for different domains. The M3 layer model is the MOF, the universal modeling language in which modeling systems are specified. MOF is an abstract language created to define modeling languages such as UML or CWM (Common Warehouse Metamodel) [41].

The proposed MDA-based approach models resource link relationships for a specific application running on a specific platform, such as an XML-based platform. Section 4 defines formal definitions of resources link relationships according the XLink framework. These formal definitions are denoted by XLink-CIM, which is adopted to develop the XLinkUML profile. As indicated in the M1 layer in Fig. 1, the software developer designs the platform independent models for specifying resources link relationships based on the XLinkUML profile for the semester plan application. The designed “Semester plan” model is then transformed into the platform specific model which is adopted to generate XLink-based documents. This study adopts XSLT-based approach to automatically generating the XLink-based documents as the XLink PSM model. The PSM model can be further adopted to generate resource link relationship specifications and application code.

The following sections discuss in detail the XLink framework PIM, XLinkUML profile PIM, custom UML model and PSM transformation.

XLink provides a framework for creating both basic unidirectional links (i.e. simple link) and more complex linking structures (i.e. extended link). XLink allows XML documents to assert linking relationships among more than two resources and express links that reside in a location separate from the linked resources. The section presents the formal definitions of XLink, denoted by XLink-CIM, including Web resource, simple link, extended link and linkbase, for general XLink framework, and Fig. 2
                      displays the XLink-CIM, which represents the XLink framework at the higher level of abstraction.
                        Definition 1
                        (Resource)


                        A resource WR
                           ∈
                           E is a tuple WR
                           =<Rid, Uid, AWR
                           >, where:
                              ˙Rid
                              
                              
                                 denotes an unique resource identifier, such as URI;

denotes an unique identifier of resource owner;

denotes a list of resource attributes.

Resources are Web-accessible entities, such as Web pages, pictures, programs, devices, hosts, Web Services, etc. They are distributed in the Internet and are identified by URI.
                        Definition 2
                        (Extended Link)


                        An extended link of XLink is a tuple EL
                           =<La, Lo, Ra, In, Ou, Tp, Ar>, where:
                              ˙La
                              
                              
                                 denotes a set of remote Web resources representing Locator in XLink. La
                                    ⊂
                                    WR.

denotes a set of local Web resources representing Local Resource in XLink. Lo
                                    ⊂
                                    WR.

denotes a role attribute that describes the meanings or abstract concepts of Web resources.

denotes a set of arcs representing inbound in XLink.

denotes a set of arcs representing outbound in XLink.

denotes a set of arcs representing third-party in XLink.

denotes an arc role attribute that describes the meanings or abstract concepts of relationship between Web resources.


                     Fig. 2 shows the abstract concepts of XLink framework that represents the XLink-CIM. Information about how to traverse a pair of resources, including the direction of traversal and possibly application behavior information as well, is called an arc. Extended links provide full XLink functional features, such as inbound and third-party arcs, as well as links with an arbitrary number of participating resources. XLink classifies Web resources as Locators (i.e. remote resources) and Local Resources. Extended links can be expressed using directed graphs, in which the link participants are the nodes, and the arcs represent the directed edges. Consequently, the link structure can be fairly complex, and can include elements pointing to remote resources, containing local resources and specifying arc traversal rules. An arc with a local ending resource and a remote starting resource is said to be inbound. Conversely, an arc with a remote ending resource and a local starting resource is said to be outbound. If neither the starting resource nor the ending resource is local, then the arc is a third-party link.
                        Definition 3
                        Simple LINK


                        A simple link of XLink is a tuple EL
                           =<La, Ra, Ou, Ar>.

A simple link is a link with exactly two participating resources—a local starting resource and a remote ending resource. It is a restricted subset of an extended link with a slightly different syntax. An extended link offers full XLink functionality, whereas simple Links offer less functionality, have no internal structure, and only support outbound arcs.
                        Definition 4
                        linkbase


                        A linkbase LB
                           ∈
                           X is a tuple LB
                           =<ELs, ALB
                           >, where
                              ˙ELs
                              
                              
                                 denotes a set of extended links EL.

denotes a list of linkbase attributes.

XLink provides the definition of link repositories, called linkbase. Linkbase is often used to make link management easier by gathering together a number of extended links. A linkbase is an XML document containing a set of inbound and third-party links.

The formal definitions of XLink framework are described in Section 4, which presented a UML profile, called XLinkUML profile, based on the XLink framework. The profile provides a standard means for expressing the semantics of XLink framework using stereotypes, and thus to support expressing these semantics with UML tools.

In general, a UML profile extends the core UML language by defining extra modeling mechanisms of the following types:
                        
                           1.
                           Stereotypes: A stereotype defines how an existing metaclass may be extended, and allows the application of platform or domain specific terminology or notation in place of, or in addition to, those adopted for the extended metaclass.

Constraints: A constraint is directly attached to a UML element, and describes semantic restrictions that must be obeyed by a UML element. It can be expressed in any language, irrespective of whether it is machine-readable or not.

Tagged Value: A tagged value further describes a stereotyped-element. Every tagged value has a name and a type, and is associated with a particular stereotype.

The XLinkUML profile is a UML extension based on the profile mechanisms. As indicated in Fig. 3
                     , the XLinkUML profile is represented by a package and can be imported into current Web Engineering, such as UML-based Web Engineering (UWE) [42], Topic Maps [43], GUI Layout modeling [44], WebML [45], etc.

A summary of the XLinkUML profile defines for XLink framework, as shown in Table 1
                     . The leftmost column contains the UML extension used (e.g. stereotype, tagged value, etc.). The middle column contains the UML model element to which the extension is applied. Finally, the rightmost column contains the XLink construct that is represented by the extended UML model element.

The resource architecture supports modeling of resource, local resource, remote resource and entity, as shown in Fig. 4
                        . The ≪resource≫ stereotype, which denotes the Resource in the XLink framework (refer to Definition 1), can be applied to all UML model classes, which are instances of the Class metaclass. The Component metaclass is extended to support the ≪entity≫ stereotype, which is a persistent information component representing a physical concept. The persistent information is a remote resource participating in an extended link. ≪localResource≫ and ≪locator≫ are subclasses of ≪resource≫. The former corresponds to the local resource of XLink, while the latter corresponds to the remote resource. ≪inbound≫, ≪outbound≫ and ≪thirdParty≫ are instances of the AssociationClass metaclass described in the following section.

The tags of the ≪resource≫ stereotype are presented as follows:
                           
                              1.
                              The label tag is used to identify a resource.

The title tag is used to describe the title of a resource.

The role tag is used to indicate characteristics of a resource.

The arc architecture supports modeling of arc, inbound, outbound and thirdParty, as shown in Fig. 5
                     . The arc-type element in the XLink framework is denoted by the ≪arc≫ stereotype, which extends the AssociationClass metaclass. Significantly, the arc class extends UML AssociationClass, which itself can be both Class and Association. The inbound, outbound and thirdParty classes are all subclass of arc class. The enumerations in the profile show all available values of the tagged definitions.

The tags of the ≪arc≫ stereotype are presented as follows:
                        
                           1.
                           The showBehavior tag is specified through the show enumeration.

The actuateBehavior tag is specified through the actuate enumeration.

The arcrole tag is used to indicate characteristics of an arc.

The form tag is used to assign the starting resource of an arc.

The end tag is used to assign the ending resource of an arc.

The constraints of arc architecture are presented as follows:
                        
                           1.
                           An outbound arc defines traversal from the local resource to a remote resource (i.e. locator).

context outbound inv:

self.form.oclIsTypeOf(localResource) and self.to.oclIsTypeOf(locator)

An inbound arc defines traversal from the remote resource to a. local resource.

context inbound inv:

self.form.oclIsTypeOf locator) and self.to.oclIsTypeOf(localResource)

A thirdParty arc defines traversal from the remote resource to a remote resource.

context thirdParty inv:

self.form.oclIsTypeOf locator) and self.to.oclIsTypeOf(locator)

The link architecture supports modeling of XLink framework, as shown in Fig. 6
                        . An XML-based document is represented by the ≪XMLDocument≫ stereotype, which extends the Artifact metaclass. The linkbase, simple link, and extended link in the XLink framework are represented by the stereotypes ≪linkbase≫, ≪simpleLink≫ and ≪extendedLink≫, respectively. The linkbase, extended link and simple link are all XML-based components that are related to XMLDocument class through the ≪create≫, ≪embed≫ and ≪embed≫ associations, respectively. The simpleLink is a subclass of hyperlink. An extendedLink is composed of title, arc and resource.

This section presents an example of XLink model using the proposed XLinkUML profile. The example is explained in detail, and helps the reader better understand the XLinkUML profile and how it can be adopted. The example in Fig. 7
                      shows a student's semester plan containing link relationship information about the resources “student”, “subject” and “course”. Each semester plan is owned by a student. The student specifies the subjects in which is interested, and takes the courses that cover exactly his chosen subjects.

The semesterPlan class represents a student's semester plan, and is stereotyped with ≪extendedLink≫, which associates an arbitrary number of resources. Each participating resource is restricted to just one student, and at least one subject and course. The student class and course class are both stereotyped with ≪locator≫, which represents remote resources. The subject class is stereotyped with ≪localResource≫, which represents a local resource in the extended link. The “take” association (with ≪thirdParty≫ stereotype) is from student class (with ≪locator≫ stereotype) to course class (also with ≪locator≫ stereotype). The “interest” association (with ≪inbound≫ stereotype) is from student class (with ≪locator≫ stereotype) to subject class (with ≪localResource≫ stereotype). The “cover” association (with ≪outbound≫ stereotype) is from subject class (with ≪localResource≫ stereotype) to course class (with ≪locator≫ stereotype). The Plans class is stereotyped with ≪linkbase≫ which is composed of at least one instance of semesterPlan class.

The previous sections describe the XLinkUML profile for resource linking modeling, as well as a concrete application for describing the link relationships of a student's semester plan. The section describes a prototype system for the automatically generating XLink schema or OWL-L ontology from an XML Metadata Interchange (XMI) [46] document exported from UML modeling tools.

UML modeling tools can export UML models in the XMI language, thus creating an XML file containing all the model data. Since XMI is a standard format, it can be imported by any other tools, thus establishing a common format across different tools. The proposed prototype system, exports the XLinkUML profile model from the StarUML modeling tool [47] by generating an XMI file. An XMI file containing the XLink model can be parsed and retrieved once it becomes available. The XMI file is then automatically transformed into an XLink schema or OWL-L ontology using eXtensible Stylesheet Language Transformation (XSLT) [34].

The core components of the proposed prototype system are the U2XLink Transcoder and XLinkUML profile. Fig. 8
                      shows the flow-oriented prototype architecture. The U2XLink Transcoder comprises the Transcoding Engine and Style Sheet Base. At present, Style Sheet Base supports two different XSLT style sheets: XMI2XLink and XMI2OWL-L style sheet. An XSLT style sheet is also a XML document that specifies the rules and templates to transform one document into another. The Transcoding Engine is an XSLT processor based on Xalan [48]. The Transcoding Engine mainly applies the XMI2XLink or XMI2OWL-L style sheet to an XMI document to generate a specific XLink schema or OWL-L ontology, respectively. The main benefit of adapting the XSLT-based approach is in its extensibility. Each XSLT style sheet represents a specific domain application of XLink. When a new XLink application is developed, our system only needs to add a XSLT style sheet in the Style Sheet Base.

The information flow of the prototype system is as follows.
                        
                           1.
                           The user adopts the XLinkUML profile for modeling resource link relationships in the UML tools. These UML modeling tools provide a visual editor to allow a user to view and edit XLink models graphically.

An XMI document is exported from UML Tools, and then imported into the U2XLink Transcoder.

The transcoding engine manipulates the XMI document by the different XSLT style sheets to derive various XLink-based documents.
                                 
                                    a.
                                    The transcoding engine manipulates the XMI document by the XMI2XLink style sheet to create the XLink schema document.

The transcoding engine manipulates the XMI document by the XMI2OWL-L style sheet to create the OWL-L ontology document

XLink-based documents are automatically generated from UML diagrams of the visualized modeling tool, as shown in Fig. 9
                     . The visual UML diagrams (A) (i.e. platform independent model) are exported to an XMI document (B). The XMI2XLink style sheet transforms the XMI document (C) into a specific XLink schema (D) in XML format (i.e. platform specific model). The XMI2OWL-L style sheet transforms the XMI document (E) into a specific OWL-L ontology (F) in XML format (i.e. platform specific model).

@&#CONCLUSIONS@&#

XLink is adopted extensively in Web-based application systems to describe explicitly the link relationships among Web resources. A systematic development methodology for XLink modeling is essential when adopting XLink in software engineering. However, current XML editors, do not provide conceptual or visual modeling for XLink applications. The study proposes an MDA-based approach to facilitate the use of software engineering techniques to model resource link relationships. First, the XLink framework in the formal definitions is denoted by XLink-CIM. Then, an XLinkUML profile based on the XLink-CIM is then designed to construct and visualize resource link relationships in the UML modeling tools. Additionally, the U2XLink Transcoder is developed to transform PIM models that are prepared within the defined XLinkUML profile to Platform Specific Models (PSM). Finally, XLink schema and OWL-L ontology documents are generated in XML format. This approach allows XLink models to be built using a standard modeling language based on software engineering technologies.

The XLinkUML profile is implemented by the StarUML, which facilitates the visual implementation of profiles using diagrams similar to those adopted in common UML editors. Further research will be to extend the XLinkUML profile with ontologies to support additional intelligence in the modeled XLink applications by deducing new adaptation rules. OWL [49,50] seems to be the most appropriate language to further study, because it currently is the main language for representing ontologies in the Semantic Web. [51,52].

@&#ACKNOWLEDGMENTS@&#

The author would like to thank the National Science Council of the Republic of China, Taiwan for financially supporting this research under Contract No. NSC 97-2221-E-150-039.

@&#REFERENCES@&#

