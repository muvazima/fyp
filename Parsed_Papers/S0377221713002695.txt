@&#MAIN-TITLE@&#A decomposition approach for the General Lotsizing and Scheduling Problem for Parallel production Lines

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A novel solution heuristic for the General Lotsizing and Scheduling Problem for Parallel production Lines is presented.


                        
                        
                           
                           The idea is to iteratively decompose the parallel-line problem into a series of single-line problems.


                        
                        
                           
                           The new heuristic improves already existing approaches.


                        
                        
                           
                           Large practical applications can now be solved.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Scheduling

Heuristics

Simultaneous Lotsizing and Scheduling

Production

@&#ABSTRACT@&#


               
               
                  This paper presents a novel solution heuristic to the General Lotsizing and Scheduling Problem for Parallel production Lines (GLSPPL). The GLSPPL addresses the problem of simultaneously deciding about the sizes and schedules of production lots on parallel, heterogeneous production lines with respect to scarce capacity, sequence-dependent setup times and deterministic, dynamic demand of multiple products. Its objective is to minimize inventory holding, sequence-dependent setup and production costs. The new heuristic iteratively decomposes the multi-line problem into a series of single-line problems, which are easier to solve. Different approaches for decomposition and for the iteration between a modified multi-line master problem and the single-line subproblems are proposed. They are compared with an existing solution method for the GLSPPL by means of medium-sized and large practical problem instances from different types of industries. The new methods prove to be superior with respect to both solution quality and computation time.
               
            

@&#INTRODUCTION@&#

Management concepts sometimes repeat. Currently seems to roll another “wave of lean management”, preaching that inventories are waste. Inventories would blur a clear view on mistakes which are made in production planning. Thus, inventories should be reduced. All drivers that necessitate inventories should be eliminated by means of investments. This makes sense in many industries, but not in all. Some industries utilize expensive, automated machines. These cannot easily be replaced by newer ones allowing automated changeovers and thus generating almost no setup times or setup costs. They apply a machinery, which has grown over time. It consists of many machines which show a similar functionality, but have been purchased successively over one or several decades. There are, e.g., some older machines, which are less efficient, and a few newer ones, which are more efficient.

An example is the consumer goods industry. There are often only a few production stages (like Make and Pack) with only one of them being a bottleneck. However – due to the above reasons – several heterogeneous, parallel production lines can be found on this bottleneck stage. Parallel means that these lines show a similar functionality, i.e., they can be used alternatively to produce (more or less) the same products. Heterogeneous means that they, nevertheless, do not need to be identical. This concerns production speeds, production coefficients, production costs, setup costs and setup times. Both setup costs and times may even be sequence-dependent. The individual work stations of a production line are usually connected by an automated transport system with a fixed cycle time. Thus, each production line can be considered as a single planning unit.

We focus on this kind of industries, more concretely on short- to medium-term production planning and scheduling in this kind of industries. Typically, many final items can be assigned to a few setup families. They have to be produced on stock on basis of demand forecasts. These demand forecasts are assumed to be deterministically known for several planning periods (e.g., weeks or months) of a finite planning horizon (e.g., a quarter or even a year). Thus, demands can dynamically vary per setup family and time period. Backlogging is not allowed. Changeovers between items of the same family are negligible. However, changeovers between items of different setup families may incur high, sequence-dependent changeover costs and changeover times. There is only a single bottleneck stage within the flow shop production system. However, this stage consists of several parallel, heterogeneous production lines with scarce capacity. The production lines share the same functionality, i.e., they can alternatively be used to fulfill the setup families’ demands. Producing earlier than in the demanded periods incurs inventory holding costs. These inventory holding costs are in a crucial conflict with the setup costs. But also the heterogeneous production costs of the different lines may play an important role.

Thus, the planning problem is to find a schedule specifying the sizes, sequences and timing of the production lots on the different production lines. The overall costs are to be minimized. The demands of the different setup families are to be satisfied. And the limited capacities of the production lines are to be respected. Note that there is a strong interdependence between the lotsizing and the sequencing (or – in general – scheduling) part of the problem. To calculate feasible lotsizes, the capacity has to be respected. Because of the sequence-dependency of setup times, the sequence of the lots influences the available net capacity. However, deciding about the sizes of the lots also means deciding about the number of the setups. The number of setups again influences the available net capacities. Because of this crucial interrelationship, both the sizing and the scheduling of the production lots should be done simultaneously.

In the meantime, there is a rich body of literature on this so-called “Simultaneous Lotsizing and Scheduling” (SLS). General reviews on SLS are given by [15,45]. In contrast, the reviews of [31,28,40,9] rather concentrate on the lotsizing part of the problem and not so much on the integration of both aspects. Because of its flexibility and because of its quite general applicability for practical problems (see Section 5.3), in the following we focus on the General Lotsizing and Scheduling Problem for Parallel production Lines (GLSPPL, [38]). A solution heuristic for the GLSPPL has also been proposed in [38]. However, its scalability for large problem instances is not really satisfying. As Section 2 will show, there was further research on extensions of the GLSPPL and on related SLS problems. However, there still seems to be a lack of and a need for better scalable solution methods for the original GLSPPL.

The aim of this paper is to introduce such new solution heuristics for the original version of the GLSPPL. The new heuristics will be better scalable to larger problems of practical relevance. The basic idea is to iteratively decompose the multi-line GLSPPL into a series of single-line problems. These single-line problems can quite efficiently be solved by a heuristic presented in [37]. Different approaches of decomposing the multi-line problem and of iterating between a modified multi-line master problem and the single-line subproblems are proposed. They are compared by means of practical problem instances of different types of industries. Examples are consumer goods production, health care industry, acrylic glass production and label printing.

The next section summarizes the literature on SLS models and methods for heterogeneous production lines and sequence-dependent setup times. Section 3 presents the original GLSPPL as proposed in [38]. In Section 4, the new solution methods are introduced. After describing the basic idea of the iterative procedure, a decomposition approach based on priority rules and another approach based on an aggregation of the multi-line problem are explained. Section 5 shows the results of the computational tests. Both medium-sized and large practical problem instances are considered.

@&#LITERATURE REVIEW@&#

The GLSP for a single line was first introduced by [22]. It has been shown to be NP-complete for non-zero minimum lotsizes. The GLSP was expanded for sequence-dependent setup times (GLSPST) by [37]. There, also a new solution approach called “dual reoptimization” was introduced. The basic idea is to vary the setup sequences for the single-line GLSPST by using the local search meta-heuristic threshold accepting (see [16]). Candidate sequences are drawn at random from a neighborhood of the current sequence. Candidate sequences, which improve the current sequence, are always accepted. In order to escape from local optima, candidates, which are not worse than a certain threshold, are also accepted. Lowering the threshold ensures convergence of the algorithm. All other candidates are refused. The setup sequence only defines the setup costs of the candidate. However, in order to also calculate its minimum holding costs, an ordinary network flow problem (NFP) has to be solved to optimality. The idea of dual reoptimization is to accelerate this process. This is achieved by using a dual NFP algorithm and by reoptimizing the current solution instead of solving the candidate from scratch. Using the dual NFP algorithm, it is even possible to refuse inappropriate candidates without having to solve the NFP to optimality. This property will later on be referred to as “early refusal of unacceptable candidates”. Because candidate sequences are drawn at random, different independent runs of the above local search may lead to different (locally, but hopefully often also globally optimal) solutions. Thus, [37] always executes 25 independent runs and selects their best solution as the final result. The corresponding heuristic has been denoted as TADR. It proved to be very efficient for the single-line GLSPST.

The single-line GLSPST has been expanded to the parallel-line GLSPPL by [36,38] in 1999 and 2002, respectively. The principle of combining threshold accepting with dual reoptimization has also been adapted to this kind of problem in a heuristic procedure called TAPLS. However, in the case of heterogeneous parallel production lines, a generalized network flow problem with losses and gains (GNFP) has to be solved instead of an ordinary NFP. This proved to be less efficient than in the single-line case. Only medium-sized practical problems with two production lines, up to eight periods and up to 19 products were solved in a reasonable amount of time. A potential reason for this inefficiency are numerical instabilities of the GNFP solver used. Nevertheless, TAPLS was competitive to the solution heuristic of Kang et al. [30]. Kang’s method has been designed to heuristically solve a similarly comprehensive SLS model, which was inspired by [5]. However, Kang’s heuristic does not consider setup times.

At this point in time, the only other models (according to the authors’ knowledge) considering heterogeneous production lines and sequence-dependent setup times have been proposed by De Matta and Guignard [14] in 1994 and by Clark and Clark [10] in 2000. The former model resembles the quite restrictive “all-or-nothing assumption” of the Discrete Lotsizing and Scheduling Problem (DLSP, [21]). “All-or-nothing” means that either a given period’s capacity has to be completely exhausted by (setup time and) production for a single product or it is not produced at all within this period. The authors exploit this special property within Lagrangian based solution heuristics to solve a real world problem in the tile industry. The latter model is more general concerning the periods’ capacities. It allows backlogging, but setup costs are not considered. The solution heuristics presented are especially designed for rolling horizon planning. Thus they are only aiming at finding exact schedules for the first period(s) of the planning horizon. Later periods are just approximated. According to the authors [10, p. 2306], the computational results suggest that “for medium to large problems, impracticable amounts of time will be spent just identifying a feasible solution”.

Because of an intense research on SLS in the last decade, quite a few models and solution heuristics for problems similar to the GLSPPL type have been proposed in the meantime. “Similar” means that these are also respecting sequence-dependent setup times and heterogeneous lines on a single bottleneck stage.

Ghosh Dastidar and Nagi [25] use a CSLP-type formulation for a scheduling problem in an injection molding facility. Backlogging is allowed and setup resources can be scarce. The authors use a two-phase decomposition of so-called “work centers” to heuristically solve the problem. The single-line version of the Continuous Setup Lotsizing Problem (CSLP) originally goes back to [32]. CSLP-type models generally allow to produce at a maximum one product per period. As opposite to the DLSP, here the product needs not to completely exhaust the period’s capacity.

Almeder and Almado-Lobo [3] also extend the GLSPPL for a scarce setup resource. They compare this formulation with a less general one, yet showing a better computational behavior than the GLSPPL. Solution heuristics are not proposed. Almada-Lobo et al. [1,2] present mixed integer programming (MIP) formulations which are designed to especially meet the requirements of glass container production. The former paper also employs a CSLP-type formulation. It applies Lagrangian relaxation to solve a short-term SLS problem for parallel molding machines. Complementary, the latter one tackles the medium-term, multi-location, multi-objective SLS problem of scheduling parallel furnaces. Here, variable neighborhood search (VNS) is used to heuristically solve the problem.

Józefowska and Zimniak [29] extend the GLSPPL for multiple objectives and backlogging in order to support decision making at a plastic pipe producing plant in Poland. On the one hand, the solution space is restricted by means of expert knowledge. On the other hand, a multi-objective genetic algorithm is applied to find Pareto-optimal solutions. Amorim et al.
                     [4] also extend the GLSPPL for multiple objectives and use a genetic algorithm to evaluate the Pareto-optimal boundary. However, they especially focus on perishability issues in yogurt production/packaging. They thus integrate the block planning concept of [27] with the GLSPPL.

Motivated by a real case producing refractory bricks and inspired by previous work of [34,13] in job shop environments, Mateus et al. [35] propose an iterative approach for the integration of capacitated lotsizing and sequence-dependent setup scheduling. Moving forward in time period by period, an aggregate lotsizing problem is solved to optimality first. This is followed by a one-period, parallel machine scheduling problem that is heuristically solved using a GRASP algorithm. To integrate both levels of planning, production lots have to be heuristically decomposed into three different types of jobs (either fulfilling the period’s demand, holding stocks, or backlogging inventory).

Since most of the above mentioned papers consider applications in industry, it can be concluded that SLS for a single bottleneck stage seems to be of high practical relevance. Nevertheless, recent research also focuses on multi-stage SLS, which is important in case of shifting bottlenecks. Some of these models basically allow to treat the parallel-line models considered here as a single-stage special case. However, because of the significantly increased complexity, it cannot be expected that solution methods designed for multi-stage SLS models can compete with heuristics especially designed for the single-stage case. Thus, we only very briefly point to these multi-stage models (allowing heterogeneous, parallel lines per stage and sequence-dependent setup times). However, we do not discuss them in further detail: Meyr [39] extends the GLSPPL to the GLSP for Multiple production Stages (GLSPMS). [42] compare reformulations and valid inequalities for this model, whereas [41] propose a solution heuristic based on VNS and fix and optimize. Lang [33, Chapter 7.2] extends the GLSPMS for product substitution. Finally, a series of papers [19,18,43,17] deals with a two-stage soft drink production system (liquid preparation and bottling). This production system is represented by two- and single-stage SLS models and solution methods, respectively.

Summing up, the GLSPPL is well-accepted in the scientific literature and of high practical relevance. Models and methods for specialized and extended problem variants do exist. Nevertheless, there is still a need for scalable solution heuristics for the basic GLSPPL. Even though there exist reformulations of the GLSPPL, which are better suited for applying a standard MIP solver (see, e.g., [3]), we now present the original model formulation of the GLSPPL according to [38] because it seems more flexible to model further extensions required by new practical applications.

In the GLSPPL several products j
                     =1,…, J are to be scheduled on l
                     =1,…, L parallel production lines. The finite planning horizon T consists of discrete macroperiods t
                     =1,…, T (for example, months or weeks) with a given length. For each line l, each macroperiod t is additionally represented by a set S
                     
                        lt
                      of non-overlapping microperiods s where the number ∣S
                     
                        lt
                     ∣ of microperiods has to be fixed in advance. Only a single product can be produced within a single microperiod. As opposite to macroperiods, the lengths of the microperiods are decision variables and expressed by the (unknown) quantity x
                     
                        ljs
                      produced within a respective microperiod s on the corresponding line l times a (known) production coefficient a
                     
                        lj
                     . All microperiods of a line l are arranged in the sequence 
                        
                           s
                           =
                           1
                           ,
                           …
                           ,
                           
                              
                                 ∑
                              
                              
                                 t
                              
                           
                           |
                           
                              
                                 S
                              
                              
                                 lt
                              
                           
                           |
                        
                     .

If on a certain line the same item is produced within one or several consecutive microperiods, these microperiods constitute a lot. The total quantity produced during these microperiods defines the size of the lot. Thus, a lot may even span over several macroperiods. Since the starting times of macroperiods and the sequence of microperiods are known, the sequence of lots is also known and a complete production schedule for all lines can be derived.

The following notation is used to formulate the problem:


                     
                        Data:
                     
                     
                        
                           
                              S
                              
                                 lt
                              
                           
                           set of microperiods s belonging to macroperiod t and production line l
                           

capacity (time) of line l available in macroperiod t
                           

capacity consumption (time) needed to produce one unit of product j on line l
                           

minimum lotsize of product j (units) if produced on line l
                           

holding costs of product j (per unit and per macroperiod)

production costs of product j (per unit) on line l
                           

setup costs of a changeover from product i to product j on line l
                           

setup time of a changeover from product i to product j on line l (time)

demand for product j in macroperiod t (units)

initial inventory of product j at the beginning of the planning horizon (units)

equals 1, if line l is set up for product j at the beginning of the planning horizon (0 otherwise)


                     
                        Variables:
                     
                     
                        
                           
                              I
                              
                                 jt
                              
                              ⩾0
                           inventory of product j at the end of macroperiod t (units)

quantity of item j produced in microperiod s on line l (units)

setup state: y
                              
                                 ljs
                              
                              =1, if line l is set up for product j in microperiod s (0 otherwise)

takes on 1, if a changeover from product i to product j takes place on line l at the beginning of microperiod s (0 otherwise)

Using this notation the General Lotsizing and Scheduling Problem for Parallel production Lines (GLSPPL) can be stated as:
                        
                           (1)
                           
                              minimize
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       t
                                       ,
                                       j
                                    
                                 
                              
                              
                                 
                                    h
                                 
                                 
                                    j
                                 
                              
                              
                                 
                                    I
                                 
                                 
                                    jt
                                 
                              
                              +
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       l
                                       ,
                                       i
                                       ,
                                       j
                                       ,
                                       s
                                    
                                 
                              
                              
                                 
                                    s
                                 
                                 
                                    lij
                                 
                              
                              
                                 
                                    z
                                 
                                 
                                    lijs
                                 
                              
                              +
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       l
                                       ,
                                       j
                                       ,
                                       s
                                    
                                 
                              
                              
                                 
                                    c
                                 
                                 
                                    lj
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    ljs
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              subject to
                              
                                 
                                    I
                                 
                                 
                                    jt
                                 
                              
                              =
                              
                                 
                                    I
                                 
                                 
                                    j
                                    ,
                                    t
                                    -
                                    1
                                 
                              
                              +
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       l
                                       ,
                                       s
                                       ∈
                                       
                                          
                                             S
                                          
                                          
                                             lt
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    ljs
                                 
                              
                              -
                              
                                 
                                    d
                                 
                                 
                                    jt
                                 
                              
                              
                              ∀
                              t
                              ,
                              
                              j
                           
                        
                     
                     
                        
                           (3)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       ,
                                       s
                                       ∈
                                       
                                          
                                             S
                                          
                                          
                                             lt
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    a
                                 
                                 
                                    lj
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    ljs
                                 
                              
                              ⩽
                              
                                 
                                    K
                                 
                                 
                                    lt
                                 
                              
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       ,
                                       j
                                       ,
                                       s
                                       ∈
                                       
                                          
                                             S
                                          
                                          
                                             lt
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    st
                                 
                                 
                                    lij
                                 
                              
                              
                                 
                                    z
                                 
                                 
                                    lijs
                                 
                              
                              
                              ∀
                              l
                              ,
                              
                              t
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    x
                                 
                                 
                                    ljs
                                 
                              
                              ⩽
                              
                                 
                                    
                                       
                                          K
                                       
                                       
                                          lt
                                       
                                    
                                 
                                 
                                    
                                       
                                          a
                                       
                                       
                                          lj
                                       
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    ljs
                                 
                              
                              
                              ∀
                              l
                              ,
                              
                              j
                              ,
                              
                              s
                              ,
                              
                              t
                              
                              with
                              
                              s
                              ∈
                              
                                 
                                    S
                                 
                                 
                                    lt
                                 
                              
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    x
                                 
                                 
                                    ljs
                                 
                              
                              ⩾
                              
                                 
                                    m
                                 
                                 
                                    lj
                                 
                              
                              (
                              
                                 
                                    y
                                 
                                 
                                    ljs
                                 
                              
                              -
                              
                                 
                                    y
                                 
                                 
                                    lj
                                    ,
                                    s
                                    -
                                    1
                                 
                              
                              )
                              
                              ∀
                              l
                              ,
                              
                              j
                              ,
                              
                              s
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    ljs
                                 
                              
                              =
                              1
                              
                              ∀
                              l
                              ,
                              
                              s
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    z
                                 
                                 
                                    lijs
                                 
                              
                              ⩾
                              
                                 
                                    y
                                 
                                 
                                    li
                                    ,
                                    s
                                    -
                                    1
                                 
                              
                              +
                              
                                 
                                    y
                                 
                                 
                                    ljs
                                 
                              
                              -
                              1
                              
                              ∀
                              l
                              ,
                              
                              i
                              ,
                              
                              j
                              ,
                              
                              s
                           
                        
                     
                  

The objective is to minimize inventory holding costs, the sequence-dependent setup costs and line specific production costs of potentially heterogeneous production lines (1).

Because of (2) and I
                     
                        jt
                     
                     ⩾0 inventory holding costs are accounted for and demand is met without back–logging. Sequence-dependent setup times may further reduce the limited capacity of the production lines (3). Constraints (6) and (4) ensure that a unique setup state y
                     
                        ljs
                      is defined per line and microperiod and that production can only take place if a line is indeed set up for the respective product. If the setup state of line l has to change from product i to another product j in a microperiod s, a changeover has to be executed and the corresponding changeover indicator z
                     
                        lijs
                      has to be set to 1 (7). This allows modeling of sequence-dependent setup costs and setup times, whereas constraints (5) allow the modeling of minimum lotsizes, which may sometimes be necessary for technical reasons.

Note that microperiods with zero length (so-called “idle periods”) can occur. Further note that the above formulation of the GLSPPL is only appropriate for practical applications where the setup state is “conserved”. That means, after periods without production, the same product can be produced again without incurring further setup efforts (st
                     
                        ljj
                     
                     =
                     s
                     
                        ljj
                     
                     =0 ∀l,
                     j). In practical applications, where the setup state “gets lost” when a production line is out of use for a certain amount of time, the above formulation has to be adapted. A loss of setup state can, for example, be modeled by introducing a “neutral” setup state j
                     =0 and substituting the inequalities (3) with 
                        
                           
                              
                                 ∑
                              
                              
                                 j
                                 ⩾
                                 0
                                 ,
                                 s
                                 ∈
                                 
                                    
                                       S
                                    
                                    
                                       lt
                                    
                                 
                              
                           
                           
                              
                                 a
                              
                              
                                 lj
                              
                           
                           
                              
                                 x
                              
                              
                                 ljs
                              
                           
                           =
                           
                              
                                 K
                              
                              
                                 lt
                              
                           
                           -
                           
                              
                                 ∑
                              
                              
                                 i
                                 ⩾
                                 0
                                 ,
                                 j
                                 ⩾
                                 0
                                 ,
                                 s
                                 ∈
                                 
                                    
                                       S
                                    
                                    
                                       lt
                                    
                                 
                              
                           
                           
                              
                                 st
                              
                              
                                 lij
                              
                           
                           
                              
                                 z
                              
                              
                                 lijs
                              
                           
                           
                           ∀
                           
                           l
                           ,
                           t
                        
                      (see [22] for further details).

As demonstrated in [38], the GLSPPL can be solved by combining the local search heuristic threshold accepting (TA) with dual reoptimization. In order to early refuse unacceptable candidates the embedded GNFPs are solved by the “relaxation algorithm” of [7], which is specialized for this kind of problems. However, Meyr [38] already noted that the relaxation algorithm sometimes needs “an excessive number of iterations” and thus proposed some means to accelerate his heuristic solution procedures. One representative of these heuristics, which has been called “TAPLS”, will serve as a benchmark in the following.

Refs. [8,44] made proposals to improve the numerical performance of the relaxation algorithm [7]. However, instead of reimplementing TAPLS with respect to these insights, we preferred to embed an ordinary dual Linear Programming (LP) solver into the same threshold accepting framework. The reasons for this are threefold: in the meantime, almost all commercial and non-commercial LP solvers offer a dual simplex variant and give access to objective function values of basis solutions, what is a prerequisite for combining TA with dual reoptimization (but was not state of the art ten years ago). The programmers of these solvers already spent a lot of effort in numerical tractability, so taking care about numerical problems is shifted to the external solvers. Second, solving an LP instead of a GNFP facilitates future extensions of the embedded problem, e.g., for time-indexed holding costs, backlogging, or overtime. Of course, it has to be expected that computation times are worse than they are when using a specialized GNFP algorithm. However, here we deliberately face the consequences. We successfully tested the LP solvers of the COIN-OR LP project (CLP, [11]), the Gnu Linear Programming Kit (GLPK, [26]), and the FICO Xpress Optimization Suite [20] for combing them with dual reoptimization. Despite of the (especially for large problem instances) performance advantages of Xpress, we chose to apply GLPK because of its more liberal licensing policy and thus simpler transferability.

Therefore, a solution heuristic called “TA-GLPK” will serve as a further benchmark algorithm for the tests of Section 5. It is a reimplementation of TAPLS [38], which uses GLPK for the dual reoptimization of the embedded LPs instead of the relaxation algorithm [7] to solve the embedded GNFPs. The interested reader may note that the parm.meth
                     =
                     GLP_DUAL option of GLPK advices the GLPK LP solver to apply a dual simplex algorithm and that initializing the parm.obj_ul option of GLPK with the current threshold allows an early refusal of unacceptable candidates.

Nevertheless, it still has to be expected that these solution procedures will reach their limits if large problem instances are to be solved. Thus, the following sections demonstrate another solution approach, which aims at decomposing the overall GLSPPL problem into smaller subproblems, solving the decomposed subproblems individually and deriving solutions for the original problem from them. Basically, decomposition approaches are nothing new. Well-known examples are Benders’ decomposition [6] or the Danzig–Wolfe decomposition [12], to name only a few. However, we want to introduce another approach, especially designed for the GLSPPL. It relaxes the inventory balancing constraints (2) – the only ones linking the parallel production lines together – in order to take advantage of the fact that with TADR a very fast and successful solution heuristic for the single-line special case GLSPST already exists.

The following Section 4.1 presents the framework of the overall approach. Based on this, two new solution heuristics, TA-Prio and TA-Agg, will be introduced in Sections 4.2 and 4.3. The first one decomposes the multi-line problem GLSPPL into several individual single-line problems by means of rather simple priority rules. The latter one is an aggregation-based decomposition approach, first aggregating the original problem into a smaller, easier tractable counterpart and then disaggregating its solution again to derive a decomposition of the original problem.


                        Fig. 1
                         shows an overview of the decomposition approach. The original GLSPPL problem to be solved is denoted as PL/O. As part of the initialization, the original data of PL/O are copied to a second version PL/M. While PL/O will remain unchanged, its copy PL/M will be worked on and possibly be modified during the following proceeding. The decomposition approach is an iterative procedure. It stops when either a feasible solution has been reached in an iteration i or when a pre-defined iteration limit max has been reached.

Step 1 of the iteration is to decompose PL/M into L independent single-line problems SL
                        1,…, SL
                        
                           L
                        . This is done by deriving line-specific demands d
                        
                           ljt
                         and line-specific initial inventories I
                        
                           lj0 from the line-independent demand data d
                        
                           jt
                         and initial inventories I
                        
                           j0 of PL/O and from the capacities K
                        
                           lt
                         of the current PL/M. Many different ways are conceivable to reach a consistent decomposition, fulfilling 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    l
                                 
                              
                              
                                 
                                    d
                                 
                                 
                                    ljt
                                 
                              
                              =
                              
                                 
                                    d
                                 
                                 
                                    jt
                                 
                              
                           
                         for all j, t and 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    l
                                 
                              
                              
                                 
                                    I
                                 
                                 
                                    lj
                                    0
                                 
                              
                              =
                              
                                 
                                    I
                                 
                                 
                                    j
                                    0
                                 
                              
                           
                         for all j. Sections 4.2 and 4.3 will present two of them. The art is to find decompositions which furthermore are feasible or even perfect. Feasible means that solutions, which are feasible with respect to the capacities K
                        
                           lt
                         of the original problem PL/O, can be found for all single-line problems SL
                        
                           l
                        . Perfect means that the optimal solutions of the l
                        =1,…, L independent SL
                        
                           l
                         together would even constitute the optimal solution of PL/O.

Each of the single-line problems SL
                        
                           l
                         is of a GLSPST type [37]. They can be solved with solution methods like TADR that are especially tailored to the GLSPST. However, since the GLSPST is a special case of the GLSPPL for L
                        =1, they also could be solved with GLSPPL heuristics like TAPLS or TA-GLPK. In the experiments of Section 5 and in step 2 of Fig. 1, TADR is applied because it has proven to be a fast and reliable solution method for the GLSPST [37]. Thus, the results of step 2 are setup patterns y
                        
                           ljs
                         for each single-line problem SL
                        
                           l
                        . Note that these setup patterns even exist if the decomposition was infeasible because TADR allows violations of the capacity constraints, but punishes them by means of penalty costs [37].

In step 3 the original problem PL/O is solved for the setup patterns y
                        
                           ljs
                         of step 2 being fixed. This means that an LP has to be solved what can, for example, be done by using GLPK. This way of computing production quantities x
                        
                           ljs
                         (and I
                        
                           jt
                        ) is preferable to using the individual production plans of the SL
                        
                           l
                         directly. The reason is that – although the setup patterns are fixed – it might make sense to shift production quantities between production lines with respect to the original capacities of PL/O and the overall objective of the original problem PL/O (considering all production lines simultaneously).

The production plan x
                        
                           ljs
                        , being input to step 4 of Fig. 1, might be feasible for PL/O or not. If it is, the procedure terminates with a feasible solution. If it is not, but the iteration limit max has been reached (i
                        ==
                        max), the procedure terminates without having found a solution.

Otherwise, the input data of PL/M are slightly modified, hoping to find a better decomposition this way and thus to end in a feasible solution in a further iteration i
                        +1 of the overall procedure. This is illustrated by step 5 of Fig. 1. As can be seen, the original capacities of PL/O are transformed to get new, modified capacities K
                        
                           lt
                         for PL/M. The idea is to reserve capacity for the bottleneck lines of the last iteration i and thus to come up with a new decomposition in step 1 of the next iteration i
                        +1, which is then feasible for step 2. To explain this effect in more detail: If the last decomposition was not able to allow finding feasible solutions in steps 2 and 3, the line-specific demand 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    j
                                 
                              
                              
                                 
                                    d
                                 
                                 
                                    ljt
                                 
                              
                           
                         of iteration i was higher than the original capacity of PL/O in some bottleneck period(s) and on some bottleneck line(s). If line-specific demand were shifted to earlier
                           1
                           Note that backlogging was not allowed in Section 3.
                        
                        
                           1
                         non-bottleneck periods or to other non-bottleneck lines with unused capacity, TADR might find feasible solutions in step 2 of the next iteration i
                        +1. This shift of demand has to be executed in the decomposition step 1 of iteration i
                        +1. To motivate the decomposition algorithm to put such a shift into practice, the modified capacity K
                        
                           lt
                         of PL/M pretends that less capacity is available than it was in/on bottleneck periods/lines of the infeasible solution of the last iteration i. Thus “reserving capacity” actually means “reducing capacity”, i.e., pretending that there is less capacity in order to force the decomposition of the next iteration to cleverly react by shifting line-specific demand. Note that such anticipation mechanisms are quite common in hierarchical production and supply chain planning (see, e.g., [24, p. 97]).

Two methods of modifying the capacity have been implemented and are tested in Section 5. The first one applies a fixed capacity reduction and is denoted as “fix” in the following. For this purpose, a capacity reduction factor 0<
                        redfac
                        <1 has to be fixed in advance. The new capacity of the modified PL/M is then computed according to K
                        
                           lt
                        ≔redfac
                        
                           i
                        
                        ·
                        K
                        
                           lt
                         ∀l, t. Since the capacity is reduced in all periods and on all lines, implicitly also the bottlenecks of the last iteration are considered. Of course, this “flat” reduction of capacity – fix for all periods and all production lines – appears to be rather dumb because it does not focus specifically on the characteristics of the last iteration’s solutions. Furthermore, it is not obvious how redfac should be chosen.

Thus, the second, more intelligent method “var” reduces the capacity variably, i.e., dependent on the solution x
                        
                           ljs
                         of the last iteration i. It does not need a parameter to be fixed a priori. Its mode of operation is illustrated by Algorithm 1. The idea is to first calculate the shortages of the production plan of iteration i forward in time (lines 1–9 of Algorithm 1) and then to reduce capacity for these missing quantities backward in time (l. 16–28). If a product j is short in macroperiod t which has not been produced in this period at all 
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             l
                                             ,
                                             s
                                             ∈
                                             
                                                
                                                   S
                                                
                                                
                                                   lt
                                                
                                             
                                          
                                       
                                       
                                          
                                             x
                                          
                                          
                                             ljs
                                          
                                       
                                       =
                                       0
                                    
                                 
                              
                           
                        , additional time MaxSt
                        
                           jt
                         for a future setup has to be reserved, too (l. 19). Since the new setup sequence is not yet known, the worst case is assumed and the maximum setup time for changing to product j is retained (l. 10–15).
                           Algorithm 1
                           Variable (“var”) calculation of reduced capacity. 
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                main input: d
                                                
                                                   ljt
                                                , I
                                                
                                                   lj0, x
                                                
                                                   ljs
                                                , original K
                                                
                                                   lt
                                                
                                             
                                          
                                          
                                             
                                                
                                                output: modified K
                                                
                                                   lt
                                                
                                             
                                          
                                          
                                             
                                                1 forall 
                                                l, j, t
                                                =1,…, T 
                                                do 
                                                
                                                // forward calculation of shortages
                                             
                                          
                                          
                                             
                                                2 
                                                
                                                
                                                   
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            ljt
                                                         
                                                      
                                                      ≔
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            lj
                                                            ,
                                                            t
                                                            -
                                                            1
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            s
                                                            ∈
                                                            
                                                               
                                                                  S
                                                               
                                                               
                                                                  t
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            ljs
                                                         
                                                      
                                                      -
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            ljt
                                                         
                                                      
                                                   
                                                ;
                                          
                                          
                                             
                                                3 
                                                
                                                I
                                                
                                                   ljt
                                                
                                                <0 then
                                             
                                          
                                          
                                             
                                                4 
                                                
                                                SQ
                                                
                                                   ljt
                                                ≔−
                                                I
                                                
                                                   ljt
                                                 
                                                
                                                
                                                // Short Quantity
                                             
                                          
                                          
                                             
                                                5 
                                                
                                                I
                                                
                                                   ljt
                                                ≔0;
                                          
                                          
                                             
                                                6 
                                                
                                                else
                                             
                                          
                                          
                                             
                                                7 
                                                
                                                SQ
                                                
                                                   ljt
                                                ≔0;
                                          
                                          
                                             
                                                8 
                                                
                                                end
                                             
                                          
                                          
                                             
                                                9 end
                                             
                                          
                                          
                                             
                                                10 forall 
                                                j,t 
                                                do
                                             
                                          
                                          
                                             
                                                11 
                                                
                                                MaxSt
                                                
                                                   jt
                                                ≔0;
                                          
                                          
                                             
                                                12 
                                                
                                                if 
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            l
                                                            ,
                                                            s
                                                            ∈
                                                            
                                                               
                                                                  S
                                                               
                                                               
                                                                  lt
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            ljs
                                                         
                                                      
                                                      =
                                                      0
                                                   
                                                 and 
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            l
                                                         
                                                      
                                                      
                                                         
                                                            SQ
                                                         
                                                         
                                                            ljt
                                                         
                                                      
                                                      >
                                                      0
                                                   
                                                 
                                                then 
                                                //if 
                                                j 
                                                is not produced at all in 
                                                t
                                             
                                          
                                          
                                             
                                                13 
                                                
                                                MaxSt
                                                
                                                   jt
                                                ≔max
                                                   l,i
                                                {st
                                                
                                                   lij
                                                } 
                                                //initialization of Maximum Setup time
                                             
                                          
                                          
                                             
                                                14 
                                                
                                                end
                                             
                                          
                                          
                                             
                                                15 end
                                             
                                          
                                          
                                             
                                                16 forall 
                                                l 
                                                do
                                             
                                          
                                          
                                             
                                                17 
                                                
                                                CR ≔0;
                                          
                                          
                                             
                                                18 
                                                
                                                forall 
                                                t
                                                =
                                                T,…, 1 do 
                                                
                                                //backward calculation of reduced capacity
                                             
                                          
                                          
                                             
                                                19 
                                                
                                                
                                                   
                                                      CR
                                                      ≔
                                                      CR
                                                      +
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      (
                                                      
                                                         
                                                            a
                                                         
                                                         
                                                            lj
                                                         
                                                      
                                                      ·
                                                      
                                                         
                                                            SQ
                                                         
                                                         
                                                            ljt
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            MaxSt
                                                         
                                                         
                                                            jt
                                                         
                                                      
                                                      )
                                                      ;
                                                   
                                                 
                                                
                                                //Capacity Reduction
                                             
                                          
                                          
                                             
                                                20 
                                                
                                                if 
                                                CR
                                                >
                                                K
                                                
                                                   lt
                                                 
                                                then
                                             
                                          
                                          
                                             
                                                21 
                                                
                                                
                                                CR ≔CR
                                                −
                                                K
                                                
                                                   lt
                                                ;
                                          
                                          
                                             
                                                22 
                                                
                                                
                                                K
                                                
                                                   lt
                                                ≔0;
                                          
                                          
                                             
                                                23 
                                                
                                                else
                                             
                                          
                                          
                                             
                                                24 
                                                
                                                
                                                K
                                                
                                                   lt
                                                 ≔K
                                                
                                                   lt
                                                
                                                −
                                                CR;
                                          
                                          
                                             
                                                25 
                                                
                                                
                                                CR ≔0;
                                          
                                          
                                             
                                                26 
                                                
                                                end
                                             
                                          
                                          
                                             
                                                27 
                                                
                                                end
                                             
                                          
                                          
                                             
                                                28 end
                                             
                                          
                                       
                                    
                                 
                              
                           

Note that this kind of feedback of the last iteration i is crucial for decomposition approaches. Established mathematical approaches like Danzig–Wolfe decomposition typically decompose the original problem into a master problem and one or several easy to solve subordinate problem(s). The optimal solutions of these subordinate problems are supposed to deliver helpful feedback for the next iteration’s master problem. Unfortunately, this is not really promising in our case because already the GLSPST is difficult to solve so that it cannot be expected to find optimal solutions for the single-line problems. Nevertheless, the procedure “var” at least tries to mimic these ideas by using information about drawbacks of current solutions of the subordinate problems SL
                        
                           l
                         to send feedback to the next iteration’s “master problem” PL/M. On the other hand, the master problem coordinates several subordinate problems by its way of decomposing d
                        
                           jt
                         and I
                        
                           j0 into d
                        
                           ljt
                         and I
                        
                           lj0.

Of course, also other ways of sending feedback to step 1 of Fig. 1 via PL/M are conceivable. For example, time-indexed production coefficients a
                        
                           ljt
                         might be introduced and increased instead of decreasing capacities K
                        
                           lt
                        . This would allow to adapt the capacity consumption of each product j individually.

There are several possibilities to decompose a multi-line PL/M into several independent single-line problems SL
                        
                           l
                         as requested by step 1 of Fig. 1. In practical applications priority rules are quite popular. They define how to dedicate products to lines and vice versa, i.e., which product should preferably be produced on which line or which line should at best exclusively be used for which product. Common rules are to produce a product on as few lines as possible, but also to produce as much of a product as possible on its most suitable line in order to avoid setups and to save production costs. Unfortunately, this neglects that producing a single product on several production lines in parallel can save holding costs. Further problems arise if capacity is tight so that products cannot be produced on their preferable lines or a product’s demand has to be split and distributed over several lines.
                           Algorithm 2
                           Priority-based decomposition. 
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                main input: original d
                                                
                                                   jt
                                                , I
                                                
                                                   j0, K
                                                
                                                   lt
                                                
                                             
                                          
                                          
                                             
                                                
                                                output: line-specific demand d
                                                
                                                   ljt
                                                 and initial inventory I
                                                
                                                   lj0
                                             
                                          
                                          
                                             
                                                1 
                                                NL
                                                
                                                   j
                                                 ≔numberoflineswith a
                                                
                                                   lj
                                                
                                                >0;
                                          
                                          
                                             
                                                2 forall 
                                                j 
                                                in sequence of ascending NL
                                                
                                                   j
                                                , descending 
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            t
                                                         
                                                      
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            jt
                                                         
                                                      
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             
                                                //calculation of line-specific demand:
                                             
                                          
                                          
                                             
                                                3
                                                
                                                forall 
                                                l with a
                                                
                                                   lj
                                                
                                                >0 in sequence of ascending 
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  c
                                                               
                                                               
                                                                  lj
                                                               
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  a
                                                               
                                                               
                                                                  lj
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             
                                                4
                                                
                                                forall 
                                                t 
                                                do
                                             
                                          
                                          
                                             
                                                5
                                                
                                                
                                                if 
                                                K
                                                
                                                   lt
                                                
                                                ⩾
                                                d
                                                
                                                   jt
                                                
                                                a
                                                
                                                   lj
                                                 
                                                then
                                             
                                          
                                          
                                             
                                                6
                                                
                                                
                                                d
                                                
                                                   ljt
                                                ≔d
                                                
                                                   jt
                                                ; K
                                                
                                                   lt
                                                ≔K
                                                
                                                   lt
                                                
                                                −
                                                d
                                                
                                                   jt
                                                
                                                a
                                                
                                                   lj
                                                ;
                                                d
                                                
                                                   jt
                                                 ≔ 0;
                                          
                                          
                                             
                                                7
                                                
                                                
                                                else
                                             
                                          
                                          
                                             
                                                8
                                                
                                                
                                                
                                                   
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            ljt
                                                         
                                                      
                                                      ≔
                                                      
                                                         
                                                            
                                                               
                                                                  K
                                                               
                                                               
                                                                  lt
                                                               
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  a
                                                               
                                                               
                                                                  lj
                                                               
                                                            
                                                         
                                                      
                                                      ;
                                                      
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            jt
                                                         
                                                      
                                                      ≔
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            jt
                                                         
                                                      
                                                      -
                                                      
                                                         
                                                            
                                                               
                                                                  K
                                                               
                                                               
                                                                  lt
                                                               
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  a
                                                               
                                                               
                                                                  lj
                                                               
                                                            
                                                         
                                                      
                                                      ;
                                                      
                                                      
                                                         
                                                            K
                                                         
                                                         
                                                            lt
                                                         
                                                      
                                                      ≔
                                                      0
                                                   
                                                ;
                                          
                                          
                                             
                                                9
                                                
                                                
                                                end
                                             
                                          
                                          
                                             
                                                10
                                                
                                                end
                                             
                                          
                                          
                                             
                                                11
                                                
                                                end
                                             
                                          
                                          
                                             
                                                12
                                                
                                                forall 
                                                t with d
                                                
                                                   jt
                                                
                                                >0 do
                                                
                                                //assign remaining demand to line 1
                                             
                                          
                                          
                                             
                                                13
                                                
                                                d
                                                1jt
                                                ≔d
                                                1jt
                                                
                                                +
                                                d
                                                
                                                   jt
                                                ;
                                          
                                          
                                             
                                                14
                                                
                                                end
                                             
                                          
                                          
                                             
                                                //calculation of line-specific initial inventory:
                                             
                                          
                                          
                                             
                                                15
                                                
                                                forall 
                                                l with a
                                                
                                                   lj
                                                
                                                >0 and 
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            t
                                                         
                                                      
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            ljt
                                                         
                                                      
                                                      >
                                                      0
                                                   
                                                 
                                                in sequence of 
                                                descending 
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  c
                                                               
                                                               
                                                                  lj
                                                               
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  a
                                                               
                                                               
                                                                  lj
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             
                                                16
                                                
                                                if 
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            t
                                                         
                                                      
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            ljt
                                                         
                                                      
                                                      ⩾
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            j
                                                            0
                                                         
                                                      
                                                   
                                                 
                                                then
                                             
                                          
                                          
                                             
                                                17
                                                
                                                
                                                I
                                                
                                                   lj0≔I
                                                
                                                   j0; → continue with next j;
                                          
                                          
                                             
                                                18
                                                
                                                else 
                                                
                                                
                                                //single-line problem for 
                                                j 
                                                trivial
                                             
                                          
                                          
                                             
                                                19
                                                
                                                
                                                
                                                   
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            lj
                                                            0
                                                         
                                                      
                                                      ≔
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            t
                                                         
                                                      
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            ljt
                                                         
                                                      
                                                   
                                                ; 
                                                   
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            j
                                                            0
                                                         
                                                      
                                                      ≔
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            j
                                                            0
                                                         
                                                      
                                                      -
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            t
                                                         
                                                      
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            ljt
                                                         
                                                      
                                                   
                                                ;
                                          
                                          
                                             
                                                20
                                                
                                                end
                                             
                                          
                                          
                                             
                                                21
                                                
                                                end
                                             
                                          
                                          
                                             
                                                22
                                                
                                                if 
                                                I
                                                
                                                   j0
                                                >0 then
                                                
                                                //assign remaining inventory to line 1
                                             
                                          
                                          
                                             
                                                23
                                                
                                                I
                                                1jt
                                                ≔I
                                                1jt
                                                
                                                +
                                                I
                                                
                                                   j0;
                                          
                                          
                                             
                                                24
                                                
                                                end
                                             
                                          
                                          
                                             
                                                25 end
                                             
                                          
                                       
                                    
                                 
                              
                           


                        Algorithm 2 tries to resemble these ideas in order to serve as a benchmark for testing the less intuitive, but more sophisticated aggregation-based decomposition approach of Section 4.3. The basic idea is to start with products that can only be produced on a single line. If many of them exist, the one with the highest demand should be chosen first in order to allow a high utilization or even exclusive use of the line to be selected (see lines 1–2 of Algorithm 2). Within all lines being able to produce this product j (i.e., a
                        ·j
                        
                        >0), the line l with the cheapest relative production costs 
                           
                              
                                 
                                    
                                       
                                          c
                                       
                                       
                                          lj
                                       
                                    
                                 
                                 
                                    
                                       
                                          a
                                       
                                       
                                          lj
                                       
                                    
                                 
                              
                           
                         is most attractive (see l. 3). If the capacity K
                        
                           lt
                         of the line is sufficient to completely fulfill the product’s demand d
                        
                           jt
                        , the total demand will be assigned to the single-line problem SL
                        
                           l
                         via d
                        
                           ljt
                         (l. 5–6). Otherwise, only the share of d
                        
                           jt
                         that can still be produced on line l within the corresponding macroperiod t will be used (l. 8). This procedure is iterated over all lines and macroperiods. Since it is of a heuristic and “greedy” nature, some unassigned demand may be left over at the very end. It should also be represented in the single-line decomposition. For ease of simplicity, this is completely assigned to the first line l
                        =1, unfortunately possibly causing that the corresponding single-line problem will become infeasible (l. 12–13).

An analogous procedure is necessary to decompose potential initial inventories I
                        
                           j0 into line-specific initial inventories I
                        
                           lj0. Because initial inventories avoid production costs, here, we prefer production lines with high relative production costs (l. 15). Additionally, we only consider lines that are used according to our previous assignment, i.e., that show a positive line-specific demand 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    t
                                 
                              
                              
                                 
                                    d
                                 
                                 
                                    ljt
                                 
                              
                              >
                              0
                           
                        . If this demand already exceeds the initial inventory, the product’s whole initial inventory is assigned to the line (l. 16–17). Otherwise, only the required share is used, so that this product does not need to be produced on the line at all (l. 19). This procedure is iterated over all lines. Again, some initial inventory may remain left over because of an inappropriate heuristic decomposition of the d
                        
                           jt
                         into d
                        
                           ljt
                        . Thus the remaining initial inventory is also reserved for the first production line l
                        =1 (l. 22–23).

Please note that Algorithm 2 is just a simple, illustrative example of a decomposition using priority rules. Of course, one can imagine other – and maybe better – rules and priorities. Nevertheless, Algorithm 2 can give a fair impression of general advantages and disadvantages of this kind of approach.

An alternative way of deriving line-specific demands and initial inventories (see step 1 of Fig. 2
                        ) is to aggregate the detailed, large problem PL/M into a smaller 
                           
                              
                                 
                                    PL
                                    /
                                    M
                                 
                                 
                                    ¯
                                 
                              
                           
                         (step 1a), solve the smaller one (step 1b) and disaggregate the results again to achieve d
                        
                           ljt
                         and I
                        
                           lj0 (step 1c). There are different ways of aggregation possible. In practice, an aggregation according to the product structure is very common because often final items can easily be aggregated to setup families. Then only setup families are considered for lotsizing. Indeed, for most of the practical problems that will be discussed in Section 5.3, this has been done beforehand. So there does not seem to be much potential left for a further aggregation according to the product structure. Instead, in the following we will explore an aggregation by time, where many smaller time buckets are aggregated to a few larger ones. This will be discussed in more detail in Section 4.3.1. Also different ways to disaggregate the results of the optimized (see Section 4.3.2) 
                           
                              
                                 
                                    PL
                                    /
                                    M
                                 
                                 
                                    ¯
                                 
                              
                           
                         are possible. For example, an LP or NFP could be solved as proposed by [36, Chapter 7.2.2.2] for a product aggregation. However, Section 4.3.3 will show that this is not necessary in our case because for aggregation by time, a rather simple, rule-based approach is sufficient.

For ease of simplicity we assume that an integer aggregation factor f can be defined so that the original planning horizon T is an integer multiple of the new planning horizon 
                              
                                 
                                    
                                       T
                                    
                                    
                                       ¯
                                    
                                 
                              
                            of the aggregated problem, consisting of fewer time buckets of longer, but equal length (
                              
                                 
                                    
                                       T
                                    
                                    
                                       ¯
                                    
                                 
                                 ·
                                 f
                                 =
                                 T
                              
                           ). For example, a detailed planning problem PL/M covering T
                           =8weeks could be aggregated to a planning problem 
                              
                                 
                                    
                                       PL
                                       /
                                       M
                                    
                                    
                                       ¯
                                    
                                 
                              
                            consisting of 
                              
                                 
                                    
                                       T
                                    
                                    
                                       ¯
                                    
                                 
                                 =
                                 2
                              
                            months by an aggregation factor f
                           =4. This sounds restrictive at the first moment. However, on the one hand, the original planning horizon could easily be extended to such an integer multiple by simply copying all data of the last macroperiod, e.g., if T
                           =7, we could first copy the last macroperiod once and then apply the aggregation. On the other hand, as we will see later on, time aggregation would also work for an arbitrary mapping of many smaller periods to a few longer ones if time-indexed holding costs h
                           
                              jt
                            can be respected when solving the aggregate problem 
                              
                                 
                                    
                                       PL
                                       /
                                       M
                                    
                                    
                                       ¯
                                    
                                 
                              
                           .

Only data that depend on (the lengths of) the time buckets of the detailed problem PL/M have to be adapted. Thus, capacities K
                           
                              lt
                           , demands d
                           
                              jt
                           , and holding costs h
                           
                              j
                            have to be summed to their aggregate counterparts 
                              
                                 
                                    
                                       
                                          
                                             K
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       l
                                       
                                          
                                             t
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                 
                              
                           , 
                              
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       j
                                       
                                          
                                             t
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                 
                              
                           , and 
                              
                                 
                                    
                                       
                                          
                                             h
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       j
                                    
                                 
                              
                            to get the smaller problem 
                              
                                 
                                    
                                       PL
                                       /
                                       M
                                    
                                    
                                       ¯
                                    
                                 
                              
                           . For example, the capacities are aggregated by
                              
                                 (8)
                                 
                                    
                                       
                                          
                                             
                                                K
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                       
                                          l
                                          
                                             
                                                t
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                    
                                    ≔
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             t
                                             =
                                             (
                                             
                                                
                                                   t
                                                
                                                
                                                   ¯
                                                
                                             
                                             -
                                             1
                                             )
                                             ·
                                             f
                                             +
                                             1
                                          
                                          
                                             
                                                
                                                   t
                                                
                                                
                                                   ¯
                                                
                                             
                                             ·
                                             f
                                          
                                       
                                    
                                    
                                       
                                          K
                                       
                                       
                                          lt
                                       
                                    
                                    
                                    ∀
                                    l
                                    ,
                                    
                                    
                                       
                                          t
                                       
                                       
                                          ¯
                                       
                                    
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    
                                       
                                          T
                                       
                                       
                                          ¯
                                       
                                    
                                    .
                                 
                              
                           The demands have to be changed accordingly. The holding costs can simply be adapted to the new time pattern by 
                              
                                 
                                    
                                       
                                          
                                             h
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       j
                                    
                                 
                                 ≔
                                 f
                                 ·
                                 
                                    
                                       h
                                    
                                    
                                       j
                                    
                                 
                              
                            because they account for longer macroperiods now.

Last, the microperiod related data have to be considered. Assuming that the number of microperiods per macroperiod was constant (∣S
                           
                              lt
                           ∣ ≡
                           C ∀l, t
                           =1,…, T), the aggregate macroperiods should comprise the same constant number of microperiods per aggregate macroperiod, i.e., 
                              
                                 |
                                 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       l
                                       
                                          
                                             t
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                 
                                 |
                                 ≡
                                 C
                                 
                                 ∀
                                 l
                                 ,
                                 
                                 
                                    
                                       t
                                    
                                    
                                       ¯
                                    
                                 
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       T
                                    
                                    
                                       ¯
                                    
                                 
                              
                           , in order to reduce the problem size of 
                              
                                 
                                    
                                       PL
                                       /
                                       M
                                    
                                    
                                       ¯
                                    
                                 
                              
                           . Thus, the total number 
                              
                                 
                                    
                                       S
                                    
                                    
                                       ¯
                                    
                                 
                              
                            of microperiods of 
                              
                                 
                                    
                                       PL
                                       /
                                       M
                                    
                                    
                                       ¯
                                    
                                 
                              
                            is calculated by 
                              
                                 
                                    
                                       S
                                    
                                    
                                       ¯
                                    
                                 
                                 ≔
                                 
                                    
                                       T
                                    
                                    
                                       ¯
                                    
                                 
                                 ·
                                 C
                              
                           .

The aggregate problem 
                              
                                 
                                    
                                       PL
                                       /
                                       M
                                    
                                    
                                       ¯
                                    
                                 
                              
                            is of the same type as the detailed problem PL/M, just smaller. Thus, all methods for solving the GLSPPL can be applied, hopefully leading to better and/or faster solutions because the aggregate problem is easier to solve. Accordingly, both solution methods TAPLS and TA-GLPK are available. For our experiments of Section 5 we will use TA-GLPK. The reasons are twofold. First, its embedded LPs can more easily be adapted if extensions of the GLSPPL, e.g., for time-indexed production coefficients or time-indexed holding costs, become necessary. Second, as we will see later on, also its computational performance is preferable to TAPLS when instances exceeding a certain size have to be considered.

After solving 
                              
                                 
                                    
                                       PL
                                       /
                                       M
                                    
                                    
                                       ¯
                                    
                                 
                              
                            aggregate production quantities 
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       lj
                                       
                                          
                                             s
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                 
                              
                            are available. They can be used to derive the line-specific (detailed) demands d
                           
                              ljt
                           . Since backlogging is not allowed in step 1b of Fig. 2 and in Section 4.3.2, an aggregate production quantity does only fulfill aggregate demand of its current aggregate macroperiod or later ones. Thus, it can also only satisfy detailed demand in the corresponding detailed periods. This is ensured by using a backward-oriented disaggregation procedure, where – moving backward in time – the latest aggregate production quantity is always assigned to latest remaining demand.

A small example shall illustrate this procedure: Let us assume original demand d
                           
                              jt
                            is given as d
                           11
                           =10, d
                           12
                           =3, d
                           13
                           =7, d
                           14
                           =25, d
                           15
                           =10 and d
                           16
                           =5 for a detailed problem instance with a single product j
                           =
                           J
                           =1, with L
                           =2 production lines and with T
                           =6 macroperiods, consisting of one microperiod each (S
                           =6). Using an aggregation factor f
                           =3, a feasible production plan 
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       l
                                       1
                                       
                                          
                                             s
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                 
                                 =
                                 15
                              
                            had been computed for l
                           =1, 2 and 
                              
                                 
                                    
                                       s
                                    
                                    
                                       ¯
                                    
                                 
                                 =
                                 1
                                 ,
                                 
                                 2
                              
                            in step 1b, which fulfills the aggregate demand 
                              
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       11
                                    
                                 
                                 =
                                 20
                              
                            and 
                              
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       12
                                    
                                 
                                 =
                                 40
                              
                            for 
                              
                                 
                                    
                                       T
                                    
                                    
                                       ¯
                                    
                                 
                                 =
                                 
                                    
                                       S
                                    
                                    
                                       ¯
                                    
                                 
                                 =
                                 2
                              
                           . Then the latest production quantity 
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       112
                                    
                                 
                                 =
                                 15
                              
                            of the first line l
                           =1 could satisfy the latest demands d
                           16 and d
                           15, leading to d
                           116
                           =5 and d
                           115
                           =10. The latest production quantity 
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       212
                                    
                                 
                                 =
                                 15
                              
                            of the second line l
                           =2 could lead to d
                           214
                           =15. The remaining 10 units of d
                           14 would have to be satisfied by production of an earlier aggregate macroperiod. Using 
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       111
                                    
                                 
                              
                           , an assignment d
                           114
                           =10 and d
                           113
                           =5 could result. The disaggregation procedure would end with d
                           213
                           =2, d
                           212
                           =3 and d
                           211
                           =10.

A more formal description of the disaggregation procedure is given by Algorithm 3. The original demand d
                           
                              jT
                            of a product j in the last macroperiod T is looked at first (l. 2). It is tested whether it can be fulfilled by a production quantity 
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       lj
                                       
                                          
                                             S
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                 
                              
                            of some line l in the last aggregate microperiod 
                              
                                 
                                    
                                       S
                                    
                                    
                                       ¯
                                    
                                 
                              
                           . If this production quantity is sufficient, the whole demand will be assigned to line l and 
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       lj
                                       
                                          
                                             S
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                 
                              
                            is set to 0 (l. 5–8). Otherwise, only the possible share of demand will be used, 
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       lj
                                       
                                          
                                             S
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                 
                              
                            will be reduced accordingly (l. 10–12), and the procedure is repeated for the other production lines (l. 4). If afterwards still some remaining demand RD
                           
                              jT
                            of product j and macroperiod T is left, the lines are searched for in the preceding microperiods 
                              
                                 
                                    
                                       S
                                    
                                    
                                       ¯
                                    
                                 
                                 -
                                 1
                                 ,
                                 
                                 
                                    
                                       S
                                    
                                    
                                       ¯
                                    
                                 
                                 -
                                 2
                              
                           , etc. (l. 3). After this, original demand d
                           
                              j,T−1 of the preceding original macroperiod T
                           −1 needs to be checked (l. 2). However note that this will only take effect if d
                           
                              jT
                            has been completely fulfilled (i.e., RD
                           
                              jT
                           
                           =0) because, otherwise, all production quantities of product j would have been completely consumed 
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                l
                                                ,
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                             
                                                lj
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                          
                                          =
                                          0
                                       
                                    
                                 
                              
                           .
                              Algorithm 3
                              Aggregation-based decomposition. 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   
                                                   main input: original d
                                                   
                                                      jt
                                                   , 
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     x
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                            
                                                               lj
                                                               
                                                                  
                                                                     s
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   output
                                                   : line-specific demand d
                                                   
                                                      ljt
                                                   
                                                
                                             
                                             
                                                
                                                   1 
                                                   RD
                                                   
                                                      jt
                                                   ≔d
                                                   
                                                      jt
                                                    ∀j, t
                                                   =1,…,T;
                                                   //Remaining Demand
                                                
                                             
                                             
                                                
                                                   2 forall 
                                                   j,t
                                                   =
                                                   T,…, 1 with RD
                                                   
                                                      jt
                                                   
                                                   >0 do
                                                
                                             
                                             
                                                
                                                   3 
                                                   
                                                   forall 
                                                   
                                                      
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               ¯
                                                            
                                                         
                                                         =
                                                         
                                                            
                                                               S
                                                            
                                                            
                                                               ¯
                                                            
                                                         
                                                         ,
                                                         …
                                                         ,
                                                         1
                                                      
                                                    
                                                   do
                                                
                                             
                                             
                                                
                                                   4 
                                                   
                                                   forall 
                                                   l with 
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     x
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                            
                                                               lj
                                                               
                                                                  
                                                                     s
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                         
                                                         >
                                                         0
                                                      
                                                    
                                                   do
                                                
                                             
                                             
                                                
                                                   5 
                                                   
                                                   
                                                   if 
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     x
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                            
                                                               lj
                                                               
                                                                  
                                                                     s
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                         
                                                         >
                                                         
                                                            
                                                               RD
                                                            
                                                            
                                                               jt
                                                            
                                                         
                                                      
                                                    
                                                   then
                                                
                                             
                                             
                                                
                                                   6 
                                                   
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     x
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                            
                                                               lj
                                                               
                                                                  
                                                                     s
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                         
                                                         ≔
                                                         
                                                            
                                                               
                                                                  
                                                                     x
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                            
                                                               lj
                                                               
                                                                  
                                                                     s
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                         
                                                         -
                                                         
                                                            
                                                               RD
                                                            
                                                            
                                                               jt
                                                            
                                                         
                                                      
                                                   ;
                                             
                                             
                                                
                                                   7 
                                                   
                                                   
                                                   d
                                                   
                                                      ljt
                                                   ≔d
                                                   
                                                      ljt
                                                   
                                                   +
                                                   RD
                                                   
                                                      jt
                                                   ;
                                             
                                             
                                                
                                                   8 
                                                   
                                                   
                                                   RD
                                                   
                                                      jt
                                                   ≔0;
                                             
                                             
                                                
                                                   9 
                                                   
                                                   
                                                   else
                                                
                                             
                                             
                                                
                                                   10 
                                                   
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               RD
                                                            
                                                            
                                                               jt
                                                            
                                                         
                                                         ≔
                                                         
                                                            
                                                               RD
                                                            
                                                            
                                                               jt
                                                            
                                                         
                                                         -
                                                         
                                                            
                                                               
                                                                  
                                                                     x
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                            
                                                               lj
                                                               
                                                                  
                                                                     s
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   ;
                                             
                                             
                                                
                                                   11 
                                                   
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               d
                                                            
                                                            
                                                               ljt
                                                            
                                                         
                                                         ≔
                                                         
                                                            
                                                               d
                                                            
                                                            
                                                               ljt
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               
                                                                  
                                                                     x
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                            
                                                               lj
                                                               
                                                                  
                                                                     s
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   ;
                                             
                                             
                                                
                                                   12 
                                                   
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     x
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                            
                                                               lj
                                                               
                                                                  
                                                                     s
                                                                  
                                                                  
                                                                     ¯
                                                                  
                                                               
                                                            
                                                         
                                                         ≔
                                                         0
                                                      
                                                   ;
                                             
                                             
                                                
                                                   13 
                                                   
                                                   
                                                   end
                                                
                                             
                                             
                                                
                                                   14 
                                                   
                                                   end
                                                
                                             
                                             
                                                
                                                   15 
                                                   
                                                   end
                                                
                                             
                                             
                                                
                                                   16 end
                                                
                                             
                                          
                                       
                                    
                                 
                              

After executing Algorithm 3, some demand RD
                           
                              jt
                           
                           >0 may be left over, which has been satisfied by initial inventories in the solution of the 
                              
                                 
                                    
                                       PL
                                       /
                                       M
                                    
                                    
                                       ¯
                                    
                                 
                              
                           . Since the initial inventories do not affect production capacities, they can be assigned to any production line. Without loss of generality, we use line l
                           =1 for this purpose and set I
                           
                              lj0≔I
                           
                              j0 for l
                           =1 and I
                           
                              lj0 ≔ 0 for l
                           >1. Note that the line-specific demands d
                           1jt
                            have to be increased and that the RD
                           
                              jt
                            have to be decreased accordingly in periods t where RD
                           
                              jt
                           
                           >0.

If after this procedure still some remaining demand RD
                           
                              jt
                           
                           >0 exists, this indicates that the heuristic TA-GLPK has not been able to find a feasible solution for the aggregate problem 
                              
                                 
                                    
                                       PL
                                       /
                                       M
                                    
                                    
                                       ¯
                                    
                                 
                              
                            and that these quantities RD
                           
                              jt
                            show the share of original demand d
                           
                              jt
                            that got lost.
                              2
                              Note that both solution procedures TAPLS and thus also TA-GLPK can generate such infeasible solutions because they relax the capacity constraints of the GLSPPL by means of penalty costs [38].
                           
                           
                              2
                            Nevertheless, a feasible solution might exist, which just has not been found due to the heuristic nature of TA-GLPK. The heuristics for the decomposed, detailed single-line problems might be more successful. Thus, this “lost demand” should also be assigned to the single-line problems, there increasing their line-specific demands d
                           
                              ljt
                           . The basic idea for this assignment is to distribute the lost demand of product j equally over all production lines l, which already produced it in the aggregate (infeasible) solution 
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                                >
                                                0
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                             
                                                lj
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                          
                                          >
                                          0
                                       
                                    
                                 
                              
                           . If a product j has not been produced at all 
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                l
                                                ,
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                                >
                                                0
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                             
                                                lj
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                          
                                          =
                                          0
                                       
                                    
                                 
                              
                           , its whole lost demand should be allocated to the cheapest production line, that would be able to produce it.

Finally note, if TA-GLPK instead of TADR were used to solve the single-line problems SL
                           
                              l
                            of step 2 in Fig. 1, also time-indexed holding costs h
                           
                              jt
                            could be respected. In this case, a user-defined mapping of smaller periods into longer ones – leading to time buckets of various lengths – would be possible. For example, a planning horizon of 12weeks could be aggregated to a planning horizon 
                              
                                 
                                    
                                       T
                                    
                                    
                                       ¯
                                    
                                 
                                 =
                                 6
                              
                           , consisting of 4weeks and two months. This appears very interesting for practical applications, where often a rolling horizon planning of this type helps to mitigate forecast inaccuracies.

In the following we will test the performance of the new algorithms TA-GLPK and the decomposition based approaches TA-Prio and TA-Agg as compared to the TAPLS of [38]. Section 5.1 is devoted to medium-sized practical problems that have also been introduced and used by [38]. Section 5.2 investigates the effects of varying the aggregation factor f and changing the parameters of the threshold accepting meta-heuristic. Finally, in Section 5.3 further large, practical problems are considered.

All computational tests have been executed on a personal computer using an Intel Core i7-860 2.8GHz QC CPU, 8GB RAM, the Ubuntu 10.04 operating system, GLPK 4.44, and the gcc 4.4.3 compiler.

For TADR and TAPLS the threshold values and threshold accepting parameters of [37,38], respectively, are used. However, to limit computation times, for TADR the best solution out of 10 instead of 25 independent runs is chosen. Furthermore, for TAPLS the maximum number of candidate tests before changing the threshold value is replaced by a threshold multiplier TM, which can be varied in order to test different threshold settings. The threshold is lowered when 5·
                     TM tests have not improved the current objective value. If the current solution has not changed within 2·
                     TM steps, a threshold accepting run is stopped. These configurations can also be applied to the new algorithms of Section 4.

Within this section we consider twelve practical problems T01,…, T12 of consumer goods industries, firstly presented in [38, Section 4.2]. They comprise T
                        =8 macroperiods and L
                        =2 identical production lines each. The number of items J to be produced varies between 15 and 19. The problems are of “medium size” in the sense that they are not small enough for being solved to optimality by an up-to-date standard MIP solver in a reasonable amount of time. Thus, only objective function values of different heuristics – and especially the already known TAPLS of [38, Section 4] – will serve as a benchmark. For the following experiments, the threshold multiplier TM is set to 2000 (which is also a medium choice as we will see later on).


                           Table 1
                            compares the algorithms TAPLS of [38], its analog TA-GLPK using the dual simplex of GLPK for reoptimization, and the priority-based and decomposition-based methods TA-Prio and TA-agg4, respectively, for the problem instances T01, …, T12. TA-agg4 applies an aggregation factor of f≔ 4 to condense the original 8-period problem into a 2-period problem. Both decomposition based methods allow a maximum of 2 iterations. They either use a fixed capacity reduction of 1 percent (“fix”), i.e., redfac
                           =0.99, or the variable capacity reduction policy (“var”) as described in Section 4.1 if the first iteration did not lead to a feasible solution. The table shows the average percentage deviation of the objective values from the best solution found over all heuristics, for 120 runs of the respective heuristic, and the percentage of runs that did not lead to a feasible solution after the second iteration (percentage of infeasible solutions). Note that due to the random elements of the threshold accepting implementation of [37,38] different runs (with different seed values for the random number generator) typically create different heuristic solutions. A missing entry in the column of infeasible solutions means that all 120 runs were successful. For each problem instance the – with respect to solution quality – best performing solution method is marked bold.

As can be seen in the row “aver. obj”, the priority based decomposition performs quite bad in terms of solution quality. If feasible solutions are found at all, they are on average more than 17% away from the best solution found so far for a problem instance. However, since no linear program has to be solved for the aggregate problem, the computation times of 5s on average (row “aver. cpu”) are very favorable. The solution quality of TAPLS and TA-GLPK is with 7–7.5% similar on average. Astonishingly, TA-GLPK outperforms TAPLS in terms of computation time despite of its more general way of solving the embedded generalized network flow problems. The implementation of the relaxation algorithm [7] as used in [38] is not numerically stable enough to be competitive. Maybe the improved versions of [8,44] would change the picture. However, looking at TA-agg4 this does not really seem to be necessary. On average both time decomposition variants create better solutions in a significantly shorter computation time than TAPLS and TA-GLPK.

The two different variants of capacity reduction (fix, var.) show similar results when applied to TA-agg4. For TA-Prio the fixed capacity reduction seems to be advantageous at first sight because of its lower average objective values. However, problem T05 cannot be solved at all when using a fixed reduction, whereas “only” 61% of these instances remain unsolved when using the variable capacity reduction. This phenomenon is further investigated in Table 2
                           . Here the percentage share of infeasible solutions for a maximum number (max) of 1, 2 and 3 iterations are shown (see Section 4.1 and Fig. 1). The values for max
                           =2 correspond with the results of Table 1. On the one hand, it can be seen that this problem really seems to be hard for the fix-variant because even after the third iteration feasible solutions cannot be found. With respect to this, the variable capacity reduction appears superior to the fixed one. For this reason and because the fixed capacity reduction presumes that a reduction level has been determined somehow (1% capacity reduction in this example), whereas the variable reduction policy does not need such a parameter choice, the latter one will solely be used in the following experiments. On the other hand, Table 2 shows that a maximum number of two iterations (max
                           =2) seems to be a good choice. When using TA-Prio quite a lot of instances cannot be solved by just a single iteration. The second run – with a reduced capacity – leads to a feasible solution, however.

For all problem instances tested, the computation times of the decomposition approaches were favorable as compared to TAPLS and TA-GLPK. Unfortunately, Table 1 has shown that this does not hold true for every instance for the solution quality, even when only looking at the better solution method TA-agg4. For the problem instances T08 and T09, TAPLS performed best in terms of average solution quality. Amongst them problem T08 seems to be especially difficult because of its worse percentage deviation from the best objective value and because the priority-based decomposition never found a feasible solution for this instance after the first iteration (see Table 2 for max
                           =1). Thus problem instance T08 will be investigated in more detail in the next section.

For problem instance T08 additionally 500 runs of the different solution methods have been executed. The results of these tests are shown in Fig. 3
                           . In order to allow a better comparison of the solution methods, a different way of illustrating the results has been chosen. Fig. 3 shows the improvement of a solution method’s solution quality as a function of computation time – thus allowing to compare the two conflicting objectives “quality” and “time” simultaneously. For this purpose, again the average percentage deviation of a solution method’s objective value from the best objective value found overall is measured. However, now this is done for “packages” of several runs of an algorithm that have been executed consecutively. The best objective value of any run within a package determines the objective value of the package as a whole. Whereas the sum of the computation times of the package’s runs determines the overall computation time of the package. Packages of the same size (i.e., with the same number of runs) are averaged. Their average computation times (s) constitute the x-values of Fig. 3, while the average deviations (%) define the y-values.

A more precise definition shall ease understanding: Let k
                           =1,…, K denote several independent runs of a certain heuristic h that have been executed. Let 
                              
                                 
                                    
                                       rd
                                    
                                    
                                       k
                                    
                                    
                                       h
                                    
                                 
                              
                            denote the (percentage) deviation of the best objective function value that has been found by heuristic h within run k from the best solution found overall. Let 
                              
                                 
                                    
                                       rc
                                    
                                    
                                       k
                                    
                                    
                                       h
                                    
                                 
                              
                            denote the computation time of this run k of heuristic h. K times after each other, for s
                           =1,…, K, the overall sequence of K runs is partitioned into packages n
                           =1, …, N(s) of different sizes s where 
                              
                                 N
                                 (
                                 s
                                 )
                                 ≔
                                 
                                    
                                       
                                          
                                             
                                                K
                                             
                                             
                                                s
                                             
                                          
                                       
                                    
                                 
                              
                           . For example, all K runs are first partitioned into n
                           =1,…, K packages of size s
                           =1 and later into a single package of size s
                           =
                           K. All other integer package sizes in between are subsequently handled, too. The objective value of package n for heuristic h is given by the deviation of the best run within this package. For a partitioning into packages of size s its value 
                              
                                 
                                    
                                       pd
                                    
                                    
                                       n
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                              
                            can be computed by 
                              
                                 
                                    
                                       pd
                                    
                                    
                                       n
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                                 ≔
                                 
                                    
                                       min
                                    
                                    
                                       k
                                       =
                                       (
                                       n
                                       -
                                       1
                                       )
                                       ·
                                       s
                                       +
                                       1
                                    
                                    
                                       n
                                       ·
                                       s
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                rd
                                             
                                             
                                                k
                                             
                                             
                                                h
                                             
                                          
                                       
                                    
                                 
                              
                            for n
                           =1,…, N(s). In contrary, the computation time of a package is given by the sum of the computation times of all runs within the package. Thus, for a partitioning into packages of size s, the computation time 
                              
                                 
                                    
                                       pc
                                    
                                    
                                       n
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                              
                            of package n of the heuristic h can be computed according to 
                              
                                 
                                    
                                       pc
                                    
                                    
                                       n
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                                 ≔
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       =
                                       (
                                       n
                                       -
                                       1
                                       )
                                       ·
                                       s
                                       +
                                       1
                                    
                                    
                                       n
                                       ·
                                       s
                                    
                                 
                                 
                                    
                                       rc
                                    
                                    
                                       k
                                    
                                    
                                       h
                                    
                                 
                              
                            for n
                           =1,…, N(s).

For each size s, the packages n
                           =1,…, N(s) represent observations of N(s) random processes. Therefore, we are interested in their average values. Thus, the average deviation 
                              
                                 
                                    
                                       
                                          
                                             pd
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                              
                            of a package containing s runs of heuristic h is computed by 
                              
                                 
                                    
                                       
                                          
                                             pd
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                                 ≔
                                 
                                    
                                       1
                                    
                                    
                                       N
                                       (
                                       s
                                       )
                                    
                                 
                                 
                                    
                                       ∑
                                    
                                    
                                       n
                                       =
                                       1
                                    
                                    
                                       N
                                       (
                                       s
                                       )
                                    
                                 
                                 
                                    
                                       pd
                                    
                                    
                                       n
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                              
                            for s
                           =1,…, K. Analogically, the average computation time 
                              
                                 
                                    
                                       
                                          
                                             pc
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                              
                            of a package containing s runs of heuristic h is calculated by 
                              
                                 
                                    
                                       
                                          
                                             pc
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                                 ≔
                                 
                                    
                                       1
                                    
                                    
                                       N
                                       (
                                       s
                                       )
                                    
                                 
                                 
                                    
                                       ∑
                                    
                                    
                                       n
                                       =
                                       1
                                    
                                    
                                       N
                                       (
                                       s
                                       )
                                    
                                 
                                 
                                    
                                       pc
                                    
                                    
                                       n
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                              
                            for s
                           =1, …, K. Table 3
                            shows an example for K
                           =4 runs, subsequently being partitioned into N(1)=4 packages of size s
                           =1, into N(2)=2 packages of size s
                           =2 and into N(3)=
                           N(4)=1 package of sizes s
                           =3 and s
                           =4, respectively. Note that the smaller the package size, the more observations are available. For this reason – and because computation times of packages should not grow too much – we are mainly interested in packages of small size. As already mentioned, [37] worked with packages of size s
                           =25 runs when applying TADR.

For K
                           =500, the values 
                              
                                 (
                                 
                                    
                                       
                                          
                                             pc
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          
                                             pd
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                                 )
                              
                            mark the (x,y)-coordinates of the heuristics h
                           =
                           TAPLS,… in Fig. 3, starting with s
                           =1,2,… from left to right. For ease of illustration, these coordinates have been connected by straight lines for each heuristic h. For example, the average computation time 
                              
                                 
                                    
                                       
                                          
                                             pc
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                              
                            of a single run s
                           =1 of h
                           =
                           TA
                           −
                           GLPK is about 84s with an average objective deviation 
                              
                                 
                                    
                                       
                                          
                                             pd
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                              
                            of 9.8%. The average time 
                              
                                 
                                    
                                       
                                          
                                             pc
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       h
                                       ,
                                       s
                                    
                                 
                              
                            of a package of s
                           =2 runs is 167s with an average objective deviation 
                              
                                 
                                    
                                       
                                          
                                             pd
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       h
                                       ,
                                       2
                                    
                                 
                              
                            of 8.5%, etc. The closer to the left bottom corner the graph (resulting from connecting these data points) is, the better the respective algorithm performs in terms of both solution quality and computation time.

Note that the results of Table 1 can be retrieved from the left hand extreme data points of each algorithm if the same data basis is used. However, here slight differences occur because for Fig. 3 a substantially higher number of runs had to be executed (leading to other averages).

Now it can be seen that TA-agg4 is not only preferable to TA-GLPK but also to TAPLS because for a certain computation time given it always leads to solutions of higher quality. The results of Table 1 were misleading because TAPLS is so slow that no objective values are available within the time necessary for a single run of TA-agg4. Around 5–6 runs of TA-agg4 can be executed during a single run of TAPLS, which together lead to clearly better objective values.

Additionally to TA-agg4 also results for aggregation factors f
                           =2 and f
                           =1 are shown in Fig. 3. An aggregation factor f
                           =1 not only means that first TA-GLPK is solved in order to assign items to production lines and afterwards the decomposed single-line problems are (re-)optimized by TADR. If this does not bring up a feasible solution, additionally the line assignment of TA-GLPK is executed a second time for a reduced capacity in bottleneck periods on bottleneck lines, etc. Of course, a better solution quality can be expected then. However computation times may also increase. Fig. 3 shows that TA-GLPK can clearly be improved using this strategy. However, a further improvement can be gained by choosing an aggregation factor of 2. TA-agg2 obviously outperforms all other solution methods for problem instance T08. For the above tests, a threshold multiplier TM
                           =2000 had been used. The next section will investigate whether the above findings also hold for other thresholds.

In order to check this, we first stay at the single “difficult” problem T08 and then verify whether these results also hold for the remaining medium-sized problem instances.


                           Fig. 4
                            shows TAPLS and TA-GLPK not only for the threshold multiplier TM
                           =2000, but also for a prolonged local search with TM
                           =6000. As can be seen, the performance of TAPLS is not very sensitive on the thresholds used. With TAPLS and TM
                           =2000 feasible solutions can obviously be found earlier. But for higher computation times thresholds of TM
                           =6000 lead to more or less the same objective level. This is different for TA-GLPK. Its (new) implementation of threshold accepting indeed depends on the thresholds chosen. A higher multiplier TM clearly not only leads to a better overall objective level, but also improves the solution quality for a certain computation time given.

This should be investigated more thoroughly for other threshold multipliers and our different alternatives of aggregating by time. Unfortunately, a graphical illustration of the solution performance as used in Figs. 3 and 4 quickly loses it clarity when the number of solution methods increases. Thus it is necessary to condense the information given by each graph (solution method) of the figures into a single number. For this, for each solution method the convex hull of its data points (average objective value and computation time per package size) is determined. Additionally, the convex hull of all data points of all solution methods to be compared is determined. The latter one expresses the “best” objective value that could be reached with any tested solution method for a certain computation time. Finally, for each solution method the average vertical distance between its convex hull and the “best” convex hull of all data points is measured and set into percentage relation to the best convex hull’s objective level. The corresponding measure will be denoted as the “Average percentage Deviation of the best Objective Line (ADOL)” in the following. The upper left section of Table 4
                            shows the ADOLs for the solution methods that result from running TAPLS, TA-GLPK and TA-agg (aggregation factors 1, 2 and 4) with threshold multipliers TM
                           =100, 2000, and 6000 up to 7200s. Additionally, in the upper right section the average computation times CPU1 (s) are shown that are necessary to find a first feasible solution with each combination of algorithm and threshold. They give an impression of the computational efforts that are necessary. (Please ignore the columns th for the moment.)

First we should check whether the ADOLs really express the intended information content. When comparing the column TM
                           =2000 of Table 4 with Fig. 3 it can be seen that TA-agg2 indeed performs best and TAPLS and TA-GLPK are clearly worst. However, looking at the ADOLs of TA-agg1 and TA-agg4, the ADOL of TA-agg1 seems better than Fig. 3 indicates on the first sight. Nevertheless, the ADOLs measure correctly because they represent the average deviation over the longer horizon of 7200s also underlying Fig. 4. As Fig. 4 has further shown, the ADOLs of TAPLS for TM
                           =2000 and TM
                           =6000 have to be quite close to each other which is indeed the case (3.1 and 2.7, respectively). Finally, the larger gap between the corresponding ADOLs of TA-GLPK (3.8 and 2.4) again indicates the higher sensitivity of TA-GLPK with respect to a variation of threshold values.

Looking again at the upper left section of Table 4 one can see that TA-GLPK only seems to be competitive to TAPLS if a high threshold multiplier is used. For TM
                           =100 and TM
                           =2000 TAPLS is favorable. However, time aggregation is always the best choice, i.e., for each aggregation factor and threshold multiplier the ADOLs of TA-agg are better than the corresponding TA-GLPK and TAPLS values. Among the different aggregation possibilities an aggregation factor of 2 performs best. There seems to be an interesting correlation between aggregation factors and threshold multipliers (bold diagonal values in Table 4 marking the five best combinations of TA-agg1, TA-agg2 or TA-agg4 with thresholds TM
                           =100, 2000 or 6000): the higher the aggregation is the smaller the threshold multipliers can and should be, respectively. The reason is probably that due to the aggregation error and corresponding loss of information it does not make sense to solve the aggregate problem too accurately. This computation time should better be invested to execute more “short runs” and draw advantage of the variance of solutions generated.

It would be tedious to determine a suitable threshold multiplier TM for every problem instance to be solved, separately, by running experiments on a discrete grid of potential multipliers. Instead it would be helpful to calculate an appropriate multiplier automatically from a problem instance’s characteristics like the number of products J, number of production lines L, and number of macroperiods T. In order to identify such a relation, some tests – for sake of brevity not further described here – have been executed for a selected set of test problems. The result was that a threshold multiplier TM should be determined according to the function TM(J,
                           L,
                           T) ≔ max{250; max{⌊f
                           (T)⌋;1}·
                           J
                           ·
                           T
                           ·
                           L} with f(t) being a polynomial of the form f(t)=
                           a
                           ·
                           t
                           2
                           +
                           b
                           ·
                           t
                           +
                           c. Its coefficients a
                           =−0.000744, b
                           =−0.053571, and c
                           =12.476190 have been calculated by solving the linear system of equations y
                           =
                           f(a,
                           b,
                           c,
                           x) for the three sample points (x;y)=(8;12), (32;10), and (64;5) measured in the tests. The columns th of Table 4 show the results when TM has been calculated automatically according to this function. As can be seen this choice results in high quality solutions for problem instance T08 while the computation times for finding a first solution are still acceptable.

Whereas ∣S
                           
                              lt
                           ∣ had – as in [38] – been set to 20 for all problem instances until now in order to allow each product to be produced at least once per line, this was changed to 
                              
                                 
                                    
                                       max
                                    
                                    
                                       l
                                    
                                 
                                 
                                    
                                       
                                          1
                                          +
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                
                                                   
                                                      
                                                         
                                                            J
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                   
                                                      l
                                                   
                                                
                                             
                                          
                                          
                                             
                                                1
                                             
                                             
                                                |
                                                
                                                   
                                                      
                                                         
                                                            L
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                   
                                                      j
                                                   
                                                
                                                |
                                             
                                          
                                       
                                    
                                 
                              
                            if L
                           >1 and to J if L
                           =1 for all solution methods of Table 4 that end with “-s”. Here 
                              
                                 
                                    
                                       
                                          
                                             J
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       l
                                    
                                 
                              
                            denotes the set of products that can be produced on line l and 
                              
                                 
                                    
                                       
                                          
                                             L
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       j
                                    
                                 
                              
                            denotes the set of lines, product j can be produced on. The idea is that in a “good solution” the products are more or less evenly spread over their parallel lines and only a few ones connect the lines in order to increase flexibility. Thus, also the number of microperiods per macroperiod can be set automatically now – for TA-GLPK as well as for the aggregate multi-line and decomposed single-line models of TA-agg. This leads almost always to an improvement of the ADOL. The only exceptions are TA-agg2 in the automatic version th and TA-agg4 in combination with TM
                           =2000 and TM
                           =6000, i.e., when both aggregation level and intensity of local search are highest. Interestingly, decreasing ∣S
                           
                              lt
                           ∣ by automatically setting it does not necessarily help to get a first solution faster. TA-agg2 and the aggregation factor 2 also perform best for the “-s” versions. Using TM
                           =100 it is possible to compute good solutions very quickly. But TM
                           =2000 and the automatic threshold th also allow very good solutions in an acceptable computation time for getting a first solution.


                           Table 5
                            verifies whether the results of the single problem instance T08 can be generalized for all twelve medium-sized problem instances. It uses the measures introduced in Section 5.2.1 and in Table 4. However, the ADOLs and CPU1 computation times are now averaged over all twelve problem instances T01,…, T12. At least 4500 runs for TM
                           =100, 500 runs for TM
                           =2000 and 200 runs for TM
                           =6000 have been executed per problem instance and heuristic.

As can be seen most of the statements for T08 can be confirmed: TA-GLPK is only competitive to TAPLS if a high threshold multiplier is used, but time aggregation is always the better choice. The higher the aggregation is the smaller the threshold multipliers should be. When comparing the average performance over all threshold multipliers, the aggregation factor 2 still does best. The automatic choice of threshold multipliers in the th versions shows good results. The automatic choice of the number of microperiods per macroperiods in the “-s” version leads to a better solution quality, but does not necessarily help to find a first solution earlier.

However, there is also an interesting difference: the overall best performance is achieved when combining the shortest threshold TM
                           =100 with the highest aggregation factor 4. Both TA-agg4-s and TA-agg4 not only perform best in terms of the ADOL (0.1% and 0.4%, respectively), but also show very short computation times CPU1 to find a first feasible solution (4 and 7s, respectively). When looking at all problem instances the differences between the aggregation factors 2 and 4 are by far smaller than it was the case in Section 5.2.1 and Table 4. Since T08 can be assumed to be a rather “difficult” problem instance, the remaining rather “simple” instances obviously profit from a higher aggregation.

Finally we consider four “large” real world problems, T13,…, T16, that arose from cooperations with practice during the past years. All of them deal with several heterogeneous, parallel production lines, significant sequence-dependent setup costs and setup times, and tight line capacities. The first instance T13 stems from producing incontinence pads in health care industry. J
                        =10 setup families are produced on L
                        =3 parallel production lines. Here, the GLSPPL is solved to support mid-term master planning [23, Chapter 3.2.3]. Thus the planning horizon consists of T
                        =48weeks as macroperiods. The instances T14 and T15 originate from acrylic glass production. They have been introduced by [36, Chapter 7.2.2.4], comprising also J
                        =3 production lines, but T
                        =12months each. In T14 the final items to be considered have been aggregated to J
                        =12 setup families. Since the setup times of one to two hours within the families are still rather high, solving the original (disaggregate) problem for the J
                        =51 individual final items is desired. Instance T15 represents this target. Last, T16 tackles the problem of printing labels that get stuck on consumer goods like food, cosmetics, or household detergents. Here L
                        =7 production lines are available to produce a total of J
                        =72 setup families. The planning horizon again consists of T
                        =12months.


                        Table 6
                         shows the results when applying the most successful thresholds and algorithms of Section 5.2, i.e., TA-GLPK-s and TA-agg-s with aggregation factors 1, 2 and 4, to these instances. TAPLS leads to inferior results for these problem sizes and its computation times soon get prohibitive. Thus, TAPLS has not systematically been tested for T13,…, T16 anymore. Nevertheless, sporadic tests have confirmed these insights.

For each problem instance the – according to the ADOL – best three combinations of algorithms/ thresholds and their respective computation times CPU1 are marked bold. If both ADOL and CPU1 do not contain a value, no feasible solution has been found at all for this combination. If CPU1 is marked with “>2h” and ADOL does not contain an entry, feasible solutions have been found, but not within the time limit of 7200s that has again been used to compute and fairly compare the ADOLs. Note that the computation times for the th-variants of instance T16 can grow up to more than one day in the extreme case. Therefore, an automatic computation of the thresholds according to Section 5.2 seems mainly helpful for instances up to the size of problems T13 and T14.

Looking at all problem instances, here TA-agg1-s performs best. For every problem instance at least one TA-agg1-s combination can be found within the best three ADOLs, for T14 even all three. The capacity reduction (if no feasible solution has been found during the first iteration of the “aggregate” problem) and the reoptimization of the single-line problems by TADR prove to be advantageous as compared to TA-GLPK-s. Unfortunately, computation times can get quite high if threshold multipliers TM
                        ⩾2000 are used.

Higher aggregation with factors of 2 and 4 generates quite good values, again, if a small threshold multiplier TM
                        =100 is used. For the rather small instances T13 and T14 very short running times to compute a first feasible solution (< 20s) can be realized this way. However, for the larger instances T15 and T16 the computation times of TM
                        =100 can become quite long because the share of infeasible solutions increases. Nevertheless, even for these very large instances an acceptable compromise between solution quality and computation time for a first solution can be found if TA-agg4-s is combined with TM
                        =100 or TA-agg1-s is combined with TM
                        =2000. In the first case a running time of less than 15 and in the second case of less than 40min can be realized on average to get a first feasible solution. When considering the fact that the GLSPPL is intended for mid-term master planning instead of short-term operational scheduling in these practical applications, this still appears to be acceptable.

A new solution method to the General Lotsizing and Scheduling Problem for Parallel production Lines (GLSPPL) has been introduced. The GLSPPL addresses the problem of simultaneously determining the sizes and schedules of production lots on non-identical, parallel production lines when sequence-dependent setup times reduce the limited capacities of the production lines, deterministic, dynamic demand has to be met without backlogging, and inventory holding, sequence-dependent setup and production costs are to be minimized. The novel solution method iteratively decomposes the multi-line “master problem” into a series of single-line subproblems, which can quite efficiently be solved by the solution heuristic TADR proposed in [37]. Two different methods for modifying the capacities of the multi-line master problem between two different iterations have been proposed. While the first one applies a fixed capacity reduction, the second one variably reacts on capacity overloads of the single-line production plans. Similarly, two different approaches – a priority-based and an aggregation-based approach – for decomposing the multi-line problem into single-line subproblems have been introduced. These different solution methods have been tested for varying parameter configurations and have been compared with TAPLS, a competing solution heuristic for the GLSPPL proposed in [38].

The computational tests show the superiority of the decomposition-based approach. It is faster and generates higher-quality solutions than TAPLS. This especially holds true if the problem size increases. Using the decomposition it is possible to find feasible solutions for large practical problem instances that are not solvable with TAPLS in a reasonable computation time. In particular, a variable reduction of capacity and an aggregation-based decomposition can be recommended. The aggregation-based decomposition requires to solve an aggregate master GLSPPL of reduced size by means of the local search meta-heuristic threshold accepting. Then, the corresponding thresholds and the level of aggregation have to be aligned. Interestingly, “short” thresholds, allowing fast computation times, come along with high levels of aggregation and vice versa. A procedure to automatically balance this relationship has been proposed.

To be more specific: The shortest threshold (expressed by a low “threshold multiplier” TM
                     =100) and the most aggregating heuristic TA-agg4-s (showing an aggregation factor of 4) performed best on average when medium-sized problem instances were tested. This combination has also shown to be a good compromise between solution quality and computation time to find a first feasible solution for all other instances. However, an aggregation factor of 2 combined with a higher threshold multiplier TM
                     =2000 was able to further improve the solution quality for the rather difficult medium-sized problem instance T08. The same effect occurred when combining an aggregation factor of 1 with TM
                     =2000 for the even larger practical problem instances of Section 5.3. Thus it seems beneficial to lower the aggregation level and simultaneously increase the threshold multipliers if problems grow larger and get more difficult.

For the future, it appears promising to test other types of decomposition and aggregation. For example, production coefficients could be increased instead of reducing capacities when iterating between the multi-line master problem and the single-line subproblems. This would allow a more specific tuning of the modified master problem. Furthermore, a product-based aggregation instead of or additionally to the current time-based aggregation might be interesting. This would resemble the building of setup families, which is very common in practice, anyway. The decomposition-based approach is also open for further extensions of the GLSPPL. The embedding of general LPs into the dual reoptimization context of threshold accepting, as it has been done for TA-GLPK (see Section 4), allows to tackle any kind of SLS problem. By replacing TADR with such a method in step 2 of Fig. 1, the decomposition approach could be adapted for extensions of the GLSPPL like time-indexed holding costs, time-indexed production coefficients, backlogging, or overtime.

@&#ACKNOWLEDGMENTS@&#

The authors are grateful to Tomasz Bobinski, Fridolin Lander, and Daniel Müller for their helpful support in adapting the TAPLS code to TA-GLPK.

@&#REFERENCES@&#

