@&#MAIN-TITLE@&#The complex task of choosing a de novo assembly: Lessons from fungal genomes

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           Three key parameters of a typical short read sequencing and de novo assembly design are the read length, the insert size and a bioinformatic parameter, the k-mer length (k); k is easy to modify, and one can monitor the effects of its variation before choosing a final k-mer length or assembly.


                        
                        
                           
                           The success and the complexity of a de novo genome assembly task depend on one's needs or priorities: gene space, all the unique DNA, or entire genome with all its repeats.


                        
                        
                           
                           When one restricts a fungal de novo assembly task to a mapping of the gene space by reliable sequences, k often plays only a very minor role, but a correct choice of k can be far from trivial if one needs to map the genome's repetitive regions.


                        
                        
                           
                           Plotting metrics that assess presence of DNA and its genes and repeats in a de novo assembly versus k-mer length used can give valuable insight into an assembly process and its variation.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Genome assembly methods

Repetitive DNA

Next-generation sequencing

@&#ABSTRACT@&#


               
               
                  Selecting the values of parameters used by de novo genomic assembly programs, or choosing an optimal de novo assembly from several runs obtained with different parameters or programs, are tasks that can require complex decision-making. A key parameter that must be supplied to typical next generation sequencing (NGS) assemblers is the k-mer length, i.e., the word size that determines which de Bruijn graph the program should map out and use. The topic of assembly selection criteria was recently revisited in the Assemblathon 2 study (Bradnam et al., 2013). Although no clear message was delivered with regard to optimal k-mer lengths, it was shown with examples that it is sometimes important to decide if one is most interested in optimizing the sequences of protein-coding genes (the gene space) or in optimizing the whole genome sequence including the intergenic DNA, as what is best for one criterion may not be best for the other. In the present study, our aim was to better understand how the assembly of unicellular fungi (which are typically intermediate in size and complexity between prokaryotes and metazoan eukaryotes) can change as one varies the k-mer values over a wide range. We used two different de novo assembly programs (SOAPdenovo2 and ABySS), and simple assembly metrics that also focused on success in assembling the gene space and repetitive elements. A recent increase in Illumina read length to around 150bp allowed us to attempt de novo assemblies with a larger range of k-mers, up to 127bp. We applied these methods to Illumina paired-end sequencing read sets of fungal strains of Paracoccidioides brasiliensis and other species. By visualizing the results in simple plots, we were able to track the effect of changing k-mer size and assembly program, and to demonstrate how such plots can readily reveal discontinuities or other unexpected characteristics that assembly programs can present in practice, especially when they are used in a traditional molecular microbiology laboratory with a ‘genomics corner’. Here we propose and apply a component of a first pass validation methodology for benchmarking and understanding fungal genome de novo assembly processes.
               
            

@&#INTRODUCTION@&#

“Complexity” is, itself, a complex concept. In a review of complexity and its measures in the context of DNA, Li (1997) has correctly pointed out the need to occasionally return to first principles when considering which, if any, of the more widely used (and sometimes not fully interchangeable) definitions of complexity is most relevant to a given task at hand. Indeed, the task itself can be used to define a measure of complexity of a genome (or other object), namely the difficulty of accomplishing that task on the genome (Li, 1997and refs. therein).

A task associated with eukaryotic genomics that has become increasingly important for individual laboratories as DNA sequencing costs continue their decrease is the task of obtaining a reliable, annotated de novo assembly of a genome of a species, isolate/strain/population or, especially in large metazoans, of an individual. Depending on the questions one wishes to answer by obtaining genome sequences, in some contexts one may be interested primarily in obtaining the sequences of all genes or coding regions of the genome being studied; in other contexts one may also need to obtain the unique intergenic regions that could be relevant for the genes’ expression such as promoters and enhancers; finally, one's aim may be to offer to the community a ‘full’ reference sequence for a genome, including as much of its repeat landscape as is feasible given the available technology, time and funds. The optimal design or simulation of a sequencing strategy, and indeed the ‘complexity of the genome’ one faces, can vary depending on the precise task of interest.

Clearly it can be of much utility if one can design, compare and then choose a relatively optimal sequencing strategy together with the subsequent steps of assembly and annotation, before embarking on the actual library preparation and sequencing (Muñoz et al., 2014). For this one needs to know what one wants most, e.g., what cost-effectiveness, cost–utility or cost–benefit tradeoffs (Drummond et al., 2005) one is prepared to make, and what sequencing technologies, options, and hardware configurations are available to one's laboratory.

There have been promises of what the next NGS generation (post-next generation sequencing, or third/fourth generation sequencing), will soon be able to offer. Some of the promises still need to be fulfilled, however. As a recent article in Science (Pennisi, 2014) has emphasized, because of various delays we have still not fully arrived at the goal of empowering small laboratories to enjoy reliable, stand-alone implementations of the projected new technologies that fit within their often modest budget.

In this article, we therefore focused on a second generation technology, Illumina short read sequencing (single or paired-end reads), a widely used solution that has consistently remained accessible and typically reliable now for several years, for which costs charged by some service providers have decreased, and for which read lengths have recently increased to about 150bp. Insights obtained for this specific technology can be partly generalized or extrapolated, mutatis mutandis, to other read sequencing technologies that also use de Bruijn graph-based assembly methods (Compeau et al., 2011). Also, a recent analysis by Li et al. (2014) in the context of reference assembly, showing that mappability of reads (or r-mers) to reference sequences does not markedly improve above read lengths r of 150–200bp, could suggest that at least some findings for de novo assembly of currently available (≈150bp) reads might extrapolate well to longer Illumina reads that may be available in future.

We will restrict our genomic context to unicellular fungi, eukaryotes that have served as models of metazoan eukaryotes (including human) in many respects including disease (Bassett et al., 1996; Foury, 1997), and that represent an intermediate in size and complexity between the genomes of prokaryotes (bacteria or archea) and those of vertebrates and flowering plants. Since the prime model fungus, the baker's yeast S. cerevisiae, has a relatively compact nuclear genome, we break with tradition by choosing as our main example another, less compact fungal genome that has recently been fully sequenced, assembled and annotated (Desjardins et al., 2011), the thermally dimorphic human pathogenic fungus Paracoccidioides brasiliensis. Its nuclear genome has a larger size and contains more repetitive DNA than yeast, and in this respect it may be more representative of other eukaryotes and their assembly challenges.

In short read sequencing of such genomes, and the subsequent processing of the reads, there are at least three stable, key parameters that can currently be considered fundamental (Fig. 1
                     ). Other measures or parameters determining the success of an assembly include measures pertaining to read depth or coverage, and non-tunable measures reflecting the repeat structure or profiles of the genome itself.

Two of the key parameters depicted in Fig. 1 are sequencing-related, namely the read size r and, if paired-end reads are used as part of the design, also the insert size I of the insert library. In actual practice, where there is a spread of insert sizes, one can take the mean insert size, i.e., the average fragment size <I
                     o>, to represent the insert size (see Fig. 1), or one can include more information ranging from the standard deviation to an estimate of the full frequency distribution of fragment lengths given by an electropherogram.

The third key parameter depicted in Fig. 1 is a bioinformatic parameter that is used only after the sequencing of the raw reads is done, the so-called k-mer length, or k. This parameter is the length of a read's fixed-length subsequences, or words, that are used in the de Bruijn graph-based assembly steps that form a part of most modern, widely used short-read assembly programs (Compeau et al., 2011). Given the value of k, the assembly program traces out from the reads the corresponding regions of a full de Bruijn graph over an alphabet of size 4 (i.e., 0,1,2,3 or A,C,G,T) and dimension k (Berge, 2001, p. 167 ff.). In this way, flows on the de Bruijn graph correspond to successive 1-step shifts of a window of size k traversing a sequence. At least conceptually, one needs to generalize the de Bruijn graph because reverse complements should not be counted twice (Medvedev and Brudno (2009), cf. also Deng and Wu (2005)). Implementations differ, but they all involve steps in which regions of a full de Bruijn or de Bruijn-like graph are traced out by the reads and the flows are recorded (see Muñoz et al. (2014) and refs. therein). Which de Bruijn-like graph is partially constructed is decided by the parameter k. The value of k can also be thought of as the ‘window size’ through which these steps of the assembly program ‘see’ the reads. A further consideration, which different assembly programs may deal with in different ways, is the additional constraint on the possible assemblies imposed by the pairing of the reads, i.e., by the knowledge of which reads are paired, together with the knowledge of the frequency distribution of the insert/fragment sizes in the library used for sequencing: this is where the experimental parameter I is needed.

The ability to wisely choose options and parameters ensuring a good de novo assembly is a valuable asset when designing a sequencing project for a fungal genome. One sometimes needs to consider bioinformatic options or parameters at the same time as one chooses experimental details for the initial read sequencing (as one would do when writing a grant proposal). Given a selected fungal organism (species and strain/isolate) and a particular experimental strategy, which for Illumina short-read sequencing will always involve choosing read length r and usually also insert length(s) I, what assembly and annotation quality could we expect in the best possible case? A closely related reference species’ existing assembly or reads, where available, can often help answer this question in silico. Simulated reads can be obtained from the scaffolds by in silico ‘sonication’ and fed to a series of different assembly and annotation runs with different parameters/choices, thus averting unpleasant surprises later, such as the discovery that one's choice of read or insert length was inherently unsuited for the chosen genome and task. Low and high k values may have different advantages and drawbacks.

The problem addressed here, the choice of an assembler and ‘k strategy’, or the choice of an assembly from a set of assemblies obtained from the same reads using different strategies, is indeed a complex one, depending also on the repeat complexities of the genome of interest, as is now finally being acknowledged (see, e.g., Haznedaroglu et al. (2012) and refs. therein). In a single contribution presenting original data it would be very difficult to do justice to this complex problem if one insists on also maintaining generality, providing an exhaustive review, or suggesting general guidelines that one cannot feasibly alpha-test. In this contribution, we therefore choose a restricted context, and report results from an initial exploration of fungal assemblies from real reads, using two widely used assembly programs or pipelines that were run over a wide range of k-mer lengths: the SOAPdenovo2 pipeline (up to but not including the final GapCloser run; Luo et al. (2012)) and the ABySS program (Simpson et al., 2009). We imagine a typical molecular microbiology laboratory endowed with a medium-sized grant to initiate constructive genomics work (e.g., a server with no more than 64GB RAM), and having no bioinformatic ‘insider information’ or dedicated informatic personnel, i.e., no access to tips, tricks or ‘tweaks’ that are not available in the public domain. Although Illumina read-based quality reports and other analytical studies have been offered before, to our knowledge few if any focused on non-model fungi having repeat-rich genomes, or 150bp read sets; including such realistic and timely features that are likely to reflect real in-house genomics projects allows us to obtain a wider picture.


                        Paracoccidioides brasiliensis strains Pb113, Pb1445 and PbBAC were sequenced using an Illumina HiSeq 2500 sequencer, with 150bp paired-end reads and a nominal length (insert size) of 620bp. Insert library construction and sequencing were performed at the DNA Services facilities of the University of Illinois at Urbana-Champaign.


                        Saccharomyces cerevisiae strain S288c paired-end reads were downloaded from the NCBI Sequence Read Archive (SRA), Experiment ERX240932, Run ERR266425. The reads were sequenced using Illumina HiSeq 2000 with a nominal length (insert size) of 450bp and a read length of 144bp.

Although plots are shown here only for P. brasiliensis strain Pb113 as an example, full plots were also obtained for the other two P. brasiliensis strains and the S. cerevisiae strain, with corresponding findings.

For comparing SOAPdenovo2 metrics at the observed jump from 49bp ≤k≤ 51bp for a third fungal genus, paired-end Illumina reads (read length 101bp) of Emmonsia crescens strain UAMH 4076 and Emmonsia parva strain UAMH 130 were used. Insert library construction and sequencing with a HiSeq 2000 sequencer were performed at the Broad Institute, Cambridge, MA (collaborative paper in preparation; NCBI Bioproject PRJNA179100).

The program SOAPdenovo version 2.04-r240 (SOAPdenovo2; Linux binary for k values up to 127bp) was used with all odd (i.e., allowed) k-mer values from 17bp to 127bp. The assemblies were run essentially using default parameters (except for the k-mer values), only modifying the config files with the corresponding read lengths and insert sizes, along with the maximum read length as the read length. The recommended SOAPdenovo2 pipeline also includes the programs KmerFreq and Corrector (SOAPec_v2.01), which are run prior to calling the SOAPdenovo2 program, and GapCloser, which is run after SOAPdenovo2 as a final step. Paradoxically, however, KmerFreq comes with no clear recommendations for pre-piping reads for which one wants SOAPdenovo2 to use high k values (e.g., around 50): KmerFreq_HA does not accept k values above 27, and KmerFreq_AR uses 4GB RAM for k=17, 256GB RAM for k=19, etc., and so is not useful in normal practice even at moderately high k values. In both variants of KmerFreq, the defaults were 17, so we used that value for all assemblies in KmerFreq_AR (-k 17-q 33-t 10) and Corrector_AR (-k 17-l 3-Q 33-r 50-t 12). Because we wanted to focus on the processes of the core assembly program, we did not attempt to close the gaps remaining after SOAPdenovo2 by running GapCloser.

ABySS version 1.3.7 was used with all odd k-mer values from 17bp to 127bp. The assemblies were run using default parameters.

BLASTX version 2.2.28+ was run locally with default settings using protein sets from reference annotations as the database, and the 17–127bp k-mer assemblies were the query.

Augustus (Keller et al., 2011, http://bioinf.uni-greifswald.de/augustus/) was used for fully automated gene calling on each assembly.

RepeatMasker version open-4.0.3 was used to detect repetitive elements in each assembly using the fungal repeats data set from Repbase.

LTR_Finder version 1.0.5 (tlife.fudan.edu.cn/ltr_finder/) was used to find long terminal repeat (LTR) transposons in each assembly, with default settings.

@&#RESULTS@&#

We used the SOAPdenovo2 pipeline (without GapCloser post-processing) and the ABySS program/pipeline to generate a large number of assemblies of paired-end Illumina reads for each fungal genome of interest, and then compare those assemblies via a series of bulk DNA based, gene-based and repeat-based metrics. To make descriptions simple and uniform, throughout the main text of this paper we will loosely refer to all final (i.e., maximally extended or joined) sequences of the assembly that are delivered by the two pipelines as scaffolds, although (at least for SOAPdenovo2) some of these long sequences are technically contigs.

The four fungal genomes we chose for detailed analytics were three strains of a human pathogen endemic to several regions of South America, P. brasiliensis (Pb113 from Brazil, Pb1445 from Argentina and PbBAC from Colombia; for the genome of other conspecific strains, see Desjardins et al. (2011)), and the model strain S288c of the baker's yeast S. cerevisiae (for the genome assembly and complexity analyses of this strain, see (Goffeau et al., 1996; Li et al., 1998; Román-Roldán et al., 1998; Li, 1997)).

For reads of 150bp, we ran each of the two assembly programs for every possible odd k-mer length from 17bp to 127bp, resulting in a total of 112 assemblies for each genome. For reads shorter than 150bp, we ran the assemblies over a correspondingly smaller range of k values.

The resulting plots of four simple bulk DNA metrics are shown for the assemblies from reads (150bp) of P. brasiliensis isolate Pb113 in Fig. 2
                        . It can be seen that whereas in all plots for the ABySS runs the k-dependence is relatively smooth, and in two metrics (assembly size and scaffold number) completely monotone, the shapes of all four SOAPdenovo2 plots are more jagged, suggesting underlying complexity in the ways this pipeline or some of its algorithms handle the Illumina reads at different k-mer sizes. In particular, such plots dispel the notion that any assembly program will invariably have a single, smooth local maximum near a traditional k-mer value, and that exploring assemblies at k-mer values farther away will merely give predictable or irrelevant results. Without having to delve into the details of an assembly program's source code, which is a complex venture even where the program is open source, we already have a first, graphic overview of how the program behaves and ‘reacts’ to changes in the key parameter k.

Two of the four SOAPdenovo2 plots exhibit at least one characteristic jump or ‘cliff’ for Pb113. Interestingly, N50, which has been one of the most widely used metrics for such plots, does not reveal the characteristic jump(s) here. Where longest scaffold is the metric, the ‘Arizona butte’ landscape one sees in this particular example was not a surprise, as scaffolds tend to terminate at ‘weak spots’ (e.g., non-unique regions) of the genome that are often far apart. By contrast, the plots for assembly size and scaffold number were a surprise, and have a characteristic ‘mouse profile’ shape; abrupt upward jumps are seen at 49bp ≤k≤ 51bp in Fig. 2 and, to a smaller extent, at 99bp ≤k≤ 101bp (‘ears’ of the mouse). Proportionally, the scaffold number has the most dramatic jump: the tiny change of k value from 49bp to the next allowed (i.e., odd) value, 51bp, caused an order-of-magnitude increase in the number of scaffolds, from around 4000 to around 35,000. This jump was caused by a large increase of short sequences of length 100bp in the reported assembly (file .scafSeq; see Supplementary Fig. S3).

A similarly accidented dependence on k was seen for assembly size and scaffold number in the other SOAPdenovo2, but not ABySS, assemblies of the other three fungal genomes. We also ran assemblies at k=49 and 51bp for reads of two Emmonsia species that were sequenced as part of another study (101bp paired-end reads). The height of the jump at 49bp ≤k≤ 51bp varied, however: the assembly size increase at that k increment, reported in Table 1
                        , is smallest but still clearly present in the more compact (repeat-poorer) yeast genome, and largest in the less compact (repeat-richer) Emmonsia genomes.

To check that the SOAPdenovo2 program did not exhibit trivial or general discontinuities also in genomes where no repeats are present, we used ShortCAKE (Orenstein and Shamir, 2013) to synthetically generate a maximal linear sequence or ‘chromosome’ of length 2,097,152bp engineered to have no repeats of size 11bp or higher on either strand, i.e., a double-stranded de Bruijn sequence of word size 11 on a 4-letter alphabet (see Fraenkel and Gillis, 1966; Muñoz et al., 2014). We then created artificial paired-end reads from that sequence with a read size r of 150bp and I
                        o of 770bp, and fed them to the SOAPdenovo2 pipeline under the same conditions and k-mer values as we had done for the real sequences. Although to our surprise SOAPdenovo2 did not assemble the synthetic read set on our system for some intermittent (isolated) k values because of segmentation faults, assembly did succeed for many k values throughout the 17–127bp range we used for the P. brasiliensis genomes. For all of the successful k-mer values, the SOAPdenovo2 assembly consisted of a single scaffold recreating the original sequence, i.e., corresponded to flat (horizontal) plots in which no metrics depend on k.

This simple negative control does not rule out that the upward jumps at 50bp (and/or at 100bp) in the real read sets were caused by internal thresholds in algorithm(s) or internal parameters that are used by SOAPdenovo2, or in the preprocessing tools KmerFreq_AR and Corrector_AR. Indeed, it seems likely that internal decisions inside program(s), such as if–then–else decision(s) involving cutoff(s), contributed to the discontinuities observed (see Section 4). In either case, the plots are relevant for this study: one of the aims of the present study was to investigate the utility of plotting metrics’ k-dependence as a way of gaining insight into the pros and cons of choosing individual or combined k-mer lengths for sequence assembly, in actual practice. Variations with respect to k that a microbiologist using genomics may encounter when properly using off-the-shelf assembly software are of interest. By visualizing such real variation, in graphical displays of pertinent species’ genome assemblies, one is less likely to make a choice of k-mer size that later turns out to be far from optimal.

We next investigated the contributions of unique genes and repeats to the metric vs. k plots observed in Fig. 2.

Rather than attempting to create fine-tuned gene annotations in order to assess gene presence, we used two imperfect but straightforward, easily reproducible methods to roughly estimate relative presence of probable genes. Neither of these methods explicitly involved arbitrary ‘manual’ decisions, or arbitrary choices of tunable weights.

The first method was to choose two reference gene sets from other strains/ species, and track how many of their genes/proteins had one or more BLASTX matches in the 112 Pb113 assemblies obtained by the two different programs. For the two reference gene sets, we chose the previously published official gene set of P. brasiliensis Pb18, which is closely related to the reference strain Pb113, and a reference set of well-conserved core genes, CEGMA (Parra et al., 2007, 2009; Bradnam et al., 2013), for which the fungal reference species are S. cerevisiae and Schizosaccharomyces pombe. The resulting plots are displayed in Fig. 3
                        . The proportion of reference genes that matched a region in the assemblies (a rough estimate of the gene-level coverage of the P. brasiliensis genome) was very high in all cases, with the percentage of hits never falling below 99 percent. The plots show no substantial jump in the relative number of matches in SOAPdenovo2 assemblies around k-mer values 50bp or 100bp; even though a fraction of the genes may match paralogs (i.e., similar but ‘different’ genes) rather than, or in addition to, orthologs (i.e., the ‘same’ or corresponding gene), the absence of a substantial jump indicates that gene number differences cannot explain the ‘jump of the mouse’, nor are they affected by it. The plots also suggest that the presence of reference genes is about as good at low k values as it is at high k values. BLASTX similarity histograms for different k values are shown in Supplementary Fig. S1.

Our second method to estimate relative gene presence at different k values was to run the gene calling program Augustus on each P. brasiliensis Pb113 assembly, with the closely related fungus Histoplasma capsulatum as the training species, and use its raw single-pass annotation output to assess gene assembly. The number of genes found in the 112 re-runs of this program on different assemblies is shown in Fig. 4
                        ; the extents of the genes, and their breakdown into contributions from coding and intron DNA, are shown in Fig. 5
                        . The data reveal only a tiny dependence on k of the number, lengths, coding region lengths or intron lengths. They show no trace of the main discontinuity (at k=50bp) exhibited by the total coding + noncoding DNA of the Pb113 and other fungal assemblies.

The presence of genes in the assemblies, which corresponds to representation or coverage of the gene space (Carels et al., 1995; Parra et al., 2009), did not vary appreciably with the k-mer length used for constructing the assemblies, and is therefore not affected by the bulk DNA metrics’ sometimes strong or irregular dependence on k that we had observed (Fig. 2), so we next examined repeats. We directly assessed differences in repeat content using a program that detects a wide range of simple and interspersed repeats that are known, RepeatMasker. The number and extents of repeat-matching DNA (for RepeatMasker) are shown in Figs. 6 and 7
                        
                        . For the SOAPdenovo2 assemblies, both plots (k-dependencies) can be seen to covary with those for assembly size and scaffold number in Fig. 2 above, with accidents near the same k values (50bp and 100bp) and a similar ‘mouse’ shape. This parallelism, and the large numbers and total lengths of the repeats involved, indicate that the abrupt increase in assembly size and in scaffold number between k≤ 49 and k≥ 51bp is at least partly a result of an increased proportion of repetitive DNA. By contrast, the repeat metrics for the ABySS assemblies showed very different k dependencies, i.e., plot shapes, compared to those for assembly size or scaffold number; both repeat number (Fig. 6) and total repeat length (Fig. 7) rose quickly to a local (and, for repeat number, global) maximum at around k≈ 25bp; for the rest of the range, the number plot remained almost flat from k≈ 70bp onwards, while the total length plot maintained a slight upwards slope.

We also ran a more specialized program for detecting long terminal repeat transposons, LTR_Finder, and plotted the number presence of LTR transposons (Supplementary Fig. S2). Although the plots exhibited a consistent trend in both SOAPdenovo and ABySS assemblies, rising with increasing k, the numbers of detected LTR transposons per assembly were tiny, even in the Pb18 reference assembly (only 24 transposons), and apparent fluctuations were statistically unreliable.

@&#DISCUSSION@&#

For the de novo assemblies created by ABySS, plots of essentially all metrics vs. the fundamental assembly software parameter k changed smoothly and slowly as k was increased, and for several metrics the dependency was monotone or close to monotone (i.e., either increasing or decreasing). As expected, one metric, the length of the longest scaffold in the assembly, was the exception, and its discontinuities are easily explained by the clustering of repetitive DNA in the genome. Indeed, the main reason for premature terminating of extending scaffolds or contigs is the presence of repetitive DNA: where subsequences occur several times in the genome in different places, de novo read assembly programs (and reference read assembly programs (Li et al., 2014)) can be faced with an ambiguous situation that they cannot resolve without access to additional contiguity information. Thus, the synthetic double-stranded sequence of >2Mb we created using ShortCAKE so that no 11-mer would be repeated on either strand can be used as a benchmark (Muñoz et al., 2014): assembly programs using a k-mer size above 11 should never have problems assembling this sequence in one piece, and indeed this was confirmed (i.e., even with SOAPdenovo2 no assembly consisted of two or more scaffolds, regardless of k).

The ABySS scenario of the generally smooth or monotone k-dependencies was, however, not always found when the SOAPdenovo2 pipeline was used. In particular, two of the metrics, assembly size and number of scaffolds, that gave smooth k-dependence for ABySS gave an accidented or discontinuous k-dependence at k=50bp, and to some extent at k=100bp, for SOAPdenovo2. The most striking of those metrics was the number of scaffolds in the assembly, which for Pb113 was only 4004 at k=49bp but jumped up to 35,368 at k=51bp. Although initially we did not rule out that biological size thresholds of repeats might be contributing to such a discontinuity in principle, the magnitude and sharpness of the transition (occurring from one allowed k value to the next) and the suspiciously round numbers of their locations (50 and 100) made such an explanation improbable in this case. When we plotted the lengths of the scaffolds, it became clear that almost all of the additional 31,364 sequences appearing in Pb113 at k=51bp had lengths of 100bp or very close to 100bp (see Supplementary Fig. S3). It therefore appeared that some switch in the code was letting in vast quantities of 100bp-sized sequences and considering them as part of the assembly when k exceeded 50bp; if these corresponded to reads that could not be extended to longer sequences, it seemed reasonable that they would be largely repetitive DNA, thus explaining the parallel ‘mouse’-shaped curves in the assembly size (Fig. 2) and repeats plots (Figs. 6 and 7), as well as the larger jumps found for the more repetitive, larger genomes. We looked briefly through the source code of the main program in the SOAPdenovo2 suite we had used, SOAPdenovo-127mer, but on a first pass we found only one possibly relevant if–then–else decision (in loadGraph.c); when we changed it and recompiled, we saw that its effect was only small. We then reasoned that the KmerFreq and Corrector preprocessing steps, for which one cannot specify k values above 27bp, might be involved in the jump, and re-ran SOAPdenovo2 again without these steps for k=49 and k=51. To our surprise, there was now a downwards jump instead of an upwards jump and, as expected from the lack of correction, the numbers of sequences in the assemblies were vastly bigger (1,517,856 sequences for the k=49 Pb113 assembly vs. 251,968 for the k=50 Pb113 assembly). Such checks would be compatible with an interpretation of the jump at k=50bp as a consequence of what may be two alternate ways the SOAPdenovo2 pipeline effectively processes repeats (for k≤ 49bp and k≥ 51bp); such an interpretation would also be compatible with our finding that the jump was smaller for the more compact (less repetitive) genome of S. cerevisiae (Table 1) and absent for the synthetic chromosome that was engineered to be devoid of repeats. The resulting assembly, i.e., an outcome of grappling with the genome's repeats, could be quite sensitive to small changes in conditions such as program/parameter options, input reads and their quality, and the repeat landscape of the genome.

There are two questions that may rightly be asked at this point. First, how do other groups see the problem of choosing the ‘right’ k-mer size? Second, have discontinuities in profiles of assembly metrics or statistics versus k-mer choices been observed by other groups?

Since we used Illumina reads, and since we focused more on the details of SOAPdenovo2 than on other programs, we first mention their views regarding k-mer choice. A document with brief guidelines written by Illlumina, apparently with E. coli and perhaps other bacteria in mind Illumina (2010), states the following opinion:
                           The right choice for k depends on coverage, read length, and error rates and is hard to determine in advance. Anecdotal recommendations indicate that the size of k should not be lower than half of the read length. If time allows, we recommend performing several assemblies over a small range of k and choosing the one that yields the best assembly for the desired application.
                        
                     

Here, there is a clear preference not to commit to any overly simplistic recipe for the right choice of k, although the document does mention an example that has been considered. We agree with Illumina's own recommendation, namely to perform several assemblies over a range of k values before making a choice, if possible. Several k values in a small range implies high resolution (closely spaced k values), and this seems best, as for example sharp discontinuities can go unnoticed if resolution is low, where users may intuitively assume some form of smooth or monotone interpolation. In this study we consider the possible advantage of a larger range of k to get a wider picture, but without reducing the resolution. We feel that with a modern laboratory setup, where a reasonably equipped server will be needed to run even a single assembly, the additional time needed to execute a loop of exploratory runs will, in many cases, be repaid by the benefit of a more informed decision.

Our results for fungal genomes presented here do not, however, suggest extrapolating the anecdotal rule of thumb to a general fungal context. For the reads of 101bp, if the anecdotal k
                        ≥
                        r/2 criterion had been optimal, we would have needed to choose k values of at least 51bp. For the reads of 150bp, the optimal k-mer values according to the anecdotal recommendation would have been at 75bp or higher. For SOAPdenovo2, then, the k
                        ≥
                        r/2 advice would have given us possibly suboptimal assemblies for the read sets we used, i.e., assemblies characterized by many small contigs rich in repeats and, for P. brasiliensis, assemblies much longer than the reference assembly, the ABySS assemblies, and the SOAPdenovo2 assemblies for lower k (see Fig. 2).

The publication of SOAPdenovo2 (Luo et al., 2012) also had comments on the topic of k-mer choice:
                           important factor in the success of [de Bruijn graph]-based assembly is k-mer size selection. Using a large k-mer has the advantage of resolving more repeat regions; whereas, use of small k-mers is advantageous for assembling lowcoverage depth and removing sequencing errors.
                        
                     

In that paper's additional file the authors also mention that, where heterozygosity is present in a genome (unlike many fungi), it can be an additional factor that tends to reduce contig lengths, in particular where high k-mer sizes are used. Their conclusion: “For a complex genome, it is difficult to determine the optimal k-mer size based on theory.” This view is also in line with ours, and one way of taking a more practical route is to profile at high resolution, and then try to explain, the behavior of various assembly and/or gene annotation metrics as k changes, in order to choose candidate k-mer sizes for a final assembly. For example, in our P. brasiliensis runs of SOAPdenovo2 for k just above 51bp with our settings, there would be features of the assembly, such as many small contigs often containing repeats, that one might wish to address with additional filtering strategies.

A complementary approach, elected for SOAPdenovo2 (Luo et al., 2012) and by other groups in genomics and transcriptomics contexts (Samanta, 2012; Peng et al., 2012; Wences et al., 2013; Bankevich et al., 2012; Surget-Groba and Montoya-Burgos, 2010; Melicher et al., 2014), is to use multiple k-mer strategies: the idea is to merge (meta-assemble), and/or iteratively refine, assemblies obtained using different k-mers and/or assembly programs. Indeed, the ‘one size fits all’ assumption that is often made in practical assembly projects can be inherently problematic, as the choice of k can dramatically influence quality and contiguity of assemblies, and there may be different optimal k values for different regions of the same genome (Wences et al., 2013). Whether the strategy is multi-k or single k, high-resolution profiling such as we advocate here can assist in recognizing propitious ranges of the k-mer size(s).

Other authors have proposed criteria or methods for k-mer choice. For example, Chikhi and Medvedev (2014) propose an automatable method, which first generates abundance histograms for putative or candidate values of k, then fits a generative model to each histogram in order to estimate how many distinct k-mers in the histogram are genomic (i.e. error-free), and then picks the value of k which maximizes the number of genomic k-mers. They benchmark their method (tool KmerGenie) using Genome Assembly Gold-standard Evaluation data or GAGE (Salzberg et al., 2012). GAGE data have been used also in Luo et al. (2012) and, in the specific context of post-contig-assembly scaffolding, in Hunt et al. (2014).

We now address the second question mentioned above, that of previous reports of discontinuities in profiles of metrics having k as the independent variable. In a search for metrics analyses that include eukaryotic organisms, and use NGS read lengths of ≥ 100bp, we did not find any high-resolution k-dependency profiles of eukaryotes employing SOAPdenovo2 that had been obtained in a similar way to ours. The closest data that we could find, at a lower resolution than we used (steps of 10bp versus 2bp in our analyses), were in a table of results in Chikhi and Medvedev (2014), obtained via SOAPdenovo2 from 124-bp GAGE reads (Salzberg et al., 2012) for the common eastern bumble bee Bombus impatiens. That table profiles N50 and assembly size; assembly sizes were 224.1Mb for k= 41bp, 229.7Mb for 51bp, 230.4 for 61bp, 226.1Mb for 71bp and 207.1Mb for 81bp. Clearly we cannot expect similar results to our unicellular fungi for the bumble bee genome, which is roughly an order of magnitude larger (and could not be successfully assembled with some other programs, including Velvet (Salzberg et al., 2012)). The low resolution also does not allow discontinuities to be seen. However, the rapid rise of assembly size from 41bp to 51bp, and subsequent slower rise and then decline, are qualitatively analogous to the shape of the SOAPdenovo2 profile we observed for P. brasiliensis and other fungi.

In analyses using other assembly programs/pipelines, we found very few k-dependence profiles with a high resolution and/or a suggestion of a discontinuity. An exception was a variable-resolution profiling (Samanta, 2012) for contigs of a ≈ 700Mb genome assembled from 100bp Illumina reads using Minia (Chikhi and Rizk (2012); see also Salikhov et al. (2013)): N50 had a jump or steep decrease and assembly size had a jump or steep increase (from 540 to 600Mb). Both were located between 45, 47 and 49bp on one side, and 55bp and higher k on the other side; no assemblies were recorded for k values of 51 and 53bp. The interpretation given was that successively larger segments are being assembled as k is increased (because large k-mers can distinguish better between slightly different small repeats), whereas with increasing k the de Bruijn graph gets increasingly fragmented (e.g., in the limit k
                        =
                        r each unique read becomes a separate node unconnected to others). The position of the steep changes around k=50bp was interpreted as half the read size. By contrast, in our different context, with a different assembler, the same position of the jumps remained fixed at k=50 (and k=100)bp regardless of read size.

Finally, discontinuities sometimes have easily explainable technical causes, and can affect internal metrics; an example that is unrelated to our observations is one of E. coli assembly profiles obtained for Minia and two related programs (2-bloom and 4-bloom), in which three internal statistics (a traversal time, a construction time and a structure size expressed in bits/k-mer) jumped at k=32bp because of a switch from 64-bit to 128-bit representation of k-mers (Salikhov et al., 2013).

In summary, we are still not sure what caused the systematic discontinuities we observed in our fungal profiles. We posted the question for SOAPdenovo on seqanswers.com but no answers were proposed. Three broad categories of explanation might be: known technical reasons, previously undocumented anomalies or artifacts (possibly occurring only for certain program(s), settings, taxa, error levels, etc.), or biological reasons. Although we consider the last category unlikely as a sole determinant of the jump position(s) on the k axis, it could contribute.

The term ‘complexity’ as applied to DNA sequences is often encountered by molecular biologists in contexts such as BLAST searches on a server at NCBI, in which one can decide whether or not to mask out ‘low complexity’ regions. These regions have often very low or very high GC, so that the 4-letter alphabet of DNA almost collapses to a 2-letter alphabet (A and T, or else G and C), which in turn makes chance repeats or chance matches more probable than in a fully used 4-letter alphabet. Similarly, in textbooks (Lewin, 1999), monographs (Davidson, 1976, p. 189 ff.) and articles since the first DNA reassociation work of Britten and his colleagues in the 1960s (Britten and Kohne, 1968), a genome of a given size is traditionally considered most complex if it contains very few repeats, and less complex if it has more repeats. Thus, repetitiveness can have a connotation of lowering complexity.

If, however, one approaches the issue from another point of view, namely the task of assembling a genome from short reads de novo, then the connotation is quite different. A genome without any perfect repeats of a given size on either strand (i.e., a double-stranded de Bruijn sequence) can be generated (Fraenkel and Gillis, 1966; Orenstein and Shamir, 2013), and is the simplest conceivable genome of its length, for the short-read assembly task. From this viewpoint, adding repeats to such a genome can make a typical de novo or reference assembly task more difficult, but never easier, so in this sense it increases the complexity of the genome (see Results, and examples given in Muñoz et al. (2014)).

Not only genome assemblers can face tasks that become more complex when repeats in the genome are abundant or long. The nucleus or mitochondrion of the eukaryotic cell (or selection) may face more complex tasks of genome integrity/stability maintenance or ‘ambiguity management’ when its genome is repeat-rich. For example, the repeats can recombine illegitimately, which can lead to deletion mutants such as the petite mitochondrial genomes of baker's yeast, which generate petite (anaerobic-only) colonies that can be distinguished with the naked eye (see Bernardi (2004) and refs. therein). In human, illegitimate recombination can also lead to disease, for example when an important region of a chromosome is looped out in the process and deleted; in some instances inappropriate repetition of sequences could be of much importance for the fitness of the organism (Ahmed et al., 1999; Abrusan and Krambeck, 2006).

Advice for choosing a k value sometimes considers assembly programs as straightforward and transparent implementations of the fundamental algorithms that they use, which can be elegant, or simple to describe or portray. Such algorithms include basic steps involving the use of de Bruijn graphs that are shared, in one form or another, by several modern assembly programs currently in use.

In the present study, we have approached the question from a very different point of view, not considering primarily what assembly programs based on de Bruijn graph principles should do, but observing what they do in real practice, when one uses them directly ‘out of the box’ and applies them as specified, to small genomes of fungi having a moderate amount of complexity (as assessed by a moderate, but notable, content of repetitive DNA; see previous section). A graphical overview, and a first insight into dominant processes of the programs or pipelines, is gained already by visualizing how rough ‘presence’ metrics of assembly success vary if one varies k, and possibly also when one modifies key experimental parameters such as r and I. The ‘presence’ metrics we used here roughly estimate the presence of a genome's DNA, its genes, and its expected types of repeats. Also relevant, although not included in this limited study, would be the variation with k of dedicated ‘accuracy’ metrics that gauge the presence of small errors in assembly sequences. Such rare, small errors might, despite their scarcity, occasionally cause frameshift errors where they appear in coding regions, and/or readthrough errors at exon boundaries or stops, which even if infrequent would be important to take into account, if their occurrence were to vary systematically with k in the range considered in practice (>20bp). There might also occasionally exist a collapse of reads from similar coding sequences of two close paralogs onto one. If such rare errors affecting the faithful portrayal of the gene space were to occur preferentially in some intervals along the k axis, it would be good to consider them in order to make an informed choice of k.

Sometimes it is helpful to conceptually separate the central and often elegant algorithmic core(s) of a bioinformatic program from its other, more peripheral parts, which can occasionally encode relatively ad hoc decisions, peripheral algorithms (e.g., in our case possibly algorithms not related to de Bruijn graph methods), or heuristic expedients. Such additional parts might sometimes even be responsible for superior performance compared to other programs using the same algorithmic core. Some of those parts may be carefully planned; in others, a decision, although reasonably made, may be to some extent arbitrary, or may not be crucial in the original context for which the program was intended. As a program evolves complexity, and the scenarios for which it is used expand, it may be difficult to keep track of such past decisions and their possible effects. In the more general context of re-testing evolving software, (Brooks, 1995, p. 6) writes: “the number of cases [to test] grows combinatorially. It is time-consuming, for subtle bugs [or anomalies, or unexpected effects can] arise from unexpected interactions of debugged components.” In some bioinformatic programs, ad hoc or arbitrary decisions can also form part of the main algorithm, as in some widely used progressive multiple alignment programs, which include the CLUSTAL series; of such programs, (Felsenstein, 2004, p. 500) notes that “alignments are combined using some rather arbitrary rules”, and (Durbin et al., 1998, p. 148) write that “CLUSTALW is unabashedly ad hoc in its alignment construction and scoring stage”. In this study, we have addressed the profiling of assembly programs’ behaviors for a given genome as k is varied, in a way that monitors not only the algorithmic core(s) but also more peripheral parts of the programs.

We envisage a possible future tradition for first-pass performance assessment of genome assembly software, which would not imply extensive testing whenever a major new release is offered. Instead, and in line with benchmarking that we have previously proposed (Muñoz et al., 2014), evaluation (internal or external) could be standardized by using performance plots or curves such as those we sketch here, and using a set of standard test genomes that include eukaryotes; because of the limited size of the eukaryotic genomes of unicellular fungi, we propose that they would be good candidates to include. It could be particularly useful to include fungi having well-characterized genomes that are not as compact (repeat-poor) as the nuclear genome of baker's yeast, of which P. brasiliensis is an example.

@&#ACKNOWLEDGEMENTS@&#

We thank Wentian Li for sharing manuscripts on closely related topics prior to publication, for literature and software references, and for discussions, and Christina Cuomo and the members of the Broad Institute's Genome Sequencing and Analysis Program for discussions and advice, and for the use of unpublished Emmonsia read sets obtained in collaboration. We also thank two referees for suggestions and references that helped us to improve the paper, and Dr. Manoj Samanta (Systemix Institute) for a clarification and references. This work was partly supported by Colciencias grant 
                  1222-56934875, “A gene atlas for human pathogenic fungi”, and by a sustainability grant from the Universidad de Antioquia, Medellín. Colciencias National Doctorate Program funding supported J.F.M., and the Universidad del Rosario partly supported J.E.G. via a Ph.D. scholarship.

Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.compbiolchem.2014.08.014.

The following are the supplementary data to this article. 
                        
                           
                        
                     
                  

@&#REFERENCES@&#

