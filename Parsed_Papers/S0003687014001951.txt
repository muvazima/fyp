@&#MAIN-TITLE@&#Verification and validation of a Work Domain Analysis with turing machine task analysis

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Work domain models produced by Work Domain Analysis need to be validated and verified.


                        
                        
                           
                           A method based on the Turing Machine formalism was proposed.


                        
                        
                           
                           An application to two domains allowed us to highlight some required changes.


                        
                        
                           
                           Over or underspecification, omission or false inclusion of objects were noticed.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Work domain analysis

Validation

Turing machine task analysis

@&#ABSTRACT@&#


               
               
                  While the use of Work Domain Analysis as a methodological framework in cognitive engineering is increasing rapidly, verification and validation of work domain models produced by this method are becoming a significant issue. In this article, we propose the use of a method based on Turing machine formalism named “Turing Machine Task Analysis” to verify and validate work domain models. The application of this method on two work domain analyses, one of car driving which is an “intentional” domain, and the other of a ship water system which is a “causal domain” showed the possibility of highlighting improvements needed by these models. More precisely, the step by step analysis of a degraded task scenario in each work domain model pointed out unsatisfactory aspects in the first modelling, like overspecification, underspecification, omission of work domain affordances, or unsuitable inclusion of objects in the work domain model.
               
            

@&#INTRODUCTION@&#

In recent years, numerous studies in cognitive engineering have been carried out in the application of a specific method named “Work Domain Analysis” (WDA) for designing human–machine interfaces and ergonomic work systems (for recent reviews see Read et al., 2012; Jiancaro et al., 2014). WDA aims at describing the functional properties provided by a work environment to specify the constraints that a work system must cope with. The output of a WDA is an ontological structured model depicting a work domain as a set of functional properties classified according to their abstraction level and their position in a structural decomposition of the work domain. The WDA has demonstrated its benefits in many fields of application like medicine, aviation, nuclear plants, or network management (Burns and Hajdukiewicz, 2013; Flach, 1990; Rasmussen, 1999; Vicente, 1999). Some of these works are themselves directly related to the development of industrial products. Nevertheless, most work domain models produced by this method have not been validated and verified. Verification and validation should be targets for enabling WDA to become a large-scale reliable method destined to the industry.

Our goal is to propose a formal method for verification and validation of a WDA model. Verification and validation are terms that should not be confused (Sargent, 2005). Verification is a demonstration of a correct use of the modelling formalism (Rykiel, 1996, p.232). It deals with building the model right (Balci, 1997). For instance, the debugging of errors in computer science is a verification process. Validation is rather “a demonstration that a model within its domain of applicability possesses a satisfactory range of accuracy consistent with the intended application of the model” (Rykiel, 1996, p.232). A validated model is a model considered acceptable for a certain use. Model validation deals with building the right model (Balci, 1997).

The next section presents the Work Domain Analysis method. Then, we consider the methodological resources currently available to verify and validate a model produced by this method. Afterwards, the Turing Machine Task Analysis method (TMTA) is introduced. The following two sections will be devoted to its application to the validation and verification of two work domain analyses: car driving and the supervision of an on board fresh water distribution system respectively. These two domains have been chosen because they belong to different kinds of work domains elicited by the literature in cognitive engineering, i.e. intentional or causal domains (Vicente, 1999). The car driving domain can be qualified as “intentional” since the human operator's intended actions are central to the events occurring in the work situation. The fresh water distribution domain can be qualified as “causal” since occurring events are less dependent on the human operator and more on the functioning of the system under control. Finally, we conclude with contributions and perspectives brought by the TMTA method.

Work domain must be distinguished from task. While the former concerns objects over which control has to be achieved, the latter refers to goals, sub-goals and operations required to perform this control. According to Rasmussen (1987), work domain properties can be considered as a set of affordances for the human operators performing a task in the domain. This concept of affordance originally proposed by Gibson (1979) allows for envisioning human work as fundamentally based on environmental properties that support and constrain the deployment of human behaviours in the process of task achievement. Designing a WDA means to depict the work domain affordances. Concretely, this depiction generally requires documents about the work domain and interviews with experts who are able to elicit the different domain properties relevant to their work. The resulting model is typically represented by a matrix describing the work domain in terms of two hierarchies: the part-whole and the abstraction hierarchies (Fig. 1
                     ). The part-whole hierarchy presented in columns described the domain as a system composed of subsystems and components. It highlights the structural complexity of the domain as units embedded in each other. The abstraction hierarchy corresponds to the rows of the matrix and describes the domain through five different levels of abstraction. From bottom to top in the matrix, the lines represent the domain respectively as concrete forms, physical functions, generalized functions or processes, abstract functions and functional purposes. “Means-ends” relationships link the affordances of one abstraction level to another. Concrete affordances are means to reach more abstract affordances. Conversely, abstract affordances specify more concrete affordances necessary to reach abstract affordances. The abstraction hierarchy highlights the functional complexity of the domain (Rasmussen, 1987; Vicente, 1999).

Applied to WDA, the verification process deals with revealing whether the different properties of the work domain were properly located in the right cells of the work domain matrix according to their abstraction and part-whole levels. Verification is not a concern that has been studied yet in the literature on WDA. Somehow, verification can be processed implicitly during the design of a work domain model. The analyst, accompanied by experts, tested the internal consistency of the WDA matrix through inspection (Burns and Hajdukiewicz, 2013).

Validation of a work domain model means to assess whether the described affordances of the work area are the right ones and whether the accuracy with which they are described is also correct. To date, the only explicit method proposed for WDA validation is the mapping scenario technique proposed by Burns et al. (2001). This method relies on a mapping between a work domain model and task scenarios that have not been previously used during the Work Domain Analysis. In an illustration, the authors proposed that three human operators, who worked on the driving of a frigate, check their work domain model in accordance with an engagement scenario with an unknown contact. After being introduced to the WDA method, each expert described how the scenario referred to the work domain model step by step. At the end of each stage, discussion and comparison of proposals were guided by analysts. The experts said to be able to easily manipulate the domain model within this method. The main advantage of this method is to expose experts to the work domain model within the framework of a task scenario. Miller and Vicente (1999) used a quite similar approach to validate their domain model of a petrochemical plant. They used a degraded situation scenario, but they succeeded in completing this validation based only on the work domain knowledge held by one of the authors and without the help of an expert.

Some other works have attempted to propose some recommendations for the validation process. Naikar, Hopcroft, and Moylan (2005) advised using various kinds of experts to validate each level of abstraction contained in the model. Engineers can judge the physical aspects of the field. Operators would validate the intermediate levels of the abstraction hierarchy. Decision makers can analyse the functional purposes and the laws defining the abstract functions. However, such an approach is very cumbersome to implement. Another form of validation is the comparison of different models. This technique was explored by Burns et al. (2004), who conducted a comparison of separate but similar work domains: the redesign of a process control system on board a Canadian frigate and the design of a new class of military ship in the U.S. Navy. They reported that to really be able to make a comparison, two teams of analysts would be required to perform a work model on the very same work domain, but such a technique is also very expensive in time and effort.

The technique including all the above methods for validating a work domain model is the checking technique. Elements of the work domain models are checked by experts in reference to task scenarios, expert knowledge or other work domain analyses. In this set of methodological proposals, comparison with data coming from task scenarios can be considered as more rigorous and objective than those exclusively based on a subjective appreciation. A mapping scenario brings the work domain models together with the sequence of a real task. Nevertheless in task or incident scenario mapping, work domain elements can potentially be checked without being sufficiently specified to enable the triggering of the following sequence of events or actions required in the next scenario steps. The checking activity is strongly dependent on the cognitive resources provided by the expert to make semantic links between task scenario and work domain elements. The expert can interpret work domain elements noticed in the model as, at least, vaguely referring to the stages of the task, leading to false detection. For the affordances not displayed in the work domain model, the expert can also stop the search too rapidly, leading to missed detection.

An alternative technique for validation in engineering is the “black-box validation”, through which a model is run under the same condition as a real world system (Robinson, 1997). In the context of the validation and verification of a work domain model, it would correspond to the simulation of an activity performed by an agent in the context of a task scenario and in interaction with a given work domain. This simulation technique would not directly lead to checking task scenarios against a work domain model, but rather to assessing the functional possibility for an agent to perform the scenario with the help of the affordances described in the work domain model. In this context, the criterion of validation would not be the experts' judgement as such, but the logical possibility of triggering a given agent's action within the simulation of task achievement. The following section is devoted to the presentation of a new method for verifying and validating a work domain model through the simulation of task scenarios on work domains.

Turing Machine Task Analysis (TMTA) is a task analysis method built on two apparently opposite approaches on task achievement: the Turing machine formalism which was originally used to model tasks internally performed by computing systems, and the ecological approach in cognitive engineering, which highlights the importance of external constraints on task achievement (Flach, 1990). The articulation between these two dimensions was first envisaged with the proposal of Wells (2002), who suggested formalizing the concept of affordance as a Turing machine process. For this author, contrary to the classical viewpoint in computer science that considers the Turing machine as describing the internal functioning of an information system, the Turing machine model would express the organism–environment interaction (see also, de Oliveira et al., 2001). Indeed, Alan Turing originally used a situation of interaction between an individual and the environment to present the formal properties of the Turing machine. His metaphor describes a person who must write the sequence of integer numbers on a paper tape. Considering the affordances as elements composing the work domain that an agent works in, the Turing machine formalism can consequently be envisaged to model the interaction between an agent and a work domain (Morineau and Frénod, 2009; Morineau et al., 2009). This approach led to the proposal of a task analysis method, named “Turing Machine Task Analysis” (TMTA). This method allowed the simulation of task scenarios in articulation with the state of a work domain. Since then, TMTA has been applied for the analysis of elementary tasks such as interaction with a door (Morineau et al., 2009) or interaction with a pencil (Morineau, 2011). These first attempts showed that the simulation of a simple task sequence is feasible with relatively high accuracy. Beyond task analysis, we propose that TMTA can be used to verify and validate a work domain model. In accordance with the black-box validation principle, the idea is that smooth interaction between the agent and work domain within scenarios will serve to verify and validate the work domain model. If the work domain model is correct, the simulation should provide the rendering of the whole scenario sequence.

A Turing machine consists of an agent that interacts with paper tape of infinite size comprising a plurality of squares. On each square of this paper tape, a symbol can be either read or written by an agent. The agent can also move the paper tape and change its internal state (Turing, 1936). The TMTA method is a less formal adaptation of the Turing machine model. Its principles are as follows (Fig. 1):
                           
                              -
                              The paper tape represents the work domain. Depending on the considered level of analysis, each square of the paper tape may correspond either to a matrix cell crossing the two hierarchies, or a specific affordance inside a single matrix cell of the matrix.

The symbols on the paper tape correspond to the state of the work domain affordances. This state is the affordance value in relation to the task goal embedded in the scenario. At a very general level of analysis, it is possible to consider that any affordance at a given moment may convey a satisfactory state (“1”), an unsatisfactory one (“0”), or a state that is not relevant (“#”) to the task goal.

Reading symbols on the paper tape represents the perception of work domain affordances by the agent, i.e. the human operator with the help of tools or machines.

Movements of the paper tape in Turing's formalism may or may not be described in the TMTA method. If the analyst assumes that the agent is able to perceive the whole work domain in a given abstraction level at a single glance, then no movement is necessary to model. If the analyst assumes that the agent has access to only a subset of the work domain at a moment, then it is necessary to model the movement of the tape by the agent, from one square to another. These movements may correspond to the actual movements of the agent collecting events on the work domain.

Writing symbols on the paper tape represents changes in the state of affordances. These changes can be produced by the agent's actions but external events in the work domain can also change the values of affordances. The agent seeks to provide the work domain affordances with a satisfactory state. It means writing the symbol “1”. The agent's actions belong to a register that can be a priori defined by the agent's capabilities (or effectivities). These capabilities depend on the instrument capabilities available for the agent.

States of the Turing machine represent the agent's mental states. Seeking to ensure cognitive control over the work domain, each state refers to a level of abstraction hierarchy at a given moment. Within these mental states, the agent perceives the work domain through a particular point of view. Transitions from one level of abstraction to another correspond to a mental navigation that enriches the agent's mental model. Research has shown that a task involving an expert diagnosis involved top-down navigation in the abstraction hierarchy from the functional purposes for a better understanding of the work domain state (see for a review, Meineri and Morineau, 2013).

As the black-box technique to verify and validate a work domain model, TMTA requires an input scenario, an output task sequence as a result, and a set of rules that transforms the input scenario into an output task sequence. The input scenario can be a text referring to imagined events or actual reported events produced by the expert. The output task sequence can be represented by a table describing the TMTA simulation trace for each stage of the task sequence (Tables 2 and 4).

The rules to specify an output task sequence are as follows. At the beginning of a scenario, the machine state will be located at the functional purposes. The states of identified affordances are set to 0, 1, or #. If at least one of the relevant affordances is in an unsatisfactory state (0), then the agent will have to go towards the abstraction level just below. Iteratively, while one of the relevant affordances at level L is in an unsatisfactory state, the agent's state navigation must go down to level L-1, except if the level is the physical form, which is the lowest abstract level in the abstraction hierarchy. If an affordance is in an unsatisfactory state at the physical form level, then the agent would go back up in the abstraction level to re-analyse the work domain state. At any abstraction level, if all the relevant affordances satisfy the task goal, then the agent goes back to the functional purposes. If at any stage the agent does not find the relevant affordances required to pursue the simulation, then it can mean that the work domain model has to be questioned from a validation or verification viewpoint. Now, we illustrate this process within two concrete cases.

The WDA of car driving presented in Table 1
                      is inspired from previously made analyses (Birrell et al., 2012; Hilliard and Jamieson, 2008; Nam and Myung, 2007; Stoner et al., 2003). The application of TMTA will be illustrated through the simulation of an incident scenario on a road trip.

For the functional purposes of the global car driving system, multiple conflicting purposes like security, speed, efficiency and pleasure can be considered. The functional purpose of the travel area is for the vehicle to move whilst being used to transport passengers and associated equipment. In agreement with Burns et al. (2000), we did not set functional purposes to the natural environment. Abstract functions for the whole system correspond to braking time before collision, balance between risk taking and driver gains associated with it, and the balance between energy cost and speed performance. The travel area is governed by road traffic rules and the safe field of travel. The abstract functions of the natural governing laws are the mass and energy involved in nature, meteorology, and also the laws governing life in the ecosystem including plants, animals and humans. The vehicle is in turn governed by the principles of conservation and the transformation of energy, the balance of forces and masses in motion.

The path can be envisaged as the key affordance governing the overall system at the process level. In terms of travel area, processes are roads, constraints from trajectory and speed, intentions of other drivers, highway code or agreements between road users, like the use of high beam flasher to warn another driver. The natural environment is made of a set of changing weather processes, such as sun light, wind, clouds, water cycle, variations in terrain, and events in the natural ecosystems. For the vehicle, the vehicle dynamics, propulsion and its energy consumption are the main processes. In terms of physical functions, the overall system is a set of spatio-temporal elements, such as places of departure and arrival, and travel steps. The travel area contains specificities of road type, fixed and dynamic obstacles and road equipment. The natural environment is composed of a set of functional variables such as visibility, light intensity, direction and strength of the wind, precipitation, frost, the slope of the road grip and the movement of animals. The relative position of the vehicle, its speed, direction, vehicle functional state and engine capacity are affordances related to the vehicle. These variables take concrete forms, like an overall traffic situation with cars, trucks, bicycles, pedestrians appearing on the road. The natural environment is a landscape with its climatic conditions, field conditions and the possible presence of animals. The vehicle is a particular volume with its shape and dimensions, producing noise.

The present scenario is about collision avoidance, a typical driving accident scenario (Van Elslande et al., 2008). A driver on a country road perceived a dog running across the road in front of him perpendicular to the vehicle. He braked. However, the driver perceived this action as insufficient so he tried to overtake the animal on the left. The manoeuvre was successful and the collision was avoided.


                           Table 2
                            shows the course of this simulated scenario. In bold and italic, we notice affordances that deviated from the original work domain model that we built. In stage 1, the driving was normal and the driver considered it to be at the functional purpose (1,1,1,1). We employed the term presence to complete what a functional purpose could be for the natural environment. In stage 2, an animal was crossing the travel area of the car. This event involves an unsatisfactory state, but the transportation itself was not yet concerned by the event at this stage (0,0,0,1). The driver's reaction was to brake suddenly and to go mentally down in the abstraction hierarchy to keep control on the situation. In stage 3, feedback on the driver's action shows an unsatisfactory situation at the abstraction function level concerning the braking time, the field of safe travel, mass and entropy in the natural environment and force balance for the vehicle (0,0,0,0). The driver attempted another resolving action by overtaking the animal on the left. In stage 4, the car was in the left lane and the driver perceived the work domain as a set of processes, i.e. specific travel in a specific lane (left lane), and the dangerous movement of the animal in the lane. But, the vehicle dynamic became satisfactory thanks to the passing action (0,0,0,1). The next action was to accelerate. In stage 5, the domain was perceived as a set of physical functions in which the spatial cues are unsatisfactory regarding the global system and the displacement area. The vehicle could not stay in the left lane. The animal finished crossing the road and the functional state of the care taken was satisfactory (0,0,1,1). This configuration led the driver to move back into the right lane. In Stage 6, the critical situation had ended. The locations and appearances of the global system and of its components were in a satisfactory state (1,1,1,1).

The simulation of this critical scenario highlights some issues in the domain model content. In terms of verification, it appears that the functional purposes of the natural environment cannot remain empty. Without at least one affordance, the Turing machine cannot process a task sequence. As asserted by Burns et al. (2000), nature has no functional purpose as such, but its presence must at least be considered when an agent interacts with it. Concerning the validation aspect, we notice that the natural ecosystem process is not significant enough in the task sequencing. It should be replaced by an affordance such as “animal movement”, which was an affordance previously identified as a physical function. Instead of the latter, we can put the affordance “animal position” at the physical function level. Except as amended, the work domain model used in this illustration seems sufficiently accurate to account for this scenario.

Analysis of the work domain of a fresh water system on board a ship is a part of the Anaxagore industrial project. One of its aims is the automatic generation of supervision interfaces (Bignon et al., 2013). The water system described here can be typically found on a frigate. Aboard a vessel, a fresh water system works in the following manner (Fig. 2
                     ). First, the water can be recovered either from the sea through a process of reverse osmosis desalination or by loading from a dock. Thereafter, water is fed by pipes from which the flow is controlled by pumps and valves, to two holds (compartments) which serve as water storage. This water then circulates by means of three hydrophore groups. In parallel with this process, water passes through a set of equipment (a chlorinator and UV system) that provides safe drinking water. Finally, some components of the system provide water temperature control at the outlet through a boiler system and a water cooling system.

The description of work domain presented in this article is a simplified version of a deeper analysis currently in process. This work domain is very close to the work domain of DURESS which was the subject of numerous studies in the context of ecological interface design (Vicente, 2002). As DURESS, this system will be described as an overall system with a subsystem consisting of holds/reservoirs in a vessel and components located around subsystems, i.e. pipes, pumps, valves and other ancillary devices involved in reverse osmosis. In our analysis, we only focused on the valve component (Table 3
                        ).

The functional purposes of the overall system are to provide drinking water and the required temperature efficiently. The purposes of the holds are to store drinking water and the valves regulate flow. On abstract functions, a set of basic principles can be found at all levels of the system: laws of volume conservation and energy dissipation (entropy), World Health Organization (WHO) standards that guide the evaluation of the quality and principles of control optimization systems that regulate the operations in an automatic versus manual system. Processes are also shared at each level of the system. They concern volume, the flow of heat energy, physico-chemical processes and the behaviour of the control system. As physical functions, we find the volumes of water in and out of the overall system. Holds are represented by volumes of water in stock. Valves involve opening/closing functions, and they control shift. Locations and appearances on the control-command system convey information on the domain.

On board the ship, a physician performed a routine test on the potability of the water inside the holds. In one hold, he detected contamination. After launching an alert to the crew, the agent switched the control system to manual mode in order to be able to close hold 1 and stop the contamination flowing into the global system. Brewing the water inside hold 1 allowed for decontamination. Afterwards, the valve was opened and the control system returned to automatic mode.

As depicted in step S1 of Table 4
                           , the situation was nominal (1,1,1). In these circumstances, a potability test was performed in a hold at stage 2. This action did not necessitate changing the abstraction level since it was a routine action. In stage 3, the test showed that a hold was contaminated. At this stage, the state of the valves was not yet a part of the problem to be solved (0,0,1). The priority action was to trigger an alert procedure to the crew. In stage 4, the consideration of abstract functions led to envisaging the open valve as being in an unsatisfactory state since it participates in the contamination of the overall system (0,0,0). Two actions were required: switch to manual mode and block the hold by closing the valve. In S5, this action allowed the flow of contamination to be stopped and the overall system process to be protected. But, the closed hold remained in an unsatisfactory state because it was contaminated (1,0,1). The brewing of water decontaminated the hold. In S6, the overall system had gone to an unsatisfactory level since the input and output in volumes were not optimized by the closed valve (0,1,0). After a control shift from manual to automatic, the agent reconnected the hold to the global system. Positive feed-back on these actions can be perceived at the physical form level reached in S7 (1,1,1).

The hold decontamination scenario provided three issues about the modelling of the work domain. The first one concerns integrating automation into the work domain. It turns out that the action of the automatic agent switching to manual mode and returning to automatic mode represents an action complementary to those already focused on the fresh water system. These actions are constrained by interaction with the automatic agent that also acts on the water system. Thus, it seems necessary to remove the automatic agent from the work domain model and to consider it as another agent. Secondly, the necessity of a procedure to alert the crew shows that crew integration should be included in the work domain model. The global system will be in a satisfactory state only if the crew is alerted about the contamination. The third issue concerns the notion of WHO drinking water norms in the abstract functions. Through the course of the scenario, this notion seems insufficient to account for the principles of the domain. The subsequent choice to brew the hold to decontaminate it cannot be performed without an understanding of the physico-chemical laws involved. The last issue concerns the necessity to specify the forms and appearances taken by the overall system and of its components. This specification can give information about the control-command feed-back that allows the agent to identify the state of the system.

@&#DISCUSSION@&#

The application of the TMTA method for verifying and validating a work domain model showed that it is possible to point out issues on an intentional or causal work domain model. In terms of verification, the TMTA method forced us not to leave some cells of the WDA matrix empty. In the car driving illustration, the functional necessity imposed by the method to envisage functional purposes for natural setting corresponds to the original idea involved in the abstraction hierarchy, that any object in the work domain can be perceived at different levels of abstraction by the agent (Rasmussen, 1987). Similarly, the idea of focussing only on the modelling of the matrix diagonal can be questioned (Vicente, 1999). The Turing machine systematically must read all the matrix cells at a given abstraction level.

Concerning validation, the application of the method showed some affordance omission problems, unsuitable inclusion of elements, under or overspecification of affordances. Omission of affordances is related to the exhaustivity criterion, which is difficult to respect during the WDA process since no feedback is given during the analysis phase. Through TMTA scenarios, the omission of affordances can be highlighted, such as in the case of the water system for which the crew needs to be considered a part of the domain. Thus, the description of the actions performed by the agent to produce satisfactory states in affordances can underline the necessity to integrate some other elements into the work domain. The TMTA method can also show that some elements included in the work domain model should rather belong to another part of the work system. These unsuitable inclusions seemed to concern the automatic system that appeared more as a particular agent than a part of the domain. Underspecification of affordances is an insufficient refinement of affordances that does not allow for directly triggering an agent's operation. In the car driving example, underspecification concerned the very large notion of the ecosystem. This notion did not clearly explain the acceleration performed in the scenario by the agent to leave the situation. In the on board water system, underspecification was pointed out on the physical form level only defined as a set of appearances. Overspecification is a specification that focuses on a single work domain property, whereas a larger description of the affordance would be required to understand the agent's operations. In the water system example, abstract functions on water potability focused on WHO norms, whereas the agent's mental model must include physico-chemical laws.

By describing the agent's perception–action cycle in the course of a task scenario, the different forms of failures encountered in a work domain model can be quite easily identified. In accordance with the Cognitive Work Analysis framework, the task achievement is considered as a subset of constraints operating inside the set of constraints posed by the work domain (Vicente, 1999). A TMTA simulation proceeds as a set of the agent's perceptions and actions that delineates the relevant affordances composing the agent's mental state. In this manner, the validation of a work domain model is based more on the functional attunement of affordances to the agent's activity requirements, than a subjective assessment given by an expert. As functional constraints related to the agent's perception–action cycle logically drive the selection of the requested affordances in each stage of a scenario, it is possible that TMTA requires a relatively low level of expertise to produce a simulated task sequence, but this assumption must be confirmed.

Obviously, as a methodological black-box between task scenario and WDA, a TMTA simulation does not prevent the analyst from inaccurate representations of the inputs given to the TMTA model. The relevance and the reliability of the set of actions available in the agent's register, the set of events or their ordinated sequence described in the task scenario depend on the analyst's choices. Before the application of the TMTA simulation process, the analyst must select relevant scenarios based on the engineering purposes, possibly with the help of some available criteria, rules or methods. As underlined by Robinson (1997), a model is only validated with respect to its purpose. Logically, a validation model conveys nothing about the validity of its premises.

Associated with this issue concerning the quality of the input scenario, the question of the quantity of input scenarios required to ensure a fair validation can be raised. Potentially, exhaustivity is a criterion that can be applied to the set of affordances explicitly contained in a model, taken for granted that the necessary and sufficient number of scenarios to cover all the affordances included in the model could be found and applied. But concerning omissions, the exhaustivity criterion becomes largely more difficult to assess. To reduce but not suppress this issue of exhaustivity, TMTA offers two perspectives. Firstly, in a given task scenario, TMTA offered the possibility to test a combination of alternative paths based on the satisfaction states of the involved affordances. For instance, in the car driving illustration, at stage S2 of the scenario, the simulation could test the value “0” for the affordance “Transport” concerning the vehicle component, instead of the value “1” as tested in the present sequence. This former state value could mean that the vehicle and the people inside are in an unsafe situation due to the proximity of the animal in front of the car. The sudden braking as an action would be stronger, changing the main affordance relevant in the abstract functions of the vehicle. In stage S3, this main affordance in the vehicle would be “energy conservation and transformation” or “mass in motion”. It would describe the impact of the collision on the vehicle. Potentially, at any stage of a given scenario, the analyst can exhaustively test the impact of different values assigned to the affordances. Considering that an affordance can be either in a satisfactory or unsatisfactory state, then 2
                        n
                      alternatives can be envisaged for a given scenario stage, where n is the number of affordances involved in this stage (Morineau et al., 2009). Thus, a scenario tree with its alternatives as branches can be depicted. This technique can help the analyst to envisage unforeseen evolutions inside a scenario. Secondly, the fact that the TMTA method is built on Turing machine architecture leads to envisaging a semi-automation of the simulation process, with the design of software dedicated to this kind of analysis. Such an implementation could significantly reduce the effort related to the verification and validation process, notably by displaying the different alternatives inside the same scenario, automatically.

A software implementation will also facilitate the test of TMTA robustness through an application on multiple domains and scenarios. Basically, the validity of TMTA can be supported by the fact that the Turing machine formalism itself received some kind of validation through the Turing-Church Thesis. This thesis assumes that any computation that can be written through an algorithm can be also carried out on a Turing machine (Schagrin et al., 1985). But, since TMTA is a less formal extension of this formalism, it requires empirical studies to validate its actual contribution. Particularly, it is not certain that creative tasks can be analysed through a “mechanical” procedure based on the Turing Machine (Bubb, 2006). But, it is also true that creative tasks have not been investigated by research on Work Domain Analysis.

@&#ACKNOWLEDGEMENTS@&#

This study was supported by funding from the SEGULA Technologies company (CIFRE Grant number: 0547/2012) and the Agence Nationale de la Recherche Technologique (ANRT) in the framework of the ANAXAGORE project.

@&#REFERENCES@&#

