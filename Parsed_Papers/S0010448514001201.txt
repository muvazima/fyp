@&#MAIN-TITLE@&#A questioning based method to automatically acquire expert assembly diagnostic knowledge

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Method for automatic acquisition of assembly diagnostic knowledge by asking simple questions to experts.


                        
                        
                           
                           Knowledge needs and types identified for diagnosis and resolution of assembly issues.


                        
                        
                           
                           Construction of knowledge based system to provide expert advice to assembly planners.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Knowledge based systems

Knowledge acquisition

Mechanical assembly

@&#ABSTRACT@&#


               
               
                  In the domain of manual mechanical assembly, expert knowledge is an important means of supporting assembly planning that leads to fewer issues during actual assembly. Knowledge based systems can be used to provide assembly planners with expert knowledge as advice. However, acquisition of knowledge remains a difficult task to automate, while manual acquisition is tedious, time-consuming, and requires engagement of knowledge engineers with specialist knowledge to understand and translate expert knowledge. This paper describes the development, implementation and preliminary evaluation of a method that asks a series of questions to an expert, so as to automatically acquire necessary diagnostic and remedial knowledge as rules for use in a knowledge based system for advising assembly planners diagnose and resolve issues. The method, called a questioning procedure, organizes its questions around an assembly situation which it presents to the expert as the context, and adapts its questions based on the answers it receives from the expert.
               
            

@&#INTRODUCTION@&#

Mechanical assembly is an important step towards realizing a product, since most products around us are not single-piece, independent entities but are meaningful arrangements of parts that work together to achieve the product’s function. Assembly planning is a structured process similar to the process of the product’s design. The process of assembly integrates not only the parts  [1], but also a number of people, companies, and related processes from the various stages of a product’s lifecycle. Knowledge from these different sections of the lifecycle is part of the knowledge involved in planning the assembly.

Knowledge based systems are programs with a wide base of knowledge in a restricted domain that use complex inferential reasoning to perform tasks which are typically carried out by a human expert  [2]. Section  2.1 describes such systems in greater detail.

This paper describes the development, implementation and preliminary evaluation of a method for automatic acquisition of knowledge from experts for computer aided assembly planning. The method uses interactive questioning to elicit this knowledge, which is structured and stored automatically as rules into a knowledge-based assembly advisor system. Knowledge can thus be re-used to predict the occurrence of potential issues and possible resolutions to the issues, for an assembly that is in the stage of being planned. Valuable expert advice is thus made available in a virtual manner. Section  2 introduces knowledge-based systems and knowledge acquisition, followed by Section  3 that provides an explanation of the need for automated knowledge acquisition. An attempt to identify and categorize necessary knowledge, and the subsequent development of a questioning procedure are explained in Section  4. The implementation and preliminary evaluation of the resulting knowledge acquisition approach are detailed in Section  5, followed by conclusions and future directions of research discussed in Sections  6 and 7 respectively.

Despite available support for information exchange, current product information systems are found wanting when it comes to managing product knowledge  [3]. In the domain of assembly planning, assembly planners can benefit from prior knowledge of issues that may occur during assembly. However, the expert sources for such knowledge are experienced assembly personnel, who may not normally be involved in the planning process. This gap in availability can be filled by the use of knowledge-based systems.

Knowledge based systems, also referred to as expert systems, have been used in five major application modes: knowledge based information systems, decision support systems, consultation systems, problem solving systems, and coaching systems; In fact they are most useful in two complementary ways—analysis of systems, e.g. error analysis or fault diagnosis, and synthesis of systems, e.g. configuration of computer systems  [4,5]. Typical application areas range from diagnosis of meningitis, to identifying possible sites for mineral deposits, to interpreting tax laws  [6]. As with other domains, in design too the need (and hence, efforts) for emulating an expert’s knowledge and the ability to use the knowledge is reflected  [7,8].

Knowledge engineering involves acquiring knowledge from experts or other knowledge sources such as encyclopedia and knowledge bases, and representing this knowledge in a knowledge-based system (KBS) that can use this knowledge to carry out appropriate reasoning.

KBSs have two essential components—a knowledge base consisting of structured expert knowledge, and an inference engine to process and apply this knowledge to carry out intended reasoning. The knowledge base is a result of an array of processes involving interaction with experts, compilation of expert knowledge, and its verification. This array of processes is called knowledge acquisition. The importance of this step is emphasized in the fact that underdeveloped knowledge acquisition facilities are seen as a major bottleneck in the wider application of expert systems technology, e.g. Rank Xerox’s LOOP, Nixdorf’s TWAICE, and Teknowledge’s S.1  [9].

An expert’s specialist knowledge consists of a number of categories such as definitions, references, facts, procedures, algorithms, strategies, and heuristics or “rules of thumb”. The knowledge engineer’s responsibility is to create a smooth transition of this knowledge from the expert to the expert system by means of a two way dialog  [4]. The knowledge then has to be formalized in terms of the representation available and entered into the expert system. The quality and scope of knowledge with which it is populated is crucial to the eventual usability of the system. The difficulty of this process lies in the difficulty faced by the knowledge engineer in attempting to think along the lines of the expert, coercing the expert to identify the domain knowledge and application knowledge, and structuring, formalizing, representing and chunking the knowledge. Being a two way learning process, it can be intellectually demanding for both the knowledge engineer and the experts  [4]. The gap between such knowledge in practice and the extent to which a theory is present, is also a factor  [10].

Once the knowledge is acquired and represented, it needs to be applied to serve the purpose of the knowledge based system, such as performing a diagnosis, or, given a diagnosis, suggesting a suitable course of action. This is done by means of a procedure named inference, or knowledge reasoning. Depending on the application, there are different strategies for inference, such as forward-chaining or backward-chaining  [11]. For the current work, forward chaining is the inference procedure used, mainly due to its availability with the expert system development platform used in the implementation.

The current commercial computer aided design tools primarily support modeling and analysis of 3-dimensional geometries of products and their components against various performance criteria in the usage phase. Recently there has also been some interest in capturing and reusing knowledge of designers in the form of knowledge based tools integrated into CAD  [12,13]. Such integration has also taken place on a commercial scale, and KBSs are a standard part of the design environment in organizations today  [14,15]. Knowledge based systems have also been developed in the area of assembly oriented design  [16,17]. A strong need to integrate assembly knowledge into CAD systems is also identified in  [18].

Knowledge acquisition has its own share of practical difficulties, and is far from a straightforward process. One of the difficulties is about encoding into knowledge based systems the same level of intelligence and ‘common sense’ inherent in humans  [6]. For early knowledge based systems, knowledge acquisition had been a manual process. The knowledge engineers were supposedly well versed in programming expert systems, and were also expected to be adequately acquainted with the domain of the expert, so that they would be able to appropriately correspond and comprehend the expert’s utterances during the course of the knowledge elicitation process.

Due to issues such as long-term maintenance of the knowledge base, and taking into account knowledge from experts spread over multiple domains in an organization, there is a strong need to automate this process as much as possible. Gruber  [19] argues that better productivity, development of better methodologies, and the individual sense of motivation and ownership for the expert are some of the reasons why automation of knowledge acquisition is necessary. Since knowledge systems are unlike computer programs in that they are not subject to intermittent changes, but rather grow continuously, a closer interaction between the expert and the expert system may be achieved by eliminating intermediation by a knowledge engineer. It is also useful in sustaining the interest of the experts, as they would be able to quickly see their knowledge being prototyped  [19]. Automation also requires structuring the knowledge in advance, leading to knowledge that is more structured than from protocols or interviews  [20]. The difficulty and cost involved in eliciting knowledge is another strong motivator for automating knowledge acquisition  [6]. Automation of knowledge acquisition systems has already been attempted before, to a fair degree of success in domains such as medicine  [19].

One of the current knowledge acquisition systems in the area of assembly is the knowledge acquisition module of a knowledge based system developed for assembly oriented design  [16,17]. However, it is not clear as to what extent acquisition of knowledge is automated in this system i.e. whether the rules for the system are directly input to the system or constructed through other means such as conducting a dialog with the expert. The knowledge for this system is acquired primarily from designers  [16]. Handbooks and books on design for assembly, as well as consultation with production experts are also quoted as sources of knowledge for this system  [16].

Kitto and Boose  [5] classify knowledge acquisition tools in terms of the tasks that they support, such as those required for analysis versus those for synthesis. It is necessary that they elicit information to meet the unique problem-solving requirements of the application task category, and the strategies are suited for the specific applications. One type of meta-knowledge needed for this is the knowledge required for deciding on the type of knowledge to be acquired and the type of knowledge acquisition tool specifically suited for this purpose  [5].

The ASK system  [19] is an effort towards automating acquisition of strategic knowledge. In ASK, knowledge is divided into two groups: substantive knowledge is used to describe the domain, and draw conclusions from the evidence it has about the world; strategic knowledge is used to suggest the course of action that matches the current situation. Strategic knowledge relies on conclusions drawn with substantive knowledge. However, ASK system still assumes that substantive knowledge has been already acquired and is readily available for use. In the context of our research problem, as in the case of automated knowledge acquisition in general where the computer is not already an expert in the domain, substantive knowledge must still be acquired. Besides, there are application areas in which, for modeling the knowledge, precise concept definitions or algorithms are often unknown or difficult to construct even in an abstract, non-operational form  [20]. The area of analysis and evaluation of assembly plans, we argue, is one amongst these.

Another example of automation of knowledge acquisition is the Ripple down Rules (RDR) approach  [21], which treats knowledge acquisition as knowledge maintenance, by utilizing a tree structure to continuously add and correct knowledge. RDR helps capture the context of usage by helping the expert to monitor the correctness of the rules and to take appropriate action where necessary. However, a major issue with the RDR approach is that in order to use RDR, a well-defined set of concepts and related parameters that can be used for diagnostic purposes must already be available. This, however, is rarely available a priori in acquiring expert knowledge in the domain of assembly planning and evaluation. The model of the assembly environment around which knowledge is acquired is not always available a priori, and must be constructed as one proceeds with the knowledge acquisition process. Hence, as newer chunks of knowledge become available, new concepts need to be defined to make sense of these. The MORE system  [22] organizes expert knowledge into different levels like hypotheses and symptoms, and uses strategies to continuously refine it. However, it does not have example-based elicitation, and the expert has to provide the instances of problems to be diagnosed, which means that it may not be possible to elicit as to which situations the knowledge is applicable, and to which situations it is not. Similarly, the KBDT system  [23] takes in an initial set of vocabulary terms, acronyms and euphemisms, and works with examples to elicit design rationale. An early system ACQUINAS  [24] also looks at knowledge for configuring systems using rating grids, and again uses examples—but this is applicable for domains with a prior, clear, domain model.

Another research effort that targets similar objectives uses Fuzzy Cognitive Models  [25] as the framework for modeling diagnostic knowledge. Similar to our work, this research also focuses on acquiring diagnostic knowledge using a causal network, and makes use of questions around examples to achieve this. However, the above work differs from that of ours in several crucial aspects. In our work, examples used are those of specific assembly situations, unlike in the above work where they specify the broad domain only; our questions are open-ended and attuned to each expert based on his/her answers, and our knowledge elicitation happens in a reverse order of acquisition to that in the above work. While in our work answers to the ‘why’ part of knowledge are also included, as represented by the constraints, this is absent in the above work. The target audience and the placement in the product life-cycle are also different: their focus is on design-domain experts, while ours is on assembly-experts. The most important distinction is the following. In their work, the knowledge elicited is abstracted right from the beginning, which we argue is not possible without the risk of losing the context. This is because all knowledge is context-specific, and therefore must be acquired along with the context in which it applies. This is particularly true in the case of tribal knowledge which grew out of specific sets of experiences of each expert, and is our primary target. A summary of comparisons of the above pieces of work with our work is presented in Table 1
                           .

Since the work reported uses a questioning process, a survey of the interviewing techniques used in knowledge acquisition has been carried out. The survey reveals that Interviews are used largely in the context of manual knowledge acquisition  [26,27] and in some automated systems  [19,28,29]. The major insights obtained from the review of the interview techniques are the following:


                           
                              
                                 1.
                                 The interviews use a broad, pre-defined set of questions (as in the case of focused and structured interviews shown in  [29]).

The specific question asked, and the order in which it is asked, are varied according to the answers received  [19,30].

In order to overcome the various difficulties listed above, a new strategy for automating the knowledge acquisition process in the assembly domain is necessary.

Context denotes the applicability of knowledge  [31], i.e. for deciding as to which pieces of knowledge are valid under a given set of circumstances. Context and knowledge carry a very close relationship with each other. Context, as well as knowledge, may be either explicit or implicit. However, neither implicit knowledge nor implicit context can be made fully explicit. Also, while knowledge remains relatively unchanged between knowledge acquisition and knowledge usage phases, the context triggered by a given event, referred to as proceduralised context, changes during action  [32]. Context may be seen as a way to “cluster knowledge for efficient search, for representing counter-factual or hypothetical situations, for circumscribing the effects of particular actions to particular situations, and for directing an agent’s focus of attention to salient features of a situation”  [33]. The two major previous efforts to realize the context of acquiring and using knowledge are the RDR systems and developing context definition languages  [31]. RDR has the potential to incrementally clarify the context, by saying that it is determined by the case which prompted the last change to the knowledge base  [31].

For the purposes of our research, context is taken as the set of circumstances of an assembly under which a given piece of knowledge is applicable. For example, when an expert provides his knowledge about a set of rules for determining the strength for an isotropic material, the context of the knowledge is isotropic materials. Such a circumstance is represented by what we call a situation. A situation represents the context within which the knowledge acquired from an expert is valid. A single situation is a representative example of many similar situations, for which the same piece of knowledge would be applicable. By ‘similar situations’, we mean those situations for which the same pieces of knowledge apply, by virtue of sharing the same parameters and relations among the parameters. For similar situations, the parameters that affect an issue remain the same, but their values may vary from one such situation to another. The combination of these values decides whether the issue is likely to occur or not. This means that when a new situation is presented, if it shares the same parameters with any original situations, the acquired knowledge from the original situation is also applicable to the new situation. Hence our work uses examples of situations that could be encountered while performing assembly, which are used as the context around which to acquire knowledge.

This section discusses the automation of knowledge processes (as discussed in Section  2.1.1) handled within CAD systems. The first aspect is the acquisition of knowledge. The second aspect to be automated is the reasoning and the representation of knowledge. The work presented here focuses on the acquisition aspect. Some non-CAD systems have now begun to support the updating of knowledge in a semi-automated manner—and are being extended to semi-automated knowledge acquisition  [21]. With CAD systems, the original objective has been to focus on automating the broad decision making and repetitive design tasks  [34]. Currently designers’ knowledge is manually input into CAD systems  [35]; the knowledge comes primarily from designers who are the main users of computer aided design tools  [36], sometimes from assembly planning  [37], but rarely from experienced operators, who perform the operations that lead to the manufacturing and assembly of products and therefore understand the ground-level assembly difficulties faced. There is a need for the ability to absorb, represent, communicate and utilize the knowledge, within the same computational environment, from not only designers, but also experts from all parts of the product lifecycle.

We are yet to come across attempts to develop a system capable of acquiring such expert knowledge for CAD systems, where the expert may be someone other than an engineer who uses CAD  [38]. Knowledge acquisition for CAD systems, remains a manual, specialized, labor-intensive task; large scale automation of knowledge acquisition, we argue, is an important direction for future CAD systems—a direction in which our work is focused [13,38,15].

For the work presented in this paper, the application domain chosen is that of assembly of aircraft components and sub-systems, which includes assembly of rigid (such as beams and spars) as well as flexible (such as electrical cables and hydraulics) structures. This paper considers as an assembly expert one with experience in the assembly domain so that he/she is able to identify potential issues that may arise in a given assembly situation, and can suggest possible remedies for preventing these issues from occurring. The hypothesis is that, given a systematic way of questioning and a suitable knowledge acquisition and representation approach, diagnostic expert knowledge could be acquired, structured and used in the right context.

The overall objective of the research presented here is to develop a knowledge based CAD system for


                        
                           
                              1.
                              automated (computer driven, interactive) acquisition of expert knowledge with which to identify potential issues that might arise during assembly of mechanical components and sub-systems in a given assembly and their possible remedies, and

automated representation of, and reasoning using this knowledge to identify potential issues and proposals for their resolution, as advice for assembly planners early in the planning stage so as to help prevent such issues from occurring during actual assembly.

The following research questions are asked:


                           
                              
                                 •
                                 In the context of an assembly situation, can a method of questioning experts enable knowledge acquisition from assembly experts about potential issues and solutions without the need for an intermediate knowledge engineer?

Is it possible to structure assembly knowledge as it gets acquired, and does this structuring make it easier to build and use the knowledge base?

Can the knowledge acquired using the questioning procedure be used in the context of an assembly situation to identify potential assembly issues and suggest solutions, so that an assembly planner could use this advice?

@&#METHODOLOGY@&#

To develop a strategy for acquiring knowledge from experts, the first step has been to obtain an overview of the type of knowledge necessary to perform diagnosis of potential problems in a given assembly situation, and possible remedial measures that could be taken to alleviate these problems. The types of knowledge necessary for these would influence the scheme of questioning to be developed to tease this knowledge out of the experts. Once such knowledge is elicited, it can be used to test whether or not the current assembly situation would result in issues that would make the process of assembly difficult or impossible, and to suggest proposals to resolve these issues.

In order to develop a preliminary understanding of the types of knowledge necessary, we presented a set of 6 students (2 Masters and 4 Doctoral students) in engineering with two engineering situations that are common in the engineering domain. The students were considered experts for these situations, because they had more than five years of experience of analyzing and proposing remedies for similar situations. The first situation used for questioning involved a cantilever beam. The dimensions of the beam, the material characteristics and the loading conditions in the form of a finger pressing down at the free end of the beam, were given as descriptions of the situation; the experts were asked to describe how they would assess this situation for any potential issues. The second situation consisted of a writing pad in a classroom chair; the pad was shown to the experts, and they were asked to comment individually about issues with the design of the pad. For each issue identified by an expert, he was further asked about the possible causes of and remedies to the issue. This first round of interviews was informal in the sense that there was no specific order of questioning, or no imposed restrictions on the form in which the answers had to be provided.

Conversations during this first set of interviews were recorded, and the questions asked were analyzed to identify possible patterns in the questions and the order in which these are asked. Some of the questions asked are: e.g. “What could be a possible source of concern in this writing pad design?”; “What are the parameters necessary for you to make this decision (of whether the beam is strong or not)?”; “Can you list possible solutions that can solve this problem?”. Initially no specific pattern was observed in the order of questions, and the analyses led only to identification of different types of questions. These questions were classified as what, how, how many, which and why questions. Any other questions that could have been asked might also be fitted into these categories. What questions typically are used to secure pieces of information in a broad perspective, such as the general description of potential issues (What are the possible issues with this particular design?; What do you mean by load here?). How questions help to query about how to evaluate the constraints (How are you going to rectify if there is a problem?; How do you evaluate if this beam holds up to this load or not?). Why questions were asked to clarify the context of certain solutions suggested (Why do you think that would improve the situation?). However, since there was no concrete way found that could be used to directly elicit the context of the situation from the expert, this was later not used.

Based on the above questions, a procedure for asking questions was developed. Not only are the questions themselves important, but also is the order in which they should be asked. In order to clarify the order in which the questions should be asked, please recall that one of the research objectives is to automate the task of acquiring knowledge to diagnose issues in a given assembly situation. This means that information about the assembly situation would be presented in the form of relevant parameters pertaining to geometry, assembly sequence, etc. The system’s knowledge needs to process this information, and make inferences about which potential issues might arise. Note that such issues would always mean a violation of some constraints regarding the assembly e.g. the bend radius of the cable in the current situation is less than the minimum allowable bend radius of the cable. Knowledge of such constraints may remain explicit or tacit unless the expert is asked to make these explicit. These constraints must be available to the system for it to evaluate whether the constraints are violated in a given assembly situation.

Therefore, the first questions must address identification of issues, followed by questions that help identify the associated constraints. This is achieved by querying the causes and effects of the issue and eliciting in an explicit form the constraints from the cause of the issue.

The next type of knowledge needed is about how the system should evaluate whether the constraints are violated or not. We observed that the constraints were either related to a set of parameters that were mathematically calculable, such as the weight, or the gap between two components, or were textually expressible, such as the material of insulation used. The constraints are specific relationships among these parameters. For example, if an expert expressed that an issue is that a cable may not be able to sustain the bend envisaged as a result of its assembly, the associated parameters might be the bend radius of the cable and the minimum required bend radius of the cable, and the constraint may be expressed as: bend radius of the cable should be less than the minimum bend radius of the cable.

The parameters can be independent parameters, or expressions that are functions of other parameters. These are shown in Fig. 1
                         respectively as basic and derived parameters. The relationships necessary for constructing derived parameters must also be acquired by questioning. The questions, therefore, now must involve identifying the parameters, and continue until a level is reached at which each parameter can be specified in terms of the basic parameters.

Hence, as shown in Fig. 2
                        , the first question would be to ask about any potential issues, and continue to ask about the possible cause(s) and effect(s) of the issue. This is followed by clarifying the cause of the issue in a relational form, which we call the X Rel Y form where 
                           X
                         and 
                           Y
                         are parameters, and Rel represents a relationship between these parameters. For example, if the issue is that “the cable may not be able to sustain the bend”, the cause is that “the bend radius of the cable is less than the minimum allowable bend radius”. In this example, 
                           X
                         is “bend radius of the cable”, 
                           Y
                         is “minimum allowable bend radius of the cable”, and Rel is “less than”. This relational form represents the constraint in this case. Note that in general, such relations need not always be between two parameters only, nor need they be linear: a constraint can be a relation made of either quantitative (both linear and non-linear) or logical operators applied on any number of entities, and can even be a logical combination of many such relations. For instance, “bend radius of the cable should be less than 2.0 m” AND “bend radius of the cable should be greater than 1.5 m”. However, in the current implementation, only linear relations between two parameters have been included.

The expert is now asked to describe each of the terms represented by 
                           X
                         and 
                           Y
                         in the form of an Attribute of an Object, e.g. the bend radius (attribute) of the cable (object). The aim is to reduce the number of different ways in which an expert can express a particular term, thereby reducing potential confusion among pieces of information collected from experts that in reality represent the same knowledge. Note that the term attribute is used while developing the questioning procedure and the term parameter is used while describing the basic and derived types; in practice each parameter would be an attribute of an object.

The next question would be on how to determine 
                           X
                         and 
                           Y
                        . In turn, if either of these are functions of derived parameters, the question of whether they are derived or basic needs to be repeatedly asked until the whole term is expressible in terms of basic parameters only, information about which would then have to be supplied as data. The final questions pertain to identifying potential remedial solutions to resolve the issue under focus. This whole procedure of asking questions would have to be repeated for every issue identified for a given situation.

To verify whether the questioning procedure has the ability to elicit necessary knowledge from an expert, it had to be checked that an appropriate knowledge base could be constructed in a usable form using the answers from the questions asked. The verification was done by carrying out the questioning for two situations, before its implementation into a computer program. Seven experts were questioned individually (4 of whom were among the experts mentioned in Section  4.1). The researchers manually carried out the questioning procedure (shown in Fig. 2) for one earlier test situation and one new, assembly-related situation. These interviews were similar to the earlier interviews, except that they were now structured: the answers provided were shorter because of questions being asked in the order prescribed in the questioning procedure. There was no need for elaborating the answers more than required, since the questions were specific and ordered. These interviews were video recorded, transcribed into utterances, and the transcriptions were analyzed to identify which pieces of knowledge elicited during these dialogs provided opportunities for creating rules that would form the basic knowledge constructs in our knowledge based system. From the interviews, 217 such opportunities for creating rules were identified, which meant that if an expert system was manually constructed after the interviews, it could potentially contain 217 rules.

While using the questioning procedure, it was observed that it was possible to obtain appropriate answers for the various types of knowledge required as shown in Fig. 2. By generating various rules for each knowledge type such as constraint and solution, the structuring of knowledge was carried out. In order to reason with this knowledge, the reasoning ability provided in standard expert system shells were adopted; this saved the effort of developing a new inference engine, which was unnecessary as existing approaches seemed adequate.

@&#IMPLEMENTATION@&#

The questioning procedure has been implemented within a software tool titled ExKAV, an acronym for 
                           EXpert Knowledge Acquisition and Validation. Apart from the questioning procedure, ExKAV also has an expert system to store and use the knowledge base and a user interface for experts and assembly planners. The screen capture of this tool at startup is shown in Fig. 3
                        . The program is written in C++ language. The expert system component comprising of the knowledge base and the inference engine has been implemented using the CLIPS (C Language Integrated Production Systems) expert system shell  [39]. The interface implementation was developed using Microsoft Foundation Classes (MFC)  [40], and presentation of the three dimensional model of the situation has been done using Dassault Systèmes’ 3DVIA Player  [41].

An additional feature of this system is the presentation of the acquired knowledge in the form of a directed graph. An example is shown in Fig. 4
                        . Graphing software yED  [42] has been used for visualizing this, and the graphs themselves are created using the GraphML  [43] format. In Fig. 4, the yellow colored nodes represent parameters of the system, and the red colored nodes represent the issues that have been detected in the system. The links represent the direction, from the parameters that are a part of the constraints, to the issues that are identified. These issues arise because of violation of a constraint, which is evaluated using the parameters.

The ExKAV system has the following components as shown in Fig. 5
                           :


                           
                              
                                 •
                                 A CLIPS expert system, which is made up of 
                                       
                                          ∘
                                          a knowledge base to store expert knowledge;

an inference engine that reasons using the knowledge in the knowledge base to identify which issues might arise in a given assembly situation;

A computer implementation of the questioning procedure for acquiring knowledge;

A graphical interface between the user and the ExKAV system. Here the term ‘user’ refers to either an expert from whom knowledge is to be acquired, or an assembly planner, who seeks expert advice;

A list of situations, used for knowledge acquisition or for knowledge usage;

A facility for visualizing the knowledge acquired about potential issues and resolutions for the current situation, in the form of a directed graph whose structure is similar to that shown in Fig. 1. No dedicated interface was developed for this purpose, since a graph viewer is readily available for the graphing language used  [42,43].

ExKAV system currently operates in two modes, namely acquisition of knowledge from an expert, and the usage of expert knowledge by assembly planners.

The knowledge acquisition mode is the mode in which an expert interacts with the system while being presented with a situation and as questioning is carried out (see Fig. 6
                              ). As a result of the questioning and answers obtained from the experts as textual inputs, rules are automatically created in the knowledge base. Along with the rules, there are also facts in the knowledge base. Facts are statements which represent the state of a situation at a given instant of time, such as the values of the parameters of a system (e.g. ‘length of the beam is 6.0 m’). These facts may be extracted directly from CAD models depicting a situation, derived from facts available in CAD models, provided by experts in previous sessions, or derived from other facts using given rules.

For example, consider that when the system is started, the knowledge base already consists of knowledge about one issue, namely that ‘cable may not be able to withstand the bending constraint’. The rules generated for this issue are shown in the left side of Fig. 11.

Now the expert can interact with the system to add another potential issue that he/she might see in the given situation. The situation presented to the expert is that of an assembly of four parallel plates with a certain distance from one another, with holes drilled at different locations in each, through which a cable bundle must be inserted, as shown in Fig. 3. The potential issue seen by the expert is about the assembly being too heavy.

The expert states that the assembly may be too heavy, and specifies the cause and effect for this problem (see Fig. 7
                              ). The cause is that the ‘cumulative weight of cable bundle and the plates is greater than the stipulated weight’. This cause is further clarified as shown in Fig. 8
                               to find out a relational form—‘assembly weight is greater than stipulated weight of assembly’. This leads to the identification of the constraint that is responsible for the issue. The representation of these parameters in the form of attribute of an object is also clarified. (The relational form for constraints and the attribute of object form for attributes are already described in Section  4.2.)

The expert is then asked about how to find values for each of these attributes: whether they can be calculated using a formula, or they need to be supplied. In this example an expression is supplied for the weight of the assembly, as shown in Fig. 9
                              . This expression is automatically captured by the system as a rule. Finally possible solutions to these issues are asked about, and answers obtained, as shown in Fig. 10
                              .

After this run of the system, the expert can choose to enter knowledge about a new issue for the same situation, or choose a different situation, or choose to quit the system.


                              Fig. 11
                               shows the growth of the knowledge base as a result of the above questioning session. On the left is the knowledge base before the questioning session: it has some rules which were generated during a previous run of the system (for the issue ‘cable may not be able to withstand the bending’). For the new issue that has been added (‘assembly may be too heavy’), after going through the process of questioning with an expert, the system generates some new rules, which are then added to the knowledge base. The new, expanded knowledge base after the addition of the new rules is shown on the right side.

The usage mode of the ExKAV system is shown in Fig. 12
                              . The knowledge base and the details of the current assembly are inputs to the system to perform the inference (reasoning using the knowledge). A situation is selected by the assembly planner (shown as ‘current assembly’ in Fig. 12). At this stage of the tool, the attributes that describe the assembly situation are supplied to the system in a text format. The system takes in this input, and uses the knowledge it contains to reason and infer the potential issues that might arise for this situation, and advises the assembly planner with suitable resolutions to these issues. The result of inference is assembly advice in the form of potential issues and suggested resolutions, as shown in Fig. 13
                              .

A preliminary evaluation was carried out on ExKAV in order to verify whether it addresses the research questions enlisted in Section  3.3.1. The preliminary evaluation was carried out in four sessions using domain experts from the industry with extensive experience in aircraft assembly. Each session used an exclusive combination of an individual expert and an example situation. The sessions were held in the presence of the researchers. The presence of the researchers as intermediaries was necessary to provide any clarity needed in using the tool, since the experts were not trained in using the tool.

Before the results of evaluation are presented, it is important to discuss the validity of the number of cases used in evaluation. Unlike in the case of utility software tools, e.g. PDM or PLM systems, where comprehensive testing is possible before deployment of a system due to availability of testing resources and conditions, testing of knowledge acquisition systems with real experts in a specific domain is faced with severe constraints on the availability of a large number of experts in the domain, and the amount of time available from them for evaluation. This is echoed in  [44], which detailed comprehensively the issues with evaluation of knowledge acquisition systems. Given the above constraints, the research literature in this area seems to accept relatively small number of cases as adequate for evaluation of knowledge acquisition systems. For instance, Shadbolt et al.  [44], Burton et al. [ibid], and Schweikert et al. [ibid] indicate similar numbers of cases to our paper, as adequate for evaluation of their knowledge acquisition systems. The important point to note here is that, if one were to preserve realism (i.e. use of real experts), then it would be hard to obtain statistically large number of cases. We have tilted for realism, as this provides more realistic insights into the effectiveness of knowledge acquisition in this area for practice.

The experts were presented with two situations, which were typical situations that would be encountered in aircraft assembly. The first assembly, shown in Fig. 3, consists of four plates of identical dimensions spaced parallel at regular intervals. Each plate has a hole drilled in it, wherein the hole is of equal dimensions, but its location on each plate is different. The second situation consists of 5 parts as shown in Fig. 14
                        , and is part of a larger, industrial assembly.

The experts were then taken through the questioning procedure by navigating through the various sections of the tool that successively poped-up one after the other. Where necessary, intervention of the researcher was needed to clarify some terms. Once the questions have been answered by the expert, the ExKAV system generated a set of CLIPS rules that became part of the knowledge base.

Evaluation of the acquired knowledge has been done by applying the rules that have been generated, to the same situation. In order to do so, it is necessary to apply this knowledge to a particular assembly situation, so that one can verify whether the knowledge acquired can be used to predict possible issues in that situation and suggest suitable remedies for these issues. This is the point where the system would qualify itself as a knowledge-based design support system. Hence it is necessary to input all information about a situation as input for the knowledge to act upon. At this stage of research, the parameters that form the model of the situation, for example the material properties and the geometric dimensions, are supplied in the form of a text file.


                           Table 2
                            summarizes the results from the evaluation, which are described under a set of sessions, see Column 1 in the table. During each session, with the aid of ExKAV, the experts were able to identify and detail seven potential issues within the given assembly situation. Altogether, a total of 53 rules were generated for the seven issues identified. On average, each session took about 24 min, each issue took an average of 13.5 min to identify and detail, leading to an average of 1.8 min per rule constructed to capture relevant knowledge for identifying and resolving issues. The automated conversion of knowledge acquired into rules happens in real-time, in a matter of less than a second.

One of the issues identified was that the cable path may be blocked by a control box component. For this, the cause was identified to be that the 
                              z
                           -coordinates of both the control box and the hole in the third plate are the same. Each was represented in the form of an attribute (e.g.  
                              z
                           -coordinate) of an object (e.g. hole in third plate), and the cause as a relationship between these two. Following this, further questions were asked about whether these attributes needed to be supplied by the user, or could be determined from other attributes already known to the system. In this case, both the attributes, i.e. the 
                              z
                           -coordinates of the hole in third plate and that of the control box have been deemed, by the experts, as data to be supplied. The experts were asked about possible resolutions to this issue. Six rules were generated by the system for this issue and its resolution. The following is an example CLIPS rule generated:


                           
                              
                                 
                                    
                                    
                                       
                                          (defrule MAIN::the-cable-path-is-being-blocked-by-the-control-box-constraint-rule
                                       
                                       
                                          
                                             (z coordinate of hole is ?c-x)
                                       
                                       
                                          
                                             (z coordinate of control box is ?c-y)
                                       
                                       
                                          
                                             (test (= ?c-x ?c-y))
                                       
                                       
                                          
                                             
                                             
                                                =
                                                >
                                             
                                          
                                       
                                       
                                          
                                             (assert (the cable path is being blocked by the control box)))
                                       
                                    
                                 
                              
                           
                        

where,

‘the-cable-path-is-being-blocked-by-the-control -box-constraint-rule’ is the name of the rule and 
                              =
                              >
                            symbol separates the premise and conclusion of the rule.

Another issue identified by the experts was that the distance between two plates of an assembly may not be sufficiently large. This led to the constraint that the distance between the two plates must be greater than a specified value. After using the relational form, and obtaining the parameters in the form of an Attribute of Object, the expression to calculate the distance between the two plates was also acquired. A total of six rules was generated for this issue, including those for evaluating the constraint, the possible solutions, and the data necessary for evaluation.

Also identified was an issue that the cable bundle may not fit into the hole, due to tolerance values. Here the constraint identified was that the maximum diameter of the cable bundle must be greater than minimum diameter of the hole. A set of twelve rules was generated for this issue.

The fourth potential issue identified was that the edge of the hole may damage the cable bundle surface. The constraint here was that the contact stress on the cable bundle surface should not be greater than the strength of the cable bundle material. Nine rules were created for this issue by the system.

In the knowledge usage mode, the same situation was used. The situation was simulated using attributes supplied to the system in a text format, such as ‘the 
                              z
                           -coordinate of the hole is 0.05 m’. The system was able to use these knowledge inputs, and the rules constructed automatically from the earlier knowledge provided by the experts, to point out potential issues, in this case the issue of the ‘control box possibly blocking the cable path’. The solution suggested to this issue i.e. ‘relocate the box’ was also correctly inferred. Potential issues and their solutions were also pointed out for the other issues (that were part of the knowledge base) when the respective constraints were violated in the situation.

Through our interviews and subsequent analyses, a knowledge acquisition approach has been developed, and has been implemented in a computer program called ExKAV. It has been evaluated with inputs from industrial experts, and has been found to be capable of capturing and using knowledge to identify possible issues and resolutions in a given assembly situation, as would be suggested if these experts were questioned instead.

In view of the original research questions described in Section  3.3.1, this evaluation confirms that a systematic way of questioning experts has enabled knowledge acquisition without the presence of a knowledge engineer. The knowledge base has been built by the knowledge acquisition system in an entirely automated manner as a result of its interactions with the experts. This was possible due to the process of structuring the knowledge as it is being acquired, thus addressing the second research question. Regarding the third research question, a demonstration of using the acquired knowledge on the same situation has been made. The issues and solutions as advised by the system suggest that a virtual knowledge link between experts and assembly planners has been established.

The work demonstrates the efficacy of using examples of assembly situations as a means of capturing context, when it is difficult to model the domain a priori. Note that the example situations used in both knowledge acquisition and usage are the same. It is yet to be clear what a similar situation would mean: how far can we call a situation as similar, and when do they become different? This requirement of applying the knowledge in the same context as that of the knowledge acquisition is a potential direction for future work and is discussed further in the next section.

The novelty of the approach presented here is that knowledge acquisition occurs without the need for an a priori domain model. The use of examples as the context for knowledge acquisition is also something we have not seen in this domain. The method addresses the difficulty of automatically acquiring and structuring assembly knowledge without an intermediary to translate experts’ utterances. It is also a step towards reducing the need for assembly planners to make additional efforts to gain expert shop floor knowledge and manually document this knowledge. Instead, a tool such as ExKAV should be useful in providing a virtual link between the assembly experts’ knowledge and the assembly planners’ need for diagnostic knowledge.

The validation of the ExKAV system is proposed to be carried out on a larger scale, by putting it to test against a larger number of experts and situations, and through unmediated usage of the system by the experts and assembly planners. Also, the description of situations on which knowledge is applied needs to be in the form of real time CAD data, rather than a text file that has been currently used.

Knowledge for detecting and explaining issues in assembly does not come from the perspective of only a single expert from a narrow domain; rather, knowledge needs to be sourced from a variety of experts from multiple domains. These domains may or may not share common knowledge, and it is also possible that contrasting opinions might exist among experts between domains, and sometimes even within the same domain. Given the above, two rules can be contradictory, e.g. two issues or resolutions to the same coming from different experts can conflict one another. It also possible that some resolutions can lead to new issues, and these can be circular. Consolidation of knowledge is clearly an important issue for organizing a large body of acquired knowledge.

Conflict resolution has been considered previously in other work  [17], even though the issue is far from resolved.

However, the focus of the work presented in this paper is knowledge acquisition rather than consolidation. The acquired rules, in the current version, can therefore indeed be contradictory. While this can be a potential limitation, it can also be an indicator of differences in views among experts in a specific context, for reasons that need to be explored among experts and externally revised before consolidation can happen. Knowledge consolidation has therefore been kept as part of our future work.

We need to identify whether the context in which a piece of knowledge is applied is similar to the context in which it has been acquired, i.e. whether the knowledge is applicable or not in the usage situation. This requires further clarifying the meaning of ‘similar situations’—i.e. new situations to which knowledge acquired in earlier situations can be applied. Our aim is to develop a single questioning structure that adapts to all possible assembly situations in this domain. It is the flexibility built into the questioning process that is intended to address this issue. However, before this can be tested, a characterization of different situations is necessary. This is a separate challenge in itself, and the work towards this is already in progress; however, the work on this is yet to mature, and hence not yet ready for reporting.

@&#ACKNOWLEDGMENTS@&#

Support of The Boeing Company, St. Louis, USA under SID Grant No. 36016 of Indian Institute of Science is gratefully acknowledged. We also thank Dr. Al Salour, Mr. Howard Appelman and Mr. Prasun Bansal of The Boeing Company for their valuable support.”

@&#REFERENCES@&#

