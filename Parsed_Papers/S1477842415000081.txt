@&#MAIN-TITLE@&#Fully abstract trace semantics for protected module architectures

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           Formalises 
                                 A
                                 +
                                 I
                              : an assembly language extended with protected module architectures – an isolation mechanism found in emerging processors.


                        
                        
                           
                           Presents two trace semantics for 
                                 A
                                 +
                                 I
                               programs and proves that both are fully abstract w.r.t. the operational semantics.


                        
                        
                           
                           Details which problems arise when considering readout and writeout labels in the trace semantics of 
                                 A
                                 +
                                 I
                               programs.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Fully abstract semantics

Trace semantics

Untyped assembly language

Protected modules architectures

Formal languages

@&#ABSTRACT@&#


               
               
                  Protected module architectures (PMAs) are isolation mechanisms of emerging processors that provide security building blocks for modern software systems. Reasoning about these building blocks means reasoning about elaborate assembly code, which can be very complex due to the loose structure of the code. One way to overcome this complexity is providing the code with a well-structured semantics. This paper presents one such semantics, namely a fully abstract trace semantics, for an assembly language enhanced with PMA. The trace semantics represents the behaviour of protected assembly code with simple abstractions, unburdened by low-level details, at the maximum degree of precision. Furthermore, it captures the capabilities of attackers to protected code and simplifies the formulation of a secure compiler targeting PMA-enhanced assembly language.
               
            

@&#INTRODUCTION@&#

Emerging processors, such as the Intel SGX [1], provide isolation mechanisms as software security building blocks. These are used to withstand low-level attackers who, generally through injected assembly code, can read the whole memory space and can thus access secrets in memory, violate integrity constraints and so on. When these isolation mechanisms are in place, attackers cannot directly violate security properties of isolated software since the isolated memory is not accessible to them. Examples of these protection mechanisms are protected module architectures (PMAs) [1–7], which enforce security properties at process or lower levels (Ring −1). With PMA, the software to be secured is placed in a protected memory partition (a protected module) that shields it from the surrounding, potentially malicious code. The malicious code can neither read nor write the protected memory; it can only jump to specific addresses in protected memory in order to call functions of the protected code. Thus, PMA makes software more resilient against low-level attackers. However, this does not prevent an attacker from violating security properties of protected code by interacting with it.

Describing the interaction between protected and unprotected code or (dually) of an attacker to protected code can be done by using contextual equivalence. However, while being precise, contextual equivalence is notoriously difficult to reason about [8]. An alternative characterisation of the behaviour of protected code has the form of fully abstract trace semantics. Such a semantics uses simple abstractions to represent the behaviour of protected assembly code, unburdened by low-level details, while remaining at the maximum degree of precision. Dually, it models the behaviour of attackers to protected code, since it captures precisely the capabilities of those attackers.

The fully abstract trace semantics has the following benefits. Firstly, it allows contextual equivalence to be disregarded, since contextual and trace equivalences are proven to be equally precise. The full abstraction property ensures that traces express precisely all the capabilities of an attacker. Without the trace semantics, the capabilities of an attacker towards protected code are expressed by means of contexts: complex sequences of assembly instructions. With the trace semantics, the capabilities of that attacker are captured via the simple notion of traces, which provide a clearer abstraction than contexts.

Secondly, the fully abstract trace semantics fulfils the claims of recent secure compilation works targeting PMA-enhanced assembly languages. Given two programs C
                     1 and C
                     2 written in a language L, indicate their compilation to an assembly language with 
                        
                           
                              C
                           
                           
                              1
                           
                           
                              ↓
                           
                        
                      and 
                        
                           
                              C
                           
                           
                              2
                           
                           
                              ↓
                           
                        
                      respectively. One way of proving the compilation scheme secure is formally stated as 
                        
                           
                              C
                           
                           
                              1
                           
                        
                        ≃
                        
                           
                              C
                           
                           
                              2
                           
                        
                        
                        ⟺
                        
                        
                           
                              C
                           
                           
                              1
                           
                           
                              ↓
                           
                        
                        ≃
                        
                           
                              C
                           
                           
                              2
                           
                           
                              ↓
                           
                        
                      
                     [9]. The more complex direction of this proof is 
                        
                           
                              C
                           
                           
                              1
                           
                        
                        ≃
                        
                           
                              C
                           
                           
                              2
                           
                        
                        ⇒
                        
                           
                              C
                           
                           
                              1
                           
                           
                              ↓
                           
                        
                        ≃
                        
                           
                              C
                           
                           
                              2
                           
                           
                              ↓
                           
                        
                     , but it can be simplified by adopting a fully abstract trace semantics for the assembly language, as in the works of Agten et al. [10] and Patrignani et al. [11,12]. These works presented secure compilers to PMA-enhanced assembly code that depend on the assembly language having a fully abstract trace semantics such as one of those presented in this paper.

Finally, the trace semantics allows some limitations of the aforementioned secure compilers to be forgone. Currently, securely-compiled function calls can have a number of parameters based on what the registers allow. To overcome this limitation (or to pass large data that does not fit in a register value), additional parameters can be spilled on the stack in unprotected memory. To allow this spilling, the trace semantics needs to capture reading and writing outside of the protected memory. While none of the previous did, the trace semantics of this paper considers both operations.

This paper initially presents the PMA protection mechanism and informally describes how to devise a fully abstract trace semantics for PMA-enhanced assembly code (Section 2). Then it introduces 
                        A
                        
                           +
                        
                        I
                     : an assembly language enhanced with PMA (Section 3). This paper then investigates how different operations across PMA boundaries are supported by trace semantics. It explores the design space of trace semantics for 
                        A
                        
                           +
                        
                        I
                      and presents two different fully abstract trace semantics for it (Section 4): one where cross-boundary operations are restricted to function calls (Section 4.1) and one where they are unrestricted (Section 4.2). This paper extends the authors’ previous work [13] by considering additional behaviour in traces in the form of protected code reading unprotected memory (whose complications are explained in Section 2.2). This paper then provides a general strategy to simplify the proof of full abstraction of the trace semantics (Section 5). Finally, it reviews related work (Section 6) and concludes (Section 7). Limitations of this work are threefold. Firstly, the trace semantics cannot express side-channel attacks. Secondly, the formalisation does not consider details of the architecture such as caches; yet this is a commonly found assumption [10,11,14,15]. Thirdly, the second trace semantics relies on an assumption on the partitioning of unprotected code that is not readily fulfilled by certain PMA implementations; Section 7 discusses this limitation.

This section describes the PMA memory access control mechanism and the behaviour of 
                        A
                        
                           +
                        
                        I
                      code (Section 2.1). Then it discusses the pitfalls to avoid in order to obtain a fully abstract trace semantics for 
                        A
                        
                           +
                        
                        I
                      code (Section 2.2).

The assembly language is enhanced with a protected module architecture (PMA). This isolation mechanism enforces a fine-grained, program counter-based memory access control mechanism [2–7]. We review this mechanism from the work of Strackx and Piessens [6], upon which our results are based. The techniques presented in this paper can nevertheless be easily adapted to reasoning about other isolation mechanisms [2,3,5]. The protection mechanism provides a secure environment for running code that must be protected from the code it interacts with. This mechanism assumes that the memory is logically divided into a protected and an unprotected partition. The protected partition is further divided into a read-only code and a non-executable data section. The code section contains a variable number of entry points: the only addresses where instructions in unprotected memory can jump to and execute. The data section is accessible only from the protected partition. Based on the location of the program counter, instructions that violate the access control policy cause the execution to halt 
                        [10,11].

The table below summarises the access control model enforced by PMA. 
                           
                              
                                 
                                 
                                 
                                 
                                 
                                 
                                    
                                       
                                          
                                             From
                                             ≥
                                             to
                                          
                                       
                                       Protected
                                       Unprotected
                                    
                                    
                                       
                                       Entry point
                                       Code
                                       Data
                                       
                                    
                                 
                                 
                                    
                                       Protected
                                       r x
                                       r x
                                       r w
                                       r w x
                                    
                                    
                                       Unprotected
                                       x
                                       
                                       
                                       r w x
                                    
                                 
                              
                           
                        
                     

Following are some code snippets that exemplify how the PMA access control mechanism works, and, introduce the syntax of the 
                           A
                           
                              +
                           
                           I
                         along the way. All 
                           A
                           
                              +
                           
                           I
                         examples throughout the paper assume the presence of a protected memory section spanning from address 100 to 200, with a single entry point at address 100. In the examples, call the code located in the protected section P
                        
                           s
                         and the code located in the unprotected section P
                        
                           u
                        . Every instruction is preceded by the address where it is located; execution starts at address 0. 
                           Example 1
                           No execution of code in the protected code section


                           
                              P
                              
                                 u
                               initialises register 
                                 
                                    
                                       r
                                    
                                    
                                       0
                                    
                                 
                               to 101 (line 1) and then jumps to that address (line 2). 
                                 
                                    
                                       
                                          
                                             
                                          
                                       
                                    
                                 
                              Since address 101 is not an entry point of the protected memory section, the jump of 
                                 
                                    
                                       P
                                    
                                    
                                       u
                                    
                                 
                               does not succeed.


                              
                                 
                                    
                                       P
                                    
                                    
                                       u
                                    
                                 
                               initialises register 
                                 
                                    
                                       r
                                    
                                    
                                       0
                                    
                                 
                               to 101 (line 1) and register 
                                 
                                    
                                       r
                                    
                                    
                                       1
                                    
                                 
                               to 20 (line 2), then it writes the contents of 
                                 
                                    
                                       r
                                    
                                    
                                       1
                                    
                                 
                               to the address in 
                                 
                                    
                                       r
                                    
                                    
                                       0
                                    
                                 
                               (line 3). 
                                 
                                    
                                       
                                          
                                             
                                          
                                       
                                    
                                 
                              Since address 101 is protected, 
                                 
                                    
                                       P
                                    
                                    
                                       u
                                    
                                 
                               cannot write there, so execution is halted, as in Example 1. Analogously, if the instruction of line 2 were replaced with 
                                 movl
                                 
                                 
                                    
                                       r
                                    
                                    
                                       0
                                    
                                 
                                 
                                 
                                    
                                       r
                                    
                                    
                                       1
                                    
                                 
                              , the execution halts. In that case, 
                                 
                                    
                                       P
                                    
                                    
                                       u
                                    
                                 
                               would be attempting to read the protected memory section, while it does not have that privilege.


                              
                                 
                                    
                                       P
                                    
                                    
                                       u
                                    
                                 
                               initialises register 
                                 
                                    
                                       r
                                    
                                    
                                       0
                                    
                                 
                               to 12 (line 1), register 
                                 
                                    
                                       r
                                    
                                    
                                       1
                                    
                                 
                               to 10 (line 2), register 
                                 
                                    
                                       r
                                    
                                    
                                       5
                                    
                                 
                               to 100 (line 3) and then calls to the protected function located at address 100 (line 4), storing address 4 on the call stack (implicit). 
                                 
                                    
                                       P
                                    
                                    
                                       s
                                    
                                 
                               subtracts registers 
                                 
                                    
                                       r
                                    
                                    
                                       0
                                    
                                 
                               and 
                                 
                                    
                                       r
                                    
                                    
                                       1
                                    
                                 
                               (line 6) and, if the result is greater than or equal to zero, returns that result (line 9). Otherwise, if the result is less than zero, 
                                 
                                    
                                       P
                                    
                                    
                                       s
                                    
                                 
                               jumps to address 104 (lines 7 and 8), and returns 0 (lines 10 and 11). Execution then continues in unprotected memory at address 4 (line 5, omitted), which is the address popped from the call stack (implicit). 
                                 
                                    
                                       
                                          
                                             
                                          
                                       
                                    
                                 
                              
                           

To provide a better understanding of the PMA memory layout, Fig. 1
                               below provides a graphical representation of the layout of this example.

As seen in Example 3, the description of the behaviour of protected 
                           A
                           
                              +
                           
                           I
                         code can be rather burdensome as it is expressed in terms of the external code and each protected instruction. A trace semantics can give a simpler description of the behaviour of protected 
                           A
                           
                              +
                           
                           I
                         code in terms of a set of sequences of labels. These labels capture how communication between protected and unprotected codes happens and what is communicated. In this paper, trace semantics are devised to capture the behaviour of a protected program, which is a program allocated in the protected memory partition. Example 4 presents a trace-based description of the behaviour of the protected code of Example 3. After showing the limitations of the initial trace semantics, this section presents the pitfalls that arise when considering writes (Section 2.2.1) and reads (Section 2.2.2) to unprotected memory. 
                           Example 4
                           Describing behaviour with traces


                           Consider only the protected code of the snippet from Example 3. 
                                 
                                    
                                       
                                          
                                             
                                          
                                       
                                    
                                 
                              Since there is a single entry point to this code, located at address 100, this code just represents a single function. A possible behaviour of this code can be expressed as follows (
                                 ·
                               is used to separate actions of the same trace): 
                                 
                                    
                                       call
                                       
                                       100
                                       
                                       
                                          
                                             r
                                          
                                          
                                             0
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             r
                                          
                                          
                                             11
                                          
                                       
                                       ·
                                       ret
                                       
                                       
                                          
                                             r
                                          
                                          
                                             0
                                          
                                       
                                    
                                 
                              
                           

To describe the behaviour of the code of Example 4 as a trace, we identify the actions that are observable from the point of view of code interacting with the snippet above: call and ret. These actions are the labels of the trace semantics; they are generated by call and ret instructions. Not all instructions generate a visible label in a trace, only those whose effect can be observed from the unprotected code.

Following is the syntax of labels of a trace semantics for protected 
                           A
                           
                              +
                           
                           I
                         code. 
                           
                              
                                 L
                                 ::=
                                 a
                                 ∣
                                 τ
                                 ,
                                 
                                 a
                                 ::=
                                 g
                                 ?
                                 ∣
                                 g
                                 !
                                 ,
                                 
                                 g
                                 ::=
                                 call
                                 
                                 p
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       ¯
                                    
                                 
                                 )
                                 ∣
                                 ret
                                 
                                 v
                              
                           
                        A label L can be an observable action a or a non-observable action τ. Decorations ? and 
                           !
                         indicate the direction of the observable action: from unprotected to protected code (?) or vice versa 
                           (
                           !
                           )
                        . Address p is an address in memory, 
                           
                              
                                 v
                              
                              
                                 ¯
                              
                           
                         is a list of the contents of all registers in a call and v indicates the contents of register 
                           
                              
                                 r
                              
                              
                                 0
                              
                           
                         in a return. Calls and returns executed by unprotected code are named calls and returnbacks, dually, if they are executed by protected code they are named callbacks and returns 
                        [10,16].

This paper aims at providing a fully abstract trace semantics, thus implying that the trace semantics is the most precise. Informally, a trace semantics is fully abstract when its labels capture all that is being communicated between the protected and the unprotected code but no more. A trace semantics following the discussion above would not be fully abstract due to a number of subtleties, as highlighted in Example 5. 
                           Example 5
                           Limitation of the aforementioned trace semantics


                           Consider the two protected 
                                 A
                                 
                                    +
                                 
                                 I
                               programs below, call the left one P
                              
                                 L
                               and the right one P
                              
                                 R
                              . When presenting snippets side by side, differences are highlighted in a blue font. 
                                 
                                    
                                       
                                          
                                             
                                          
                                       
                                    
                                 
                              
                           

Both P
                              
                                 L
                               and P
                              
                                 R
                               assign the result of 
                                 
                                    
                                       r
                                    
                                    
                                       0
                                    
                                 
                                 −
                                 
                                    
                                       r
                                    
                                    
                                       1
                                    
                                 
                               to 
                                 
                                    
                                       r
                                    
                                    
                                       0
                                    
                                 
                               (line 1). If the result of the operation is not less than 0 (line 3), they respectively write the contents of 
                                 
                                    
                                       r
                                    
                                    
                                       4
                                    
                                 
                               and 
                                 
                                    
                                       r
                                    
                                    
                                       5
                                    
                                 
                               to the unprotected address 10 (lines 4 and 5) and call the function whose address is stored in 
                                 
                                    
                                       r
                                    
                                    
                                       2
                                    
                                 
                               (line 6). Otherwise, they assign different values to 
                                 
                                    
                                       r
                                    
                                    
                                       11
                                    
                                 
                               (line 7) and return 0 (lines 8 and 9).

With the trace semantics hinted at after Example 4, the behaviours of P
                              
                                 L
                               and P
                              
                                 R
                               coincide, as they generate the same traces. However, P
                              
                                 L
                               and P
                              
                                 R
                               can be distinguished by an external observer, and the traces they generate should reflect this. Consider trace 
                                 
                                    
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                       
                                    
                                    
                                       ¯
                                    
                                 
                              , which is generated by both P
                              
                                 L
                               and P
                              
                                 R
                               (omitted details are indicated using …). 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   a
                                                
                                                
                                                   1
                                                
                                             
                                          
                                          
                                             ¯
                                          
                                       
                                       =
                                       call
                                       
                                       100
                                       (
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       )
                                       ?
                                       ·
                                       ret
                                       
                                       0
                                       !
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                       
                                    
                                    
                                       ¯
                                    
                                 
                               does not capture the different values contained in 
                                 
                                    
                                       r
                                    
                                    
                                       11
                                    
                                 
                               (line 7), which, even if they are not the returned values of the function, still constitutes an observable difference between P
                              
                                 L
                               and P
                              
                                 R
                              .

Trace 
                                 
                                    
                                       
                                          
                                             a
                                          
                                          
                                             2
                                          
                                       
                                    
                                    
                                       ¯
                                    
                                 
                               is also generated by both P
                              
                                 L
                               and P
                              
                                 R
                              . 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   a
                                                
                                                
                                                   2
                                                
                                             
                                          
                                          
                                             ¯
                                          
                                       
                                       =
                                       call
                                       
                                       100
                                       (
                                       2
                                       ,
                                       1
                                       ,
                                       40
                                       ,
                                       …
                                       )
                                       ?
                                       ·
                                       call
                                       
                                       40
                                       (
                                       …
                                       )
                                       !
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             a
                                          
                                          
                                             2
                                          
                                       
                                    
                                    
                                       ¯
                                    
                                 
                               does not capture the different value written at address 10 (line 5), which also constitutes an observable difference between P
                              
                                 L
                               and P
                              
                                 R
                              .

Since 
                                 
                                    
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                       
                                    
                                    
                                       ¯
                                    
                                 
                               and 
                                 
                                    
                                       
                                          
                                             a
                                          
                                          
                                             2
                                          
                                       
                                    
                                    
                                       ¯
                                    
                                 
                               do not capture the observable differences between P
                              
                                 L
                               and P
                              
                                 R
                              , the trace semantics fails to be fully abstract.

Let us now consider writing and reading to unprotected memory.

Protected code writing a value into the unprotected memory partition is called a writeout. Since such values can be observed by unprotected code, writeouts need to be captured in traces. This is done with a writeout label of the following form: 
                              write
                              (
                              a
                              ,
                              v
                              )
                            stating what was written (v) and where (a). Following are the subtleties that need to be considered when introducing writeouts into the trace semantics (Examples 6– 9). In the first case the problem is that the write is not observable, while in the second case the problem is the ordering of writeout labels. In the remaining cases the problem is that control is not returned to the external code, which means that it will not be able to detect the difference introduced by the writeout. 
                              Example 6
                              Invisible writeouts


                              The following P
                                 
                                    L
                                  and P
                                 
                                    R
                                  read a value from an unprotected address 10 and 20, respectively (line 2), and then rewrite the same value back to the same address (line 3). 
                                    
                                       
                                          
                                             
                                                
                                             
                                          
                                       
                                    
                                 
                              

The writeouts of P
                                 
                                    L
                                  and P
                                 
                                    R
                                  are invisible. In fact, they do not alter the contents of unprotected memory, since address 10 (20, resp.) already contains the written value. Thus, P
                                 
                                    L
                                  and P
                                 
                                    R
                                  are contextually equivalent. However, they are not trace equivalent, since the following is a trace of P
                                 
                                    L
                                  and not of P
                                 
                                    R
                                 : 
                                    
                                       
                                          call
                                          
                                          100
                                          (
                                          ⋯
                                          )
                                          ?
                                          ·
                                          read
                                          (
                                          10
                                          ,
                                          0
                                          )
                                          write
                                          (
                                          10
                                          ,
                                          0
                                          )
                                          ret
                                          
                                          0
                                          !
                                       
                                    
                                 
                              

Notice that if the readout were absent, the writeout would distinguish between P
                                 
                                    L
                                  and P
                                 
                                    R
                                 , as there are unprotected memories whose existing value at address 10 (20, resp.) differs from what is written by P
                                 
                                    L
                                  or P
                                 
                                    R
                                 .

To address this concern, the readout information must be accumulated and used to detect when a writeout is not introducing an observable difference in unprotected memory.

The following P
                                 
                                    L
                                  and P
                                 
                                    R
                                  write 0 to addresses 10 and 20 in unprotected memory (lines 4 and 5). The only difference between the two is that P
                                 
                                    L
                                  writes to address 10 then to address 20 while P
                                 
                                    R
                                  does the same writes in the opposite order. 
                                    
                                       
                                          
                                             
                                                
                                             
                                          
                                       
                                    
                                 
                              

These programs are contextually equivalent, but if their labels are generated by the orders of the instructions, they will have different labels, since the following will be a trace of P
                                 
                                    L
                                  and not of P
                                 
                                    R
                                 . 
                                    
                                       
                                          call
                                          
                                          100
                                          
                                          (
                                          ⋯
                                          )
                                          ?
                                          ·
                                          write
                                          (
                                          10
                                          ,
                                          0
                                          )
                                          write
                                          (
                                          20
                                          ,
                                          0
                                          )
                                          ret
                                          
                                          0
                                          !
                                       
                                    
                                 
                              

To address this concern, writeouts need to be sorted when they are added to a trace. A more precise discussion over this solution is delayed until Example 15 since the solution is affected by the solutions of other.

The following P
                                 
                                    L
                                  and P
                                 
                                    R
                                  write 0 and 1 respectively to address 10 in unprotected memory (line 3) and then terminate (line 4). 
                                    
                                       
                                          
                                             
                                                
                                             
                                          
                                       
                                    
                                 
                              

The only difference between P
                                 
                                    L
                                  and P
                                 
                                    R
                                  is the value written at address 10. However, the unprotected code cannot detect this difference since execution is halted before control is returned to it. Thus, P
                                 
                                    L
                                  and P
                                 
                                    R
                                  are contextually equivalent. If the writeout would appear in the traces, P
                                 
                                    L
                                  and P
                                 
                                    R
                                  would be trace-inequivalent, since the trace below would belong to P
                                 
                                    L
                                  and not to P
                                 
                                    R
                                 . 
                                    
                                       
                                          call
                                          
                                          100
                                          
                                          (
                                          ⋯
                                          )
                                          ?
                                          ·
                                          write
                                          (
                                          10
                                          ,
                                          0
                                          )
                                          √
                                       
                                    
                                 Consequently, writeouts do not appear if the protected program halts afterwards.

The following P
                                 
                                    L
                                  and P
                                 
                                    R
                                  set 
                                    
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                  to 20 and 10 respectively (line 1), then write the instruction 
                                    jmp
                                    
                                    
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                  at addresses 20 and 10 respectively (line 2). Finally, they jump to the instruction they just wrote (line 3). 
                                    
                                       
                                          
                                             
                                                
                                             
                                          
                                       
                                    
                                 
                              

When 
                                    
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                  is set to 20 (resp. 10), the instruction 
                                    jmp
                                    
                                    
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                  written at address 20 (resp. 10) will diverge when called. Thus, P
                                 
                                    L
                                  and P
                                 
                                    R
                                  are contextually equivalent, since no context can differentiate between them. However, P
                                 
                                    L
                                  and P
                                 
                                    R
                                  are trace inequivalent, since the following is a trace of P
                                 
                                    L
                                  and not of P
                                 
                                    R
                                 , since a trace of P
                                 
                                    R
                                  would contain a 
                                    write
                                    (
                                    10
                                    ,
                                    “
                                    jmp
                                    
                                    
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                    ”
                                    )
                                    call
                                    
                                    10
                                    
                                    (
                                    10
                                    ,
                                    ⋯
                                    )
                                    !
                                  label. 
                                    
                                       
                                          call
                                          
                                          100
                                          
                                          (
                                          ⋯
                                          )
                                          ?
                                          ·
                                          write
                                          (
                                          20
                                          ,
                                          “
                                          jmp
                                          
                                          
                                             
                                                r
                                             
                                             
                                                0
                                             
                                          
                                          ”
                                          )
                                          call
                                          
                                          20
                                          
                                          (
                                          20
                                          ,
                                          ⋯
                                          )
                                          !
                                       
                                    
                                 
                              

The solution to this concern is to split the unprotected memory in a code and a data section and to allow writeouts only to the unprotected data section. A more complete analysis of the solution is delayed until Example 16.

A readout occurs when protected code reads unprotected memory. Not all PMA implementations allow readouts, they are forbidden in some implementations [3] and discouraged by others [4,6]. When protected code can perform readouts, devising a fully abstract trace semantics is challenging. The readout label 
                              read
                              (
                              a
                              ,
                              v
                              )
                            states that a value v was read from address a. It is not obvious to decide when such a label should appear and the following examples present when the readout label should appear in traces or not (Examples 10–16). 
                              Example 10
                              Unobservable readouts


                              Consider the two protected 
                                    A
                                    
                                       +
                                    
                                    I
                                  programs below. 
                                    
                                       
                                          
                                             
                                                
                                             
                                          
                                       
                                    
                                 
                              


                                 P
                                 
                                    L
                                  and P
                                 
                                    R
                                  read the contents of unprotected addresses 10 and 20, respectively, and store the result in register 
                                    
                                       
                                          r
                                       
                                       
                                          1
                                       
                                    
                                  (line 2), then they set registers 
                                    
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                  and 
                                    
                                       
                                          r
                                       
                                       
                                          1
                                       
                                    
                                  to 0 (lines 3 and 4) and return (line 5). In this case, the value read does not influence the behaviour of P
                                 
                                    L
                                  or P
                                 
                                    R
                                 , which behave the same, so the readout should not appear in their traces.

Consider the two protected 
                                    A
                                    
                                       +
                                    
                                    I
                                  programs below: 
                                    
                                       
                                          
                                             
                                                
                                             
                                          
                                       
                                    
                                 
                              

Here, P
                                 
                                    L
                                  reads the contents of address 10 into 
                                    
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                  (line 2), performs computations until 
                                    
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                  contains a constant value k (omitted lines), independent of the value read, and then returns (line 5). P
                                 
                                    R
                                  simply initialises 
                                    
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                  to k (line 2) and returns (line 3).

These programs are contextually equivalent, both always return k, however, P
                                 
                                    L
                                  also performs a readout. If this readout appears in traces, it would be a failure of full abstraction, since the traces of P
                                 
                                    R
                                  do not have such a label. The problem here is that the omitted code of P
                                 
                                    L
                                  always reduces the contents of 
                                    
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                  to a constant, no matter what values it contained beforehand. The trace semantics must be able to identify that the value read does not affect the execution of the program and thus not include the read label in this case.

Consider the two protected 
                                    A
                                    
                                       +
                                    
                                    I
                                  programs below. 
                                    
                                       
                                          
                                             
                                                
                                             
                                          
                                       
                                    
                                 
                              

In this case P
                                 
                                    L
                                  and P
                                 
                                    R
                                  read the contents of unprotected addresses 10 and 20, respectively, in register 
                                    
                                       
                                          r
                                       
                                       
                                          1
                                       
                                    
                                  (line 2). Then, if those values are less than 0 (lines 3 and 4) they jump to address 108 (lines 5 and 6) and return (line 9), otherwise they call to a function at address 30 (lines 7 and 8).

The value read in unprotected memory constitutes an observable difference between P
                                 
                                    L
                                  and P
                                 
                                    R
                                 , as it alters the execution flow. Thus, the readout value should itself be present in the trace.

The problem in this case is detecting when does a read affect the behaviour of a program. A read affects the behaviour of a program if some future behaviour of the program depends on the value read; when different values are read, the behaviour of the programs varies. On the other hand, if a read does not affect the behaviour, any value can be read and the program behaves the same. By viewing readout values as inputs, in the former case we can say that different inputs make a program have different behaviours (as in Example 12, while in the latter case different inputs do not vary the behaviour of a program (as in Examples 10 and 11).

The concept described above is analogous to non-interference 
                           [17,18]. Non-interference is a property of systems whose input can be classified to be either low or high security (for non-sensible and classified material respectively). A system is non-interfering if for a given set of low inputs it will produce the same low outputs, regardless of what the high level inputs are.

In this setting, if we treat readouts as high inputs and future traces as low outputs, we can apply non-interference notions to detect whether a readout affects a program. A readout does not affect a program if it is non-interfering, i.e. for any readout value (high input) the future traces (low output) do not vary. The trace semantics can use the non-interference information to decide whether a readout label should appear on traces or not. In Examples 10 and 11, the readouts are non-interfering, whatever value is read, the behaviour of the program does not vary, thus the trace semantics can exclude these readouts from traces. However, in Example 12 if the value read is 0, the program will behave differently than if it is not 0, so the readout is interfering. Here the trace semantics can tell that the readout must be included in the trace.

The main difference between the way non-interference is used in the literature and in this work is in the treatment of readout values. These values are in the external memory, thus intuitively low security, and they should be kept immutable. However, in order to apply non-interference correctly, they have to vary, thus they are regarded as high security. 
                              Example 13
                              Unobservable readouts after writeout


                              The following P
                                 
                                    L
                                  and P
                                 
                                    R
                                  write 0 to address 10 (line 3), then P
                                 
                                    R
                                  reads from address 10 (line 4). 
                                    
                                       
                                          
                                             
                                                
                                             
                                          
                                       
                                    
                                 
                              

These programs are thus contextually equivalent, but the following is a trace of P
                                 
                                    R
                                  and not of P
                                 
                                    L
                                 . 
                                    
                                       
                                          call
                                          
                                          100
                                          
                                          (
                                          ⋯
                                          )
                                          ?
                                          ·
                                          write
                                          (
                                          10
                                          ,
                                          0
                                          )
                                          read
                                          (
                                          10
                                          ,
                                          0
                                          )
                                          ret
                                          
                                          0
                                          !
                                       
                                    
                                 
                              

To address this concern, reads to an address that was the subject of a writeout should not appear on traces. In fact, the readout value cannot be different from the writeout one, and that information is already known to protected programs.

The following P
                                 
                                    L
                                  and P
                                 
                                    R
                                  read from address 10 in unprotected memory (line 2). 
                                    
                                       
                                          
                                             
                                                
                                             
                                          
                                       
                                    
                                 
                              

The only difference between the two is that P
                                 
                                    R
                                  reads from address 10 twice, but this does not affect its behaviour, since the same value is read. Thus, these programs are contextually equivalent, but the following is a trace of P
                                 
                                    L
                                  and not of P
                                 
                                    R
                                 . 
                                    
                                       
                                          call
                                          
                                          100
                                          
                                          (
                                          ⋯
                                          )
                                          ?
                                          ·
                                          read
                                          (
                                          10
                                          ,
                                          v
                                          )
                                          ret
                                          
                                          0
                                          !
                                       
                                    
                                 
                              

To address this concern, multiple readouts to the same address should thus be filtered, only one must be present in the traces.

In the following, P
                                 
                                    L
                                  reads the contents of unprotected address 10 into register 
                                    
                                       
                                          r
                                       
                                       
                                          1
                                       
                                    
                                  (line 2), then it reads the contents of unprotected address 20 into register 
                                    
                                       
                                          r
                                       
                                       
                                          2
                                       
                                    
                                  (line 4). Finally, it calls to a function located at address 20 (line 5, the value of register 
                                    
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                 ). P
                                 
                                    R
                                  does the same, but first its reads happen in the reversed order: first it reads address 20 into register 
                                    
                                       
                                          r
                                       
                                       
                                          2
                                       
                                    
                                  (line 2), then address 10 into register 
                                    
                                       
                                          r
                                       
                                       
                                          1
                                       
                                    
                                  (line 2). 
                                    
                                       
                                          
                                             
                                                
                                             
                                          
                                       
                                    
                                 
                              

These programs are contextually equivalent, but the traces they create are different. The order in which the readouts are executed and accumulated on the traces makes it so that the following trace is generated by P
                                 
                                    L
                                  and not by P
                                 
                                    R
                                 . 
                                    
                                       
                                          call
                                          
                                          (
                                          ⋯
                                          )
                                          ?
                                          ·
                                          read
                                          (
                                          10
                                          ,
                                          v
                                          )
                                          read
                                          (
                                          20
                                          ,
                                          
                                             
                                                v
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          call
                                          
                                          20
                                          
                                          (
                                          20
                                          ,
                                          v
                                          ,
                                          
                                             
                                                v
                                             
                                             
                                                ′
                                             
                                          
                                          ,
                                          10
                                          ,
                                          ⋯
                                          )
                                          !
                                       
                                    
                                 
                              

To address this and the concern of Example 7, readouts and writeouts can be sorted based on the address to which the operation is performed.

This introduces a sort of normal form for traces, which consist of a sorted prefix of readouts and writeouts followed by a call or a return. The normal form effectively merges the solutions to Examples 13 and 14.

In the following, P
                                 
                                    L
                                  always halts while P
                                 
                                    R
                                  reads the contents of address 10 into 
                                    
                                       
                                          r
                                       
                                       
                                          1
                                       
                                    
                                  (lines 1, 2). If the value read is not an instruction (line 3, omitted for the sake of simplicity), P
                                 
                                    R
                                  jumps there (line 4), otherwise it halts (line 6). 
                                    
                                       
                                          
                                             
                                                
                                             
                                          
                                       
                                    
                                 
                              

These two programs are contextually equivalent: they always terminate. However, P
                                 
                                    R
                                  generates the following trace, which P
                                 
                                    L
                                  does not: 
                                    
                                       
                                          call
                                          
                                          (
                                          ⋯
                                          )
                                          ?
                                          ·
                                          read
                                          (
                                          10
                                          ,
                                          v
                                          )
                                          call
                                          
                                          10
                                          
                                          (
                                          10
                                          ,
                                          v
                                          ,
                                          ⋯
                                          )
                                          !
                                       
                                    
                                 The problem is that the trace above will always be followed by termination (in unprotected code), which unprotected code cannot observe. This is due to P
                                 
                                    R
                                  reading executable unprotected code and P
                                 
                                    R
                                  behaving differently based on the value read.

To address this concern and Example 9, unprotected code is split in a code and a data section, just as protected code is. Writeouts and readouts can only be performed on the data section of unprotected code, so protected code cannot read nor write executable unprotected code.

From the threat modeling perspective, this assumption somewhat reduces the attacker׳s power, since she is not able to execute the values written by the protected code. However, this assumption seems reasonable, since most times we are interested in modelling the behaviour of code that uses readouts for parameters and not to execute readout values. Future work will consider writeouts and readouts of executable unprotected code.

As Curien stated [19], two ways to achieve full abstraction for a trace semantics exist. The first is to change the operational semantics to restrict what is communicated to what is captured by the labels. This is achieved by restricting the ways in which communication is performed, e.g. by preventing readouts and writeouts. The second is to modify the labels so that they capture more precisely what is communicated between protected and unprotected codes. In this case, labels should capture the values of all registers and flags as well as what protected code reads and writes in unprotected memory. Both approaches are presented in Section 4. These are based on the 
                              A
                              
                                 +
                              
                              I
                            assembly language and its operational semantics, which are given in Section 3.

This section formalises the syntax (Section 3.1) and operational semantics (Section 3.2) of 
                        A
                        
                           +
                        
                        I
                     , a PMA-enhanced assembly language, and concludes with the definition of contextual equivalence for 
                        A
                        
                           +
                        
                        I
                      programs (Section 3.3).


                        
                           A
                           
                              +
                           
                           I
                         programs run on an architecture that models a von Neumann machine consisting of a program counter p, a register file r, a flags register f and memory space m. The program counter indicates the address of the instruction that is executed next. The register file contains 12 general purpose registers 
                           
                              
                                 r
                              
                              
                                 0
                              
                           
                         to 
                           
                              
                                 r
                              
                              
                                 11
                              
                           
                         and a stack pointer register 
                           SP
                        , which contains the address of the top of the current call stack. The flags register contains a zero flag 
                           ZF
                         and a sign flag 
                           SF
                        , which are set or cleared by arithmetic instructions and are used by branching instructions, respectively.


                        Fig. 2
                         presents elements of the formalisation. Addresses a are natural numbers. Words are natural numbers plus −1, which serves as a value that is not in the address range in order to stop computation (As described in Definition 2 below). Memories m are infinite maps from addresses to words. Memory access, denoted as m(a), is defined as follows: 
                           m
                           (
                           a
                           )
                           =
                           w
                         if 
                           a
                           ↦
                           w
                           ∈
                           m
                        ; it is undefined otherwise. Define the domain of a memory as 
                           dom
                           (
                           m
                           )
                           =
                           {
                           a
                           |
                           a
                           ↦
                           w
                           ∈
                           m
                           }
                        . If two memories m and 
                           
                              
                                 m
                              
                              
                                 ′
                              
                           
                         have disjoint domains, they can be merged into another memory. Formally, if 
                           dom
                           (
                           m
                           )
                           ∩
                           dom
                           (
                           
                              
                                 m
                              
                              
                                 ′
                              
                           
                           )
                           =
                           ∅
                        , then 
                           m
                           +
                           
                              
                                 m
                              
                              
                                 ′
                              
                           
                           =
                           {
                           a
                           ↦
                           w
                           |
                           a
                           ↦
                           w
                           ∈
                           m
                           
                           or
                           
                           a
                           ↦
                           w
                           ∈
                           
                              
                                 m
                              
                              
                                 ′
                              
                           
                           }
                        . Memory descriptors s are sextuples: 
                           (
                           
                              
                                 a
                              
                              
                                 b
                              
                           
                           ,
                           
                              
                                 n
                              
                              
                                 c
                              
                           
                           ,
                           
                              
                                 n
                              
                              
                                 d
                              
                           
                           ,
                           n
                           ,
                           
                              
                                 a
                              
                              
                                 uc
                              
                           
                           ,
                           
                              
                                 a
                              
                              
                                 ud
                              
                           
                           )
                         that formalise the concepts of Section 2.1. a
                        
                           b
                         is the address where the protected memory partition starts, n
                        
                           c
                         and n
                        
                           d
                         are the sizes (in number of addresses) of the code and data section respectively and n is the number of entry points. Additionally, a
                        
                           uc
                         states where the code section of the unprotected code starts and a
                        
                           ud
                         states where the data section of the unprotected code starts (and where the unprotected code section ends). This partitioning of unprotected code is not required by PMA architectures but it helps devising a fully abstract trace semantics, as explained previously. Entry points are allocated starting from the base address a
                        
                           b
                        . Each entry point is 
                           
                              
                                 N
                              
                              
                                 e
                              
                           
                         words long. Assume that the entry points do not overflow the protected code section, thus the constraint 
                           n
                           ·
                           
                              
                                 N
                              
                              
                                 e
                              
                           
                           <
                           
                              
                                 n
                              
                              
                                 c
                              
                           
                         holds for the all memory descriptors. Programs P are pairs of a memory m and amemory descriptor s. Instructions i are elements of the set 
                           I
                         and define the programming language executed on the architecture (Fig. 3
                        ).

Before introducing the semantics, a number of auxiliary notions are defined.


                        Fig. 4
                         defines the access control enforcement rules informally presented in Section 2.1. Read judgments 
                           s
                           ⊢
                           predicate
                           (
                           a
                           ,
                           b
                           ,
                           ⋯
                           )
                         as “according to memory descriptor s, 
                           predicate
                         holds for addresses a, b,⋯”.

Define functions 
                           
                              
                                 m
                              
                              
                                 sec
                              
                           
                           (
                           m
                           ,
                           s
                           )
                         and 
                           
                              
                                 m
                              
                              
                                 ext
                              
                           
                           (
                           m
                           ,
                           s
                           )
                        , which return the protected and unprotected parts of a memory m according to descriptor s, respectively as
                           
                              
                                 
                                    
                                       m
                                    
                                    
                                       sec
                                    
                                 
                                 (
                                 m
                                 ,
                                 s
                                 )
                                 =
                                 {
                                 a
                                 ↦
                                 w
                                 |
                                 a
                                 ↦
                                 w
                                 ∈
                                 m
                                 ,
                                 s
                                 ⊢
                                 protected
                                 (
                                 a
                                 )
                                 }
                                 
                                    
                                       m
                                    
                                    
                                       ext
                                    
                                 
                                 (
                                 m
                                 ,
                                 s
                                 )
                                 =
                                 {
                                 a
                                 ↦
                                 w
                                 |
                                 a
                                 ↦
                                 w
                                 ∈
                                 m
                                 ,
                                 s
                                 ⊢
                                 unprotected
                                 (
                                 a
                                 )
                                 }
                              
                           
                        
                     

In the semantics there are two call stacks, one for the protected code, called the secure stack, and one for the unprotected code, called the insecure stack. Each stack is preceded by a word containing the location of the current top of the stack: 
                           
                              
                                 SP
                              
                              
                                 sec
                              
                           
                         and 
                           
                              
                                 SP
                              
                              
                                 ext
                              
                           
                         are memory locations that indicate the top of the secure and insecure stack respectively. Given a memory descriptor 
                           s
                           =
                           (
                           
                              
                                 a
                              
                              
                                 b
                              
                           
                           ,
                           
                              
                                 n
                              
                              
                                 c
                              
                           
                           ,
                           
                              
                                 n
                              
                              
                                 d
                              
                           
                           ,
                           n
                           ,
                           
                              
                                 a
                              
                              
                                 uc
                              
                           
                           ,
                           
                              
                                 a
                              
                              
                                 ud
                              
                           
                           )
                        , the secure stack starts at the beginning of the protected data section and the insecure stack starts at beginning of the unprotected data section, the stack grows up. Thus 
                           
                              
                                 SP
                              
                              
                                 sec
                              
                           
                           =
                           (
                           
                              
                                 a
                              
                              
                                 b
                              
                           
                           +
                           
                              
                                 n
                              
                              
                                 c
                              
                           
                           )
                         and, initially, 
                           
                              
                                 SP
                              
                              
                                 sec
                              
                           
                           ↦
                           (
                           
                              
                                 a
                              
                              
                                 b
                              
                           
                           +
                           
                              
                                 n
                              
                              
                                 c
                              
                           
                           +
                           1
                           )
                        ; analogously, 
                           
                              
                                 SP
                              
                              
                                 ext
                              
                           
                           =
                           (
                           
                              
                                 a
                              
                              
                                 ud
                              
                           
                           )
                         and, initially, 
                           
                              
                                 SP
                              
                              
                                 ext
                              
                           
                           ↦
                           (
                           
                              
                                 a
                              
                              
                                 ud
                              
                           
                           +
                           1
                           )
                        . Call and return instructions see the 
                           SP
                         register being set to the correct address when crossing boundaries between protected and unprotected memory by using 
                           
                              
                                 SP
                              
                              
                                 sec
                              
                           
                         and 
                           
                              
                                 SP
                              
                              
                                 ext
                              
                           
                        . The value of the program counter is pushed onto the stack by a 
                           call
                         instruction, while a 
                           ret
                         instruction pops one address from the top of the stack and jumps to that location. Updating the stack pointer 
                           SP
                         is performed using the auxiliary function 
                           
                              
                                 ↘
                              
                              
                                 SS
                              
                           
                         (Fig. 5
                        ).

In the rules, notation 
                           m
                           [
                           a
                           ↦
                           w
                           ]
                         indicates that memory m is updated to a new one that is equal to m except that the value stored at address a is w. Notation 
                           r
                           [
                           r
                           ↦
                           w
                           ]
                         indicates that the register file r is updated to a new one that is equal to r except that the value stored in register 
                           r
                         is w. Notation 
                           r
                           (
                           r
                           )
                         indicates the value contained in register 
                           r
                         in register file r. Given a jump between addresses p and 
                           
                              
                                 p
                              
                              
                                 ′
                              
                           
                        , the stack switch rules produce a new register file 
                           
                              
                                 r
                              
                              
                                 ′
                              
                           
                         and a new memory 
                           
                              
                                 m
                              
                              
                                 ′
                              
                           
                         based on old ones r and m. The memory is updated to store the top of the current stack, located in 
                           SP
                        , in the address storing the top of the current stack. When the stack is changed, the register file is updated to initialise 
                           SP
                         to the top of the right stack: the address stored at 
                           
                              
                                 SP
                              
                              
                                 sec
                              
                           
                         or 
                           
                              
                                 SP
                              
                              
                                 ext
                              
                           
                        .

The operational semantics is a small step semantics that describes how each instruction of the language transforms an execution state into a new one. The operational semantics describes programs in the whole memory: both the protected and unprotected partitions. 
                           Definition 1
                           Execution state


                           An execution state, denoted as Ω, is a quintuple 
                                 Ω
                                 =
                                 (
                                 p
                                 ,
                                 r
                                 ,
                                 f
                                 ,
                                 m
                                 ,
                                 s
                                 )
                              , where p is a program counter, r is a register file, f is a flags register, m is a memory and s is a memory descriptor.

Given execution state 
                           Ω
                           =
                           (
                           p
                           ,
                           r
                           ,
                           f
                           ,
                           m
                           ,
                           s
                           )
                        , let 
                           ⌊
                           Ω
                           ⌋
                         be the state 
                           (
                           p
                           ,
                           r
                           ,
                           f
                           ,
                           
                              
                                 m
                              
                              
                                 sec
                              
                           
                           (
                           m
                           ,
                           s
                           )
                           ,
                           s
                           )
                         and 
                           ⌈
                           Ω
                           ⌉
                         be the state 
                           (
                           p
                           ,
                           r
                           ,
                           f
                           ,
                           
                              
                                 m
                              
                              
                                 ext
                              
                           
                           (
                           m
                           ,
                           s
                           )
                           ,
                           s
                           )
                        . Relations 
                           
                              
                                 →
                              
                              
                                 i
                              
                           
                         and 
                           
                              
                                 →
                              
                              
                                 e
                              
                           
                         describe the evaluation of instructions that only affect the protected and unprotected parts of memory respectively. These relations build up to the complete operational semantics. Rules for 
                           
                              
                                 →
                              
                              
                                 e
                              
                           
                         can be obtained from the rules for 
                           
                              
                                 →
                              
                              
                                 i
                              
                           
                         (Figs. 6 and 7
                        
                        ) by replacing all 
                           intJump
                         assumptions with an 
                           extJump
                         one and are thus omitted. Let 
                           m
                           (
                           p
                           )
                           =
                           inst
                         denote that 
                           inst
                         is the word allocated in m(p), where 
                           inst
                           ∈
                           I
                        . When an access control violation is detected, or when the secure stack is overflowed, all registers and flags are reset and the execution is halted. Note that the program counter is set to −1 whenever the 
                           halt
                         instruction is encountered, in order to capture termination. This way, no progress can be made, as 
                           m
                           (
                           −
                           1
                           )
                         does not return a valid instruction: the program is in a stuck state. 
                           Definition 2
                           Stuck state


                           A state 
                                 Ω
                                 =
                                 (
                                 p
                                 ,
                                 r
                                 ,
                                 f
                                 ,
                                 m
                                 ,
                                 s
                                 )
                               is stuck, denoted as 
                                 
                                    
                                       Ω
                                    
                                    
                                       ⊥
                                    
                                 
                              , when the program counter does not point to a valid instruction: 
                                 m
                                 (
                                 p
                                 )
                                 ∉
                                 I
                              .

The operational semantics of 
                           A
                           
                              +
                           
                           I
                         is a binary relation over states 
                           →
                           ⊆
                           Ω
                           ×
                           Ω
                         (Figs. 8 and 9
                        
                        ). Rule Eval-callback and Eval-returnback ensure that the address to be followed after a callback is stored in the secure stack and that the address of the returnback entry point is pushed onto the insecure stack. Thus the unprotected code always jumps to the returnback entry point when returning from a callback. Code located at the returnback entry point must contain a 
                           ret
                         instruction in order to correctly resume the execution.

The reflexive, transitive closure of relation 
                           →
                         is indicated with 
                           
                              
                                 →
                              
                              
                                 ⁎
                              
                           
                        . A state Ω performing n reduction steps is indicated as 
                           Ω
                           
                              
                                 →
                              
                              
                                 n
                              
                           
                           
                              
                                 Ω
                              
                              
                                 ′
                              
                           
                        . The evaluation of program P is a sequence of steps that takes the initial state of P to another state. 
                           Definition 3
                           Initial state


                           The initial state of a program (m,s), denoted as 
                                 
                                    
                                       Ω
                                    
                                    
                                       0
                                    
                                 
                                 (
                                 m
                                 ,
                                 s
                                 )
                              , is a state 
                                 (
                                 
                                    
                                       p
                                    
                                    
                                       0
                                    
                                 
                                 ,
                                 
                                    
                                       r
                                    
                                    
                                       0
                                    
                                 
                                 ,
                                 
                                    
                                       f
                                    
                                    
                                       0
                                    
                                 
                                 ,
                                 m
                                 ,
                                 s
                                 )
                              , where 
                                 s
                                 =
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       b
                                    
                                 
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       c
                                    
                                 
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       d
                                    
                                 
                                 ,
                                 n
                                 )
                              , 
                                 
                                    
                                       p
                                    
                                    
                                       0
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       b
                                    
                                 
                                 +
                                 
                                    
                                       n
                                    
                                    
                                       c
                                    
                                 
                                 +
                                 
                                    
                                       n
                                    
                                    
                                       d
                                    
                                 
                                 +
                                 2
                                 )
                              , 
                                 
                                    
                                       r
                                    
                                    
                                       0
                                    
                                 
                                 =
                                 [
                                 SP
                                 ↦
                                 m
                                 (
                                 
                                    
                                       SP
                                    
                                    
                                       ext
                                    
                                 
                                 )
                                 ;
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                 
                                 ↦
                                 
                                    
                                       0
                                    
                                    
                                       i
                                       =
                                       0
                                       ‥
                                       11
                                    
                                 
                                 ]
                              , and 
                                 
                                    
                                       f
                                    
                                    
                                       0
                                    
                                 
                                 =
                                 [
                                 ZF
                                 ↦
                                 0
                                 ;
                                 SF
                                 ↦
                                 0
                                 ]
                              .

The evaluation of P terminates if 
                           ∃
                           
                              
                                 Ω
                              
                              
                                 ′
                              
                           
                        . 
                           
                              
                                 Ω
                              
                              
                                 0
                              
                           
                           (
                           P
                           )
                           
                              
                                 →
                              
                              
                                 ⁎
                              
                           
                           
                              
                                 Ω
                              
                              
                                 ′
                              
                           
                         and 
                           
                              
                                 Ω
                              
                              
                                 ′
                                 ⊥
                              
                           
                        ; the result of the computation is stored in 
                           
                              
                                 r
                              
                              
                                 0
                              
                           
                        . If the evaluation of program P does not terminate, P diverges, i.e. it executes an unbounded number of reduction steps, this is denoted as 
                           P
                           ⇑
                        . Formally: 
                           P
                           ⇑
                         if 
                           ∀
                           n
                           ∈
                           N
                           ,
                           ∃
                           
                              
                                 Ω
                              
                              
                                 ′
                              
                           
                        . 
                           
                              
                                 Ω
                              
                              
                                 0
                              
                           
                           (
                           P
                           )
                           
                              
                                 →
                              
                              
                                 n
                              
                           
                           
                              
                                 Ω
                              
                              
                                 ′
                              
                           
                        .

Contextual equivalence relates two programs that cannot be distinguished by any third program interacting with them [20]. This notion relies on the concept of contexts, which is introduced before presenting the equivalence itself.

Since our focus is on 
                           A
                           
                              +
                           
                           I
                         programs P that are placed in protected memory and interact with arbitrary unprotected code, contexts model that unprotected code. Thus for any descriptor s, contexts 
                           M
                         are partial memories with a hole: 
                           M
                           =
                           m
                           [
                           ·
                           ]
                        , where all addresses of 
                           M
                         are unprotected. Formally, given s, 
                           ∀
                           a
                           ∈
                           dom
                           (
                           M
                           )
                           ,
                           s
                           ⊢
                           unprotected
                           (
                           a
                           )
                        . The hole models the possibility to combine a program P with the memory 
                           M
                         iff they are compatible, denoted as 
                           P
                           
                              
                              
                                 
                                    
                                       ⌢
                                    
                                 
                              
                           
                           M
                        , thus if the memories of P and 
                           M
                         have disjoint domains. Let 
                           dom
                           (
                           M
                           )
                           =
                           dom
                           (
                           m
                           )
                         if 
                           M
                           =
                           m
                           [
                           ·
                           ]
                        ; formally, 
                           P
                           
                              
                              
                                 
                                    
                                       ⌢
                                    
                                 
                              
                           
                           M
                         if 
                           P
                           =
                           (
                           
                              
                                 m
                              
                              
                                 ′
                              
                           
                           ,
                           s
                           )
                         and 
                           dom
                           (
                           
                              
                                 m
                              
                              
                                 ′
                              
                           
                           )
                           ∩
                           dom
                           (
                           M
                           )
                           =
                           ∅
                        . If P and 
                           M
                         are compatible, the hole of 
                           M
                         can be filled with P in order to model interaction between P and 
                           M
                        . Formally, if 
                           P
                           
                              
                              
                                 
                                    
                                       ⌢
                                    
                                 
                              
                           
                           M
                         then 
                           M
                           [
                           (
                           
                              
                                 m
                              
                              
                                 ′
                              
                           
                           ,
                           s
                           )
                           ]
                           =
                           (
                           
                              
                                 m
                              
                              
                                 ′
                              
                           
                           +
                           m
                           ,
                           s
                           )
                        .

Programs P
                        1 and P
                        2 are contextually equivalent, denoted as 
                           
                              
                                 P
                              
                              
                                 1
                              
                           
                           ≃
                           
                              
                                 P
                              
                              
                                 2
                              
                           
                        , when, for all contexts they interact with, P
                        1 diverges if and only if P
                        2 also diverges. 
                           Definition 4
                           Contextual equivalence


                           
                              
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 ≃
                                 
                                    
                                       P
                                    
                                    
                                       2
                                    
                                 
                               if 
                                 ∀
                                 M
                              . 
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             ⌢
                                          
                                       
                                    
                                 
                                 M
                                 ∧
                                 M
                                 [
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 ]
                                 ⇑
                                 
                                 ⟺
                                 
                                 
                                    
                                       P
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             ⌢
                                          
                                       
                                    
                                 
                                 M
                                 ∧
                                 M
                                 [
                                 
                                    
                                       P
                                    
                                    
                                       2
                                    
                                 
                                 ]
                                 ⇑
                              .

An implication of this definition is that for P
                        1 and P
                        2 to be contextually equivalent they must have the same memory descriptor. For the sake of simplicity, always assume the compatibility of a protected program and the context it is plugged in, shortening the above definition to: 
                           
                              
                                 P
                              
                              
                                 1
                              
                           
                           ≃
                           
                              
                                 P
                              
                              
                                 2
                              
                           
                         if 
                           ∀
                           M
                        . 
                           M
                           [
                           
                              
                                 P
                              
                              
                                 1
                              
                           
                           ]
                           ⇑
                           
                           ⟺
                           
                           M
                           [
                           
                              
                                 P
                              
                              
                                 2
                              
                           
                           ]
                           ⇑
                        . 
                           Example 17
                           Contextually equivalent programs


                           The following programs P
                              
                                 L
                               and P
                              
                                 R
                               write the values of 
                                 
                                    
                                       r
                                    
                                    
                                       1
                                    
                                 
                               and 
                                 
                                    
                                       r
                                    
                                    
                                       2
                                    
                                 
                               respectively to the protected address 150 (line 2) and then return 0 (line 3). Recall that the protected memory partition spans from address 100 to 200, with one entry point at address 100. 
                                 
                                    
                                       
                                          
                                             
                                          
                                       
                                    
                                 
                              
                           

The only difference between P
                              
                                 L
                               and P
                              
                                 R
                               is in the value stored at address 150. However, an unprotected program cannot read that value. Since that value does not affect the computation of P
                              
                                 L
                               or P
                              
                                 R
                               or the unprotected code, P
                              
                                 L
                               and P
                              
                                 R
                               are contextually equivalent.

Having defined the assembly language and its operational semantics, the paper introduces the two different trace semantics. Trace equivalence is also introduced, it will be proven the same as contextual equivalence in Section 5, thereby establishing full abstraction of the trace semantics.

This section gives two different trace semantics for protected 
                        A
                        
                           +
                        
                        I
                      programs. The differences between these semantics stem out of the different ways to achieve full abstraction pointed out by Curien [19]. The first trace semantics, 
                        
                           
                              Tr
                           
                           
                              S
                           
                        
                     , relies on changes to the semantics of protected programs (Section 4.1), while the second one, 
                        
                           
                              Tr
                           
                           
                              L
                           
                        
                     , possesses more expressive labels (Section 4.2). Both are proven to be fully abstract w.r.t. the appropriate operational semantics in Section 5. Finally, this section defines when two programs are trace equivalent (Section 4.3).

As for the operational semantics, a notion of execution states is required for the trace semantics as well. Execution states for 
                           
                              
                                 Tr
                              
                              
                                 S
                              
                           
                        , denoted as Θ, are the same as Ω except that Θ does not deal with the whole memory, just with its protected partition. So, the memory m of 
                           (
                           p
                           ,
                           r
                           ,
                           f
                           ,
                           m
                           ,
                           s
                           )
                         spans only the protected memory partition indicated by memory descriptor s. Additionally, Θ can be 
                           (
                           unk
                           ,
                           m
                           ,
                           s
                           )
                        , an unknown state that models when code is executing in unprotected memory [16]. 
                           Definition 5
                           Initial state for traces


                           The initial state for traces of a program (m,s), denoted as 
                                 
                                    
                                       Θ
                                    
                                    
                                       0
                                    
                                 
                                 (
                                 m
                                 ,
                                 s
                                 )
                              , is the state 
                                 (
                                 unk
                                 ,
                                 m
                                 ,
                                 s
                                 )
                              .

The semantics of protected programs is changed as follows (Fig. 10
                        ):
                           
                              •
                              when the program counter jumps between the protected and the unprotected memory partitions, or vice versa, flags are set to 0 (Rule Stack-out-to-in׳ and Stack-in-to-out׳);

in case of a 
                                    return
                                 , all registers but 
                                    
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                  are also set to 0 (Rule Eval-return׳);

readouts and writeouts are prohibited (Rule Aux-write-1׳ and Aux-read-2׳ replace the access control rules with the homonymous name).

Following are the labels of 
                           
                              
                                 Tr
                              
                              
                                 S
                              
                           
                        , they include those presented in Section 2.2. Observable actions include a tick 
                           √
                         indicating that the evaluation has terminated. Flags do not appear in traces because they are always set to 0, as are all registers but 
                           
                              
                                 r
                              
                              
                                 0
                              
                           
                         in case of a return. Readouts and writeouts are prohibited, so there are no labels that capture them.
                           
                              
                                 Labels
                                 
                                 L
                                 ::=
                                 a
                                 ∣
                                 
                                    
                                       τ
                                    
                                    
                                       i
                                    
                                 
                                 Observable
                                 
                                 actions
                                 
                                 a
                                 ::=
                                 √
                                 ∣
                                 g
                                 ?
                                 ∣
                                 g
                                 !
                                 Actions
                                 
                                 g
                                 ::=
                                 call
                                 
                                 p
                                 
                                 (
                                 r
                                 )
                                 ∣
                                 ret
                                 
                                 p
                                 
                                 r
                                 (
                                 
                                    
                                       r
                                    
                                    
                                       0
                                    
                                 
                                 )
                              
                           
                        
                     

The relation 
                           ↠
                         defines how labels are generated (Fig. 11
                        ). Internal instructions, generated by a 
                           
                              
                                 →
                              
                              
                                 i
                              
                           
                         transition, do not produce a visible label (Rule Trace-s-internal). If a state is stuck, then the label for termination is produced (Rule Trace-s-termination). A call to an entry point generates a call label (Rule Trace-s-call) while a return to the returnback entry point generates a returnback label (Rule Trace-s-returnback). Calling to an unprotected address generates a callback label (Rule Trace-s-callback), while returning to any unprotected address generates a return label (Rule Trace-s-return).

The reflexive and transitive closure of 
                           ↠
                        , denoted with 
                           
                        , is responsible for the accumulation of labels into traces (Fig. 12
                        ).

The 
                           
                              
                                 Tr
                              
                              
                                 S
                              
                           
                         traces of a program P are defined as follows: 
                           
                              
                                 
                                    
                                       Tr
                                    
                                    
                                       S
                                    
                                 
                                 (
                                 P
                                 )
                                 =
                                 {
                                 
                                    
                                       a
                                    
                                    
                                       ¯
                                    
                                 
                                 |
                                 ∃
                                 Θ
                                 .
                                 
                                    
                                       Θ
                                    
                                    
                                       0
                                    
                                 
                                 (
                                 P
                                 )
                                 
                                    
                                       
                                    
                                 
                                 Θ
                                 }
                              
                           
                        
                     

This section presents 
                           
                              
                                 Tr
                              
                              
                                 L
                              
                           
                        , a trace semantics that changes the labels of Section 2.2 to include all possible observable behaviour, including readouts and writeouts. The semantics used here is the one presented in Section 3.

The states of the 
                           
                              
                                 Tr
                              
                              
                                 L
                              
                           
                         semantics are indicated with Θ, they do not change from the definition given for the 
                           
                              
                                 Tr
                              
                              
                                 S
                              
                           
                         semantics. The syntax of labels, however, changes as indicated below, including a readout and a writeout label.
                           
                              
                                 Labels
                                 
                                 λ
                                 ::=
                                 τ
                                 ∣
                                 
                                 α
                                 Observable
                                 
                                 actions
                                 
                                 α
                                 ::=
                                 γ
                                 ?
                                 ∣
                                 
                                 δ
                                 !
                                 ∣
                                 
                                 √
                                 Actions
                                 
                                 γ
                                 ::=
                                 call
                                 
                                 p
                                 (
                                 r
                                 ;
                                 f
                                 )
                                 ∣
                                 
                                 ret
                                 
                                 p
                                 (
                                 r
                                 ;
                                 f
                                 )
                                 Prefixable
                                 
                                 actions
                                 
                                 δ
                                 ::=
                                 γ
                                 ∣
                                 
                                 ω
                                 (
                                 a
                                 ,
                                 v
                                 )
                                 .
                                 δ
                                 Prefixes
                                 
                                 ω
                                 ::=
                                 read
                                 ∣
                                 
                                 write
                              
                           
                        
                     

To ensure that the issues of Examples 6 and 7 and Examples 13– 15 (Sections 2.2.1 and 2.2.2) do not arise, 
                           δ
                           !
                         labels are converted to a normal form.

The normal form of 
                           δ
                           !
                         labels is achieved by applying the rewrite rules presented in Fig. 13
                        . Rules (Constriant-write) to (Constriant-read) ensure that labels created by the semantics are consistent [21]. Rules (Write-order), (Read-order), (WR-order) and (RW-order) ensure that the prefix of reads and writes is sorted based on the address field. If two actions are performed at the same address, their order is the same as the order in which the program performed those actions. Rules (Write-no-read) to (Read-no-write) ensure that reading the same writeout value (resp. writing the same readout value) does not appear in labels. Rules (Write-drop) to (Read-drop) eliminate multiple writeouts and readouts to the same address.

The rewrite rules of Fig. 13 are convergent so their application always returns a unique result (Theorem 3 in Appendix A). We can thus define the normal-form function 
                           norm
                           (
                           ·
                           )
                         as the application of those rewrite rules. This function inputs a δ label and returns it in normal form, i.e. a sequence of 
                           write
                           (
                           a
                           ,
                           v
                           )
                         and 
                           read
                           (
                           a
                           ,
                           v
                           )
                         label sorted on the address parameter a.

The rules that define the single label relation 
                           ↠
                           ⊆
                           Θ
                           ×
                           λ
                           ×
                           Θ
                         (Fig. 14
                        ) rely on the semantics presented in Section 3.2. Rules for generating 
                           call
                        , 
                           return
                         and τ labels resemble the rules for the 
                           
                              
                                 Tr
                              
                              
                                 S
                              
                           
                         semantics. Rule Trace-tau-compression ensures that τ labels are not accumulated, so readout and writeout labels are not spaced out with τs. For writeouts, Rule Trace-writeout ensures that writeout labels are always created, dually, for readouts, Rule Trace-readout ensures that readout labels are always created when reading unprotected data. Rule Trace-writeout-termination addresses Example 8, so no writeout label is created when a program terminates.

The reflexive transitive closure of the 
                           ↠
                         relation is captured by relation 
                           
                              
                                 
                              
                           
                           ⊆
                           Θ
                           ×
                           
                              
                                 α
                              
                              
                                 ¯
                              
                           
                           ×
                           Θ
                         (Fig. 15
                        ). The only difference with the way this is performed with regard to 
                           
                              
                                 Tr
                              
                              
                                 S
                              
                           
                         (Fig. 12) is that when a label is produced in 
                           
                              
                                 Tr
                              
                              
                                 L
                              
                           
                        , it is converted to a normal form via the 
                           norm
                           (
                           ·
                           )
                         function and stripped of its non-interfering reads via the 
                           StripNI
                           (
                           ·
                           )
                         function (Fig. 16
                         defined below).

The trace semantics of a state is defined as follows: 
                           
                              
                                 Tr
                                 -
                                 state
                                 (
                                 Θ
                                 )
                                 =
                                 {
                                 
                                    
                                       α
                                    
                                    
                                       ¯
                                    
                                 
                                 |
                                 ∃
                                 
                                    
                                       Θ
                                    
                                    
                                       ′
                                    
                                 
                                 .
                                 Θ
                                 
                                    
                                       
                                    
                                 
                                 
                                    
                                       Θ
                                    
                                    
                                       ′
                                    
                                 
                                 }
                              
                           
                        Thus, the 
                           
                              
                                 Tr
                              
                              
                                 L
                              
                           
                         traces of a program P are defined as the traces of its initial state: 
                           
                              
                                 
                                    
                                       Tr
                                    
                                    
                                       L
                                    
                                 
                                 (
                                 P
                                 )
                                 =
                                 Tr
                                 -
                                 state
                                 (
                                 
                                    
                                       Θ
                                    
                                    
                                       0
                                    
                                 
                                 (
                                 P
                                 )
                                 )
                              
                           
                        
                     

The greatest concern when adding readouts is detecting whether a readout is non-interfering, as explained in Examples 10– 12. In fact, non-interfering readouts must not have a corresponding label in traces. To understand whether a readout to a certain address is non-interfering, we rely on judgment 
                           NI
                           (
                           Θ
                           ,
                           a
                           )
                        . That judgment tells whether an address a is non-interfering for a state Θ if Θ performs a readout to a that does not affect future traces but for the read value. Formally:
                           
                              
                                 NI
                                 (
                                 Θ
                                 ,
                                 a
                                 )
                                 ≜
                                 ∀
                                 v
                                 ,
                                 w
                                 .
                                 
                                 Θ
                                 
                                    
                                       
                                    
                                 
                                 
                                    
                                       Θ
                                    
                                    
                                       ′
                                    
                                 
                                 
                                 and
                                 
                                 Θ
                                 
                                    
                                       
                                    
                                 
                                 
                                    
                                       Θ
                                    
                                    
                                       ″
                                    
                                 
                                 and
                                 
                                 
                                    
                                       α
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       ω
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                    
                                       ¯
                                    
                                 
                                 read
                                 (
                                 a
                                 ,
                                 v
                                 )
                                 δ
                                 !
                                 
                                 and
                                 
                                 
                                    
                                       α
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 
                                    
                                       ω
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                    
                                       ¯
                                    
                                 
                                 read
                                 (
                                 a
                                 ,
                                 w
                                 )
                                 δ
                                 !
                                 and
                                 
                                 Tr
                                 -
                                 state
                                 (
                                 
                                    
                                       Θ
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 =
                                 Tr
                                 -
                                 state
                                 (
                                 
                                    
                                       Θ
                                    
                                    
                                       ″
                                    
                                 
                                 )
                              
                           
                        The 
                           NI
                           (
                           ·
                           )
                         definition relies on the formalisation of 
                           Tr
                           -
                           state
                           (
                           Θ
                           )
                         which returns the set of traces that can be generated from Θ; it is formalised below. 
                           Tr
                           -
                           state
                           (
                           ·
                           )
                         is used to access the behaviour of the program after either value is read from address a, no difference can be found there for the readout to be non-interfering. It is not sufficient to check the single immediate action δ following the readout, as the readout value could be stored in memory and be used only for successive computations. The prefix 
                           
                              
                                 ω
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              
                                 ¯
                              
                           
                         makes it possible to identify a readout that happens at any point during the first action.

Note that the definition of 
                           Tr
                           -
                           state
                           (
                           ·
                           )
                         and that of 
                           NI
                           (
                           ·
                           )
                         are mutually recursive. However, they are still well-founded since 
                           Tr
                           -
                           state
                           (
                           ·
                           )
                         uses 
                           NI
                           (
                           ·
                           )
                         when filtering a label 
                           δ
                           !
                         generated as 
                           Θ
                           
                              
                                 
                              
                           
                           
                              
                                 Θ
                              
                              
                                 ′
                              
                           
                         and then 
                           NI
                           (
                           ·
                           )
                         relies on 
                           Tr
                           -
                           state
                           (
                           ·
                           )
                         on the traces generated from 
                           
                              
                                 Θ
                              
                              
                                 ′
                              
                           
                         onwards.

With this information, define a function 
                           StripNI
                           (
                           Θ
                           ,
                           α
                           )
                         that returns 
                           
                              
                                 α
                              
                              
                                 ′
                              
                           
                         which is α stripped of its non-interfering reads, provided that α is generated from Θ (Fig. 16). Since this function preserves the ordering of the labels in α, when applied to labels in normal form it still produces labels in normal form.

The notion of trace equivalence is presented generically for both trace semantics under consideration. Use 
                           Tr
                           (
                           P
                           )
                         to indicate the traces of an 
                           A
                           
                              +
                           
                           I
                         program P, be it expressed through 
                           
                              
                                 Tr
                              
                              
                                 S
                              
                           
                         or 
                           
                              
                                 Tr
                              
                              
                                 L
                              
                           
                        . Two programs P
                        1 and P
                        2 are trace-equivalent, denoted as 
                           
                              
                                 P
                              
                              
                                 1
                              
                           
                           
                              
                                 ≃
                              
                              
                                 T
                              
                           
                           
                              
                                 P
                              
                              
                                 2
                              
                           
                        , if their traces are the same and they have the same memory descriptor. 
                           Definition 6
                           Trace equivalence


                           
                              
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 
                                    
                                       ≃
                                    
                                    
                                       T
                                    
                                 
                                 
                                    
                                       P
                                    
                                    
                                       2
                                    
                                 
                               if 
                                 Tr
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 =
                                 Tr
                                 (
                                 
                                    
                                       P
                                    
                                    
                                       2
                                    
                                 
                                 )
                               and 
                                 
                                    
                                       P
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       m
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 s
                                 )
                               and 
                                 
                                    
                                       P
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       m
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 s
                                 )
                              .

Following are two examples of trace equivalent and inequivalent programs. For the sake of simplicity, we use the 
                           
                              
                                 Tr
                              
                              
                                 L
                              
                           
                         semantics and indicate arbitrary values for registers and flags with notation (r,f) and an unprotected address with p. 
                           Example 18
                           Traces of previous examples


                           The code of Example 5 is not trace equivalent; the following trace is generated by P
                              
                                 L
                               but not by P
                              
                                 R
                              : 
                                 
                                    
                                       call
                                       
                                       100
                                       
                                       (
                                       r
                                       ;
                                       f
                                       )
                                       ?
                                       ·
                                       ret
                                       
                                       p
                                       
                                       (
                                       …
                                       ,
                                       41
                                       ;
                                       f
                                       )
                                       !
                                       ·
                                       √
                                       !
                                    
                                 
                              
                           

The code of Example 12 is not trace equivalent; the following trace is generated by P
                              
                                 L
                               but not by P
                              
                                 R
                              : 
                                 
                                    
                                       call
                                       
                                       100
                                       
                                       (
                                       r
                                       ;
                                       f
                                       )
                                       ?
                                       ·
                                       read
                                       (
                                       10
                                       ,
                                       v
                                       )
                                       call
                                       
                                       30
                                       (
                                       30
                                       ,
                                       …
                                       ;
                                       f
                                       )
                                       !
                                    
                                 
                              
                           

The code of Example 17 is trace equivalent since the trace semantics of both P
                              
                                 L
                               and P
                              
                                 R
                               is a set whose sequences are concatenations of the following trace, each element of the sequence having possibly different values of r and f: 
                                 
                                    
                                       call
                                       
                                       100
                                       
                                       (
                                       r
                                       ;
                                       f
                                       )
                                       ?
                                       ·
                                       ret
                                       
                                       p
                                       
                                       (
                                       r
                                       [
                                       
                                          
                                             r
                                          
                                          
                                             0
                                          
                                       
                                       ↦
                                       0
                                       ]
                                       ;
                                       f
                                       )
                                       !
                                    
                                 
                              
                           

This section presents the general proof strategy through which both 
                        
                           
                              Tr
                           
                           
                              S
                           
                        
                      and 
                        
                           
                              Tr
                           
                           
                              L
                           
                        
                      are proven to be fully abstract w.r.t. the corresponding operational semantics.

A fully abstract trace semantics is both sound and complete with respect to the operational semantics. Soundness means that the trace semantics captures all behaviours expressible with the operational semantics. Thus, for all contexts, two trace equivalent programs cannot be told apart. Completeness means that the trace semantics does not capture additional behaviours that are not expressible with the operational semantics. Thus, for all trace-inequivalent programs, there exists a context that can differentiate them.

Full abstraction of trace semantics is formally stated as 
                        
                           
                              P
                           
                           
                              1
                           
                        
                        
                           
                              ≃
                           
                           
                              T
                           
                        
                        
                           
                              P
                           
                           
                              2
                           
                        
                        
                        ⟺
                        
                        
                           
                              P
                           
                           
                              1
                           
                        
                        ≃
                        
                           
                              P
                           
                           
                              2
                           
                        
                     ; its proof is split into two cases, one for each direction of the co-implication.

Call the interface of a state its registers, flags and unprotected memory. Two states Ω
                     1 and Ω
                     2 have the same interface, denoted as 
                        
                           
                              Ω
                           
                           
                              1
                           
                        
                        ≗
                        
                           
                              Ω
                           
                           
                              2
                           
                        
                     , if they have the same registers, flags and unprotected memory. Formally, 
                        
                           
                              Ω
                           
                           
                              1
                           
                        
                        ≗
                        
                           
                              Ω
                           
                           
                              2
                           
                        
                      if 
                        
                           
                              Ω
                           
                           
                              1
                           
                        
                        =
                        (
                        
                           
                              p
                           
                           
                              1
                           
                        
                        ,
                        r
                        ,
                        f
                        ,
                        
                           
                              m
                           
                           
                              1
                           
                        
                        ,
                        
                           
                              s
                           
                           
                              1
                           
                        
                        )
                      and 
                        
                           
                              Ω
                           
                           
                              2
                           
                        
                        =
                        (
                        
                           
                              p
                           
                           
                              2
                           
                        
                        ,
                        r
                        ,
                        f
                        ,
                        
                           
                              m
                           
                           
                              2
                           
                        
                        ,
                        
                           
                              s
                           
                           
                              2
                           
                        
                        )
                      and 
                        
                           
                              m
                           
                           
                              ext
                           
                        
                        (
                        
                           
                              m
                           
                           
                              1
                           
                        
                        ,
                        
                           
                              s
                           
                           
                              1
                           
                        
                        )
                        =
                        
                           
                              m
                           
                           
                              ext
                           
                        
                        (
                        
                           
                              m
                           
                           
                              2
                           
                        
                        ,
                        
                           
                              s
                           
                           
                              2
                           
                        
                        )
                     . Given 
                        Ω
                        =
                        (
                        p
                        ,
                        r
                        ,
                        f
                        ,
                        m
                        ,
                        s
                        )
                     , define 
                        ∥
                        Ω
                        ∥
                      to be the state 
                        Θ
                        =
                        (
                        p
                        ,
                        r
                        ,
                        f
                        ,
                        
                           
                              m
                           
                           
                              sec
                           
                        
                        (
                        m
                        ,
                        s
                        )
                        ,
                        s
                        )
                      if 
                        s
                        ⊢
                        protected
                        (
                        p
                        )
                      and 
                        (
                        unk
                        ,
                        m
                        ,
                        s
                        )
                      otherwise.

The proof of soundness (Theorem 1 below) states that an unprotected program interacting with P
                     1 cannot distinguish it from P
                     2. The proof strategy relies on both programs offering the same interface to the unprotected program. This proof depends on an interface-preservation lemma (Lemma 1) which must be proven for each trace semantics since it depends on the labels of each trace semantics. Lemma 1 says that two states with the same interface still have the same interface after they perform the same observable action. Thus unprotected programs do not see differences, in terms of flags, registers and unprotected memory, between P
                     1 and P
                     2.

The proofs of Lemma 1 and of Theorems 1 and 2 can be found in Appendices B–D. 
                        Lemma 1
                        Interface preservation after same observable action


                        
                           If Θ
                           1 
                           
                              
                                 
                                    
                                 
                              
                              
                                 
                                    ↠
                                 
                                 
                                    α
                                 
                              
                              
                                 
                                    Θ
                                 
                                 
                                    1
                                 
                                 
                                    ′
                                 
                              
                            
                           and 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    1
                                 
                              
                              =
                              ∥
                              
                                 
                                    Ω
                                 
                                 
                                    1
                                 
                              
                              ∥
                            
                           and 
                           
                              
                                 
                                    Ω
                                 
                                 
                                    1
                                 
                              
                              
                                 
                                    →
                                 
                                 
                                    ⁎
                                 
                              
                              
                                 
                                    Ω
                                 
                                 
                                    1
                                 
                                 
                                    ′
                                 
                              
                            
                           and 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    1
                                 
                                 
                                    ′
                                 
                              
                              =
                              ∥
                              
                                 
                                    Ω
                                 
                                 
                                    1
                                 
                                 
                                    ′
                                 
                              
                              ∥
                            
                           and 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    2
                                 
                              
                              
                                 
                                    
                                 
                              
                              
                                 
                                    ↠
                                 
                                 
                                    α
                                 
                              
                              
                                 
                                    Θ
                                 
                                 
                                    2
                                 
                                 
                                    ′
                                 
                              
                            
                           and 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    2
                                 
                              
                              =
                              ∥
                              
                                 
                                    Ω
                                 
                                 
                                    2
                                 
                              
                              ∥
                            
                           and 
                           
                              
                                 
                                    Ω
                                 
                                 
                                    2
                                 
                              
                              
                                 
                                    →
                                 
                                 
                                    ⁎
                                 
                              
                              
                                 
                                    Ω
                                 
                                 
                                    2
                                 
                                 
                                    ′
                                 
                              
                            
                           and 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    2
                                 
                                 
                                    ′
                                 
                              
                              =
                              ∥
                              
                                 
                                    Ω
                                 
                                 
                                    2
                                 
                                 
                                    ′
                                 
                              
                              ∥
                            
                           and 
                           
                              
                                 
                                    Ω
                                 
                                 
                                    1
                                 
                              
                              ≗
                              
                                 
                                    Ω
                                 
                                 
                                    2
                                 
                              
                            
                           then 
                           
                              
                                 
                                    Ω
                                 
                                 
                                    1
                                 
                                 
                                    ′
                                 
                              
                              ≗
                              
                                 
                                    Ω
                                 
                                 
                                    2
                                 
                                 
                                    ′
                                 
                              
                            (assuming there is no overflow of the secure stack).


                           
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              
                                 
                                    ≃
                                 
                                 
                                    T
                                 
                              
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                              ⇒
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              ≃
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                            (assuming there is no overflow of the secure stack).


                           
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              ≃
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                              ⇒
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              
                                 
                                    ≃
                                 
                                 
                                    T
                                 
                              
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                            (assuming there is no overflow of the secure stack).

This general proof strategy is presented for both Theorems 1 and 2. The generalised approach is tailored to each semantics only in the relatively simple proof of Lemma 1. Since Theorems 1 and 2 hold for both 
                        
                           
                              Tr
                           
                           
                              L
                           
                        
                      and 
                        
                           
                              Tr
                           
                           
                              S
                           
                        
                     , both semantics are fully abstract w.r.t. the corresponding operational semantics.

@&#RELATED WORK@&#

Full abstraction has been largely studied as a way to formalise the correctness of a denotational semantics with respect to an operational one [20]. It has been studied for different programming language paradigms, such as the λ-calculus [22] and the π-calculus [23].

Trace semantics was developed to study the behaviour of concurrent CSP [24] and it has been adopted for describing concurrent and distributed language behaviour [25]. Several works have devised fully abstract trace semantics for functional [26–29] and object-oriented [16,30] languages. Abadi and Plotkin [26] developed a fully abstract trace semantics for a λ-calculus with references in order to prove a secure compilation using Address Space Layout Randomisation secure. Jagadeesan et al. [27] extended the results of Abadi and Plotkin to a λ-calculus with more advanced language features and equipped that language with a fully abstract trace semantics for secure compilation purposes. While the languages are different, the goal of the trace semantics of these works and of the presented work are analogous, as the trace semantics is used to prove secure compilation results related to the language. Laird [28] presented a fully abstract trace semantics for a functional language with locally declared general references that does not focus on the security aspects of that language. Ghica and Tzevelekos [29] provided a fully abstract trace semantics, with regard to a game operational semantics, of a C-like language that, unlike this work, does not present a protection mechanism. Jeffrey and Rathke [16] provided a fully abstract trace semantics for a core Java-like language that enforces strong encapsulation of objects in packages and of fields in classes. Welsch and Poetzsch-Heffter [30] devised a fully abstract trace-based semantics for class libraries in Java-like languages, focussing on backward compatibility for class libraries instead of security.

Different techniques can be used to capture the behaviour of untyped assembly code, for example denotational semantics and logical relations. If the goal is reasoning about a specific aspect of assembly code, it can be equipped with a denotational semantics capturing precisely that aspect [31]. As PMA operates at the untyped assembly language level, most of the instructions of the language can be seen as modifying a global state (i.e., the memory). The rules concerning global state update [21,32] could be used to define a denotational semantics for PMA-enhanced assembly. We expect that these results can affect the definition of a denotational semantics for PMA-enhanced assembly language as they have affected the definition of the 
                        
                           
                              Tr
                           
                           
                              L
                           
                        
                      semantics. If the goal is reasoning about compiled assembly code, biorthogonality [33] and Kripke logical relations [34] have been used for proving compiler correctness. These powerful techniques, and their evolution in relation transition systems [35] have unfortunately not been used for PMA-enhanced languages. Reasoning about the behaviour of PMA-enhanced untyped assembly code with logical relations remains an open research area.

A different research area studies logics for assembly languages: Hoare logics [15] or separation logics [36]. Jensen et al. [36] present a summary of the most recent advances in the latter. That research area focusses on providing reasoning facilities for assembly code, while this paper focusses on reasoning on the security of assembly code.

PMA, in the form of fine grained, program counter-based memory access control mechanisms, have been implemented in several software [3,5–7] and hardware forms [2,4] and recently by Intel in the SGX processor [1]. From the theoretical point of view, assembly languages extended with these protection mechanisms have been recently studied as target languages for secure compilation schemes [10–12]. The language and trace semantics of this paper are inspired by those works.

A different protection mechanism that could be employed at the assembly level is a typed assembly language [14]. To the best of the authors׳ knowledge, no fully abstract trace semantics has been provided for such languages.

This paper studied the characterisation of the behaviour programs enhanced with PMA. To this extent, it formalised 
                        A
                        
                           +
                        
                        I
                     , an assembly language extended with that isolation mechanism. Then, it provided two different trace semantics for 
                        A
                        
                           +
                        
                        I
                     : 
                        
                           
                              Tr
                           
                           
                              S
                           
                        
                      and 
                        
                           
                              Tr
                           
                           
                              L
                           
                        
                     . 
                        
                           
                              Tr
                           
                           
                              S
                           
                        
                      can be used to model the behaviour of components that are securely-compiled to 
                        A
                        
                           +
                        
                        I
                      and it can be used to simplify proofs of secure compilation to 
                        A
                        
                           +
                        
                        I
                     . 
                        
                           
                              Tr
                           
                           
                              L
                           
                        
                      investigates the challenges of including readout and writeout operations in the trace characterisation. Moreover, it provided a general proof strategy where both trace semantics are proven to be fully abstract. These semantics model the capabilities of attackers that inject malicious assembly code and they simplify proving secure compilation to the assembly language.

The 
                        
                           
                              Tr
                           
                           
                              L
                           
                        
                      semantics relies on a partitioning of unprotected code into a code and a data section to achieve full abstraction. This partitioning is not enforceable in some PMA architectures (e.g., the Intel SGX or Sancus), while in software or hypervisor-based implementation of PMA it can be. As previously mentioned, however, the 
                        
                           
                              Tr
                           
                           
                              L
                           
                        
                      semantics captures the behaviour of protected code that reads or writes in a certain area of unprotected memory and jumps to a different area of unprotected memory when returning control to unprotected code. Thus, 
                        
                           
                              Tr
                           
                           
                              L
                           
                        
                      can be used to describe the behaviour of protected PMA code that uses readouts and writeouts to exchange parameters with unprotected code. To eliminate the need for the partitioning of unprotected code, we envision that the semantics must accumulate the knowledge of its readouts and writeouts when producing the traces. Addressing this challenge, therefore providing fully abstract trace semantics for protected, arbitrary PMA code, is left for future work.

Providing a fully abstract trace semantics for a machine with multiple instances of an isolation mechanism or with multiple cores seem natural extensions to this work. The latter seems crucial in order to provide a secure compiler for concurrent programs to machines using the protection mechanism presented.

@&#ACKNOWLEDGEMENTS@&#

The authors would like to thank Tarmo Uustalu and the anonymous reviewers for useful feedback on an earlier draft.

Marco Patrignani holds a Ph.D. fellowship from the Research Foundation Flanders (FWO). This work has been supported in part by the Intel Labs University Research Office. With the financial support from the Prevention of and Fight against Crime Programme of the European Union (B-CCENTRE).

The rewrite rules of Fig. 13 are confluent (Lemma 2) and terminating (Lemma 3), thus they are convergent (Theorem 3). This implies that when applied to a prefix 
                        
                           
                              ω
                              (
                              a
                              ,
                              v
                              )
                           
                           
                              ¯
                           
                        
                     , they will always return its unique normal form.

In the following, denote a prefix sequence 
                        
                           
                              ω
                              (
                              a
                              ,
                              v
                              )
                           
                           
                              ¯
                           
                        
                      with π. 
                        Lemma 2
                        Confluence


                        
                           The rewrite rules are confluent. For any π, for all 
                           
                              
                                 
                                    π
                                 
                                 
                                    ′
                                 
                              
                            
                           and 
                           
                              
                                 
                                    π
                                 
                                 
                                    ″
                                 
                              
                            
                           such that 
                           
                              π
                              ⇝
                              
                                 
                                    π
                                 
                                 
                                    ′
                                 
                              
                            
                           and 
                           
                              π
                              ⇝
                              
                                 
                                    π
                                 
                                 
                                    ″
                                 
                              
                           , there exists 
                           
                              
                                 
                                    π
                                 
                                 
                                    ‴
                                 
                              
                            
                           such that 
                           
                              
                                 
                                    π
                                 
                                 
                                    ′
                                 
                              
                              
                                 
                                    ⇝
                                 
                                 
                                    ⁎
                                 
                              
                              
                                 
                                    π
                                 
                                 
                                    ‴
                                 
                              
                            
                           and 
                           
                              
                                 
                                    π
                                 
                                 
                                    ″
                                 
                              
                              
                                 
                                    ⇝
                                 
                                 
                                    ⁎
                                 
                              
                              
                                 
                                    π
                                 
                                 
                                    ‴
                                 
                              
                           .

This proof proceeds by induction over the length of 
                              
                                 
                                    ω
                                    (
                                    a
                                    ,
                                    v
                                    )
                                 
                                 
                                    ¯
                                 
                              
                           . 
                              Base case (length 0 or 1)
                              
                                 No reduction rules apply, so the theorem holds.

For any combination of the first two actions of the prefix (
                                       
                                          
                                             ω
                                          
                                          
                                             0
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             0
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             0
                                          
                                       
                                       )
                                     and 
                                       
                                          
                                             ω
                                          
                                          
                                             1
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             1
                                          
                                       
                                       )
                                    ) only one rule is applicable, as presented in the case analysis below. Thus, 
                                       
                                          
                                             π
                                          
                                          
                                             ′
                                          
                                       
                                     and 
                                       
                                          
                                             π
                                          
                                          
                                             ″
                                          
                                       
                                     are the same and so both flow into the same 
                                       
                                          
                                             π
                                          
                                          
                                             ‴
                                          
                                       
                                    . 
                                       
                                          
                                             read
                                             (
                                             a
                                             ,
                                             v
                                             )
                                             read
                                             (
                                             a
                                             ,
                                             v
                                             )
                                          
                                       
                                       
                                          only Rule (Read-drop) applies.

firstly, Rule (Constraint-read) ensures that v=w, then only Rule (Read-drop) applies.

in this case if 
                                                a
                                                <
                                                b
                                              no rule apply, while if 
                                                a
                                                >
                                                b
                                              only Rule (Read-order) applies.

only Rule (Read-no-write) applies.

no rule applies.

in this case if 
                                                a
                                                <
                                                b
                                              no rule apply, while if 
                                                a
                                                >
                                                b
                                              only Rule (Rw-order) applies.

only Rule (Write-drop) applies.

only Rule (Write-drop) applies.

in this case if 
                                                a
                                                <
                                                b
                                              no rule apply, while if 
                                                a
                                                >
                                                b
                                              only Rule (Write-order) applies.

only Rule (Write-no-read) applies.

firstly, Rule (Constraint-read) ensures that v=w, then only Rule (Write-no-read) applies.

and 
                                                a
                                                ≠
                                                b
                                             ] in this case if 
                                                a
                                                <
                                                b
                                              no rule apply, while if 
                                                a
                                                >
                                                b
                                              only Rule (WR-order) applies.


                           The rewrite rules are terminating: for any prefix, all possible sequences of application of the rewrite rules to 
                           
                              
                                 
                                    ω
                                    (
                                    a
                                    ,
                                    v
                                    )
                                 
                                 
                                    ¯
                                 
                              
                            
                           are finite.

The proof proceeds by structural induction on 
                              
                                 
                                    ω
                                    (
                                    a
                                    ,
                                    v
                                    )
                                 
                                 
                                    ¯
                                 
                              
                           . 
                              Base case: 
                                    
                                       
                                          ω
                                          (
                                          a
                                          ,
                                          v
                                          )
                                       
                                       
                                          ¯
                                       
                                    
                                    =
                                    ϵ
                                 
                              
                              
                                 As no rewrite rules apply here, this case is terminating.

The inductive hypothesis IH tells us that applying the rewriting rules to a prefix 
                                       
                                          
                                             ω
                                          
                                          
                                             1
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       ⋯
                                       
                                          
                                             ω
                                          
                                          
                                             n
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             n
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             n
                                          
                                       
                                       )
                                     of length n is terminating in q steps. Apply Lemma 2 to know that the confluent form of 
                                       
                                          
                                             ω
                                          
                                          
                                             1
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       …
                                       
                                          
                                             ω
                                          
                                          
                                             n
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             n
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             n
                                          
                                       
                                       )
                                     is 
                                       
                                          
                                             ω
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                       …
                                       
                                          
                                             ω
                                          
                                          
                                             n
                                          
                                          
                                             ′
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             n
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             n
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    . The following alternatives arise based on 
                                       
                                          
                                             ω
                                          
                                          
                                             0
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             0
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             0
                                          
                                       
                                       )
                                     and 
                                       
                                          
                                             ω
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             v
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    . 
                                       
                                          
                                             
                                                
                                                   a
                                                
                                                
                                                   0
                                                
                                             
                                             <
                                             
                                                
                                                   a
                                                
                                                
                                                   1
                                                
                                                
                                                   ′
                                                
                                             
                                          .
                                       
                                          In this case no rewrite rules apply for prefixes of index 0 and 1. Their application terminates in q steps for prefixes 1 onwards as stated in the IH. So this case terminates in q steps.

In this case, ω
                                             0 and 
                                                
                                                   
                                                      ω
                                                   
                                                   
                                                      1
                                                   
                                                   
                                                      ′
                                                   
                                                
                                              are swapped in place by applying one rewriting rule. We can then apply the IH to state that applying the rewrite rules to 
                                                
                                                   
                                                      ω
                                                   
                                                   
                                                      0
                                                   
                                                
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      0
                                                   
                                                
                                                ,
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      0
                                                   
                                                
                                                )
                                                
                                                   
                                                      ω
                                                   
                                                   
                                                      2
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      2
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                ,
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      2
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                )
                                              
                                             
                                                …
                                                
                                                   
                                                      ω
                                                   
                                                   
                                                      n
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      n
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                ,
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      n
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                )
                                              is terminating. By applying Lemma 2, we can define the confluence form of that prefix with π. 
                                                
                                                   
                                                      ω
                                                   
                                                   
                                                      1
                                                   
                                                
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ,
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      1
                                                   
                                                
                                                )
                                                π
                                              is thus terminating since no rewrite rules apply to prefixes of index 0 and 1 while their application terminates in q steps for prefixes 1 onwards as stated in the IH. So this case terminates in q+1 steps.

The following cases arise 
                                                
                                                   
                                                      
                                                         
                                                            ω
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                      (
                                                      a
                                                      ,
                                                      
                                                         
                                                            v
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                      )
                                                      =
                                                      read
                                                      (
                                                      a
                                                      ,
                                                      
                                                         
                                                            v
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                      )
                                                    and 
                                                      
                                                         
                                                            ω
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      (
                                                      a
                                                      ,
                                                      
                                                         
                                                            v
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                      =
                                                      read
                                                      (
                                                      a
                                                      ,
                                                      
                                                         
                                                            v
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      )
                                                   .
                                                
                                                   Firstly, Rule (Constraint-read) is applied, thus 
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         =
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      . Then, Rule (Read-drop) drops one of those actions, so we can apply the IH since the prefix is of length n. So this case terminates in 
                                                         q
                                                         +
                                                         2
                                                       steps.

The following cases arise: 
                                                         
                                                            
                                                               
                                                                  
                                                                     v
                                                                  
                                                                  
                                                                     0
                                                                  
                                                               
                                                               =
                                                               
                                                                  
                                                                     v
                                                                  
                                                                  
                                                                     1
                                                                  
                                                                  
                                                                     ′
                                                                  
                                                               
                                                               =
                                                               v
                                                            .
                                                         
                                                            Rule (Read-no-write) is applied, and only the 0-indexed action is kept. We can apply the IH to the prefix 
                                                                  
                                                                     
                                                                        ω
                                                                     
                                                                     
                                                                        0
                                                                     
                                                                  
                                                                  (
                                                                  
                                                                     
                                                                        a
                                                                     
                                                                     
                                                                        0
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     
                                                                        v
                                                                     
                                                                     
                                                                        0
                                                                     
                                                                  
                                                                  )
                                                                  
                                                                     
                                                                        ω
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                     
                                                                        ′
                                                                     
                                                                  
                                                                  (
                                                                  
                                                                     
                                                                        a
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                     
                                                                        ′
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     
                                                                        v
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                     
                                                                        ′
                                                                     
                                                                  
                                                                  )
                                                                  ⋯
                                                                  
                                                                     
                                                                        ω
                                                                     
                                                                     
                                                                        n
                                                                     
                                                                     
                                                                        ′
                                                                     
                                                                  
                                                                  (
                                                                  
                                                                     
                                                                        a
                                                                     
                                                                     
                                                                        n
                                                                     
                                                                     
                                                                        ′
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     
                                                                        v
                                                                     
                                                                     
                                                                        n
                                                                     
                                                                     
                                                                        ′
                                                                     
                                                                  
                                                                  )
                                                                which is of length n. So this case terminates in 
                                                                  q
                                                                  +
                                                                  1
                                                                steps.

In this case no rewrite rules apply for prefixes of index 0 and 1. Their application terminates for prefixes 1 onwards as stated in the IH. So this case terminates in q steps.

Firstly, Rule (Constraint-write) is applied, thus 
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         =
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      .

Then, Rule (Write-drop) drops the 1-indexed action, so we can apply the IH to the prefix 
                                                         
                                                            
                                                               ω
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               a
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         )
                                                         
                                                            
                                                               ω
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               a
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         )
                                                         ⋯
                                                         
                                                            
                                                               ω
                                                            
                                                            
                                                               n
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               a
                                                            
                                                            
                                                               n
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               n
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         )
                                                       since it is of length n. So this case terminates in 
                                                         q
                                                         +
                                                         2
                                                       steps.

Rule (Write-drop) is applied and only the 1-indexed action is kept, so we can apply the IH and this case holds. So this case terminates in 
                                                         q
                                                         +
                                                         1
                                                       steps.


                           The rewrite rules are convergent, i.e. they are confluent and terminating.

By Lemmas 2 and 3.□


                     
                        Proof
                        The proof proceeds by induction on 
                              
                                 
                                    α
                                 
                                 
                                    ¯
                                 
                              
                            that leads to a case analysis on α. We omit the inductive cases and proceed directly to the case analysis considered for the base case. 
                              
                                 
                                    √
                                 .
                              
                                 Straightforward: the thesis is 
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                       
                                       ≗
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                       
                                    , which is among the hypotheses.

This action can either be a call of the form 
                                       call
                                       
                                       p
                                       (
                                       r
                                       ;
                                       f
                                       )
                                     or a return of the form 
                                       ret
                                       
                                       p
                                       (
                                       r
                                       ;
                                       f
                                       )
                                    , only the case for the call is presented since the one for the return is analogous.

So: 
                                       
                                          
                                             Θ
                                          
                                          
                                             1
                                          
                                       
                                       
                                          
                                             ↠
                                          
                                          
                                             call
                                             
                                             p
                                             (
                                             r
                                             ;
                                             f
                                             )
                                             ?
                                          
                                       
                                       
                                          
                                             Θ
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                     and 
                                       
                                          
                                             Θ
                                          
                                          
                                             2
                                          
                                       
                                       
                                          
                                             ↠
                                          
                                          
                                             call
                                             
                                             p
                                             (
                                             r
                                             ;
                                             f
                                             )
                                             ?
                                          
                                       
                                       
                                          
                                             Θ
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                    .

By definition, 
                                       
                                          
                                             Θ
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       =
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       =
                                       (
                                       p
                                       ,
                                       r
                                       ,
                                       f
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                     and 
                                       
                                          
                                             Θ
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       =
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       =
                                       (
                                       p
                                       ,
                                       r
                                       ,
                                       f
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    .

The thesis is 
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ≗
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                    , so 
                                       (
                                       p
                                       ,
                                       r
                                       ,
                                       f
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       ≗
                                       (
                                       p
                                       ,
                                       r
                                       ,
                                       f
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    . Both states need to have equal registers, flags and unprotected memory. The first two points are clear, as registers and flags are set to be the same by the label. What needs to be proven is that 
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       =
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    .

From hypothesis 
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                       
                                       ≗
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                       
                                    , we have that 
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       =
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    .

Since the action 
                                       call
                                       
                                       p
                                       (
                                       r
                                       ;
                                       f
                                       )
                                     does not touch the unprotected memory, we have that 
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       =
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                     and 
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                       =
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    .

By transitivity we obtain that 
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       =
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                     holds, so this case holds as well.

Here, 
                                       δ
                                       !
                                     is in the form 
                                       
                                          
                                             δ
                                          
                                          
                                             1
                                          
                                       
                                       ⋯
                                       
                                          
                                             δ
                                          
                                          
                                             n
                                          
                                       
                                       γ
                                       !
                                    . The action 
                                       γ
                                       !
                                     can either be a call of the form 
                                       call
                                       
                                       p
                                       (
                                       r
                                       ;
                                       f
                                       )
                                     or a return of the form 
                                       ret
                                       
                                       p
                                       (
                                       r
                                       ;
                                       f
                                       )
                                    ; only the case for the call is presented since the one for the return is analogous.

So: 
                                       
                                          
                                             Θ
                                          
                                          
                                             1
                                          
                                       
                                       
                                          
                                             ↠
                                          
                                          
                                             
                                                
                                                   δ
                                                
                                                
                                                   1
                                                
                                             
                                             ⋯
                                             
                                                
                                                   δ
                                                
                                                
                                                   n
                                                
                                             
                                             call
                                             
                                             p
                                             (
                                             r
                                             ;
                                             f
                                             )
                                             !
                                          
                                       
                                       
                                          
                                             Θ
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                     and 
                                       
                                          
                                             Θ
                                          
                                          
                                             2
                                          
                                       
                                       
                                          
                                             ↠
                                          
                                          
                                             
                                                
                                                   δ
                                                
                                                
                                                   1
                                                
                                             
                                             ⋯
                                             
                                                
                                                   δ
                                                
                                                
                                                   n
                                                
                                             
                                             call
                                             
                                             p
                                             (
                                             r
                                             ;
                                             f
                                             )
                                             !
                                          
                                       
                                       
                                          
                                             Θ
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                    .


                                    
                                       
                                          
                                             Θ
                                          
                                          
                                             1
                                          
                                       
                                       =
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                       
                                       =
                                       (
                                       p
                                       ,
                                       r
                                       ,
                                       f
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                     and 
                                       
                                          
                                             Θ
                                          
                                          
                                             2
                                          
                                       
                                       =
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                       
                                       =
                                       (
                                       p
                                       ,
                                       r
                                       ,
                                       f
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    .

By definition, 
                                       
                                          
                                             Θ
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       =
                                       (
                                       unk
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                     and 
                                       
                                          
                                             Θ
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       =
                                       (
                                       unk
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    .

We can reconstruct 
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                     by applying the following hypotheses: 
                                       
                                          
                                             Θ
                                          
                                          
                                             1
                                          
                                       
                                       =
                                       ∥
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                       
                                       ∥
                                     and 
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                       
                                       
                                          
                                             →
                                          
                                          
                                             ⁎
                                          
                                       
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                     and 
                                       
                                          
                                             Θ
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       =
                                       ∥
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ∥
                                    . Analogously, we can reconstruct 
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                    .

So, 
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       =
                                       (
                                       p
                                       ,
                                       r
                                       ,
                                       f
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                     and 
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       =
                                       (
                                       p
                                       ,
                                       r
                                       ,
                                       f
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    . The thesis is 
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ≗
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                    , so 
                                       (
                                       p
                                       ,
                                       r
                                       ,
                                       f
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       ≗
                                       (
                                       p
                                       ,
                                       r
                                       ,
                                       f
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    . Both states need to have equal registers, flags and unprotected memory. The first two points are clear, as registers and flags are set to be the same by the label. What needs to be proven is that 
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       =
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    .

From hypothesis 
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                       
                                       ≗
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                       
                                    , we have that 
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       =
                                       
                                          
                                             m
                                          
                                          
                                             ext
                                          
                                       
                                       (
                                       
                                          
                                             m
                                          
                                          
                                             2
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    .

What needs to be considered are the prefixes 
                                       
                                          
                                             δ
                                          
                                          
                                             1
                                          
                                       
                                       ⋯
                                       
                                          
                                             δ
                                          
                                          
                                             n
                                          
                                       
                                    , which can be either readouts or writeouts: The proof now proceeds by induction on n. 
                                       Base case, n=0.
                                       
                                          Trivial, since we have that 
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      ext
                                                   
                                                
                                                (
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ,
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      1
                                                   
                                                
                                                )
                                                =
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      ext
                                                   
                                                
                                                (
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      1
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                ,
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      1
                                                   
                                                
                                                )
                                              and 
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      ext
                                                   
                                                
                                                (
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ,
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      2
                                                   
                                                
                                                )
                                                =
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      ext
                                                   
                                                
                                                (
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      2
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                ,
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      2
                                                   
                                                
                                                )
                                             .

This, combined with so the hypothesis 
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      ext
                                                   
                                                
                                                (
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ,
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      1
                                                   
                                                
                                                )
                                                =
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      ext
                                                   
                                                
                                                (
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ,
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      2
                                                   
                                                
                                                )
                                             , fulfils this case.

Consider 
                                                
                                                   
                                                      δ
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ⋯
                                                
                                                   
                                                      δ
                                                   
                                                   
                                                      k
                                                   
                                                
                                                
                                                   
                                                      δ
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             , the inductive hypothesis states that up to δ
                                             
                                                k
                                             , external memories are the same. Indicate the memory up to the kth step with m
                                             
                                                k
                                             , the inductive hypothesis states that 
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      ext
                                                   
                                                
                                                (
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      1
                                                   
                                                   
                                                      k
                                                   
                                                
                                                ,
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      1
                                                   
                                                
                                                )
                                                =
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      ext
                                                   
                                                
                                                (
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      2
                                                   
                                                   
                                                      k
                                                   
                                                
                                                ,
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      2
                                                   
                                                
                                                )
                                             .

Two cases arise for 
                                                
                                                   
                                                      δ
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             , one for the readout and one for the writeout. 
                                                
                                                   
                                                      
                                                         
                                                            δ
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      =
                                                      read
                                                      (
                                                      a
                                                      ,
                                                      v
                                                      )
                                                   
                                                
                                                
                                                   Readouts do not change the external memory, so apply the inductive hypothesis and this case holds.

Writeouts do change the external memory, so 
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               ext
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         )
                                                         =
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               ext
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               k
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         )
                                                         [
                                                         a
                                                         ↦
                                                         v
                                                         ]
                                                       and 
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               ext
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         )
                                                         =
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               ext
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               k
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         )
                                                         [
                                                         a
                                                         ↦
                                                         v
                                                         ]
                                                      .

Since the initially-equal memories 
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               ext
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               k
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         )
                                                       and 
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               ext
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               k
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         )
                                                       are changed in the same way, the thesis holds in this case as well.

The proof of Lemma 1 for 
                        
                           
                              Tr
                           
                           
                              S
                           
                        
                      is included in the proof for 
                        
                           
                              Tr
                           
                           
                              L
                           
                        
                      with very small syntactical changes since the labels of 
                        
                           
                              Tr
                           
                           
                              S
                           
                        
                      are a subset of the labels of 
                        
                           
                              Tr
                           
                           
                              L
                           
                        
                     .

We overload the hole-filling notation and allow a hole to be filled by a state 
                        Ω
                        =
                        (
                        p
                        ,
                        r
                        ,
                        f
                        ,
                        m
                        ,
                        s
                        )
                      as follows: 
                        M
                        [
                        Ω
                        ]
                        =
                        (
                        p
                        ,
                        r
                        ,
                        f
                        ,
                        m
                        +
                        
                           
                              m
                           
                           
                              ′
                           
                        
                        ,
                        s
                        )
                     , if 
                        (
                        m
                        ,
                        s
                        )
                        
                           
                           
                              
                                 
                                    ⌢
                                 
                              
                           
                        
                        M
                     . Given an instruction 
                        i
                        ∈
                        I
                     , identify a transition triggered by the execution of that instruction as 
                        
                           
                              →
                           
                           
                              i
                           
                        
                     .
                        Proof
                        By Definition 4 the thesis 
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              ≃
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                            becomes 
                              ∀
                              M
                              .
                              M
                              [
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              ]
                              ⇑
                              
                              ⟺
                              
                              M
                              [
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                              ]
                              ⇑
                           .

The proof is split in two cases, one for each side of the co-implication.
                              
                                 1.
                                 Direction 
                                       ⇒
                                    , so the thesis is 
                                       ∀
                                       M
                                       .
                                       M
                                       [
                                       
                                          
                                             P
                                          
                                          
                                             1
                                          
                                       
                                       ]
                                       ⇑
                                       ⇒
                                       M
                                       [
                                       
                                          
                                             P
                                          
                                          
                                             2
                                          
                                       
                                       ]
                                       ⇑
                                    .

Apply the definition of contextual equivalence (Definition 4) and the thesis becomes 
                                       ∀
                                       M
                                       .
                                       M
                                       [
                                       
                                          
                                             Ω
                                          
                                          
                                             0
                                          
                                       
                                       (
                                       
                                          
                                             P
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       ]
                                       ⇑
                                       ⇒
                                       M
                                       [
                                       
                                          
                                             Ω
                                          
                                          
                                             0
                                          
                                       
                                       (
                                       
                                          
                                             P
                                          
                                          
                                             2
                                          
                                       
                                       )
                                       ]
                                       ⇑
                                    .

Let 
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                       
                                       =
                                       M
                                       [
                                       
                                          
                                             Ω
                                          
                                          
                                             0
                                          
                                       
                                       (
                                       
                                          
                                             P
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       ]
                                     and 
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                       
                                       =
                                       M
                                       [
                                       
                                          
                                             Ω
                                          
                                          
                                             0
                                          
                                       
                                       (
                                       
                                          
                                             P
                                          
                                          
                                             2
                                          
                                       
                                       )
                                       ]
                                    .

The thesis is 
                                       ∀
                                       M
                                       .
                                       ∀
                                       n
                                       ∈
                                       N
                                       .
                                       ∃
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       .
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                       
                                       
                                          
                                             →
                                          
                                          
                                             n
                                          
                                       
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                          
                                             ′
                                          
                                       
                                       ⇒
                                       ∀
                                       m
                                       ∈
                                       N
                                       .
                                       ∃
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                       .
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                       
                                       
                                          
                                             →
                                          
                                          
                                             m
                                          
                                       
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                          
                                             ′
                                          
                                       
                                    .

The proof proceeds by induction on m.
                                       
                                          Base case: m=0.
                                          Straightforward: 
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      2
                                                   
                                                
                                                
                                                   
                                                      →
                                                   
                                                   
                                                      0
                                                   
                                                
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      2
                                                   
                                                
                                             .

The thesis is: 
                                                ∃
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      2
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                .
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      2
                                                   
                                                
                                                
                                                   
                                                      →
                                                   
                                                   
                                                      h
                                                      +
                                                      1
                                                   
                                                
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      2
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             .

The inductive hypothesis (IH) is: 
                                                ∀
                                                M
                                                .
                                                ∀
                                                n
                                                ∈
                                                N
                                                .
                                                ∃
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      1
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                .
                                                M
                                                [
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      0
                                                   
                                                
                                                (
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      1
                                                   
                                                
                                                )
                                                ]
                                                
                                                   
                                                      →
                                                   
                                                   
                                                      n
                                                   
                                                
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      1
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                ⇒
                                                M
                                                [
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      0
                                                   
                                                
                                                (
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      2
                                                   
                                                
                                                )
                                                ]
                                                
                                                   
                                                      →
                                                   
                                                   
                                                      h
                                                   
                                                
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      2
                                                   
                                                   
                                                      h
                                                   
                                                
                                             .

By IH we have that: 
                                                ∃
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      1
                                                   
                                                
                                                .
                                                M
                                                [
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      0
                                                   
                                                
                                                (
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      1
                                                   
                                                
                                                )
                                                ]
                                                
                                                   
                                                      →
                                                   
                                                   
                                                      h
                                                   
                                                
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      1
                                                   
                                                   
                                                      h
                                                   
                                                
                                                
                                                   
                                                      →
                                                   
                                                   
                                                      n
                                                      −
                                                      h
                                                   
                                                
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      1
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             .

Let 
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      1
                                                   
                                                   
                                                      h
                                                   
                                                
                                                =
                                                (
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ,
                                                …
                                                )
                                              and 
                                                
                                                   
                                                      Ω
                                                   
                                                   
                                                      2
                                                   
                                                   
                                                      h
                                                   
                                                
                                                =
                                                (
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ,
                                                …
                                                )
                                             .

There are two cases based on p
                                             1 and p
                                             2: both p
                                             1 and p
                                             2 are in the protected partition (1a) or in the unprotected one (1b).
                                                
                                                   (a)
                                                   
                                                      
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         ⊢
                                                         protected
                                                         (
                                                         
                                                            
                                                               p
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         )
                                                       and 
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         ⊢
                                                         protected
                                                         (
                                                         
                                                            
                                                               p
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         )
                                                      .

This case relies on the trace semantics rules to say that either P
                                                      1 and P
                                                      2 produce the same label, or they diverge; in both cases there is a corresponding reduction in the operational semantics.

There are two cases: either both programs will perform another action 
                                                         δ
                                                         !
                                                       (1(a)i), or not (1(a)ii).
                                                         
                                                            i.
                                                            
                                                               
                                                                  ∃
                                                                  δ
                                                                  !
                                                                  .
                                                                  ∥
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                     
                                                                        h
                                                                     
                                                                  
                                                                  ∥
                                                                  
                                                                     
                                                                        
                                                                     
                                                                  
                                                                  ∥
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                     
                                                                        
                                                                           
                                                                              h
                                                                           
                                                                           
                                                                              ′
                                                                           
                                                                        
                                                                     
                                                                  
                                                                  ∥
                                                               .

By hypothesis 
                                                                  
                                                                     
                                                                        P
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        ≃
                                                                     
                                                                     
                                                                        T
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        P
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                               , 
                                                                  ∥
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                     
                                                                        h
                                                                     
                                                                  
                                                                  ∥
                                                                  
                                                                     
                                                                        
                                                                     
                                                                  
                                                                  ∥
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                     
                                                                        
                                                                           
                                                                              h
                                                                           
                                                                           
                                                                              ′
                                                                           
                                                                        
                                                                     
                                                                  
                                                                  ∥
                                                               .

This, in conjunction with IH, implies the thesis 
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        →
                                                                     
                                                                     
                                                                        h
                                                                        +
                                                                        1
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                     
                                                                        ′
                                                                     
                                                                  
                                                               .

Note that 
                                                                  δ
                                                                  !
                                                                cannot be a √, as this violates the hypothesis 
                                                                  ∀
                                                                  n
                                                                  ∈
                                                                  N
                                                                  .
                                                                  M
                                                                  [
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        0
                                                                     
                                                                  
                                                                  ]
                                                                  (
                                                                  
                                                                     
                                                                        P
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                  
                                                                  )
                                                                  ]
                                                                  
                                                                     
                                                                        →
                                                                     
                                                                     
                                                                        n
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                     
                                                                        ′
                                                                     
                                                                  
                                                               .


                                                               
                                                                  ∄
                                                                  δ
                                                                  !
                                                                  .
                                                                  ∥
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                     
                                                                        h
                                                                     
                                                                  
                                                                  ∥
                                                                  
                                                                     
                                                                        
                                                                     
                                                                  
                                                                  ∥
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                     
                                                                        
                                                                           
                                                                              h
                                                                           
                                                                           
                                                                              ′
                                                                           
                                                                        
                                                                     
                                                                  
                                                                  ∥
                                                               .

Let 
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                     
                                                                        h
                                                                     
                                                                  
                                                                  =
                                                                  (
                                                                  
                                                                     
                                                                        p
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     
                                                                        r
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     
                                                                        f
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                  
                                                                  ,
                                                                  m
                                                                  +
                                                                  
                                                                     
                                                                        m
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     
                                                                        s
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                  
                                                                  )
                                                                and 
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                     
                                                                        h
                                                                     
                                                                  
                                                                  =
                                                                  (
                                                                  
                                                                     
                                                                        p
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     
                                                                        r
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     
                                                                        f
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                                  ,
                                                                  m
                                                                  +
                                                                  
                                                                     
                                                                        m
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     
                                                                        s
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                                  )
                                                               .

In this case, Ω
                                                               2
                                                               
                                                                  h
                                                                does not terminate, since it does not produce a √label, so it computes, generating τ actions.

By inspecting rules for generating τ in traces (the only possible rule that applies in this case), we have that 
                                                                  
                                                                     
                                                                        m
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                  
                                                                  (
                                                                  
                                                                     
                                                                        p
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                  
                                                                  )
                                                                  =
                                                                  
                                                                     
                                                                        i
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                  
                                                                  ∈
                                                                  I
                                                                and 
                                                                  
                                                                     
                                                                        m
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                                  (
                                                                  
                                                                     
                                                                        p
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                                  )
                                                                  =
                                                                  
                                                                     
                                                                        i
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                                  ∈
                                                                  I
                                                               .

The thesis holds because Ω
                                                               2 can always make a step for instruction i
                                                               2, so 
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        →
                                                                     
                                                                     
                                                                        h
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                     
                                                                        h
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        →
                                                                     
                                                                     
                                                                        
                                                                           
                                                                              i
                                                                           
                                                                           
                                                                              2
                                                                           
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        Ω
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                     
                                                                        ′
                                                                     
                                                                  
                                                               .


                                                      
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         ⊢
                                                         unprotected
                                                         (
                                                         
                                                            
                                                               p
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         )
                                                       and 
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         ⊢
                                                         unprotected
                                                         (
                                                         
                                                            
                                                               p
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         )
                                                      .

In this case we need to prove that, for whatever computation was done so far, P
                                                      1 and P
                                                      2 end up with a program counter in the same location in their unprotected memory. We rely on Lemma 1 to state that, if P
                                                      1 and P
                                                      2 have jumped inside the protected partition and then back outside, their unprotected memory is still the same.

By IH 
                                                         ∃
                                                         l
                                                         ≤
                                                         h
                                                         .
                                                         M
                                                         [
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               P
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         )
                                                         ]
                                                         
                                                            
                                                               →
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                       and 
                                                         ∥
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               P
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         )
                                                         ∥
                                                       
                                                      
                                                         
                                                            
                                                               
                                                            
                                                         
                                                         ∥
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         ∥
                                                      .

By hypothesis 
                                                         
                                                            
                                                               P
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         
                                                            
                                                               ≃
                                                            
                                                            
                                                               T
                                                            
                                                         
                                                         
                                                            
                                                               P
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                      , 
                                                         ∃
                                                         l
                                                         ≤
                                                         h
                                                         .
                                                         M
                                                         [
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               P
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         )
                                                         ]
                                                         
                                                            
                                                               →
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                      .

Additionally, 
                                                         ∥
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               P
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         )
                                                         ∥
                                                         
                                                            
                                                               
                                                            
                                                         
                                                         ∥
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         ∥
                                                      .

By Lemma 1, 
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         =
                                                         (
                                                         
                                                            
                                                               p
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               r
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               f
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               M
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         )
                                                       and 
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         =
                                                         (
                                                         
                                                            
                                                               p
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               r
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               f
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               M
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         )
                                                       (if α does not exist and 
                                                         
                                                            
                                                               α
                                                            
                                                            
                                                               ¯
                                                            
                                                         
                                                       is the empty list, there is no need to apply Lemma 1).

Additionally, 
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         
                                                            
                                                               →
                                                            
                                                            
                                                               h
                                                               −
                                                               l
                                                            
                                                         
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                       and 
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                         
                                                            
                                                               →
                                                            
                                                            
                                                               h
                                                               −
                                                               l
                                                            
                                                         
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                      .

Since 
                                                         
                                                            
                                                               M
                                                            
                                                            
                                                               l
                                                            
                                                         
                                                       is the same for both P
                                                      1 and P
                                                      2, the 
                                                         (
                                                         h
                                                         −
                                                         l
                                                         )
                                                      -steps they perform in unprotected memory are the same for Ω
                                                      
                                                         l
                                                      
                                                      1 and Ω
                                                      
                                                         l
                                                      
                                                      2.

Thus 
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         =
                                                         (
                                                         
                                                            
                                                               p
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               r
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               f
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               M
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         )
                                                       and 
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         =
                                                         (
                                                         
                                                            
                                                               p
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               r
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               f
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               M
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               m
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         )
                                                      .

As stated in Section 3.3 
                                                      
                                                         p
                                                         ∈
                                                         dom
                                                         (
                                                         
                                                            
                                                               M
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         )
                                                       implies that 
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         ⊢
                                                         unprotected
                                                         (
                                                         
                                                            
                                                               p
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         )
                                                       and 
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         ⊢
                                                         unprotected
                                                         (
                                                         
                                                            
                                                               p
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         )
                                                      .

By hypothesis 
                                                         ∀
                                                         n
                                                         ∈
                                                         N
                                                         .
                                                         M
                                                         [
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               P
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         )
                                                         ]
                                                         
                                                            
                                                               →
                                                            
                                                            
                                                               n
                                                            
                                                         
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      : we have that 
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         
                                                            
                                                               →
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                       and that 
                                                         
                                                            
                                                               M
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         (
                                                         
                                                            
                                                               p
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         )
                                                         ≅
                                                         i
                                                         ∈
                                                         I
                                                      .

This implies the thesis: 
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         
                                                            
                                                               →
                                                            
                                                            
                                                               h
                                                               +
                                                               1
                                                            
                                                         
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                       since 
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         
                                                            
                                                               →
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               h
                                                            
                                                         
                                                         
                                                            
                                                               →
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      .


                                    
                                       ⇐
                                     As in case 1, mutatis mutandis.

Completeness is equivalently stated as 
                        
                           
                              P
                           
                           
                              1
                           
                        
                        
                           
                              
                           
                        
                        
                           
                              P
                           
                           
                              2
                           
                        
                        ⇒
                        
                           
                              P
                           
                           
                              1
                           
                        
                        ≄
                        
                           
                              P
                           
                           
                              2
                           
                        
                     .
                        Proof Sketch
                        This is proven by devising an algorithm that takes as input two different traces 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          1
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                            and 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                            and the two programs P
                           1 and P
                           2 generating them and outputs a program P that interacts with P
                           1 and P
                           2 and is able to differentiate between them [10,11,37]. The algorithm produces unprotected code that performs all ?-decorated actions in the traces and then terminates with result 1 or diverges, based on the program it is interacting with after the different 
                              !
                           -decorated action.

The two different traces are generated as follows. Since 
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              
                                 
                                    
                                 
                              
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                           , we have that 
                              Tr
                              (
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              )
                              ≠
                              Tr
                              (
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                              )
                           , thus there exists a trace 
                              
                                 
                                    α
                                 
                                 
                                    ¯
                                 
                              
                            that belongs to either only 
                              Tr
                              (
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              )
                            or only 
                              Tr
                              (
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                              )
                           . Assume wlog that 
                              
                                 
                                    α
                                 
                                 
                                    ¯
                                 
                              
                              ∈
                              Tr
                              (
                              
                                 
                                    P
                                 
                                 
                                    1
                                 
                              
                              )
                           . The trace 
                              
                                 
                                    α
                                 
                                 
                                    ¯
                                 
                              
                            can be split in two parts 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          s
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                            (the common prefix) and 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          d
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                            such that 
                              
                                 
                                    α
                                 
                                 
                                    ¯
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          s
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          d
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                           , and so that there exists a trace 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                              ∈
                              Tr
                              (
                              
                                 
                                    P
                                 
                                 
                                    2
                                 
                              
                              )
                            that can be split in two parts 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          s
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                            and 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          d
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                            such that 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          s
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          d
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                            and 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          d
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                              ≠
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          d
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                           . Trace 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                            always exists, it could be an empty trace, it could be composed by an empty 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          s
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                            and, possibly, by an empty 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          d
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                           . The traces input for the algorithm are 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          1
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          s
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          d
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                            and 
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          s
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          d
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                           .

Assume that there is always enough memory to store the algorithm; call the algorithm P. In P there must be four functions in order to set the flags to the all combinations. These function are of the form:
                              
                                 
                                    
                                       •
                                    
                                 
                                 store 
                                       
                                          
                                             r
                                          
                                          
                                             1
                                          
                                       
                                     and 
                                       
                                          
                                             r
                                          
                                          
                                             2
                                          
                                       
                                     in unprotected memory;

set 
                                       
                                          
                                             r
                                          
                                          
                                             1
                                          
                                       
                                     and 
                                       
                                          
                                             r
                                          
                                          
                                             2
                                          
                                       
                                     to the right values that set the flag to the desired combination (e.g., for 
                                       SF
                                       =
                                       0
                                    ; 
                                       ZF
                                       =
                                       1
                                    , set 
                                       
                                          
                                             r
                                          
                                          
                                             1
                                          
                                       
                                       =
                                       1
                                     and 
                                       
                                          
                                             r
                                          
                                          
                                             2
                                          
                                       
                                       =
                                       1
                                       )
                                    ;

execute 
                                       cmp
                                       
                                       
                                          
                                             r
                                          
                                          
                                             1
                                          
                                       
                                       
                                       
                                          
                                             r
                                          
                                          
                                             2
                                          
                                       
                                    ;

restore 
                                       
                                          
                                             r
                                          
                                          
                                             1
                                          
                                       
                                     and 
                                       
                                          
                                             r
                                          
                                          
                                             2
                                          
                                       
                                     to the corresponding previous values;


                                    
                                       ret
                                    .

The algorithm keeps track of where to write instructions in P with a stack: the current address stack c. Initially, the top of stack c is set to p
                           0 – the initial value of the program counter.

The algorithm scans the traces 
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          1
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                            and 
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    ¯
                                 
                              
                           . By construction, each even-numbered label is 
                              !
                           -decorated; each odd-numbered label is ?-decorated. The algorithm is split in two subroutines based on what kind of actions it is examining. Each subroutine analyses one action from each trace and then calls the other subroutine on the following actions until the differentiation is achieved; in that case the algorithm terminates. 
                              ?-decorated actions.
                              
                                 These actions are generated by the unprotected code. The algorithm must output a P that generates those traces. Thus, at location c, the algorithm writes code depending on what action is being considered. 
                                       
                                          
                                             call
                                             
                                             p
                                             
                                             (
                                             r
                                             ,
                                             f
                                             )
                                             ?
                                          
                                       
                                       
                                          Firstly, the algorithm writes a call to the function that sets the flags to f. Then the top of stack c is incremented by 1. Then, all 12 registers are set to the values of r, thus given that the values of register i in r are v
                                             
                                                i
                                             , the following instruction is written: 
                                                movi
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      i
                                                   
                                                
                                                
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      i
                                                   
                                                
                                              for all i=0…11. If the value to be written in a register is larger than the constant allowed by 
                                                movi
                                             , an 
                                                add
                                              instruction is used. Then the top of c is incremented by 12 (or more, if 
                                                add
                                              instructions are used). Then based on which register contains the value p that is where the call is directed, instruction 
                                                call
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      p
                                                   
                                                
                                              is written. Then the top of c is incremented by 1.

As in the previous step, the algorithm sets flags and registers to the desired values. Then instruction 
                                                ret
                                              is written. Then the top of c is incremented by 1.

These actions are generated by protected code. 
                                       callbacks.
                                       
                                          If both actions are of the form 
                                                call
                                                
                                                p
                                                
                                                (
                                                r
                                                ,
                                                f
                                                )
                                                ?
                                             , then p is pushed on top of the stack c.

If both actions are of the form 
                                                ret
                                                
                                                p
                                                
                                                (
                                                r
                                                ,
                                                f
                                                )
                                                ?
                                             , then the top of the stack c is popped.

The algorithm adds no code to P. In this case we are assured that control will jump back to the code because protected code does not write in an executable part of the unprotected memory.

If both actions are of the form 
                                                read
                                                (
                                                a
                                                ,
                                                v
                                                )
                                             , then the following instructions are written before other code at address c: 
                                                movi
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      0
                                                   
                                                
                                              
                                             a; 
                                                movi
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      1
                                                   
                                                
                                              
                                             v; 
                                                movs
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      0
                                                   
                                                
                                             . These instructions ensure that address a contains value v.

If the labels are different, then the algorithm writes the differentiating code at address c in P. Differences in the labels can be of these types: 
                                       different length.
                                       
                                          Thus one label is 
                                                √
                                              and the other one is 
                                                α
                                                ≠
                                                √
                                             . In this case, given that α is generated by program P
                                             
                                                i
                                             , the algorithm writes diverging code at the address indicated by c.

Assume that 
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      1
                                                   
                                                
                                                =
                                                ret
                                                
                                                p
                                                
                                                (
                                                r
                                                ,
                                                f
                                                )
                                                !
                                              and 
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      2
                                                   
                                                
                                                =
                                                call
                                                
                                                10
                                                
                                                (
                                                r
                                                ,
                                                f
                                                )
                                                !
                                             . Then the algorithm writes instructions 
                                                movi
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      0
                                                   
                                                
                                                
                                                1
                                             ; 
                                                halt
                                              at c and diverging code at address 10.

Assume that 
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      1
                                                   
                                                
                                                =
                                                write
                                                (
                                                a
                                                ,
                                                v
                                                )
                                                .
                                                δ
                                                !
                                              and 
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      2
                                                   
                                                
                                                =
                                                δ
                                                !
                                             . In this case, before executing the protected code that generates that trace, the algorithm writes value u, different from v, at address a. Then, after the protected code has performed 
                                                δ
                                                !
                                             , the value in a is read and compared to u. If they are the same, then instructions 
                                                movi
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      0
                                                   
                                                
                                                
                                                1
                                             ; 
                                                halt
                                              are written at c, otherwise diverging code is written there.

Other cases are similar.

Assume that 
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      1
                                                   
                                                
                                                =
                                                ret
                                                
                                                p
                                                
                                                (
                                                r
                                                ;
                                                0
                                                ,
                                                1
                                                )
                                                !
                                              and 
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      2
                                                   
                                                
                                                =
                                                ret
                                                
                                                p
                                                
                                                (
                                                r
                                                ;
                                                0
                                                ,
                                                0
                                                )
                                                !
                                             . Then the differentiating code is the following: perform a jump (via 
                                                jl
                                              in this case since flag SF bears a different value in the two traces) to an address a in case the flag is 1. At address a, instructions 
                                                movi
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      0
                                                   
                                                
                                                
                                                1
                                             ; 
                                                halt
                                              are written. Right after the jump, diverging code written.

Assume that 
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      1
                                                   
                                                
                                                =
                                                ret
                                                
                                                p
                                                
                                                (
                                                1
                                                ,
                                                …
                                                ;
                                                f
                                                )
                                                !
                                              and 
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      2
                                                   
                                                
                                                =
                                                ret
                                                
                                                p
                                                
                                                (
                                                2
                                                ,
                                                …
                                                ;
                                                f
                                                )
                                                !
                                             . Then the differentiating code is the following: 
                                                movi
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                1
                                             ; 
                                                sub
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      0
                                                   
                                                
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      1
                                                   
                                                
                                             . Now the problem is reduced to different values in flags, so the previous approach can be used.

Assume that 
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      1
                                                   
                                                
                                                =
                                                call
                                                
                                                10
                                                
                                                (
                                                r
                                                ;
                                                f
                                                )
                                                !
                                              and 
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      2
                                                   
                                                
                                                =
                                                call
                                                
                                                20
                                                
                                                (
                                                r
                                                ;
                                                f
                                                )
                                                !
                                             . Then the algorithm writes instructions 
                                                movi
                                                
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      0
                                                   
                                                
                                                
                                                1
                                                ;
                                                
                                                halt
                                              at address 10 and diverging code at address 20.

Assume that 
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      1
                                                   
                                                
                                                =
                                                write
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ,
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      1
                                                   
                                                
                                                )
                                                .
                                                δ
                                                !
                                              and 
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      2
                                                   
                                                
                                                =
                                                write
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ,
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      2
                                                   
                                                
                                                )
                                                .
                                                δ
                                                !
                                             . The same procedure stated in the last paragraph for the previous point is applied.

Concerning readouts, they are included in the traces only if they are followed by different actions. Readouts that are not followed by differentactions satisfy the non-interference judgment 
                                                NI
                                                (
                                                ·
                                                )
                                             , they are non-interfering. On the other hand, readouts that are followed by different actions do not satisfy that judgment, they are interfering. Function 
                                                StripNI
                                                (
                                                ·
                                                )
                                              (Fig. 16), which is used to accumulate labels in Rule Trace-l-action, ensures that all non-interfering readout labels are eliminated from traces. So, readouts that appear in traces are interfering and thus followed by different actions. It is that action that determines what the code generated by the algorithm is, no action is undertaken for readouts.

@&#REFERENCES@&#

