@&#MAIN-TITLE@&#A matheuristic for the Team Orienteering Arc Routing Problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We study the Team Orienteering Arc Routing Problem (TOARP).


                        
                        
                           
                           We propose a matheuristic algorithm to solve the problem.


                        
                        
                           
                           We make an extensive computational study on a large set of instances.


                        
                        
                           
                           We compare the results of the matheuristic with the optimal solutions.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Team Orienteering Problem

Arc routing problem

Routing problems with profits

Matheuristic

@&#ABSTRACT@&#


               
               
                  In the Team Orienteering Arc Routing Problem (TOARP) the potential customers are located on the arcs of a directed graph and are to be chosen on the basis of an associated profit. A limited fleet of vehicles is available to serve the chosen customers. Each vehicle has to satisfy a maximum route duration constraint. The goal is to maximize the profit of the served customers. We propose a matheuristic for the TOARP and test it on a set of benchmark instances for which the optimal solution or an upper bound is known. The matheuristic finds the optimal solutions on all, except one, instances of one of the four classes of tested instances (with up to 27 vertices and 296 arcs). The average error on all instances for which the optimal solution is available is 0.67 percent.
               
            

@&#INTRODUCTION@&#

In arc routing problems customers are located on arcs. The basic problems of this class are the Chinese Postman Problem (CPP), where all edges or arcs have to be traversed, and the Rural Postman Problem (RPP), where only some edges or arcs are required to be traversed, and routes of minimum cost have to be identified. For a formal definition of the CPP and RPP the reader is referred to the book edited by Dror (2000). There are several applications of arc routing problems where the edges or arcs to be traversed are not given and have instead to be selected on the basis of a profit. In fact, for any arc routing problem with given customers to traverse a version where customers have to be chosen is likely to have interesting applications. Typical applications of arc routing problems include road maintenance, garbage collection, and mail delivery. In all these cases, if it is not possible to traverse all customers in a day because vehicles, people or time are not sufficient, one has to choose the most valuable customers to serve.

In the routing literature where customers are located on vertices, the problems where the customers have to be selected on the basis of their profit are called routing problems with profits (see Archetti, Speranza, & Vigo, 2014; Feillet, Dejax, & Gendreau, 2005a; Vansteenwegen, Souffriau, & Van Oudheusden, 2011). The arc routing counterpart of this class is called arc routing problems with profits. A recent survey on arc routing problems with profits can be found in Archetti and Speranza (2014a). We refer the reader to this survey for the description of the problems that have been studied till now in the literature. It is important to mention that, as pointed out in Archetti and Speranza (2014a), the number of papers dealing with arc routing problems with profits is still very limited, especially if compared with the node routing counterpart. More specifically, the contributions related to the study of problems dealing with more than one vehicle are very few. In fact, the only problems that have been studied (apart from the TOARP that is studied in this paper) are the Profitable Arc Tour Problem (PATP) and the Undirected Capacitated Arc Routing Problem with Profits (UCARPP). The PATP was introduced in Feillet, Dejax, and Gendreau (2005b) and is the problem of finding a set of routes maximizing the difference between the total collected profit and the travel cost such that the travel time of each route does not exceed a given threshold. No limit on the number of routes is given. In Feillet et al. (2005b) an exact algorithm is proposed based on the branch-and-price scheme while in Euchi and Chabchoub (2011) different heuristic algorithms are developed. The UCARPP was introduced in Archetti, Feillet, Hertz, and Speranza (2010) and is the problem of finding the set of routes that maximizes the total collected profit in such a way that each route satisfies capacity and maximum duration constraints. In Archetti et al. (2010) an exact algorithm and different heuristics are proposed. More recently, the same problem was addressed in Zachariadis and Kiranoudis (2011) where a new and effective heuristic algorithm is presented.

A well studied problem in the class of routing problems with profits is the Team Orienteering Problem (TOP), where a fleet of uncapacitated vehicles is available, with a time duration constraint on each route, and the problem is to select a set of customers to maximize the total profit of the customers served. In this paper we study the arc routing counterpart of the TOP, the Team Orienteering Arc Routing Problem (TOARP), that was introduced in Archetti, Corberán, Plana, Sanchis, and Speranza (2014). In the TOARP, customers with an associated profit are located on arcs and a fleet of vehicles with a time duration constraint on each route is given. The problem consists in choosing the customers and in designing the routes in such a way that the collected profit is maximized. An interesting application of the TOARP is in truck-load transportation, where customers place orders consisting of requests of transportation services from an origin to a destination. Each transportation service requires a full truck going from the corresponding origin location to the corresponding destination. These services can be represented as arcs of a graph that have to be traversed in order to satisfy the corresponding customer requests. Some of the customers are to be served whereas others may be postponed or not served at all. For example, the service of the least profitable customers may be outsourced. In Archetti et al. (2014) an extended polyhedral study for the TOARP is presented. The proposed branch-and-cut algorithm solves instances with up to 100 vertices, 800 arcs, and 4 vehicles to optimality and makes use of the solutions provided by the heuristic described in this paper.

We address the heuristic solution of the TOARP by means of an algorithm that combines a tabu search, to escape from local optima, a diversification phase and the optimal solution of integer linear programming (ILP) models to intensify the search in some areas of the solution space. The combination of a heuristic or metaheuristic scheme with mixed integer linear programming (MILP) models has been recently explored by several authors. A survey is presented by Ball (2011) for combinatorial optimization problems in general while, more recently, in Archetti and Speranza (2014a) a survey focused on routing problems can be found. These heuristics are named in different ways. In the survey (Ball, 2011) they are simply called heuristics based on mathematical programming, in other cases (see Montoya-Torres, Juan, Huatuco, Faulin, & Rodriguez-Verjan, 2012) they go under the generic name of hybrid heuristics. The name matheuristic was created ad hoc for this class of heuristics (see Maniezzo, Stützle, & Voß, 2010) and this is the name we will use in this paper. The main contribution of this paper is the design of a matheuristic for the TOARP where we exploit the benefit of using ILP models in the searching phase. We developed a solution algorithm which combines heuristic operators with the exact solution of different ILP models. These models can be easily implemented and are powerful tools to intensify the search around a promising solution, while typically standard heuristic operators are not as effective or have to be adapted to the problem structure, thus leading to very specialized solution methods. We performed tests on a large set of benchmark and randomly generated instances. The matheuristic finds the optimal solution on 78 percent of the instances for which the optimal solution is known and provides an average error with respect to the optimal solution of 0.67 percent.

The paper is organized as follows. In Section 2 we introduce the TOARP, whereas in Section 3 we describe the general scheme of the matheuristic and its components. The computational results are presented and discussed in Section 4.

The TOARP is defined on a directed graph. In general, the graph is not complete. A numerical value representing the traversal cost or travel time is associated with each arc. Only some of the arcs represent customers. Some customers have to be served, and are called required, whereas some others may be served if beneficial. A profit is associated with each customer of the latter set. We call these customers profitable. A limited fleet of vehicles is available. Each vehicle starts its route at the depot, traverses a set of arcs and ends its route at the depot. Each route cannot exceed a maximum time duration. The goal is to choose a set of the profitable customers and to design the routes of the vehicles in such a way that the required and chosen profitable customers are served, the time duration constraints of the routes are satisfied and the total profit collected is maximized.

More formally, a directed graph G = (V, A) is given, where V = {1, …, n} is the set of vertices and A is the set of arcs. Vertex 1 is the depot, that is the starting and ending vertex of each route. A travel time ca
                      is associated with each arc a ∈ A. Some arcs represent customers. The set AR
                     ⊆A represents customers that have to be served, whereas AP
                     ⊆A represents the set of profitable customers. A nonnegative profit sa
                      is associated with each arc a ∈ AP
                     . A fleet of K vehicles is available. The route of each vehicle cannot exceed a maximum time duration T
                     max. The profit of any profitable customer can be collected by one vehicle at most. The objective of the TOARP is to maximize the total profit collected. A mathematical programming formulation for the TOARP can be found in Archetti et al. (2014).

In this section we present a matheuristic for the solution of the TOARP that we call MAT (MAtheuristic for TOARP).

In the following, we say that a profitable arc is served by a vehicle if the vehicle traverses the arc and collects the corresponding profit. In MAT, there is no distinction between required and profitable arcs. A very large profit is assigned to the arcs in AR
                      and all arcs in AP
                     ∪AR
                      are considered, and called, profitable. Thus, we redefine AP
                      as AP
                     ∪AR
                     . Moreover, the set of arcs A is completed by inserting all arcs between every pair of profitable arcs, plus the depot. Thus, if there is not an arc which links the head of a profitable arc (or the depot) with the tail of another profitable arc (or the depot), then we insert it in A. The cost of the inserted arcs is equal to that of the shortest path.

Before describing the different components of MAT, we introduce some notation and definitions.

The profit S(C) of a set of profitable arcs C⊆AP
                         is the total profit 
                           
                              
                                 ∑
                                 
                                    a
                                    ∈
                                    C
                                 
                              
                              
                                 s
                                 a
                              
                           
                        . We denote by Lr
                         the set of profitable arcs served by route r and by Ar
                         the set of all arcs traversed by route r. The profit S(r) of a route r is defined as the total profit of the profitable arcs served by the route, i.e., S(r) = S(Lr
                        ). The duration 
                           
                              T
                              
                                 (
                                 r
                                 )
                              
                              =
                              
                                 ∑
                                 
                                    a
                                    ∈
                                    
                                       A
                                       r
                                    
                                 
                              
                              
                                 c
                                 a
                              
                           
                         of a route r is its total travel time. A route r is feasible if it starts and ends at the depot and T(r) ≤ T
                        max.

For a set R of routes, 
                           
                              S
                              
                                 (
                                 R
                                 )
                              
                              =
                              
                                 ∑
                                 
                                    r
                                    ∈
                                    R
                                 
                              
                              S
                              
                                 (
                                 r
                                 )
                              
                           
                         is the total profit of the routes in R and 
                           
                              L
                              
                                 (
                                 R
                                 )
                              
                              =
                              
                                 ⋃
                                 
                                    r
                                    ∈
                                    R
                                 
                              
                              
                                 L
                                 r
                              
                           
                         is the set of profitable arcs served by the routes in R.

A solution s is defined as a set of routes such that each profitable arc is served by exactly one route. A solution s is said to be feasible if each route in s is feasible. Although in a solution s any arc (profitable or not) may be traversed more than once, the profit of a profitable arc is collected exactly once. We denote by RP
                        (s) the set of the K most profitable routes in s (or the set of all routes in s if they are less than or equal to K), and RN
                        (s) the set of all remaining routes. The aim of the TOARP is to determine a feasible solution s that maximizes S(RP
                        (s)).

The profitable arcs in L(RN
                        (s)) do not belong to the K most profitable routes in s, but are organized in routes. The reason for keeping these arcs organized into routes is that it is much easier to have a new route with a high profit by inserting profitable arcs in one of the routes in RN
                        (s) than to create a new route from scratch. Although this requires an additional effort with respect to keeping the K most profitable routes only, it turned out to be beneficial to the efficiency of the heuristic. This solution structure was used effectively in the solution of other routing problems with profits like UCARPP (see Archetti et al., 2010), the TOP (see Archetti, Hertz, & Speranza, 2007), the Capacitated Team Orienteering Problem and the Capacitated Profitable Tour Problem (see Archetti, Feillet, Hertz, & Speranza, 2009).

In a solution s, we denote by ra
                        (s) the route serving the profitable arc a. For a profitable arc a and a route r ≠ ra
                        (s), we denote by r + a the route obtained by adding a to r. Similarly, given a route ra
                        (s) and a profitable arc a served by ra
                        (s), we denote ra
                        (s) − a the route obtained from ra
                        (s) by removing a. The insertion of an arc a into a route r is performed by means of the Add operator introduced by Hertz, Laporte, and Mittaz (2000) for the Undirected Capacitated Arc Routing Problem (UCARP), adapted to the case of a directed graph. The removal of arc a from route ra
                        (s) is performed by means of the Drop operator by Hertz et al. (2000) for the UCARP, adapted to the case of a directed graph.

MAT is a matheuristic which combines a tabu search and a diversification phase with the exact solution of ILP models. A tabu search phase is carried out to guide the search in the neighborhood of the current solution. The ILP models are used to intensify the search with the aim to improve the solution found during the tabu search phase. At the end of the tabu search phase, a diversification step, called jump, is performed to move the search to a completely different part of the solution space. A general scheme of MAT is given in Algorithm 1
                        .

We now describe in detail the procedures that compose MAT.

The initial solution is constructed through a greedy procedure that ranks the arcs in order of non-decreasing profit. The procedure then builds the routes by sequentially inserting arcs in each route and creating a new route when the time constraint is violated. When all the profitable arcs are inserted into a route, the K most profitable routes compose the initial set RP
                        (s) and the remaining routes the initial set RN
                        (s).

Once the initial solution has been obtained, a tabu search is executed that uses the following three moves:

                           
                              •
                              
                                 1-move: In a 1-move, a profitable arc a is moved from its route ra
                                 (s) to a route r ≠ ra
                                 (s). Route r may be an empty route. Hence, ra
                                 (s) and r are replaced by ra
                                 (s) − a and r + a, respectively.


                                 swap-move: Let a and a′ be two profitable arcs in two different routes. A swap-move consists in replacing ra
                                 (s) and 
                                    
                                       
                                          r
                                          
                                             a
                                             ′
                                          
                                       
                                       
                                          (
                                          s
                                          )
                                       
                                    
                                  by (ra
                                 (s) − a) + a′ and 
                                    
                                       (
                                       
                                          r
                                          
                                             a
                                             ′
                                          
                                       
                                       
                                          (
                                          s
                                          )
                                       
                                       −
                                       
                                          a
                                          ′
                                       
                                       )
                                       +
                                       a
                                       ,
                                    
                                  respectively.


                                 sequence move: Let I be a sequence of profitable arcs served consecutively in a route r ∈ RN
                                 (s). Choose a route r′ ∈ RP
                                 (s). For each a ∈ I, remove a from ra
                                 (s) and insert it in r′. If T(r′) > T
                                 max, then choose a sequence I′ of profitable arcs served in r′ such that S(I′) < S(I). For each a ∈ I′, remove a from 
                                    
                                       
                                          r
                                          a
                                          ′
                                       
                                       
                                          (
                                          s
                                          )
                                       
                                    
                                  and insert it in a route r′′ ∈ RN
                                 (s).

The sequence move may be seen as a combination of 1-moves or swap-moves. The sequence move performs a more intensive search around the current solution than the search performed through the application of the 1-move and the swap-move only. However, applying the sequence move at every iteration may be too cumbersome. Thus, it is performed only every 5 iterations.

A temporary tabu status forbids profitable arcs to be removed from routes in which they have been previously inserted. When arc a is inserted in route r, it is tabu to remove it for a number of iterations equal to:

                           
                              (1)
                              
                                 
                                    l
                                    =
                                    
                                       
                                          λ
                                          σ
                                          /
                                          ω
                                       
                                    
                                    +
                                    
                                       |
                                       
                                          A
                                          P
                                       
                                       |
                                    
                                    *
                                    
                                       K
                                    
                                    /
                                    2
                                    ω
                                    ,
                                 
                              
                           
                        where λ = |V|*|R|, with R the set of routes in the initial solution, σ a random number in [0, 1] and ω is a positive integer number. This formula links the number of tabu iterations to the number of vertices and profitable arcs, and to the number of routes. The square root on λ and K is needed in order to avoid the value of l being too high and get the tabu search stuck in a solution where all neighbor solutions are tabu. The parameter ω is used to determine the tabu tenure and it is set to 4 in our experiments. In Table 8 we present results on tests where the value of ω is set to 2 and we show that the results are worse. Parameter σ is introduced in order to have a certain variability in the number of tabu iterations.

A hierarchical function is used to evaluate the solution quality which considers the following terms, in the order in which we describe them: the total profit S(RP
                        (s)) of the routes in RP
                        (s), the total duration 
                           
                              
                                 ∑
                                 
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                              T
                              
                                 (
                                 r
                                 )
                              
                           
                         of the routes in RP
                        (s), the number of nonempty routes in s and, finally, the total duration 
                           
                              
                                 ∑
                                 
                                    r
                                    ∈
                                    
                                       R
                                       N
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                              T
                              
                                 (
                                 r
                                 )
                              
                           
                         of the routes in RN
                        (s).

The tabu search phase terminates after 400 iterations without improvement. This value allows us to keep this phase quite short and to perform a large number of jumps to diversify the search.

The Route improvement (s) phase is aimed at optimizing the order of traversal of the arcs in the routes in s. For each route of the current best solution s, this procedure is aimed at reducing the corresponding duration and, at the same time, serving all profitable arcs currently served by the route. This phase is particularly important when the routes are long, i.e., when they traverse a large number of arcs, which is the case in most of the tested instances.

The procedure works as follows. Given a new best solution s, we first reduce the time duration of the routes in RP
                        (s) to increase the probability of inserting additional profitable arcs and then apply the sequence move. To reduce the time duration of the routes in s, for each route r in RP
                        (s) we solve an Asymmetric Traveling Salesman Problem (ATSP) where each vertex of the graph corresponds to a sequence of profitable arcs which are served consecutively by route r. The depot is also a vertex of the graph. The cost of arc (i, j) is the cost of the shortest path between the head of the last profitable arc of the sequence represented by vertex i and the tail of the first profitable arc of the sequence represented by vertex j. An example of an ATSP instance generated by a TOARP route is shown in Fig. 1
                         where the square vertex is the depot while the arcs in bold are the profitable arcs served by the route. Numbers close to each arc represent the corresponding cost.

The ATSP is solved using the Miller–Tucker–Zemlin formulation (Miller, Tucker, & Zemlin, 1960), which has a polynomial number of constraints. After that, the sequence move is applied iteratively as long as it improves the current solution .

A maximum time of 30 seconds is assigned to the solution of the ATSP. We decided to give such a short computing time as the procedure is applied very often. As the routes are often formed by a large number of profitable arcs, it may happen that the optimal solution of the ATSP is not found within 30 seconds. In this case, the best feasible solution found is accepted. We tested also the use of the heuristic algorithm of Lin and Kernighan (1973) to solve the ATSP. However, this leads to worse results.

The Intensification phase (s) is applied once the Internal tabu search (s) phase is terminated and before performing a jump. The aim of the jump is to destroy the current solution and to build a new and completely different solution on which the Internal tabu search (s) is started again. A detailed description of the Jump (k, s) procedure is provided in Section 3.7. The aim of the Intensification phase (s) is to intensively exploit the possibility of improving the current best solution.

The Intensification phase (s) consists in the solution of two ILP models which differ in terms of aim and structure. The first ILP model, which we call Route selection model, aims at selecting the K most profitable routes among the set 
                           R
                         of all the routes generated so far. Thus, the solution space is defined by the entire set 
                           R
                         of routes generated by the algorithm (which may be quite large). The second model, which we call Profit improvement model, focuses on the best solution s found so far and aims at increasing the profit collected by the routes in RP
                        (s) by inserting profitable arcs or sequences of profitable arcs and removing less profitable arcs.

Let us now describe the two models in more detail. Let parameter bar
                         be 1 if the profitable arc a is traversed by route 
                           
                              r
                              ∈
                              R
                              ,
                           
                         and 0 otherwise. Route selection makes use of binary variables za
                        , where za
                         = 1 if profitable arc a is served, and 0 otherwise, and variables xr
                        , where xr
                         = 1 if route 
                           
                              r
                              ∈
                              R
                           
                         is used, and 0 otherwise. The Route selection model is as follows:

                           
                              
                                 
                                    Maximize
                                    
                                    
                                       ∑
                                       
                                          a
                                          ∈
                                          
                                             A
                                             P
                                          
                                       
                                    
                                    
                                       s
                                       a
                                    
                                    
                                       z
                                       a
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                    
                                       b
                                       
                                          a
                                          r
                                       
                                    
                                    
                                       x
                                       r
                                    
                                    ≥
                                    
                                       z
                                       a
                                    
                                    
                                    a
                                    
                                    ∈
                                    
                                    
                                       A
                                       P
                                    
                                 
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                    
                                       x
                                       r
                                    
                                    ≤
                                    K
                                 
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       x
                                       r
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    r
                                    
                                    ∈
                                    
                                    R
                                 
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    
                                       z
                                       a
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    a
                                    
                                    ∈
                                    
                                    
                                       A
                                       P
                                    
                                    .
                                 
                              
                           
                        
                     

The objective function aims at maximizing the total collected profit. Constraints (2) establish that at least a route must be chosen that traverses a served arc while (3) limits the number of routes that can be selected.

The Profit improvement model tries to insert in RP
                        (s) single profitable arcs or pairs of profitable arcs. For each profitable arc a, the insertion cost of a in r is calculated as the detour cost for adding a to r. The cost of inserting two profitable arcs a and a′ in route r is calculated as the minimum between the cost of going from r to a, from a to a′ and from a′ to r and the cost of going from r to a′, from a′ to a and from a to r. The insertion cost of the pair of arcs a and a′ may be in general lower than the sum of the insertion costs of the single arcs a and a′, and this happens especially when a and a′ are close to each other. This is the reason why we consider explicitly the insertion of pairs of arcs. A pair of profitable arcs is considered for insertion only if the distance between the two arcs is lower than a given threshold T set to

                           
                              
                                 
                                    T
                                    =
                                    
                                       
                                          
                                             T
                                             max
                                          
                                          K
                                       
                                       
                                          |
                                          L
                                          (
                                          
                                             R
                                             P
                                          
                                          
                                             (
                                             s
                                             )
                                          
                                          )
                                          |
                                       
                                    
                                    ,
                                 
                              
                           
                        which gives the average time available to serve the profitable arcs in RP
                        (s). We did not consider longer sequences to avoid an excessive increase of the computing time.

Let 
                           S
                         be the set of all sets composed by single profitable arcs and pairs of profitable arcs with a distance lower than T. We denote by S(i) the profit of set 
                           
                              i
                              ∈
                              S
                           
                        . Let Γir
                         be the cost of inserting set 
                           
                              i
                              ∈
                              S
                           
                         in route r ∈ RP
                        (s) and Δar
                         be the saving gained if arc a is removed from route r ∈ RP
                        (s). Finally, let bar
                         be equal to 1 if profitable arc a is currently served by route r ∈ RP
                        (s), gai
                         be equal to 1 if a ∈ AP
                         is in set 
                           
                              i
                              ∈
                              S
                           
                         and fair
                         be equal to 1 if the profitable arc a is traversed by r ∈ RP
                        (s) when set 
                           
                              i
                              ∈
                              S
                           
                         is inserted in r (a is traversed along the path that links route r with the arcs in set i). The Profit improvement model makes use of the following binary variables: vir
                         which takes value 1 if set 
                           
                              i
                              ∈
                              S
                           
                         is inserted in r ∈ RP
                        (s), war
                         which takes value 1 if arc a, currently served by route r ∈ RP
                        (s), is removed from r, and zair
                         which takes value 1 if arc a is served by route r ∈ RP
                        (s) when set 
                           
                              i
                              ∈
                              S
                           
                         is inserted in r. The formulation is the following:

                           
                              
                                 
                                    Maximize
                                    
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          S
                                       
                                    
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          
                                             R
                                             P
                                          
                                          
                                             (
                                             s
                                             )
                                          
                                       
                                    
                                    
                                       (
                                       S
                                       
                                          (
                                          i
                                          )
                                       
                                       
                                          v
                                          
                                             i
                                             r
                                          
                                       
                                       +
                                       
                                          ∑
                                          
                                             a
                                             ∈
                                             
                                                A
                                                P
                                             
                                          
                                       
                                       
                                          s
                                          a
                                       
                                       
                                          (
                                          
                                             f
                                             
                                                a
                                                i
                                                r
                                             
                                          
                                          
                                             z
                                             
                                                a
                                                i
                                                r
                                             
                                          
                                          )
                                       
                                       )
                                    
                                    −
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          
                                             R
                                             P
                                          
                                          
                                             (
                                             s
                                             )
                                          
                                       
                                    
                                    
                                       ∑
                                       
                                          a
                                          ∈
                                          
                                             A
                                             P
                                          
                                       
                                    
                                    
                                       s
                                       a
                                    
                                    
                                       w
                                       
                                          a
                                          r
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    T
                                    
                                       (
                                       r
                                       )
                                    
                                    +
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          S
                                       
                                    
                                    
                                       Γ
                                       
                                          i
                                          r
                                       
                                    
                                    
                                       v
                                       
                                          i
                                          r
                                       
                                    
                                    −
                                    
                                       ∑
                                       
                                          a
                                          ∈
                                          
                                             A
                                             P
                                          
                                       
                                    
                                    
                                       Δ
                                       
                                          a
                                          r
                                       
                                    
                                    
                                       w
                                       
                                          a
                                          r
                                       
                                    
                                    ≤
                                    
                                       T
                                       
                                          m
                                          a
                                          x
                                       
                                    
                                    
                                    r
                                    
                                    ∈
                                    
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       v
                                       
                                          i
                                          r
                                       
                                    
                                    ≤
                                    1
                                    −
                                    
                                       g
                                       
                                          a
                                          i
                                       
                                    
                                    
                                       b
                                       
                                          a
                                          r
                                       
                                    
                                    
                                    a
                                    ∈
                                    
                                       A
                                       P
                                    
                                    ,
                                    i
                                    ∈
                                    S
                                    ,
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       w
                                       
                                          a
                                          r
                                       
                                    
                                    ≤
                                    
                                       b
                                       
                                          a
                                          r
                                       
                                    
                                    
                                    a
                                    ∈
                                    
                                       A
                                       P
                                    
                                    ,
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       z
                                       
                                          a
                                          i
                                          r
                                       
                                    
                                    ≤
                                    
                                       f
                                       
                                          a
                                          i
                                          r
                                       
                                    
                                    
                                       v
                                       
                                          i
                                          r
                                       
                                    
                                    
                                    a
                                    ∈
                                    
                                       A
                                       P
                                    
                                    ,
                                    i
                                    ∈
                                    S
                                    ,
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          
                                             R
                                             P
                                          
                                          
                                             (
                                             s
                                             )
                                          
                                       
                                    
                                    
                                       (
                                       
                                          b
                                          
                                             a
                                             r
                                          
                                       
                                       −
                                       
                                          w
                                          
                                             a
                                             r
                                          
                                       
                                       +
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             S
                                          
                                       
                                       
                                          (
                                          
                                             g
                                             
                                                a
                                                i
                                             
                                          
                                          
                                             v
                                             
                                                i
                                                r
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                a
                                                i
                                                r
                                             
                                          
                                          
                                             z
                                             
                                                a
                                                i
                                                r
                                             
                                          
                                          )
                                       
                                       )
                                    
                                    ≤
                                    1
                                    
                                    a
                                    ∈
                                    
                                       A
                                       P
                                    
                                 
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       ∑
                                       
                                          a
                                          ∈
                                          
                                             A
                                             P
                                          
                                       
                                    
                                    
                                       w
                                       
                                          a
                                          r
                                       
                                    
                                    +
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          S
                                       
                                    
                                    
                                       v
                                       
                                          i
                                          r
                                       
                                    
                                    ≤
                                    Θ
                                    
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                    
                                       v
                                       
                                          i
                                          r
                                       
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    i
                                    ∈
                                    S
                                    ,
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                    
                                       w
                                       
                                          a
                                          r
                                       
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    a
                                    ∈
                                    
                                       A
                                       P
                                    
                                    ,
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (14)
                              
                                 
                                    
                                       z
                                       
                                          a
                                          i
                                          r
                                       
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    a
                                    ∈
                                    
                                       A
                                       P
                                    
                                    ,
                                    i
                                    ∈
                                    S
                                    ,
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                    .
                                 
                              
                           
                        The objective function aims at maximizing the profit of the routes in RP
                        (s). The left-hand side of constraints (6) gives an estimation of the cost of each new route r which must be lower than T
                        max. Constraints (7) establish that a sequence of arcs can be inserted into a route only if all arcs in the sequence are not served by the route while from (8) an arc a can be removed from route r only if r serves a. Inequalities (9) impose that variable zair
                         is set to 1 only if sequence i is inserted in route r and arc a is on the shortest path that links i with r. (10) guarantees that each profitable arc is served at most once. Finally, with (11) we impose that a limited number Θ of arcs or sets of arcs can be removed or inserted from a route.

The limitation set in constraints (11) is applied to avoid a poor estimation of the cost of the new route in constraint (6). In fact, the estimation of the cost of the route made in constraint (6), i.e., 
                           
                              T
                              
                                 (
                                 r
                                 )
                              
                              +
                              
                                 ∑
                                 
                                    i
                                    ∈
                                    S
                                 
                              
                              
                                 Γ
                                 
                                    i
                                    r
                                 
                              
                              
                                 v
                                 
                                    i
                                    r
                                 
                              
                              −
                              
                                 ∑
                                 
                                    a
                                    ∈
                                    
                                       A
                                       P
                                    
                                 
                              
                              
                                 Δ
                                 
                                    a
                                    r
                                 
                              
                              
                                 w
                                 
                                    a
                                    r
                                 
                              
                              ,
                           
                         is an approximation of the cost of the new route. Indeed, if we insert and/or remove more than one arc of the same route, then the cost of the new route may be different from the one obtained by simply summing up the corresponding insertion costs or removal savings. For example, suppose that we remove two profitable arcs a and a′ from the same route r and these arcs are traversed consecutively in route r (meaning that no other profitable arc is served between the two), with a traversed before a′. Then the cost of the arcs connecting the head of a with the tail of a′ is accounted for both in Δar
                         and in 
                           
                              
                                 Δ
                                 
                                    
                                       a
                                       ′
                                    
                                    r
                                 
                              
                              ,
                           
                         and thus twice in the left-hand side of (6). As an example, consider the route depicted in Fig. 2. The savings obtained by removing a and a′ are both equal to 5, thus summing them up we obtain a total saving of 10. However, when removing both of them simultaneously, we obtain a saving of 5.

W set the value of Θ to 5. This value is sufficient to allow a deep search of the solution space around solution s and, on the other hand, to prevent from a poor approximation of the cost of each route.

Note that, because of constraints (6), the solution obtained by the Profit improvement model may be infeasible. In this case, we randomly remove arcs from infeasible routes until each route becomes feasible. The removed arcs are inserted in existing routes in RN
                        (s), if this is feasible, or in new routes.

The Profit improvement model is solved only if the Route selection model is able to improve the current best solution. If this is not the case, the current best solution has already been processed by the Route improvement (s) procedure and thus the probability of improving this solution further through Profit improvement is low. If instead a new best solution is found by Route selection, then Profit improvement makes a deep search around this solution to try to increase the corresponding profit.

The Jump (k, s) procedure is performed after the intensification phase. We use two kinds of jumps. One consists in performing a sequence of k 1-moves from RN
                        (s) to RP
                        (s), while the other moves a set U, with |U| = k, of profitable arcs from RP
                        (s) to RN
                        (s), and a set W of profitable arcs from RN
                        (s) to RP
                        (s), such that S(U) ≤ S(W). The larger the value of k, the more different the new solution is with respect to the previous one.

When we move the arcs from RN
                        (s) to RP
                        (s), we disregard the T
                        max duration constraint and we insert each arc in the route that leads to the cheapest insertion cost. Consequently, the solution obtained after a jump may be infeasible. In order to recover feasibility, we first optimize the length of each route by solving an ATSP as described in Section 3.5 and then apply 1-moves and swap-moves on the routes in RP
                        (s) in order to reduce the infeasibility. Only moves that reduce infeasibility are implemented. If some routes are still infeasible after all such moves, then we randomly remove arcs from infeasible routes until each route becomes feasible. The removed arcs are inserted in existing routes in RN
                        (s), if this is feasible, or in new routes.

At the end of the procedure that recovers the feasibility of the routes in RP
                        (s) we may obtain a solution of very poor quality which may constitute a bad starting point for the following internal tabu search phase. This has a very bad impact on the quality of the solutions found by the internal tabu search as a short computing time is allowed to it. Thus, in order to improve the starting solution, a further ILP model, which we call Fast profit improvement, is solved on the solution generated after the jump. Fast profit improvement is a simplification of Profit improvement, as applying Profit improvement at each jump proved to be too cumbersome. As done by Profit improvement, Fast profit improvement tries to increase the profit collected by the routes in RP
                        (s) by inserting profitable arcs and removing less profitable arcs. However, contrary to what happens in Profit improvement, in Fast profit improvement it is possible to only insert or remove single profitable arcs from the routes in RP
                        (s).

For the sake of completeness and clarity, we report the formulation of Fast profit improvement even if it is very similar to the one of Profit improvement. With a similar notation as in Profit improvement, let bar
                         be equal to 1 if profitable arc a is currently served by route r ∈ RP
                        (s), Γar
                         be the cost of inserting arc a ∈ AP
                         in route r ∈ RP
                        (s) and Δar
                         be the saving gained if arc a is removed from route r ∈ RP
                        (s). Fast profit improvement makes use of the following binary variables: var
                         which takes value 1 if arc a ∈ AP
                         is inserted in r ∈ RP
                        (s) and war
                         which takes value 1 if arc a, currently served by route r ∈ RP
                        (s), is removed from r. Fast profit improvement is formulated as follows:

                           
                              
                                 
                                    Maximize
                                    
                                    
                                       ∑
                                       
                                          a
                                          ∈
                                          
                                             A
                                             P
                                          
                                       
                                    
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          
                                             R
                                             P
                                          
                                          
                                             (
                                             s
                                             )
                                          
                                       
                                    
                                    
                                       (
                                       
                                          s
                                          a
                                       
                                       
                                          v
                                          
                                             a
                                             r
                                          
                                       
                                       −
                                       
                                          s
                                          a
                                       
                                       
                                          w
                                          
                                             a
                                             r
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        s.t.:

                           
                              (15)
                              
                                 
                                    T
                                    
                                       (
                                       r
                                       )
                                    
                                    +
                                    
                                       ∑
                                       
                                          a
                                          ∈
                                          
                                             A
                                             P
                                          
                                       
                                    
                                    
                                       (
                                       
                                          Γ
                                          
                                             a
                                             r
                                          
                                       
                                       
                                          v
                                          
                                             a
                                             r
                                          
                                       
                                       −
                                       
                                          Δ
                                          
                                             a
                                             r
                                          
                                       
                                       
                                          w
                                          
                                             a
                                             r
                                          
                                       
                                       )
                                    
                                    ≤
                                    
                                       T
                                       max
                                    
                                    
                                    r
                                    
                                    ∈
                                    
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (16)
                              
                                 
                                    
                                       v
                                       
                                          a
                                          r
                                       
                                    
                                    ≤
                                    1
                                    −
                                    
                                       b
                                       
                                          a
                                          r
                                       
                                    
                                    
                                    ∀
                                    a
                                    ∈
                                    
                                       A
                                       P
                                    
                                    ,
                                    
                                    
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (17)
                              
                                 
                                    
                                       w
                                       
                                          a
                                          r
                                       
                                    
                                    ≤
                                    
                                       b
                                       
                                          a
                                          r
                                       
                                    
                                    
                                    ∀
                                    a
                                    ∈
                                    
                                       A
                                       P
                                    
                                    ,
                                    
                                    
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (18)
                              
                                 
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          
                                             R
                                             P
                                          
                                          
                                             (
                                             s
                                             )
                                          
                                       
                                    
                                    
                                       (
                                       
                                          b
                                          
                                             a
                                             r
                                          
                                       
                                       −
                                       
                                          w
                                          
                                             a
                                             r
                                          
                                       
                                       +
                                       
                                          v
                                          
                                             a
                                             r
                                          
                                       
                                       )
                                    
                                    ≤
                                    1
                                    
                                    a
                                    ∈
                                    
                                       A
                                       P
                                    
                                 
                              
                           
                        
                        
                           
                              (19)
                              
                                 
                                    
                                       ∑
                                       
                                          a
                                          ∈
                                          
                                             A
                                             P
                                          
                                       
                                    
                                    
                                       (
                                       
                                          w
                                          
                                             a
                                             r
                                          
                                       
                                       +
                                       
                                          v
                                          
                                             a
                                             r
                                          
                                       
                                       )
                                    
                                    ≤
                                    Θ
                                    
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (20)
                              
                                 
                                    
                                       v
                                       
                                          a
                                          r
                                       
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    a
                                    ∈
                                    
                                       A
                                       P
                                    
                                    ,
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (21)
                              
                                 
                                    
                                       w
                                       
                                          a
                                          r
                                       
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    a
                                    ∈
                                    
                                       A
                                       P
                                    
                                    ,
                                    r
                                    ∈
                                    
                                       R
                                       P
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                    .
                                 
                              
                           
                        
                     

The objective function and the constraints have a similar meaning as in Profit improvement. The differences are related to the fact that we consider single arcs to be inserted in the routes and not pair of arcs. A further difference is the absence of variables zair
                         which leads to a different formulation of constraints (6) and (10) and to the absence of constraints (14).

In Fast profit improvement we fix the value of Θ to 3 in order to reduce the computing time. In fact, a larger value of Θ leads to a wider solution space and thus the problem becomes harder to solve. Moreover, when Θ increases, the risk of a poor approximation of the cost of the routes increases and, at the same time, the risk to obtain infeasible solutions increases. Given that Fast profit improvement is solved frequently, we prefer to obtain a feasible solution in a fast way.

Infeasibility is eventually recovered by randomly removing arcs from infeasible routes until each route becomes feasible. The removed arcs are inserted in existing routes in RN
                        (s), if this is feasible, or in new routes.

Finally, note that, even if Fast profit improvement is applied, the solution obtained after a jump may be of poor quality and starting a tabu search phase from a poor solution may be a waste of time. Thus, the tabu search phase is started only if the profit associated with the solution obtained after the jump is at least equal to z
                        best
                        β, where z
                        best is the value of the best solution found so far. β is initialized to 0.9. If this is not the case, a new jump is performed. This procedure is aimed at guaranteeing a good quality of the starting solution of the internal tabu search phase. After 5 consecutive trials for which the value of the solution is lower than z
                        best
                        β, the value of β is decreased to 0.9β. In fact, it may happen that the threshold of z
                        best
                        β is too difficult to reach. This is why we decrease the value of β after 5 unsuccessful iterations.

MAT was tested on the set of instances proposed in Archetti et al. (2014). These instances are generated from three classes of RPP benchmark instances proposed by Hertz, Laporte, and Nanchen-Hugo (1999). In the first class, the R class, the edges are generated randomly in the plane. In the second class, the D class, the edges define a graph where all the vertices have degree 4. In the third class, the G class, the edges have all cost 1 and define a uniform grid. These instances have been transformed into TOARP instances as follows. For each edge {i, j}, two arcs (i, j) and (j, i) with the same cost are generated. If the edge was not required, both arcs are not required. If it was required, one direction is randomly selected and the corresponding arc is required (with probability p) or profitable (with probability 1 − p), while the opposite one is neither required nor profitable. The profit associated with the traversal of a profitable arc is defined as its cost, which corresponds to assuming that the profit gained by serving an arc is proportional to the traversal cost. Each of these classes of instances is divided in three sets whose characteristics are reported in Table 1
                     
                     .

The instances of classes R, D and G are based on undirected graphs and, thus, are such that if there is an arc from i to j, then there is also an arc from j to i with the same cost. Given that the TOARP is defined on a directed graph, we generated a new class of instances where some arcs exist in one direction but not in the other one. Moreover, in this new class of instances, profits are not related to the arc costs but are generated randomly. The number of vertices was set equal to 50 and the vertices were randomly generated in the 1000 × 1000 square. Then, for each vertex i, arcs to the three vertices closest to i are added to the arc set A. Moreover, to guarantee the strong connectivity of the resulting graph, the arcs in three different Hamiltonian cycles are also added to A. Arc costs are defined as the Euclidean distances. Each arc a ∈ A is randomly included in AR
                     ∪AP
                      with probability 0.2. We generated 10 such instances with p = 0 and 10 instances with p = 0.5. Profits of the arcs in AP
                      were randomly generated in the interval [100; 500]. We call this class of instances the T50 instances.

For each one of the previous instances, we generated three instances with K = 2, 3 and 4. The value of T
                     max was set in such a way that a feasible solution exists while there is no solution which traverses all profitable and required arcs. This value was found by solving the min–max K-vehicles Directed Rural Postman Problem with the algorithm proposed in Benavent, Corberán, Plana, and Sanchis (2011), as explained in Archetti et al. (2014).
                     
                  

The code was written in Visual C++ 2010 and tests were run on an AMD Athlon (tm) 64 X2 Dual Core Processor 5600+ 2.89 gigahertz, 3.37 gigabytes RAM. The stopping criterion was set to 30 minutes of computing time. We believe that, given the complexity of the problem, this maximum computing time is reasonable. Also, preliminary tests showed that a higher computing time does not lead to substantial benefits. To calculate the optimal solution of the ATSP, Route selection, Profit improvement and fast profit improvement we used CPLEX 12.2.0. The maximum time allowed for the solution of each ATSP was set to 30 seconds while 30 minutes were allowed for the solution of Route selection, Profit improvement and Fast profit improvement. This choice is due to the fact that the ATSP is solved very often and thus we decided to allow a short computing time. Route selection, Profit improvement and Fast profit improvement are instead called less frequently and, in addition, they are typically solved much faster than the ATSP. Thus, we decided not to insert a maximum computing time for them and to fix it equal to the maximum time allowed for MAT.

Classes R, D and G are composed of 207 instances and the optimal solution is known for 204 instances with 2 vehicles and for 188 and 157 instances with 3 and 4 vehicles, respectively. For the T50 instances, the optimal solution is known for 19 instances out of 20 with 2 vehicles, for 13 out of 20 with 3 vehicles and for 4 out of 20 with 4 vehicles. The optimal solution was obtained through the branch-and-cut algorithm proposed in Archetti et al. (2014).


                     Tables 2–5 summarize the results. Table 2 refers to the instances of class R, Table 3 to class D, Table 4 to class G, and Table 5 to class T50. In each table, the instances are classified by the number of vehicles K (on the rows) and by parameter p (on the columns). For each class of instances we report: the number of instances solved to optimality by the branch-and-cut algorithm proposed in Archetti et al. (2014) (# solved), the number of optimal solutions found by MAT (# opt), the average and maximum percentage gap of the solution found by MAT with respect to the upper bound found by the branch-and-cut algorithm (Av. and Max. Gap) and the average and maximum percentage gap calculated only on the instances where the optimal solution is available (Av. and Max. Gap*).
                  

From Tables 2–5 one can note that the simplest class of instances, both for the exact algorithm and the heuristic, is class R where all instances are solved to optimality by the branch-and-cut algorithm and MAT always finds the optimal solution except for one instance with K = 2 and p = 0.5. For this instance, the error with respect to the optimal solution is 28.95 percent (which determines the average error of 5.79 percent over five instances in the last column of Table 2). Such a large error is due to the fact that the solution space is narrow and either the optimal solution is found or the gap for any non-optimal solution is large. In fact, the T
                     max value is very tight, which makes finding good feasible solutions very difficult. Looking at the results for class D (see Table 3), we observe that this class contains more difficult instances. The branch-and-cut algorithm is sensitive to the number of vehicles as the number of instances solved to optimality decreases when K increases. MAT is instead more sensitive to parameter p. The average gap calculated with respect to the optimal solution is in some cases much lower than the one calculated with respect to the upper bound. This indicates that the upper bound may be quite far from the optimal solution. The same observations apply to class G (see Table 4). The instances of class T50 (Table 5) are difficult to solve to optimality especially for K = 4 but MAT gives on average good quality solutions.

The values of the maximum gaps are quite high in some cases. We now focus on the instances for which MAT generated large errors and analyze the reasons for such a behavior. We analyze the instances solved to optimality as in the other cases the quality of the upper bound may be very poor. We just mention that, for the instance of Table 4 which presents a value of Max. Gap of 44.61 percent, the value of the solution of MAT corresponds to the best feasible solution found by the branch-and-cut algorithm.
                     
                     
                  


                     Table 6 presents an analysis of the structure of the optimal solution of the instances for which the value of the solution obtained through MAT is greater by more than 10 percent with respect to the value of the optimal solution. The first four columns report data on the instance: name, set, number of vehicles and parameter p. The fifth column reports the percentage gap between the MAT solution and the value of the optimal solution. The last three columns present the average number of arcs traversed by a route in the optimal solution (# traversed arcs per route), the average number of profitable and required arcs served in a route (# required and profitable arcs per route), and the ratio between the total duration of the routes with respect to the maximum allowed duration (
                        
                           
                              
                                 ∑
                                 
                                    r
                                    ∈
                                    
                                       R
                                       p
                                    
                                    
                                       (
                                       s
                                       )
                                    
                                 
                              
                              T
                              
                                 (
                                 r
                                 )
                              
                           
                           
                              k
                              
                                 T
                                 max
                              
                           
                        
                     ).

The larger number of instances for which MAT generated an error greater than 10 percent comes from set D100 with p = 0.5. The last column of the table shows that the duration constraint is extremely binding for all these instances. Moreover, with the only exception of instance ‘hertzr16’, all remaining instances have long routes serving a large number of profitable and required arcs. This is a feature that, combined with a binding duration constraint, makes these instances very difficult to solve heuristically. Concerning instance ‘hertzr16’, we have performed different tests by changing the parameters used in MAT and we have always obtained two solution values: either the optimal one or the one which is 29 percent worse. Thus, we believe that the solution we report is the second best.

In Table 7 we summarize the results related to the average gaps and number of optimal solutions found aggregated by class of instances, number of vehicles, and parameter p. The last row of the table refers to the total average gap and total number of optimal solutions found on all instances. We notice that when the value of p increases, the instances seem to be more difficult to solve heuristically.

Finally, in Table 8 we report the results of a computational study we made on the set of instances considered in Table 6. The aim of this study is to analyze the effectiveness of the different components of MAT and the tuning of the parameters. We perform the analysis on the following procedures/parameters used in MAT: number of tabu iterations, intensification phase, route improvement phase, sequence move and value of parameter Θ in constraint (11). The reason of our choice is that we believe that these are the procedures/parameters that influence the most the performance of MAT. We report the percentage gap of the solutions produced by MAT with respect to the optimal solution for the different settings of MAT. In particular, in the second column we report the gaps obtained with the setting described in the paper. The third column refers to the case where the number of tabu iterations, as calculated in (1), is halved. The fourth and the fifth columns report the results for the case where the intensification phase described in Section 3.6 and the route improvement described in Section 3.5 are not performed, respectively. The last two columns report the results obtained when no sequence move is performed and when the value of the parameter Θ in constraint (11) is set to 5, respectively. The results show that there is no setting that is dominant with respect to the others. During the preliminary tests, we also observed that, with a different setting, the set of instances that show a large gap changes. The setting used in our tests is the one that guarantees to always find a feasible solution and to avoid extremely bad solutions.

@&#CONCLUSIONS@&#

The matheuristic proposed for the solution of the Team Orienteering Arc Routing Problem generates an average error of 0.67 percent and finds the optimal solution on 78 percent of the instances for which the optimal solution is known. The effectiveness of the algorithm is the result of the use of ILP models combined with a tabu search and a diversification phase that allows us to explore different parts of the solution space in depth, taking advantage of the power of commercial MILP solvers.

The solution value generated by the matheuristic was used as initial upper bound in the branch-and-cut algorithm proposed in Archetti et al. (2014) and proved to be effective in improving its efficiency.

Recent advances in the design of exact methods and heuristics make it possible to achieve good results on arc routing problems, a class of problems that is still largely unexplored if compared to node routing problems.

@&#ACKNOWLEDGMENTS@&#

The authors wish to thank two anonymous referees for their useful comments which helped them improve a previous version of the paper.

Ángel Corberán, Isaac Plana and José M. Sanchis wish to thank the Ministerio de Economía y Competitividad (project MTM2012-36163-C06-02) of Spain and the Generalitat Valenciana (project GVPROMETEO2013-049) for their support.

@&#REFERENCES@&#

