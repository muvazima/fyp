@&#MAIN-TITLE@&#Efficient semantic image segmentation with multi-class ranking prior

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Combine local perdition with global cues obtained from multi-class ranking.


                        
                        
                           
                           Introduce inter-class co-occurrence statistics as pairwise constraint with S-SVM.


                        
                        
                           
                           Obtain highly competitive performance despite of much simpler and efficient model.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Computer vision

Machine learning

Semantic segmentation

Structural SVMs

@&#ABSTRACT@&#


               
               
                  Semantic image segmentation is of fundamental importance in a wide variety of computer vision tasks, such as scene understanding, robot navigation and image retrieval, which aims to simultaneously decompose an image into semantically consistent regions. Most of existing works addressed it as structured prediction problem by combining contextual information with low-level cues based on conditional random fields (CRFs), which are often learned by heuristic search based on maximum likelihood estimation. In this paper, we use maximum margin based structural support vector machine (S-SVM) model to combine multiple levels of cues to attenuate the ambiguity of appearance similarity and propose a novel multi-class ranking based global constraint to confine the object classes to be considered when labeling regions within an image. Compared with existing global cues, our method is more balanced between expressive power for heterogeneous regions and the efficiency of searching exponential space of possible label combinations. We then introduce inter-class co-occurrence statistics as pairwise constraints and combine them with the prediction from local and global cues based on S-SVMs framework. This enables the joint inference of labeling within an image for better consistency. We evaluate our algorithm on two challenging datasets which are widely used for semantic segmentation evaluation: MSRC-21 dataset and Stanford Background dataset and experimental results show that we obtain high competitive performance compared with state-of-the-art methods, despite that our model is much simpler and efficient.
               
            

@&#INTRODUCTION@&#

Semantic segmentation is a fundamental but challenging problem in computer vision, which aims to assign each pixel in an image a pre-defined semantic label. It can be seen as an extension of the traditional object detection which aims at detecting prominent objects in the foreground of an image, with closed relation to some other fundamental computer vision tasks such as image segmentation and image classification. Semantic segmentation has many applications in practice, including scene understanding, robot navigation, and image retrieval.

Semantic image segmentation algorithms in early stage typically solve this problem from a pixel-wise labeling perspective [1,2]. Although using pixels as labeling units is simple and straightforward, pixel itself contains limited and ambiguous information that cannot always be discriminative enough to determine its correct label. On the other hand, the proliferation of unsupervised image segmentation algorithms, such as mean shift [3], graph based segmentation [4,38], quick shift [5], TurboPixel [6] and SLIC [7], enables higher order features representation of regions. Therefore, more recently semantic segmentation approaches based on region-wise labeling [8–13] are also well investigated, which make use of region-level features that are not only more informative but also robust to noise, clutter, illuminate variance et al. In such a setting, an initial unsupervised segmentation is commonly adopted for pre-processing. However, image segmentation is still far away from being perfect without regard to the extensive attempts in the last several decades. From this point of view, how to make best use of these imperfect unsupervised image segmentation algorithms on the semantic segmentation problem is of fundamental importance yet is still unclear.

Although higher order features extracted from regions are more expressive and informative than those from pixels, sematic ambiguity still exists because of the appearance similarity. A general consent is that contextual information within an image is a very useful cue to attenuate this ambiguity, which can be used to suppress/encourage the presence of object classes during labeling. Context refers to any information that is not extracted directly from local appearance and can be summarized into two categories: pairwise constraints and global cues. Pairwise constraints, such as smoothness based on contrast [14,9], relative location [10,11] and co-occurrence [8,11,15] are used to model the pairwise relationship between regions within an image. Global constraints are usually used to enforce higher level consistency of region sets or image level. Some approaches are proposed to model these cues, such as using image classification results [13], Potts potential [12], p
                     
                        N
                      Potts potential [16] and its improved versions robust P
                     
                        N
                      potential [14], p
                     
                        N
                     -based hierarchical CRFs [17], and Harmony potential [9]. These models will be further discussed in Section 2.

In terms of the methodology, most of the existing methods [16,12,14,10,11,15,9] use conditional random fields (CRFs) to combine these constraints from different levels and make joint inference of labeling within an image, which is also known as structured prediction. In contrast to many sophisticated algorithms for inference, these models [10,11,9,14,15] are usually learned by gradient descent or heuristic search on validation set based on maximum likelihood estimation. On the other hand, Zhu et al. [18] showed that the max-margin based learning algorithm is more robust for structured prediction compared with the maximum likelihood estimation based learning algorithm in many machine learning applications.

In this paper, we use maximum margin based structural support vector machine (S-SVMs) model to combine multiple levels of cues to attenuate the ambiguity of appearance similarity and we propose multi-class ranking based global constraints to confine the object classes to be considered when labeling regions within an image.

For global cues, we first rank all the object classes for an image (class with higher probability present in the image gets larger score) using multi-class ranking algorithm [20] and transform the ranking scores into image-level soft constraint to confine the possible classes present in the image. The advantages of this global cues can be seen from two aspects: on the one hand, compared with robust p
                     
                        N
                      potential [14] which limits their parent node to take only one single label, our method ranks all the classes for an image and thus is more representative to heterogeneous regions. On the other hand, since we compute the ranking scores for all the classes and transform them to soft constraint, we do not need to make hard decision for every class and thus avoid searching exponential space of possible label combination as harmony potential [9]. The global cues are integrated with the prediction obtained from region feature and logistic regression to encouraging more likely classes while suppressing the others.

We then introduce inter-class co-occurrence statistics as pairwise constraints and combine them with the prediction from previous stage under S-SVMs framework. This enables the joint inference of labeling within an image for better consistency. Moreover, our model can be can be efficiently learned with cutting plane algorithm [19] instead of using heuristic search approach as in CRFs learning. Experimental results show that we obtain high competitive performance with state-of-the-art methods with a much simpler and efficient model on two challenging datasets: MSRS-21 and Stanford Background Dataset.

Probably the most related work is [21], which discussed the application of structural SVM in image semantic segmentation and compared with alternative maximum likelihood method. However, our model is different from their model in designing pairwise and global constraints as well as loss function in parameter learning. The standard contrast-dependent Potts model was used as pairwise constraint in contrast to our co-occurrence property. With regard to global constraints, they used very simple and straightforward K image-level classification results and the advantage of multiple classes ranking over 1-VS-All classifiers is discussed in [20].

The remainder of the paper is organized as follows: In the next section we review the related work. Our model is presented in Section 3, including the problem formulation and model details. Sections 4 and 5 describe the inference and learning methods. Implementation details and performance evaluation are shown in Section 6 while conclusions are drawn in Section 7.

@&#RELATED WORK@&#

Despite of the success in inferring pixel labels [1,2], more recent methods tend to infer labels over regions or superpixels for the sake of lower computational complexity and incorporating higher level semantic cues. For these approaches, traditional image segmentation algorithms such as Normalized Cut [8], meanshift [14,17,13], graph-based image segmentation [10], quick shift [9,22] are adopted to get initial segments. More recently, several over-segmentation algorithms [6,7] are developed to bypass the problem of tradition segmentation algorithms, such as the semantic ambiguity (regions span multiple object classes) and the difficulty to determine the optimal number of segment regions. These algorithms try to seek the trade-off between reducing image complexity through pixel-grouping and avoiding under-segmentation [6]. Images are decomposed into much smaller regions than object size, e.g. 100–300 regions. Many traditional segmentation algorithms can also be adopted to generate superpixels by setting a finer level region segments. Qualitative results of different segmentation algorithms are given in Fig. 1
                     , where each image is decomposed into approximate 150 superpixels. It can be seen that over-segmentation algorithms tent to segment an image into regions with regions with approximate size while the region size of traditional segmentation may vary a lot with the complexity of the content.

Although various powerful features have been proposed recently (e.g. color histogram, texture and SIFT, these feature are still not informative enough to achieve high classification performance because of the appearance similarity. To attenuate this ambiguity of feature representation, some pairwise constraints, such as smoothness [14,9,23], relative location [10,11] and co-occurrence [8,11,15], are further introduced to attenuate the ambiguity of feature representation: (i) The assumption for pairwise smoothing term is that adjacent regions tend to have same label, and subsequently spatially adjacent regions with different labels will be punished. To keep the boundary, appearance contrast is considered in smoothing term, by which regions with larger appearance contrast will be punished less for their inconsistent labels. However, the dilemma of this smoothing term is that regions with similar appearance will naturally tend to have same label. This is contradicted with the objective of smoothing term that expecting spatially adjacent regions with variant appearance to have same label. (ii) The co-occurrence statistics exploit the property that some classes (e.g. boat, water) are more likely to present within an image than others (e.g. car, water). Thus the existence of one class can be used as the evidence of expecting the presence of some highly related classes and suppress the presence of other unlikely classes. For instance, Rabinovich et al. [8,11] construct context matrices by counting the co-occurrence frequency among object labels in the training set to incorporate semantic contextual information. Ladicky et al. [15] claimed that the co-occurrence cost should depend only on the labels present in an image, it should be invariant to the number and location of pixels that object occupies. (iii) Gould et al. [10] encoded the inter-class spatial relationship as a local feature in a two-stage classification process. However, because of the 2D projection, relative location in images is usually uninformative and hence degenerates to co-occurrence constraint.

Pairwise constraint can only capture local context information between regions. A more recent trend is building a hierarchical model by adding an extra global constraint to pairwise framework to incorporate constraints on higher level, such as the group of segments or image level. Plath et al. [12] proposed a Potts potential to model the label consistency of regions in a hierarchical tree structure, which punished all nodes that have inconsistent labels with their parent label. Kohli et al. [14] adapted the p
                     
                        N
                      Potts potential proposed in [16] to a segment quality sensitive higher order potential, named robust P
                     
                        N
                      potential. The cost of inconsistent labeling in high contrast region will be less compared to low contrast region. However, a drawback of both high order potentials [12,14] is that they both limited their parent node to take only one single label, which is often not the case and makes it unable to handle heterogeneous regions. Csurka and Perronnin [13] proposed to use image classification results to reduce the number of classes to be considered in an image. But this hard constraint schema did not take into account the classification accuracy and classification errors could propagate to following stages and affect the overall performance. The work [17] proposed a novel hierarchical CRF framework which allowed for integration of features computed at different levels to avoid single choice of quantization. Gonfaus et al. [9] proposed more expressive constraint named harmony potential, which restrict the power set over all possible labels on image level first and then use it as a higher order constraint. However, the exponential sized power set makes the exact inference infeasible. And heuristic method such as branch-and-bound sampling has to be applied to get an approximation of the best assignment, which results in taking into account a small subset only.

Besides the context cues directly extracted from the image, priors from various vision tasks are also introduced to improve the performance. Several approaches considered jointing the object detection and multi-class image segmentation by feeding information from one task to the other [24–26,15,9]. Heitz et al. [24] developed Cascaded Classification Models (CCM) to combine the subtasks of scene categorization, object detection, multiclass image segmentation for holistic scene understanding. However, since these subtasks were only coupled by their input/output variables in a loose style, each of them is still optimized separately and information sharing was limited and may cause inconsistent representation. Gould et al. [25] proposed a hierarchical region-based approach that combined joint object detection with image segmentation to reason simultaneously about pixels, regions and objects in an image. Ladicky et al. [15] integrated the results from sliding window detectors with low-level pixel-based unary and pairwise relations into a conditional random field framework (CRF) for joint reasoning about regions, objects and their attributes and similar idea in [9].

In this section we will specify our model for the structural prediction. First, we consider superpixels obtained by an unsupervised image segmentation, and use 
                        x
                     
                     
                        i
                     , i
                     =1,…,
                     N to denote the feature vector of superpixel i and y
                     
                        i
                     
                     ∈
                     C
                     ={c
                     1,
                     c
                     2,…,
                     c
                     
                        K
                     } for its corresponding label where N and K are the numbers of superpixels and classes, respectively. The whole image can then be represented as the collection of superpixel feature vectors, 
                        X
                     
                     ={
                        x
                     
                     
                        i
                     ∣
                     i
                     =1,…,
                     N}, and an assignment of labels to the set of superpixels is referred to as a labeling of the image, denoted by 
                        Y
                     
                     ={y
                     
                        i
                     ∣
                     i
                     =1,…,
                     N}. Our objective is to learn a function F(
                        X
                     ,
                     
                        Y
                     ) that is able to capture the compatibility of the prediction 
                        Y
                      and the observation 
                        X
                     , such that the better the prediction 
                        Y
                      describes the image content 
                        X
                     , the higher value F(
                        X
                     ,
                     
                        Y
                     ) becomes. Thus, given the observation 
                        X
                     , the optimal prediction 
                        Y
                      can be found by maximizing F(
                        X
                     ,
                     
                        Y
                     ) over all possible labelings:
                        
                           (1)
                           
                              
                                 
                                    Y
                                 
                                 
                                    ˆ
                                 
                              
                              =
                              
                                 
                                    arg max
                                 
                                 
                                    Y
                                 
                              
                              F
                              (
                              X
                              ,
                              Y
                              )
                              .
                           
                        
                     
                  

Following the structural SVMs [27], we assume the compatibility function F is linear in terms of a combined feature representation of inputs and outputs φ(
                        X
                     ,
                     
                        Y
                     ) (also known as joint feature map):
                        
                           (2)
                           
                              F
                              (
                              X
                              ,
                              Y
                              )
                              =
                              〈
                              ω
                              ,
                              φ
                              (
                              X
                              ,
                              Y
                              )
                              〉
                              .
                           
                        
                     
                  

The joint feature map φ(
                        X
                     ,
                     
                        Y
                     ) can be designed in order to capture multi-scale, multi-layer and contextual cues. Given the joint feature map, the task in learning is to train an optimal model parameter 
                        
                           ω
                        
                      using training set. The local constraint, also called unary potential, captures the local appearance evidence for labeling superpixels; the mid-level constraint usually exploits pairwise relationship, such as smoothness, relative location and co-occurrence, between superpixels. In some approaches, certain global constraint is also applied to infer possible labeling from image level rather than superpixels. We will specify how we define these constraints and combine them together in the following sections.

First we detail our feature representation for superpixels. The raw features of a superpixel consist of two ingredients, appearance-based descriptors and bag-of-word (BoW) representation. Following [10], the appearance-based descriptors include color and texture features which compute mean, standard deviation, skewness, and kurtosis statistics of the superpixel’s color distribution and filter responses. In addition, we also extract the location and geometry features of the superpixel. For more details we refer the reader to [10]. The BoW representation has been shown useful in many state-of-the-art vision systems. Therefore we also incorporate it for superpixel representation. Moreover, as shown in [22,28], BoW features extracted not only inside superpixels, but also in their neighborhood can describe superpixels more effectively. Thus, for each superpixel wee extract BoW from both itself and its adjacent regions and then concatenate them together. The final representation of the raw features becomes:
                           
                              (3)
                              
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       (
                                       
                                          
                                             θ
                                          
                                          
                                             a
                                          
                                       
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                          
                                             a
                                          
                                       
                                       ,
                                       
                                          
                                             θ
                                          
                                          
                                             b
                                          
                                       
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                          
                                             b
                                          
                                       
                                       )
                                    
                                    
                                       ⊤
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    s
                                 
                                 
                                    i
                                 
                                 
                                    a
                                 
                              
                           
                         is the appearance descriptor, 
                           
                              
                                 
                                    s
                                 
                                 
                                    i
                                 
                                 
                                    b
                                 
                              
                           
                         is the concatenated BoW feature, and θ
                        
                           a
                        , θ
                        
                           b
                         are the weight parameters to be learned by cross validation.

Instead of using the above raw feature, we compute an intermediate representation from these raw features via logistic regression, which makes feature more compact. Given the raw feature representation s
                        
                           i
                         of a superpixel, the probability of taking label l
                        ∈
                        C
                        ={c
                        1,
                        c
                        2,…,
                        c
                        
                           K
                        } can be computed by the following logistic regression model:
                           
                              (4)
                              
                                 P
                                 (
                                 l
                                 |
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         exp
                                                         (
                                                         
                                                            
                                                               β
                                                            
                                                            
                                                               l
                                                               0
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               β
                                                            
                                                            
                                                               l
                                                            
                                                            
                                                               T
                                                            
                                                         
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         )
                                                      
                                                      
                                                         1
                                                         +
                                                         
                                                            
                                                               ∑
                                                            
                                                            
                                                               t
                                                               =
                                                               
                                                                  
                                                                     c
                                                                  
                                                                  
                                                                     1
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  
                                                                     c
                                                                  
                                                                  
                                                                     K
                                                                     -
                                                                     1
                                                                  
                                                               
                                                            
                                                         
                                                         exp
                                                         (
                                                         
                                                            
                                                               β
                                                            
                                                            
                                                               t
                                                               0
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               β
                                                            
                                                            
                                                               t
                                                            
                                                            
                                                               T
                                                            
                                                         
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                
                                                
                                                   if
                                                   
                                                   l
                                                   =
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ,
                                                   …
                                                   ,
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         K
                                                         -
                                                         1
                                                      
                                                   
                                                   ,
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         1
                                                      
                                                      
                                                         1
                                                         +
                                                         
                                                            
                                                               ∑
                                                            
                                                            
                                                               t
                                                               =
                                                               
                                                                  
                                                                     c
                                                                  
                                                                  
                                                                     1
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  
                                                                     c
                                                                  
                                                                  
                                                                     K
                                                                     -
                                                                     1
                                                                  
                                                               
                                                            
                                                         
                                                         exp
                                                         (
                                                         
                                                            
                                                               β
                                                            
                                                            
                                                               t
                                                               0
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               β
                                                            
                                                            
                                                               t
                                                            
                                                            
                                                               T
                                                            
                                                         
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                
                                                
                                                   if
                                                   
                                                   l
                                                   =
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         K
                                                      
                                                   
                                                   ,
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           β
                         is the learned parameter for the logistic regression. We concatenate class probabilities to form the K-dimensional intermediate representation:
                           
                              (5)
                              
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       (
                                       P
                                       (
                                       
                                          
                                             c
                                          
                                          
                                             1
                                          
                                       
                                       |
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                       )
                                       ,
                                       P
                                       (
                                       
                                          
                                             c
                                          
                                          
                                             2
                                          
                                       
                                       |
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                       )
                                       ,
                                       …
                                       ,
                                       P
                                       (
                                       
                                          
                                             c
                                          
                                          
                                             K
                                          
                                       
                                       |
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                       )
                                       )
                                    
                                    
                                       ⊤
                                    
                                 
                                 .
                              
                           
                        
                     

Moreover, we assign the most probable label to the superpixel as an initial label guess for further joint inference:
                           
                              (6)
                              
                                 
                                    
                                       l
                                    
                                    
                                       i
                                    
                                    
                                       ∗
                                    
                                 
                                 =
                                 
                                    
                                       arg max
                                    
                                    
                                       l
                                       ∈
                                       C
                                    
                                 
                                 P
                                 (
                                 l
                                 |
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 .
                              
                           
                        
                     

As a baseline, the performances of raw features under various over-segmentation algorithms are systematically evaluated in Section 6 and compared with those obtained from structured prediction using contextual information.

The unary potential can be written as follows:
                           
                              (7)
                              
                                 
                                    
                                       F
                                    
                                    
                                       unary
                                    
                                 
                                 (
                                 X
                                 ,
                                 Y
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    
                                       ω
                                    
                                    
                                       
                                          
                                             y
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       T
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    ω
                                 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    ω
                                 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          K
                                       
                                    
                                 
                              
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    K
                                 
                              
                           
                         are the model parameters for the unary potential.

The unary potential part computes not only the intermediate representation of superpixels, but also the initial labeling of each superpixel based on local features. However the performance of such labeling may not be satisfactory due to the ambiguity on low level representation. To leverage the semantic context between superpixels and attenuate the ambiguity, we introduce a voting strategy to exploit co-occurrence property of objects within an image. Based on the initial label obtained in Section 3.1, each superpixel casts a vote for its support to all the other superpixels’ class labels given its region size and the confidence of its initial guess, which is defined as follows:
                           
                              (8)
                              
                                 
                                    
                                       φ
                                    
                                    
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             j
                                          
                                       
                                    
                                 
                                 (
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       y
                                    
                                    
                                       j
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       P
                                       (
                                       
                                          
                                             y
                                          
                                          
                                             i
                                          
                                       
                                       |
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                       )
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                       +
                                       P
                                       (
                                       
                                          
                                             y
                                          
                                          
                                             j
                                          
                                       
                                       |
                                       
                                          
                                             s
                                          
                                          
                                             j
                                          
                                       
                                       )
                                       
                                          
                                             S
                                          
                                          
                                             j
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                          
                                       
                                       
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        where P(y
                        
                           i
                        ∣
                           s
                        
                        
                           i
                        ) is the probability of superpixel 
                           s
                        
                        
                           i
                         taking label y
                        
                           i
                         defined in (4) and S
                        
                           i
                         is the size of the superpixel i.

Thus, each superpixel i receives N
                        −1 votes from all the other superpixels for its label assignment y
                        
                           i
                        :
                           
                              (9)
                              
                                 
                                    
                                       V
                                    
                                    
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                                 (
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                          ,
                                          j
                                          ≠
                                          i
                                       
                                       
                                          N
                                       
                                    
                                 
                                 
                                    
                                       μ
                                    
                                    
                                       
                                          
                                             y
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             y
                                          
                                          
                                             j
                                          
                                       
                                    
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             j
                                          
                                       
                                    
                                 
                                 (
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       y
                                    
                                    
                                       j
                                    
                                 
                                 )
                                 .
                              
                           
                        
                     

We define the pairwise potential by aggregating votes of all superpixels for their label assignments 
                           Y
                         and then we have
                           
                              (10)
                              
                                 
                                    
                                       F
                                    
                                    
                                       pair
                                    
                                 
                                 (
                                 X
                                 ,
                                 Y
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    
                                       V
                                    
                                    
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                                 (
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ≠
                                          i
                                       
                                    
                                 
                                 
                                    
                                       μ
                                    
                                    
                                       
                                          
                                             y
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             y
                                          
                                          
                                             j
                                          
                                       
                                    
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             j
                                          
                                       
                                    
                                 
                                 (
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       y
                                    
                                    
                                       j
                                    
                                 
                                 )
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    μ
                                 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          c
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                           
                         are K
                        2 model parameters for pairwise potential, describing the preferences of co-occurrent class pair in the data.

When most of the superpixels are correctly labeled, the co-occurrence property is beneficial to rectify the minor superpixels that are mislabeled. However, as the proportion of mislabeled superpixels increases, it is more likely that the error is propagated to other superpixels due to the voting scheme. To resolve this problem, global constraint on image level is further introduced to confine the possible classes present in an image. However, the existing global consistency potentials are either too simple in expressive power, which only allows regions have a single class label such as Potts [12] and Robust P
                        
                           N
                        -based [14], or too complicated which has to search exponential space of likely combinations of labels such as Harmony potential [9].

We propose a new efficient global constraint which has a better trade-off between expressive power for to heterogeneous regions and the efficiency of searching exponential space of possible label combinations. With the help of multi-class ranking algorithm in [20], we first rank all the object classes from image level and then transform the ranking into soft constraint.

To obtain the multi-class ranking score, each image is represented by kernel descriptor [29] and its corresponding binary label vector 
                           
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                              
                              =
                              {
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                                 
                                    K
                                 
                              
                              }
                              ∈
                              
                                 
                                    {
                                    -
                                    1
                                    ,
                                    +
                                    1
                                    }
                                 
                                 
                                    K
                                 
                              
                           
                        , where K is the total number of object classes, 
                           
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                                 
                                    j
                                 
                              
                              =
                              +
                              1
                           
                         denotes the presence of class j in image I
                        
                           i
                         and 
                           
                              
                                 
                                    l
                                 
                                 
                                    i
                                 
                                 
                                    j
                                 
                              
                              =
                              -
                              1
                           
                         denotes the absence. We aim to learn K classification function f
                        
                           t
                        (I
                        
                           i
                        ), R
                        
                           d
                        
                        →
                        R, t
                        ∈
                        C
                        ={c
                        1,
                        c
                        2,…,
                        c
                        
                           K
                        }, one for each class, such that for any image 
                           
                              I
                              ,
                              
                                 
                                    f
                                 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              (
                              I
                              )
                           
                         scores higher than 
                           
                              
                                 
                                    f
                                 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                              (
                              I
                              )
                           
                         when I is more likely belonging to class c
                        
                           i
                         than class c
                        
                           j
                        .
                           1
                           We use the code available at http://www.cse.msu.edu/bucakser/software.html.
                        
                        
                           1
                        
                     

The ranking score indicates the confidence of assigning specific label to a given image. Although it is informative, the result is still very rough. Therefore, rather than setting a threshold to binary this vector to obtain possible label set as in [13,30], we transform this ranking score into soft constraint using a sigmoid function:
                           
                              (11)
                              
                                 
                                    
                                       θ
                                    
                                    
                                       t
                                    
                                 
                                 (
                                 I
                                 )
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       1
                                       +
                                       a
                                       
                                       *
                                       
                                       exp
                                       (
                                       -
                                       b
                                       
                                       *
                                       
                                       
                                          
                                             f
                                          
                                          
                                             t
                                          
                                       
                                       (
                                       I
                                       )
                                       )
                                    
                                 
                                 +
                                 q
                                 ,
                              
                           
                        where a, b, q are parameters to be learned from a validation set.

Now each image I
                        
                           j
                         can then be represented by a K dimensional vector 
                           
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                              
                              =
                              {
                              
                                 
                                    θ
                                 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                              (
                              
                                 
                                    I
                                 
                                 
                                    j
                                 
                              
                              )
                              ,
                              …
                              ,
                              
                                 
                                    θ
                                 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          K
                                       
                                    
                                 
                              
                              (
                              
                                 
                                    I
                                 
                                 
                                    j
                                 
                              
                              )
                              }
                           
                        . Then this soft constraint is integrated with the unary potential to impose image label prior to superpixels within image I
                        
                           j
                        . Thus the intermediate representation of superpixel defined in (5) can be revised as follows:
                           
                              (12)
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ∼
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       (
                                       
                                          
                                             θ
                                          
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   1
                                                
                                             
                                          
                                       
                                       (
                                       
                                          
                                             I
                                          
                                          
                                             j
                                          
                                       
                                       )
                                       
                                       *
                                       
                                       P
                                       (
                                       
                                          
                                             c
                                          
                                          
                                             1
                                          
                                       
                                       ∣
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                       )
                                       ,
                                       
                                          
                                             θ
                                          
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       (
                                       
                                          
                                             I
                                          
                                          
                                             j
                                          
                                       
                                       )
                                       
                                       *
                                       
                                       P
                                       (
                                       
                                          
                                             c
                                          
                                          
                                             2
                                          
                                       
                                       ∣
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                       )
                                       ,
                                       …
                                       ,
                                       
                                          
                                             θ
                                          
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   K
                                                
                                             
                                          
                                       
                                       (
                                       
                                          
                                             I
                                          
                                          
                                             j
                                          
                                       
                                       )
                                       
                                       *
                                       
                                       P
                                       (
                                       
                                          
                                             c
                                          
                                          
                                             K
                                          
                                       
                                       |
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                       )
                                       )
                                    
                                    
                                       ⊤
                                    
                                 
                                 .
                              
                           
                        
                     

To illustrate the benefit of our proposed soft constraint strategy, we compare it with two alternative global constraint strategies: Top n labels hard constraint and Threshold-t constraint. The Top n constraint selects the most probable n labels for each image according to the rank score vector f computed in the above procedure, other labels are simply discarded. In Threshold-t strategy, instead of selecting a fixed number of labels for each image, we filter out unlikely labels by setting a threshold to the ranking score vector f. We compare with these strategies to show the efficiency of our proposed approach in Section 6.2.

The advantages of transforming multi-label ranking to global constraints can be seen from two aspects: on one hand, the multi-label ranking score inferred from image level is more representative to heterogeneous regions by encouraging multiple labels, compared with the robust p
                        
                           N
                         model [14] which limits their parent node to take only one single label. On the other hand, instead of inferring possible label set of an image from exponential sized power set of labels as in [22], which is intractable and can only be solved by sampling strategy, we can directly compute the ranking scores of every label for an image and it can be integrated directly with prediction results obtained from local features and logistic regression.

Combining all the above development together, we propose the compatibility function as follows:
                           
                              (13)
                              
                                 F
                                 (
                                 X
                                 ,
                                 Y
                                 )
                                 =
                                 
                                    
                                       F
                                    
                                    
                                       unary
                                    
                                 
                                 (
                                 X
                                 ,
                                 Y
                                 )
                                 +
                                 
                                    
                                       F
                                    
                                    
                                       pair
                                    
                                 
                                 (
                                 X
                                 ,
                                 Y
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    
                                       ω
                                    
                                    
                                       
                                          
                                             y
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       T
                                    
                                 
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ∼
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ≠
                                          i
                                       
                                    
                                 
                                 
                                    
                                       ω
                                    
                                    
                                       
                                          
                                             y
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             y
                                          
                                          
                                             j
                                          
                                       
                                    
                                 
                                 
                                    
                                       φ
                                    
                                    
                                       
                                          
                                             s
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             j
                                          
                                       
                                    
                                 
                                 (
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       y
                                    
                                    
                                       j
                                    
                                 
                                 )
                                 .
                              
                           
                        
                     

The compatibility function combines local and global cues and contextual information in a unified framework and makes joint labeling inference, which efficiently attenuates the ambiguity of local appearance similarity and makes the labeling more consistent. We systematically evaluate our model on two challenging datasets for semantic segmentation and compare with state-of-the-art methods in Section 6.

The inference process defined in (1) seeks the most compatible labeling 
                        Y
                      for a given observation 
                        X
                     . Typically the process of maximizing this compatible function can be formulated as an integer programming problem, which is NP-hard in general except some special cases (e.g. K
                     =1) and consequently can only be solved approximately. In this paper, we adopt a greedy search algorithm in an iterative style because of its simplicity. First we rewrite the compatibility function as follows:
                        
                           (14)
                           
                              F
                              (
                              X
                              ,
                              Y
                              )
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                    
                                 
                              
                              
                                 
                                    ω
                                 
                                 
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    T
                                 
                              
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    ∼
                                 
                              
                              +
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       ≠
                                       i
                                    
                                 
                              
                              
                                 
                                    μ
                                 
                                 
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          y
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                              
                                 
                                    φ
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                              (
                              
                                 
                                    y
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    j
                                 
                              
                              )
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                    
                                 
                              
                              {
                              
                                 
                                    ω
                                 
                                 
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    T
                                 
                              
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    ∼
                                 
                              
                              +
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       ≠
                                       i
                                    
                                 
                              
                              
                                 
                                    μ
                                 
                                 
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          y
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                              
                                 
                                    φ
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                              (
                              
                                 
                                    y
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    j
                                 
                              
                              )
                              }
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                    
                                 
                              
                              g
                              (
                              
                                 
                                    y
                                 
                                 
                                    i
                                 
                              
                              |
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    y
                                 
                                 
                                    i
                                    -
                                    1
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    y
                                 
                                 
                                    N
                                 
                              
                              )
                              ,
                           
                        
                     where g(·) is the potential of superpixel x
                     
                        i
                      being labeled y
                     
                        i
                      while the rests are y
                     1,…,
                     y
                     
                        i−1, y
                     
                        i+1,…,
                     y
                     
                        N
                     .

Thus the inference process is described as follows: (1) In each iteration we randomly choose one superpixel and fix all the other superpixels’ labels. (2) We compute the score function g of all K possible classes for this superpixel. (3) If the label with largest score is different with the previous label, then update the label. (4) The iteration stops when no more label changes or reaches max iterations.

Like most greedy search algorithm, the initialization is crucial to the performance. For our case, we found that the local prediction obtained from logistic regression serves as a natural and good start prediction. We initialize our prediction with logistic regression results in Eq. (12) instead of random values. The pseudocode of the above operations is given as follows:
                        Algorithm 1
                        inference algorithm 
                              
                                 
                                    
                                    
                                       
                                          1: Input:
                                       
                                       
                                          2: Image feature I
                                             
                                                j
                                             , superpixels s
                                             
                                                i
                                             , i
                                             =1,…,
                                             N
                                          
                                       
                                       
                                          3: Initialization:
                                       
                                       
                                          4: 
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   =
                                                   
                                                      
                                                         max
                                                      
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         ∈
                                                         C
                                                      
                                                   
                                                   
                                                      
                                                         θ
                                                      
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         I
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                   )
                                                   
                                                   *
                                                   
                                                   P
                                                   (
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   |
                                                   
                                                      
                                                         s
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          5: 
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               x
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                      
                                                      
                                                         ∼
                                                      
                                                   
                                                   =
                                                   (
                                                   
                                                      
                                                         θ
                                                      
                                                      
                                                         
                                                            
                                                               c
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         I
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                   )
                                                   
                                                   *
                                                   
                                                   P
                                                   (
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   |
                                                   
                                                      
                                                         s
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                   ,
                                                   
                                                      
                                                         θ
                                                      
                                                      
                                                         
                                                            
                                                               c
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         I
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                   )
                                                   
                                                   *
                                                   
                                                   P
                                                   (
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   |
                                                   
                                                      
                                                         s
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                   ,
                                                   …
                                                   ,
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                             
                                             
                                                
                                                   
                                                      
                                                         θ
                                                      
                                                      
                                                         
                                                            
                                                               c
                                                            
                                                            
                                                               K
                                                            
                                                         
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         I
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                   )
                                                   
                                                   *
                                                   
                                                   P
                                                   (
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         K
                                                      
                                                   
                                                   |
                                                   
                                                      
                                                         s
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          6: rebeat
                                          
                                       
                                       
                                          7:
                                             
                                             for all superpixel s
                                             
                                                i
                                              
                                             do
                                          
                                       
                                       
                                          8: 
                                             
                                             
                                                
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         ∗
                                                      
                                                   
                                                   =
                                                   
                                                      
                                                         max
                                                      
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         ∈
                                                         C
                                                      
                                                   
                                                   g
                                                   (
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   |
                                                   
                                                      
                                                         
                                                            
                                                               x
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                      
                                                      
                                                         ∼
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ,
                                                   …
                                                   ,
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                         -
                                                         1
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                         +
                                                         1
                                                      
                                                   
                                                   ,
                                                   …
                                                   ,
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         N
                                                      
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          9: 
                                             
                                             if 
                                             
                                                
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         ∗
                                                      
                                                   
                                                   ≠
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                              
                                             then
                                          
                                       
                                       
                                          10: 
                                             
                                             update 
                                                
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         ∗
                                                      
                                                   
                                                   →
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          11: 
                                             
                                             end if
                                          
                                       
                                       
                                          12: 
                                             end for
                                          
                                       
                                       
                                          13: until no label changes OR reaches max interactions
                                       
                                       
                                          14: return 
                                             
                                                
                                                   Y
                                                   =
                                                   {
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ˆ
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   |
                                                   i
                                                   =
                                                   1
                                                   ,
                                                   …
                                                   ,
                                                   N
                                                   }
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Because the inference is conducted directly on superpixels instead of pixels, the number of variables is significantly reduced, typically from tens of thousands (e.g. an image of 400*300 pixels) to several hundred(usually 100–300 superpixels per image). Therefore the inference algorithm converges very fast, typically less than 15 iterations.

In this section, we discuss how to learn the proposed model 14, i.e., the model parameters 
                        ω
                     . To find the optimal solution 
                        ω
                     
                     ∗, we follow the idea in [27] for structured output prediction, and consider the following maximum-margin optimization problem:
                        
                           (15)
                           
                              
                                 
                                    
                                       
                                          
                                             min
                                          
                                       
                                    
                                    
                                       
                                          
                                          
                                             
                                                1
                                             
                                             
                                                2
                                             
                                          
                                          ‖
                                          ω
                                          
                                             
                                                ‖
                                             
                                             
                                                2
                                             
                                          
                                          +
                                          
                                             
                                                C
                                             
                                             
                                                n
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                
                                             
                                          
                                          
                                             
                                                ξ
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          s
                                          .
                                          t
                                          .
                                       
                                    
                                    
                                       
                                          
                                          ∀
                                          i
                                          
                                          
                                             
                                                ξ
                                             
                                             
                                                i
                                             
                                          
                                          ⩾
                                          0
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                          ∀
                                          
                                             
                                                Y
                                             
                                             
                                                ^
                                             
                                          
                                          ∈
                                          Ω
                                          ⧹
                                          
                                             
                                                Y
                                             
                                             
                                                ‾
                                             
                                          
                                          ,
                                          〈
                                          ω
                                          ,
                                          δ
                                          φ
                                          (
                                          X
                                          ,
                                          
                                             
                                                Y
                                             
                                             
                                                ‾
                                             
                                          
                                          ,
                                          
                                             
                                                Y
                                             
                                             
                                                ^
                                             
                                          
                                          )
                                          〉
                                          ⩾
                                          Δ
                                          (
                                          
                                             
                                                Y
                                             
                                             
                                                ^
                                             
                                          
                                          ,
                                          
                                             
                                                Y
                                             
                                             
                                                ‾
                                             
                                          
                                          )
                                          -
                                          
                                             
                                                ξ
                                             
                                             
                                                i
                                             
                                          
                                          ,
                                       
                                    
                                 
                                 
                                    
                                       
                                    
                                 
                              
                           
                        
                     where 
                        
                           δ
                           φ
                           (
                           X
                           ,
                           
                              
                                 Y
                              
                              
                                 ‾
                              
                           
                           ,
                           
                              
                                 Y
                              
                              
                                 ^
                              
                           
                           )
                           =
                           φ
                           (
                           X
                           ,
                           
                              
                                 Y
                              
                              
                                 ‾
                              
                           
                           )
                           -
                           φ
                           (
                           X
                           ,
                           
                              
                                 Y
                              
                              
                                 ^
                              
                           
                           )
                           ,
                           
                           
                              
                                 ξ
                              
                              
                                 i
                              
                           
                        
                      is a slack variable which becomes non-zero when the margin is violated, 
                        
                           
                              
                                 Y
                              
                              
                                 ‾
                              
                           
                        
                      is the ground truth label of the given image and Ω is the structured output space. 
                        
                           Δ
                           (
                           
                              
                                 Y
                              
                              
                                 ^
                              
                           
                           ,
                           
                              
                                 Y
                              
                              
                                 ‾
                              
                           
                           )
                        
                      is the loss function that quantifies how incorrect the prediction 
                        
                           
                              
                                 Y
                              
                              
                                 ^
                              
                           
                        
                      is when 
                        
                           
                              
                                 Y
                              
                              
                                 ‾
                              
                           
                        
                      is the correct output value.

One intuitive form of the loss function is 0–1 loss on each superpixel:
                        
                           (16)
                           
                              Δ
                              (
                              
                                 
                                    Y
                                 
                                 
                                    ^
                                 
                              
                              ,
                              
                                 
                                    Y
                                 
                                 
                                    ‾
                                 
                              
                              )
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                    
                                    
                                       N
                                    
                                 
                              
                              (
                              1
                              -
                              δ
                              (
                              
                                 
                                    
                                       
                                          y
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    
                                       
                                          y
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              )
                              )
                              ,
                           
                        
                     where δ takes 1 when two values are identical and 0 otherwise.

However loss function defined in (16) penalizes incorrect superpixel labeling equally without taking into account the region size. Thus the loss of a large mislabeled superpixel is equal to the loss of a very small one. We then derive a more appropriate loss function as follows:
                        
                           (17)
                           
                              Δ
                              (
                              
                                 
                                    Y
                                 
                                 
                                    ^
                                 
                              
                              ,
                              
                                 
                                    Y
                                 
                                 
                                    ‾
                                 
                              
                              )
                              =
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                       
                                       
                                          N
                                       
                                    
                                    
                                    η
                                    
                                       
                                          S
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    1
                                    -
                                    δ
                                    (
                                    
                                       
                                          
                                             
                                                y
                                             
                                             
                                                ˆ
                                             
                                          
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          
                                             
                                                y
                                             
                                             
                                                ‾
                                             
                                          
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    )
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                       
                                    
                                    
                                       
                                          S
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              ,
                           
                        
                     where S
                     
                        i
                      is the area of superpixel i and η is a weight factor to be learned from cross validation.

Because the structured output space Ω to be sought grows exponentially with the numbers of superpixels N and object classes K, the number of constraints in (15) is also exponentially large which makes it impossible to optimize directly. Current state-of-the-art approaches typically use cutting plane algorithm proposed by Joachims et al. [19] and their implementation SVM Struct package.
                        2
                        The code is available on http://svmlight.joachims.org/svm_struct.html.
                     
                     
                        2
                      For a better efficiency, we follow a variant implementation of the cutting plan algorithm presented in [31]. The learning algorithm aims at finding a small set of constraints that ensures a sufficiently accurate solution. It starts with an unconstrained optimization problem as a relaxation of original problem and maintains a working set W
                     
                        i
                     . In each iteration through the training process, the “most violated” constraint is selected and then added to the existing working set if certain condition is satisfied. Once a constraint is added, we optimize the problem again to get new solution. Iteration stops when no constraint has changed or objective precision has reached.

@&#EXPERIMENTAL RESULTS@&#

In this section, we evaluate the proposed method on two benchmarking datasets, the MSRC-21 Dataset [32] and the Stanford Background Dataset (SBD) [33], which are widely used for semantic image segmentation evaluation. MSRC-21 consists of 591 images in 21 classes: building, grass, tree, cow, sheep, sky, airplane, water, face, car, bicycle, flower, sign, bird, book, chair, road, cat, dog, body, and boat, where the ground truth is provided at pixel level. A void label is included to avoid the membership ambiguity of pixels on object boundaries, which is typically ignored in training and evaluation. Following [2], we divide MSRC-21 into 45% for training, 10% for validation, and 45% for test. SBD is mostly used for background understanding, where various foreground objects, including car, cow, book, boat, chair, person, et al., are merged into one foreground class. It contains 715 images chosen from the following public datasets: LabelMe [34], MSRC-21 [32], PASCAL VOC [35], and Geometric Context [36]. Eight category labels were obtained using Amazon’s Mechanical Turk (AMT), which include sky, tree, road, grass, water, building, mountain, and foreground.

Though over-segmentation is widely adopted as a key preprocessing in semantic segmentation, its impact on subsequent learning is rarely evaluated. In this section, we test the influence of four popular over-segmentation techniques, including Mean Shift (MS) [3], Felzenszwalb and Huttenlocher’s efficient graph-based segmentation (FH) [4], SLIC [5], and TurboPixel (TP) [6]. Note that different methods perform segmentation differently, as shown in Fig. 1, where each image is segmented into about 150 superpixels, MS and FH tend to generate larger superpixels in coherent regions and smaller superpixels in complex regions, while SLIC and TurboPixel appear to produce grid-style balanced superpixels. The question is how such difference in over-segmentation can affect later superpixel labeling. To this end, we consider the task of labeling the superpixels from different over-segmentation methods using Logistic Regression. Particularly, to stress the role of over-segmentation, no pairwise or global contextual information is incorporated. We use MSRC-21 in this experiment. For the feature representation of superpixels, we combine appearance-based and bag-of-word descriptors (see Section 3.1).

The appearance-based descriptor has 238 features, consisting of (1) color features computing the mean, standard deviation, skewness, and kurtosis statistics of RGB, Lab, and YCrCb color-space channels and gray image (4×10 dimensions); (2) texture features computing the same statistics of 48 filter responses (4×48 dimensions), including first and second derivatives of Gaussian and Laplacian-of-Gaussian with various orientations and scales; (3) shape features (3 dimensions); and (4) location features (3 dimensions). To build a bag-of-word (BoW) representation, we divide an image into 16×16 pixel cells with 75% overlap. Each cell is captured by a 128-dimensional SIFT descriptor. The dictionary size is 400 visual words built with K-means clustering and these descriptors are then quantized using nearest neighbor. To represent a superpixel, we concatenate the BoW representations of the superpixel and the region around it, giving a BoW feature vector of length 2×400=800. The overall representation of each superpixel is thus of 238+800=1038 dimensions.

A Logistic Regressor is trained on the training set obtained by standard split of MSRC-21 dataset, where the cost parameter is set to C
                        =25. For evaluation metric, we follow [17] to use the global accuracy, which is the proportion of correctly labeled pixels to all the pixels considered (excluding pixels with void label):
                           
                              (18)
                              
                                 accuracy
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                          
                                       
                                       
                                          
                                             N
                                          
                                          
                                             ii
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                       
                                          
                                             N
                                          
                                          
                                             ij
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        where N
                        
                           ij
                         is the number of pixels of label i (ground-truth) being labeled as j.

The results are shown in Fig. 2
                        (a), where different numbers of superpixels are tested. We can see that the results associated with FH, SLIC and TP are relatively robust when the number of superpixels is greater than 50, compared to that of MS. Overall, FH performs slightly better than the rest, and is adopted later in our structured prediction model.

Moreover, we computer the performance of different segmentations by assigning the dominant labels to superpixels as shown in Fig. 2(b). It can be seen that the accuracies increase with the number of superpixels as expected. That’s because the greater the granularity, the better the segmentation coincides with the border. On the other side, we can see that the performance of image semantic segmentation (Fig. 2(a)) doesnt monotonically increase with the number of superpixels.

In this section, we evaluate the impact of multi-label ranking as global constraints on semantic segmentation, by integrating the global constraints into the experiment in the last section. We compare three ways of using label ranking, Top n constraint, Threshold constraint, and our proposed soft constraint (see Section 3.3).

In order to capture complementary image properties, we propose to use different features for multi-label ranking, w.r.t. the local features for superpixels (see Section 3.1). We adopt kernel descriptors [29] for holistic image representation, which construct kernel descriptors from gradient, color, and local binary pattern match kernels using kernel principal component analysis (KPCA). Following the setting in [29], an image is divided into 16×16 pixel patches with 50% overlap to extract low level features. We compute image-level features using efficient match kernels (EMK) on 1×1, 2×2, and 4×4 pyramid sub-regions, and perform constrained kernel singular value decomposition (CKSVD) with 1000 visual words learned by K-means. Overall, each image is represented by a 84,000-dimensional feature vector.

We adopt the efficient multi-class ranking algorithm [20] to learn K classification functions f
                        
                           t
                        (I
                        
                           i
                        ): R
                        
                           d
                        
                        →
                        R, t
                        ∈
                        C
                        ={c
                        1,
                        c
                        2,…,
                        c
                        
                           K
                        }, one for each class, with the goal that for any image 
                           
                              I
                              ,
                              
                              
                                 
                                    f
                                 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              (
                              I
                              )
                           
                         scores higher than 
                           
                              
                                 
                                    f
                                 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                              (
                              I
                              )
                           
                         when I is more likely to belong to class c
                        
                           i
                         than to class c
                        
                           j
                        . We compare the kernel descriptor with the widely used spatial pyramid matching (SPM) representation with similar settings. The results measured by ROC curve are shown in Fig. 3
                        , where the area under curve (AUC) of SPM is 90.3%, while the AUC of the kernel descriptor increases to a higher 94.3%.

Now we are ready to report results after the integration of multi-labeling ranking. Recall that the Top n constraint considers only the top n labels for each image according to the ranking scores, while Threshold-t constraint retains those with scores greater than t. In contrast, our method converts the ranking scores to soft constraint using the sigmoid function defined in Eq. (11) (here we set a
                        =3, b
                        =
                        −3, q
                        =
                        −0.4). Either hard or soft constraint is combined with Logistic Regression as in Eq. (12) and the labels of superpixels can be inferred by Eq. (6). The results are shown in Table 1
                        . We can see that the proposed soft constraint method outperforms the other two hard constraint alternatives under various parameters.

In this section, we report our structured prediction results on MSRC-21. We also report the results obtained by combining local unary features and Logistic Regression, with or without global constraints, where no pairwise co-occurrence information is incorporated. For comparison, we show the results of six state-of-the-art methods, taken from [22,30,9,37,17]. The overall results are summarized in Table 2
                        .

From Table 2, we can see that using local unary features and Logistic Regression yields a baseline of 73% pixel-wise global accuracy and 59% average per-class accuracy. Note that in this baseline, the label of a region (i.e., a superpixel) is decided by its appearance alone. By integrating the multi-label ranking results, we improve the global accuracy by 6% and average accuracy by 9%. This shows that global cues can effectively guide the labeling of local regions by substantially reducing potential classes to be considered during labeling. This is because region labels will be strengthened if they are consistent with the global ranking and suppressed otherwise. By further refining the labeling with pairwise co-occurrence information using structural SVMs framework, we achieve 84% global accuracy and 76% average accuracy, which are highly competitive compared to the results reported in previous methods, although our model is much simpler and efficient in that we decouple the global constraint from pairwise potential in joint inference and instead integrate it with the local prediction from Logistic Regression (Section 3.1).

Considering the per-class accuracy, we obtained very good performance on classes such as grass, sky, flower, which can be inferred easily from local appearance and their accuracies are above 95%. For some difficult classes, such as bird and boat, the accuracies are less than 40%, due to the similar appearance, various sizes, and complex background.


                        Fig. 4
                         shows example results of our model. Consider the images shown in Fig. 4(a), the labeling results obtained by applying Logistic Regression on local appearance features are shown in Fig. 4(b), where the label of a region is decided by its appearance feature alone. Taking the first image for example, it can be seen that partial regions of the bird were mislabeled as dog, cat, sheep or even road because of the ambiguity of local appearance. Then the multi-label ranking results give higher confidence to labels like grass, bird and dog and suppress the presence of road, sheep and cat as in Fig. 4(c). Finally, by introducing co-occurrence property, most of regions labeled as bird would surpress the presence of dog in an image because these two classes rarely present at the same time. Fig. 4(d) shows the labeling results obtained by our final structured prediction and post-processing by grouping superpixels into a larger group, and it can be seen that the final results are much more clean and consistent.

The proposed method is very efficient. It takes about 800s for training structural SVMs on a training set of 335 samples in MSRC-21, and takes about 1s for labeling one test image. These results are running in MATLAB 7.10.0(R2010a) 64bit on a laptop with 2.67GHz i5 CPU and 8GB RAM.

In this section, we report our results on SBD. We follow [33] to perform 5-fold cross-validation with the dataset randomly divided into 572 training images and 143 test images for each fold. The results are shown in Table 3
                        . We can see that our structured prediction model preforms favorably compared to other state-of-the-art methods. We also observed that the incorporation of the global label-ranking, although useful, did not improve the performance significantly. This probably can be explained from two aspects: First, in SBD the foreground class includes a wide range of object classes such as person, car, cow, sheep, bicycle, and their appearances vary drastically among classes, making it very difficult to model the appearance; Second, the number of classes in SBD is much less than MSRC-21 and therefore the multi-label ranking and co-occurrence statistics may be less informative. Beside forground, another challenging class is mountain, which has few instance in the dataset, making it very hard to label correctly.

Some example results of our model are shown in Fig. 5
                        , where we can see that local labeling is not sufficient to address the appearance ambiguity (Fig. 5(b)). In the presence of pairwise and global cues, the labeling becomes more robust, as shown in Fig. 4(d).

@&#CONCLUSION@&#

We have presented a new structured prediction model for semantic segmentation. Traditional structured prediction frameworks using pairwise constraints alone suffer degeneration when a notable number of regions within an image are wrongly labeled in the early stage prediction by Logistic Regression, because the wrong contextual information of mislabeled regions may propagate to correct ones. Therefore it is necessary to confine possible labels from image-level. We utilized the multi-label ranking score and converted it to soft global constraint, which encourage the presence of some likely labels while suppress the presence of unlikely labels. Compared with other existing global constraint schemas, we decoupled the global constraint with pairwise constraint and integrated with unary potential directly, making it much simpler while remain efficiency. The proposed model was evaluated on two challenging datasets and experiments showed that our model obtained highly competitive performance compared with the state-of-the-art results.

In the future work, we plan to integrate multi-source cues such as depth into structural SVMs framework. So far we only consider extracting multi-scale cues from single source, that is the optic image. Features from multiple sources could contain complementary information and be potentially useful for prompting performance.

@&#ACKNOWLEDGMENTS@&#

This work was supported by the National Key Project for Basic Research of China (2013CB329403), Nature Science Foundation of China (No. 61373076), the Fundamental Research Funds for the Central Universities (No.2013121026), and the 985 Project of Xiamen University.

@&#REFERENCES@&#

