@&#MAIN-TITLE@&#Road Accident Proneness Indicator Based On Time, Weather And Location Specificity Using Graph Neural Networks 

@&#KEYPHRASES@&#
Graph Neural Network, Machine Learning, Safety Index, Principal Component Analysis, Road accident indicator, Time, Weather, Location
@&#ABSTRACT@&#
In this paper, we present a novel approach to identify the Spatio-temporal and environmental features that influence the safety of a road and predict its accident proneness based on these features. A total of 14 features were compiled based on Time, Weather, and Location (TWL) specificity along a road. To determine the influence each of the 14 features carries, a sensitivity study was performed using Principal Component Analysis. Using the locations of accident warnings, a Safety Index was developed to quantify how accident-prone a particular road is. We implement a novel approach to predict the Safety Index of a road- based on its TWL specificity by using a Graph Neural Network (GNN) architecture. The proposed architecture is uniquely suited for this application due to its ability to capture the complexities of the inherent nonlinear interlinking in a vast feature space. We employed a GNN to emulate the TWO feature vectors as individual nodes which were interlinked vis-à-vis edges of a graph. This model was verified to perform better than Logistic Regression, simple Feed- Forward Neural Networks, and even Long Short Term Memory (LSTM) Neural Networks. We validated our approach on a data set containing the alert locations along the routes of inter-state buses.
The results achieved through this GNN architecture, using a TWL input feature space proved to be more feasible than the other predictive models, having reached a peak accuracy of 65%. 
 
 

@&#INTRODUCTION@&#
Road accidents account for a high fraction of mortality and account for the deaths of approximately 1 million people annually. This makes motor vehicle collisions the leading cause of injury and death among children 10–19 years old, worldwide (260,000 children die a year, 10 million are injured)[2]. Middle-income countries have the highest rate with 20deaths per 100,000 inhabitants, accounting for 80% of all road fatalities with 52% of all vehicles [3]. These accidents also result in a substantial amount of non-fatal injuries and property loss. The global economic cost of motor vehicle collisions was estimated at $518 billion per year in 2003.Traffic collisions affect the national economy as the cost of road injuries is estimated to account for 1.0% to 2.0% of the Gross National Product (GNP) of every country each year [4].Comprehensive studies on accident analysis and prevention thus become imperative.Being able to predict how accident-prone a location is,can reduce the risk of calamity. Predictive models based on historical data have been employed to address this issue. However, the majority of existing research on accident prediction is based on human error and behavioral patterns [5], [6].The cause of accidents, however, may be influenced by a wide spectrum of factors. Bollapragada et al. [7] classified the various reasons for the causes of road accidents and also examined through models about the relationship. A study byJaroszweski et al [8] showed the effects of adverse weather, on-road hazards, confirming a strong correlation between environmental conditions and accidents.In this paper, a novel approach using 14 Spatio-temporal factors based on time, weather, and location (TWL) to predict the accident proneness of a road, is presented. The features of the data-set include alarm type, date, time, latitude, longitude,and speed. Spatio-temporal weather and altitude data was gathered using World Weather Online API. Reverse geocoding was then performed to obtain the names of the roads using OpenStreetMap’s Nominatim API. Subsequently, a Safety Index was calculated using the spatial concentrations of warn-ings. A detailed exploratory study and Principal ComponentAnalysis was performed to determine the correlation of the 14distinct features relating to weather conditions, time, altitude,and speed with the safety index. A Graph Neural Network(GNN) was then used to employ a neighborhood aggregation scheme, where the node’s representation vector is calculated by recursively aggregating and transforming the representation vectors of its neighboring nodes [9]. This approach gives a better accuracy compared to a simple Feed-Forward network, Logistic Regression, and LSTM.

@&#METHODOLOGY@&#

To predict the accident proneness of a location, a 3 step approach was employed. The data set was first pre-processed and augmented with relevant TWL statistics. Features of weather were compiled using the World Weather API. The Data was then normalized with respect to the number of times a particular road had been used. The concentrations of collision warnings in every 1-kilometer radius were calculated using the Haversine formula. Subsequently, a Safety Index was
computed to quantify the accident proneness of a location. In The second step, an exploratory study including Principal Component Analysis was conducted to understand the influence of various features on the accident proneness. Finally, multiple predictive models were examined to accurately forecast the Safety Index of a new data entry.

@&#DATASET@&#
The research was initiated with a data set describing features of the journeys of buses along different roads shown below.•deviceId: It is used to uniquely identify a bus. The dataset consists of 9 unique buses.•alarmType: It indicates the type of alert recorded by the sensor. There are five different types of alerts:1) HEADWAY MONITORING WARNING (HMW):The headway monitoring warning (HMW) helps drivers maintain a safe following distance from the vehicle ahead of them by providing visual and audible alerts if the distance becomes unsafe.2) PEDESTRIANS AND CYCLIST DETECTION AND COLLISION WARNING (PCW): The PCWnotifies the driver of a pedestrian or cyclist in the danger zone and alerts drivers of an imminent collision with a pedestrian or cyclist.3) FORWARD COLLISION WARNINGS (FCW):FCW provides an alert before a possible low-speed collision with the vehicle in front, thus assisting the driver at a low speed in densely heavy traffic.4) STOPPAGE - stoppage alert is raised when the bus halts.5) HIGH BRAKE (HB): High Brake alert is raised when the driver brakes suddenly without slowing down.•recorded_at_hour: the hour of the day at which the alert was recorded.•recorded_at_date: the date at which the alert was recorded.•recorded_at_time: the exact time of the day at which the alert was recorded.•AM/PM: to determine if the alert was raised before midday or after midday.•latitude: the latitude at which the alert was raised.•longitude: the longitude at which the alert was raised•speed: speed of the bus at which the alert was raised.

@&#FEATURE_EXTRACTION@&#
Using the features present in the original data-set, multiple other features were extracted.•Altitude: the altitude at which the alert was raised was extracted using the Digital Elevation Model(DEM) database.•Address and Name of Road: The address and the road at which the alert was raised was obtained by reverse geocoding the coordinates using OpenStreetMaps Nominatim API.•Weather features: 24 weather features that include-maxtempC, mintempC, sunHour, uvIndex,moon_illumination, moonrise, moonset, sunrise, sunset,DewPointC, FeelsLikeC, HeatIndexC, WindChillC, Wind Gust mph, cloudcover, humidity, precipMM, pressure, tempC, visibility, windir Degree and windspeed mph were extracted using the WorldWeather Online (WWO) API. These features were appended to the original data set and visualized.

@&#SAFETY_INDEX@&#
The Safety Index is a metric defined to determine the acci-dent proneness of a particular location. For every location, the number of warnings in a one-kilometer radius was calculated using the Haversine formula.Distance=2r∗arcsin(√hav(φ2−φ1) +cos(φ1)cos(φ2)hav(λ2−λ1))(1)The number was then normalized based on the number of trips, by the buses, through a particular location, and a non-linear transformation was applied on it. The output of which is an integer from 1 to 5. This integer is the safety index value and assigned to the location as a new feature. If a location has a safety index rating of 1, it implies that there was a relatively lower number of collision warnings, within a 1 km radius of that location. Ergo the area is less accident-prone. Similarly, a
Analysis rating of 5 implies that a location is more prone to accidents due to a high concentration of collision warnings in its vicinity.The integers from 1 to 5 indicate the level of susceptibility to accidents.


@&#PCA_AND_EXPLORATORY_DATA_ANALYSIS@&#
The normalized features of the data set were used to draw useful insights through an exploratory study.Correlation plots between each individual feature and the Safety Index indicated the influence, a feature had on the accident proneness at a particular location. Principal Component Analysis was applied to the feature vectors to calculate the 2 vectors which represent the directions of the highest variance of the data. These vectors were chosen as the axes on a Bi-graph, on which the features were plotted. Fig 3 represents the average number of collision warnings among different roads obtained from reverse geocoding using OSM’s Nominatim API.Fig 4 represents the percentage of the total amount of collision warnings on a road after normalization.

@&#PREDICTIVE_MODELLING@&#
In the following sections, we use various Machine Learning approaches to model the complex interconnected input feature space- comprising the 14 dimensions of the TWO parameter list- to the output the safety index value between 1-5.

@&#LR@&#
First, the problem statement was treated as a classification problem. In a binomial classification approach, the labels are assumed to be binary, indicating accident proneness (or not) using a 1 and 0. While an approach using the maximum likelihood estimation- where the dependent variable followed the Bernoulli Distribution- through a Logistic Regression model is logically correct, it is not accurate due to the simplicity of the model.
When the safety index is considered as a label, ranging from 1-5, this becomes a multinomial classification problem, with the logistic regression model performing even more poorly. 

@&#FFNN@&#
By increasing the complexity of the LR, with the use of hidden layers, the Feed Forward Neural Network (FFNN) was employed to model a safety index from a linear set of 14 independent inputs corresponding to the TWL specificities. However, this simple forward movement of information, adhering to delta rule and gradient descent methods, does not model the dependencies of the 14 interconnected vectors, with respect to its neighborhood 
The particular model used in this paper followed the backpropagation algorithm in accordance with Eqn. 5. The model was constructed using 2 Dense layers, each with 200 neurons each. The first 2 layers had an activation function of ReLu, whereas the last layer had an activation function of Softmax. The Adam optimizer from Keras was used during compilation while using Area Under Curve as the accuracy metric.

@&#LSTM@&#
To better the information persisting mechanism, the network was induced with loops, resulting in the LSTM approach. While this approach maintains information across a time series through a multiple copy method, it does not maintain the complexity of the relationship between the 14 parameters itself. The particular model used in this paper followed the current history and previous history formulae of RNNs. The model was constructed using 2 Dense layers, each with 200 neurons each. The first 2 recurrent layers had an activation function of ReLu, whereas the last layer had an activation function of Softmax. The Adam optimizer from Keras was used during compilation, while using Area Under Curve as the accuracy metric.

@&#GNN@&#
To overcome the limitations of the previous models, the dependency between the 14-dimensional feature space and the associated accident proneness (or Safety Index) label has to be maintained across an arbitrary depth. 


Thus, a Graph Neural Network (GNN) was used to employ a unique non-Euclidean data structure approach, using machine learning, which would focus on node classification, link prediction, and clustering. Graph data structures model a set of objects (nodes) and their relationships (edges). It works as a neighborhood aggregation scheme, where the node's representation vector is calculated by recursively aggregating and transforming the representation vectors of its neighboring nodes. 
 
The architecture of GNNs was first proposed in [14], which is an extension from the existing neural networks for processing the data represented in graph domains. In a graph, each node is defined by its features and
the related nodes. The objective of GNN is to learn the state
embedding $h_v \in R_s$ that contains the information and details of
the neighborhood for each node. The state embedding $h_v$ is an
s-dimension vector of node v and is used to produce
an output $o_v$ such as the node label. f denotes a parametric
function, called local transition function, which is shared among
all nodes and updates the node state according to the input
neighborhood. 
The motivation for such a model stems from the comprehensive reviews on establishing a generalized method for the well-performing Convolutional Neural Networks (CNNs). CNN's extract multi-scale localized spatial features and compile them to build highly expressive representations, which
led to breakthroughs in almost all machine learning areas
and started the new era of deep learning [16]. The key takeaways from such an approach are the ideas of - local connection, shared weights and the use of multi-layer.[14] These are also of great importance in solving
problems of graph domain, because 1) graphs are the most
typical locally connected structure. 2) shared weights reduce
the computational cost compared with traditional spectral
graph theory [17]. 3) multi-layer structure is the key to deal
with hierarchical patterns, which captures the features of
various sizes. 
The limitation is that, CNNs can only operate on regular
Euclidean data like images and text- 2D grids and 1D sequences respectively- 
while these data structures can be regarded as instances of
graphs. Therefore, a generalization to such a CNN architecture is used, in the form of a GNN.

Another key aspect of such an approach would be the means of message passing. Graph embedding is an approach that is used to transform nodes, edges, and their features into vector space (a lower dimension) whilst maximally preserving properties like graph structure and information. Graphs are tricky because they can vary in terms of their scale, specificity, and subject.

Once the conversion of nodes and edges are completed, the graph performs Message Passing between the nodes. This process is also called Neighbourhood Aggregation because it involves pushing messages (embedding) from surrounding nodes around a given reference node, through the directed edges.

Sometimes, different neural networks are used for various types of edges; one for unidirectional and another for bidirectional. This way, the structure still captures the spatial relationship between nodes.
In the context of GNNs, for a single reference node, the neighboring nodes pass their messages/embedding through the edge neural networks into the recurrent unit on the reference node. The new embedding of the reference recurrent unit is updated by applying said recurrent function on the current embedding and a summation of the edge neural network outputs of the neighboring node embedding. Fig. 6 shows an illustration of this process where the blue square is a simple feed-forward NN applied on the embedding (white envelopes) from the neighboring nodes. The recurrent function (pink triangle) applied to the current embedding (white envelope) and summation of edge neural network outputs (black envelopes) to obtain the new embedding (white envelope prime).
This process is performed, in parallel, on all nodes in the network as embedding in layer L+1 depends on embedding in layer L. Which is why, in practice, there is no need to ‘move’ from one node to another to carry out Message Passing.
Also, the sum over the edge neural network outputs (black envelopes in the diagram) is invariant of the order of the outputs.
 
 The GNN model used in this particular paper follows the above-mentioned procedures of message passing, from layer to layer, while keeping the structure of the graph -in terms of input and output shape- similar. The unidirectional approach used here, follows a batch processing schema, where each batch consists of 20 graphs. Each graph pertains to a particular bus, traveling on a particular road, on a particular day. The individual nodes of this graph are the individual alert events that occurred for \textit{that} bus, on \textit{that} road, on \textit{that} day. Each event, in turn, comprises the 14-dimensional feature space, relating to the TWO parameters. The ordering of such events across the nodes is handled by the edges, which are time-series dependent and are thus directional in nature. The natural order being from the oldest event of the day, to the latest event of the day. Finally, a label- derived from the collision concentrations- is assigned to each graph, denoting the accident proneness on a scale of 1-5. 
 The architecture constructed is the first of its kind and is novel, as it employs a method of using a sequence of trainable graphs, each of which is attributed to a safety index. The identity- Session ID- is a string constructed by considering the device ID of the bus, the name of the road it traveled on, and that particular date (in standard format). Thus the Session IDs are unique to busses traveling on a given road, based on the dates.
 An Event is then defined using a vector squashing function. The squashing function takes into account the individual vectors which were considered as inputs to a model, as defined by the Principal Component Analysis. A total of 14 vectors, placed (logically) one above the other are finally squashed to a single 14-dimensional vector. This is treated as the Event Vector's feature space. Each event is a 14-dimensional feature space, corresponding to the respective TWL parameters, for a given time instant. 
 Next, the Session IDs are then made to correspond to a time-series ordered set of Events (that happened on that given day). Directed edges based on the time series of events, are then used to fit the structure onto a graph.
 
 Finally, a Label (binary or 1-5; based on the model) is attributed to each Session ID, which denotes the Accident Proneness or the Safety Index of the road respectively. This would serve analogous to the set of output labels present in the training data-set of any traditional Neural Network.
 
 This entire architecture is used to train and model a GNN, to predict accident proneness and safety index of a road, based on the TWL feature space (14 in number).
 
 The architecture is represented in Figure 7.
 Individual batches are graph convoluted, and follow the graph message passing through a private self-implemented GraphConv (refer Pytorch) layer, termed SageConv. 

 where x is node embedding, e is edge feature,

@&#RESULTS@&#
After normalizing the data, a PCA and an exploratory study identified 14 TWL features that influence the safety of a road. These features were used to train various machine learning models, explained in the previous section, to be able to predict the safety index value of a new location. 


Fig 8 shows the result of using logistic regression. An accuracy of 38.7% is achieved for the test data after training the model.

Fig 9 shows the result of using a simple feed-forward neural network. This method returns poor results, converging to an accuracy of below 14.93%


Fig 10 displays the result of using a type of recurrent neural network (LSTM). This method shows better results than logistic regression due to its ability to preserve and utilize historical data. It converges to an accuracy of 42.6%.


Table describes the output log of the Graph Neural Network. The training result is shown to converge after approximately 60 epochs. A significantly higher accuracy of 65% is achieved using a GNN. The difference in performance can be attributed to the GUNN's inherent ability to link and process information in a higher dimensional feature space than the previously tested methods. Hence the GNN was experimentally validated to produce better results for our application.
The modelling works to comprehend a complex network of information between the 14 dimensions of the TWO feature space, and predict an associated label from 1 to 5- which denotes the safety index. As is seen through the accuracy log via the area under curve metric, the theoretical results are validated. While it does not directly speak about the generalization ability of GNNs, it is reasonable to notice that GNNs with strong expressive power can accurately capture such graph structures of interest and model them well. This shows that treating the feature space and respective alerts, as a graph with a time series ordered set of events as nodes- across a particular road on a specific day for every bus- is a valid approach to solving this problem statement. 

@&#CONCLUSION@&#
 The prediction of road accidents is associated with a high degree of uncertainty due to human error accounting for a major fraction of the causes.
 In this paper, the accident proneness of a road caused by environmental and non-human dynamic factors has been predicted. The concentrations of collision warnings, after normalization and development into a "Safety Index", was used as an indication as to the vulnerability of a location to road accidents. The influence features associated with time, weather, and location was quantified based on the effect they had on the Safety Index and Accident Proneness. Multiple machine learning models were tested on the data to predict the Safety Index of a location-based on TWL characteristics. The Graph Neural Network approach achieved the best results with an accuracy of 65% on untrained data. The reason for not achieving an even higher accuracy, can be attributed to the randomness associated with human error in many accidents. Future models could also use a different algorithm on fitting the connections of this graph structure, to try yielding better results. One such approach could be by setting the connections and ordering of events (nodes) of the graph - instead of just following a time series order- to follow the 3D distance formula by including the latitude and longitude along with time, as parameters to decide the next node. 

@&#ACKNOWLEDGEMENTS@&#

This work was done in part under the Intel Corporation Student Contest 2020 in association with the Center for Innovation and Entrepreneurship (CIE) at PES University. We acknowledge all the support from Intel Corporation towards this work. For this, we would like to thank the CIE of PES University and our mentors from Intel Corporation for providing us with this opportunity and for their continuous support. We extend our thanks to PES University, who provided us a platform that helped us to team up and pursue this project. We also thank Asif Qamar, for his help in giving us certain key insights. Special thanks to Madhukar Narasimha and Sathya Prasad for their constant guidance.

@&#REFERENCES@&#
