@&#MAIN-TITLE@&#Adaptive stereo similarity fusion using confidence measures

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose similarity fusion strategy based on stereo confidences.


                        
                        
                           
                           We propose a consensus strategy to exploit spatial correlation between pixels.


                        
                        
                           
                           Our fusion increases the accuracy of global and local stereo algorithms.


                        
                        
                           
                           We out-perform other fusion strategies.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Stereo confidence measures

Stereo similarity measure fusion

Stereo matching

@&#ABSTRACT@&#


               
               
                  In most stereo-matching algorithms, stereo similarity measures are used to determine which image patches in a left–right image pair correspond to each other. Different similarity measures may behave very differently on different kinds of image structures, for instance, some may be more robust to noise whilst others are more susceptible to small texture variations. As a result, it may be beneficial to use different similarity measures in different image regions. We present an adaptive stereo similarity measure that achieves this via a weighted combination of measures, in which the weights depend on the local image structure. Specifically, the weights are defined as a function of a confidence measure on the stereo similarities: similarity measures with a higher confidence at a particular image location are given higher weight. We evaluate the performance of our adaptive stereo similarity measure in both local and global stereo algorithms on standard benchmarks such as the Middlebury and KITTI data sets. The results of our experiments demonstrate the potential merits of our adaptive stereo similarity measure.
               
            

@&#INTRODUCTION@&#

The objective of stereo matching is to estimate the depth of a scene based on two rectified images that are obtained from two cameras. The resulting depth image can be used in algorithms for problems such as 3D reconstruction [1] and virtual view rendering [2].

Stereo matching has been extensively researched over the past decades [3]. There are two types of stereo algorithms: sparse and dense algorithms. Sparse algorithms employ feature-based methods that match key-point locations. The resulting depth map is sparse since there are locations without depth estimation [4,5]. In contrast, dense stereo algorithms produce depth estimations at every pixel in an image using pixel-wise matching between stereo views. Dense stereo matching algorithms can be further grouped into two classes, namely, global and local stereo matching. Global stereo matching algorithms make global smoothness assumptions on the disparity image; this generally leads to high-quality depth estimates but it is computationally expensive [6–8]. By contrast, local stereo matching algorithms do not employ such smoothness constraints; as a result, they are computationally cheap but provide disparity estimates of lower quality [37,38].

Stereo algorithms estimate the disparity of a scene by matching pixels/patches between the two rectified images. In general, they are composed of four steps: (1) cost initialization, (2) cost aggregation, (3) disparity selection, and (4) disparity refinement [3]. The first step is cost initialization, which is performed by matching pixels of the two rectified images. The resulting cost space is called the initial disparity space image (DSI). In the matching, a variety of different similarity measures can be used, each of which may have different characteristics. In the second step, cost aggregation is applied on the initial DSI to filter out noisy matches that may have arisen in the first step. In order to select a disparity for each pixel, most of the algorithms use a winner-take-all approach as the third step. In the winner-take-all approach, the disparity that has the lowest matching cost at a particular image location is selected as the disparity for that location. The fourth (optional) step aims to refine the resulting disparity map by filtering out wrong matches using global smoothness assumptions.

An important step in both global and local stereo matching algorithms is the cost initialization. In both types of algorithms, it is essential to obtain high-quality initial DSIs in order to obtain good disparity maps [10–12]. Since stereo similarity measures may perform differently depending on texture and noise variations, the quality of the initial DSI may be improved by using different stereo similarity measures for different parts of the image. One way in which this can be achieved is by fusing similarities adaptively based on their performance on different regions of the image. (Note that adaptive fusion is very different than the non-adaptive fusion scheme of [10,11,13].) In this paper, we propose a new algorithm that fuses similarity measures adaptively based on their performance on different image regions. Figs. 1 and 2
                     
                      show two examples of the output of our algorithm, which illustrate that adaptive fusion of two similarities may enhance the accuracy of final disparity estimations substantially.

The main contribution of this paper is a new algorithm for adaptive fusion of stereo similarity measures. Our adaptive fusion strategy can fuse any number of stereo similarity measures without introducing any similarity measure-dependent parameters. Our fusion algorithm operated by evaluating the local performance of each similarity measure at each image location using stereo confidence measures [15,14,16–18]. The resulting confidence measures are used to determine the weight of each of the stereo similarity measures: more confident similarity measures are assigned a higher weight in the final ensemble. The fusion and confidence estimation are performed on the initial DSI, which contains the pixel-wise matching scores. To exploit spatial correlations and increase the robustness of our fusion algorithm, we use a local consensus between neighboring pixels when computing the weights. Each neighboring pixel votes for the disparity of the center pixel proportional to its confidence. The disparity that has the highest consensus for the center pixel is chosen as the disparity of the center pixel. The DSIs of the similarities that support the consensus disparity are adaptively aggregated based on their confidences in order to obtain the final fused initial cost measures.

The remainder of the paper is organized as follows: In Section 2, we review existing literature that relates to similarity measures and similarity measure fusion. In Section 3, we present our novel adaptive fusion strategy. The experimental results are presented in Section 4. We discuss our results and possible directions for future work in Section 5, and draw conclusions in Section 6.

@&#RELATED WORK@&#

Most of the recent stereo research focuses on increasing the accuracy of depth estimation by enhancing the performance of aggregation methods [38,21,22]. At the same time, significant improvements in performance have also be obtained by using enhanced similarity measures [23–25] or by fusing multiple similarity measures [10–12].

Fusion of multiple stereo similarities has been used in several stereo algorithms. Wegner and Stankiewicz [12] took the multiplication of any two similarity measures and obtain quality enhancements for their view synthesis algorithm. However, multiplication of two similarity measures may fail to increase the accuracy if at least one of the measures fail to find correct disparity. Klaus et al. [10] fused the gradient and intensity similarities using weighted-summation and obtained significant increase in accuracy. The weight is found experimentally and is not generalizable to different similarity measures (it uses a similarity measure-dependent parameter). Mei et al. [11] proposed fusing Census transform and color measures by using exponential functions and weighted averaging, which led to substantially better performances. Different from the above-mentioned algorithms Stentoumis et al. [13] fused three similarity measures with constant weights using exponential functions. However, for all of these algorithms, the parameters of their fusion strategy are found experimentally, they are static for all pixels, and are not generalizable to all kinds of similarities. In contrast to this prior work, our adaptive fusion strategy can fuse any number of similarity measures and does not require any similarity measure-dependent parameters. Moreover, it fuses similarities adaptively to exploit the benefits of different similarities in different regions of the image.

To fuse different similarity measures, it is important to observe which of the fused similarities perform better than the others at a particular location of the image. Stereo confidences are used to measure the confidence of stereo matching and to filter out the wrong estimations. The matching is considered to be more accurate as its confidence increases. An extensive evaluation of stereo confidences are presented in [15]. The confidence measures is frequently used at the refinement step of stereo matching to refine the wrong matches [14,16–18]. Stereo confidences have further been tested in applications producing stixel-world representations [28]. In this work, we incorporate top performing stereo confidence to assess the performances of various stereo similarities at different locations of the image. This allows to compute adaptive weights for the fusion of any number of stereo similarity measures.

Stereo matching is not always applied between two regular camera views. One of the most challenging stereo matching problem is cross-modal stereo matching where the matched images differ in terms of their data structure such as stereo matching between IR and RGB images [40,41]. Simple stereo similarity measures such as intensity, color, and gradient values of pixels in the image provide reasonable performances as long as the stereo images are noise-free. However in the presence of noise and data structure difference (such as cross-modal stereo), the performance of such measures decreases significantly. Normalized cross-correlation (NCC) [26] is an intensity and patch-based similarity measure that is robust against Gaussian noise in the two stereo images. Zabih and Woodfill [23] introduced the rank and census transform measures in order to increase robustness against radiometric difference between stereo pairs. Egnal [27] used mutual information (MI) as a stereo similarity measure, which leads to a matching algorithm that is robust under radiometric differences. Their study showed that both MI and NCC provide reasonably good performances. Hirschmuller and Scharstein [20] provided an extensive evaluation study of the aforementioned similarity measures. The results of this evaluation show that the performance of different measures highly varies with the image structure, which provides a motivation for our adaptive similarity measures. In this work, we show that the performance of cross-modal stereo algorithms may be improved by the use of adaptive fusion algorithms.

A similarity measure may perform better than other measures in a particular location in a stereo image depending on the kind of image structure present at that location (such as at depth discontinuities, regular texture, and nearly homogeneous image regions), whilst performing worse in other regions. For instance, filter-based measures tend to blur object boundaries whereas other measures do not [19]. As a result, the performance of stereo matching may be improved by adaptively combining stereo similarity measures with different characteristics according to their (estimated) performance at a particular location. Below, we present an adaptive fusion strategy that combines multiple stereo similarities based on their performance in different image regions.

An overview of our adaptive fusion algorithm is shown in Fig. 3
                     . Our algorithm consists of two main stages. First, we calculate pixel-wise matching scores as in most other stereo matching algorithms. This stage provides the initial cost measures for each disparity per pixel, the so-called disparity space image (DSI). The initial matching is done using each measure from a set of similarity measures that are explained in detail in Appendix A. Second, we compute the confidence of the matching at every image location for each of the similarity measures using the confidence measures presented by [15]. We use the confidence to compute weights for all stereo similarity measures at all image locations. Our final stereo similarity measure is given by a locally weighted combination of the stereo similarities. We discuss both stages of our algorithm in more detail below.

The first part of our fusion strategy consists of building a modified initial DSI for each similarity measure that is based on our confidence-based voting. To obtain more robust matching scores and exploit spatial correlation without using aggregation over the cost space, we construct a consensus set, 
                        
                           H
                           (
                           x
                           ,
                           y
                           ,
                           d
                           )
                        
                     , that is built for each pixel, 
                        
                           (
                           x
                           ,
                           y
                           )
                        
                     . Our fusion strategy incorporates a stereo confidence, 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                           (
                           x
                           ,
                           y
                           )
                        
                     , to build the consensus and to weight the costs for the fusion where i denote a similarity. Let 
                        
                           (
                           
                              
                                 x
                              
                              
                                 n
                              
                           
                           ,
                           
                              
                                 y
                              
                              
                                 n
                              
                           
                           )
                        
                      be the pixels around a neighbourhood 
                        
                           N
                           (
                           x
                           ,
                           y
                           )
                        
                      with size 
                        
                           
                              
                                 h
                              
                              
                                 w
                              
                           
                        
                      of a pixel 
                        
                           (
                           x
                           ,
                           y
                           )
                        
                      and let 
                        
                           
                              
                                 d
                              
                              
                                 n
                              
                           
                        
                      be the winner disparity of 
                        
                           (
                           
                              
                                 x
                              
                              
                                 n
                              
                           
                           ,
                           
                              
                                 y
                              
                              
                                 n
                              
                           
                           )
                        
                     . 
                        
                           H
                           (
                           x
                           ,
                           y
                           ,
                           d
                           )
                        
                      is defined as:
                        
                           (1)
                           
                              μ
                              (
                              
                                 
                                    d
                                 
                                 
                                    n
                                 
                              
                              ,
                              d
                              )
                              =
                              
                                 
                                    
                                       
                                          
                                             
                                                1
                                                ,
                                             
                                             
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      n
                                                   
                                                
                                                =
                                                d
                                             
                                          
                                          
                                             
                                                0
                                                ,
                                             
                                             
                                                otherwise
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           
                              H
                              (
                              x
                              ,
                              y
                              ,
                              d
                              )
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       ∀
                                       i
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       (
                                       
                                          
                                             x
                                          
                                          
                                             n
                                          
                                       
                                       ,
                                       
                                          
                                             y
                                          
                                          
                                             n
                                          
                                       
                                       )
                                       ∈
                                       N
                                       (
                                       x
                                       ,
                                       y
                                       )
                                    
                                 
                              
                              
                                 
                                    S
                                 
                                 
                                    i
                                 
                              
                              (
                              
                                 
                                    x
                                 
                                 
                                    n
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    n
                                 
                              
                              )
                              
                                 
                                    μ
                                 
                                 
                                    i
                                 
                              
                              (
                              
                                 
                                    d
                                 
                                 
                                    n
                                 
                              
                              ,
                              d
                              )
                              .
                           
                        
                     Each consensus set is built around a center pixel including the pixel itself. Each pixel in the consensus set votes for the consensus disparity of the set such that the weights of the votes are proportional to the confidences of the pixels. The consensus disparity, 
                        
                           
                              
                                 d
                              
                              
                                 ∗
                              
                           
                        
                     , is selected by taking the disparity that received most votes:
                        
                           (2)
                           
                              
                                 
                                    d
                                 
                                 
                                    ∗
                                 
                              
                              =
                              
                                 
                                    argmax
                                 
                                 
                                    d
                                 
                              
                              (
                              H
                              (
                              x
                              ,
                              y
                              ,
                              d
                              )
                              )
                              .
                           
                        
                     The fusion is applied to the DSIs of the similarities to obtain a single (fused) DSI for the aggregation step of the matching. Hence, the consensus disparity cannot be used directly in the fusion step of the stereo similarities. Moreover, the DSI of the center pixel in each consensus set does not necessarily support its consensus disparity. Therefore, to use the consensus result in the fusion step of the similarities, the initial DSIs of the center pixels should be modified according to their consensus disparity. To modify the initial DSIs of each center pixel such that it supports the consensus disparity without doing computationally expensive aggregation over the cost space, we assign the DSI of the pixel in the consensus set that favors the consensus disparity with the highest confidence for each similarities:
                        
                           (3)
                           
                              
                                 
                                    n
                                 
                                 
                                    ∗
                                 
                              
                              =
                              
                                 
                                    argmax
                                 
                                 
                                    n
                                 
                              
                              (
                              
                                 
                                    S
                                 
                                 
                                    i
                                 
                              
                              (
                              
                                 
                                    x
                                 
                                 
                                    n
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    n
                                 
                              
                              )
                              
                                 
                                    μ
                                 
                                 
                                    i
                                 
                              
                              (
                              
                                 
                                    d
                                 
                                 
                                    n
                                 
                              
                              ,
                              
                                 
                                    d
                                 
                                 
                                    ∗
                                 
                              
                              )
                              )
                              ,
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                                 
                                    ∗
                                 
                              
                              (
                              x
                              ,
                              y
                              ,
                              d
                              )
                              =
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              (
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              
                              ,
                              
                                 
                                    y
                                 
                                 
                                    
                                       
                                          n
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              
                              ,
                              d
                              )
                              .
                           
                        
                     In the second stage, the DSIs of all of the similarity measures 
                        
                           
                              
                                 C
                              
                              
                                 i
                              
                              
                                 ∗
                              
                           
                           (
                           x
                           ,
                           y
                           ,
                           d
                           )
                        
                      are aggregated adaptively using weighted average with respect to their confidence:
                        
                           (5)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             
                                                w
                                             
                                             
                                                i
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      i
                                                   
                                                
                                                (
                                                x
                                                ,
                                                y
                                                )
                                             
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      ∀
                                                      i
                                                   
                                                
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      i
                                                   
                                                
                                                (
                                                x
                                                ,
                                                y
                                                )
                                             
                                          
                                          ,
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                C
                                             
                                             
                                                f
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          =
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   ∀
                                                   i
                                                
                                             
                                          
                                          
                                             
                                                w
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                C
                                             
                                             
                                                i
                                             
                                             
                                                ∗
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          ,
                                       
                                    
                                 
                              
                           
                        
                     where 
                        
                           
                              
                                 C
                              
                              
                                 f
                              
                           
                           (
                           x
                           ,
                           y
                           ,
                           d
                           )
                        
                      is the fused DSI measure for the pixel at location 
                        
                           (
                           x
                           ,
                           y
                           )
                        
                     .

It is important to note that our algorithm can be used to fuse any number of similarity measures without introducing any similarity measure-dependent hyperparameters.

@&#EXPERIMENTS@&#

We evaluate the performance of our algorithm by performing several experiments on benchmark Middlebury [3] and KITTI [32] data sets. The Middlebury stereo dataset has images of size 
                        
                           400
                           ×
                           375
                        
                      approximately, whereas KITTI dataset images have sizes around 
                        
                           1200
                           ×
                           370
                        
                     . We evaluate the performance of the stereo algorithms by measuring the percentage of disparity estimates that has a difference of more than one compared to the ground truth disparity. We also evaluate the number of errors in specific parts of images such as non-occluded parts and locations close to disparity discontinuities. Our algorithm has only one hyperparameter, which is the consensus window size, 
                        
                           
                              
                                 h
                              
                              
                                 w
                              
                           
                        
                     .

The performance of our algorithm depends on the performance of the stereo confidence measure used. In Section 4.1, we investigate the effect of different stereo confidences on the performance of our fusion strategy; we select the best-performing confidence for the remaining experiments. Specifically, we performed experiments using four different stereo confidence measures. To test the effect of 
                        
                           
                              
                                 h
                              
                              
                                 w
                              
                           
                        
                      and to select the optimum value, we performed experiments with our fusion strategy using different consensus window sizes in Section 4.2. In Section 4.3, we tested our fusion strategy with all stereo similarities and compare its accuracy with (non-adaptive) fusion strategies presented in prior work. Intensity is the cheapest stereo similarity measure to extract. Almost all works on fusion aim to fuse intensity with a more complex similarity measure to achieve higher accuracies. In Section 4.4, we also fuse intensity in a similar way with other similarity measures and compare our strategy’s performance with that of other strategies. To further compare the performance of our algorithm with the fusion strategies presented in prior work, we evaluate our algorithm in terms of initial matching cost improvements by using constant window aggregation (Section 4.5) and global energy minimization (Section 4.7). For all of the above-mentioned experiments, we used the Middlebury data set [3]. The errors are measured for all pixels (all), pixels that are not occluded (non-occlusion), and pixels that are close to disparity discontinuities and not occluded (dis-occlusion). These regions are shown in Fig. 4
                     . To test our fusion strategy on a larger, more challenging dataset, we also performed experiments on the KITTI data set, comparing the performance of our algorithm to that of a state-of-the-art local stereo matching algorithm (Section 4.8).

We performed experiments to find out which confidence measure provides the best results in our fusion strategy. In this experiment, we set 
                           
                              
                                 
                                    h
                                 
                                 
                                    w
                                 
                              
                              =
                              3
                           
                        . We experimented with the LRD, PKRN, MLM and LC confidence measures that are described in Appendix A on the Middlebury data set. We fused all of the eleven stereo similarities that are presented in Appendix A. The results of our experiment are shown in Fig. 5
                        . The results show that LRD outperforms other confidences for almost all images and regions. The difference is most noticeable in the Cones dataset where LRD substantially outperforms other confidences in discontinuous regions. In our further experiments, we used LRD as the confidence measure for our fusion strategy.

The only hyperparameter of our fusion strategy is the consensus size, 
                           
                              
                                 
                                    h
                                 
                                 
                                    w
                                 
                              
                           
                        . Although it is a similarity measure-independent parameter, it may still effect the final fusion results. Therefore, we tested the performance of our algorithm using various consensus window sizes. Fig. 6
                         shows the error as a function of the value of 
                           
                              
                                 
                                    h
                                 
                                 
                                    w
                                 
                              
                           
                        . As 
                           
                              
                                 
                                    h
                                 
                                 
                                    w
                                 
                              
                           
                         increase, more neighboring pixels vote in the consensus and the accuracy increases. However as Fig. 6b shows, the performance near discontinuous regions decreases as 
                           
                              
                                 
                                    h
                                 
                                 
                                    w
                                 
                              
                           
                         increases. Although it is possible to achieve higher accuracies with larger consensus window sizes, in this paper, we therefore opt to use a consensus region of 
                           
                              3
                              ×
                              3
                           
                         pixels in the rest of our experiments.

Although it may be computationally impractical to compute all of the similarities, we did perform an experiment fusing eleven similarities in order to see the overall performance of our fusion strategy. We tested our strategy against straightforward fusion methods. The methods that we compared with are:
                           
                              •
                              
                                 Most utilizes the initial DSI of the most confident similarity measure for each location.


                                 Avg is the fusion strategy that takes the average of all of the similarity measure’s costs.


                                 Mult 
                                 [12] is based on the multiplication of cost values of each similarity measures.


                                 Conf denotes the adaptive aggregation of initial DSI using the weights that are obtained from the LRD confidence of the similarity measures at each pixel. This is equivalent to the second part of our fusion strategy without the first part.


                                 Voting uses our consensus strategy but without confidences. The confidence in the disparity voting is always equal to 1. Furthermore, the cost functions of similarities are averaged rather than confidence-weighted aggregation.


                                 Voting
                                 
                                 +
                                 
                                 Conf is based on our consensus strategy and adaptive aggregation of the similarities using LRD confidence measure.


                        Table 1
                         shows the performance of eleven different similarity measures on the Middlebury image pairs. In general, the best performing similarity measure is the census transform. The census transform is also one of the most computationally expensive similarity measures. AD is computationally the cheapest similarity measure, and it still outperforms LoG and MI. Pfeiffer et al. [28] has shown that MI does not perform well without global smoothing. This result is confirmed by our results: MI performs poorly in the initial stereo matching stage. BT and Mean perform better than MI but not significantly better than intensity. NCC and ZNCC appear to be the best alternatives to the census transform.


                        Table 2
                         presents the results of combining all similarity measures with different fusion strategies. The best performer in all of the data set image pairs and in all image regions is our proposed strategy, Voting+Conf. Voting using our consensus algorithm also performs significantly better than all of the individual similarity measures. Even with the initial DSI, the Conf strategy performs better than the Avg strategy in discontinuous image regions, which illustrates the importance of using confidences in fusion. Furthermore, using Voting without confidences leads to worse accuracy, which also emphasize the effect of confidence on fusion. Directly choosing the highest confidence is not a good strategy for the fusion because it provides worse accuracy compared to most other strategies (with the exception of Mult [12]). Mult is the worst performer in our experiments, presumably, because errors in any of the similarity measures can significantly affect the final result.

Intensity is computationally the cheapest stereo similarity measure for stereo matching. Therefore, various prior studies aim to fuse intensity with more complex similarities to increase the accuracy. In this experiment, we fuse all of the ten stereo similarities with intensity and compare our results with other fusion strategies.


                        Table 3
                         presents the results for the fusion of different similarity measures with the intensity similarity measure. The accuracy of the fused measures are higher than their individual accuracies except for the NCC measure. This is mainly because LRD does not perform as good with NCC as it performs with other measures. The best performer of this experiment is AD+Census. The individual accuracy of MI is one of the worst compared to other measures, however, its performance significantly increased when it is fused with intensity.


                        Fig. 7
                         shows the results of our adaptive fusion algorithm when used to fuse AD and census similarities on Middlebury data set. The improvements that are achieved by fusion are indicated in red. For all images, the results of fusion are substantially better than the individual results of each of the fused similarities.

To explore the performance of our algorithm with respect to other fusion strategies, we perform two experiments with AD–Census and AD–Sobel features in constant window aggregation-based stereo matching. AD and Census features are fused using exponential functions by Mei et al. [11] in order to obtain higher accuracy using the function:
                           
                              (6)
                              
                                 
                                    
                                       C
                                    
                                    
                                       AC
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 d
                                 )
                                 =
                                 2
                                 -
                                 
                                    
                                       e
                                    
                                    
                                       -
                                       
                                          
                                             
                                                
                                                   C
                                                
                                                
                                                   AD
                                                
                                             
                                             (
                                             x
                                             ,
                                             y
                                             ,
                                             d
                                             )
                                          
                                          
                                             
                                                
                                                   σ
                                                
                                                
                                                   AD
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                 
                                 -
                                 
                                    
                                       e
                                    
                                    
                                       -
                                       
                                          
                                             
                                                
                                                   C
                                                
                                                
                                                   Census
                                                
                                             
                                             (
                                             x
                                             ,
                                             y
                                             ,
                                             d
                                             )
                                          
                                          
                                             
                                                
                                                   σ
                                                
                                                
                                                   Census
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    σ
                                 
                                 
                                    AD
                                 
                              
                           
                         and 
                           
                              
                                 
                                    σ
                                 
                                 
                                    Census
                                 
                              
                           
                         are set to 10 and 30, respectively. Additionally, Klaus et al. [10] fused Gradient and AD features linearly (weighted average) via:
                           
                              (7)
                              
                                 
                                    
                                       C
                                    
                                    
                                       WA
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 d
                                 )
                                 =
                                 (
                                 1
                                 -
                                 α
                                 )
                                 
                                    
                                       C
                                    
                                    
                                       AD
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 d
                                 )
                                 +
                                 α
                                 
                                    
                                       C
                                    
                                    
                                       SB
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 d
                                 )
                                 .
                              
                           
                        The optimal 
                           
                              α
                           
                         for 
                           
                              
                                 
                                    C
                                 
                                 
                                    WA
                                 
                              
                              (
                              x
                              ,
                              y
                              ,
                              d
                              )
                           
                         is not explicitly given by Klaus et al. [10]. We tried different 
                           
                              α
                           
                         values and experimentally found that setting 
                           
                              α
                           
                         equal to 
                           
                              0.9
                           
                         gives the best results. We also use the multiplication of initial DSI of two features (MULT) in accordance with Wegner and Stankiewicz [12] as:
                           
                              (8)
                              
                                 
                                    
                                       C
                                    
                                    
                                       WAC
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 d
                                 )
                                 =
                                 
                                    
                                       C
                                    
                                    
                                       AD
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 d
                                 )
                                 ×
                                 
                                    
                                       C
                                    
                                    
                                       Census
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 d
                                 )
                                 ,
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       C
                                    
                                    
                                       WWA
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 d
                                 )
                                 =
                                 
                                    
                                       C
                                    
                                    
                                       AD
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 d
                                 )
                                 ×
                                 
                                    
                                       C
                                    
                                    
                                       SB
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 d
                                 )
                                 .
                              
                           
                        Stentoumis et al. [13] fused three similarities, AD, Census and Gradient using exponential functions similar to Mei et al. [11]:
                           
                              (10)
                              
                                 
                                    
                                       C
                                    
                                    
                                       ACG
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 d
                                 )
                                 =
                                 3
                                 -
                                 
                                    
                                       e
                                    
                                    
                                       -
                                       
                                          
                                             
                                                
                                                   C
                                                
                                                
                                                   AD
                                                
                                             
                                             (
                                             x
                                             ,
                                             y
                                             ,
                                             d
                                             )
                                          
                                          
                                             
                                                
                                                   λ
                                                
                                                
                                                   AD
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                 
                                 -
                                 
                                    
                                       e
                                    
                                    
                                       -
                                       
                                          
                                             
                                                
                                                   C
                                                
                                                
                                                   Census
                                                
                                             
                                             (
                                             x
                                             ,
                                             y
                                             ,
                                             d
                                             )
                                          
                                          
                                             
                                                
                                                   λ
                                                
                                                
                                                   Census
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                 
                                 -
                                 
                                    
                                       e
                                    
                                    
                                       -
                                       
                                          
                                             
                                                
                                                   C
                                                
                                                
                                                   SB
                                                
                                             
                                             (
                                             x
                                             ,
                                             y
                                             ,
                                             d
                                             )
                                          
                                          
                                             
                                                
                                                   λ
                                                
                                                
                                                   SB
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    λ
                                 
                                 
                                    AD
                                 
                                 
                                    2
                                 
                              
                              ,
                              
                                 
                                    λ
                                 
                                 
                                    Census
                                 
                                 
                                    2
                                 
                              
                           
                        , and 
                           
                              
                                 
                                    λ
                                 
                                 
                                    SB
                                 
                                 
                                    2
                                 
                              
                           
                         are set to 
                           
                              5
                              ,
                              45
                           
                         and 18, respectively.

The results of our experiments for different-sized aggregation windows are presented in Fig. 8
                        . The results are averaged over all of the four data set images and errors are evaluated over all pixels in the images. In both of our experiments, AD is the least accurate similarity measure after aggregation. In the fusion of AD with Census experiment in Fig. 8a, our algorithm performs the best, in particular, for smaller aggregation windows. Mei et al. [11] performs on par with the census similarity for smaller-sized windows. Yet, census outperforms Mei et al. [11] when the aggregation window size increases. In the fusion of AD with Sobel similarity experiment, our proposed method is the best performer for all sizes of the aggregation window, as shown in Fig. 8b. Sobel similarity and the method by Klaus et al. [10] performs similarly in terms of accuracy. Yet, for smaller sized windows, the method of Klaus et al. [10] performs slightly better than Sobel and significantly better than the algorithm based on AD similarities. For the fusion of three similarities, the method by Stentoumis et al. [13] performs on par with the census transform whereas our fusion strategy performs the best especially for small aggregation window sizes. In all of the experiments, the accuracy is saturated to a constant value when the aggregation window size approach to its largest size (
                           
                              13
                              ×
                              13
                           
                        ). The reason for this is as the aggregation size increases, the disparities near discontinuities in the image are smoothed. In all of our experiments, the multiplication of different initial DSIs (Mult) performs better than AD. However it does not perform better than the other measures or than any of the other fusion strategies.

In general, computational speed is an important parameter of the matching algorithms. In order to decrease the execution time of fusion, we fuse similarity measures before the aggregation step. Therefore, we do not perform aggregation for each of the similarity measures. Table 4
                         presents the execution times that are required for different fusion strategies with sequential coding. Because of their simplicity, the methods by Klaus et al. [10], Mei et al. [11], and Stentoumis et al. [13], as well as the Mult [12] method are faster than our fusion strategy. The most computationally expensive parts of our fusion strategy are the extraction of confidence map (0.16s) and constructing the consensus (
                           
                              0.12
                           
                        
                        s), which is highly parallelizable. However, the execution time of our algorithm is still lower than the straightforward constant window aggregation for window sizes larger than 
                           
                              7
                              ×
                              7
                           
                         as depicted in Table 5
                        .

Let 
                           
                              N
                           
                         be the total number of pixels, 
                           
                              H
                           
                         be the size of the consensus, 
                           
                              I
                           
                         be the number of similarities to be fused, and 
                           
                              D
                           
                         be the total number of disparities, Our algorithm complexity is 
                           
                              O
                              (
                              NI
                              (
                              H
                              +
                              D
                              )
                              )
                           
                        . Fusion strategies with static weights [11,10,12,13] has the complexity of 
                           
                              O
                              (
                              N
                              (
                              H
                              +
                              D
                              )
                           
                        . Therefore, our fusion strategy is 
                           
                              O
                              (
                              I
                              )
                           
                         worse in terms of complexity than other algorithms. However, since our calculations are mostly independent, our fusion strategy is highly parallelizable.

Global energy minimization (GEM) algorithms such as graph-cuts are widely used in stereo matching [33–36]. The main benefit of using GEM is that the pairwise interactions between disparity estimates at nearby image locations smooth the final disparity estimates. As a result, stereo algorithms with GEM generally construct better disparity maps.

We tested one of the most commonly used GEM algorithms, graph-cuts (GC), with our fusion strategy. In our experiments, we used the same parameters and configurations for all of our tests as suggested in [36]. The left borders of the reference images are the regions which cannot be matched effectively because they do not exist in the target image. Therefore, the matching costs on the left borders of all images are penalized in order to prevent biased smoothing for different similarities. Table 6
                         shows the quantitative results of single similarity measures for fusion and fusion strategies. As before, census is the best performer among the individual similarity measures. The methods by Mei et al. [11] and Klaus et al. [10] do not achieve better results than their single best-performing similarity measures (census and Sobel) in any of the experiments. This result illustrates the potential of incorporating (adaptive) fusion strategies in stereo matching. Since multiplying similarity measures amplifies errors, Mult [12] performs the worst in all of our experiments. Our strategy achieves the best results on the Teddy and Cones image pairs, and it performs on par with other measures on the Tsukuba and Venus image pairs. These results indicate the importance of having accurate initial disparity estimations for stereo algorithms with global energy minimization. For the fusion of three similarities, our algorithm performs the best for all of the images except only for one image on its discontinuity locations. As more similarities are fused with static weights, it becomes non-trivial to set the optimal weights experimentally. Hence, our adaptive strategy becomes more effective as the number of stereo similarity measures increases.

The KITTI data set is a recently released benchmark that contains real-world images. KITTI contains 194 test images with ground truth depth captured by a Volodyne laser scanner. The ground truth is available for both occluded and non-occluded surfaces. The error is calculated by finding the percentage of the pixels that has a difference between estimated and ground-truth of more than three pixels.

One of the most popular local stereo algorithms in the literature is adaptive-support weight of Yoon and Kweon [9]. The algorithm [37] aggregates initial cost measures adaptively to obtain accurate depth estimations that preserves the depth discontinuities. As a further improvement, Hosni et al. [38] incorporated edge-preserving bilateral filtering [39] over the initial cost space as aggregation step to preserve the sharpness of disparities at discontinuity locations. In order to evaluate the performance of our adaptive fusion strategy in state-of-the-art local stereo matching algorithms, we integrated our fusion algorithm with edge-preserving bilateral filtering [39,38] and tested it on the KITTI data set. The mean and standard deviation of the errors over all images are presented in Table 7
                         for both non-occluded and occluded image regions. Our algorithm performs the best overall and in each of different fusion classes. Since census significantly outperforms the other measures, the improvement with census is not as large as with AD and Sobel. Our fusion strategy outperforms the best performer of the fused similarity measures in all cases. Fig. 9
                         shows an example of the result of our fusion algorithm on the KITTI data set. Supporting to our previous results with global energy minimization, our algorithm clearly outperforms the method of Stentoumis et al. [13]. The method of Mei et al. [11] also outperforms Stentoumis et al. [13], which shows that using static weights to fuse multiple similarities get less efficient as the number of similarities increases.

The Microsoft Kinect depth sensor was introduced in 2010 as a human–computer interaction device that can provide high resolution depth maps of a scene in real-time. Kinect can recover the depth of many kinds of surfaces but it cannot measure depth on transparent objects. In order to obtain sparse depth estimations on these objects, Chiu et al. [40,41] proposed to use cross-modal stereo between the infra-red (IR) and RGB cameras of the Kinect. Since the IR and RGB views are not structurally the same, the main challenge in cross-modal stereo is to find as many reliable matches as possible. Therefore, the development of robust similarity measures is essential in using cross-modal stereo.

We tested our fusion strategy for cross-modal stereo and compared it with different fusion strategies and individual similarity measures. Fig. 10
                         presents the results of the tested measures. The black regions are the regions where the stereo match has not enough confidence. The regions with color indicate locations where there are significant differences between different algorithms. Our algorithm produces the densest correct matches in most of the indicated locations. This result shows the importance of robust fusion strategies in challenging stereo problems. Although our fusion strategy achieves improved results compared to single similarities and other fusion strategies, there are still errors in the measurements. These errors are likely the result of the fact that our fusion strategy also relies on the performance of its similarities. When none of the similarities achieves correct estimations on a particular image region, such as a specular surface, our fusion strategy cannot improve the accuracy: any fusion algorithm is limited by the performance of its inputs.

@&#DISCUSSION@&#

Our experimental results illustrate the potential of adaptive stereo similarity fusion on the accuracy of stereo matching. In this section, we further elaborate on the potential merits of our fusion strategy, and we discuss possible improvements as well as possible limitations of our approach.

The most common way of fusing similarity measures is to weight each measure and combine them using manually defined functions, such as via direct aggregation [10] or using exponentials [11]. Our experiments show that using confidence-guided weights for the fusion of similarity measures may improve stereo matching results substantially compared to constant-weight fusion algorithms. This happens because each similarity measure may perform differently at different locations of the image. The incorporation of confidences can be further applied to cost aggregation step of stereo matching algorithms where adaptive window sizes can be used with the guidance of stereo confidences rather than constant window sizes through the image.

Stereo similarity measure algorithms in the literature use pixel-wise weighted sums of initial cost measures. However, to fuse different similarity measures, it is important to exploit spatial correlation between neighboring pixels since pixel-wise measures tend to be noisy. Additionally, confidence measures are not very precise on the noisy initial DSI. Therefore, the accuracy of fusion substantially increased when we incorporated a consensus strategy. Our experiments also show that as consensus window size increases, it violates disparity discontinuities and the performance on discontinuous image regions decreases. To address this problem, discontinuity-preserving windows can be investigated for building the consensus.

In this work, we also show that improvements in the initial cost measurements can substantially affect the final result of the stereo algorithm. Additionally, improvements in the initial cost measurements can further increase the performance of stereo algorithms on challenging stereo problems such as cross-modal stereo matching.

Our algorithm improves initial cost measures substantially and this improves the final result. However the errors caused by the remaining steps such as aggregation and refinement may damage the improvements that are achieved at the initial step. For example, smoothing the image substantially without preserving the disparity discontinues at the refinement step may eliminate the improvements of our fusion strategy in discontinuous image regions. This is one of the reasons why the fusion algorithms do not always obtain the top accuracy with the global energy minimization algorithm in our experiments.

Fusing many similarity measures is one of the capabilities of our fusion strategy. However, our experiments show that fusing similarity measures that perform not as good as others does not improve the fusion results. Using stereo confidences with better performance may improve the fusion performance and circumvent this problem.

Similar problems as in stereo matching arise in medical image registration where the aim of the registration is to find the mapping (displacement) of one image to the other. Cost functions such as NCC and MI are commonly used in such image registration problems. As future work, we aim to generalize our adaptive fusion algorithm to medical image registration problems.

@&#CONCLUSION@&#

In this paper, we presented a novel adaptive fusion algorithm for stereo similarity measures, which uses stereo confidences to determine the fusion weights. To the best of our knowledge, our stereo fusion algorithm is the first that does not require any similarity measure-dependent parameters and that can be applied to fuse any number of similarity measures. The results of our experiments show that substantial accuracy increases may be obtained compared to stereo matching algorithms based on individual similarity performances or on non-adaptive fusion strategies. Specifically, the results show that stereo confidences can be used as the basis for computing adaptive per-pixel weights for stereo similarity metric fusion. Additionally, we showed that exploiting spatial correlation in a local region by means of a consensus neighborhood may increase the fusion accuracy. Our approach is also effective in challenging stereo problems such as cross-modal stereo matching, where individual stereo similarity measures generally fail to find sufficient good matches.

The first step of the stereo matching algorithms is measuring matching costs of pixels using a similarity measure. We implemented eleven different similarity measures based on [20]. The values parameters for each of the similarity measures are set according to their implementations in the literature. Fig. 11
                      represents the disparity estimations from initial matching for different similarity measures on Tsukuba dataset.

In this section, we describe the similarity (Appendix A) and confidence measures (Appendix B) that will be used in our experiments.


                     AD measures the absolute intensity difference between the reference (left) image 
                        
                           I
                           (
                           x
                           ,
                           y
                           )
                        
                      and the target (right) image 
                        
                           
                              
                                 I
                              
                              
                                 ′
                              
                           
                           (
                           x
                           -
                           d
                           ,
                           y
                           )
                        
                     :
                        
                           (.1)
                           
                              
                                 
                                    C
                                 
                                 
                                    AD
                                 
                              
                              (
                              x
                              ,
                              y
                              ,
                              d
                              )
                              =
                              |
                              I
                              (
                              x
                              ,
                              y
                              )
                              -
                              
                                 
                                    I
                                 
                                 
                                    ′
                                 
                              
                              (
                              x
                              -
                              d
                              ,
                              y
                              )
                              |
                              .
                           
                        
                     
                     RGB measures the absolute difference of all color channels 
                        
                           R
                           ,
                           G
                           ,
                           B
                        
                      and aggregates them to have the final matching score:
                        
                           (.2)
                           
                              
                                 
                                    C
                                 
                                 
                                    RGB
                                 
                              
                              (
                              x
                              ,
                              y
                              ,
                              d
                              )
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       =
                                       R
                                       ,
                                       G
                                       ,
                                       B
                                    
                                 
                              
                              |
                              
                                 
                                    I
                                 
                                 
                                    i
                                 
                              
                              (
                              x
                              ,
                              y
                              )
                              -
                              
                                 
                                    I
                                 
                                 
                                    i
                                 
                                 
                                    ′
                                 
                              
                              (
                              x
                              -
                              d
                              ,
                              y
                              )
                              |
                              .
                           
                        
                     
                     Mean is similar to AD but the images are filtered with a mean filter of size N before the matching:
                        
                           (.3)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             
                                                I
                                             
                                             
                                                Mean
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          =
                                          I
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          -
                                          
                                             
                                                1
                                             
                                             
                                                |
                                                N
                                                |
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   -
                                                   N
                                                   /
                                                   2
                                                
                                                
                                                   N
                                                   /
                                                   2
                                                
                                             
                                          
                                          I
                                          (
                                          x
                                          -
                                          i
                                          ,
                                          y
                                          -
                                          i
                                          )
                                          ,
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                C
                                             
                                             
                                                Mean
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          =
                                          |
                                          
                                             
                                                I
                                             
                                             
                                                Mean
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          -
                                          
                                             
                                                I
                                             
                                             
                                                Mean
                                             
                                             
                                                ′
                                             
                                          
                                          (
                                          x
                                          -
                                          d
                                          ,
                                          y
                                          )
                                          |
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                     BT is the Birchfield–Tomasi similarity measure [29] which is a sampling-intensive absolute difference measure. Unavoidable image sampling may introduce errors in stereo matching since the correct match may not be shifted in discrete disparity intervals. BT suppresses such errors by using interpolation of neighbouring pixels:
                        
                           (.4)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             
                                                I
                                             
                                             
                                                -
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          =
                                          (
                                          I
                                          (
                                          x
                                          -
                                          1
                                          ,
                                          y
                                          )
                                          +
                                          I
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          )
                                          /
                                          2
                                          ,
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                I
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          =
                                          (
                                          I
                                          (
                                          x
                                          +
                                          1
                                          ,
                                          y
                                          )
                                          +
                                          I
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          )
                                          /
                                          2
                                          ,
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                I
                                             
                                             
                                                min
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          =
                                          
                                             min
                                          
                                          (
                                          
                                             
                                                I
                                             
                                             
                                                -
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          ,
                                          I
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          ,
                                          
                                             
                                                I
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          )
                                          ,
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                I
                                             
                                             
                                                max
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          =
                                          
                                             max
                                          
                                          (
                                          
                                             
                                                I
                                             
                                             
                                                -
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          ,
                                          I
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          ,
                                          
                                             
                                                I
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          )
                                          ,
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          A
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          =
                                          
                                             max
                                          
                                          (
                                          0
                                          ,
                                          I
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          -
                                          
                                             
                                                I
                                             
                                             
                                                ′
                                                max
                                             
                                          
                                          (
                                          x
                                          -
                                          d
                                          ,
                                          y
                                          )
                                          ,
                                          
                                             
                                                I
                                             
                                             
                                                ′
                                                min
                                             
                                          
                                          (
                                          x
                                          -
                                          d
                                          ,
                                          y
                                          )
                                          -
                                          I
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          )
                                          ,
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          B
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          =
                                          
                                             max
                                          
                                          (
                                          0
                                          ,
                                          
                                             
                                                I
                                             
                                             
                                                ′
                                             
                                          
                                          (
                                          x
                                          -
                                          d
                                          ,
                                          y
                                          )
                                          -
                                          
                                             
                                                I
                                             
                                             
                                                max
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          ,
                                          
                                             
                                                I
                                             
                                             
                                                min
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          -
                                          
                                             
                                                I
                                             
                                             
                                                ′
                                             
                                          
                                          (
                                          x
                                          -
                                          d
                                          ,
                                          y
                                          )
                                          )
                                          ,
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                C
                                             
                                             
                                                BT
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          =
                                          
                                             min
                                          
                                          (
                                          A
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          ,
                                          B
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          )
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                     Rank 
                     [23] transform is a non-parametric image transform that models the structure of the neighbourhood of pixels by exploiting the intensity variation. Eq. (.5) represents the rank transform 
                        
                           RT
                           (
                           x
                           ,
                           y
                           )
                        
                      of a pixel 
                        
                           (
                           x
                           ,
                           y
                           )
                        
                      inside a local neighbourhood 
                        
                           N
                           (
                           x
                           ,
                           y
                           )
                        
                      of size 
                        
                           7
                           ×
                           7
                        
                      and initial DSI, 
                        
                           
                              
                                 C
                              
                              
                                 RT
                              
                           
                           (
                           x
                           ,
                           y
                           ,
                           d
                           )
                        
                      as:
                        
                           (.5)
                           
                              
                                 
                                    
                                    
                                       
                                          RT
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          =
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                   ∈
                                                   N
                                                   (
                                                   x
                                                   ,
                                                   y
                                                   )
                                                   |
                                                   I
                                                   (
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                   <
                                                   I
                                                   (
                                                   x
                                                   ,
                                                   y
                                                   )
                                                
                                             
                                          
                                          ,
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                C
                                             
                                             
                                                RT
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          =
                                          |
                                          RT
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          -
                                          
                                             
                                                RT
                                             
                                             
                                                ′
                                             
                                          
                                          (
                                          x
                                          -
                                          d
                                          ,
                                          y
                                          )
                                          |
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                     Census 
                     [23] transform models the structure of 
                        
                           7
                           ×
                           7
                        
                      neighbourhood of pixels that is denoted by k, as represented in Eq. (.6). Census is one of the most robust similarity measure against radiometric differences between stereo pairs [20] and it is calculated as:
                        
                           (.6)
                           
                              
                                 
                                    
                                    
                                       
                                          CT
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          [
                                          k
                                          ]
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            1
                                                            ,
                                                         
                                                         
                                                            iff
                                                            
                                                            I
                                                            (
                                                            
                                                               
                                                                  x
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                            ,
                                                            
                                                               
                                                                  y
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                            )
                                                            >
                                                            I
                                                            (
                                                            x
                                                            ,
                                                            y
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            0
                                                            ,
                                                         
                                                         
                                                            otherwise
                                                            ,
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                μ
                                             
                                             
                                                c
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          [
                                          k
                                          ]
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            1
                                                            ,
                                                         
                                                         
                                                            iff
                                                            
                                                            CT
                                                            (
                                                            x
                                                            ,
                                                            y
                                                            )
                                                            [
                                                            k
                                                            ]
                                                            =
                                                            
                                                               
                                                                  CT
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            (
                                                            x
                                                            -
                                                            d
                                                            ,
                                                            y
                                                            )
                                                            [
                                                            k
                                                            ]
                                                         
                                                      
                                                      
                                                         
                                                            0
                                                            ,
                                                         
                                                         
                                                            otherwise
                                                            ,
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                C
                                             
                                             
                                                CT
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          =
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   ∀
                                                   k
                                                
                                             
                                          
                                          
                                             
                                                μ
                                             
                                             
                                                c
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          [
                                          k
                                          ]
                                          .
                                       
                                    
                                 
                              
                           
                        
                     The initial DSI of Census transformed images calculated by using Hamming distance [23].


                     NCC is an intensity and patch based matching method that is especially robust against Gaussian noise between the matched patches. For simplified notation, let 
                        
                           
                              
                                 I
                              
                              
                                 p
                              
                           
                        
                      and 
                        
                           
                              
                                 I
                              
                              
                                 p
                                 -
                                 d
                              
                           
                        
                      denote the pixels at 
                        
                           (
                           x
                           ,
                           y
                           )
                        
                      and 
                        
                           x
                           -
                           d
                           ,
                           y
                        
                      respectively. Eq. (.7) presents the initial DSI calculation using NCC:
                        
                           (.7)
                           
                              
                                 
                                    C
                                 
                                 
                                    NCC
                                 
                              
                              (
                              p
                              ,
                              d
                              )
                              =
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          
                                             
                                                N
                                             
                                             
                                                p
                                             
                                          
                                       
                                    
                                    
                                       
                                          I
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                    
                                       
                                          I
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                ′
                                             
                                          
                                          -
                                          d
                                       
                                       
                                          ′
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      p
                                                   
                                                
                                             
                                          
                                          
                                             
                                                I
                                             
                                             
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                ∑
                                             
                                             
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      p
                                                   
                                                
                                             
                                          
                                          
                                             
                                                I
                                             
                                             
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                -
                                                d
                                             
                                             
                                                ′
                                                2
                                             
                                          
                                       
                                    
                                 
                              
                              .
                           
                        
                     
                     ZNCC is similar to NCC whereas it provides more robustness against gain and offset variation between matched image patches [30]:
                        
                           (.8)
                           
                              
                                 
                                    C
                                 
                                 
                                    ZNCC
                                 
                              
                              (
                              p
                              ,
                              d
                              )
                              =
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          
                                             
                                                N
                                             
                                             
                                                p
                                             
                                          
                                       
                                    
                                    (
                                    
                                       
                                          I
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                    -
                                    
                                       
                                          
                                             
                                                I
                                             
                                             
                                                ‾
                                             
                                          
                                       
                                       
                                          p
                                       
                                    
                                    )
                                    (
                                    
                                       
                                          I
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                ′
                                             
                                          
                                          -
                                          d
                                       
                                       
                                          ′
                                       
                                    
                                    -
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      I
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                       
                                          p
                                       
                                    
                                    )
                                 
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      p
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            
                                                               
                                                                  p
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      -
                                                      
                                                         
                                                            
                                                               
                                                                  I
                                                               
                                                               
                                                                  ‾
                                                               
                                                            
                                                         
                                                         
                                                            p
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                ∑
                                             
                                             
                                                
                                                   
                                                      p
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                ∈
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      p
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            
                                                               
                                                                  p
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            -
                                                            d
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      -
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        I
                                                                     
                                                                     
                                                                        ′
                                                                     
                                                                  
                                                               
                                                               
                                                                  ¯
                                                               
                                                            
                                                         
                                                         
                                                            p
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                              
                              .
                           
                        
                     For calculating NCC and ZNCC, we choose a patch size, 
                        
                           
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          p
                                       
                                    
                                 
                              
                           
                        
                      of 
                        
                           5
                           ×
                           5
                        
                     .


                     Sobel can suppress the noise in the intensity images. Let 
                        
                           
                              
                                 I
                              
                              
                                 s
                              
                           
                           (
                           x
                           ,
                           y
                           )
                        
                      denote sobel filter of size 
                        
                           3
                           ×
                           3
                        
                      response of image I at pixel 
                        
                           (
                           x
                           ,
                           y
                           )
                        
                     :
                        
                           (.9)
                           
                              
                                 
                                    C
                                 
                                 
                                    SB
                                 
                              
                              (
                              x
                              ,
                              y
                              ,
                              d
                              )
                              =
                              
                                 
                                    
                                       
                                          
                                             I
                                          
                                          
                                             s
                                          
                                       
                                       (
                                       x
                                       ,
                                       y
                                       )
                                       -
                                       
                                          
                                             I
                                          
                                          
                                             s
                                          
                                          
                                             ′
                                          
                                       
                                       (
                                       x
                                       -
                                       d
                                       ,
                                       y
                                       )
                                    
                                 
                              
                              .
                           
                        
                     
                     LoG can suppress the noise and provide robustness against offset in intensities. Similar to [20], we incorporated LoG kernel with size 
                        
                           5
                           ×
                           5
                        
                      and standard deviation of 1:
                        
                           (.10)
                           
                              
                                 
                                    
                                    
                                       
                                          L
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          =
                                          
                                             
                                                -
                                                1
                                             
                                             
                                                π
                                                
                                                   
                                                      σ
                                                   
                                                   
                                                      4
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   1
                                                   -
                                                   
                                                      
                                                         
                                                            
                                                               x
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                      
                                                      
                                                         2
                                                         
                                                            
                                                               σ
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                e
                                             
                                             
                                                -
                                                
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            y
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                   
                                                      2
                                                      
                                                         
                                                            σ
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          ,
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                I
                                             
                                             
                                                LoG
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          =
                                          I
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          ⊗
                                          L
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          ,
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                C
                                             
                                             
                                                LoG
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          ,
                                          d
                                          )
                                          =
                                          |
                                          
                                             
                                                I
                                             
                                             
                                                LoG
                                             
                                          
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          -
                                          
                                             
                                                I
                                             
                                             
                                                LoG
                                             
                                             
                                                ′
                                             
                                          
                                          (
                                          x
                                          -
                                          d
                                          ,
                                          y
                                          )
                                          |
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                     Mutual Information (MI). If we assume the intensity values of pixels as random variables (RV), X, that has probability density function P, we can find the correlation between the two distributions in stereo images. Eq. (.11) depicts the entropy, 
                        
                           H
                           (
                           X
                           )
                        
                     , of the distribution of X. MI is used to find how similar the two distributions are between two image patches in stereo images and calculated as depicted in Eq. (.12).
                        
                           (.11)
                           
                              H
                              (
                              X
                              )
                              =
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       x
                                    
                                 
                              
                              
                                 
                                    P
                                 
                                 
                                    X
                                 
                              
                              (
                              x
                              )
                              (
                              log
                              (
                              
                                 
                                    P
                                 
                                 
                                    X
                                 
                              
                              (
                              x
                              )
                              )
                              )
                              ,
                           
                        
                     
                     
                        
                           (.12)
                           
                              MI
                              (
                              X
                              ,
                              Y
                              )
                              =
                              H
                              (
                              X
                              )
                              +
                              H
                              (
                              Y
                              )
                              -
                              H
                              (
                              X
                              ,
                              Y
                              )
                              ,
                           
                        
                     
                     
                        
                           (.13)
                           
                              
                                 
                                    C
                                 
                                 
                                    MI
                                 
                              
                              (
                              x
                              ,
                              y
                              ,
                              d
                              )
                              =
                              -
                              MI
                              (
                              X
                              ,
                              Y
                              )
                              ,
                           
                        
                     where 
                        
                           H
                           (
                           X
                           ,
                           Y
                           )
                        
                      is the joint entropy of the two distributions, X and Y. In Eq. (.13), we negate the mutual information in order to obtain a cost measure rather than a correlation. Therefore, as the mutual information decrease, better stereo correspondences are obtained.

AD, RGB, Mean, BT, Rank, Census, Sobel and LoG are calculated pixel-wise, however NCC, ZNCC and MI are calculated over a neighbourhood. In order to compensate this difference, the pixel-wise costs are aggregated over 
                        
                           3
                           ×
                           3
                        
                      windows. All of the costs are normalized to have values in 
                        
                           [
                           0
                           ,
                           1
                           ]
                        
                      before confidence estimation and fusion in order to prevent range difference in between.

To filter the wrong matches in stereo matching, it is important to measure the confidence of matching at each pixel. The confidence of a match can be measured using the DSI. Hu and Mordohai [15] provided a survey of stereo confidences by incorporating 18 different stereo confidences. Pfeiffer et al. [28] picked four best performing confidence measures based on [15] in their experiments. In our work, we also choose four best performing confidence measures based on [15,28] and incorporate them in our fusion algorithm. Fig. 12
                      shows the four confidence estimation results for the initial matching on Tsukuba dataset (see Fig. 13
                     ).


                     Left–Right Difference (LRD) is one of the top performing confidence measures because of its cross control over the left and right matching scores. Let 
                        
                           
                              
                                 d
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 c
                              
                              
                                 1
                              
                           
                        
                     , and 
                        
                           
                              
                                 c
                              
                              
                                 2
                              
                           
                        
                      be the winner disparity, minimum, and second minimum costs respectively, LRD confidence, 
                        
                           
                              
                                 S
                              
                              
                                 LRD
                              
                           
                           (
                           x
                           ,
                           y
                           )
                        
                     , can be calculated as:
                        
                           (.14)
                           
                              
                                 
                                    S
                                 
                                 
                                    LRD
                                 
                              
                              (
                              x
                              ,
                              y
                              )
                              =
                              
                                 
                                    
                                       
                                          c
                                       
                                       
                                          2
                                       
                                    
                                    -
                                    
                                       
                                          c
                                       
                                       
                                          1
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   1
                                                
                                             
                                             -
                                             
                                                
                                                   
                                                      min
                                                   
                                                   
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                
                                             
                                             (
                                             
                                                
                                                   c
                                                
                                                
                                                   ′
                                                
                                             
                                             (
                                             x
                                             -
                                             
                                                
                                                   d
                                                
                                                
                                                   1
                                                
                                             
                                             ,
                                             y
                                             ,
                                             
                                                
                                                   d
                                                
                                                
                                                   ′
                                                
                                             
                                             )
                                             )
                                          
                                       
                                    
                                    +
                                    ∊
                                 
                              
                              ,
                           
                        
                     where 
                        
                           
                              
                                 c
                              
                              
                                 ′
                              
                           
                           (
                           x
                           -
                           
                              
                                 d
                              
                              
                                 1
                              
                           
                           ,
                           y
                           ,
                           
                              
                                 d
                              
                              
                                 ′
                              
                           
                           )
                        
                      denotes target to reference cost and 
                        
                           
                              
                                 d
                              
                              
                                 ′
                              
                           
                        
                      represents the disparities from target to reference. As the difference between 
                        
                           
                              
                                 c
                              
                              
                                 1
                              
                           
                        
                      and 
                        
                           
                              
                                 min
                              
                              
                                 
                                    
                                       d
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                           (
                           
                              
                                 c
                              
                              
                                 ′
                              
                           
                           (
                           x
                           -
                           
                              
                                 d
                              
                              
                                 1
                              
                           
                           ,
                           y
                           ,
                           
                              
                                 d
                              
                              
                                 ′
                              
                           
                           )
                           )
                        
                      decrease, the confidence increases. We would expect that they would be equal if there is no error and no occlusion between the two images. Therefore, we add a small positive value 
                        
                           ∊
                        
                      to the denominator to ensure we do not obtain a zero denominator.


                     Naive Peak Ratio (PKRN) is one of the simple yet effective stereo confidence measure that uses only the reference matching scores. 
                        
                           
                              
                                 S
                              
                              
                                 PKRN
                              
                           
                        
                      is defined as:
                        
                           (.15)
                           
                              
                                 
                                    S
                                 
                                 
                                    PKRN
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          c
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          1
                                       
                                    
                                    +
                                    ∊
                                 
                              
                              .
                           
                        
                     
                     
                        
                           
                              
                                 S
                              
                              
                                 PKRN
                              
                           
                        
                      observes the ratio of the minimum and second minimum costs. As long as this ratio is high, the best match is unique compared to other possible matches and vice versa.


                     Maximum Likelihood Measure (MLM) assumes that the matching cost values has a normal distribution so its pdf can be calculated. 
                        
                           
                              
                                 S
                              
                              
                                 MLM
                              
                           
                        
                      can be calculated as:
                        
                           (.16)
                           
                              
                                 
                                    S
                                 
                                 
                                    MLM
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          e
                                       
                                       
                                          -
                                          
                                             
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                             
                                                2
                                                
                                                   
                                                      σ
                                                   
                                                   
                                                      MLM
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          d
                                       
                                    
                                    
                                       
                                          e
                                       
                                       
                                          -
                                          
                                             
                                                c
                                                (
                                                d
                                                )
                                             
                                             
                                                2
                                                
                                                   
                                                      σ
                                                   
                                                   
                                                      MLM
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              ,
                           
                        
                     where 
                        
                           c
                           (
                           d
                           )
                        
                      describes the cost value for each disparity d. 
                        
                           
                              
                                 S
                              
                              
                                 MLM
                              
                           
                        
                      also considers only the reference cost values.


                     Local Curve (LC) 
                     [31] is incorporated by Pfeiffer et al. [28] and provided the best accuracy in their Stixel World experiments. LC considers the difference of the costs of the candidate disparities around the winner disparity with minimum cost. Let 
                        
                           
                              
                                 c
                              
                              
                                 +
                              
                           
                        
                      and 
                        
                           
                              
                                 c
                              
                              
                                 -
                              
                           
                        
                      be the costs of the adjacent disparities around 
                        
                           
                              
                                 d
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 S
                              
                              
                                 LC
                              
                           
                        
                      is calculated as:
                        
                           (.17)
                           
                              
                                 
                                    S
                                 
                                 
                                    LC
                                 
                              
                              =
                              
                                 
                                    
                                       max
                                    
                                    (
                                    
                                       
                                          c
                                       
                                       
                                          +
                                       
                                    
                                    ,
                                    
                                       
                                          c
                                       
                                       
                                          -
                                       
                                    
                                    )
                                    -
                                    
                                       
                                          c
                                       
                                       
                                          1
                                       
                                    
                                 
                                 
                                    γ
                                 
                              
                              ,
                           
                        
                     where 
                        
                           γ
                        
                      is a parameter to separate the distribution nicely and assigned to 480 in [28].

@&#REFERENCES@&#

