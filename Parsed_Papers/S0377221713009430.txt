@&#MAIN-TITLE@&#The one-dimensional cutting stock problem with usable leftovers – A survey

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The literature of cutting stock problem with usable leftovers is reviewed.


                        
                        
                           
                           Paper organization: heuristic methods, cutting pattern and item oriented models.


                        
                        
                           
                           We point out some further research related to the problem.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Usable leftovers

Cutting stock problem

Review

@&#ABSTRACT@&#


               
               
                  In this article, we review published studies that consider the solution of the one-dimensional cutting stock problem (1DCSP) with the possibility of using leftovers to meet future demands, if long enough. The one-dimensional cutting stock problem with usable leftovers (1DCSPUL) is a problem frequently encountered in practical settings but often, it is not dealt with in an explicit manner. For each work reviewed, we present the application, the mathematical model if one is proposed and comments on the computational results obtained. The approaches are organized into three classes: heuristics, item-oriented, or cutting pattern-oriented.
               
            

@&#INTRODUCTION@&#

The cutting stock problem consists of cutting a set of parts available in stock (called objects) to produce smaller pieces (called items) in specified quantities, optimizing an objective function. Examples of objective functions include minimizing the total waste, minimizing the cost of cutting the objects, minimizing the total number of objects cut, maximizing profit and minimizing production costs.

One solution to the cutting stock problem, often called the cutting plan, is provided by a set of cutting patterns and their corresponding frequencies, in other words, how many times each cutting pattern must be cut to produce the items. A cutting pattern defines a subset of items to be cut from an object. In the case where two or more dimensions of the items are relevant for the cutting problem, a cutting pattern also includes the layout of the items to be cut in the object.

The cutting stock problem arises in many industrial processes where objects can be steel bars, rolls of paper or aluminum, wood boards or metal sheets, printed circuit boards, glass or fiber glass sheets, leather pieces and others. In these industries, reducing production costs and/or improving efficiency are often associated with using appropriate cutting plans and/or cutting strategies.

The economic importance of such problems and the difficulties in solving them have motivated the operations research community to develop more efficient methods to solve them. Various articles about the cutting stock problem can be found in the literature, as can be seen in review articles and special editions: Hinxman (1980), Dyckhoff, Kruse, Abel, and Gal (1985), Dyckhoff (1990), Dyckhoff and Wäscher (1990), Dyckhoff and Finke (1992), Dowsland and Dowsland (1992), Sweeney and Parternoster (1992), Martello (1994a, 1994b), Bischoff and Wäscher (1995), Dyckhoff, Scheithauer, and Terno (1997), Arenales, Morabito, and Yanasse (1999), Wang and Wäscher (2002), Hifi (2002), Oliveira and Wäscher (2007), Wäscher, Haußner, and Schumann (2007) and Morabito, Arenales, and Yanasse (2009). Additional references may be found in ESICUP (2013).

Each practical situation where cutting stock problems arise has its specific features, constraints and objectives, which often prevents the application of existing models and algorithms in a straightforward manner.

One problem often encountered is the use of leftovers of cutting patterns. This problem has been addressed directly in the literature only recently, although it was cited in the early 1970s by Brown (1971). The cutting stock problem with usable leftovers was studied by Arbibi, Marinelli, Rossi, and Di Iorio (2002) in an automobile industry. In this industry, the items cut were used to produce belts with a fixed width and different lengths. Retails (i.e., the usable leftovers) remaining during the cutting process could be stitched and used to manufacture other different goods. According to the authors, with the possibility of using leftovers, a considerable amount of material could be saved. This type of use of leftovers differs from that considered in the papers of this survey. In this paper, the leftovers generated during the cutting process are used directly without further processing.

In this paper, a literature review was carried out on the 1DCSP with leftovers that may be used to produce items demanded in the future, if the leftovers are long enough. We present the application, the mathematical model if one is proposed, as well as comments on the computational results obtained. It should be mentioned that literature on the two-dimensional case is scarce. The interested reader may refer to Cherri (2009), Cherri and Vianna (2010) and Andrade, Birgin, and Morabito (2013).

In addition to published studies, the use of leftovers is also considered in some commercial software available on the Internet, however many of them have limited free versions. Minimizing waste is usually the main objective considered in the software, and several additional restrictions can be inserted. A list of software that considers this problem can be found in Macedo et al. (2008).

The articles considered in this survey address cutting stock problems with usable leftovers. These problems cannot be classified and organized according to the typology proposed by Wäscher et al. (2007). Some of the problems are input optimization, others are output minimization, some consider multiple objects in stock, others just a single type of object, among other characteristics. Since there is no classification that applies to all the problems with these diverse characteristics, this class of problems will be referred to as 1DCSPUL: one dimensional cutting stock problem with usable leftovers.

For the sake of presentation, the revised papers were classified into three groups according to the structure of the mathematical model used in the study or the solution method. The first group contains articles that solve the problem using heuristics not based on mathematical programming models; the second group includes studies that solve the problem using item allocation oriented modeling; the third group contains articles that solve the problem using cutting pattern oriented approaches. In the case whereby an article presents a mixture of model structures or a model combined with heuristics, the feature considered more relevant in the work was used to classify it.

This paper is organized as follows. In Section 2, notation used to present the mathematical models is introduced; in Section 3, studies that use heuristic methods not based on mathematical programming models to solve the 1DCSPUL are presented; in Section 4, studies with item allocation oriented modeling are presented; in Section 5, studies that use models with cutting pattern oriented approaches are presented; and in Section 6, we comment on the different approaches and we present some concluding remarks.

In this paper, we will use the term “standard objects” to refer to objects purchased on the market and the term “retails” to refer to leftovers of previous cuts (not counted as waste) that are long enough to cut items for future usage.

The notation used in the models presented is defined as follows:


                     Indices
                     
                        
                           •
                           
                              i: item type;


                              j: cutting pattern;


                              k: object type.


                     Stock
                     
                        
                           •
                           
                              K: number of types of objects in stock;


                              
                                 
                                    
                                       
                                          L
                                       
                                       
                                          k
                                       
                                    
                                 
                              : length of object type k;


                              
                                 
                                    
                                       
                                          e
                                       
                                       
                                          k
                                       
                                    
                                 
                              : availability of object type k in stock;


                              
                                 
                                    
                                       
                                          c
                                       
                                       
                                          k
                                       
                                    
                                 
                              : unit cost of object type k.


                     Items
                     
                        
                           •
                           
                              m: number of item types;


                              
                                 
                                    
                                       
                                          ℓ
                                       
                                       
                                          i
                                       
                                    
                                 
                              : length of item type i;


                              
                                 
                                    
                                       
                                          d
                                       
                                       
                                          i
                                       
                                    
                                 
                              : demand for item type i.


                     Other parameters
                     
                        
                           •
                           
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          k
                                       
                                    
                                 
                              : total number of cutting patterns related to object type k;


                              
                                 
                                    
                                       
                                          δ
                                       
                                       
                                          k
                                       
                                    
                                 
                              : threshold length for a retail from object type k;


                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          ijk
                                       
                                    
                                 
                              : number of items type i in cutting pattern j of object type k.


                     Variables
                     
                        
                           •
                           
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          jk
                                       
                                    
                                 
                              : number of objects type k cut according to cutting pattern j (frequency);


                              
                                 
                                    
                                       
                                          p
                                       
                                       
                                          ik
                                       
                                    
                                 
                              : number of items type i cut from object type k;


                              
                                 
                                    
                                       
                                          s
                                       
                                       
                                          k
                                       
                                    
                                    =
                                    
                                       
                                          L
                                       
                                       
                                          k
                                       
                                    
                                    -
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          m
                                       
                                    
                                    
                                       
                                          ℓ
                                       
                                       
                                          i
                                       
                                    
                                    
                                       
                                          p
                                       
                                       
                                          ik
                                       
                                    
                                 
                              : leftover from object type k.

This notation considers several types of objects available in stock. When only one type of object is considered in the formulation, index k is omitted. In addition to this general notation, other variables and parameters are defined as needed.


                     Gradisar, Jesenko, and Resinovic (1997) studied the 1DCSPUL in a clothing industry, where the lengths of the objects in stock were all different. To solve this problem, the authors proposed a bi-objective model: minimization of the number of items whose demand are not satisfied and the total trim loss. The possibility of unused pieces being returned to stock was considered. They proposed a mathematical model to the cutting problem with usable leftovers, but the authors did not use it to solve the problem. Instead, they developed a greedy heuristic procedure, called COLA (Computerized Laying out). In COLA, objects are sorted in non-decreasing order and for each object in the sequence, a cutting pattern is built considering three different ways to sort the items. Cutting patterns are generated solving a few knapsack problems (the utility value is changed for each ordering of the items) and the cutting pattern with the lowest trim loss is used. Although computational tests were not presented in the article, the authors claim that they were carried out and COLA algorithm showed a good performance.

In Gradisar, Kljajic, Resinovic, and Jesenko (1999) the authors improved and generalized the heuristic proposed in Gradisar et al. (1997) to solve the 1DCSPUL. Two possible cases were analyzed: the stock is sufficient to meet all demands and the demands cannot be met with the available stock. For each case, a mathematical model is proposed, however once again they are not used to solve the problems. They improved algorithm COLA and denoted it as CUT. According to the authors, CUT finds better solutions (with less trim loss) in a lower computational time.

In Gradisar and Trkman (2005) the authors limited the quantity of retails generated during the cutting process and proposed a combination of the heuristic procedure CUT with a branch and bound method to solve the problem.


                     Dimitriadis and Kehris (2009) presented a study carried out in a Greek customized door and window manufacturing industry. The problem was the classic cutting stock problem with the objective of minimizing the number of standard objects used during the cutting process. As a variation to this problem, the authors considered that residual lengths larger than a certain size could return to stock to be used as retails. To solve this problem, the FFD – First Fit Decreasing (Eilon & Christofides, 1971) and the MBS – Minimal Bin Slack (Gupta & Ho, 1999) heuristics were used.

In the FFD heuristic, the largest item is cut as much as possible or until its demand is satisfied. When it is no longer possible to cut the largest item, the second largest item is considered and so on, until we reach the smallest item. If no new item can be cut, the pattern is complete. In the MBS heuristic, each iteration starts with a list B of the items not assigned to bins so far ordered in non-increasing length. If list B is empty, the process is finished. Otherwise, a new packing of the items in a bin is determined testing all subsets of B. The first packing determined with no leftover is kept or, if none is obtained, the subset with the smallest leftover is kept. The search for the best subset packing starts following the order of the items in list B. The items packed from list B are removed and then re-iterate.

The FFD and MBS heuristics were used to solve the cutting problem and the generated remains were identified as retail or as trim loss. The authors commented that the MBS heuristic may generate retails. According to them, good solutions were generated but no description of the heuristic with retail was presented. The cutting patterns are generated considering standard objects and retails available in stock. Retails in stock that are not used in the current period, remain in stock for future use. Computational tests were carried out using real instances where the stock of standard objects had only one single type. From the computational tests, the authors concluded that the MBS heuristic performed better than the FFD heuristic.


                     Cherri, Arenales, and Yanasse (2009) made changes in classic heuristic procedures to solve the 1DCSPUL. The authors developed the FFD
                        A
                      and Greedy
                        A
                      constructive procedures, adapted from the FFD and Greedy procedures. In the greedy procedure, the cutting patterns are generated by solving a sequence of knapsack problems. For both procedures, from the generated cutting patterns, a few are selected considering some criteria, for example, minimum waste. The selected cutting patterns are used as much as possible, without exceeding the required demand of the items and the availability of the associated object. The adaptations they made in these procedures consisted of making changes in the cutting pattern having high losses in order to reduce them or, alternatively, produce a retail. The residual procedures FFD
                        A
                      and Greedy
                        A
                      are used in combination with the continuous solution obtained by the column generation approach, as proposed by Gilmore and Gomory (1963).


                     Cherri et al. (2009) also modified the residual greedy rounding procedure (RAG), proposed by Poldi and Arenales (2009) and proposed the RAG
                        A
                      heuristics. In these procedures, an integer solution for the cutting stock problem is obtained by using one version of heuristic RAG. Then, the waste in each cutting pattern is analyzed. If the waste is within acceptable limits (threshold pre-defined), the cutting pattern is accepted; otherwise, it is rejected. After examining all the generated cutting patterns, the FFD
                        A
                      heuristic is applied to the residual demand. The authors carried out several computational tests to evaluate the performance of these heuristic procedures. In all performed tests, the heuristic procedures that consider the possibility of generating retails achieved a better performance in terms of waste and number of generated retails compared to their classic versions and also compared with the heuristic COLA (Gradisar et al., 1997). In Cherri, Alem, and Silva (2011), the authors used a fuzzy inference engine in order to perform a general analysis of the solution methods presented in Cherri et al. (2009). The computational tests indicated that the heuristic procedures developed to deal with the retails obtained better solutions than the conventional procedures, confirming the findings obtained in Cherri et al. (2009). To analyze the solutions, the authors observed the total waste and the reduction of the stock of retails.


                     Cherri, Arenales, and Yanasse (2013) considered a 1DCSP in which the material not used in the cutting pattern, if large enough, was kept for use in the future. They considered the situation where it is desired that the retails should not remain in stock for a long time. A heuristic procedure was proposed for this case based on Cherri et al. (2009) where leftovers had priority-in-use compared to standard objects in stock. The performance of the heuristic was analyzed solving randomly generated dynamic instances with a time horizon. For each period, new demands were considered and a new problem was solved on the basis of the information concerning the stock of the previous periods (standard objects left in stock) and usable leftovers (retails) from previous periods. The computational experiments showed that the solutions presented by the proposed heuristic were better than the solutions obtained by other heuristics from the literature.


                     Kos and Duhovnik (2002) presented a hybrid genetic algorithm to solve a cutting stock problem that arises particularly in the production of steel structures. The stock of raw material is formed by objects of different lengths and retails generated in previous cutting processes. Considering the fact that the objects to be cut are of different sizes, the authors identified the problem as a variation of the Bin Packing Problem with variable length – VBPP (the Variable-Sized Bin Packing Problem). The proposed solution method creates an encoding of chromosomes and genetic operators for the VBPP. A chromosome represents a set of bins, each bin has two properties: capacity (defines the maximum sum of the size of the items) and items (indexed list of item sizes to be allocated in the bins). To keep the amount of retails in stock within reasonable limits, they have a higher priority of use compared to the standard length objects.

The authors consider a preprocessing operation that attempts to use as many retails available as possible before solving the VBPP. This preprocessing is as follows:
                        
                           
                              Step 1: Find the smallest item to be cut. Select the non-standard objects that are long enough to fit the item. Omit items that are larger than the largest retail selected. These items will be handled by the VBPP algorithm;


                              Step 2: For the reduced set of items and the selected non-standard objects, apply the Multiple Subset Sum Problem (MSSP) algorithm (Caprara, Kellerer, & Pferschy, 2000). Items that were not allocated in Steps 1 and 2 are dealt with by the VBPP algorithm.

The Multiple Subset Sum Problem (MSSP) is a special case of the Multiple Knapsack Problem (MKP), where the profit and weight of each item coincide (Caprara et al., 2000). The authors carried out computational tests to analyze the performance of the proposed method. According to them, the solutions were satisfactory and they were obtained in a reasonable computational time.


                     Gracia, Andrés, and Gracia (2013) propose a hybrid approach based on genetic algorithm and different search strategies to solve the problem of cutting structural beams identified in a metalwork company with the objective of minimizing the waste produced during the cutting process. The proposed strategy considers over and under production of items and allow retails to return to stock to meet future demands. During the cutting process, patterns generated from retails have priority over patterns generated from standard objects. To evaluate the performance of the proposed strategy, an instance generator was implemented based on the data of the Poldi and Arenales (2009) instance generator. According to the authors, the instances generated in this way fit the practical instances of the company. The results obtained are superior to solutions obtained from heuristics of the literature that do not consider retails.

In this section, we focus on approaches based on mathematical models where the main decisions consist of determining which items should be allocated in each one of the objects.


                     Sinuany-Stern and Weiner (1994) developed an algorithm to solve the 1DCSPUL in a small workshop at Kibbutz Samar in Israel that cuts metal bars and pipes. The stock of the workshop consisted of standard objects and retails from previous cuts. They considered the cutting stock problem with two objectives. The first objective (most important) was to minimize the generated leftover and the second objective was to accumulate the leftovers in the last object to be cut. If the leftover is greater than a given limit (length of the smallest item demanded), it returns to stock as retail to be used in the future.

In addition to the variables defined in Section 2, the mathematical formulation developed by the authors also considers:
                        
                           •
                           
                              N: the number of objects used during the cutting process.

The linear integer problem was modeled as:
                        
                           (1)
                           
                              minimize
                              
                              N
                              .
                              L
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       m
                                    
                                 
                              
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    d
                                 
                                 
                                    i
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              maximize
                              
                              L
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       m
                                    
                                 
                              
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    p
                                 
                                 
                                    iN
                                 
                              
                           
                        
                     subject to:
                        
                           (3)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       m
                                    
                                 
                              
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    p
                                 
                                 
                                    ik
                                 
                              
                              ⩽
                              L
                              ,
                              
                              k
                              =
                              1
                              ,
                              …
                              ,
                              N
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       =
                                       1
                                    
                                    
                                       N
                                    
                                 
                              
                              
                                 
                                    p
                                 
                                 
                                    ik
                                 
                              
                              ⩾
                              
                                 
                                    d
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                              i
                              =
                              1
                              ,
                              …
                              ,
                              m
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    p
                                 
                                 
                                    ik
                                 
                              
                              ⩾
                              0
                              ,
                              
                              N
                              ⩾
                              0
                              
                              and
                              
                              integer
                              ,
                              
                              i
                              =
                              1
                              ,
                              …
                              ,
                              m
                              ,
                              
                              k
                              =
                              1
                              ,
                              …
                              ,
                              N
                              .
                           
                        
                     However, the value of N is unknown. We know only that 
                        
                           N
                           .
                           L
                           -
                           
                              
                                 ∑
                              
                              
                                 i
                                 =
                                 1
                              
                              
                                 m
                              
                           
                           
                              
                                 ℓ
                              
                              
                                 i
                              
                           
                           
                              
                                 d
                              
                              
                                 i
                              
                           
                           ⩾
                           0
                        
                      for the feasible region defined by (3)–(5) to be non-empty.

The algorithm developed by the authors only solves small problems and is inefficient for large problems. Computer and limited software available in the workshop did not allow the use of column generation (Gilmore & Gomory, 1961, 1963) to solve the problems. The strategy developed to solve the problem was implicit enumeration, beginning with the lower bound for the number of bars given by:
                        
                           
                              
                                 
                                    
                                       
                                          
                                             1
                                          
                                          
                                             L
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                m
                                             
                                          
                                       
                                       
                                          
                                             ℓ
                                          
                                          
                                             i
                                          
                                       
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        
                     where 
                        
                           ⌈
                           x
                           ⌉
                        
                      is the smallest integer greater than or equal to x.

Problem (2)–(5) was solved with N fixed. If a solution was obtained, optimality was ensured, otherwise, N was increased by one unit and the procedure was repeated. This was repeated until a solution was obtained. When retails were available in stock, model (2)–(5) was changed to consider these non-standard objects. If S retails were available in stock, the lower bound for the number of bars was given by:
                        
                           
                              
                                 
                                    
                                       
                                          
                                             1
                                          
                                          
                                             L
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      i
                                                   
                                                
                                                
                                                   
                                                      ℓ
                                                   
                                                   
                                                      i
                                                   
                                                
                                                -
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         q
                                                         =
                                                         1
                                                      
                                                      
                                                         S
                                                      
                                                   
                                                
                                                
                                                   
                                                      L
                                                   
                                                   
                                                      q
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     Constraints (3) and (4) were also changed, respectively, by:
                        
                           (6)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       m
                                    
                                 
                              
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    p
                                 
                                 
                                    ik
                                 
                              
                              ⩽
                              
                                 
                                    L
                                 
                                 
                                    k
                                 
                              
                              ,
                              
                              k
                              =
                              1
                              ,
                              …
                              ,
                              N
                              +
                              S
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       =
                                       1
                                    
                                    
                                       N
                                       +
                                       S
                                    
                                 
                              
                              
                                 
                                    p
                                 
                                 
                                    ik
                                 
                              
                              ⩾
                              
                                 
                                    d
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                              i
                              =
                              1
                              ,
                              …
                              ,
                              m
                              .
                           
                        
                     
                     Abuabara and Morabito (2009) studied the 1DCSPUL in a Brazilian aeronautical company. In this company, metallic structural tubes are cut to manufacture agricultural aircrafts. Different types of objects in stock and retails, generated in previous cuts, are considered. It is assumed that they are sufficient to meet all the demands of the items. The authors proposed two mathematical models. The first (Model 1) is an adaptation of Gradisar et al. (1997) model, but rewritten as a mixed integer problem (MIP). Let M be a sufficient large number, and 
                        
                           
                              
                                 w
                              
                              
                                 k
                              
                           
                        
                      a binary variable. Variable 
                        
                           
                              
                                 w
                              
                              
                                 k
                              
                           
                        
                      is equal to 1 if 
                        
                           
                              
                                 s
                              
                              
                                 k
                              
                           
                           ⩽
                           δ
                        
                      (waste) and, it is equal to 0 if 
                        
                           
                              
                                 s
                              
                              
                                 k
                              
                           
                           >
                           δ
                        
                      (retail). A parameter 
                        
                           ε
                        
                     , a small positive integer, is used to consider the strict inequality.

Parameter 
                        
                           δ
                        
                      is defined as min 
                        
                           {
                           
                              
                                 ℓ
                              
                              
                                 i
                              
                           
                           ,
                           i
                           =
                           1
                           ,
                           …
                           ,
                           m
                           ;
                           
                              
                                 L
                              
                              
                                 k
                              
                           
                           ,
                           k
                           =
                           1
                           ,
                           …
                           ,
                           K
                           }
                        
                     . Any value smaller than 
                        
                           δ
                        
                      is considered waste. The Abuabara and Morabito (2009) model does not limit the number of different types of items that should compose the cutting pattern (this occurs in Gradisar et al. (1997)) and since there is sufficient stock to meet all items demanded, their objective was the minimization of waste.


                        
                           
                              (8)
                              
                                 minimize
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          K
                                       
                                    
                                 
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                              
                           
                        subject to:
                           
                              (9)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          m
                                       
                                    
                                 
                                 
                                    
                                       ℓ
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 +
                                 
                                    
                                       s
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       L
                                    
                                    
                                       k
                                    
                                 
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          K
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 =
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 m
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       z
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          m
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          m
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 ⩽
                                 
                                    
                                       Mz
                                    
                                    
                                       k
                                    
                                 
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (13)
                              
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 δ
                                 )
                                 ⩾
                                 -
                                 
                                    
                                       Mw
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 ε
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (14)
                              
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 δ
                                 )
                                 ⩽
                                 M
                                 (
                                 1
                                 -
                                 
                                    
                                       w
                                    
                                    
                                       k
                                    
                                 
                                 )
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (15)
                              
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       Mw
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 0
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (16)
                              
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       Mz
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 0
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (17)
                              
                                 -
                                 
                                    
                                       s
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 0
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (18)
                              
                                 
                                    
                                       s
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 
                                    
                                       Mw
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 
                                    
                                       Mz
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 2
                                 M
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (19)
                              
                                 -
                                 
                                    
                                       z
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 
                                    
                                       u
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 0
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (20)
                              
                                 
                                    
                                       w
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 
                                    
                                       u
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 1
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (21)
                              
                                 
                                    
                                       z
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       w
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       u
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 0
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (22)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          K
                                       
                                    
                                 
                                 
                                    
                                       u
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 1
                              
                           
                        
                        
                           
                              (23)
                              
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 ⩾
                                 0
                                 
                                 and
                                 
                                 integer
                                 ,
                                 
                                 
                                    
                                       s
                                    
                                    
                                       k
                                    
                                 
                                 ⩾
                                 0
                                 ,
                                 
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 ⩾
                                 0
                                 ,
                                 
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 m
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (24)
                              
                                 
                                    
                                       z
                                    
                                    
                                       k
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 ,
                                 
                                 
                                    
                                       w
                                    
                                    
                                       k
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 ,
                                 
                                 
                                    
                                       u
                                    
                                    
                                       k
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                                 .
                              
                           
                        
                     

In this model, the objective function (8) minimizes the waste, constraints (9) and (10) consider knapsack and demand constraints, respectively. Constraints (11) and (12) indicate whether the object k is used in the cutting plan. Constraints (13)–(21) verify if the leftover in the cutting pattern is waste or a retail. Constraint (22) limits the number of retails to be generated.

Note that Model 1 may not present feasible solutions even if the demand of the items can be met. This occurs when constraint (22) is violated, that is, two or more retails are generated during the cutting process. The limitation on the number of generated retails was also imposed in Gradisar, Kljajic et al. (1999) and in Gradisar and Trkman (2005).

The second model (Model 2) is an improvement of Model 1.


                        
                           
                              (25)
                              
                                 minimize
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          K
                                       
                                    
                                 
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                              
                           
                        subject to:
                           
                              (26)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          m
                                       
                                    
                                 
                                 
                                    
                                       ℓ
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 ⩽
                                 
                                    
                                       L
                                    
                                    
                                       k
                                    
                                 
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (27)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          K
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 =
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 m
                              
                           
                        
                        
                           
                              (28)
                              
                                 δ
                                 
                                    
                                       u
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 
                                    
                                       L
                                    
                                    
                                       k
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          m
                                       
                                    
                                 
                                 
                                    
                                       ℓ
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (29)
                              
                                 
                                    
                                       L
                                    
                                    
                                       k
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          m
                                       
                                    
                                 
                                 
                                    
                                       ℓ
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 ⩽
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 
                                    
                                       u
                                    
                                    
                                       k
                                    
                                 
                                 M
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (30)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          K
                                       
                                    
                                 
                                 
                                    
                                       u
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 1
                              
                           
                        
                        
                           
                              (31)
                              
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 ⩾
                                 0
                                 
                                 and
                                 
                                 integer
                                 ,
                                 
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 ⩾
                                 0
                                 ,
                                 
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 m
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (32)
                              
                                 
                                    
                                       z
                                    
                                    
                                       k
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 ,
                                 
                                 
                                    
                                       u
                                    
                                    
                                       k
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                                 .
                              
                           
                        
                     

In Model 2, the objective function (25) and constraints (26), (27) and (30) are the same as in Model 1. Constraints (28) and (29) are related to the retails and waste in the cutting pattern.

Observe that with a slight modification in Models 1 and 2, one can consider the criteria of minimizing the total length of the objects cut. For alternative solutions with minimal waste, the preference would be to avoid the generation of new retails. In this case, in Model 2, the objective function (25) should be replaced by:
                           
                              (33)
                              
                                 minimize
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          K
                                       
                                    
                                 
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             =
                                             1
                                          
                                          
                                             K
                                          
                                       
                                       
                                          
                                             L
                                          
                                          
                                             k
                                          
                                       
                                       
                                          
                                             z
                                          
                                          
                                             k
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             =
                                             1
                                          
                                          
                                             K
                                          
                                       
                                       
                                          
                                             L
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Having run the computational tests considering the objective of minimizing waste and using commercial software, the authors observed that Model 2 performed better compared to Model 1 and compared to the solutions of the company. The trade-off between waste and the maximum allowed number of retails during the cutting process was also shown.

Observe that by simply modifying Models 1 and 2, infeasibility of the problem can be avoided due to constraints (22) or (30) in Models 1 and 2, respectively. It is sufficient to add a non-negative variable, say x, on the right hand side of the inequality and penalize it in the objective function.


                        Trkman and Gradisar (2007) simulated the resolution of the cutting stock problem in consecutive periods with the objective of minimizing waste or production costs. The authors considered that the objects in stock are of different lengths and retails return to stock. In each simulated period, new objects are added to those already available in stock. Demands of the subsequent periods are unknown or only their probability distributions are known.

The objective of the mathematical model is to minimize waste and retail costs returning to stock. With this objective, a low amount of retails return to stock, even if this implies in a slight increase in waste in the current period. In addition to the parameters defined in Section 2, the mathematical model considers:
                           
                              •
                              
                                 c: unit cost of lost material;


                                 
                                    
                                       
                                          
                                             p
                                          
                                          
                                             r
                                          
                                       
                                    
                                 : cost of returning a retail to stock;


                                 
                                    
                                       
                                          
                                             g
                                          
                                          
                                             k
                                          
                                       
                                    
                                 : indicates whether the leftover 
                                    
                                       
                                          
                                             s
                                          
                                          
                                             k
                                          
                                       
                                    
                                  returns to stock.
                                    
                                       (34)
                                       
                                          
                                             
                                                g
                                             
                                             
                                                k
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            1
                                                            ,
                                                         
                                                         
                                                            if
                                                            
                                                            and
                                                            
                                                            only
                                                            
                                                            if
                                                            
                                                            
                                                               
                                                                  s
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                            ⩾
                                                            δ
                                                            
                                                            and
                                                            
                                                            (
                                                            
                                                               
                                                                  s
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                            c
                                                            )
                                                            ⩾
                                                            
                                                               
                                                                  p
                                                               
                                                               
                                                                  r
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            0
                                                            ,
                                                         
                                                         
                                                            otherwise
                                                            .
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              


                                 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             k
                                          
                                       
                                    
                                 : indicates whether object k is used in the cutting plan;
                                    
                                       (35)
                                       
                                          
                                             
                                                y
                                             
                                             
                                                k
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            0
                                                            ,
                                                         
                                                         
                                                            if
                                                            
                                                            object
                                                            
                                                            k
                                                            
                                                            is
                                                            
                                                            used
                                                            
                                                            in
                                                            
                                                            the
                                                            
                                                            cutting
                                                            
                                                            plan
                                                         
                                                      
                                                      
                                                         
                                                            1
                                                            ,
                                                         
                                                         
                                                            otherwise
                                                            .
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              


                                 
                                    
                                       
                                          
                                             t
                                          
                                          
                                             k
                                          
                                       
                                    
                                 : length of the waste in object 
                                    
                                       k
                                       ,
                                       
                                       k
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       K
                                    
                                 :
                                    
                                       (36)
                                       
                                          
                                             
                                                t
                                             
                                             
                                                k
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  s
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                            ,
                                                         
                                                         
                                                            if
                                                            
                                                            
                                                               
                                                                  y
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                            =
                                                            0
                                                            
                                                            and
                                                            
                                                            
                                                               
                                                                  g
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                            =
                                                            0
                                                         
                                                      
                                                      
                                                         
                                                            0
                                                            ,
                                                         
                                                         
                                                            otherwise
                                                            .
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

The minimum length to return to stock is given by 
                           
                              δ
                              ⩾
                              {
                              min
                              {
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                              
                              ,
                              i
                              =
                              1
                              ,
                              …
                              ,
                              m
                              }
                              ,
                              
                                 
                                    p
                                 
                                 
                                    r
                                 
                              
                              /
                              c
                              }
                           
                        . It is assumed that 
                           
                              min
                              {
                              
                                 
                                    L
                                 
                                 
                                    k
                                 
                              
                              ,
                              k
                              =
                              1
                              ,
                              …
                              ,
                              K
                              }
                              ⩾
                              min
                              {
                              
                                 
                                    ℓ
                                 
                                 
                                    i
                                 
                              
                              ,
                              i
                              =
                              1
                              ,
                              …
                              ,
                              m
                              }
                           
                        .

The mathematical formulation to the problem is as follows:
                           
                              (37)
                              
                                 minimize
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          K
                                       
                                    
                                 
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 c
                                 +
                                 
                                    
                                       g
                                    
                                    
                                       k
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       r
                                    
                                 
                                 )
                              
                           
                        subject to:
                           
                              (38)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          m
                                       
                                    
                                 
                                 
                                    
                                       ℓ
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 +
                                 
                                    
                                       s
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       L
                                    
                                    
                                       k
                                    
                                 
                                 (
                                 1
                                 -
                                 
                                    
                                       y
                                    
                                    
                                       k
                                    
                                 
                                 )
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                                 
                                 (
                                 knapsack
                                 
                                 constraints
                                 )
                              
                           
                        
                        
                           
                              (39)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          K
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 =
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 m
                                 
                                 (
                                 demand
                                 
                                 constraints
                                 )
                              
                           
                        
                        
                           
                              (40)
                              
                                 δ
                                 -
                                 
                                    
                                       s
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 δ
                                 (
                                 
                                    
                                       g
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 1
                                 )
                                 ⩽
                                 0
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (41)
                              
                                 
                                    
                                       s
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 (
                                 
                                    
                                       g
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 
                                    
                                       y
                                    
                                    
                                       k
                                    
                                 
                                 )
                                 (
                                 
                                    max
                                 
                                 
                                    
                                       L
                                    
                                    
                                       k
                                    
                                 
                                 )
                                 ⩽
                                 0
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (42)
                              
                                 
                                    
                                       p
                                    
                                    
                                       ik
                                    
                                 
                                 ⩾
                                 0
                                 
                                 and
                                 
                                 integer
                                 ,
                                 
                                 
                                    
                                       s
                                    
                                    
                                       k
                                    
                                 
                                 ⩾
                                 0
                                 ,
                                 
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 ⩾
                                 0
                                 ,
                                 
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 m
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                              
                           
                        
                        
                           
                              (43)
                              
                                 
                                    
                                       g
                                    
                                    
                                       k
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 ,
                                 
                                 
                                    
                                       y
                                    
                                    
                                       k
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 K
                                 .
                              
                           
                        
                     

According to the authors, the solution of this model simulating periods has low waste, it uses few objects of the stock and it returns a low amount of retails. Computational tests were carried out and the authors observed a good performance of the proposed strategy compared to existing methods.

In this section, we focus on approaches based on mathematical models where the main decisions consist of determining the frequencies (i.e., how many times) that a set of cutting patterns should be cut. We have the set of demands of the items that must be covered by cutting these patterns. The approach used to solve the problems combines the use of a linear or integer linear programming model with heuristics and the generation of the retails is controlled during the cutting process.


                     Roodman (1986) considered the 1DCSPUL with limited availability of objects of different lengths. The main objective is to minimize waste and the second objective is the concentration of the leftovers in a few cutting patterns so that they can be used to cut items demanded in the future. The basic model follows the one proposed by Gilmore and Gomory (1963):
                        
                           (44)
                           
                              minimize
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                    
                                 
                              
                              
                                 
                                    L
                                 
                                 
                                    k
                                    (
                                    j
                                    )
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    j
                                 
                              
                           
                        
                     subject to:
                        
                           (45)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                    
                                 
                              
                              
                                 
                                    α
                                 
                                 
                                    ij
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    j
                                 
                              
                              ⩾
                              
                                 
                                    d
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                              i
                              =
                              1
                              …
                              ,
                              m
                           
                        
                     
                     
                        
                           (46)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       ∈
                                       
                                          
                                             V
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    j
                                 
                              
                              ⩽
                              
                                 
                                    e
                                 
                                 
                                    k
                                 
                              
                              ,
                              
                              k
                              =
                              1
                              …
                              ,
                              K
                           
                        
                     
                     
                        
                           (47)
                           
                              
                                 
                                    x
                                 
                                 
                                    j
                                 
                              
                              ⩾
                              0
                              
                              and
                              
                              integer
                              .
                           
                        
                     
                  

In model (44)–(47), 
                        
                           
                              
                                 α
                              
                              
                                 ij
                              
                           
                        
                      is the number of items type i cut according to cutting pattern 
                        
                           j
                           ,
                           
                           k
                           (
                           j
                           )
                        
                      is the index of the object where cutting pattern j was generated. The objective function (44) minimizes the total length of the objects used which is equivalent to minimizing the total leftovers. Constraints (45) and (46) are demand and stock availability constraints, respectively.

The procedure proposed in Roodman (1986) to solve the problem consists of three phases. In the first phase, the initial solution for the problem is obtained by the relaxing model (44)–(47), using a modified column generation (Roodman, 1984), followed by a rounding technique to obtain an integer solution. In the second phase, the items in excess are considered leftovers and they are used to cut items whose demands were not met in the first phase. If there are items left with unattended demand, a new object in stock is used or the old solution must be modified, reorganizing the waste.

In the third phase, improvements in the solution are made changing cutting patterns that use long objects for shorter ones or vice versa. After these changes, the items in some selected cutting patterns are reorganized if necessary, shortages are temporarily created and items with unmet demand are cut. Computational tests were performed considering 12 instances and the results obtained showed a good performance of the proposed method.

In Gradisar, Resinovic, and Kljajic (1999) the authors propose an approach that combines the use of a linear programming model and a heuristic procedure (based on changes in algorithm COLA, Gradisar et al. (1997)) to find a solution for an 1DCSPUL. In addition to meeting the demand of the items, the approach tries to accumulate leftovers in a single object so that they can be used in the future. In this work, the stock consists of objects with the same length or a few objects with different lengths, that are retails from previous cuts.

The approach consists of two stages. In the first stage, the problem is modeled and solved as a linear problem, considering only standard objects (objects in stock). The following integer programming model was formulated:
                        
                           (48)
                           
                              minimize
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       =
                                       1
                                    
                                    
                                       K
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       
                                          
                                             N
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    L
                                 
                                 
                                    k
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    jk
                                 
                              
                           
                        
                     subject to:
                        
                           (49)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       =
                                       1
                                    
                                    
                                       K
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       
                                          
                                             N
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    α
                                 
                                 
                                    ijk
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    jk
                                 
                              
                              ⩾
                              
                                 
                                    d
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                              i
                              =
                              1
                              ,
                              …
                              ,
                              m
                           
                        
                     
                     
                        
                           (50)
                           
                              
                                 
                                    x
                                 
                                 
                                    jk
                                 
                              
                              ⩾
                              0
                              
                              and
                              
                              integer
                              ,
                              
                              j
                              =
                              1
                              …
                              ,
                              
                                 
                                    N
                                 
                                 
                                    k
                                 
                              
                              ,
                              
                              k
                              =
                              1
                              …
                              ,
                              K
                              .
                           
                        
                     In model (48)–(50), the objective function minimizes the length of the objects to be cut which is equivalent to minimize the leftovers. Constraints (49) impose that the demand of the items must be satisfied.

Problem (48)–(50) is solved following Gilmore and Gomory’s (1963) proposal and the frequencies of the cutting patterns are rounded to obtain an integer solution. In the second stage, the frequencies of the cutting patterns that produced items in excess are reduced (one by one), considering the patterns generated with the longest objects first. Having reduced this, the demand of some of the items may not be met. The residual problem is solved by the COLA heuristic (Gradisar et al., 1997) with modifications: the stock of objects in the residual problem consists of one object of each type and all the retails and only the generation of a single retail is allowed.

The final solution to the problem is given by the union of the solutions obtained from the linear problem and the heuristic procedure. The authors present a single instance to illustrate the proposed method and no comments are made about computational tests.


                     Scheithauer (1991) shows how retails can be considered using the column generation technique proposed by Gilmore and Gomory (1963). He defined the possible length of the retails beforehand and they are included in the problem as additional items without any demand to be met.

For the mathematical formulation of the problem, we define:
                        
                           •
                           
                              
                                 
                                    
                                       
                                          r
                                       
                                       
                                          q
                                       
                                    
                                 
                               is the length of retail q of interest, 
                                 
                                    q
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    p
                                 
                              ;


                              
                                 
                                    
                                       
                                          w
                                       
                                       
                                          q
                                       
                                    
                                 
                               is a positive value estimate of 
                                 
                                    
                                       
                                          r
                                       
                                       
                                          q
                                       
                                    
                                    ,
                                    
                                    q
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    p
                                 
                               (suggestions are given in the paper for these estimates of the retails).

In model (51)–(53), the objective function (51) minimizes the sum of the cost of standard objects cut minus their corresponding retails that are formed with the patterns used. Constraints (52) impose that the demand of items must be met and the constraints (53) consider the non-negativeness and integrality of the variables.

The linear relaxation of model (51)–(53) was solved using column generation similar to Gilmore and Gomory (1963). To generate an integer solution from the optimal solution of the relaxed problem, a rounding procedure was adapted (Terno, Lindemann, & Scheithauer, 1987) that considers the residual lengths.

The author presents two instances to illustrate the improvement that can be obtained when retails are considered. He also makes considerations about the possibility of using the proposed strategy to solve the two-dimensional guillotine cutting stock problem with retails.

An extension of Scheithauer’s (1991) work was proposed by Cui and Yang (2010). In this paper, the authors consider that the objects in stock are limited and the amount of generated retails in the cutting patterns can be controlled. Different costs are assigned to standard objects and retails generated during the cutting process.

To generate an integer solution to the continuous solution of the linear problem, the authors use a heuristic procedure proposed in Cui, Zhao, Yang, and Yu (2008). To verify the performance of the proposed method, computational tests were carried out considering instances generated randomly by Cherri et al. (2009). The authors claim an improved performance of the proposed method compared to methods from the literature considering the waste generated and the amount of retails in stock at the end of the cutting process.


                     Chu and Antonio (1999) considered a real 1DCSPUL in a metal tube industry with various profiles. The objective function considered minimizing the costs with waste and with the time necessary to produce the items. They modeled this problem as a cutting stock problem with technological constraints that arise in the metal industry and the possibility of producing retails to meet future demands. To control the amount of retails that return to stock, the authors consider high transportation costs and a limited storage capacity for retails.


                     Koch, König, and Wäscher (2009) studied a problem in a wood industry where the cutting process is integrated with the transportation and handling of the material. In this problem, the demand of all items must be met and the waste, the costs concerning transportation and handling of the objects must be minimized. The total length of the retails generated that return to stock to meet future demands is also minimized because it has an associated cost. The mathematical model proposed is similar to the one in Gilmore and Gomory (1963) with additional constraints that limit the maximum number of certain types of objects to be used in the solution, and constraints that identify the compartments where different object types are stored. Each compartment has different handling costs. The patterns are generated a priori and their associated costs are known. These costs include waste and retail. According to the authors, the solutions obtained using the proposed method were acceptable by the industry.

The cutting stock problem with usable leftovers is a practical problem of interest to many companies, but it has been little discussed in the literature.

It is a multi-objective problem in its essence, although authors of the papers reviewed in this manuscript treated it as a mono-objective problem. Hence, approaches seeing it as a multi-objective problem can certainly be explored and considered in future studies.

Taking into account the studies conducted so far, we feel that there is a need of a clear definition of the context where a cutting stock with usable leftovers arise. We identified three different situations considered by the authors in the papers reviewed: (i) cases where the demands of the items in subsequent periods are completely unknown; (ii) cases where the demands of the items in subsequent periods are unknown, but there is a set of them which always has some (positive) demand; and (iii) demands of the subsequent periods are unknown, but their probability distributions are known.

Essentially, the first case seems to be the only one where we have a cutting stock with usable leftovers. Since the demands of the items in subsequent periods are completely unknown, there is no option for the decision maker except to keep retails in stock and wait for the definition of future demands of the items to use them. This situation occurs in practice in companies that produce to order.

In the second case, as we know that some items will certainly be demanded, companies have the option to overproduce these items and maintain them in stock to fulfill future demands or generate retails, but keeping in mind that if no better cutting plan arises in the subsequent periods, companies can always cut the retails to produce the items that are often demanded. The third case is similar to the second. This can be seen in practice, for instance, in the aeronautic industry, as described in Abuabara and Morabito (2009). Airplanes are regularly sold by the company and therefore there is a demand for the items used in their manufacturing, however there are some variations in their values. The same approach described in the second case also applies here.

In the second and third cases, in order to decide the company’s strategy, the set-up, handling, transportation and inventory costs of items cut or of retails should be considered and compared. To the best of our knowledge, there are no published papers where these costs are compared. A situation where retails might not be suitable arises in high demand settings where a reduced number of distinct patterns may be desired.

Another issue that needs attention in cutting stock problems with leftovers is the definition or determination of the size of the retails, i.e., how can one differentiate a retail from waste. The smallest size of a retail was defined in different ways by different authors. It was defined as the length of the largest or smallest item required, the average of the lengths of the required items or other pre-established values, for instance, the length of the smallest item that usually always has some demand. In practice, it could be expected that the minimum length of a retail is best defined by the company that has the expertise and control of its production. It is expected that the company will define a “good” size that is cost effective, hence it must take into consideration possible future demands. Otherwise, the retails will be a burden (and a loss) for the company.

As a consequence of choosing the least size of a retail as the smallest item’s length, it could be the case that only relative short retails are is produced and these can be used only to meet future demands of small items. If the future demands of such items are not regular, this choice may not be appropriate. On the other hand, choosing the least size of a retail as the largest item’s length gives the flexibility that any item demanded in the future can be cut from a retail but, it may produce large waste due to the limited number of patterns that can possibly be generated. Choosing the least size of a retail as the average length of the items demanded is a compromise that, depending on the situation may be the best choice. When there is the option of generating retails the company should do an economic analysis comparing the cost and the profit of handling these objects. Usually, keeping retails is convenient when the cost of the material of the standard objects are high and there is some guarantee that the retails will be used in the future. The savings must compensate the costs of handling, transportation and inventory.

Most of the work found in the literature solves the problem using heuristic procedures. Although mathematical models were represented they were not used to solve the problem as they failed to produce good solutions in reasonable execution times. It can be argued that the models were not fully investigated and it is recommended that future work be undertaken. Some of the mathematical models presented are particular to some specific industries and others are simply variations of the classic cutting stock problem. Heuristics are more flexible compared to models in that they are able to include additional features of the real problem more easily.

An additional issue that could be further discussed is the amount of retails generated. What can be considered best? To generate a single retail or more than one? If there is more than one, how many? In most of the papers reviewed in this survey, the authors tried to concentrate the leftovers generated during the cutting process on the least number of standard objects increasing the chances of generating (larger) retails to be used to meet future demands, following what is usually adopted in practice. Is this a good strategy? It seems to be appropriate for the case where the demands of the items in subsequent periods are completely unknown, but it may not be the best strategy when some information about the demands of the items in subsequent periods is known. The space available to allocate retails, handling costs and so on must also be considered.

Concerning the papers in the literature addressing the 1DCSPUL, it can be observed that only recently has this problem attracted the attention of researchers. The problems addressed in the papers have different characteristics, hence little can be concluded about computational efficiency of the heuristics proposed to solve them. With respect to the different models proposed in the literature for the cutting stock problem with leftovers, the item allocation oriented models are not recommended when the demand of the items are high as the number of variables increases with the total number of objects required to meet all demands. The natural choice in these cases would be the cutting pattern oriented approaches that are not affected by the variation of the demand of the items.

Some papers present particularities that we consider relevant and were not fully investigated yet, for example, the limitation on the amount of retails as in Abuabara and Morabito (2009), or costs associated with handling and transportation of the retails, considered in Koch et al. (2009). If there were spaces allocated to retails with limited capacities what would be a suitable approach? Correctly identifying and defining the problem to be solved in the different contexts is important. Each author considered what they thought was relevant related to their problem, for instance, fulfilling the demand, minimizing input, the quality and quantity of retails generated and so on. However, the question of unknown demand or to what extent the future demand of the items is known was not addressed properly. This might be important as decisions can be made as to whether items in stock or retails should be maintained.

In addition to what has already been pointed out in the paper, there are other studies that can be developed concerning the 1DCSPUL. For example, cases where the leftovers (any size) have a commercial value. It can then be considered what would be more interesting? To sell them or maintain retails in stock? What costs should we associate with each retail? Should future setup costs be included that will be incurred to cut a retail? Although this survey was limited to papers that focused on the one-dimensional case of the problem, many of the strategies and comments presented here can be easily extended to higher dimensional cases.

@&#ACKNOWLEDGEMENTS@&#

The authors would like to thank the Fundação de Amparo a Pesquisa do Estado de São Paulo (FAPESP) and Conselho Nacional de Desenvolvimento Científico e Tecnológico (CNPq) for the financial support. The authors would also like to thank the reviewers for their valuable and helpful suggestions.

@&#REFERENCES@&#

