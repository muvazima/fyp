@&#MAIN-TITLE@&#Integral flow decomposition with minimum longest path length

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The shortest integral flow decomposition problem is NP-hard in the strong sense.


                        
                        
                           
                           Two approximation algorithms LPE and BFP are proposed for the problem.


                        
                        
                           
                           BFP has lower computational complexity and better worst-case performance than LPE.


                        
                        
                           
                           For chain network flows the worst-case performance ratio of BFP is less than 2.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Networks

Flow decomposition

Integral flow

NP-hard problem

Approximation algorithms

@&#ABSTRACT@&#


               
               
                  This paper concerns the problem of decomposing a network flow into an integral path flow such that the length of the longest path is minimized. It is shown that this problem is NP-hard in the strong sense. Two approximation algorithms are proposed for the problem: the longest path elimination (LPE) algorithm and the balanced flow propagation (BFP) algorithm. We analyze the properties of both algorithms and present the results of experimental studies examining their performance and efficiency.
               
            

@&#INTRODUCTION@&#

Many network design problems rely on finding the best realization of a traffic demand between a pair (or pairs) of telecommunication nodes (Pióro & Medhi, 2004). These problems are usually formulated using graph theory with demand realizations represented as network flows. Depending on the modeling approach a flow may define link’s bandwidth utilization (an arc flow approach) or data traffic routes (a path flow approach). Both these approaches are equivalent in such a sense that any path flow can be uniquely transformed to an arc flow with the same total flow value and, conversely, for any arc flow one can construct a path flow with the same total flow value, although there may exist many such path flows (Ahuja, Magnanti, & Orlin, 1993).

In most network design problems the arc flow approach is used because it involves much less variables and many algorithms are based on it (Du & Kabadi, 2006). However, an arc flow does not say anything about routing which is essential from a viewpoint of practical demand realization. A path flow provides this information specifying paths (routes) through which traffic is routed. For an arc flow there can be many corresponding path flows that may differ in many important aspects. For example the number of routes or the number of hops in routes of such path flows may be different which in turn may affect network management costs or data transmission latency. Thus, having an arc flow given for example as a solution of some network design problem there is a problem of decomposing it into such a path flow that will have desired properties.

So far, researchers have focused mainly on finding flow decompositions with the minimum number of paths. Vatinlen, Chauvet, Chrétienne, and Mahey (2008) show that this problem is NP-hard in the strong sense. They define a saturating solution as such a flow decomposition that can be obtained by iteratively adding one path with assigned the maximum flow it can handle. Two approximation algorithms giving saturation solutions were proposed. The first one called Shortest Path Heuristic (SPH) add in each iteration the shortest path. The second algorithm named Maximal Residual Path Capacity Heuristic (MRPCH) add in each iteration a path that can handle the largest flow. From the experimental studies (Hartman, Hassidim, Kaplan, Raz, & Segalov, 2012; Vatinlen et al., 2008) it follows that MRPCH usually gives a decomposition with the smaller number of paths.

Here we analyze the problem of decomposing an arc flow into a path flow with minimum length of the longest path. Such a min-max criteria is often considered in many network problems (Li, McCormick, & Simchi-Levi, 1990). By a path length we define the number of arcs constituting the path. In telecommunication terminology this corresponds to the number of route hops. We limit our considerations to network flows represented by directed acyclic graphs. We also assume that flows on all paths have to be integral. This is a natural requirement if the demands have to be realized in modular units such as in the case of optical networks (Pióro & Medhi, 2004). In the paper we show that this problem is NP-hard in the strong sense. However, it should be noted that without the integrality constraint the problem becomes easier to solve. It is because if fractional flows are allowed then general linear programming methods can be used to determine the maximum flow satisfying a constraint on the maximum path length (Baier, 2003).

Algorithms SPH and MRPCH can be used to obtain approximate solutions of the considered problem. Hartman et al. (2012) even compare these algorithms with regard to the length of the longest path in flow decompositions showing in their experiments that better solutions are computed by SPH. Here we propose two other approximation algorithms that efficiently determine flow decompositions with the longest paths definitely shorter than the ones given by SPH.

The remainder of this paper is organized as follows. In the next section we formally define a network flow decomposition problem. Then, in Section 3 we analyze its properties. Sections 4 and 5 describe two classes of approximation algorithms which we propose to tackle the problem. Section 6 is devoted to a special type of flows called chain network flows. Some computational results are given in Section 7. Finally, the last section concludes the paper.

Let us consider a network flow represented as a directed graph (V, E) formed by a set of vertices V and a set of arcs E⊂V × V in which source s ∈ V and sink t ∈ V vertices are distinguished. We denote the number of vertices by n and the number of arcs by m. Following the arc flow approach, each arc e ∈ E has assigned a flow value ce
                      in such a way that 
                        
                           
                              c
                           
                           =
                           
                              
                                 (
                                 
                                    c
                                    e
                                 
                                 )
                              
                              
                                 e
                                 ∈
                                 E
                              
                           
                        
                      defines a valid s–t flow. We assume that the graph (V, E) is acyclic and the flow values (ce
                     )
                        e ∈ E
                      are positive integers. We denote the total value of s–t flow by F. Fig. 1
                      presents an example of a network flow. The numbers next to arcs are the flow values. The total flow value for this network flow is 2.

Let P be the set of all paths between s and t. For an arc e ∈ E and a path p ∈ P we define the coefficient δep
                      equal to 1 if path p uses arc e and 0 otherwise. A flow decomposition D of the network flow is a set of paths PD
                     ⊆P with a flow value fp
                      assigned to each path p ∈ PD
                      in such a way that

                        
                           (1)
                           
                              
                                 
                                    ∑
                                    
                                       p
                                       ∈
                                       
                                          P
                                          D
                                       
                                    
                                 
                                 
                                    f
                                    p
                                 
                                 =
                                 F
                                 
                                 and
                                 
                                 
                                    ∑
                                    
                                       p
                                       ∈
                                       
                                          P
                                          D
                                       
                                    
                                 
                                 
                                    δ
                                    
                                       e
                                       p
                                    
                                 
                                 
                                    f
                                    p
                                 
                                 =
                                 
                                    c
                                    e
                                 
                                 
                                 ∀
                                 
                                    e
                                    ∈
                                    E
                                 
                                 .
                              
                           
                        
                     
                  

We will consider only integral flow decompositions in which all paths have assigned flow values being positive integers.

For each path p ∈ P we define its length lp
                      as the number of arcs constituting this path, i.e. 
                        
                           
                              l
                              p
                           
                           =
                           
                              ∑
                              
                                 e
                                 ∈
                                 E
                              
                           
                           
                              δ
                              
                                 e
                                 p
                              
                           
                        
                     . We also introduce the notion of a flow decomposition length as the length of the longest path in this decomposition. For a flow decomposition D we denote its length by 
                        
                           
                              L
                              D
                           
                           =
                           
                              max
                              
                                 p
                                 ∈
                                 
                                    P
                                    D
                                 
                              
                           
                           
                              l
                              p
                           
                        
                     .

For the network flow in Fig. 1 there exist two different flow decompositions. First one consists of two paths 
                        
                           s
                           −
                           b
                           −
                           t
                        
                      and 
                        
                           s
                           −
                           a
                           −
                           b
                           −
                           c
                           −
                           t
                        
                      with unitary flow values. The lengths of those paths are 2 and 4, respectively. Thus the length of the first flow decomposition is 4. In the second flow decomposition there are also two paths with unitary flow values: 
                        
                           s
                           −
                           a
                           −
                           b
                           −
                           t
                        
                      and 
                        
                           s
                           −
                           b
                           −
                           c
                           −
                           t
                        
                     . However, the length of both these paths and thus the flow decomposition length is 3. So the second decomposition is shorter than the first one.

The problem that we are interested in this paper is to determine for a given network flow an integral flow decomposition with the minimum length. We call this problem Shortest Integral Flow Decomposition Problem (SIFDP).

Before we analyze the computational complexity of SIFDP we give lower and upper bounds on the flow decomposition length.

                        Theorem 1
                        
                           For any flow decomposition D
                           
                              
                                 (2)
                                 
                                    
                                       
                                          ⌈
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      e
                                                      ∈
                                                      E
                                                   
                                                
                                                
                                                   c
                                                   e
                                                
                                             
                                             F
                                          
                                          ⌉
                                       
                                       ≤
                                       
                                          L
                                          D
                                       
                                       ≤
                                       
                                          ∑
                                          
                                             e
                                             ∈
                                             E
                                          
                                       
                                       
                                          c
                                          e
                                       
                                       .
                                    
                                 
                              
                           
                        

The first inequality holds because LD
                            is an integer and

                              
                                 
                                    
                                       
                                          ∑
                                          
                                             e
                                             ∈
                                             E
                                          
                                       
                                       
                                          c
                                          e
                                       
                                       =
                                       
                                          ∑
                                          
                                             p
                                             ∈
                                             
                                                P
                                                D
                                             
                                          
                                       
                                       
                                          l
                                          p
                                       
                                       
                                          f
                                          p
                                       
                                       ≤
                                       
                                          ∑
                                          
                                             p
                                             ∈
                                             
                                                P
                                                D
                                             
                                          
                                       
                                       
                                          L
                                          D
                                       
                                       
                                          f
                                          p
                                       
                                       =
                                       
                                          L
                                          D
                                       
                                       
                                          ∑
                                          
                                             p
                                             ∈
                                             
                                                P
                                                D
                                             
                                          
                                       
                                       
                                          f
                                          p
                                       
                                       =
                                       
                                          L
                                          D
                                       
                                       F
                                       .
                                    
                                 
                              
                           The second inequality follows from the fact that the length of any s–t path in an acyclic graph is not greater than m. Thus LD
                            ≤ m ≤ ∑
                              e ∈ E
                           
                           ce
                           .□

We now show that SIFDP is NP-hard in the strong sense.

                        Theorem 2
                        
                           Problem SIFDP is NP-hard in the strong sense.
                        

We will show that the 3-PARTITION problem which is NP-complete in the strong sense (Garey & Johnson, 1979) can be pseudo-polynomially reduced to the decision version of SIFDP.

In an arbitrary instance of the 3-PARTITION problem we are given a positive integer B and a set of 3k positive integers 
                              
                                 A
                                 =
                                 {
                                 
                                    a
                                    1
                                 
                                 ,
                                 
                                    a
                                    2
                                 
                                 ,
                                 …
                                 ,
                                 
                                    a
                                    
                                       3
                                       k
                                    
                                 
                                 }
                              
                            such that 
                              
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       3
                                       k
                                    
                                 
                                 
                                    a
                                    i
                                 
                                 =
                                 k
                                 B
                              
                            and B/4 < ai
                            < B/2 for each 
                              
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 3
                                 k
                              
                           . The question is whether there exists a partition of A into k disjoint subsets 
                              
                                 
                                    A
                                    1
                                 
                                 ,
                                 
                                    A
                                    2
                                 
                                 ,
                                 …
                                 ,
                                 
                                    A
                                    k
                                 
                              
                            such that the sum of the elements in each subset is B.

The network flow N
                           3P
                            corresponding to the instance of the 3-PARTITION problem is shown in Fig. 2
                           . The graph representing N
                           3P
                            consists of a sequence of 3k segments. The ith segment corresponds to the element ai
                           . Each segment has two parallel paths: the lower path with one arc and the upper path with 
                              
                                 
                                    a
                                    i
                                 
                                 +
                                 1
                              
                            arcs. The flow values at the lower path and the upper path are 
                              
                                 k
                                 −
                                 1
                              
                            and 1, respectively. The total flow value for N
                           3P
                            is k. From the inequalities (2) it follows that the length of any flow decomposition for this network flow must be at least 
                              
                                 B
                                 +
                                 3
                                 k
                              
                           .

Let us suppose that the 3-PARTITION problem has a solution. Then we can obtain the optimal flow decomposition of N
                           3P
                            that contains k paths each one having length 
                              
                                 B
                                 +
                                 3
                                 k
                              
                            and unitary flow value. The jth path of this decomposition consists of the upper arcs of the segments that corresponds to the elements from the subset Aj
                            and the lower arcs of the remaining segments.

Conversely, suppose now that there exists a flow decomposition of N
                           3P
                            which length is 
                              
                                 B
                                 +
                                 3
                                 k
                              
                           . Then all paths of this decomposition must have the same length. Moreover, since B/4 < ai
                            < B/2 for 
                              
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 3
                                 k
                              
                            each path must contain the upper arcs from exactly 3 segments of the network flow N
                           3P
                           . Because the graph representing N
                           3P
                            has 3k segments there must be k such paths each one having unitary flow value. Moreover, the upper arcs of any segment have to be contained in exactly one decomposition path. The decomposition paths indicate then the feasible solution to 3-PARTITION with the subsets Aj
                            including the elements ai
                            that correspond to the segments which upper arcs belong to the jth path.□

As SIFDP is NP-hard in the strong sense we are interested in developing approximate algorithms that will provide solutions as close to the optimal one as possible. We propose two classes of approximation algorithms: the path elimination algorithms and the flow propagation algorithms. By A(N) we denote the length of the decomposition determined by an algorithm A for a flow N. Likewise, we denote by OPT(N) the length of the shortest decomposition (the optimal solution of SIFDP) for a flow N. For a given set of network flows 
                        N
                      we define the worst-case performance ratio 
                        
                           
                              R
                              A
                           
                           
                              (
                              N
                              )
                           
                        
                      of an algorithm A as the smallest rational number such that

                        
                           
                              
                                 
                                    
                                       A
                                       (
                                       N
                                       )
                                    
                                    
                                       O
                                       P
                                       T
                                       (
                                       N
                                       )
                                    
                                 
                                 ≤
                                 
                                    R
                                    A
                                 
                                 
                                    (
                                    N
                                    )
                                 
                                 
                                 ∀
                                 
                                    
                                    N
                                    ∈
                                    N
                                 
                                 .
                              
                           
                        
                     
                  

The idea of path elimination algorithms comes from the saturating solution concept. In these algorithms in each iteration one path is determined and the maximum possible flow resulting from the saturation of at least one arc is assigned to it. The generic path elimination algorithm (PEA) is outlined in Algorithm 1
                     . Function FindPath determines a path p from s to t in a way that depends on the particular PEA. Next the path flow fp
                      is set as the minimum arc flow for the arcs constituting the path p. The arc flows are then appropriately reduced and the saturated arcs are removed. The iterative process continues until there are no more arcs.

Algorithm SPH can be classified as PEA in which FindPath returns the shortest s–t path.

Here we propose another PEA called Longest Path Elimination (LPE) that in the most cases gives much shorter decompositions than SPH. LPE tries to find such a path that after its elimination the number of long s–t paths in next iterations is reduced. For LPE function FindPath can be described as follows:

                        
                           1.
                           Determine a path p that is the longest path from s to t.

For each arc e belonging to the path p find a path qe
                               that is the shortest path from s to t containing e.

Return the longest path among the paths qe
                              .

Although LPE requires more calculations than SPH both algorithms have the same computational complexity O(m
                     2). The justification for this statement is as follows. For any PEA, in each iteration of the main while loop in Algorithm 1 at least one arc belonging to the currently determined path is removed from the set of arcs. Thus the number of all main iterations is at most m. In each iteration there are the following operations: the path selection, the path flow determination and the arc flows reduction. The last two operations obviously run in O(m) time. The path selection in the case of SPH can be done by means of the breadth-first search algorithm which complexity is O(m) if we take into account that 
                        
                           n
                           ≤
                           m
                           +
                           1
                        
                      (Cormen, Leiserson, Rivest, & Stein, 2009). For LPE the path selection is done in three steps. The first step is to determine the longest path that for a directed acyclic graph can be found in O(m) by processing vertices in topological order (Cormen et al., 2009). The second step is to find the shortest path for each arc belonging to the longest path found in the previous step. It requires also O(m) operations if at the beginning of algorithm LPE we determine the shortest s–v and v–t paths for each vertex v. At last, in the third step finding the longest of these paths can be done in O(m) time.

Below we give a theoretical performance estimation for SPH and LPE.

                        Theorem 3
                        
                           Let
                           
                              
                                 N
                                 F
                              
                            
                           be the set of all network flows with a total flow value F. Then the worst-case performance ratio of algorithms SPH and LPE for the set
                           
                              
                                 N
                                 F
                              
                            
                           is F, i.e.
                           
                              
                                 (3)
                                 
                                    
                                       
                                          R
                                          
                                             S
                                             P
                                             H
                                          
                                       
                                       
                                          (
                                          
                                             N
                                             F
                                          
                                          )
                                       
                                       =
                                       F
                                       
                                       
                                       
                                       and
                                       
                                       
                                       
                                       
                                          R
                                          
                                             L
                                             P
                                             E
                                          
                                       
                                       
                                          (
                                          
                                             N
                                             F
                                          
                                          )
                                       
                                       =
                                       F
                                       .
                                    
                                 
                              
                           
                        

By Theorem 1 we know that for any flow decomposition D of a network flow 
                              
                                 N
                                 ∈
                                 
                                    N
                                    F
                                 
                              
                           
                           
                              
                                 
                                    
                                       
                                          
                                             L
                                             D
                                          
                                          
                                             O
                                             P
                                             T
                                             (
                                             N
                                             )
                                          
                                       
                                       ≤
                                       
                                          
                                             
                                                ∑
                                                
                                                   e
                                                   ∈
                                                   E
                                                
                                             
                                             
                                                c
                                                e
                                             
                                          
                                          
                                             O
                                             P
                                             T
                                             (
                                             N
                                             )
                                          
                                       
                                       ≤
                                       F
                                       .
                                    
                                 
                              
                           In particular, the above inequality must be valid for the decompositions obtained by SPH and LPE. So 
                              
                                 
                                    R
                                    
                                       S
                                       P
                                       H
                                    
                                 
                                 
                                    (
                                    
                                       N
                                       F
                                    
                                    )
                                 
                                 ≤
                                 F
                              
                            and 
                              
                                 
                                    R
                                    
                                       L
                                       P
                                       E
                                    
                                 
                                 
                                    (
                                    
                                       N
                                       F
                                    
                                    )
                                 
                                 ≤
                                 F
                              
                           .

These bounds are obviously tight if 
                              
                                 F
                                 =
                                 1
                                 ,
                              
                            since in such a case there exists only one s–t path that can handle the total flow. To prove that the bounds are also tight for F ≥ 2, let us consider the network flow Gk
                            shown in Fig. 3
                           . The graph representing Gk
                            consists of a sequence of kF segments. In each segment there are two parallel paths: the lower path with one arc and the upper path with k arcs. The flow values at the lower path and the upper path are 
                              
                                 F
                                 −
                                 1
                              
                            and 1, respectively.

In the optimal flow decomposition we have F paths each one taking the upper arcs from k segments and the lower arcs from the remaining segments. All these paths have the length 
                              
                                 
                                    k
                                    2
                                 
                                 +
                                 k
                                 F
                                 −
                                 k
                                 ,
                              
                            so 
                              
                                 O
                                 P
                                 T
                                 
                                    (
                                    
                                       G
                                       k
                                    
                                    )
                                 
                                 =
                                 
                                    k
                                    2
                                 
                                 +
                                 k
                                 F
                                 −
                                 k
                              
                           .

SPH first chooses the shortest s–t path in Gk
                            consisting of the lower arcs of all segments. When the arcs belonging to this path are removed the remaining path has k
                           2
                           F arcs, so

                              
                                 
                                    
                                       
                                          
                                             S
                                             P
                                             E
                                             (
                                             
                                                G
                                                k
                                             
                                             )
                                          
                                          
                                             O
                                             P
                                             T
                                             (
                                             
                                                G
                                                k
                                             
                                             )
                                          
                                       
                                       =
                                       
                                          
                                             
                                                k
                                                2
                                             
                                             F
                                          
                                          
                                             
                                                k
                                                2
                                             
                                             +
                                             k
                                             F
                                             −
                                             k
                                          
                                       
                                    
                                 
                              
                           and this ratio can be arbitrary close to F for sufficiently large k.

LPE chooses in the first 
                              
                                 F
                                 −
                                 1
                              
                            iterations paths consisting of the upper arcs of one segment and the lower arcs of the remaining segments. All these paths have unitary flow values. The path determined in the last iteration is the longest one. Its length is 
                              
                                 (
                                 k
                                 F
                                 −
                                 (
                                 F
                                 −
                                 1
                                 )
                                 )
                                 k
                                 +
                                 F
                                 −
                                 1
                              
                           . Thus

                              
                                 
                                    
                                       
                                          
                                             L
                                             P
                                             E
                                             (
                                             
                                                G
                                                k
                                             
                                             )
                                          
                                          
                                             O
                                             P
                                             T
                                             (
                                             
                                                G
                                                k
                                             
                                             )
                                          
                                       
                                       =
                                       
                                          
                                             
                                                k
                                                2
                                             
                                             F
                                             −
                                             k
                                             
                                                (
                                                F
                                                −
                                                1
                                                )
                                             
                                             +
                                             F
                                             −
                                             1
                                          
                                          
                                             
                                                k
                                                2
                                             
                                             +
                                             k
                                             F
                                             −
                                             k
                                          
                                       
                                    
                                 
                              
                           and this value can also be arbitrary close to F for sufficiently large k.□

The main idea of flow propagation algorithms is to push forward a flow from one vertex to its immediate successors. Algorithm 2
                      presents the generic flow propagation algorithm (FPA). A variable gv
                      defines the flow that is currently held in a vertex v. Moreover, Out(v) and In(v) denote the set of all outgoing and incoming arcs of a vertex v, respectively.

In the main while loop the total flow is propagated iteratively from the source to the sink. In the first iteration F units of flow are pushed from the source s to its neighbours. In the consecutive iterations the non-zero flow values from appropriate vertices are forwarded until the total flow F reaches the sink (i.e. 
                        
                           
                              g
                              t
                           
                           =
                           F
                        
                     ). The number of performed iterations equals the length of the resulting decomposition.

Function PropagateFlow determines how gv
                      units of flows are propagated from a vertex v. It returns the flow values on the outgoing arcs of v. This function depends on the particular FPA.

In this paper we propose a variant of FPA called Balanced Flow Propagation (BFP). Algorithm BFP tries to balance the lengths of decomposition paths by propagating the flow units that earlier have come to the vertex v through the longer v–t paths. For this purpose, BFP uses information about the length Lw
                      of the longest path from a vertex w to the sink t. More formally, in the case of BFP function PropagateFlow performs the following steps for a given vertex v and flow value gv
                     :

                        
                           1.
                           Initialize Ev
                               ← {e ∈ Out(v): ce
                               > 0} and (xe
                              )
                                 e ∈ Out(v) ← 0.

Find an arc 
                                 
                                    e
                                    =
                                    
                                       (
                                       v
                                       ,
                                       w
                                       )
                                    
                                    ∈
                                    
                                       E
                                       v
                                    
                                 
                               for which the value Lw
                               is the largest one.

Set the arc flow xe
                               ← min {ce, gv
                              }.

Reduce the flow value to propagate 
                                 
                                    
                                       g
                                       v
                                    
                                    ←
                                    
                                       g
                                       v
                                    
                                    −
                                    
                                       x
                                       e
                                    
                                 
                              .

If gv
                               > 0 remove the arc e from the set Ev
                               and go to the step 2, otherwise return (xe
                              )
                                 e ∈ Out(v).

The set of decomposition paths is determined by function DeterminePaths based on the arc flows 
                        
                           
                              (
                              
                                 x
                                 
                                    e
                                 
                                 j
                              
                              )
                           
                           
                              e
                              ∈
                              E
                              ,
                              j
                              ∈
                              {
                              1
                              ,
                              …
                              ,
                              i
                              }
                           
                        
                     . Denoting the jth arc of a path p by p(j) we can describe DeterminePaths by the following steps:

                        
                           1.
                           Initialize PD
                               ← ∅.

Find a s-t path p with arc flows 
                                 
                                    
                                       x
                                       
                                          p
                                          (
                                          k
                                          )
                                       
                                       k
                                    
                                    >
                                    0
                                 
                               for 
                                 
                                    k
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    
                                       l
                                       p
                                    
                                 
                              .

Add the path p to the set PD
                              .

Set the path flow 
                                 
                                    
                                       f
                                       p
                                    
                                    =
                                    
                                       min
                                       
                                          j
                                          ∈
                                          {
                                          1
                                          ,
                                          …
                                          ,
                                          
                                             l
                                             p
                                          
                                          }
                                       
                                    
                                    
                                       x
                                       
                                          p
                                          (
                                          j
                                          )
                                       
                                       j
                                    
                                 
                              .

For each 
                                 
                                    j
                                    ∈
                                    {
                                    1
                                    ,
                                    …
                                    ,
                                    
                                       l
                                       p
                                    
                                    }
                                 
                               reduce the arc flow 
                                 
                                    
                                       x
                                       
                                          p
                                          (
                                          j
                                          )
                                       
                                       j
                                    
                                    ←
                                    
                                       x
                                       
                                          p
                                          (
                                          j
                                          )
                                       
                                       j
                                    
                                    −
                                    
                                       f
                                       p
                                    
                                 
                              .

If 
                                 
                                    
                                       ∑
                                       
                                          e
                                          ∈
                                          O
                                          u
                                          t
                                          (
                                          s
                                          )
                                       
                                    
                                    
                                       x
                                       
                                          e
                                       
                                       1
                                    
                                    >
                                    0
                                 
                               go to the step 2, otherwise return the set PD
                              .

The following theorem shows that algorithm BFP has lower computational complexity than SPH and LPE.

                        Theorem 4
                        
                           The computational complexity of BFP is O(nm).
                        

If we apply an adjacency list representation of a network flow (Cormen et al., 2009) in which lists of adjacent vertices are ordered according to nonincreasing values of Lw
                            then the running time of both for loops in Algorithm 2 will be O(m). The values Lw
                            for all vertices can be computed only once and since the graph representing a flow is acyclic it takes O(m) time (Cormen et al., 2009). The ordered adjacency lists can be created in O(m) time if we apply pigeonhole sort algorithm. The while loop in Algorithm 2 is executed no more than n times since the length of any s–t path in a directed acyclic graph is not greater than n.

The computational complexity of DeterminePaths is also O(nm) because as we show below each step requires no more than n operations and is performed at most 
                              
                                 m
                                 −
                                 n
                                 +
                                 2
                              
                            times. The second step of DeterminePaths can be implemented using adjacency lists Tj
                           (v) that for each 
                              
                                 j
                                 ∈
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 i
                                 }
                              
                            and vertex v ∈ V contain all vertices w such that 
                              
                                 e
                                 =
                                 (
                                 v
                                 ,
                                 w
                                 )
                                 ∈
                                 E
                              
                            and 
                              
                                 
                                    x
                                    
                                       e
                                    
                                    j
                                 
                                 >
                                 0
                              
                           . Then, a s–t path p can be constructed from the arcs 
                              
                                 (
                                 
                                    v
                                    k
                                 
                                 ,
                                 
                                    v
                                    
                                       k
                                       +
                                       1
                                    
                                 
                                 )
                              
                            by iterating vertices from the source to the sink where 
                              
                                 v
                                 
                                    k
                                    +
                                    1
                                 
                              
                            is the first vertex of Tk
                           (vk
                           ) for each iteration 
                              
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    l
                                    p
                                 
                              
                           . Because lp
                            ≤ n step 2 and both steps 4 and 5 that also depend on lp
                            run in O(n) time. All steps of function DeterminePaths except the first one are repeated for each decomposition path.

We now show that the number of paths in the set PD
                            returned by DeterminePaths is not greater than 
                              
                                 m
                                 −
                                 n
                                 +
                                 2
                              
                           . By a decomposition subpath we define the path that is a part of some decomposition path from PD
                           . For an arc e ∈ E we denote by h(e) the number of different decomposition subpaths which start at vertex s and end with arc e. In particular we have 
                              
                                 h
                                 (
                                 e
                                 )
                                 =
                                 1
                              
                            for e ∈ Out(s) and 
                              
                                 
                                    ∑
                                    
                                       e
                                       ∈
                                       I
                                       n
                                       (
                                       t
                                       )
                                    
                                 
                                 h
                                 
                                    (
                                    e
                                    )
                                 
                                 =
                                 
                                    |
                                    
                                       P
                                       D
                                    
                                    |
                                 
                              
                           .

Let us consider an arbitrary vertex v ∈ V∖{s, t}. The flow propagated through the vertex v and thus the s–v decomposition subpaths can be split if ce
                            < gv
                            in the third step of PropagateFlow. Taking into account all iterations of BFP the condition ce
                            < gv
                            can be met at most 
                              
                                 
                                    d
                                    +
                                 
                                 
                                    (
                                    v
                                    )
                                 
                                 −
                                 1
                              
                            times, where 
                              
                                 
                                    d
                                    +
                                 
                                 
                                    (
                                    v
                                    )
                                 
                              
                            denotes the outdegree of the vertex v. Thus

                              
                                 
                                    
                                       
                                          ∑
                                          
                                             e
                                             ∈
                                             O
                                             u
                                             t
                                             (
                                             v
                                             )
                                          
                                       
                                       h
                                       
                                          (
                                          e
                                          )
                                       
                                       −
                                       
                                          ∑
                                          
                                             e
                                             ∈
                                             I
                                             n
                                             (
                                             v
                                             )
                                          
                                       
                                       h
                                       
                                          (
                                          e
                                          )
                                       
                                       ≤
                                       
                                          d
                                          +
                                       
                                       
                                          (
                                          v
                                          )
                                       
                                       −
                                       1
                                       
                                       ∀
                                       
                                          
                                          v
                                          ∈
                                          V
                                          ∖
                                          {
                                          s
                                          ,
                                          t
                                          }
                                       
                                       .
                                    
                                 
                              
                           
                        

From the above inequalities and because 
                              
                                 
                                    ∑
                                    
                                       e
                                       ∈
                                       O
                                       u
                                       t
                                       (
                                       s
                                       )
                                    
                                 
                                 h
                                 
                                    (
                                    e
                                    )
                                 
                                 =
                                 
                                    d
                                    +
                                 
                                 
                                    (
                                    s
                                    )
                                 
                              
                            we obtain

                              
                                 
                                    
                                       
                                          
                                             
                                                |
                                                
                                                   P
                                                   D
                                                
                                                |
                                             
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      e
                                                      ∈
                                                      I
                                                      n
                                                      (
                                                      t
                                                      )
                                                   
                                                
                                                h
                                                
                                                   (
                                                   e
                                                   )
                                                
                                                =
                                                
                                                   ∑
                                                   
                                                      e
                                                      ∈
                                                      O
                                                      u
                                                      t
                                                      (
                                                      s
                                                      )
                                                   
                                                
                                                h
                                                
                                                   (
                                                   e
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                +
                                                
                                                
                                                   ∑
                                                   
                                                      v
                                                      ∈
                                                      V
                                                      ∖
                                                      {
                                                      s
                                                      ,
                                                      t
                                                      }
                                                   
                                                
                                                
                                                   (
                                                   
                                                      ∑
                                                      
                                                         e
                                                         ∈
                                                         O
                                                         u
                                                         t
                                                         (
                                                         v
                                                         )
                                                      
                                                   
                                                   h
                                                   
                                                      (
                                                      e
                                                      )
                                                   
                                                   −
                                                   
                                                      ∑
                                                      
                                                         e
                                                         ∈
                                                         I
                                                         n
                                                         (
                                                         v
                                                         )
                                                      
                                                   
                                                   h
                                                   
                                                      (
                                                      e
                                                      )
                                                   
                                                   )
                                                
                                                ≤
                                             
                                          
                                       
                                       
                                          
                                          
                                             ≤
                                          
                                          
                                             
                                                
                                                   d
                                                   +
                                                
                                                
                                                   (
                                                   s
                                                   )
                                                
                                                +
                                                
                                                   ∑
                                                   
                                                      v
                                                      ∈
                                                      V
                                                      ∖
                                                      {
                                                      s
                                                      ,
                                                      t
                                                      }
                                                   
                                                
                                                
                                                   (
                                                   
                                                      d
                                                      +
                                                   
                                                   
                                                      (
                                                      v
                                                      )
                                                   
                                                   −
                                                   1
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      v
                                                      ∈
                                                      V
                                                      ∖
                                                      {
                                                      t
                                                      }
                                                   
                                                
                                                
                                                   d
                                                   +
                                                
                                                
                                                   (
                                                   v
                                                   )
                                                
                                                −
                                                
                                                   (
                                                   n
                                                   −
                                                   2
                                                   )
                                                
                                                =
                                                m
                                                −
                                                n
                                                +
                                                2
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                           □

Below we give a theoretical performance estimation of BFP.

                        Theorem 5
                        
                           Let
                           
                              
                                 N
                                 F
                              
                            
                           be the set of all network flows with a total flow value F. Then the worst-case performance ratio of algorithm BFP for
                           
                              
                                 N
                                 F
                              
                            
                           is
                           
                              
                                 
                                    F
                                    +
                                    1
                                 
                                 
                                    2
                                    ,
                                 
                              
                            
                           i.e.
                           
                              
                                 (4)
                                 
                                    
                                       
                                          R
                                          
                                             B
                                             F
                                             P
                                          
                                       
                                       
                                          (
                                          
                                             N
                                             F
                                          
                                          )
                                       
                                       =
                                       
                                          
                                             F
                                             +
                                             1
                                          
                                          2
                                       
                                       .
                                    
                                 
                              
                           
                        

Let us denote by 
                              
                                 l
                                 p
                                 
                                    (
                                    u
                                    ,
                                    v
                                    )
                                 
                              
                            the number of arcs between vertices u and v on a path p. We assume that 
                              
                                 
                                    l
                                    p
                                    
                                       (
                                       u
                                       ,
                                       v
                                       )
                                    
                                 
                                 =
                                 0
                              
                            if 
                              
                                 v
                                 =
                                 u
                              
                           . For a given network flow 
                              
                                 N
                                 ∈
                                 
                                    N
                                    F
                                 
                              
                            let PBFP
                            be the set of paths determined by BFP and 
                              
                                 p
                                 ¯
                              
                            be the longest path from PBFP
                           . If PBFP
                            contains only one path then 
                              
                                 B
                                 F
                                 P
                                 (
                                 N
                                 )
                                 =
                                 O
                                 P
                                 T
                                 (
                                 N
                                 )
                              
                            and obviously 
                              
                                 B
                                 F
                                 P
                                 (
                                 N
                                 )
                                 /
                                 O
                                 P
                                 T
                                 (
                                 N
                                 )
                                 ≤
                                 (
                                 F
                                 +
                                 1
                                 )
                                 /
                                 2
                              
                           . Now, supposing |PBFP
                           | > 1 let u be the last vertex of the path 
                              
                                 p
                                 ¯
                              
                            for which there exists a path 
                              
                                 q
                                 ∈
                                 
                                    P
                                    
                                       B
                                       F
                                       P
                                    
                                 
                                 ∖
                                 
                                    {
                                    
                                       p
                                       ¯
                                    
                                    }
                                 
                              
                            such that

                              
                                 
                                    
                                       
                                          l
                                          q
                                          
                                             (
                                             s
                                             ,
                                             u
                                             )
                                          
                                       
                                       ≥
                                       
                                          l
                                          
                                             
                                                p
                                                ¯
                                             
                                          
                                          
                                             (
                                             s
                                             ,
                                             u
                                             )
                                          
                                       
                                       .
                                    
                                 
                              
                           
                        

Assuming that u ≠ t let v be the first vertex succeeding u on the path 
                              
                                 p
                                 ¯
                              
                            with indegree or outdegree greater than 1. The arcs joining u and v on the path 
                              
                                 p
                                 ¯
                              
                            must belong to at least one path of any flow decomposition. In particular these arcs belong to some path of the optimal decomposition, so

                              
                                 
                                    
                                       
                                          l
                                          
                                             
                                                p
                                                ¯
                                             
                                          
                                          
                                             (
                                             u
                                             ,
                                             v
                                             )
                                          
                                       
                                       ≤
                                       O
                                       P
                                       T
                                       
                                          (
                                          N
                                          )
                                       
                                       .
                                    
                                 
                              
                           
                        

Now if v ≠ t let us consider the v–t path r such that each of its arc (x, y) is the first arc that has been chosen for a vertex x in step 2 of PropagateFlow. Note that each arc (x, y) of r belongs to the longest x–t path in the graph representing the network flow N. Thus the path r must be the longest v–t path in this graph and 
                              
                                 
                                    l
                                    
                                       
                                          p
                                          ¯
                                       
                                    
                                    
                                       (
                                       v
                                       ,
                                       t
                                       )
                                    
                                 
                                 ≤
                                 
                                    l
                                    r
                                    
                                       (
                                       v
                                       ,
                                       t
                                       )
                                    
                                 
                              
                           . We show by contradiction that each arc of r must belong to at least one path 
                              
                                 p
                                 ∈
                                 
                                    P
                                    
                                       B
                                       F
                                       P
                                    
                                 
                                 ∖
                                 
                                    p
                                    ¯
                                 
                              
                           . Suppose that (w, w′) is the first arc of r that does not belong to any 
                              
                                 p
                                 ∈
                                 
                                    P
                                    
                                       B
                                       F
                                       P
                                    
                                 
                                 ∖
                                 
                                    p
                                    ¯
                                 
                              
                           . Then (w, w′) and thus the vertex w must belong to 
                              
                                 p
                                 ¯
                              
                           . From the definitions of vertices u and v it follows that 
                              
                                 
                                    l
                                    
                                       p
                                    
                                    
                                       (
                                       s
                                       ,
                                       w
                                       )
                                    
                                 
                                 <
                                 
                                    l
                                    
                                       
                                          p
                                          ¯
                                       
                                    
                                    
                                       (
                                       s
                                       ,
                                       w
                                       )
                                    
                                 
                              
                            for any path 
                              
                                 p
                                 ∈
                                 
                                    P
                                    
                                       B
                                       F
                                       P
                                    
                                 
                                 ∖
                                 
                                    p
                                    ¯
                                 
                              
                            containing w. Thus the flow of 
                              
                                 p
                                 ¯
                              
                            cannot be the first one that comes into the vertex w and there must exist another path which flow is first propagated through the arc (w, w′). This contradicts the assumption that (w, w′) does not belong to any path 
                              
                                 p
                                 ∈
                                 
                                    P
                                    
                                       B
                                       F
                                       P
                                    
                                 
                                 ∖
                                 
                                    p
                                    ¯
                                 
                              
                           .

The arcs of the path r cannot belong to the s–u part of the path q since the graph representing the network flow N is acyclic. Therefore

                              
                                 
                                    
                                       
                                          l
                                          
                                             
                                                p
                                                ¯
                                             
                                          
                                          
                                             (
                                             v
                                             ,
                                             t
                                             )
                                          
                                       
                                       ≤
                                       
                                          l
                                          r
                                          
                                             (
                                             v
                                             ,
                                             t
                                             )
                                          
                                       
                                       ≤
                                       
                                          (
                                          
                                             ∑
                                             
                                                p
                                                ∈
                                                
                                                   P
                                                   
                                                      B
                                                      F
                                                      P
                                                   
                                                
                                                ∖
                                                
                                                   {
                                                   
                                                      p
                                                      ¯
                                                   
                                                   }
                                                
                                             
                                          
                                          
                                             l
                                             p
                                             
                                                (
                                                s
                                                ,
                                                t
                                                )
                                             
                                          
                                          )
                                       
                                       −
                                       
                                          l
                                          q
                                          
                                             (
                                             s
                                             ,
                                             u
                                             )
                                          
                                       
                                       .
                                    
                                 
                              
                           
                        

From the above considerations it results that

                              
                                 
                                    
                                       
                                          
                                             
                                                B
                                                F
                                                P
                                                (
                                                N
                                                )
                                             
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   l
                                                   
                                                      
                                                         p
                                                         ¯
                                                      
                                                   
                                                   
                                                      (
                                                      s
                                                      ,
                                                      u
                                                      )
                                                   
                                                
                                                +
                                                
                                                   l
                                                   
                                                      
                                                         p
                                                         ¯
                                                      
                                                   
                                                   
                                                      (
                                                      u
                                                      ,
                                                      v
                                                      )
                                                   
                                                
                                                +
                                                
                                                   l
                                                   
                                                      
                                                         p
                                                         ¯
                                                      
                                                   
                                                   
                                                      (
                                                      v
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                                ≤
                                                
                                                   l
                                                   q
                                                   
                                                      (
                                                      s
                                                      ,
                                                      u
                                                      )
                                                   
                                                
                                                +
                                                O
                                                P
                                                T
                                                
                                                   (
                                                   N
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                +
                                                
                                                
                                                   ∑
                                                   
                                                      p
                                                      ∈
                                                      
                                                         P
                                                         
                                                            B
                                                            F
                                                            P
                                                         
                                                      
                                                      ∖
                                                      
                                                         {
                                                         
                                                            p
                                                            ¯
                                                         
                                                         }
                                                      
                                                   
                                                
                                                
                                                   l
                                                   p
                                                   
                                                      (
                                                      s
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                                −
                                                
                                                   l
                                                   q
                                                   
                                                      (
                                                      s
                                                      ,
                                                      u
                                                      )
                                                   
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Hence

                              
                                 
                                    
                                       B
                                       F
                                       P
                                       
                                          (
                                          N
                                          )
                                       
                                       −
                                       
                                          ∑
                                          
                                             p
                                             ∈
                                             
                                                P
                                                
                                                   B
                                                   F
                                                   P
                                                
                                             
                                             ∖
                                             
                                                {
                                                
                                                   p
                                                   ¯
                                                
                                                }
                                             
                                          
                                       
                                       
                                          l
                                          p
                                          
                                             (
                                             s
                                             ,
                                             t
                                             )
                                          
                                       
                                       ≤
                                       O
                                       P
                                       T
                                       
                                          (
                                          N
                                          )
                                       
                                       .
                                    
                                 
                              
                           Obviously the above inequality is also valid for 
                              
                                 u
                                 =
                                 t
                              
                            or 
                              
                                 v
                                 =
                                 t
                              
                           .

On the other hand, as a consequence of (2) we have

                              
                                 
                                    
                                       B
                                       F
                                       P
                                       
                                          (
                                          N
                                          )
                                       
                                       +
                                       
                                          ∑
                                          
                                             p
                                             ∈
                                             
                                                P
                                                
                                                   B
                                                   F
                                                   P
                                                
                                             
                                             ∖
                                             
                                                {
                                                
                                                   p
                                                   ¯
                                                
                                                }
                                             
                                          
                                       
                                       
                                          l
                                          p
                                          
                                             (
                                             s
                                             ,
                                             t
                                             )
                                          
                                       
                                       ≤
                                       
                                          ∑
                                          
                                             e
                                             ∈
                                             E
                                          
                                       
                                       
                                          c
                                          e
                                       
                                       ≤
                                       F
                                       ·
                                       O
                                       P
                                       T
                                       
                                          (
                                          N
                                          )
                                       
                                       .
                                    
                                 
                              
                           Summing up both sides of the above two inequalities we get

                              
                                 
                                    
                                       2
                                       
                                       B
                                       F
                                       P
                                       (
                                       N
                                       )
                                       ≤
                                       (
                                       F
                                       +
                                       1
                                       )
                                       
                                       O
                                       P
                                       T
                                       (
                                       N
                                       )
                                       .
                                    
                                 
                              
                           This implies 
                              
                                 
                                    R
                                    
                                       B
                                       F
                                       P
                                    
                                 
                                 
                                    (
                                    
                                       N
                                       F
                                    
                                    )
                                 
                                 ≤
                                 
                                    (
                                    F
                                    +
                                    1
                                    )
                                 
                                 /
                                 2
                              
                           .

We now show that the above bound is tight. If 
                              
                                 F
                                 =
                                 1
                              
                            then 
                              
                                 B
                                 F
                                 P
                                 (
                                 N
                                 )
                                 =
                                 O
                                 P
                                 T
                                 (
                                 N
                                 )
                              
                            and 
                              
                                 
                                    R
                                    
                                       B
                                       F
                                       P
                                    
                                 
                                 
                                    (
                                    
                                       N
                                       F
                                    
                                    )
                                 
                                 =
                                 1
                              
                           . To show that the bound is tight for 
                              
                                 F
                                 =
                                 2
                              
                            let us consider the network flow Hk
                            depicted in Fig. 4
                           . For this flow the optimal decomposition consists of two paths with length 
                              
                                 2
                                 k
                                 +
                                 3
                              
                           . On the other hand 
                              
                                 B
                                 F
                                 P
                                 (
                                 
                                    H
                                    k
                                 
                                 )
                                 =
                                 3
                                 k
                                 +
                                 3
                                 ,
                              
                            so

                              
                                 
                                    
                                       
                                          lim
                                          
                                             k
                                             →
                                             ∞
                                          
                                       
                                       
                                          
                                             B
                                             F
                                             P
                                             (
                                             
                                                H
                                                k
                                             
                                             )
                                          
                                          
                                             O
                                             P
                                             T
                                             (
                                             
                                                H
                                                k
                                             
                                             )
                                          
                                       
                                       =
                                       
                                          lim
                                          
                                             k
                                             →
                                             ∞
                                          
                                       
                                       
                                          
                                             3
                                             k
                                             +
                                             3
                                          
                                          
                                             2
                                             k
                                             +
                                             3
                                          
                                       
                                       =
                                       
                                          3
                                          2
                                       
                                       .
                                    
                                 
                              
                           Thus the bound is tight for 
                              
                                 F
                                 =
                                 2
                              
                           .

For F ≥ 3 let us consider the network flow Ik
                            presented in Fig. 5
                           . The graph representing this flow consists of F segments. In the first segment there are two parallel paths with lengths 2 and 2k, respectively. In the next segments there are three distinct paths with lengths 2, k and 
                              
                                 k
                                 +
                                 1
                                 ,
                              
                            respectively. Algorithm BFP will first try to push all possible units of flow through the arc belonging to the longest path in each segment so the last unit will go through the upper arcs of all segments and it will be the longest path in the resulting decomposition. Thus 
                              
                                 B
                                 F
                                 P
                                 
                                    (
                                    
                                       I
                                       k
                                    
                                    )
                                 
                                 =
                                 k
                                 
                                    (
                                    F
                                    +
                                    1
                                    )
                                 
                              
                           .

The longest path of the optimal decomposition contains 2k arcs of the first segment and two arcs of each one of the 
                              
                                 F
                                 −
                                 1
                              
                            remaining segments, so 
                              
                                 O
                                 P
                                 T
                                 
                                    (
                                    
                                       I
                                       k
                                    
                                    )
                                 
                                 =
                                 2
                                 k
                                 +
                                 2
                                 
                                    (
                                    F
                                    −
                                    1
                                    )
                                 
                              
                           . The other paths have one arc less as they consist of k and 
                              
                                 k
                                 +
                                 1
                              
                            arcs of two different segments and two arcs of each one of the 
                              
                                 F
                                 −
                                 2
                              
                            remaining segments. Hence

                              
                                 
                                    
                                       
                                          lim
                                          
                                             k
                                             →
                                             ∞
                                          
                                       
                                       
                                          
                                             B
                                             F
                                             P
                                             (
                                             
                                                I
                                                k
                                             
                                             )
                                          
                                          
                                             O
                                             P
                                             T
                                             (
                                             
                                                I
                                                k
                                             
                                             )
                                          
                                       
                                       =
                                       
                                          lim
                                          
                                             k
                                             →
                                             ∞
                                          
                                       
                                       
                                          
                                             k
                                             (
                                             F
                                             +
                                             1
                                             )
                                          
                                          
                                             2
                                             k
                                             +
                                             2
                                             (
                                             F
                                             −
                                             1
                                             )
                                          
                                       
                                       =
                                       
                                          
                                             F
                                             +
                                             1
                                          
                                          2
                                       
                                       .
                                    
                                 
                              
                           Then, we have shown that 
                              
                                 
                                    R
                                    
                                       B
                                       F
                                       P
                                    
                                 
                                 
                                    (
                                    
                                       N
                                       F
                                    
                                    )
                                 
                                 ≥
                                 
                                    (
                                    F
                                    +
                                    1
                                    )
                                 
                                 /
                                 2
                              
                           .□

In this section we consider a special case of flows called chain network flows. A chain network flow is a flow represented by a directed acyclic graph in which each vertex either belongs to each path from the source to the sink or its indegree and outdegree is 1. The flows shown in Figs. 1–4 are the examples of chain network flows. On the other hand the flow Ik
                      in Fig. 5 is not a chain network flow.

Although chain network flows have very simple structure it turns out that SIFDP for them remains to be NP-hard in the strong sense. In the proof of Theorem 2 the 3-PARTITION problem was in fact reduced to the decomposition problem of the chain network flow. Moreover, analyzing the proof of Theorem 3 we may come to the conclusion that the worst-case performance ratio of algorithms SPE and LPE for the chain network flows is the same as for the general class of network flows.

This however is not the case if we consider BFP. Below we prove that for chain network flows the length of the flow decomposition obtained by BFP is never two times larger than the length of the optimal decomposition.

                        Theorem 6
                        
                           Let
                           
                              
                                 C
                                 F
                              
                            
                           be the set of all chain network flows with a total flow value F. Then the worst-case performance ratio of BFP for
                           
                              
                                 C
                                 F
                              
                            
                           is
                           
                              
                                 2
                                 −
                                 
                                    1
                                    F
                                 
                                 ,
                              
                            
                           i.e. 
                           
                              
                                 
                                    
                                       
                                          R
                                          
                                             B
                                             F
                                             P
                                          
                                       
                                       
                                          (
                                          
                                             C
                                             F
                                          
                                          )
                                       
                                       =
                                       2
                                       −
                                       
                                          1
                                          F
                                       
                                       .
                                    
                                 
                              
                           
                        

The first part of the proof is similar to the proof of Theorem 5. We denote by 
                              
                                 l
                                 p
                                 
                                    (
                                    u
                                    ,
                                    v
                                    )
                                 
                              
                            the number of arcs between vertices u and v on a path p. We assume that 
                              
                                 
                                    l
                                    p
                                    
                                       (
                                       u
                                       ,
                                       v
                                       )
                                    
                                 
                                 =
                                 0
                              
                            if 
                              
                                 v
                                 =
                                 u
                              
                           . Let PBFP
                            be the set of decomposition paths determined by BFP for a given flow 
                              
                                 N
                                 ∈
                                 
                                    C
                                    F
                                 
                              
                            and 
                              
                                 p
                                 ¯
                              
                            be the longest of these paths. Suppose that |PBFP
                           | > 1. For a given path 
                              
                                 p
                                 ∈
                                 
                                    P
                                    
                                       B
                                       F
                                       P
                                    
                                 
                                 ∖
                                 
                                    {
                                    
                                       p
                                       ¯
                                    
                                    }
                                 
                              
                            let u be the last vertex of 
                              
                                 p
                                 ¯
                              
                            for which 
                              
                                 
                                    l
                                    p
                                    
                                       (
                                       s
                                       ,
                                       u
                                       )
                                    
                                 
                                 ≥
                                 
                                    l
                                    
                                       
                                          p
                                          ¯
                                       
                                    
                                    
                                       (
                                       s
                                       ,
                                       u
                                       )
                                    
                                 
                              
                           . Assuming that u ≠ t let W be the ordered set of vertices succeeding u on path 
                              
                                 p
                                 ¯
                              
                            with indegree or outdegree greater than 1. From the chain network definition it follows that any decomposition path from PBFP
                            must contain all vertices belonging to W.

Let v ∈ W be the first vertex succeeding u. The arcs joining u and v on the path 
                              
                                 p
                                 ¯
                              
                            must belong to some path of the optimal decomposition, so 
                              
                                 
                                    l
                                    
                                       
                                          p
                                          ¯
                                       
                                    
                                    
                                       (
                                       u
                                       ,
                                       v
                                       )
                                    
                                 
                                 ≤
                                 O
                                 P
                                 T
                                 
                                    (
                                    N
                                    )
                                 
                              
                           .

From the definitions of vertex u and set W it follows that 
                              
                                 
                                    l
                                    p
                                    
                                       (
                                       s
                                       ,
                                       w
                                       )
                                    
                                 
                                 <
                                 
                                    l
                                    
                                       
                                          p
                                          ¯
                                       
                                    
                                    
                                       (
                                       s
                                       ,
                                       w
                                       )
                                    
                                 
                              
                            for each vertex w ∈ W. Because BFP propagates the flow coming into each vertex w ∈ W preferring the longest path to t it must be 
                              
                                 
                                    l
                                    p
                                    
                                       (
                                       x
                                       ,
                                       y
                                       )
                                    
                                 
                                 ≥
                                 
                                    l
                                    
                                       
                                          p
                                          ¯
                                       
                                    
                                    
                                       (
                                       x
                                       ,
                                       y
                                       )
                                    
                                 
                              
                            for any two subsequent vertices x and y belonging to W. As a result we have 
                              
                                 
                                    l
                                    p
                                    
                                       (
                                       v
                                       ,
                                       t
                                       )
                                    
                                 
                                 ≥
                                 
                                    l
                                    
                                       
                                          p
                                          ¯
                                       
                                    
                                    
                                       (
                                       v
                                       ,
                                       t
                                       )
                                    
                                 
                              
                           . From the above considerations it follows that for any 
                              
                                 p
                                 ∈
                                 
                                    P
                                    
                                       B
                                       F
                                       P
                                    
                                 
                                 ∖
                                 
                                    {
                                    
                                       p
                                       ¯
                                    
                                    }
                                 
                              
                           
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                B
                                                F
                                                P
                                                (
                                                N
                                                )
                                             
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   l
                                                   
                                                      
                                                         p
                                                         ¯
                                                      
                                                   
                                                   
                                                      (
                                                      s
                                                      ,
                                                      u
                                                      )
                                                   
                                                
                                                +
                                                
                                                   l
                                                   
                                                      
                                                         p
                                                         ¯
                                                      
                                                   
                                                   
                                                      (
                                                      u
                                                      ,
                                                      v
                                                      )
                                                   
                                                
                                                +
                                                
                                                   l
                                                   
                                                      
                                                         p
                                                         ¯
                                                      
                                                   
                                                   
                                                      (
                                                      v
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                                ≤
                                                
                                                   l
                                                   p
                                                   
                                                      (
                                                      s
                                                      ,
                                                      u
                                                      )
                                                   
                                                
                                                +
                                                O
                                                P
                                                T
                                                
                                                   (
                                                   N
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                +
                                                
                                                
                                                   l
                                                   p
                                                   
                                                      (
                                                      v
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                                ≤
                                                
                                                   l
                                                   p
                                                   
                                                      (
                                                      s
                                                      ,
                                                      t
                                                      )
                                                   
                                                
                                                +
                                                O
                                                P
                                                T
                                                
                                                   (
                                                   N
                                                   )
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           The above inequality is also valid for 
                              
                                 u
                                 =
                                 t
                              
                            when 
                              
                                 
                                    l
                                    p
                                    
                                       (
                                       s
                                       ,
                                       t
                                       )
                                    
                                 
                                 =
                                 B
                                 F
                                 P
                                 
                                    (
                                    N
                                    )
                                 
                              
                           .

Now, for each path 
                              
                                 p
                                 ∈
                                 
                                    P
                                    
                                       B
                                       F
                                       P
                                    
                                 
                                 ∖
                                 
                                    {
                                    
                                       p
                                       ¯
                                    
                                    }
                                 
                              
                            let us multiply both sides of this inequality by the flow value fp
                            obtaining

                              
                                 
                                    
                                       
                                          f
                                          p
                                       
                                       B
                                       F
                                       P
                                       
                                          (
                                          N
                                          )
                                       
                                       ≤
                                       
                                          f
                                          p
                                       
                                       
                                          l
                                          p
                                          
                                             (
                                             s
                                             ,
                                             t
                                             )
                                          
                                       
                                       +
                                       
                                          f
                                          p
                                       
                                       O
                                       P
                                       T
                                       
                                          (
                                          N
                                          )
                                       
                                       
                                       ∀
                                       
                                          
                                          p
                                          ∈
                                          
                                             P
                                             
                                                B
                                                F
                                                P
                                             
                                          
                                          ∖
                                          
                                             {
                                             
                                                p
                                                ¯
                                             
                                             }
                                          
                                       
                                       .
                                    
                                 
                              
                           Next, if we sum up both sides of the above inequalities and the following inequality resulting from (2)
                           
                              
                                 
                                    
                                       
                                          f
                                          
                                             p
                                             ¯
                                          
                                       
                                       B
                                       F
                                       P
                                       
                                          (
                                          N
                                          )
                                       
                                       +
                                       
                                          ∑
                                          
                                             p
                                             ∈
                                             
                                                P
                                                
                                                   B
                                                   F
                                                   P
                                                
                                             
                                             ∖
                                             
                                                {
                                                
                                                   p
                                                   ¯
                                                
                                                }
                                             
                                          
                                       
                                       
                                          f
                                          p
                                       
                                       
                                          l
                                          p
                                          
                                             (
                                             s
                                             ,
                                             t
                                             )
                                          
                                       
                                       =
                                       
                                          ∑
                                          
                                             e
                                             ∈
                                             E
                                          
                                       
                                       
                                          c
                                          e
                                       
                                       ≤
                                       F
                                       ·
                                       O
                                       P
                                       T
                                       
                                          (
                                          N
                                          )
                                       
                                    
                                 
                              
                           we get

                              
                                 
                                    
                                       F
                                       ·
                                       B
                                       F
                                       P
                                       
                                          (
                                          N
                                          )
                                       
                                       ≤
                                       
                                          (
                                          2
                                          F
                                          −
                                          
                                             f
                                             
                                                p
                                                ¯
                                             
                                          
                                          )
                                       
                                       O
                                       P
                                       T
                                       
                                          (
                                          N
                                          )
                                       
                                       ≤
                                       
                                          (
                                          2
                                          F
                                          −
                                          1
                                          )
                                       
                                       O
                                       P
                                       T
                                       
                                          (
                                          N
                                          )
                                       
                                       .
                                    
                                 
                              
                           Thus

                              
                                 
                                    
                                       
                                          
                                             B
                                             F
                                             P
                                             (
                                             N
                                             )
                                          
                                          
                                             O
                                             P
                                             T
                                             (
                                             N
                                             )
                                          
                                       
                                       ≤
                                       2
                                       −
                                       
                                          1
                                          F
                                       
                                       .
                                    
                                 
                              
                           Note that this inequality is also valid for PBFP
                            containing only one path when 
                              
                                 B
                                 F
                                 P
                                 (
                                 N
                                 )
                                 =
                                 O
                                 P
                                 T
                                 (
                                 N
                                 )
                              
                           .

We now show that the above bound is tight. If 
                              
                                 F
                                 =
                                 1
                              
                            then 
                              
                                 B
                                 F
                                 P
                                 (
                                 N
                                 )
                                 =
                                 O
                                 P
                                 T
                                 (
                                 N
                                 )
                              
                            and 
                              
                                 
                                    R
                                    
                                       B
                                       F
                                       P
                                    
                                 
                                 
                                    (
                                    
                                       C
                                       F
                                    
                                    )
                                 
                                 =
                                 1
                              
                           . If F > 1 let us consider the network flow Hk
                            shown in Fig. 4. In the graph representing this flow there are F paths between vertices s and a with unitary flow values and having lengths 1, 
                              
                                 k
                                 +
                                 1
                                 ,
                              
                           
                           
                              
                                 2
                                 k
                                 +
                                 1
                                 ,
                                 …
                                 ,
                                 (
                                 F
                                 −
                                 1
                                 )
                                 k
                                 +
                                 1
                                 ,
                              
                            respectively. The analogous sequence of paths join vertices a and b. Vertices b and t are connected only by two paths. The lower b–t path consists of only one arc with the flow value 
                              
                                 F
                                 −
                                 1
                              
                           . The upper b–t path has 
                              
                                 F
                                 k
                                 +
                                 1
                              
                            arcs with the unitary flow value. Note that it is possible to decompose the flow Hk
                            on F paths with equal lengths, so 
                              
                                 O
                                 P
                                 T
                                 (
                                 
                                    H
                                    k
                                 
                                 )
                                 =
                                 F
                                 k
                                 +
                                 3
                              
                           . The paths determined by BFP will have the same number of arcs between vertices s and b. The longest path will additionally contain 
                              
                                 k
                                 F
                                 +
                                 1
                              
                            arcs of the upper b–t path. Hence 
                              
                                 B
                                 F
                                 P
                                 
                                    (
                                    
                                       H
                                       k
                                    
                                    )
                                 
                                 =
                                 
                                    (
                                    2
                                    F
                                    −
                                    1
                                    )
                                 
                                 k
                                 +
                                 3
                              
                            and if k is increased we get

                              
                                 
                                    
                                       
                                          lim
                                          
                                             k
                                             →
                                             ∞
                                          
                                       
                                       
                                          
                                             B
                                             F
                                             P
                                             (
                                             
                                                H
                                                k
                                             
                                             )
                                          
                                          
                                             O
                                             P
                                             T
                                             (
                                             
                                                H
                                                k
                                             
                                             )
                                          
                                       
                                       =
                                       
                                          
                                             (
                                             2
                                             F
                                             −
                                             1
                                             )
                                             k
                                             +
                                             3
                                          
                                          
                                             F
                                             k
                                             +
                                             3
                                          
                                       
                                       =
                                       2
                                       −
                                       
                                          1
                                          F
                                       
                                       .
                                    
                                 
                              
                           
                           □

We examined algorithms SPH, LPE and BFP on several test instances of SIFDP that were generated randomly in the following way. At first a network (directed graph) was created for a given number of vertices and arcs. The arcs of the graph were randomly established subject to the constraints that the graph has to be acyclic and there must be exactly one source and one sink. Then, for the generated network with the distinguished source and sink vertices a flow with predefined value was assigned to the arcs in a two-step procedure. The first step determined the minimal arc flow values ensuring non-zero flow values at all arcs. In the second step the remaining part of the total flow value was randomly distributed according to the uniform distribution between the outgoing arcs of the network vertices processed by breadth first search algorithm starting from the source.

In the experiments there have been considered two classes of networks. The first one called sparse networks contains the networks for which 
                        
                           
                              m
                              n
                           
                           =
                           2
                        
                     . The second class named dense networks includes the networks with 
                        
                           
                              m
                              n
                           
                           =
                           20
                        
                     . For both classes five networks have been generated with 100, 500, 1000, 2500 and 5000 vertices, respectively. For each network five random flows have been assigned all having different flow values ranging from 105 to 109.


                     Tables 1
                      and 2
                      present the decomposition lengths and the computation times obtained by the algorithms for the sparse and dense networks, respectively. Both tables contain also the lower bound on the decomposition length (column LB) calculated for each network flow according to (2), i.e. 
                        
                           L
                           B
                           =
                           ⌈
                           
                              
                                 
                                    ∑
                                    
                                       e
                                       ∈
                                       E
                                    
                                 
                                 
                                    c
                                    e
                                 
                              
                              F
                           
                           ⌉
                        
                     . Computations have been performed on the computer with Intel Core i5-3320M 2.6 gigahertz processor.

From the experimental results shown in Tables 1 and 2 it follows that SPH always obtains the worst solutions. Considering only the sparse networks it is hard to point out the one algorithm with the best performance. For this class of networks depending on the test instance LPE or BFP provides the best solution although the differences are not very significant. However, if we look at the results for the dense networks, we can observe that in that case definitely the shortest decompositions are determined by BFP. Moreover, the lengths of these decompositions are very close to the corresponding lower bounds. For several test instances the lower bound equals the decomposition length. This means that for the dense networks algorithm BFP obtains solutions that are near optimal or even optimal. Regarding the flow value we can state that for both classes of networks it does not seem to affect the performance of the considered algorithms in a significant way.

Considering the computation times shown in both Tables 1 and 2 we can state that for all test instances the fastest algorithm is BFP and the slowest one is LPE. The difference in the computation times is significant especially for the larger networks. In the case of the largest dense network having 5000 vertices BFP is faster than SPH and LPE even by 2 and 3 orders of magnitude, respectively.

Summarizing, SPH has definitely the worst performance. On the other hand LPE is the slowest one. Therefore the best alternative seems to be algorithm BFP. Firstly, it provides as good solutions as LPE for the sparse networks and close to the optimal solutions for the dense networks. Secondly, the computational efficiency of BFP is definitely higher than algorithms SPH and LPE.

@&#CONCLUSIONS@&#

In this paper we consider problem SIFDP that relies on finding an integral flow decomposition with minimum length of the longest path. The problem has been shown to be NP-hard in the strong sense.

Two classes of approximation algorithms were described: the path elimination algorithms and the flow propagation algorithms. To the first class belongs algorithm SPH proposed in the literature in the context of determining a flow decomposition with the minimum number of paths. We have proposed another path elimination algorithm – LPE and one flow propagation algorithm – BFP. We show that the worst-case performance ratio of SPH and LPE is the same, but the worst-case performance of BFP is better. For chain network flows we prove that BFP worst-case performance ratio is less than 2.

The experimental results show that algorithm SPH mentioned in the literature as the one that can be used for solving SIFDP (Hartman et al., 2012) is not effective. From the class of path elimination algorithms LPE gives much better solutions than SPH although it requires more time to compute them. However, a significant improvement can be achieved by applying the flow propagation approach, in particular, algorithm BFP that usually provides the best solutions.

@&#ACKNOWLEDGMENTS@&#

The authors would like to thank two anonymous reviewers for their valuable comments and suggestions that have improved the quality of the paper.

@&#REFERENCES@&#

