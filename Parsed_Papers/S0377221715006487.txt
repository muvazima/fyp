@&#MAIN-TITLE@&#Designing energy-efficient serial production lines: The unpaced synchronous line-balancing problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Designing energy-efficient production systems has become a high-priority issue.


                        
                        
                           
                           Traditional paced assembly lines are not energy-efficient with variable task times.


                        
                        
                           
                           Unpaced synchronous production lines are proposed for these situations.


                        
                        
                           
                           Solution methodologies are developed using extreme-value theory and simulation.


                        
                        
                           
                           Computational results illustrate the superiority of the proposed approach.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Facilities planning and design

Energy-efficient line balancing

Extreme value theory

@&#ABSTRACT@&#


               
               
                  One of the primary elements of a sustainable manufacturing initiative is that of energy efficiency. Line balancing can be used to design efficient manufacturing systems for paced assembly lines when the operation times are known, but may provide inefficient assignments with variable task times. Thus, we propose the use of unpaced synchronous lines as an alternative to paced lines when there is considerable variability in task times. While a great deal of research has been conducted on the line-balancing problem for paced synchronous production lines as well as for unpaced asynchronous lines, relatively little has focused on the unpaced synchronous configuration, despite its practical relevance. This research addresses this type of production line, with stochastic task completion times, by formulating an appropriate model and developing and evaluating a variety of solution methodologies utilizing extreme value theory as well as simulation. Computational results are presented to gain insight into the design and operation of unpaced synchronous systems.
               
            

@&#INTRODUCTION@&#

Research concerning the design and operation of production facilities has historically been from a productivity perspective. Recently, though, a focus on the environmental effects of manufacturing processes has induced firms to undertake sustainable manufacturing initiatives. The International Trade Administration (2014) of the U. S. Department of Commerce defines sustainable manufacturing “as the creation of manufactured products that use processes that minimize negative environmental impacts, conserve energy [emphasis added] and natural resources, are safe for employees, communities, and consumers and are economically sound.”

Since energy conservation is “a crucial issue for sustainable development” (Hu & Kao, 2007), this research is concerned with the energy efficiency of production processes, in particular, the design of serial production lines. This is particularly appropriate as the “control of production operations is often regarded as one of the most cost-effective ways to improve energy efficiency in manufacturing” (Chen & Zhang, 2013). Furthermore, Bunse et al. (2011) stated that “companies that improve their energy efficiency and consequently their carbon footprint can improve their position to face challenges and costs resulting from current and future CO2 regulations.” The International Organization for Standardization (2014) is referencing the ISO 50001 standards on energy management systems are “intended to lead to reductions in greenhouse gas emissions and other related environmental impacts and energy cost through systematic management of energy.”

The design of serial production lines can impact energy efficiency in two ways. First, the size of the facility is a primary determinant of energy use. As noted by Despeisse, Oates, and Ball (2013), “for some manufacturing industries (e.g., manufacture of motor vehicles, electrical machinery, radios, medical equipment), building related energy (i.e., space heating and lighting) contributes to approximately 40–60 percent of the overall energy consumed.” Kawahara et al. (1997) have indicated that a reduction in the size of production systems has a considerable impact on the consumption of environmental energy, “owing to the decrease of spaces for illumination and air-conditioning, and the number of the operators.” Specifically, they noted when the production equipment is reduced by 50 percent, the total energy saving in typical factories could be reduced from 18 percent (household electric appliance manufacturing) to as much as 71 percent (watch manufacturing). Therefore, designing energy-efficient production lines would call for the fewest possible number of operators/workstations necessary to meet demand as well as minimizing the resultant space requirements.

A second manner in which energy use is affected by the design of serial production lines has to do with productive vs. idle time. Chen and Zhang (2013) have indicated that “the simplest way to reduce energy consumption in manufacturing systems is to shorten the running time of machines.” And Smith and Ball (2012) noted that “machining centers consume large amounts of electricity whether they are in operational model (metal cutting) or idle mode (waiting).” Yuan, Zhai, and Dornfeld (2012) modeled energy consumption as a direct function of the operating efficiency and operating time of a facility. So the appropriate assignment/scheduling of work to minimize idle time would also be effective in reducing a firm's energy use.

The traditional method of designing serial production lines has been the balancing of paced synchronous lines. Suwannarongsri, Bunnag, and Klinbun (2014) provided a line-balancing problem for an automobile factory in Thailand and illustrated how the “total energy per product and supporting energy per product can be decreased when cycle time is reduced.” Fysikopoulos, Anagnostakis, Salonitis, and Chryssolouris (2012) conducted an empirical study of the energy consumption of an automotive assembly line and concluded that, with proper line balancing and planning, idle time can be eliminated and bottlenecks can be identified, saving energy and reducing costs. Since the idle time per unit of output is simply equal to the number of workstations multiplied by the cycle time less the sum of the task times, a reduction of one workstation—holding the demand (cycle time) and task times constant—would result in a decrease of idle time equivalent to that of the cycle time for every unit produced. Thus, line balancing can be an effective tool in sustainable manufacturing by minimizing the number of operators/workstations which, in turn, reduces the necessary space requirements and idle time.

The effectiveness of line-balancing procedures, however, is compromised when the task times are not known with certainty. Accounting for the resultant variability requires the assignment of fewer tasks within each workstation—and, therefore, additional workstations—to ensure that the work can be completed with a given (say, 95 percent) probability. This, in turn, causes the expected idle time to increase considerably within the workstations. Even fully-loaded workstations will incur idle time on 95 percent of the units. Obviously, this is contrary to the energy reduction initiatives of sustainable manufacturing. Therefore, we propose the utilization of unpaced synchronous production lines as an alternative to paced lines when there is considerable variability in task times. We will show that unpaced lines generally provide more efficient—thus, more energy-efficient—production processes than their paced counterparts.

In the next section, we discuss the research literature on serial production lines. We then define the problem in Section 3 and formulate an appropriate model. In Section 4, a construction heuristic is developed to solve the line-balancing problem. Extreme value theory is applied to the specific problem with normally-distributed task times; simulation is then proposed as a more general approach. Computational results concerning the effectiveness of the proposed heuristic are also presented in this section. In Section 5, analyses concerning the general performance of unpaced synchronous lines are described. Finally, we conclude the paper and present areas of future research.


                     Buzacott and Shanthikumar (1993) have classified serial production lines by the manner of job movement between stations; that is, the lines can be asynchronous or synchronous (indexing). In asynchronous lines, the timing of the job movement between stations is not coordinated. As soon as a job is completed in a station, it is moved to the next station if it is not blocked (i.e., there is physical space available for it at the next station or in a buffer), and the next job is immediately started if it is not starved (i.e., there is another job available from the upstream station or buffer). The key decisions in the design of asynchronous lines are buffer allocation—the capacity and placement of buffers—as well as the assignment of tasks to stations. It has been shown that asynchronous lines should not necessarily be perfectly balanced to maximize throughput; that is, a “bowl phenomenon” exists such that the middle stations of the line should be assigned less processing time than those at the beginning and end of the line (Hillier & Boling, 1966,1979). Smunt and Perkins (1985) found this phenomenon to be less pronounced for processes with lower levels of task time variance. Concerning the buffer-allocation problem, Conway, Maxwell, McClain, and Thomas (1988) found that small buffers are sufficient to offset much of the loss due to stochastic operation times, and that the placement of the buffers should be greater toward the center of the line for balanced lines or near bottlenecks if they exist (for a review, see Harris & Powell, 1999).

With regard to synchronous production lines, the timing of the job movement between stations is coordinated such that the all of the jobs are indexed simultaneously. In these lines, the tasks should be assigned to stations such that the station processing times are balanced. Synchronous lines can be further classified as paced or unpaced (Buzacott & Shanthikumar, 1993). A great deal of research has involved the development and testing of optimal and heuristic solution procedures for paced synchronous production lines in which there is a fixed cycle time at which the line is indexed. In the case of stochastic task times, there is a risk of not completing the tasks within the cycle time. These models are generally formulated with a cost-minimization objective (assuming the line is stopped until the units are completed or an off-line station is utilized to finish incomplete units) or by minimizing the required number of stations subject to a constraint on the probability of a station exceeding the cycle time. For a review of the literature on the basic line-balancing problem, see Scholl and Becker (2006); for generalized line-balancing problems, including a brief review of the stochastic line-balancing problem, see Becker and Scholl (2006); and for a taxonomy of line-balancing problems, see Battaïa and Dolgui (2013).

Rather than having a fixed cycle time, an unpaced synchronous production line advances only when all of the stations have completed their tasks. For example, the Conner Avenue assembly plant that produced the Dodge Viper utilized this type of production process:

                        “Overall, the assembly process involves about 80 operations, performed during 37-minute stops at 30 stations along the line. The line is controlled by a light system—yellow indicates work is in progress at a station; green signals the assigned tasks at that station have been completed. Only when the entire line is “green” does the car move to the next station.” (Dear, 2003).
                     
                  

Under this mode of production, there will be no incomplete units, as is possible with a paced line; all of the stations must now wait until the last station has finished its operations, rather than moving at fixed cycle times. On the other hand, the line can index as soon as all of the stations are finished, without waiting until the cycle time expires. Thus, rather than balancing the line such that there is a small probability of exceeding the cycle time (resulting in lower utilization and increased idle time), the line must be balanced based on the expected maximum time to complete the tasks of all of the stations. While this results in a variable throughput (not a fixed cycle time) with stochastic task times, this variability is expected to have minimal effect on the system due to the high volumes generally associated with assembly lines.

Although some analytic results have been presented for the operation of unpaced synchronous production lines (see, e.g., Buzacott & Shanthikumar, 1993), very little research has focused on balancing this type of line. Kouvelis and Karabati (1999) investigated mixed-model cyclic scheduling of unpaced synchronous lines but, again, they do not incorporate the line-balancing aspects. Chiang, Urban, and Xu (2012) developed a tabu-search metaheuristic as a solution methodology for a bi-objective line-balancing model that also considered throughput maximization. Doerr, Klastorin, and Magazine (2000) developed a cost-minimization line-balancing model with worker differences, daily production quotas, and planned overtime, and they assumed that task times followed a shifted-exponential distribution; our work differs from theirs as we model the variability with respect to the task, not the worker, with an objective of minimizing the number of stations (consistent with the typical paced stochastic line-balancing literature).

The unpaced synchronous line-balancing problem is analogous to the Type I model for paced lines (i.e., minimize the number of stations for a given cycle time). There are a number of tasks (i = 1 ,…, N), each of which are to be assigned to one of several stations (j = 1,…, M); let πj
                      be the set of tasks assigned to station j (decision variable). The time to complete each task, Ti
                     , is assumed to be an independent, random variable. Each task has precedence relationships that are represented by a set of ordered pairs of tasks, R = {1,…, r,…, |R|}, such that r = (a, b) is the ordered pair indicating task a immediately precedes task b. There is a given production requirement, D, that must be met. The objective is to minimize the number of stations required to meet the production requirements while satisfying the precedence relationships.

The difference between a Type I paced and unpaced synchronous production line, though, is that an unpaced line advances only when all of the stations have completed their tasks. Thus, the time at which the line advances, τ, will be the greatest time to complete the tasks in any of the stations:

                        
                           (1)
                           
                              
                                 
                                    
                                       
                                          τ
                                          =
                                          
                                             max
                                             j
                                          
                                          
                                             [
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      ∈
                                                      
                                                         π
                                                         j
                                                      
                                                   
                                                
                                                
                                                   T
                                                   i
                                                
                                             
                                             ]
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

Since the task times are random variables, τ will also be a random variable. The long-run line capacity (throughput rate) for the production line will be 1/μτ
                     , where μτ
                      is the mean time between indexing (i.e., the average time it takes to advance the line).

Let

                        
                           
                              
                                 
                                    
                                       
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                          
                                          =
                                          
                                             {
                                             
                                             
                                             
                                             
                                             
                                                
                                                   
                                                      1
                                                   
                                                   
                                                      
                                                         
                                                            if
                                                            
                                                            task
                                                         
                                                         
                                                         i
                                                         
                                                         
                                                            is
                                                            
                                                            assigned
                                                            
                                                            to
                                                            
                                                            station
                                                            
                                                         
                                                         j
                                                      
                                                   
                                                
                                                
                                                   
                                                      0
                                                   
                                                   
                                                      otherwise
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

Then the time at which the line advances can be expressed as:

                        
                           (2)
                           
                              
                                 
                                    
                                       
                                          τ
                                          =
                                          
                                             max
                                             j
                                          
                                          
                                             [
                                             
                                                
                                                   ∑
                                                   i
                                                
                                                
                                                   
                                                      T
                                                      i
                                                   
                                                   
                                                      x
                                                      
                                                         i
                                                         j
                                                      
                                                   
                                                
                                             
                                             ]
                                          
                                       
                                    
                                 
                              
                           
                        
                     and the unpaced synchronous line-balancing problem can then be expressed as the following mixed-integer, nonlinear program:

                        
                           (3)
                           
                              
                                 
                                    
                                       
                                          Minimize
                                          
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                M
                                                
                                                   u
                                                   b
                                                
                                             
                                          
                                          
                                             w
                                             j
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    
                                       
                                          
                                             subject
                                             
                                             to
                                          
                                          :
                                          
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                M
                                                
                                                   u
                                                   b
                                                
                                             
                                          
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                          
                                          =
                                          1
                                          
                                          
                                             for
                                             
                                             all
                                          
                                          
                                          i
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                M
                                                
                                                   u
                                                   b
                                                
                                             
                                          
                                          
                                             
                                                (
                                                
                                                   M
                                                   
                                                      u
                                                      b
                                                   
                                                
                                                −
                                                j
                                                +
                                                1
                                                )
                                             
                                             
                                                (
                                                
                                                   x
                                                   
                                                      a
                                                      j
                                                   
                                                
                                                −
                                                
                                                   x
                                                   
                                                      b
                                                      j
                                                   
                                                
                                                )
                                             
                                             ≥
                                             0
                                          
                                          
                                          
                                             for
                                             
                                             all
                                          
                                          
                                             (
                                             
                                                a
                                                ,
                                                b
                                             
                                             )
                                          
                                          ∈
                                          R
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    
                                       
                                          
                                             w
                                             j
                                          
                                          −
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                          
                                          ≥
                                          0
                                          
                                          
                                             for
                                             
                                             all
                                          
                                          
                                          i
                                          ,
                                          j
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    
                                       
                                          
                                             w
                                             
                                                j
                                                −
                                                1
                                             
                                          
                                          −
                                          
                                             w
                                             j
                                          
                                          ≥
                                          0
                                          
                                          for
                                          
                                          j
                                          ≥
                                          2
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (8)
                           
                              
                                 
                                    
                                       
                                          1
                                          /
                                          
                                             μ
                                             τ
                                          
                                          ≥
                                          D
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (9)
                           
                              
                                 
                                    
                                       
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                          ,
                                          
                                             w
                                             j
                                          
                                          
                                          ≥
                                          0
                                          
                                          
                                             for
                                             
                                             all
                                          
                                          
                                          i
                                          ,
                                          j
                                       
                                    
                                 
                              
                           
                        
                     where Mub
                      is the upper bound on the number of stations required. Constraint set (4) ensures the assignment of each task to one and only one station. The precedence relationships among the tasks are maintained through constraint set (5). Constraint sets (6) and (7) define the utilization of each station (i.e., wj
                      = 1 if tasks are assigned to station j, wj
                      = 0 if not). Finally, constraint (8) ensures sufficient throughput to satisfy the production requirements.

As mentioned above, 1/μτ
                      is an expected throughput rate, so constraint (8) will ensure the long-run throughput to meet demand. For assembly lines with high production volumes, the long-run expected value would likely be the appropriate throughput measure, particularly when safety stock of the finished item is held. On the other hand, for a system with hourly or daily quotas or with non-preemptive tasks that may need to be finished within a shift, this value may not accurately represent the throughput for such short-term production measures. Alternative formulations that take into account the specific circumstances of a particular installation may be necessary.

If the task times are deterministic, constraint (8) can be replaced with τ ≤ C where C is the required cycle time, C = 1/D. Although τ is the maximum time of all of the stations, constraint (8) can be replaced with an equivalent set of constraints:

                        
                           (10)
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             N
                                          
                                          
                                             
                                                T
                                                i
                                             
                                             
                                                x
                                                
                                                   i
                                                   j
                                                
                                             
                                          
                                          ≤
                                          C
                                          
                                          for
                                          
                                          all
                                          
                                          j
                                       
                                    
                                 
                              
                           
                        
                     resulting in a mixed-integer linear program. Consequently, the deterministic unpaced synchronous line-balancing problem is equivalent to the deterministic paced synchronous line balancing problem, and the solution procedures developed for paced lines (see, e.g., Scholl & Becker, 2006) can be used for unpaced lines.

While the unpaced synchronous line-balancing problem is identical to that of a paced synchronous line as a deterministic problem, it is very different in the stochastic sense. With stochastic task times, the time at which the line advances, τ, is a random variable. Thus, the throughput will vary from cycle to cycle and, in fact, the station that is the “bottleneck” may also vary from one cycle to the next depending on the relative distributions of the station times. In our development of a heuristic solution methodology, we will consider two methods of analysis: (1) using extreme value theory to evaluate the mean of the distribution of the maximum station times, under certain conditions, and (2) using simulation as a general method of analysis.

The objective of the unpaced synchronous line-balancing problem is the same as that of a paced line (i.e., to minimize the number of stations); therefore, we will illustrate how heuristics developed for paced synchronous lines can be modified to address the unpaced problem. Many traditional line-balancing heuristics are single-pass, construction procedures, in which the tasks are iteratively assigned to the stations—based on some priority value—as long as all precedence relationships are satisfied and sufficient processing time exists in the station. A variety of priority rules have been proposed, such as maximum task time, most number of following tasks, maximum positional weight, among others (Talbot, Patterson, & Gehrlein, 1986). Potentially, improvements to the solution can also be made using multi-pass heuristics, flexible bidirectional construction, metaheuristics, etc. (Scholl & Becker, 2006).

The difficulty with using construction heuristics for stochastic unpaced synchronous production lines is due to the interconnection of the stations. Even if the expected throughput of each individual station is sufficient to meet demand, the time spent waiting on other stations to complete their tasks may result in underachieving the required total production. This, of course, will depend on the distribution of the total task times assigned to each station. Thus, the entire assignment of tasks to stations must be completed before the expected throughput can be calculated. To circumvent this difficulty, we propose an iterative procedure in which an assignment is made for a given cycle time, the expected throughput is determined (the next section discusses the use of extreme value theory as well as simulation to do this) and, if the expected throughput is insufficient, the procedure is re-solved using a smaller cycle time. This approach is taken since Type I line-balancing procedures are more efficient than Type II procedures. The single-pass, construction procedure for the unpaced synchronous problem can be described as follows:


                        Step 1. Initialize: set M = 0 and C = 1/D. Sort the tasks using an appropriate priority rule; in our implementation, we use a ranked positional weight priority function:

                           
                              (11)
                              
                                 
                                    
                                       
                                          
                                             
                                                ϖ
                                                i
                                             
                                             =
                                             
                                                t
                                                i
                                             
                                             +
                                             
                                                ∑
                                                
                                                   j
                                                   ∈
                                                   
                                                      π
                                                      
                                                         S
                                                         i
                                                      
                                                   
                                                
                                             
                                             
                                                t
                                                j
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where ti
                         = E(Ti
                        ) is the mean time to complete task i, and πSi
                         is the set of all tasks that succeed task i.


                        Step 2. Set M = M + 1. Set I = C (I is the expected idle time remaining in the station).


                        Step 3. Identify the set of tasks for which all preceding tasks have been assigned and for which ti
                         ≤ I. If no such task exists, go to Step 2.


                        Step 4. Of the tasks identified in Step 3, assign the highest ranked task to station M, and set I = I – ti
                        . If all tasks have been assigned, go to Step 5; otherwise, return to Step 3.


                        Step 5. Determine the expected time to advance the line, 1/μτ
                         (see Section 4.2). If this value is less than or equal to C; stop, this is the solution. Otherwise, set M = 0 (designating all tasks as “unassigned”) and C = C – 1; go to Step 2.

While this is a straightforward modification of single-pass, construction procedures, it will be shown (Section 4.3) to be quite effective in solving this type of problem.

The distinguishing characteristic of the unpaced synchronous line-balancing problem is in the determination of the throughput (Eq. (8)). As mentioned above, the time at which the line advances—thus, the throughput—is a random variable making the evaluation of alternative assignments of tasks to stations somewhat burdensome. Each station can no longer be evaluated independently; thus, the entire assignment must be specified before μτ
                         can be determined. We will first approach this problem with an analytical approach using extreme value theory; we then consider the use of simulation for more general situations.

An analytical approach to balancing unpaced synchronous lines with stochastic task times presents two obstacles: (1) identifying the distribution of the time to complete the tasks within each station, ∑i
                           
                           ∈
                           
                              πjTi
                           , and (2) identifying the distribution of the maximum value of several station processing times. The first of these has previously been discussed in the line-balancing literature. Kao (1976) notes that the task-time distributions for which the distribution of the sum of the task times can be identified for independent tasks includes the normal (μi, σi
                           
                           2), gamma (αi, β), Poisson (λi
                           ), binomial (ni, p), and negative binomial (ri, p) distributions. The normal distribution is commonly used in balancing paced lines (see Wilhelm, 1987 for a justification of normality in a paced line-balancing context); we will use the normal distribution for the purpose of tractability and, in Section 5, consider the effects of using other distributions.

The second obstacle is the identification of the distribution of the maximum sum of task times for a given assignment of tasks to stations. Whereas most research in the design of serial production lines is concerned with central tendencies (i.e., the mean production time), identifying the distribution of maxima requires the use of extreme value statistics (see David & Nagaraja, 2003, for details on this topic). There are numerous applications of extreme value theory in energy management (e.g., Chan & Nadarajah, 2015,Feng, Wei, & Wang, 2012), engineering (Castillo, Hadi, Balakrishnan, & Sarabia, 2005), and finance (Rocco, 2014); however, very little has been done in the management domain (Buam & McKelvey, 2006).

The majority of the findings in extreme value theory assumes identically-distributed distributions—as if drawing several samples from a population—or is based on the asymptotic distribution of order statistics (for maxima, the asymptotic limit distributions are the Gumbel, Fréchet, and Weibull distributions; in particular, the limit distribution for the maximum of independent normal variables is the Gumbel distribution). However, for balancing unpaced synchronous production lines, the station times will not be identically-distributed distributions; in fact, the actual distribution of the processing times in each station will not be known until a given assignment is proposed. Also, the limiting distribution of the maximum may not provide a good approximation for the number of stations typically found in assembly lines; Fisher and Tippett (1928) first noted that the tendency toward the asymptotic form is quite slow for a normal distribution.


                           Clark (1961) presented the first four moments of the maximum of two independent, but not necessarily identically-distributed, normal variables. The mean, μτ,
                            and variance, στ
                           
                           2, of τ = max{X
                           1∼N (μ
                           1, σ
                           1
                           2), X
                           2 ∼N (μ
                           2, σ
                           2
                           2)} are:

                              
                                 (12)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   μ
                                                   τ
                                                
                                                =
                                                
                                                   μ
                                                   1
                                                
                                                Φ
                                                
                                                   [
                                                   ξ
                                                   ]
                                                
                                                +
                                                
                                                   μ
                                                   2
                                                
                                                Φ
                                                
                                                   [
                                                   −
                                                   ξ
                                                   ]
                                                
                                                +
                                                
                                                   
                                                      
                                                         σ
                                                         1
                                                         2
                                                      
                                                      +
                                                      
                                                         σ
                                                         2
                                                         2
                                                      
                                                   
                                                
                                                
                                                φ
                                                
                                                   [
                                                   ξ
                                                   ]
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (13)
                                 
                                    
                                       
                                          
                                             
                                                σ
                                                τ
                                                2
                                             
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         μ
                                                         1
                                                         2
                                                      
                                                      +
                                                      
                                                         σ
                                                         1
                                                         2
                                                      
                                                   
                                                   )
                                                
                                                
                                                Φ
                                                
                                                   [
                                                   ξ
                                                   ]
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                +
                                                
                                                
                                                   (
                                                   
                                                      
                                                         μ
                                                         2
                                                         2
                                                      
                                                      +
                                                      
                                                         σ
                                                         2
                                                         2
                                                      
                                                   
                                                   )
                                                
                                                Φ
                                                
                                                   [
                                                   −
                                                   ξ
                                                   ]
                                                
                                                +
                                                
                                                   (
                                                   
                                                      μ
                                                      1
                                                   
                                                   +
                                                   
                                                      μ
                                                      2
                                                   
                                                   )
                                                
                                                
                                                   
                                                      
                                                         σ
                                                         1
                                                         2
                                                      
                                                      +
                                                      
                                                         σ
                                                         2
                                                         2
                                                      
                                                   
                                                
                                                
                                                φ
                                                
                                                   [
                                                   ξ
                                                   ]
                                                
                                                −
                                                
                                                   μ
                                                   τ
                                                   2
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where 
                              
                                 ξ
                                 =
                                 
                                    (
                                    
                                       
                                          μ
                                          1
                                       
                                       −
                                       
                                          μ
                                          2
                                       
                                    
                                    )
                                 
                                 /
                                 
                                    
                                       
                                          σ
                                          1
                                          2
                                       
                                       +
                                       
                                          σ
                                          2
                                          2
                                       
                                    
                                 
                              
                           , and φ and Φ are the density and cumulative distribution functions for the standard normal distribution, respectively. While these provide exact values for two stations with normal task/station times, the typical production line will have more than two stations. An approximation for the N > 2 case is made by finding the mean and variance of the maximum of two of the station times, then treating the result as a normal variable (although the distribution is actually slightly skewed) and estimating the mean and variance of the maximum of that result and a third station time using Eqs. (12) and (13), and repeating this until all of the station times have been included. Clark (1961) found this approximation to provide an accurate estimate of the mean of three or more normal variables (within 0.14 percent for as high as N = 10) and, under some circumstances, to provide a reasonable approximation for non-normal variables. The algorithm for production lines with more than two stations and normally distributed task times with means, ti
                           , and variances, vi
                           , is shown below:


                           Step 1. For a given assignment, determine the mean and variance of the sum of the task times for each station:

                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   μ
                                                   j
                                                
                                                =
                                                
                                                   ∑
                                                   
                                                      i
                                                      ∈
                                                      
                                                         π
                                                         j
                                                      
                                                   
                                                
                                                
                                                   t
                                                   i
                                                
                                                ,
                                                
                                                   σ
                                                   j
                                                   2
                                                
                                                =
                                                
                                                   ∑
                                                   
                                                      i
                                                      ∈
                                                      
                                                         π
                                                         j
                                                      
                                                   
                                                
                                                
                                                   v
                                                   i
                                                
                                                ,
                                                
                                                
                                                   for
                                                   
                                                   all
                                                
                                                
                                                j
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

If the task times are normally distributed, the sum of the task times (station time) will also be normally distributed.


                           Step 2. If two or more stations have zero variance, exclude all of them from the following calculations except the one with the largest mean, since a smaller deterministic value will never exceed a larger one (moreover, this avoids a value of zero in the denominator of ξ).


                           Step 3. Set j = 2.


                           Step 4. Using Eqs. (12) and (13), calculate the mean and variance of the maximum of the two random variables.


                           Step 5. If j = N, then go to Step 8; otherwise, set j = j + 1.


                           Step 6. Set μ
                           1 = μτ, σ
                           1
                           2 = στ
                           
                           2, μ
                           2 = μj
                           , and σ
                           2
                           2 = σj
                           
                           2. Although the maximum of two normal variables is not normal, Eqs. (12) and (13) are used iteratively as though it were.


                           Step 7. Return to Step 4.


                           Step 8. Stop; μτ
                            is the mean time between indexing for the given assignment.

While extreme value theory is useful when the task times are normally distributed, many practical situations may require the use of other distributions. Knott and Sury (1987) noted that unpaced, light-assembly tasks exhibit a variety of distributions; Doerr and Arreola-Risa (2000) studied a seafood processing plant and found that the shifted-exponential distribution fits the observed empirical distributions better than the normal distribution. Thus, an analysis may require the use of several distributions, perhaps even the use of empirical data. Also, other considerations such as yield loss, equipment failure, etc. may be important considerations in a practical line-balancing assembly system. In these situations, a general approach, such as simulation, becomes more appropriate, although it may take greater computational effort. Thus, we will incorporate a simulation module as part of our ranked positional weight heuristic (Step 5) as an alternative approach to the extreme value theoretic approach described above.

To evaluate the effectiveness of the ranked positional weight heuristic for the unpaced synchronous line-balancing problem, the standard set of 64 problems from the paced line-balancing literature was analyzed (Talbot et al., 1986). The required throughput was based on an 8-hour day using the cycle times provided with the datasets (i.e., D = 480/C), consistent with the analysis of Doerr et al. (2000). The task times were assumed to be normally distributed, the times provided with the datasets were used as the means. The task variances, vi
                        , were generated using the approach of Carraway (1989); that is, random values were generated in two ranges with coefficients of variation ranging from 0 to ¼ and from 0 to ½, hereafter called low- and high-variance scenarios, respectively.


                        Table 1
                        presents the solutions obtained from the ranked positional weight (rpw) heuristic using both the extreme value and simulation (using 100,000 iterations) approaches to evaluate the maximum of the station times. To evaluate the quality of these solutions, the solutions to a branch-and-bound procedure are presented (i.e., laser search, as discussed in the Appendix) as are lower bounds based on the optimal deterministic solutions (obtained from Scholl & Klein, 2014). Due to the variability of the task times, some problem instances will have no feasible solution for small cycle times; even if all tasks are assigned to separate stations, the expected throughput will be insufficient to meet demand without splitting tasks. The CPU times, in seconds, are also reported for each instance using an Intel i7-980 processor running at 4.0 gigahertz with 12 gigabytes of memory.

It is apparent that the ranked positional weight heuristic is quite effective in solving the unpaced synchronous line-balancing problem. It was able to identify the solution to 37 of 41 problems (over 90 percent) for which the solution was obtained using the laser search technique. The solution time was 0.01 CPU seconds or less for all problems up to 70 tasks, using extreme value theory to evaluate throughput. It is also evident (in comparing Tables 1a and b
                        ) that the number of stations required decreases as the task variability decreases; for example, 28 stations are required for the Arcus 111-task problem with a cycle time of 8847 for the high-variance instance, only 21 stations are required for low task variability, and 18 stations would be needed for deterministic task times. The computational effort is also less as task variability decreases, with roughly half the CPU time required for the low-variance case relative to the high-variance case.

In addition to the ranked positional weight heuristic, two other well-known priority rules were evaluated: (1) the most number of following tasks, and (2) the maximum mean task time. Using the most number of following tasks usually provided the same number of stations as the rpw heuristic; it identified a better solution for three instances and provided a worse solution nine times. The maximum mean task time heuristic did not perform well for this application; it outperformed the rpw heuristic only once and provided an inferior solution for 92 instances, sometimes requiring several additional stations. Given the superiority of the ranked positional weight heuristic, the results of these alternative approaches are not provided and will not be considered further.

As expected, the heuristic using simulation required more computational effort than that using extreme value theory. However, the two methods provided the same solutions (i.e., the minimum number of stations) for all 128 instances. For normally-distributed task times, the extreme-value approximation is quite effective (we present the results of non-normal task times in Section 5.2).

Since very little research has been conducted on the line-balancing problem for unpaced synchronous lines, we will present the results of various analyses in this section.

As previously mentioned, the balancing of paced lines is frequently done by introducing a constraint on the probability of a station exceeding the cycle time. Of course, ensuring that there is only a five percent chance (for example) of exceeding the cycle time means that there is a high probability of incurring idle time. Thus, the higher the probability of meeting the cycle time, the lower the efficiency of the line, resulting in potentially more stations required to meet the output. Furthermore, there is still a five percent chance of producing an incomplete unit, resulting in stopping the line (further deteriorating the efficiency) or completing the unit off line (requiring additional resources).

On the other hand, an unpaced synchronous line advances when—and only when—all of the stations have completed their tasks. Not only does this eliminate the production of uncompleted units, it eliminates the need to assign tasks allowing several standard deviations from the mean of the sum of the task times. Of course, all stations must wait until every station is finished, which also results in a loss of efficiency. The question arises whether paced or unpaced synchronous production lines are more efficient (we will assume the structure of the line has no impact on the task-time distribution).


                        Table 2
                         presents the number of stations required for the datasets analyzed in the previous section. The unpaced solution is taken from the proposed laser search technique when available, from the ranked positional weight heuristic otherwise. The paced solution is found for various probabilities of meeting the cycle time (for 97.5, 95, and 90 percent) using the optimal solution methodology (for N ≤ 28) based on Urban and Chiang (2006). As shown in the table, feasible assignments cannot be made for paced lines without parallel stations in which the cycle time is less than max
                           i
                        {ti
                         + Zα∙vi
                        
                        0.5}, where Zα
                         is the α-quantile of the cumulative standardized normal distribution (Zα
                         = 1.96, 1.645, and 1.28 for the 97.5, 95, and 90 percent quantiles, respectively).

As illustrated in the table, unpaced synchronous production lines tend to be more efficient than paced lines, particularly with high task variance. Consider, for example, the high-variance situation with a 95 percent probability of meeting the cycle time. Of the 29 instances in which a feasible solution exists for the unpaced problem, there is no solution to 9 of the paced problems that can maintain the 95 percent constraint. Of the remaining 20 instances, the unpaced line requires fewer stations 10 times, and the two lines perform equally well 10 times. The paced line never requires fewer stations than the unpaced line for any of the high-variance situations. Furthermore, the idle time necessary to maintain a given probability of meeting the cycle time significantly reduces the efficiency of a paced synchronous line more than that of an unpaced synchronous line. With the amount of idle time necessary at each station, there is a high likelihood that many, if not all, stations in a paced line are idle at the end of a substantial number of cycles.

In the context of energy efficiency of synchronous production lines, it is apparent that unpaced lines provide a considerable improvement over paced lines when task times have high variability. As mentioned in the introduction, the design of serial production lines can impact energy efficiency by requiring smaller facilities and by reducing idle time. The average reduction in the required number of stations for the unpaced lines, relative to the 97.5, 95, and 90 percent service levels of the paced lines, are 14.1, 10.4, and 7.2 percent, respectively. However, smaller facilities are achieved not only through fewer required stations, but also through the elimination of those facilities that may be necessary to complete the 2.5, 5, or 10 percent of units that are not completed within the allowed cycle time. The reduction in the amount of idle time is even more pronounced; relative to the 97.5, 95, and 90 percent service levels of the paced lines, the unpaced lines incur an average of 36.6, 27.3, and 19.2 percent less idle time, respectively. Finally, additional idle time may be incurred with paced lines if the entire line must be stopped for incomplete units.

For the low-variance situations, the results are not as drastic. Consider the low-variance situation with a 95 percent probability of meeting the cycle time. Of the 31 instances in which a feasible solution exists for either problem, 18 times the two methods provide the same number of stations. For one instance, there is a feasible solution for the paced problem and not for the unpaced problem, and in one other instance, the paced solution is better than the unpaced solution. In the remaining 11 instances, the unpaced solution again outperforms the paced solution. The distinction between the two approaches—and, therefore, the improvement in energy efficiency provided by unpaced lines—diminishes as the task variability decreases; in fact, as mentioned in the model development section, the unpaced synchronous line-balancing problem is equivalent to the paced synchronous problem when the task times are deterministic.

Although the normal distribution is frequently used in stochastic line-balancing research, it may not always be appropriate in practice. To evaluate the effect that the task-time distribution has on the solution of the unpaced synchronous line-balancing problem, the simulation was conducted on the 128 problems presented in Section 4.3 using the shifted-gamma and the shifted-exponential distributions. To isolate the effect of the distribution on the solution, the parameters for each task were set such that the mean and variance are identical to those in the normal case.


                        Table 3
                         presents the solutions to these problems, including the number of stations as well as the mean, μτ
                        , and standard deviation, στ
                        , of the time between indexing (only the high-variance scenario is presented; the low-variance scenario provided consistent, albeit less drastic, results). In general, moving from the normal to the gamma to the exponential distribution (i.e., increasing the skewness of the task-time distributions) results in a greater mean time between indexing the line as well as greater variability. Occasionally, this may result in requiring an increased number of stations, particularly for the larger problems. In fact, for some instances (e.g., the Mitchell, C = 14 problem), no feasible solution can be found for the gamma or exponential distributions whereas one was identified in the normal case. Therefore, blindly assuming normal task times may result in lines that may not meet the production requirements. This highlights the importance of identifying the true task-time distribution, and the need of not just considering the mean and variance of the task time, but incorporating higher moments as well.
                     

In this section, we will evaluate the effect of changes on the mean and/or variability of the task times. Since the throughput of an unpaced synchronous line is based on the distribution of the maximum of several random variables, the effect of process improvements is not always evident. For our analysis, consider an unpaced line with two stations. The time to complete the tasks in Station 1 is normally distributed with a mean of 30 minutes and a standard deviation of 10 minutes; the time to complete the tasks in Station 2 is also normally distributed with a mean of 30 minutes, but with a standard deviation of only 5 minutes. Assume we now have the opportunity to reduce the mean and/or variability of Station 1.

In this situation, both stations have the same mean, but the standard deviation of Station 1 is twice that of Station 2. Intuitively, we would think that any process improvement efforts should involve reducing the variability of Station 1, since a reduction in its mean would likely leave Station 2 as a bottleneck. In fact, as shown in Fig. 1, if we reduce the standard deviation of Station 1 to the same level as Station 2 (a reduction of 50 percent), we realize a five percent increase in throughput. Moreover, we can realize an equivalent increase in throughput by decreasing the mean of Station 1 by 12.6 percent (down to 26.2 minutes), even though the mean of Station 2 is still 30 minutes. Yet another interesting observation is that reducing the mean of Station 2 has exactly the same effect reducing the mean of Station 1; a 12.6 percent decrease in its mean results in a 5 percent increase in throughput. Thus, the goal of process improvement need not be to balance the mean (and variance) of the station times as with paced lines.

The results of the previous section lead us to wonder whether unbalanced production lines can provide improved throughput. As mentioned in Section 2, unpaced asynchronous lines should not necessarily be perfectly balanced; the bowl phenomenon suggests that the stations in the middle of the line should be assigned less processing time than those at the beginning and end of the line. To see if this is true for unpaced synchronous production lines, a simulation was conducted similar to the analysis of Hillier and Boling (1979). Consider the situation in which there are M = {2, 3, 4, 5, 6} stations. The total processing time is M time units so, if the line were perfectly balanced, each station would have 1 time unit of work. Any fraction of the time can be assigned to any station (i.e., there are not discrete tasks with precedence relationships). Both exponential and normal (with constant variance among the stations) station time distributions are evaluated.

The results of the simulation indicate that as long as the stations have homoskedastic processing times, balanced lines are optimal for unpaced synchronous lines; however, this does not extend to the situation in which the station time variability is not the same for all stations. For asynchronous lines, Rao (1976) found that variability imbalance can be as important a factor as the bowl phenomenon. Therefore, we extend the simulation to consider the situation in which the station times for Stations 1 through M – 1 are normally distributed with a standard deviation of 0.20 time units. The processing time for Station M is also normally distributed, but we find the mean processing time of this station (while maintaining ∑
                           j μj
                         = M and μj
                         = μk
                         ∀ j, k ≠ M) for various values of the standard deviation (for σM
                         = {0.05, 0.10,…, 0.40} and for 2 through 10 stations) to maximize throughput.


                        Table 4
                         presents the optimal value for the mean processing time for Station M as well as the resultant throughput of the line. As the variability of Station M increases, the amount of work assigned to that station decreases and, as expected, the throughput decreases. The throughput also decreases as the number of stations increases, and the amount of work assigned to Station M increases if it has less variability than the other stations but decreases if it is more variable. Interestingly, for two stations, a balanced line appears to be optimal even if the station time variance is not equal.

The first priority of the Institution of Mechanical Engineers’ (2009) energy policy is energy conservation, the reduction of unnecessary energy use. The potential for energy savings resulting from no or low cost measures should be the foundation of any sustainable manufacturing initiative. Line balancing has been shown to be an effective tool in designing energy-efficient facilities; however, when stochastic task times are present, the balancing of paced assembly lines results in larger facilities and substantial idle time. Therefore, we argue that unpaced lines are more energy-efficient when there is considerable variability in task times.

This research addresses the design and operation of unpaced synchronous production lines with stochastic task times. A line-balancing model is developed for this type of problem, and solution methodologies are developed, including a laser search procedure and a ranked positional weight heuristic. Extreme value theory is used to evaluate the throughput of unpaced synchronous lines for normally-distributed task times; simulation is proposed for more general situations. It is found that unpaced synchronous production lines are quite efficient relative to paced lines, particularly for situations with high task-time variances, and that skewed task-time distributions result in decreased throughput, even with identical task-time means and variances.

Some areas of future research include the following:

                        
                           1.
                           
                              Explicit modeling of energy use. While the balancing of unpaced synchronous production lines can result in smaller facilities and reduced idle time (hence, reduced energy usage), models that explicitly include energy use and cost would be appropriate. In some situations, machines may be able to be placed in an energy-saving mode or shut-down mode such that the energy usage may be somewhat less than that of the operational mode (e.g., Chang, Xiao, Biller, & Li, 2013). If this can be accomplished without requiring significant energy for transitioning between power modes, then a model that incorporates scheduling machines’ energy-saving mode could potentially reduce energy consumption even further.


                              Determination of the task-time distribution. Studies have shown that the distribution of processing times tends to be skewed if the operators are allowed to take as long as they like (e.g., an asynchronous line); on the other hand, if there is an upper limit on the time available for performing the task (e.g., a paced line), the distribution tends to be more symmetric (see Buzacott & Shanthikumar, 1993, p. 154, and the references therein). What isn't clear is the shape of the task-time distribution in an unpaced synchronous production line. There is not a fixed time at which the line moves, yet the workers at the other stations are waiting until the last operator is finished. Whether the motivation realized by the operator by having others wait (competitive effect) has the same effect as that of a paced line (goal of meeting cycle time) needs to be evaluated.


                              Development of strong lower bounds. Bounding procedures have been developed for the expected maximum of several variables (e.g., Ross, 2003), but an additional difficulty introduced in the present problem is that the variables are not defined until the assignment of tasks to stations is made. A readily-obtained lower bound is the optimal solution to the deterministic problem using the mean task times, as discussed in the appendix; however, this bound ignores the stochastic aspect of the problem that may provide additional insight in the development of tighter bounds.


                              Generalization of the basic model. Many of the generalizations made to the paced line-balancing problem can be examined for unpaced lines. For instance, utilizing parallel stations/lines (e.g., McMullen & Frazier, 1997) may be particularly beneficial with unpaced synchronous production lines; as utilizing several shorter lines, particularly as the variability of the task times increases, can provide increased efficiency. U-shaped lines (e.g., Chiang & Urban, 2006) can also provide flexibility to improve a line's efficiency. Another noteworthy extension involves the inclusion of customer-specified product options, generalizing the mixed-model line-balancing problem for paced production lines (see, e.g., Zhao, Ohno, & Lau, 2004), as a result of the move toward mass customization by many firms. Finally, the potential advantage in unpaced synchronous lines of using dynamic task allocation (Bartholdi & Eisenstein, 1996) discuss “bucket brigade” manufacturing) can be examined for production processes that can take advantage of such a system.


                              Alternative solution methodologies. While the ranked positional weight heuristic appears to be quite effective in solving the unpaced synchronous line-balancing problem, other heuristics (perhaps multi-pass procedures, metaheuristics, etc.) may provide better solutions for large problems. Optimization procedures can be developed for larger problems. Furthermore, alternative approaches, such as a bootstrapping procedure, would be appropriate for a variety of situations, particularly in which short-term, say hourly or daily, quotas are mandated, such that the maximum of interest actually is a sample maximum.

To provide a basis of comparison for the proposed heuristic, a branch-and-bound procedure is developed; in particular, a “laser search” technique is proposed (Johnson, 1988). As described by Scholl and Becker (2006), “At any step of the search, a single branch of the tree is developed until a leaf node is reached or the current node is fathomed. Tracing back to the root, the search follows the first possible alternative branch, i.e., each node is completely developed before its ancestor nodes are revisited.” This approach is particularly appropriate for the unpaced synchronous problem, since the effect of each station on the average line throughput is not independent of the other stations. For example, every individual station may have an average throughput greater than the overall production requirement, but in combination with other stations, the mean time between indexing, μτ,
                      may prohibit achieving this requirement.

As each branch is developed, a node may be fathomed for one of two reasons: (1) violating the precedence relationships, and (2) containing a station that cannot meet the required mean throughput. Once an entire branch is developed, the extreme value theory calculations (Eqs. 12 and 13) are used to estimate the throughput of the production line. Since this provides an estimate of the throughput for more than two stations, we hesitate in calling the final result an “optimal” solution.

As with any combinatorial problem, the development of tight bounds can be quite useful in analyzing and evaluating solutions. Ross (2003) proposed a lower bound on the expected value of the maximum of several random variables derived from Jensen's inequality and the convexity of the “max” function; in terms of our problem, this can be expressed as:

                        
                           (A1)
                           
                              
                                 
                                    
                                       
                                          
                                             max
                                             j
                                          
                                          
                                             {
                                             
                                                E
                                                
                                                   [
                                                   
                                                      
                                                         ∑
                                                         
                                                            i
                                                            ∈
                                                            
                                                               π
                                                               j
                                                            
                                                         
                                                      
                                                      
                                                         T
                                                         i
                                                      
                                                   
                                                   ]
                                                
                                             
                                             }
                                          
                                          ≤
                                          E
                                          
                                             {
                                             
                                                
                                                   max
                                                   j
                                                
                                                
                                                   [
                                                   
                                                      
                                                         ∑
                                                         
                                                            i
                                                            ∈
                                                            
                                                               π
                                                               j
                                                            
                                                         
                                                      
                                                      
                                                         T
                                                         i
                                                      
                                                   
                                                   ]
                                                
                                             
                                             }
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

Consequently, the solution to the deterministic unpaced (or paced) synchronous line-balancing problem using the expected values of the task times will provide a lower bound for the stochastic problem. As we will show in the computational experimentation, however, that is not an exceptionally strong bound, particularly as the number of stations increases or as the variability of the task times increases. Still, it provides a reasonable starting point for the laser search procedure.

To restrict the enumeration of potential solutions, lower and upper bounds on the station assignment of each task can be determined, similar to that of Patterson and Albrecht (1975):

                        
                           (A2)
                           
                              
                                 
                                    
                                       
                                          
                                             E
                                             i
                                          
                                          =
                                          
                                             ⌈
                                             
                                                
                                                   (
                                                   
                                                      
                                                         t
                                                         i
                                                      
                                                      +
                                                      
                                                         ∑
                                                         
                                                            j
                                                            ∈
                                                            
                                                               π
                                                               
                                                                  S
                                                                  i
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         t
                                                         j
                                                      
                                                   
                                                   )
                                                
                                                D
                                             
                                             ⌉
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (A3)
                           
                              
                                 
                                    
                                       
                                          
                                             L
                                             i
                                          
                                          =
                                          M
                                          +
                                          1
                                          −
                                          
                                             ⌈
                                             
                                                
                                                   (
                                                   
                                                      
                                                         t
                                                         i
                                                      
                                                      +
                                                      
                                                         ∑
                                                         
                                                            j
                                                            ∈
                                                            
                                                               π
                                                               
                                                                  P
                                                                  i
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         t
                                                         j
                                                      
                                                   
                                                   )
                                                
                                                D
                                             
                                             ⌉
                                          
                                       
                                    
                                 
                              
                           
                        
                     where ⌈x⌉ is the smallest integer greater than or equal to x, and πSi
                      (πPi
                     ) is the set of tasks that succeed (precede) task i. Thus, the procedure need only evaluate the assignment of a particular station from Ei
                      to Li
                     , not from 1 to M. The greatest benefit will be realized in situations with high demand (thus, a greater required number of stations); these situations are also those that require the greatest computational effort.

Computational results (see Table 1) have shown the laser search technique to be effective in solving problems with as many as 21 tasks. Of course, as is true with any combinatorial problem, the solution time quickly escalates as the problem size increases.

@&#REFERENCES@&#

