@&#MAIN-TITLE@&#An exact decomposition algorithm for the generalized knapsack sharing problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose an exact algorithm for an NP-hard problem.


                        
                        
                           
                           We propose an upper bound, which can be efficiently computed.


                        
                        
                           
                           The original problem is decomposed into a series of sub-problems, which can be more easily solved.


                        
                        
                           
                           The proposed reduction strategies can significantly reduce the computational effort.


                        
                        
                           
                           The proposed algorithm generally outperforms the best algorithms from literature.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Exact decomposition

Knapsack

Sharing

Reduction

Upper bound

@&#ABSTRACT@&#


               
               
                  This paper presents an exact algorithm for solving the knapsack sharing problem with common items. In literature, this problem is also denominated the Generalized Knapsack Sharing Problem (GKSP). The GKSP is NP-hard because it lays on the 0–1 knapsack problem and the knapsack sharing problem. The proposed exact method is based on a rigorous decomposition technique which leads to an intense simplification of the solution procedure for the GKSP. Furthermore, in order to accelerate the procedure for finding the optimum solution, an upper bound and several reduction strategies are considered. Computational results on two sets of benchmark instances from literature show that the proposed method outperforms the other approaches in most instances.
               
            

@&#INTRODUCTION@&#

This paper presents an exact algorithm for solving the knapsack sharing problem with common items (see e.g., Fujimoto & Yamada, 2006). In literature, this problem is also denominated the Generalized Knapsack Sharing Problem (GKSP). As a generalization of the knapsack sharing problem, which has attracted wide attention in the context of the fair distribution of resources, the GKSP appears to be more valuable in real-world applications. This is due to the main consideration of the GKSP, which assumes that all agents have common interests while each of them searches for his own benefits. Such a system could be helpful for developing the incentive mechanism design for mobile phone sensing (see e.g., Zhang et al., 2014).

An instance of the GKSP is characterized by a fixed knapsack capacity Cgksp
                      and a set 
                        N
                      of 
                        
                           n
                           +
                           1
                        
                      disjoint subsets 
                        
                           
                              N
                              0
                           
                           ,
                           
                           
                              N
                              1
                           
                           ,
                           …
                           ,
                           
                           
                              N
                              n
                           
                           ,
                        
                      such that 
                        
                           N
                           =
                           
                              ∪
                              
                                 i
                                 =
                                 0
                              
                              n
                           
                           
                              N
                              i
                           
                        
                      and 
                        
                           
                              N
                              i
                           
                           ∩
                           
                              N
                              j
                           
                           =
                           ∅
                        
                      for (i ≠ j). The first subset 
                        
                           N
                           0
                        
                      denotes the set of common items whereas all other subsets 
                        
                           
                              N
                              i
                           
                           ,
                           
                           i
                           =
                           1
                           ,
                           …
                           ,
                           n
                           ,
                        
                      denotes the set of uncommon (individual) items. Each item i belonging to the set 
                        
                           
                              N
                              i
                           
                           ,
                           
                           i
                           =
                           0
                           ,
                           …
                           ,
                           n
                           ,
                        
                      is characterized by its profit and weight. In this paper, we assume that the profits and weights are positive integers. The objective of the problem is to determine a set of items that maximizes the minimal value of a set of linear functions under the capacity.

Let P
                        kp
                      be a 0–1 Knapsack Problem (KP) defined on the set of common items (i.e., 
                        
                           N
                           0
                        
                     ) and P
                        ksp
                      be the Knapsack Sharing Problem (KSP) defined on the set of uncommon items (i.e., 
                        
                           
                              
                                 ∪
                                 
                                    i
                                    =
                                    1
                                 
                                 n
                              
                              
                                 N
                                 i
                              
                           
                        
                     ). Assume that 
                        
                           N
                           0
                        
                      contains m
                     0 items and 
                        
                           N
                           i
                        
                      contains mi
                      items, for 
                        
                           i
                           =
                           1
                           ,
                           …
                           ,
                           n
                        
                     . Therefore, P
                        kp
                      and P
                        ksp
                      can be formally defined as follows:

                        
                           
                              
                                 
                                    
                                       
                                          
                                             (
                                             
                                                P
                                                
                                                   k
                                                   p
                                                
                                             
                                             )
                                          
                                          
                                       
                                    
                                    
                                    
                                       
                                          
                                             Z
                                             
                                                k
                                                p
                                             
                                          
                                          =
                                          max
                                          
                                          
                                             
                                                p
                                                0
                                             
                                             ·
                                             
                                                x
                                                0
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          s.t.
                                          
                                          
                                             
                                                w
                                                0
                                             
                                             ·
                                             
                                                x
                                                0
                                             
                                          
                                          ≤
                                          
                                             C
                                             
                                                k
                                                p
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             x
                                             0
                                          
                                          ∈
                                          
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                             
                                                m
                                                0
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     and

                        
                           
                              
                                 
                                    
                                       
                                          
                                             (
                                             
                                                P
                                                
                                                   k
                                                   s
                                                   p
                                                
                                             
                                             )
                                          
                                          
                                       
                                    
                                    
                                    
                                       
                                          
                                             
                                                Z
                                                
                                                   k
                                                   s
                                                   p
                                                
                                             
                                             =
                                             max
                                             
                                                min
                                                
                                                   1
                                                   ≤
                                                   i
                                                   ≤
                                                   n
                                                
                                             
                                             
                                             
                                                {
                                                
                                                   
                                                      p
                                                      i
                                                   
                                                   ·
                                                   
                                                      x
                                                      i
                                                   
                                                
                                                }
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          s.t.
                                          
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             
                                                w
                                                i
                                             
                                             ·
                                             
                                                x
                                                i
                                             
                                          
                                          ≤
                                          
                                             C
                                             
                                                k
                                                s
                                                p
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             x
                                             i
                                          
                                          ∈
                                          
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                             
                                                m
                                                i
                                             
                                          
                                          ,
                                          
                                          ∀
                                          
                                          i
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                          ,
                                       
                                    
                                 
                              
                           
                        
                     where Ckp
                      (resp. Cksp
                     ) is the capacity, p0
                      (resp. pi
                     , 
                        
                           ∀
                           
                           i
                           =
                           1
                           ,
                           …
                           ,
                           n
                        
                     ) is the profit vector related to the common (resp. uncommon) items, w0
                      (resp. wi
                     , 
                        
                           ∀
                           
                           i
                           =
                           1
                           ,
                           …
                           ,
                           n
                        
                     ) is the weight vector related to the common (resp. uncommon) items, and x0
                      is the variable vector (resp. xi
                     , 
                        
                           ∀
                           
                           i
                           =
                           1
                           ,
                           …
                           ,
                           n
                        
                     ) of P
                        kp
                      (resp. P
                        ksp
                     ). Based on mathematical models of P
                        kp
                      and P
                        ksp
                     , P
                        gksp
                      can be written as follows:

                        
                           
                              
                                 
                                    
                                       
                                          
                                             (
                                             
                                                P
                                                
                                                   g
                                                   k
                                                   s
                                                   p
                                                
                                             
                                             )
                                          
                                          
                                       
                                    
                                    
                                    
                                       
                                          
                                             
                                                Z
                                                
                                                   g
                                                   k
                                                   s
                                                   p
                                                
                                             
                                             =
                                             max
                                             
                                                min
                                                
                                                   1
                                                   ≤
                                                   i
                                                   ≤
                                                   n
                                                
                                             
                                             
                                                {
                                                
                                                   
                                                      p
                                                      i
                                                   
                                                   ·
                                                   
                                                      x
                                                      i
                                                   
                                                
                                                }
                                             
                                             +
                                             
                                                
                                                   p
                                                   0
                                                
                                                ·
                                                
                                                   x
                                                   0
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             s.t.
                                             
                                             
                                                ∑
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                n
                                             
                                             
                                                
                                                   w
                                                   i
                                                
                                                ·
                                                
                                                   x
                                                   i
                                                
                                             
                                             +
                                             
                                                
                                                   w
                                                   0
                                                
                                                ·
                                                
                                                   x
                                                   0
                                                
                                             
                                             ≤
                                             
                                                C
                                                
                                                   g
                                                   k
                                                   s
                                                   p
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             x
                                             0
                                          
                                          ∈
                                          
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                             
                                                m
                                                0
                                             
                                          
                                          ,
                                          
                                          
                                             x
                                             i
                                          
                                          ∈
                                          
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                             
                                                m
                                                i
                                             
                                          
                                          ,
                                          
                                          ∀
                                          
                                          i
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                          ,
                                       
                                    
                                 
                              
                           
                        
                     where 
                        
                           
                              C
                              
                                 g
                                 k
                                 s
                                 p
                              
                           
                           =
                           
                              C
                              
                                 k
                                 p
                              
                           
                           +
                           
                              C
                              
                                 k
                                 s
                                 p
                              
                           
                        
                     . Indeed, P
                        gksp
                      can be recognized as a combination of P
                        kp
                      and P
                        ksp
                     . From this property, the rest of this paper is devoted to propose some decomposition and reduction techniques for the GKSP. It implies that, instead of directly addressing P
                        gksp
                     , we try to find the optimum solution of the GKSP by solving a series of P
                        kp
                      and P
                        ksp
                     .

@&#RELATED WORK@&#

GKSP can be viewed as a blend of two well-known combinatorial optimization problems: the 0–1 Knapsack Problem (KP) and the Knapsack Sharing Problem (KSP). As introduced in Karp (1972), the KP is one of the classical NP-hard problems, which has been widely studied in literature. For further details, the reader can refer to Martello and Toth (1990b), Kellerer, Pferschy, and Pisinger (2004). Recently, in Rooderkerk and van Heerde (2016), authors showed that the KP can be also investigated in the retail assortment optimization problem in order to balance the risk and the return of assortments. In literature, two well known exact algorithms have been proposed for the KP: (i) the dynamical programming algorithm (see e.g., Horowitz & Sahni, 1974) and the branch-and-bound algorithm (see e.g., Pisinger, 1997). Based on these two approaches, some hybrid methods have been developed for solving complex optimization problems belonging to the knapsack family (see e.g., Martello & Toth, 1984; Pisinger, Martello, & Toth, 1999).

KSP has been first studied by Brown (1979), where its binary version becomes NP-hard since it represents an intuitive generalization of the KP or the maximum independent set problem (Hifi & M’Hallah, 2012; Kellerer et al., 2004). Yamada, Futakawa, and Kataoka (1998) proposed different exact algorithms based on the branch-and-bound algorithm and the dichotomous search for solving the KSP. Hifi and Sadfi (2002) and Hifi, M’Halla, and Sadfi (2005) designed several dynamic programming algorithms to accelerate the resolution process. In order to enhance the performance of the dynamic programing, Boyer, Baz, and Elkihel (2011) proposed several improved dominance notions based on solving a series of instances of the KP. Meanwhile, Hifi and M’Halla (2010) proposed a tree search-based approach to improve the performance of the branch-and-bound algorithm. Recently, Hifi and Wu (2014) developed an upper bound and an efficient dichotomous exact method for the KSP. The proposed method applies an exact decomposition strategy, where the original problem is decomposed into a series of minimization and maximization knapsack problems. For the large complex KSP, we cite a hybrid metaheuristic proposed in Haddar, Khemakhem, Rhimi, and Chabchoub (2014), which applies a quantum particle swarm optimization approach to find approximate solutions for the KSP. The results showed that the proposed method was able to provide high-quality solutions within a reasonable time.

To our knowledge, few papers are available in literature about the exact solution of the GKSP. Among these papers, we cite the paper of Fujimoto and Yamada (2006) in which an exact enumeration method was designed. The method consists of determining the optimum solution by enumerating all possible values related to the capacity of the KP and the KSP. For solving the KP, Horowitz and Sahni’s (1974) exact algorithm is used whereas Yamada et al.’s (1998) exact method is applied for solving the relevant KSP. In Fujimoto and Yamada (2006), the authors underlined the effectiveness of the method on uncorrelated and weakly correlated instances. Nevertheless, it failed to find optimum solutions for large strongly correlated instances. In Haddar, Khemakhem, Hanafi, and Wilbaut (2015), a quantum particle swarm optimization was elaborated to approximately solve the GKSP. The provided results showed that the proposed approach was able to efficiently find the high-quality solutions in most cases, especially in the strongly correlated case.

As shown in Conejo, Castillo, Minguez, and Garcia-Bertrand (2006) and Raidl (2015), decomposition based techniques achieved great success in reducing computational effort for solving complex combinatorial optimization problems. Therefore, this paper addresses an exact decomposition technique for finding the optimum solution of the GKSP. The provided subproblems are solved by using the most recently available strategies. Furthermore, a new upper bound and several reduction strategies are introduced for accelerating the convergence of optimum solutions of the GKSP.

The remainder of the paper is organized as follows. Section 3 begins by summarizing the principle of the proposed exact method. Section 3.1 introduces a new upper bound used to curtail the search process. Section 3.2 discusses some strategies used to determine and improve lower bounds for the GKSP. Section 3.3 gives an overview of the proposed exact method. In Section 4, the performance of the proposed exact method is evaluated and analyzed on a variety of instances from literature. The obtained results are compared with those of the most recent approach (Haddar et al., 2014), the Cplex solver (version 12.6) and the best exact method available in literature (Fujimoto & Yamada, 2006).

In this section, we present an algorithm for optimally solving the GKSP. The principle of the algorithm is based on enumerating all possible combinations between the capacity setting of the KP and that of the KSP. Let Zkp
                     (Ckp
                     ) (resp. Zksp
                     (Cksp
                     )) be the optimum objective value of the KP (resp. the KSP) for a given capacity Ckp
                      (resp. Cksp
                     ). According to P
                        gksp
                     , P
                        ksp
                      and P
                        kp
                      given in Section 1, an available objective value (a valid lower bound) for the GKSP, namely Lgksp
                     , can be written as follows:

                        
                           (1)
                           
                              
                                 
                                    L
                                    
                                       g
                                       k
                                       s
                                       p
                                    
                                 
                                 
                                    (
                                    
                                       C
                                       
                                          k
                                          p
                                       
                                    
                                    )
                                 
                                 =
                                 
                                    Z
                                    
                                       k
                                       p
                                    
                                 
                                 
                                    (
                                    
                                       C
                                       
                                          k
                                          p
                                       
                                    
                                    )
                                 
                                 +
                                 
                                    Z
                                    
                                       k
                                       s
                                       p
                                    
                                 
                                 
                                    (
                                    
                                       C
                                       
                                          g
                                          k
                                          s
                                          p
                                       
                                    
                                    −
                                    
                                       C
                                       
                                          k
                                          p
                                       
                                    
                                    )
                                 
                              
                           
                        
                     where Ckp
                      is a positive integer which denotes the capacity of the relevant 0–1 knapsack problem P
                        kp
                     . Note that, such a value has been already defined as a discontinuity point in Fujimoto and Yamada (2006). In the rest of this section, our study focuses on the use of evaluation and reduction strategies for finding a target value 
                        
                           C
                           
                              k
                              p
                           
                           ☆
                        
                      such that 
                        
                           
                              L
                              
                                 g
                                 k
                                 s
                                 p
                              
                           
                           
                              (
                              
                                 C
                                 
                                    k
                                    p
                                 
                                 ☆
                              
                              )
                           
                        
                      is equal to Zgksp
                     , where Zgksp
                      represents the optimum objective value of P
                        gksp
                     .

The development of upper bounds plays a central role in improving the performance of exact methods used to solving maximization problems, such as branch-and-bound based algorithms. The effectiveness of an upper bound is measured by two criteria: its objective value and the required computational effort. A tighter upper bound can usually induce faster convergence toward the optimum solution. Meanwhile, the runtime required to compute the upper bound must be acceptable. Therefore, in this section, we introduce an upper bound of P
                           gksp
                         based on using certain special properties of the GKSP.

An integer linear program for P
                           gksp
                        , denoted by LP
                           gksp
                        , can be formally written as follows:

                           
                              (2)
                              
                                 
                                    
                                       
                                          
                                             
                                                (
                                                
                                                   LP
                                                   
                                                      g
                                                      k
                                                      s
                                                      p
                                                   
                                                
                                                )
                                             
                                             
                                          
                                       
                                       
                                       
                                          
                                             
                                                
                                                   Z
                                                   
                                                      g
                                                      k
                                                      s
                                                      p
                                                   
                                                
                                                =
                                                max
                                                
                                                γ
                                                +
                                                
                                                   
                                                      p
                                                      0
                                                   
                                                   ·
                                                   
                                                      x
                                                      0
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             s.t.
                                             
                                             
                                             
                                             
                                                
                                                   w
                                                   0
                                                
                                                ·
                                                
                                                   x
                                                   0
                                                
                                             
                                             ≤
                                             
                                                C
                                                
                                                   k
                                                   p
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       ∑
                                       
                                          i
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          w
                                          i
                                       
                                       ·
                                       
                                          x
                                          i
                                       
                                    
                                    ≤
                                    
                                       C
                                       
                                          g
                                          k
                                          s
                                          p
                                       
                                    
                                    −
                                    
                                       C
                                       
                                          k
                                          p
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       
                                          p
                                          i
                                       
                                       ·
                                       
                                          x
                                          i
                                       
                                    
                                    ≥
                                    γ
                                    ,
                                    
                                    ∀
                                    
                                    i
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    n
                                 
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    
                                       C
                                       
                                          k
                                          p
                                       
                                    
                                    ∈
                                    N
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    γ
                                    ∈
                                    N
                                    ,
                                    
                                    
                                       x
                                       0
                                    
                                    ∈
                                    
                                       
                                          {
                                          0
                                          ,
                                          1
                                          }
                                       
                                       
                                          m
                                          0
                                       
                                    
                                    ,
                                    
                                    
                                       x
                                       i
                                    
                                    ∈
                                    
                                       
                                          {
                                          0
                                          ,
                                          1
                                          }
                                       
                                       
                                          m
                                          i
                                       
                                    
                                    ,
                                    
                                    ∀
                                    
                                    i
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    n
                                    .
                                 
                              
                           
                        In general, the proposed upper bound is based on solving the linear relaxation of LP
                           gksp
                        , where the integer constraints (6) associated with the decision variables are relaxed. Formally, the linear relaxation of LP
                           gksp
                        , denoted by LR
                           gksp
                        , can be written as follows:

                           
                              
                                 
                                    
                                       
                                          
                                             
                                                (
                                                
                                                   LR
                                                   
                                                      g
                                                      k
                                                      s
                                                      p
                                                   
                                                
                                                )
                                             
                                             
                                          
                                       
                                       
                                       
                                          
                                             
                                                U
                                                
                                                   g
                                                   k
                                                   s
                                                   p
                                                
                                             
                                             =
                                             max
                                             
                                             γ
                                             +
                                             
                                                
                                                   p
                                                   0
                                                
                                                ·
                                                
                                                   x
                                                   0
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             s.t.
                                             
                                             (
                                             2
                                             )
                                             ,
                                             (
                                             3
                                             )
                                             ,
                                             (
                                             4
                                             )
                                             ,
                                             (
                                             5
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             γ
                                             ∈
                                             R
                                             ,
                                             
                                             
                                                x
                                                0
                                             
                                             ∈
                                             
                                                
                                                   [
                                                   0
                                                   ,
                                                   1
                                                   ]
                                                
                                                
                                                   m
                                                   0
                                                
                                             
                                             ,
                                             
                                             
                                                x
                                                i
                                             
                                             ∈
                                             
                                                
                                                   [
                                                   0
                                                   ,
                                                   1
                                                   ]
                                                
                                                
                                                   m
                                                   i
                                                
                                             
                                             ,
                                             
                                             ∀
                                             
                                             i
                                             =
                                             1
                                             ,
                                             …
                                             ,
                                             n
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        Stated differently, γ, x0
                         and xi
                         are defined on real numbers. It is well known that a linear programming problem can be efficiently solved through the use of the interior point algorithm (resp. the simplex algorithm) of which the complexity is polynomial-time (resp. average-case polynomial-time) (see e.g., Wolsey, 1998). However, in order to further enrich the proposed exact method, we propose to solve LR
                           gksp
                         by using a special decomposition technique based on certain properties of LR
                           gksp
                        .

Let Ukp
                        (Ckp
                        ) (resp. Uksp
                        (Cksp
                        )) be an upper bound for the KP (resp. KSP) provided that its corresponding capacity is fixed to Ckp
                         (resp. Cksp
                        ). A valid upper bound for the GKSP, denoted by Ugksp
                        , can be computed as follows:

                           
                              (7)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                U
                                                
                                                   g
                                                   k
                                                   s
                                                   p
                                                
                                             
                                             =
                                             max
                                             
                                             f
                                             
                                                (
                                                
                                                   C
                                                   
                                                      k
                                                      p
                                                   
                                                
                                                )
                                             
                                             ,
                                             
                                             where
                                             
                                             f
                                             
                                                (
                                                
                                                   C
                                                   
                                                      k
                                                      p
                                                   
                                                
                                                )
                                             
                                             =
                                             
                                                U
                                                
                                                   k
                                                   p
                                                
                                             
                                             
                                                (
                                                
                                                   C
                                                   
                                                      k
                                                      p
                                                   
                                                
                                                )
                                             
                                             +
                                             
                                                U
                                                
                                                   k
                                                   s
                                                   p
                                                
                                             
                                             
                                                (
                                                
                                                   C
                                                   
                                                      g
                                                      k
                                                      s
                                                      p
                                                   
                                                
                                                −
                                                
                                                   C
                                                   
                                                      k
                                                      p
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             and
                                             
                                             
                                                C
                                                
                                                   k
                                                   p
                                                
                                             
                                             ∈
                                             
                                             N
                                             ∩
                                             
                                                [
                                                0
                                                ,
                                                
                                                   C
                                                   
                                                      g
                                                      k
                                                      s
                                                      p
                                                   
                                                
                                                ]
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        According to Eq. (7), one can observe that Ugksp
                         depends on the value of Ckp
                        . Therefore, the computation of an upper bound of the GKSP is equivalent to the determination of the value of Ckp
                         such that the objective value of f(Ckp
                        ) is maximum. In other words, there exists a positive integer value 
                           
                              C
                              
                                 k
                                 p
                              
                              ∘
                           
                         such that:

                           
                              
                                 
                                    
                                       U
                                       
                                          g
                                          k
                                          s
                                          p
                                       
                                    
                                    =
                                    f
                                    
                                       (
                                       
                                          C
                                          
                                             k
                                             p
                                          
                                          ∘
                                       
                                       )
                                    
                                    
                                    and
                                    
                                    f
                                    
                                       (
                                       
                                          C
                                          
                                             k
                                             p
                                          
                                          ∘
                                       
                                       )
                                    
                                    ≥
                                    f
                                    
                                       (
                                       
                                          C
                                          
                                             k
                                             p
                                          
                                       
                                       )
                                    
                                    ,
                                    
                                    ∀
                                    
                                    
                                       C
                                       
                                          k
                                          p
                                       
                                    
                                    ∈
                                    
                                    N
                                    ∩
                                    
                                       [
                                       0
                                       ,
                                       
                                          C
                                          
                                             g
                                             k
                                             s
                                             p
                                          
                                       
                                       ]
                                    
                                    .
                                 
                              
                           
                        
                     

As underlined in Fujimoto and Yamada (2006), the function 
                           
                              f
                              :
                              N
                              →
                              R
                           
                         is a concave and piecewise linear function. Hence, according to the property of the concavity, a dichotomous search algorithm (cf. Algorithm 1
                        ) is proposed for determining an upper bound of P
                           gksp
                         (i.e., Ugksp
                        ). For details, a formal proof can be found in the Appendix. Let [CL, CU
                        ] be a valid interval of Ckp
                        . Algorithm 1 aims at exploring [CL, CU
                        ] for finding an integer value CT
                         such that 
                           
                              
                                 U
                                 
                                    g
                                    k
                                    s
                                    p
                                 
                              
                              =
                              f
                              
                                 (
                                 
                                    C
                                    T
                                 
                                 )
                              
                           
                         and f(CT
                        ) ≥ f(C), for all 
                           
                              C
                              ∈
                              N
                           
                        . In the beginning, the initial search interval [CL, CU
                        ] is split into two parts: [CL, CM
                        ] and [CM, CU
                        ] (cf. steps 1 and 2). The main loop (steps 3–19) tries to improve CL
                         and CU
                         by checking if [CL, CM
                        ] or [CM, CU
                        ] contains the optimum value of LR
                           gksp
                        , i.e., an upper bound for P
                           gksp
                        . These tests are based on the fact that, since the function f(·) is concave, the value of the capacity related to the upper bound (
                           
                              C
                              
                                 k
                                 p
                              
                              ∘
                           
                        ) cannot appear simultaneously in both [CL, CM
                        ] and [CM, CU
                        ] unless 
                           
                              
                                 C
                                 
                                    k
                                    p
                                 
                                 ∘
                              
                              =
                              
                                 C
                                 M
                              
                           
                        . Finally, the algorithm stops whenever the cardinality of [CL, CU
                        ] equals to one, i.e., 
                           
                              
                                 C
                                 L
                              
                              =
                              
                                 C
                                 M
                              
                              =
                              
                                 C
                                 U
                              
                           
                        .

Regarding Eq. (1), for each discrete value of Ckp
                         (i.e. 
                           
                              
                                 C
                                 
                                    k
                                    p
                                 
                              
                              ∈
                              
                                 {
                                 0
                                 ,
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    C
                                    
                                       g
                                       k
                                       s
                                       p
                                    
                                 
                                 }
                              
                           
                        ), Zgksp
                         represents valid lower bound for the GKSP. In what follows, each discrete value of Ckp
                         is referenced to a discontinuity point. As a result, each discontinuity point is associated with a lower bound for P
                           gksp
                        . Finding an optimum solution for P
                           gksp
                         is equivalent to searching for the best value of Ckp
                        , denoted by 
                           
                              
                                 C
                                 
                                    k
                                    p
                                 
                                 ☆
                              
                              ,
                           
                         such that

                           
                              
                                 
                                    
                                       L
                                       
                                          g
                                          k
                                          s
                                          p
                                       
                                    
                                    
                                       (
                                       
                                          C
                                          
                                             k
                                             p
                                          
                                          ☆
                                       
                                       )
                                    
                                    ≥
                                    
                                       L
                                       
                                          g
                                          k
                                          s
                                          p
                                       
                                    
                                    
                                       (
                                       C
                                       )
                                    
                                    ,
                                    
                                    ∀
                                    
                                    C
                                    ∈
                                    
                                       [
                                       0
                                       ,
                                       
                                          C
                                          
                                             g
                                             k
                                             s
                                             p
                                          
                                       
                                       ]
                                    
                                    .
                                 
                              
                           
                        
                     

Let 
                           
                              C
                              
                                 k
                                 p
                              
                              ∘
                           
                         be the integer part of the capacity value related to the upper bound Ugksp
                         which represents the maximum objective value of LR
                           gksp
                        . Herein, 
                           
                              C
                              
                                 k
                                 p
                              
                              ∘
                           
                         is chosen as the discontinuity point used to computing the starting lower bound for the GKSP. Indeed, 
                           
                              C
                              
                                 k
                                 p
                              
                              ∘
                           
                         can be obtained by applying Algorithm 1. Once 
                           
                              C
                              
                                 k
                                 p
                              
                              ∘
                           
                         is determined, 
                           
                              
                                 L
                                 
                                    g
                                    k
                                    s
                                    p
                                 
                              
                              
                                 (
                                 
                                    C
                                    
                                       k
                                       p
                                    
                                    ∘
                                 
                                 )
                              
                           
                         can be computed by using a two-stage method. At the first stage, 
                           
                              
                                 Z
                                 
                                    k
                                    p
                                 
                              
                              
                                 (
                                 
                                    C
                                    
                                       k
                                       p
                                    
                                    ∘
                                 
                                 )
                              
                           
                         is computed by solving the knapsack problem P
                           kp
                         characterized by the capacity 
                           
                              C
                              
                                 k
                                 p
                              
                              ∘
                           
                        . In order to guarantee the optimality of the proposed algorithm, the minimum value of Ckp
                         (denoted by 
                           
                              C
                              
                                 k
                                 p
                              
                              ′
                           
                        ), which realizes the same objective value as 
                           
                              
                                 Z
                                 
                                    k
                                    p
                                 
                              
                              
                                 (
                                 
                                    C
                                    
                                       k
                                       p
                                    
                                    ∘
                                 
                                 )
                              
                              ,
                           
                         is determined and used in the following. At the second stage, 
                           
                              
                                 Z
                                 
                                    k
                                    s
                                    p
                                 
                              
                              
                                 (
                                 
                                    C
                                    
                                       g
                                       k
                                       s
                                       p
                                    
                                 
                                 −
                                 
                                    C
                                    
                                       k
                                       p
                                    
                                    ′
                                 
                                 )
                              
                           
                         is computed by solving P
                           ksp
                        , which is a knapsack sharing problem characterized by the capacity value 
                           
                              
                                 C
                                 
                                    g
                                    k
                                    s
                                    p
                                 
                              
                              −
                              
                                 C
                                 
                                    k
                                    p
                                 
                                 ′
                              
                           
                        . Finally, a lower bound for P
                           gksp
                         can be calculated as follows:

                           
                              
                                 
                                    
                                       L
                                       
                                          g
                                          k
                                          s
                                          p
                                       
                                    
                                    =
                                    
                                       Z
                                       
                                          k
                                          p
                                       
                                    
                                    
                                       (
                                       
                                          C
                                          
                                             k
                                             p
                                          
                                          ′
                                       
                                       )
                                    
                                    +
                                    
                                       Z
                                       
                                          k
                                          s
                                          p
                                       
                                    
                                    
                                       (
                                       
                                          C
                                          
                                             g
                                             k
                                             s
                                             p
                                          
                                       
                                       −
                                       
                                          C
                                          
                                             k
                                             p
                                          
                                          ′
                                       
                                       )
                                    
                                    .
                                 
                              
                           
                        Therefore, the optimum solution of P
                           gksp
                         can be obtained by using an enumerative method, such as the exact algorithm proposed by Fujimoto and Yamada (2006), where the search process visits all discontinuity points. In what follows, we show how reduction strategies can be introduced for the purpose of accelerating the enumeration procedure. The proposed reduction strategies serve to reduce the search interval (i.e., the set of available discontinuity points) without eliminating the optimum solution of P
                           gksp
                        .

The set of discontinuity points [0, Cgksp
                           ] can be considered as the largest search interval containing the optimum solution of P
                              gksp
                            (cf. Section 3.1). From the consideration that using a more strict search interval can make the search procedure converge more quickly toward the optimum solution, the following algorithm displays how the initial search interval [0, Cgksp
                           ] can be refined by using both lower and upper bounds of P
                              gksp
                           .

Let Lgksp
                            be a lower bound of P
                              gksp
                           , which can be obtained by using the method described in Section 3.2. Algorithm 2
                            is introduced for constructing a reduced interval [LCkp, UCkp
                           ], which contains fewer discontinuity points than the initial interval [0, Cgksp
                           ] but still conserves the optimum solution.

The reduction procedure is based on the concavity of the function 
                              
                                 f
                                 :
                                 N
                                 →
                                 R
                              
                            (see Section 3.1). Let Lgksp
                            be a valid lower bound of P
                              gksp
                           , then all integer values of Ckp
                           , such that f(Ckp
                           ) < Lgksp
                           , can be removed from the current search interval. Remark that, the quality of the output of Algorithm 2 depends strongly on the quality of provided lower bounds. A good starting lower bound can help Algorithm 2 to determine a tighten search interval. In order to make further improvement in the exact method, the following section discusses two strategies used to providing more refined search intervals than that provided by Algorithm 2 (i.e., the interval [LCkp, UCkp
                           ]).

For more clarity, we begin by defining primal and dual problems of the KP and the KSP. The aim of the primal problem P
                              kp
                           (C) (resp. P
                              ksp
                           (C)) is to determine a solution for the KP (resp. KSP), such that it maximizes the total profit while satisfies the capacity constraint. The goal of the dual problems D
                              kp
                           (V) and D
                              ksp
                           (V) is to determine the minimum resources required to achieve a fixed profit V. Formally, the primal and dual problems can be described as follows:

                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   (
                                                   
                                                      P
                                                      
                                                         k
                                                         p
                                                      
                                                   
                                                   
                                                      (
                                                      C
                                                      )
                                                   
                                                   )
                                                
                                                
                                             
                                          
                                          
                                          
                                             
                                                max
                                                
                                                
                                                   p
                                                   0
                                                
                                                ·
                                                
                                                   x
                                                   0
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                s.t.
                                                
                                                
                                                   w
                                                   0
                                                
                                                ·
                                                
                                                   x
                                                   0
                                                
                                                ≤
                                                C
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                
                                                   x
                                                   0
                                                
                                                ∈
                                                
                                                   
                                                      {
                                                      0
                                                      ,
                                                      1
                                                      }
                                                   
                                                   
                                                      m
                                                      0
                                                   
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   (
                                                   
                                                      D
                                                      
                                                         k
                                                         p
                                                      
                                                   
                                                   
                                                      (
                                                      V
                                                      )
                                                   
                                                   )
                                                
                                                
                                             
                                          
                                          
                                          
                                             
                                                min
                                                
                                                
                                                   w
                                                   0
                                                
                                                ·
                                                
                                                   x
                                                   0
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                s.t.
                                                
                                                
                                                   p
                                                   0
                                                
                                                ·
                                                
                                                   x
                                                   0
                                                
                                                ≥
                                                V
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                
                                                   x
                                                   0
                                                
                                                ∈
                                                
                                                   
                                                      {
                                                      0
                                                      ,
                                                      1
                                                      }
                                                   
                                                   
                                                      m
                                                      0
                                                   
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           and

                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   (
                                                   
                                                      P
                                                      
                                                         k
                                                         s
                                                         p
                                                      
                                                   
                                                   
                                                      (
                                                      C
                                                      )
                                                   
                                                   )
                                                
                                                
                                             
                                          
                                          
                                          
                                             
                                                
                                                   max
                                                   
                                                      min
                                                      
                                                         1
                                                         ≤
                                                         i
                                                         ≤
                                                         n
                                                      
                                                   
                                                   
                                                   
                                                      {
                                                      
                                                         p
                                                         i
                                                      
                                                      ·
                                                      
                                                         x
                                                         i
                                                      
                                                      }
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                s.t.
                                                
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                                
                                                   w
                                                   i
                                                
                                                ·
                                                
                                                   x
                                                   i
                                                
                                                ≤
                                                C
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                
                                                   x
                                                   i
                                                
                                                ∈
                                                
                                                   
                                                      {
                                                      0
                                                      ,
                                                      1
                                                      }
                                                   
                                                   
                                                      m
                                                      i
                                                   
                                                
                                                ,
                                                
                                                ∀
                                                
                                                i
                                                =
                                                1
                                                ,
                                                …
                                                ,
                                                n
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   (
                                                   
                                                      D
                                                      
                                                         k
                                                         s
                                                         p
                                                      
                                                   
                                                   
                                                      (
                                                      V
                                                      )
                                                   
                                                   )
                                                
                                                
                                             
                                          
                                          
                                          
                                             
                                                min
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   n
                                                
                                                
                                                   w
                                                   i
                                                
                                                ·
                                                
                                                   x
                                                   i
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                s.t.
                                                
                                                
                                                   p
                                                   i
                                                
                                                ·
                                                
                                                   x
                                                   i
                                                
                                                ≥
                                                V
                                                ,
                                                
                                                ∀
                                                
                                                i
                                                =
                                                1
                                                ,
                                                …
                                                ,
                                                n
                                                ,
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                
                                                   x
                                                   i
                                                
                                                ∈
                                                
                                                   
                                                      {
                                                      0
                                                      ,
                                                      1
                                                      }
                                                   
                                                   
                                                      m
                                                      i
                                                   
                                                
                                                ,
                                                
                                                ∀
                                                
                                                i
                                                =
                                                1
                                                ,
                                                …
                                                ,
                                                n
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Recall that, the exploration of a discontinuity point is based on solving a series of P
                              kp
                            and P
                              ksp
                           . These problems are NP-hard and the exact resolution of P
                              ksp
                            is generally much more time-consuming than that of P
                              kp
                           . In order to curtail the search process, we introduce some reduction strategies based on the upper and lower bounds for P
                              kp
                            and P
                              ksp
                           . The aim is to make use of both lower and upper bounds to evaluate the current discontinuity point without completely solving P
                              ksp
                           . This is implemented by applying an evaluation procedure (denoted by Evaluate) before solving P
                              ksp
                           . The procedure Evaluate serves to determine whether the best lower bound can be improved by exactly solving the current P
                              ksp
                           .

Let CT be the capacity characterizing P
                              kp
                           , VCT
                            be the corresponding optimum objective value, P
                              ksp
                           (Cres
                           ) be an instance of the KSP with a capacity of Cres
                            (i.e., 
                              
                                 
                                    C
                                    
                                       r
                                       e
                                       s
                                    
                                 
                                 =
                                 
                                    C
                                    
                                       g
                                       k
                                       s
                                       p
                                    
                                 
                                 −
                                 C
                                 T
                              
                           ) and 
                              
                                 L
                                 
                                    g
                                    k
                                    s
                                    p
                                 
                                 
                                    b
                                    e
                                    s
                                    t
                                 
                              
                            be the best lower bound of P
                              gksp
                            found up to now. Then, the procedure Evaluate decides whether or not to exactly solve P
                              ksp
                           (Cres
                           ) by checking the following conditions:

                              
                                 C1.
                                 Suppose that 
                                       
                                          
                                             U
                                             
                                                k
                                                s
                                                p
                                             
                                          
                                          +
                                          
                                             V
                                             
                                                C
                                                T
                                             
                                          
                                          ≤
                                          
                                             L
                                             
                                                g
                                                k
                                                s
                                                p
                                             
                                             
                                                b
                                                e
                                                s
                                                t
                                             
                                          
                                       
                                     is verified, where Uksp
                                     represents P
                                       ksp
                                    (Cres
                                    )’s upper bound.

Suppose that C1 is not verified and LCksp
                                     ≥ Cres
                                    , where LCksp
                                     represents D
                                       ksp
                                    (
                                       
                                          
                                             L
                                             
                                                g
                                                k
                                                s
                                                p
                                             
                                             
                                                b
                                                e
                                                s
                                                t
                                             
                                          
                                          −
                                          
                                             V
                                             
                                                C
                                                T
                                             
                                          
                                          +
                                          1
                                       
                                    )’s lower bound.

Suppose that C2 is not verified and Cksp
                                     ≥ Cres
                                    , where Cksp
                                     represents D
                                       ksp
                                    (
                                       
                                          
                                             L
                                             
                                                g
                                                k
                                                s
                                                p
                                             
                                             
                                                b
                                                e
                                                s
                                                t
                                             
                                          
                                          −
                                          
                                             V
                                             
                                                C
                                                T
                                             
                                          
                                          +
                                          1
                                       
                                    )’s optimum objective value.

For the condition C1, the upper bound of P
                              ksp
                           (Cres
                           ) (denoted by Uksp
                           ) is first computed. Then, the procedure checks if the following inequality is satisfied: 
                              
                                 
                                    U
                                    
                                       k
                                       s
                                       p
                                    
                                 
                                 +
                                 
                                    V
                                    
                                       C
                                       T
                                    
                                 
                                 ≤
                                 
                                    L
                                    
                                       g
                                       k
                                       s
                                       p
                                    
                                    
                                       b
                                       e
                                       s
                                       t
                                    
                                 
                                 ,
                              
                            where VCT
                            is the optimum value of P
                              kp
                           (CT). If the previous inequality holds, we can conclude that 
                              
                                 L
                                 
                                    g
                                    k
                                    s
                                    p
                                 
                                 
                                    b
                                    e
                                    s
                                    t
                                 
                              
                            cannot be improved by solving P
                              ksp
                           (Cres
                           ). Otherwise, the evaluation procedure Evaluate continues to check the remaining conditions. Stated differently, the condition C2 checks if the available resources are sufficient enough for achieving the smallest target profit V′ such that, 
                              
                                 
                                    V
                                    
                                       C
                                       T
                                    
                                 
                                 +
                                 
                                    V
                                    ′
                                 
                              
                            is strictly greater than 
                              
                                 L
                                 
                                    g
                                    k
                                    s
                                    p
                                 
                                 
                                    b
                                    e
                                    s
                                    t
                                 
                              
                           . It is evident that, V′ can be set equal to 
                              
                                 
                                    L
                                    
                                       g
                                       k
                                       s
                                       p
                                    
                                    
                                       b
                                       e
                                       s
                                       t
                                    
                                 
                                 −
                                 
                                    V
                                    
                                       C
                                       T
                                    
                                 
                                 +
                                 1
                              
                           . According to the values of V′ and Cres
                           , the condition C2 checks if the lower bound of D
                              ksp
                           (V′) (i.e., LCksp
                           ) is greater than Cres
                           . Similarly, the condition C3 is taken into account whenever C2 is not satisfied. In this case, if the optimum value of D
                              ksp
                           (V′) is greater than Cres
                            (i.e., Cksp
                            ≥ Cres
                           ), it signifies that the best lower bound cannot be improved with the current available resources. Finally, whenever none of these conditions is respected, the reduction procedures (see Algorithms 3
                            and 4
                           ) solve P
                              ksp
                           (Cres
                           ) to optimality. Otherwise, the procedures avoid solving P
                              ksp
                           (Cres
                           ) and move toward the next discontinuity point.

For the rest of the paper, the evaluation procedure is denoted by Evaluate(P
                              ksp
                           (Cres
                           ), 
                              
                                 L
                                 
                                    g
                                    k
                                    s
                                    p
                                 
                                 
                                    b
                                    e
                                    s
                                    t
                                 
                              
                           ), where it returns a boolean value “false” when either C1, C2 or C3 is verified; it returns “true” otherwise. Based on the evaluation procedure Evaluate(P
                              ksp
                           (Cres
                           ), 
                              
                                 L
                                 
                                    g
                                    k
                                    s
                                    p
                                 
                                 
                                    b
                                    e
                                    s
                                    t
                                 
                              
                           ), two reduction procedures are considered as follows. Herein, the initial interval [LCkp, UCkp
                           ] is divided into two complementary intervals:

                              
                                 (i)
                                 the first one is denoted by [LCkp, MLkp
                                    [ which corresponds to the left part of [LCkp, UCkp
                                    ] and

the second one is ]MUkp, UCkp
                                    ] which corresponds to the right part of [LCkp, UCkp
                                    ].

As a result, [MLkp, MUkp
                           ] is composed of discontinuity points which can not be used to improve the best lower bound found up to now. In what follows, the set of discontinuity points [LCkp, MLkp
                           [ is referenced as the left-interval as well as ]MUkp, UCkp
                           ] denotes the right-interval.

The goal of Algorithm 3 is to reduce the left-interval [LCkp, MLkp
                           [ without excluding the optimum solution of P
                              gksp
                           . It returns a valid lower bound of P
                              gksp
                            when the related P
                              ksp
                            is exactly solved. Step 1 solves P
                              kp
                           (CT) to optimality, where the capacity CT is fixed to 
                              
                                 M
                                 
                                    L
                                    
                                       k
                                       p
                                    
                                 
                                 −
                                 1
                              
                            and the provided optimum objective value is denoted by VCT
                           . Step 2 solves the dual problem D
                              kp
                           (VCT
                           ) for determining the minimum resources related to VCT
                           . At step 3, the procedure Evaluate decides whether or not to solve an instance of the KSP with the capacity 
                              
                                 (
                                 
                                    C
                                    
                                       g
                                       k
                                       s
                                       p
                                    
                                 
                                 −
                                 C
                                 T
                                 )
                              
                           . On the one hand, if the procedure Evaluate returns true, then P
                              ksp
                           (
                              
                                 
                                    C
                                    
                                       g
                                       k
                                       s
                                       p
                                    
                                 
                                 −
                                 C
                                 T
                              
                           ) is solved to optimality and the algorithm returns a new reduced left-interval [LCkp, CT[ and a valid lower bound of P
                              gksp
                           . On the other hand, only the reduced interval [LCkp, CT[ is provided by the algorithm.

By applying similar techniques, the right-interval can be reduced by using Algorithm 4. The procedure starts by setting VMU
                            equal to Zkp
                           (MUkp
                           ) which represents the maximum total profit of P
                              kp
                           (MUkp
                           ). Then, the minimum resources CT for achieving the target profit 
                              
                                 
                                    V
                                    
                                       M
                                       U
                                    
                                 
                                 +
                                 1
                              
                            is determined by exactly solving the dual problem D
                              kp
                           (
                              
                                 
                                    V
                                    
                                       M
                                       U
                                    
                                 
                                 +
                                 1
                              
                           ) (cf. step 1). Step 2 solves P
                              kp
                           (CT) to optimality and sets VCT
                            equal to the corresponding optimum objective value. After calling the evaluation procedure Evaluate, P
                              ksp
                           (
                              
                                 
                                    C
                                    
                                       g
                                       k
                                       s
                                       p
                                    
                                 
                                 −
                                 C
                                 T
                              
                           ) is solved to optimality whenever the procedure returns the value true. In this case, the algorithm returns a reduced right-interval and a valid lower bound of P
                              gksp
                            (cf. step 6). Otherwise, the algorithm returns only a reduced right-interval without solving P
                              ksp
                           (
                              
                                 
                                    C
                                    
                                       g
                                       k
                                       s
                                       p
                                    
                                 
                                 −
                                 C
                                 T
                              
                           ).

From Algorithm 3 (resp. Algorithm 4), we can observe that the proposed procedure serves to determine a reduced left-interval [LCkp, CT[ (resp. right-interval ]CT, UCkp
                           ]), where CT ≥ LCkp
                            (resp. CT ≤ UCkp
                           ). When the equality holds, it implies that the considered search interval is reduced to the empty set. Then, it can be considered as a closed interval. Therefore, if both left-interval and right-interval are closed, the search procedure stops and returns the optimum solution of P
                              gksp
                           .

By combining the previous algorithms (i.e., Algorithms from 1 to 4), Algorithm 5
                         summarizes the main steps of the proposed exact method for solving the GKSP. It consists in finding the optimum solution of the GKSP by visiting a series of discontinuity points, where each discontinuity point is associated with an instance of the KP and an instance of the KSP. In order to explore the whole set of discontinuity points, the search procedure divides the initial interval of discontinuity points into two sub-intervals: the left-interval and the right-interval. For each sub-interval, we apply a specialized reduction strategy to explore the associated discontinuity points. Furthermore, both upper and lower bounds are used to speed up the convergence for the exploration of the search interval. Finally, the algorithm exits with the optimum solution whenever one of the following conditions is satisfied:

                           
                              1.
                              The best lower bound obtained up to now coincides with the upper bound or;

Both left-interval and right-interval are reduced to the empty set.


                        Algorithm 5 starts by setting the initial search interval as [0, Cgksp
                        ] (cf. step 1). Step 2 determines the initial upper bound of P
                           gksp
                        , denoted by Ugksp
                        . Step 3 considers the capacity CT (i.e., the value of the capacity related to Ugksp
                        ) as the first discontinuity point to explore. According to CT, step 4 computes a lower bound Lgksp
                         of P
                           gksp
                         by successively determining the optimum solutions of P
                           kp
                        (CT) and P
                           
                              
                                 
                                 
                                    k
                                    s
                                    p
                                 
                              
                              
                                 (
                                 
                                    C
                                    
                                       g
                                       k
                                       s
                                       p
                                    
                                 
                                 −
                                 C
                                 T
                                 )
                              
                           
                        . At step 5,
                        
                        
                        
                        
                        
                         the lower bound Lgksp
                         is used to reduce the initial search interval to [LCkp, UCkp
                        ]. Step 6 divides the current interval [LCkp, UCkp
                        ] into two parts: the left-interval [LCkp, MLkp
                        [ and the right-interval ]MUkp, UCkp
                        ]. The main loop (cf. steps from 7 to 20) stops when the optimality of P
                           gksp
                         has been proven. Otherwise, according to the quality of 
                           
                              U
                              
                                 g
                                 k
                                 s
                                 p
                              
                              L
                           
                         and 
                           
                              
                                 U
                                 
                                    g
                                    k
                                    s
                                    p
                                 
                                 U
                              
                              ,
                           
                         which respectively represents the upper bounds over the left-interval and the right-interval, the algorithm explores alternatively [LCkp, MLkp
                        [ or ]MUkp, UCkp
                        ] (cf. step 8). At step 11 (resp. step 16), Algorithm 1 is called for computing a new upper bound over the reduced left-interval (resp. right-interval). Then, new upper bounds are used to check if either the left-interval or the right-interval can be closed (cf. steps 12 and 17). Step 19 updates the global upper bound Ugksp
                         according to uppers bounds obtained over the two sub-intervals. Finally, the algorithm exits with the optimal solution of P
                           gksp
                        .

The performance of the proposed Exact Method (denoted by EM) was evaluated on two sets of benchmark instances from literature. EM was first evaluated on the benchmark instances proposed by Haddar et al. (2014).
                        1
                     
                     
                        1
                        The considered instances and the provided results are available at http://boukthir-haddar.sitego.fr/InstancesGKSP.html.
                      The results provided by EM were compared with those obtained by the
                     
                     
                     
                     
                     
                      Quantum Particle Swarm Optimization (QPSO) and the integer linear programming optimizer Cplex v.12.6 (denoted by Cplex). For a more in depth comparative study, the obtained results were compared with those provided by Fujimoto and Yamada’s (2006) exact method (denoted by FY)
                        2
                     
                     
                        2
                        The code source was provided by Prof. T. Yamada, the corresponding author of the paper Fujimoto and Yamada (2006). The used instances are available at https://drive.google.com/file/d/0B1ZUjmLapcPZcTN4N3J1RGZyY00/view?usp=sharing
                        
                      and Cplex. For the parametrization of Cplex, we specify three parameters and all others are set as default. First, the parameter IloCplex::Threads is set equal to 1, where Cplex proceeds sequentially in a single thread. Second, the parameter IloCplex::EpGap is set equal to 0.0, where Cplex provides the optimum solution but not the 
                        
                           E
                           p
                           G
                           a
                           p
                           −
                        
                     optimal solution. Third, the parameter IloCplex::TiLim, which is used to limit the global runtime, is fixed to 3600 cpu seconds. Whenever the Cplex exceeds the fixed runtime, the best solution produced by the solver is conserved (denoted by Best). For all discontinuity points (cf. Section 3), the corresponding KP and KSP were solved by applying Pisinger et al.’s (1999) exact method and Hifi and Wu’s (2014) exact method respectively. All algorithms were coded in C++ and executed on an Intel Xeon with 3.06 gigahertz.

The first set of benchmark instances were proposed by Haddar et al., which contains 432 problems of various sizes and densities. For these instances, the number of items ntotal
                         (i.e., 
                           
                              
                                 n
                                 
                                    t
                                    o
                                    t
                                    a
                                    l
                                 
                              
                              =
                              
                                 ∑
                                 
                                    i
                                    =
                                    0
                                 
                                 n
                              
                              
                                 m
                                 i
                              
                           
                        ) varies in the discrete interval {500, 1000, 2500, 5000, 7500, 10000}. The number of classes n is set equal to 2, 4, 8 and 16, respectively. The capacity of the GKSP Cgksp
                         is set equal to 20 × ntotal
                        . The ratio of the number of common items to ntotal
                         is denoted by 
                           
                              
                                 (
                                 1
                                 /
                                 λ
                                 )
                              
                              =
                              
                                 (
                                 
                                    m
                                    0
                                 
                                 /
                                 
                                    n
                                    
                                       t
                                       o
                                       t
                                       a
                                       l
                                    
                                 
                                 )
                              
                              ,
                           
                         where 
                           
                              λ
                              =
                              2
                              ,
                              
                              4
                              ,
                              
                              8
                           
                         and 16. For instance, in the case where 
                           
                              
                                 n
                                 
                                    t
                                    o
                                    t
                                    a
                                    l
                                 
                              
                              =
                              500
                           
                         and 
                           
                              λ
                              =
                              4
                              ,
                           
                         the instance contains 125 common items. The number of private items mi
                         is uniformly distributed over the interval 
                           
                              [
                              k
                              −
                              
                                 k
                                 10
                              
                              ,
                              k
                              +
                              
                                 k
                                 10
                              
                              ]
                           
                         with 
                           
                              k
                              =
                              
                                 (
                                 n
                                 −
                                 
                                    m
                                    i
                                 
                                 )
                              
                              /
                              
                                 n
                                 
                                    t
                                    o
                                    t
                                    a
                                    l
                                 
                              
                              ,
                           
                        
                        
                           
                              ∀
                              
                              i
                              =
                              1
                              ,
                              …
                              ,
                              n
                           
                        . According to the level of the correlation between items, the weights and profits of items are generated as follows.

                           
                              •
                              For the Uncorrelated case (denoted by UN), either wj
                                  or pj
                                  is set to a random value uniformly taken from [1, 100].

For the Strongly Correlated case (denoted by SC), wj
                                  is uniformly taken from [1, 100] whereas 
                                    
                                       
                                          p
                                          j
                                       
                                       =
                                       
                                          w
                                          j
                                       
                                       +
                                       10
                                    
                                 .

In order to identify the first set of instances generated from the different parameter settings, each group of instances is abbreviated by G-t-λ-n, where G indicates the level of correlation (i.e., UN and SC); t denotes the total number of items; λ measures the ratio of the distribution of common items in whole set of items; n corresponds to the number of classes of private items. In addition, for each group, three random instances are considered.

The second set of benchmark instances were proposed by Fujimoto and Yamada’s (2006). For these instances, the number of items ntotal
                         varies in the discrete interval 
                           
                              {
                              
                                 2
                                 9
                              
                              ,
                              
                                 2
                                 10
                              
                              ,
                              …
                              ,
                              
                                 2
                                 15
                              
                              }
                           
                        . The number of classes n is set equal to 2, 4 and 8, respectively. The capacity of the GKSP Cgksp
                         is set equal to 200 × ntotal
                        . The parameter, which is used to control the ratio of the distribution of common items, λ is successively set as 
                           
                              λ
                              =
                              2
                              ,
                              
                              4
                           
                         and 8. Furthermore, the number of private items is set equal to 
                           
                              
                                 m
                                 i
                              
                              =
                              
                                 (
                                 
                                    n
                                    
                                       t
                                       o
                                       t
                                       a
                                       l
                                    
                                 
                                 −
                                 
                                    m
                                    0
                                 
                                 )
                              
                              /
                              n
                              ,
                           
                        
                        
                           
                              ∀
                              
                              i
                              =
                              1
                              ,
                              …
                              ,
                              n
                           
                        . According to the level of the correlation, the weights and profits of items are generated as follows.

                           
                              •
                              For the Uncorrelated case (denoted by U), either wj
                                  or pj
                                  is set to a random value uniformly taken from [1, 1000].

For the Weakly correlated case (denoted by W), wj
                                  is uniformly taken from [1, 1000] whereas pj
                                  is uniformly taken from 
                                    
                                       [
                                       
                                          w
                                          j
                                       
                                       ,
                                       
                                          w
                                          j
                                       
                                       +
                                       200
                                       ]
                                    
                                 .

For the Strongly correlated case (denoted by S), wj
                                  is uniformly taken from [1, 1000] whereas 
                                    
                                       
                                          p
                                          j
                                       
                                       =
                                       
                                          w
                                          j
                                       
                                       +
                                       100
                                    
                                 .

In order to identify the second set of instances, each group of instances is abbreviated by G-k-λ-n, where G indicates the level of correlation (i.e., U, W and S), k denotes the total number of items (i.e., 
                           
                              
                                 n
                                 
                                    t
                                    o
                                    t
                                    a
                                    l
                                 
                              
                              =
                              
                                 2
                                 k
                              
                           
                        ), λ is the ratio of the distribution between common items and private items and n corresponds to the number of classes of private items. For the second set of benchmark instances, ten random instances are considered for each parameter setting.

For the rest of the paper, the following notations are used:

                           
                              •
                              Column Group displays the label of groups. For example, SC-t-2-5 represents the strongly correlated instances with 
                                    
                                       λ
                                       =
                                       2
                                    
                                  and 
                                    
                                       n
                                       =
                                       5
                                    
                                  of all sizes, i.e., for all 
                                    
                                       t
                                       =
                                       500
                                       ,
                                    
                                  1000, 2500, 5000, 7500 and 10000 (cf. Table 2). In addition, U-9-λ-n represents the uncorrelated instances with 29 items and n classes of private items for all values of λ, i.e., for all 
                                    
                                       λ
                                       =
                                       2
                                       ,
                                    
                                  4 and 8 (cf. Table 6).

Column N
                                       opt
                                    
                                  displays, for the considered group, the total number of optimum solutions provided by the used algorithm.

Column N
                                       ksp
                                    
                                  (resp. N
                                       kp
                                    
                                 ) displays the average number of internal instances of the KSP (resp. KP) solved by the considered algorithm over all instances of the considered group.

Column cpu shows the average runtime used by the considered algorithm (i.e., measured in cpu seconds) for the corresponding group.

Column UB (resp. Opt and Best) shows the average of upper bounds (resp. optimum objective function values and the best lower bounds) provided by the considered algorithm over all instances of the considered group.

Note that, in the rest of this section, the contents of all the tables (i.e., Tables 1–8) show average values over all instances belonging to a specific group. For details, the readers can refer to the appendix, where each table shows the average values over all instances for each group, i.e., 3 random instances for the first set of benchmark problems and 10 for the second.

This section is devoted to the analysis of the upper bound provided by Algorithm 1. Table 1 displays the values of upper bounds and the required computational effort (measured in cpu seconds) for the simplex algorithm of Cplex and Algorithm 1. As a comparative reference, we select the simplex algorithm of Cplex, because it is considered as one of the most efficient linear programming solver. According to the present state of the problem, it applies the primal simplex method, the dual simplex method, the barrier method, and, in some cases, the network simplex method to find the optimum solution.

From Table 1, one can observe the following. Algorithm 1 generally outperforms Cplex on the first set of benchmark instances. For the second set, Algorithm 1 has a good behavior in the uncorrelated case and the weakly correlated case. In the strongly correlated case of the second set, the reports returned by Cplex shows that its presolver and aggregator can significantly reduce the size of instances of the GKSP. Therefore, Algorithm 1 matches as well as Cplex in the strongly correlated case of the second set (i.e., the group S). For instance, both Cplex and Algorithm 1 require, on average, 0.36 cpu seconds to find the upper bounds for the group S-15-λ-n. In general case, Algorithm 1 performs better than Cplex. Because Algorithm 1 requires an average of 0.07 seconds to compute the upper bound over all instances whereas Cplex needs 0.33 seconds.


                        Tables 2–3 display the main results obtained on the benchmark instances from Haddar et al. (2014) by using Cplex, QPSO*, QPSO
                           +
                         and EM, respectively. QPSO* (resp. QPSO
                           +
                        ) indicates the first (resp. second) version of the quantum particle swarm optimization proposed by Haddar et al. (2014). In most cases, QPSO
                           +
                         is able to provide good solutions with a more reasonable computational effort than Cplex. On the first set of benchmark instances, EM exhibits better performance when comparing with Cplex, QPSO* and QPSO
                           +
                        . Indeed, the average execution time required by EM for solving the GKSP to optimality over all considered instances is 0.04 cpu seconds in the strongly correlated case and 0.08 in the uncorrelated case.

As shown in Fujimoto and Yamada (2006), in the strongly correlated case, FY failed to find optimum solutions whenever the size of instances becomes large. For this reason, Table 4 shows only a comparison between EM and FY on small-scale instances (i.e., the instances containing 29 and 210 items). Recall that FY solves an instance of the KP through the use of the dynamical programming proposed by Horowitz and Sahni (1974). The last is able to efficiently solve an instance of the KP with simultaneously providing its optimum profit and its optimum resources. Hence, in order to move from a discontinuity point to another one, FY needs to solve only one instance of the KP. Furthermore, FY applies several reduction strategies based on the property of the dynamical programming to enhance its performance. In contrast, EM applies Pisinger et al.’s (1999) hybrid algorithm to solve an instance of the KP. The hybrid algorithm combines a dynamical programming-based method with a branch-and-bound-based method. Computational results show that, in most of cases, the hybrid algorithm dominates all other algorithms from literature. However, the hybrid algorithm provides only the maximum profit but not the corresponding minimum resources. As a result, EM must solve two instances of the KP for moving from a discontinuity point to another one. The first one is used for determining the maximum profit and the second one for computing the corresponding minimum resources. Therefore, in theory, EM needs to solve twice the number of instances of the KP as FY. By applying the strategies described in Section 3.2, EM succeeds in reducing the number of instances of the KP that need to be solved. As shown in Table 4 (cf. column N
                           kp
                        ), one can observe that EM is able to solve less number of knapsack problems than FY in several cases. Besides, FY fails to prove the optimality of solutions for one problem in group S-9-2-8 and for two problems in group S-10-4-8 within 3600 cpu seconds.

Considering that FY fails to exactly solve large-scale instances in the strongly correlated case, the results obtained by EM were only compared with those provided by Cplex. Table 5 displays the number of optimum solutions found (cf. columns N
                           opt
                        ) and the associated runtime (cf. columns cpu) required by Cplex and EM for the strongly correlated instances. Within 3600 seconds, Cplex fails to prove the optimality of solutions in about half of all strongly correlated cases (i.e., 44.29 over 90 on average). In contrast, EM requires an average of 14.15 seconds to solve all problems to optimality.

In this section, we examine the performance of the three exact algorithms EM, FY and Cplex in uncorrelated and weakly correlated cases. From Tables 6 and 7, we can observe what follows:
                           
                              1.
                              All of three exact algorithms are able to find the optimum solutions for all instances belonging to the group U-9-λ-n (i.e., all uncorrelated instances that contains 29 items).

Both FY and EM dominate Cplex because they succeed in solving all uncorrelated and weakly correlated problems to optimality.

EM performs better than FY, especially for solving the large-scale problems. On average, EM requires 2.31 (resp. 0.53) seconds to exactly solve all uncorrelated (resp. weakly correlated) problems, whereas FY needs 114.56 (resp. 23.02) seconds.

@&#CONCLUSION@&#

In this paper, we proposed an exact algorithm for solving the generalized knapsack sharing problem. It applies a decomposition technique to reformulate the original problem as a series of 0–1 knapsack problems and knapsack sharing problems. The proposed exact algorithm is based on the enumeration of all possible combinations between the knapsack problems and the knapsack sharing problems. In order to reinforce the performance of the algorithm, several evaluation and reduction strategies were designed. The performance of the proposed algorithm was tested on two sets of benchmark instances from literature. The obtained results by the proposed method were compared with those provided by Cplex and the best algorithms available in literature. Computational results showed that the proposed exact algorithm generally performs better than all considered algorithms.

@&#ACKNOWLEDGMENTS@&#

Our heartiest thanks to Professor Takeo Yamada for sharing the source code used in their previous scientific paper on the GKSP. We would like also to thank the anonymous reviewers for their relevant and rich remarks that allowed us to improve the presentation of our results.


                     
                        Theorem 1
                        
                           
                              Algorithm 1
                            
                           provides a valid upper bound for the GKSP.
                        

The principle of Algorithm 1 is based on the concavity of f(·) (cf. Eq. (7)). As shown in Fujimoto and Yamada (2006), f(·) is a concave and piecewise linear function defined on [CL, CU
                           ] with 
                              
                                 
                                    C
                                    L
                                 
                                 =
                                 0
                              
                            and 
                              
                                 
                                    C
                                    U
                                 
                                 =
                                 
                                    C
                                    
                                       g
                                       k
                                       s
                                       p
                                    
                                 
                                 ,
                              
                            where Cgksp
                            is the capacity of the GKSP. Let CM
                            be an integer value such that CL
                            ≤ CM
                            ≤ CU
                           . Therefore, by using the concavity of f(·), the capacity value (
                              
                                 C
                                 
                                    k
                                    p
                                 
                                 ∘
                              
                           ) related to the upper bound of the GKSP is included either in [CL, CM
                           ] or in [CM, CU
                           ] unless 
                              
                                 
                                    C
                                    
                                       k
                                       p
                                    
                                    ∘
                                 
                                 =
                                 
                                    C
                                    M
                                 
                              
                           . Let C
                           
                              T1 (resp. C
                           
                              T2) be an integer value belonging to [CL, CM
                           ] (resp. [CM, CU
                           ]). With respecting the concavity of f(·), the following properties hold:

                              
                                 
                                    P1.
                                 
                                 if f(C
                                    
                                       T1) > f(CM
                                    ), 
                                       
                                          C
                                          
                                             k
                                             p
                                          
                                          ∘
                                       
                                     is not included in [CM, CU
                                    ] and the value of CU
                                     can be replaced by CM
                                    ; otherwise, 
                                       
                                          C
                                          
                                             k
                                             p
                                          
                                          ∘
                                       
                                     is not included in [CL, C
                                    
                                       T1] and the value of CL
                                     can be replaced by C
                                    
                                       T1;

if f(C
                                    
                                       T2) > f(CM
                                    ), 
                                       
                                          C
                                          
                                             k
                                             p
                                          
                                          ∘
                                       
                                     is not included in [CL, CM
                                    ] and the value of CL
                                     can be replaced by CM
                                    ; otherwise, 
                                       
                                          C
                                          
                                             k
                                             p
                                          
                                          ∘
                                       
                                     is not included in [C
                                    
                                       T2, CU
                                    ] and the value of CU
                                     can be replaced by C
                                    
                                       T2.

Hence, by using alternatively the properties P1 or P2, one can successively reduce the interval [CL, CU
                           ] without excluding 
                              
                                 
                                    C
                                    
                                       k
                                       p
                                    
                                    ∘
                                 
                                 ,
                              
                            where 
                              
                                 f
                                 (
                                 
                                    C
                                    
                                       k
                                       p
                                    
                                    ∘
                                 
                              
                           ) represents the upper bound of the GKSP. This process stops when the cardinality of [CL, CU
                           ] equals to 1, i.e., 
                              
                                 
                                    C
                                    L
                                 
                                 =
                                 
                                    C
                                    M
                                 
                                 =
                                 
                                    C
                                    U
                                 
                              
                           .□

@&#REFERENCES@&#

