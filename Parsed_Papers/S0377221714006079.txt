@&#MAIN-TITLE@&#Analysing the effects of solution space connectivity with an effective metaheuristic for the course timetabling problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We give a mathematical treatment of the NP-hard post enrolment-based course timetabling problem.


                        
                        
                           
                           We present a powerful two-stage metaheuristic-based algorithm to approximately solve it.


                        
                        
                           
                           We focus particularly on the issue of solution space connectivity.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

University timetabling

Metaheuristics

Solution space connectivity

@&#ABSTRACT@&#


               
               
                  This paper provides a mathematical treatment of the NP-hard post enrolment-based course timetabling problem and presents a powerful two-stage metaheuristic-based algorithm to approximately solve it. We focus particularly on the issue of solution space connectivity and demonstrate that when this is increased via specialised neighbourhood operators, the quality of solutions achieved is generally enhanced. Across a well-known suite of benchmark problem instances, our proposed algorithm is shown to produce results that are superior to all other methods appearing in the literature; however, we also make note of those instances where our algorithm struggles in comparison to others and offer evidence as to why.
               
            

@&#INTRODUCTION@&#

Timetables are organisational structures that can be found in many areas of human activity including sports (Kendall, Knust, Ribeiro, & Urrutia, 2010), entertainment (Eliashberg et al., 2009), transport (Caprara, Fischetti, & Toth, 2002), industry (Blöchliger, 2004), and education (Lewis, 2008). In the context of higher education institutions, a timetable can be thought of as an assignment of events (such as lectures, tutorials, or exams) to a finite number of rooms and timeslots in accordance with a set of constraints, some of which will be mandatory, and others that may be optional (Corne, Ross, & Fang, 1995). According to McCollum et al. (2010), the problem of constructing such timetables can be divided into two categories: exam timetabling problems and course timetabling problems. It is also suggested that course timetabling problems can be further divided into two sub-categories: “post enrolment-based course timetabling”, where the constraints of the problem are specified by student enrolment data, and “curriculum-based course timetabling”, where constraints are based on curricula specified by the university. Müller and Rudova (2012) have also shown that these sub-categories are closely related, demonstrating how instances of the latter can be transformed into those of the former in many cases.

The field of university timetabling has seen many solution approaches proposed over the past few decades, including methods based on constructive heuristics, mathematical programming, branch and bound, and metaheuristics (see Carter and Laporte, 1996; Carter and Laporte, 1998; Lewis, 2008; Schaerf, 1999 for surveys of these). A near universal constraint in problems considered in the literature is the “event-conflict” constraint, which specifies that certain pairs of events cannot be assigned to the same timeslot (e.g. there may be some students who need to attend both events). The presence of this constraint allows parallels to be drawn between timetabling and the well-known NP-hard problem of graph colouring, and it is certainly the case that heuristics derived from graph colouring are often used in timetabling algorithms (Burke & Newall, 1999; Carter, Laporte, & Lee, 1996; Thompson & Dowsland, 1998).
                        1
                        Timetabling problems can be transformed into graph colouring problems by considering the events as the vertices, the timeslots as the colours, with edges being added between any pair of events deemed to be conflicting.
                     
                     
                        1
                      Beyond this constraint however, timetabling problem formulations have also tended to vary quite widely in the literature because each institution usually has their own specific needs and protocols (hence constraints) that need adhering to. While making the problem area very rich, one noted drawback has been the lack of opportunity for accurate comparison of algorithms over the years (Lewis, 2008).

In the past decade, this situation has been mitigated to a certain extent due to the organisation of a series of timetabling competitions and the release of publicly available problem instances (http://www.idsia.ch/Files/ttcomp2002; http://www.cs.qub.ac.uk/itc2007/; http://www.utwente.nl/ctit/hstt/itc2011/welcome/). In 2007, for example, the Second International Timetabling Competition (ITC2007) was organised by a group of timetabling researchers from different European Universities, which considered the three types of timetabling problems mentioned above: exam timetabling, post enrolment-based course timetabling, and curriculum-based timetabling. The competition operated by releasing problem instances into the public domain, with entrants then designing algorithms to try and solve these. Entrants’ algorithms were then compared under strict time limits according to specific evaluation criteria. Further details can be found in McCollum et al. (2010) and on the competition website (http://www.cs.qub.ac.uk/itc2007/).

In this paper we give a mathematical description of the post enrolment-based course timetabling problem used for ITC2007. This particular formulation models the real-world situation where students are given a choice of lectures that they wish to attend, with the timetable then being constructed according to these choices. We present a two-stage algorithm for this problem, focussing particularly on issues surrounding solution space connectivity. We show that when this is increased via specialised neighbourhood operators combined with sensible design decisions, state of the art performance across a range of problem instances can be achieved. In Section 3, we present a review of the most noteworthy and/or recent high-performance algorithms for this problem, before going on to describe our method and its operators in Sections 4 and 5. The final results of our algorithm are given in Section 6, with a discussion and conclusions then being presented in Section 7.

As mentioned, the post enrolment-based course timetabling problem was introduced for use in the Second International Timetabling Competition, run in 2007 (http://www.cs.qub.ac.uk/itc2007/; Lewis, Paechter, & McCollum, 2007). The problem involves seven “hard” constraints (described below) whose satisfaction is mandatory, and three “soft” constraints, whose satisfaction is desirable, but not essential. The problem involves assigning a set of events to 45 timeslots (5days, with 9 timeslots per day) according to these constraints.

The hard constraints for the problem are as follows. First, for each event there is a set of students who are enrolled to attend; thus events should be assigned to timeslots such that no student is required to attend more than one event in any one timeslot. Next, each event also requires a set of room features (e.g. a certain number of seats, specialist teaching equipment, etc.), which will only be provided by certain rooms; thus each event needs to be assigned to a suitable room that exhibits the room features that it requires. The double booking of rooms is also disallowed. Hard constraints are also imposed stating that some events cannot be taught in certain timeslots. Finally, precedence constraints – stating that some events need to be scheduled before or after others – are also stipulated.

More formally, a problem instance comprises a set of events 
                        
                           e
                           =
                           {
                           
                              
                                 e
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 e
                              
                              
                                 n
                              
                           
                           }
                        
                     , a set of timeslots 
                        
                           t
                           =
                           {
                           
                              
                                 t
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 t
                              
                              
                                 |
                                 t
                                 |
                              
                           
                           }
                        
                      (where 
                        
                           |
                           t
                           |
                           =
                           45
                        
                     ), a set of students 
                        
                           s
                           =
                           {
                           
                              
                                 s
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 s
                              
                              
                                 m
                              
                           
                           }
                        
                     , a set of rooms 
                        
                           r
                           =
                           {
                           
                              
                                 r
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 r
                              
                              
                                 |
                                 r
                                 |
                              
                           
                           }
                        
                     , and a set of room features 
                        
                           f
                           =
                           {
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 f
                              
                              
                                 |
                                 f
                                 |
                              
                           
                           }
                        
                     . Each room 
                        
                           
                              
                                 r
                              
                              
                                 i
                              
                           
                           ∈
                           r
                        
                      is also allocated a capacity 
                        
                           c
                           (
                           
                              
                                 r
                              
                              
                                 i
                              
                           
                           )
                        
                      reflecting the number of seats it contains. The relationships between these sets are defined by five matrices:
                        
                           •
                           An attends matrix 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          m
                                          ×
                                          n
                                       
                                       
                                          (
                                          1
                                          )
                                       
                                    
                                 
                              , where 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                       
                                          (
                                          1
                                          )
                                       
                                    
                                    =
                                    1
                                 
                               if student 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          i
                                       
                                    
                                 
                               is due to attend event 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          j
                                       
                                    
                                    ;
                                    0
                                 
                               otherwise.

A room features matrix 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          |
                                          r
                                          |
                                          ×
                                          |
                                          f
                                          |
                                       
                                       
                                          (
                                          2
                                          )
                                       
                                    
                                 
                              , where 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                       
                                          (
                                          2
                                          )
                                       
                                    
                                    =
                                    1
                                 
                               if room 
                                 
                                    
                                       
                                          r
                                       
                                       
                                          i
                                       
                                    
                                 
                               has feature 
                                 
                                    
                                       
                                          f
                                       
                                       
                                          j
                                       
                                    
                                    ;
                                    0
                                 
                               otherwise.

An event features matrix 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          n
                                          ×
                                          |
                                          f
                                          |
                                       
                                       
                                          (
                                          3
                                          )
                                       
                                    
                                 
                              , where 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                       
                                          (
                                          3
                                          )
                                       
                                    
                                    =
                                    1
                                 
                               if event 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          i
                                       
                                    
                                 
                               requires feature 
                                 
                                    
                                       
                                          f
                                       
                                       
                                          j
                                       
                                    
                                    ;
                                    0
                                 
                               otherwise.

An event availability matrix 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          n
                                          ×
                                          |
                                          t
                                          |
                                       
                                       
                                          (
                                          4
                                          )
                                       
                                    
                                 
                              , where 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                       
                                          (
                                          4
                                          )
                                       
                                    
                                    =
                                    1
                                 
                               if event 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          i
                                       
                                    
                                 
                               can be assigned to timeslot 
                                 
                                    
                                       
                                          t
                                       
                                       
                                          j
                                       
                                    
                                    ;
                                    0
                                 
                               otherwise.

A precedence matrix 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          n
                                          ×
                                          n
                                       
                                       
                                          (
                                          5
                                          )
                                       
                                    
                                 
                              , where 
                                 
                                    
                                       
                                          P
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                       
                                          (
                                          5
                                          )
                                       
                                    
                                    =
                                    1
                                 
                               if event 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          i
                                       
                                    
                                 
                               should be scheduled to an earlier timeslot than event 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          j
                                       
                                    
                                    ;
                                    
                                       
                                          P
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                       
                                          (
                                          5
                                          )
                                       
                                    
                                    =
                                    -
                                    1
                                 
                               if event 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          i
                                       
                                    
                                 
                               should be scheduled to a later timeslot than event 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          j
                                       
                                    
                                 
                              ; and 0 otherwise.

For the precedence matrix above, two conditions are necessary for the relationships to be consistent: (a) 
                        
                           
                              
                                 P
                              
                              
                                 i
                                 ,
                                 j
                              
                              
                                 (
                                 5
                                 )
                              
                           
                           =
                           1
                           ⇔
                           
                              
                                 P
                              
                              
                                 j
                                 ,
                                 i
                              
                              
                                 (
                                 5
                                 )
                              
                           
                           =
                           -
                           1
                        
                     , and (b) 
                        
                           
                              
                                 P
                              
                              
                                 i
                                 ,
                                 j
                              
                              
                                 (
                                 5
                                 )
                              
                           
                           =
                           0
                           ⇔
                           
                              
                                 P
                              
                              
                                 j
                                 ,
                                 i
                              
                              
                                 (
                                 5
                                 )
                              
                           
                           =
                           0
                        
                     . We can also observe the transitivity of this relationship:
                        
                           (1)
                           
                              
                                 
                                    
                                       ∃
                                       
                                          
                                             e
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             j
                                          
                                       
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             k
                                          
                                       
                                       ∈
                                       e
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               P
                                                            
                                                            
                                                               i
                                                               ,
                                                               j
                                                            
                                                            
                                                               (
                                                               5
                                                               )
                                                            
                                                         
                                                         =
                                                         1
                                                         ∧
                                                         
                                                            
                                                               P
                                                            
                                                            
                                                               j
                                                               ,
                                                               k
                                                            
                                                            
                                                               (
                                                               5
                                                               )
                                                            
                                                         
                                                         =
                                                         1
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              ⇒
                              
                                 
                                    P
                                 
                                 
                                    i
                                    ,
                                    k
                                 
                                 
                                    (
                                    5
                                    )
                                 
                              
                              =
                              1
                           
                        
                     As noted by Lewis (2012), in some of the competition problem instances this transitivity is not fully expressed; however, observing it enables further 1’s and 
                        
                           -
                           1
                        
                     ’s to be added to 
                        
                           
                              
                                 P
                              
                              
                                 (
                                 5
                                 )
                              
                           
                        
                      during preprocessing, allowing the relationships to be more explicitly stated.

Given the above five matrices, in our approach two further matrices are calculated, which allow fast detection of hard constraint violations during execution of the algorithm (Kostuch, 2005; Cambazard, Hebrard, O’Sullivan, & Papadopoulos, 2012).
                        
                           •
                           A room suitability matrix 
                                 
                                    
                                       
                                          R
                                       
                                       
                                          n
                                          ×
                                          |
                                          r
                                          |
                                       
                                    
                                 
                              , where:
                                 
                                    (2)
                                    
                                       
                                          
                                             R
                                          
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                       =
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         1
                                                      
                                                      
                                                         if
                                                         
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           ∑
                                                                        
                                                                        
                                                                           k
                                                                           =
                                                                           1
                                                                        
                                                                        
                                                                           m
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        P
                                                                     
                                                                     
                                                                        k
                                                                        ,
                                                                        i
                                                                     
                                                                     
                                                                        (
                                                                        1
                                                                        )
                                                                     
                                                                  
                                                                  ⩽
                                                                  c
                                                                  (
                                                                  
                                                                     
                                                                        r
                                                                     
                                                                     
                                                                        j
                                                                     
                                                                  
                                                                  )
                                                               
                                                            
                                                         
                                                         ∧
                                                         
                                                            
                                                               
                                                                  ∄
                                                                  
                                                                  
                                                                     
                                                                        f
                                                                     
                                                                     
                                                                        k
                                                                     
                                                                  
                                                                  ∈
                                                                  f
                                                                  |
                                                                  
                                                                     
                                                                        
                                                                           
                                                                              
                                                                                 P
                                                                              
                                                                              
                                                                                 i
                                                                                 ,
                                                                                 k
                                                                              
                                                                              
                                                                                 (
                                                                                 3
                                                                                 )
                                                                              
                                                                           
                                                                           =
                                                                           1
                                                                           ∧
                                                                           
                                                                              
                                                                                 P
                                                                              
                                                                              
                                                                                 j
                                                                                 ,
                                                                                 k
                                                                              
                                                                              
                                                                                 (
                                                                                 2
                                                                                 )
                                                                              
                                                                           
                                                                           =
                                                                           0
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         0
                                                      
                                                      
                                                         otherwise.
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

A conflicts matrix 
                                 
                                    
                                       
                                          C
                                       
                                       
                                          n
                                          ×
                                          n
                                       
                                    
                                 
                              , where:
                                 
                                    (3)
                                    
                                       
                                          
                                             C
                                          
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                       =
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         1
                                                      
                                                      
                                                         if
                                                         
                                                            
                                                               
                                                                  ∃
                                                                  
                                                                     
                                                                        s
                                                                     
                                                                     
                                                                        k
                                                                     
                                                                  
                                                                  ∈
                                                                  s
                                                                  |
                                                                  
                                                                     
                                                                        
                                                                           
                                                                              
                                                                                 P
                                                                              
                                                                              
                                                                                 k
                                                                                 ,
                                                                                 i
                                                                              
                                                                              
                                                                                 (
                                                                                 1
                                                                                 )
                                                                              
                                                                           
                                                                           =
                                                                           1
                                                                           ∧
                                                                           
                                                                              
                                                                                 P
                                                                              
                                                                              
                                                                                 k
                                                                                 ,
                                                                                 j
                                                                              
                                                                              
                                                                                 (
                                                                                 1
                                                                                 )
                                                                              
                                                                           
                                                                           =
                                                                           1
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      
                                                      
                                                         ∨
                                                         
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           ∃
                                                                           
                                                                              
                                                                                 r
                                                                              
                                                                              
                                                                                 k
                                                                              
                                                                           
                                                                           ∈
                                                                           r
                                                                           |
                                                                           
                                                                              
                                                                                 
                                                                                    
                                                                                       
                                                                                          R
                                                                                       
                                                                                       
                                                                                          i
                                                                                          ,
                                                                                          k
                                                                                       
                                                                                    
                                                                                    =
                                                                                    1
                                                                                    ∧
                                                                                    
                                                                                       
                                                                                          R
                                                                                       
                                                                                       
                                                                                          j
                                                                                          ,
                                                                                          k
                                                                                       
                                                                                    
                                                                                    =
                                                                                    1
                                                                                 
                                                                              
                                                                           
                                                                        
                                                                     
                                                                  
                                                                  ∧
                                                                  
                                                                     
                                                                        
                                                                           
                                                                              
                                                                                 
                                                                                    ∑
                                                                                 
                                                                                 
                                                                                    k
                                                                                    =
                                                                                    1
                                                                                 
                                                                                 
                                                                                    |
                                                                                    r
                                                                                    |
                                                                                 
                                                                              
                                                                           
                                                                           
                                                                              
                                                                                 R
                                                                              
                                                                              
                                                                                 i
                                                                                 ,
                                                                                 k
                                                                              
                                                                           
                                                                           =
                                                                           1
                                                                        
                                                                     
                                                                  
                                                                  ∧
                                                                  
                                                                     
                                                                        
                                                                           
                                                                              
                                                                                 
                                                                                    ∑
                                                                                 
                                                                                 
                                                                                    k
                                                                                    =
                                                                                    1
                                                                                 
                                                                                 
                                                                                    |
                                                                                    r
                                                                                    |
                                                                                 
                                                                              
                                                                           
                                                                           
                                                                              
                                                                                 R
                                                                              
                                                                              
                                                                                 j
                                                                                 ,
                                                                                 k
                                                                              
                                                                           
                                                                           =
                                                                           1
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      
                                                      
                                                         ∨
                                                         
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        P
                                                                     
                                                                     
                                                                        i
                                                                        ,
                                                                        j
                                                                     
                                                                     
                                                                        (
                                                                        5
                                                                        )
                                                                     
                                                                  
                                                                  
                                                                  ≠
                                                                  
                                                                  0
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      
                                                      
                                                         ∨
                                                         
                                                         
                                                            
                                                               
                                                                  ∄
                                                                  
                                                                     
                                                                        t
                                                                     
                                                                     
                                                                        k
                                                                     
                                                                  
                                                                  ∈
                                                                  t
                                                                  |
                                                                  
                                                                     
                                                                        
                                                                           
                                                                              
                                                                                 P
                                                                              
                                                                              
                                                                                 i
                                                                                 ,
                                                                                 k
                                                                              
                                                                              
                                                                                 (
                                                                                 4
                                                                                 )
                                                                              
                                                                           
                                                                           =
                                                                           1
                                                                           ∧
                                                                           
                                                                              
                                                                                 P
                                                                              
                                                                              
                                                                                 j
                                                                                 ,
                                                                                 k
                                                                              
                                                                              
                                                                                 (
                                                                                 4
                                                                                 )
                                                                              
                                                                           
                                                                           =
                                                                           1
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         0
                                                      
                                                      
                                                         otherwise.
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              The matrix 
                                 
                                    R
                                 
                               specifies the rooms that are suitable for each event (i.e. rooms that are large enough for all attending students and that have all the required features). 
                                 
                                    C
                                 
                              , meanwhile, is a symmetrical matrix (
                                 
                                    
                                       
                                          C
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    =
                                    
                                       
                                          C
                                       
                                       
                                          j
                                          ,
                                          i
                                       
                                    
                                 
                              ) that specifies pairs of events that should not be assigned to the same timeslot (i.e. those that conflict). According to (3) this will be the case if two events 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          i
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          e
                                       
                                       
                                          j
                                       
                                    
                                 
                               share a common student, require the same individual room, are subject to a precedence relation, or have mutually exclusive subsets of timeslots for which they are available.

Having defined the input to this problem, a solution is represented by an ordered set of sets 
                        
                           S
                           =
                           
                              
                                 
                                    
                                       
                                          S
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          S
                                       
                                       
                                          |
                                          t
                                          |
                                       
                                    
                                 
                              
                           
                        
                      subject to the satisfaction of the following hard constraints.
                        
                           (4)
                           
                              
                                 
                                    
                                       ⋃
                                    
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       |
                                       t
                                       |
                                    
                                 
                              
                              
                                 
                                    S
                                 
                                 
                                    i
                                 
                              
                              ⊆
                              e
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    S
                                 
                                 
                                    i
                                 
                              
                              ∩
                              
                                 
                                    S
                                 
                                 
                                    j
                                 
                              
                              =
                              ∅
                              
                              (
                              1
                              ⩽
                              i
                              
                              ≠
                              
                              j
                              ⩽
                              |
                              t
                              |
                              )
                           
                        
                     
                     
                        
                           (6)
                           
                              ∀
                              
                                 
                                    e
                                 
                                 
                                    j
                                 
                              
                              ,
                              
                                 
                                    e
                                 
                                 
                                    k
                                 
                              
                              ∈
                              
                                 
                                    S
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                              
                                 
                                    C
                                 
                                 
                                    j
                                    ,
                                    k
                                 
                              
                              =
                              0
                              
                              (
                              1
                              ⩽
                              i
                              ⩽
                              |
                              t
                              |
                              )
                           
                        
                     
                     
                        
                           (7)
                           
                              ∀
                              
                                 
                                    e
                                 
                                 
                                    j
                                 
                              
                              ∈
                              
                                 
                                    S
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                              
                                 
                                    P
                                 
                                 
                                    j
                                    ,
                                    i
                                 
                                 
                                    (
                                    4
                                    )
                                 
                              
                              =
                              1
                              
                              (
                              1
                              ⩽
                              i
                              ⩽
                              |
                              t
                              |
                              )
                           
                        
                     
                     
                        
                           (8)
                           
                              ∀
                              
                                 
                                    e
                                 
                                 
                                    j
                                 
                              
                              ∈
                              
                                 
                                    S
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                              
                                 
                                    e
                                 
                                 
                                    k
                                 
                              
                              ∈
                              
                                 
                                    S
                                 
                                 
                                    l
                                    <
                                    i
                                 
                              
                              ,
                              
                              
                                 
                                    P
                                 
                                 
                                    j
                                    ,
                                    k
                                 
                                 
                                    (
                                    5
                                    )
                                 
                              
                              
                              ≠
                              
                              1
                              
                              (
                              1
                              ⩽
                              i
                              ⩽
                              |
                              t
                              |
                              )
                           
                        
                     
                     
                        
                           (9)
                           
                              ∀
                              
                                 
                                    e
                                 
                                 
                                    j
                                 
                              
                              ∈
                              
                                 
                                    S
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                              
                                 
                                    e
                                 
                                 
                                    k
                                 
                              
                              ∈
                              
                                 
                                    S
                                 
                                 
                                    l
                                    >
                                    i
                                 
                              
                              ,
                              
                              
                                 
                                    P
                                 
                                 
                                    j
                                    ,
                                    k
                                 
                                 
                                    (
                                    5
                                    )
                                 
                              
                              
                              ≠
                              
                              -
                              1
                              
                              (
                              1
                              ⩽
                              i
                              ⩽
                              |
                              t
                              |
                              )
                           
                        
                     
                     
                        
                           (10)
                           
                              
                                 
                                    S
                                 
                                 
                                    i
                                 
                              
                              ∈
                              M
                              
                              (
                              1
                              ⩽
                              i
                              ⩽
                              |
                              t
                              |
                              )
                           
                        
                     
                  

Constraints (4) and (5) state that 
                        
                           S
                        
                      should partition the event set e (or a subset of e) into an ordered set of sets, labeled 
                        
                           
                              
                                 S
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 S
                              
                              
                                 |
                                 t
                                 |
                              
                           
                        
                     . Each set 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                           ∈
                           S
                        
                      contains the events that are assigned to timeslot 
                        
                           
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                      in the timetable. Constraint (6) stipulates that no pair of conflicting events should be assigned to the same set 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                           ∈
                           S
                        
                     , while Constraint (7) states that each event should be assigned to a set 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                           ∈
                           S
                        
                      whose corresponding timeslot 
                        
                           
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                      is deemed available according to matrix 
                        
                           
                              
                                 P
                              
                              
                                 (
                                 4
                                 )
                              
                           
                        
                     . Constraints (8) and (9) impose the precedence requirements of the problem.

Finally, Constraint (10) is concerned with ensuring that the events assigned to a set 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                           ∈
                           S
                        
                      can each be assigned to a suitable room from the room set r. To achieve this it is necessary to solve a maximum bipartite matching problem (Rossi-Doria et al., 2002). Specifically, let 
                        
                           G
                           =
                           (
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                           ,
                           r
                           ,
                           E
                           )
                        
                      be a bipartite graph with vertex sets 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                        
                      and r, and an edge set defined: 
                        
                           E
                           =
                           {
                           {
                           
                              
                                 e
                              
                              
                                 j
                              
                           
                           ∈
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 r
                              
                              
                                 k
                              
                           
                           ∈
                           r
                           }
                           |
                           
                              
                                 R
                              
                              
                                 j
                                 ,
                                 k
                              
                           
                           =
                           1
                           }
                        
                     . Given G, the set 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                        
                      is a member of 
                        
                           M
                        
                      if and only if there exists a maximum bipartite matching of G of size 
                        
                           2
                           |
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                           |
                        
                     , in which case the room constraints for this timeslot will have been met. In practice, such matching problems can be solved via various polynomially bounded algorithms such as the augmenting path, Hungarian, or auction algorithms (Bertsekas, 1992).

In the competition’s interpretation of this problem a solution 
                        
                           S
                        
                      is considered valid if and only if all Constraints (4)–(10) are satisfied. The quality of a valid solution is then gauged by a Distance To Feasibility (DTF) measure, calculated as the sum of the sizes of all events not contained in the solution:
                        
                           (11)
                           
                              DTF
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             i
                                          
                                       
                                       ∈
                                       
                                          
                                             S
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       m
                                    
                                 
                              
                              
                                 
                                    P
                                 
                                 
                                    i
                                    ,
                                    j
                                 
                                 
                                    (
                                    1
                                    )
                                 
                              
                           
                        
                     where 
                        
                           
                              
                                 S
                              
                              
                                 ′
                              
                           
                           =
                           e
                           ⧹
                           (
                           
                              
                                 ⋃
                              
                              
                                 i
                                 =
                                 1
                              
                              
                                 |
                                 t
                                 |
                              
                           
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                           )
                        
                     . If the solution 
                        
                           S
                        
                      is valid and has a DTF of zero (implying 
                        
                           
                              
                                 ⋃
                              
                              
                                 i
                                 =
                                 1
                              
                              
                                 |
                                 t
                                 |
                              
                           
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                           =
                           e
                        
                      and 
                        
                           
                              
                                 S
                              
                              
                                 ′
                              
                           
                           =
                           ∅
                        
                     ) then it is considered feasible since all of the events have been feasibly timetabled. The set of feasible solutions is thus a subset of the set of valid solutions.

As mentioned, in addition to finding a solution that obeys the hard constraints, three soft constraints are also considered in this problem.
                           
                              
                                 SC1
                              
                              Students should not be required to attend an event in the last timeslot of each day (i.e. timeslots 9, 18, 27, 36, or 45).

Students should not have to attend events in three or more successive timeslots occurring in the same day.

Students should not be required to attend just one event in a day.

Note that each of these soft constraints is slightly different in nature: violations of SC1 can be checked with no knowledge of the rest of the timetable; violations of SC2 can be checked when constructing a timetable; and violations of SC3 can only be checked when all events have been assigned to the timetable. The extent to which these constraints are violated is measured by a Soft Constraints Cost (SCC), which can be calculated using two further matrices: 
                           
                              
                                 
                                    X
                                 
                                 
                                    m
                                    ×
                                    |
                                    t
                                    |
                                 
                              
                           
                        , which tells us the timeslots for which each student is attending an event, and 
                           
                              
                                 
                                    Y
                                 
                                 
                                    m
                                    ×
                                    5
                                 
                              
                           
                        , which specifies whether or not a student is required to attend just one event in each of the five days.
                           
                              (12)
                              
                                 
                                    
                                       X
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   1
                                                
                                                
                                                   if
                                                   
                                                   ∃
                                                   
                                                      
                                                         e
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                   ∈
                                                   
                                                      
                                                         S
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                   |
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         i
                                                         ,
                                                         k
                                                      
                                                      
                                                         (
                                                         1
                                                         )
                                                      
                                                   
                                                   =
                                                   1
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   otherwise.
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                    
                                       Y
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   1
                                                
                                                
                                                   if
                                                   
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            k
                                                            =
                                                            1
                                                         
                                                         
                                                            9
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         i
                                                         ,
                                                         9
                                                         (
                                                         j
                                                         -
                                                         1
                                                         )
                                                         +
                                                         k
                                                      
                                                   
                                                   =
                                                   1
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   otherwise.
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        Using these matrices, the SCC is calculated as follows:
                           
                              (14)
                              
                                 SCC
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          m
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          5
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         i
                                                         ,
                                                         9
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            k
                                                            =
                                                            1
                                                         
                                                         
                                                            7
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            ∏
                                                         
                                                         
                                                            l
                                                            =
                                                            0
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         i
                                                         ,
                                                         9
                                                         (
                                                         j
                                                         -
                                                         1
                                                         )
                                                         +
                                                         k
                                                         +
                                                         l
                                                      
                                                   
                                                
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   
                                                      
                                                         Y
                                                      
                                                      
                                                         i
                                                         ,
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        Here the three terms summed in the outer parentheses of Eq. (14) define the number of violations of SC1, SC2, and SC3 (respectively) for each student on each day of the timetable.

From the above descriptions, we can prove that the task of finding a feasible solution to the post enrolment-based course timetabling problem is NP-hard. Let 
                           
                              
                                 
                                    C
                                 
                                 
                                    n
                                    ×
                                    n
                                 
                              
                           
                         be our symmetric conflicts matrix as defined above, filled arbitrarily. In addition, let the following conditions hold:
                           
                              (15)
                              
                                 |
                                 r
                                 |
                                 ⩾
                                 n
                              
                           
                        
                        
                           
                              (16)
                              
                                 
                                    
                                       R
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 
                                    
                                       e
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 e
                                 ,
                                 
                                 
                                    
                                       r
                                    
                                    
                                       j
                                    
                                 
                                 ∈
                                 r
                              
                           
                        
                        
                           
                              (17)
                              
                                 
                                    
                                       P
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                    
                                       (
                                       4
                                       )
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 
                                    
                                       e
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 e
                                 ,
                                 
                                 
                                    
                                       t
                                    
                                    
                                       j
                                    
                                 
                                 ∈
                                 t
                              
                           
                        
                        
                           
                              (18)
                              
                                 
                                    
                                       P
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                    
                                       (
                                       5
                                       )
                                    
                                 
                                 =
                                 0
                                 
                                 ∀
                                 
                                    
                                       e
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       j
                                    
                                 
                                 ∈
                                 e
                              
                           
                        Here, there is an excess number of rooms which are suitable for all events (15) and (16), there are no event availability constraints (17), and no precedence constraints (18). In this special case we are therefore only concerned with satisfying Constraints (4)–(6) while minimising the DTF, making the problem equivalent to the NP-hard partial graph k-colouring problem (Blöchliger & Zufferey, 2008) (where 
                           
                              k
                              =
                              |
                              t
                              |
                           
                        ). Thus the post enrolment-based course timetabling problem generalises an existing NP-hard problem.

From a different perspective, Cambazard et al. (2012) have also shown that, in the absence of all hard constraints (6)–(10) and soft constraints SC1 and SC2, the problem of satisfying SC3 (i.e. minimising the number of occurrences of students sitting a single event in a day) is equivalent to the NP-hard set covering problem.

@&#EVALUATION@&#

From the above descriptions, we see that a timetable’s quality is described by two values, the distance to feasibility (DTF) and the soft constraint cost (SCC). According to the competition criteria, when comparing solutions the one with the lowest DTF is deemed the best timetable, reflecting the increased importance of the hard constraints over the soft constraints. However, when two or more solutions’ DTF are equal, the winner is deemed the solution among these that has the lowest SCC.

Currently there are 24 problem instances available for this problem, all of which are known to feature at least one perfect solution (that is, a solution with DTF=0 and SCC =0). For comparative purposes, a benchmark timing program is also available (http://www.cs.qub.ac.uk/itc2007/) which allocates a strict time limit for each machine that it is executed on (based on its hardware and operating system). This allows entrants to use approximately the same amount of computational effort when testing their implementations, allowing more accurate comparisons.

The post enrolment-based timetabling problem considered here is a generalisation of the problem model used in the first international timetabling competition run in 2003. The difference is that the latter problem does not feature constraints (7)–(9) in its formulation. The first study into the original version of this problem was carried out by Rossi-Doria et al. (2002) who used it to compare five different metaheuristic algorithms, namely evolutionary algorithms, simulated annealing, iterated local search, ant colony optimisation, and tabu search. Two interesting conclusions were derived from their work:
                        
                           •
                           “The performance of a metaheuristic with respect to satisfying hard constraints and soft constraints may be different”;

“Our results suggest that a hybrid algorithm consisting of at least two phases, one for taking care of feasibility, the other taking care of minimising the number of soft constraint violations [without re-violating any of the hard constraints in the process], is a promising direction.” (Rossi-Doria et al., 2002)

These conclusions have shown to be quite salient in the past decade, with the winning algorithms of both the 2003 competition and the post enrollment-based track of the 2007 competition using this suggested two-stage approach. The winning algorithm for the 2003 competition was due to Kostuch (2005), who used graph colouring heuristics to gain feasibility, and then simulated annealing to try to satisfy the soft constraints. Similarly, the winning method in the 2007 competition was designed by Cambazard, Hebrard, O’Sullivan, and Papadopoulos (2008), who used tabu search together with an intensification procedure for finding feasibility, and then also made use of simulated annealing for satisfying the soft constraints.

In the years following these competitions, a number of papers have been published that have equalled or improved upon the results of the 2007 competition. Cambazard et al. (2012) themselves have shown how the results of their two stage competition entry can be improved by relaxing Constraint (10) such that a timeslot 
                        
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                        
                      is considered feasible if 
                        
                           |
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                           |
                           <
                           |
                           r
                           |
                        
                     . The rationale for this relaxation is that it will “increase the solution density of the underlying search space”, though a repair operator is then also needed to make sure that the timeslots satisfy Constraint (10) at the end of execution. Cambazard et al. have also examined constraint programming-based approaches and a large neighbourhood search (LNS) scheme, and find that their best results can be found when using simulated annealing together with the LNS operator for reinvigorating the search from time to time. Lewis (2012) has also used a simulated annealing approach for satisfying the soft constraints of the problem and notes that, across the instances, there is a weak-to-moderate positive correlation between the connectivity of the search space and the proportion by which the SCC can be reduced by his algorithm.

Other successful algorithms for this problem have attempted to reduce violations of hard and soft constraints simultaneously during optimisation. Ceschia, Di Gaspero, and Schaerf (2012), for example, treat this problem as a single objective optimisation problem in which the space of valid and invalid solutions is explored. Specifically, they allow violations of Constraints (6), (8), and (9) within a solution, and use the number of students effected by such violations, together with the DTF to form an infeasibility measure. This is then multiplied by a weighting coefficient W and added to the SCC to form the objective function. Simulated annealing is then used to optimise this objective function and, surprisingly, after extensive parameter tuning 
                        
                           W
                           =
                           1
                        
                      is found to provide their best results. Nothegger, Mayer, Chwatal, and Raidl (2012) have also attempted to optimise the DTF and SCC simultaneously, making use of ant colony optimisation to explore the space of valid solutions. Here the DTF and SCC are used to update the algorithm’s pheromone matrices so that favourable assignments of events to rooms and timeslots will occur with higher probability in later iterations of the algorithm. Nothegger et al. also show that the results of their algorithm can be improved by adding a local search-based improvement method and by parallelising the algorithm. Jat and Yang (2011) have also used a weighted sum objective function in their hybrid evolutionary algorithm/tabu search approach, though their results do not appear as strong as those of the previous two papers. Similarly, van den Broek and Hurkens (2012) have also used a weighted sum objective function in their deterministic algorithm based on column generation techniques.

From the above studies, we suggest that the density and connectivity of the underlying solution space is an important issue in the performance of neighbourhood search algorithms with this problem. In particular, if connectivity is low then movements in the search space will be more restricted, perhaps making improvements in the objective function more difficult to achieve. From the research discussed above it is noticeable that some of the best approaches have attempted to alleviate this problem by relaxing some of the hard constraints (Cambazard et al., 2012; Ceschia et al., 2012), and/or by allowing events to be kept out of the timetable (Nothegger et al., 2012). However, such methods also require mechanisms for coping with these relaxations, such as repair operators (which may ultimately require large alterations to be made to a solution), or by introducing terms into the objective function (which will require appropriate weighting coefficients to be determined, perhaps via tuning). On the other hand, a two-stage approach of the type discussed by Rossi-Doria et al. (2002) will have no need for these features; however, because feasibility must be maintained when the SCC is being optimised (i.e. no relaxations are permitted), the underlying solution space may be more sparsely connected, perhaps making good levels of optimisation more difficult to achieve. We will focus on this issue in Section 5 onwards.

Before focussing on the task of eliminating soft constraint violations, following the two-stage approach it is first necessary to produce a valid solution that minimises the DTF measure (Eq. (11)). Previous strategies for this task have typically involved inserting all events into the timetable, and then rearranging them in order to remove violations of the hard constraints (Cambazard et al., 2008; Cambazard et al., 2012; Ceschia et al., 2012; Chiarandini, Birattari, Socha, & Rossi-Doria, 2006). In contrast, we choose to use a method by which events are permitted to remain outside of the timetable, meaning that spaces within the timetable are not “blocked” by events causing hard constraint violations. To do this, we use an adaptation of the PartialCol algorithm, which was originally designed by Blöchliger and Zufferey for use with the graph colouring problem (Blöchliger & Zufferey, 2008; Lewis, Thompson, Mumford, & Gillard, 2012).

To begin, an initial solution is constructed by taking events one-by-one and assigning them to timeslots such that none of the hard constraints are violated. Events that cannot be assigned without breaking a hard constraint are kept to one side and are dealt with at the end of this process. To try and maximise the number of events inserted into the timetable, a set of high performance heuristics originally proposed in Lewis (2012) and based on the DSatur graph colouring algorithm (Brélaz, Nicolier, & de Werra, 1977) is used. At each step heuristic rule 
                        
                           
                              
                                 h
                              
                              
                                 1
                              
                           
                        
                      (Table 1
                     ) is used to select an event, with ties being broken using 
                        
                           
                              
                                 h
                              
                              
                                 2
                              
                           
                        
                     , and then 
                        
                           
                              
                                 h
                              
                              
                                 3
                              
                           
                        
                      (if necessary). The selected event is then inserted into the timetable according to rule 
                        
                           
                              
                                 h
                              
                              
                                 4
                              
                           
                        
                     , breaking ties with 
                        
                           
                              
                                 h
                              
                              
                                 5
                              
                           
                        
                      and further ties with 
                        
                           
                              
                                 h
                              
                              
                                 6
                              
                           
                        
                     .

Completion of this constructive phase results in a valid solution 
                        
                           S
                        
                      obeying Constraints (4)–(10). However, if 
                        
                           |
                           
                              
                                 S
                              
                              
                                 ′
                              
                           
                           |
                           >
                           0
                        
                      (where 
                        
                           
                              
                                 S
                              
                              
                                 ′
                              
                           
                           =
                           e
                           ⧹
                           (
                           
                              
                                 ⋃
                              
                              
                                 i
                                 =
                                 1
                              
                              
                                 |
                                 t
                                 |
                              
                           
                           
                              
                                 S
                              
                              
                                 i
                              
                           
                           )
                        
                      is the set of unplaced events), the PartialCol algorithm will need to be invoked. Our version of this method operates using tabu search with the simple cost function 
                        
                           |
                           
                              
                                 S
                              
                              
                                 ′
                              
                           
                           |
                        
                     . During a run the neighbourhood operator moves events between 
                        
                           
                              
                                 S
                              
                              
                                 ′
                              
                           
                        
                      and timeslots in 
                        
                           S
                        
                      while maintaining the validity of the solution. Given an event 
                        
                           
                              
                                 e
                              
                              
                                 i
                              
                           
                           ∈
                           
                              
                                 S
                              
                              
                                 ′
                              
                           
                        
                      and timeslot 
                        
                           
                              
                                 S
                              
                              
                                 j
                              
                           
                           ∈
                           S
                        
                     , checks are first made to see if 
                        
                           
                              
                                 e
                              
                              
                                 i
                              
                           
                        
                      can be assigned to 
                        
                           
                              
                                 S
                              
                              
                                 j
                              
                           
                        
                      without violating Constraints (7)–(9). If the assignment of 
                        
                           
                              
                                 e
                              
                              
                                 i
                              
                           
                        
                      breaks one of these constraints, the move is rejected; else, all events 
                        
                           
                              
                                 e
                              
                              
                                 k
                              
                           
                        
                      in 
                        
                           
                              
                                 S
                              
                              
                                 j
                              
                           
                        
                      that conflict with 
                        
                           
                              
                                 e
                              
                              
                                 i
                              
                           
                        
                      (according to 
                        
                           C
                        
                     ) are transferred from 
                        
                           
                              
                                 S
                              
                              
                                 j
                              
                           
                        
                      into 
                        
                           
                              
                                 S
                              
                              
                                 ′
                              
                           
                        
                      and an attempt is made to insert event 
                        
                           
                              
                                 e
                              
                              
                                 i
                              
                           
                        
                      into 
                        
                           
                              
                                 S
                              
                              
                                 j
                              
                           
                        
                     , perhaps using a maximum matching algorithm. If this is not possible (i.e. Constraint (10) cannot be satisfied) then all changes are again reset; otherwise the move is considered valid. Upon performing this change, all moves involving the re-assignment of event(s) 
                        
                           
                              
                                 e
                              
                              
                                 k
                              
                           
                        
                      to timeslot 
                        
                           
                              
                                 S
                              
                              
                                 j
                              
                           
                        
                      are considered tabu for 
                        
                           τ
                        
                      iterations of the algorithm. We use a tabu tenure that is a random variable proportional to the current cost, 
                        
                           τ
                           =
                           ⌊
                           0.6
                           ×
                           |
                           
                              
                                 S
                              
                              
                                 ′
                              
                           
                           |
                           +
                           r
                           ⌋
                        
                     , where r is an integer uniformly selected from the range 0–9 inclusive. This setting has been used in previous tabu search algorithms for graph colouring (Blöchliger & Zufferey, 2008; Galinier & Hao, 1999; Lewis et al., 2012; Thompson & Dowsland, 2008) and was found to also give satisfactory results here. No tuning of this parameter was performed.

As with the original PartialCol algorithm, at each iteration the entire neighbourhood of 
                        
                           (
                           |
                           
                              
                                 S
                              
                              
                                 ′
                              
                           
                           |
                           ×
                           |
                           t
                           |
                           )
                        
                      moves is examined, and the move that is chosen is the one that invokes the largest decrease (or failing that, the smallest increase) in cost of any valid, non-tabu move. Ties are broken randomly, and tabu moves are also permitted if they are seen to improve on the best solution found so far. From time to time, there may also be no valid non-tabu moves available from a particular solution, in which case a randomly selected event is transferred from 
                        
                           S
                        
                      into 
                        
                           
                              
                                 S
                              
                              
                                 ′
                              
                           
                        
                     , before continuing the process as described above.

@&#RESULTS@&#


                        Table 2
                         contains the results of our PartialCol algorithm and compares the results to those reported by Cambazard et al. (2012), who currently claim the best results for this particular sub-problem in terms of success rates and run times.
                           2
                           Our algorithm was implemented in C++, and all experiments in this paper were conducted on 3.0Gigahertz Windows 7 PCs with 3.87Gigabyte RAM. The competition benchmarking program allocated 247s on this equipment.
                        
                        
                           2
                         We report the percentage of runs in which each instance has been solved (i.e. where a DTF of zero has been achieved), and the average time that this took (calculated only from the solved runs).
                           3
                           For comparative purposes, the computation times stated by Cambazard et al. (2012) have been altered in Table 2 to reflect the increased speed of our machines. Specifically, according to Cambazard et al. the competition benchmark program allocated them 324s per run. Hence, Cambazard et al.’s original run times have been reduced by 23.8%. We should note, however, that when comparing algorithms in this way, discrepancies in results and times can also occur due to differences in the hardware, operating system, programming language, and compiler options that are used. Our use of the competition benchmark program attempts to reduce discrepancies caused by the first two factors, but cannot correct for differences arising due to the latter two.
                        
                        
                           3
                         We see that the success rates for the two approaches are similar, with all except one instance being solved in 100% of cases (instance #10 in Cambazard et al.’s case, instance #11 in ours). However, with the exception of instance #11, the time required by PartialCol is considerably less, with an average reduction of 97.4% in CPU time achieved across the 15 remaining instances.

Curiously, when using our PartialCol algorithm with instance #11, most of the runs were solved very quickly. However in a small number of runs, the algorithm seemed to quickly navigate to a point in which a small number of events remained unplaced and where no further improvements could be made, suggesting the search was caught in a conspicuous valley in the cost landscape. To remedy this situation we therefore added a diversification mechanism to the method which attempts to break out of such regions. We call this our improved PartialCol algorithm and its results are also given in Table 2.

In the improved PartialCol method, our diversification mechanism is used for making relatively large changes to the incumbent solution, allowing new regions of the search space to be explored. It is called when the best solution found so far has not been improved for a set number of iterations. The mechanism operates by first randomly selecting a percentage of events in 
                           
                              S
                           
                         and transferring them to the set of unplaced events 
                           
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                           
                        . Next, alterations are made to 
                           
                              S
                           
                         by performing a random walk using neighbourhood operator 
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                           
                         (described in Section 5). Finally, the tabu list is reset so that all potential moves are deemed non-tabu, before PartialCol continues to execute as before. For the results in Table 2, the diversification mechanism was called after 5000 non-improving iterations, and extracted 10% of all events in 
                           
                              S
                           
                        . A random walk of 100 neighbourhood moves was then performed, giving a 
                           
                              >
                              95
                              %
                           
                         chance of all timeslots being altered by the neighbourhood operator (a number of other parameters were also tried here, though few differences in performance were observed). We see that the improved PartialCol method has achieved feasibility in all runs in the sample, with the average time reduction remaining at 97.4% compared to Cambazard et al. (2012).

In the second stage of this algorithm simulated annealing (SA) (Kirkpatrick, Gelatt, & Vecchi, 1983) is used to explore the space of valid/feasible solutions, attempting to minimise the number of soft constraint violations (measured by the SCC given in Eq. (14)). This metaheuristic is applied in a straightforward manner: starting at an initial “temperature” 
                           
                              
                                 
                                    T
                                 
                                 
                                    0
                                 
                              
                           
                        , during execution the temperature variable is slowly reduced according to an update rule 
                           
                              
                                 
                                    T
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              =
                              α
                              
                                 
                                    T
                                 
                                 
                                    i
                                 
                              
                           
                        , where 
                           
                              α
                              
                              (
                              0
                              <
                              α
                              <
                              1
                              )
                           
                         is known as the “cooling rate”. As with our earlier work (Lewis, 2012), at each temperature 
                           
                              
                                 
                                    T
                                 
                                 
                                    i
                                 
                              
                           
                        , a Markov chain is generated by performing 
                           
                              
                                 
                                    n
                                 
                                 
                                    2
                                 
                              
                           
                         applications of the neighbourhood operator. Moves that are seen to violate a hard constraint are immediately rejected. Moves that preserve feasibility but that increase the cost of the solution are accepted with probability 
                           
                              exp
                              (
                              -
                              δ
                              /
                              
                                 
                                    T
                                 
                                 
                                    i
                                 
                              
                              )
                           
                         (where 
                           
                              δ
                           
                         is the change in cost), while moves that reduce or maintain the cost are always accepted. The initial temperature 
                           
                              
                                 
                                    T
                                 
                                 
                                    0
                                 
                              
                           
                         is calculated automatically by performing a small sample of neighbourhood moves and using the standard deviation of the cost over these moves (van Laarhoven & Aarts, 1987).

Because this algorithm operates according to a time limit, our value for 
                           
                              α
                           
                         is determined automatically so that the temperature is reduced as slowly as possible between 
                           
                              
                                 
                                    T
                                 
                                 
                                    0
                                 
                              
                           
                         and some end temperature 
                           
                              
                                 
                                    T
                                 
                                 
                                    end
                                 
                              
                           
                        . In existing research (Lewis, 2012; Cambazard et al., 2012; Kostuch, 2005) this has been achieved by performing a short preliminary run of SA to gauge the speed at which the algorithm operates, allowing the number of Markov chains generated during the entire run 
                           
                              μ
                           
                         to be estimated. The cooling rate is then fixed to 
                           
                              α
                              =
                              
                                 
                                    (
                                    
                                       
                                          T
                                       
                                       
                                          end
                                       
                                    
                                    /
                                    
                                       
                                          T
                                       
                                       
                                          0
                                       
                                    
                                    )
                                 
                                 
                                    1
                                    /
                                    μ
                                 
                              
                           
                        . However, in our implementation we found this method of estimation to be inadequate because the time taken to complete each Markov chain also seems to depend on the temperature itself, making 
                           
                              μ
                           
                         difficult to estimate accurately.
                           4
                           In essence, this is because at lower temperatures a greater proportion of moves are rejected, with the associated cost matrices 
                                 
                                    X
                                 
                               and 
                                 
                                    Y
                                 
                               having to be reset more frequently. These extra operations generally result in low-temperature Markov chains taking longer to generate than high-temperature chains.
                        
                        
                           4
                         In our case we therefore use a different method whereby 
                           
                              α
                           
                         is modified during a run according to the length of time that each Markov chain takes to generate. Specifically, let 
                           
                              
                                 
                                    μ
                                 
                                 
                                    ∗
                                 
                              
                           
                         denote the estimated number of Markov chains that will be completed in the remainder of the run, calculated by dividing the amount of remaining run time by the length of time the most recent Markov chain (operating at temperature 
                           
                              
                                 
                                    T
                                 
                                 
                                    i
                                 
                              
                           
                        ) took to generate. On completion of the ith Markov chain, a modified cooling rate can thus be calculated as:
                           
                              (19)
                              
                                 
                                    
                                       α
                                    
                                    
                                       i
                                       +
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       (
                                       
                                          
                                             T
                                          
                                          
                                             end
                                          
                                       
                                       /
                                       
                                          
                                             T
                                          
                                          
                                             i
                                          
                                       
                                       )
                                    
                                    
                                       1
                                       /
                                       
                                          
                                             μ
                                          
                                          
                                             ∗
                                          
                                       
                                    
                                 
                              
                           
                        The upshot is that the cooling rate will be altered slightly during a run, allowing the user-specified end temperature 
                           
                              
                                 
                                    T
                                 
                                 
                                    end
                                 
                              
                           
                         to be reached at the time limit. Suitable values for 
                           
                              
                                 
                                    T
                                 
                                 
                                    end
                                 
                              
                           
                        , the only parameter required for this phase, are examined in Section 6.

We now define a number of different neighbourhood operators that can be used in conjunction with the SA algorithm. Let 
                           
                              N
                              (
                              S
                              )
                           
                         be the set of candidate solutions in the neighbourhood of the incumbent solution 
                           
                              S
                           
                        . Also, let 
                           
                              S
                           
                         be the set of all valid solutions (i.e. 
                           
                              S
                              ∈
                              S
                           
                         if and only if Constraints (4)–(10) are satisfied). The relationship between the solution space and neighbourhood operator can be conveniently defined by a graph 
                           
                              G
                              =
                              (
                              S
                              ,
                              E
                              )
                           
                         with vertex set 
                           
                              S
                           
                         and edge set 
                           
                              E
                              =
                              {
                              (
                              S
                              ∈
                              S
                              ,
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              S
                              )
                              |
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              N
                              (
                              S
                              )
                              }
                           
                        . In our case, since all our neighbourhood operators are reversible, G is defined as a simple graph, i.e. 
                           
                              (
                              S
                              ,
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                              )
                              ∈
                              E
                              ⇔
                              (
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                              ,
                              S
                              )
                              ∈
                              E
                           
                        . The various neighbourhood operators are now defined.
                           
                              
                                 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             1
                                          
                                       
                                    
                                 :
                              The first neighbourhood operator is based on those used by Lewis (2012) and Nothegger et al. (2012). Consider a valid solution 
                                    
                                       S
                                    
                                  represented as a matrix 
                                    
                                       
                                          
                                             Z
                                          
                                          
                                             |
                                             r
                                             |
                                             ×
                                             |
                                             t
                                             |
                                          
                                       
                                    
                                  in which rows represent rooms and columns represent timeslots. Each element of 
                                    
                                       Z
                                    
                                  can be blank or can be occupied by exactly one event. If 
                                    
                                       
                                          
                                             Z
                                          
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                    
                                  is blank, then room 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             i
                                          
                                       
                                    
                                  is vacant in timeslot 
                                    
                                       
                                          
                                             t
                                          
                                          
                                             j
                                          
                                       
                                    
                                 . If 
                                    
                                       
                                          
                                             Z
                                          
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                       =
                                       
                                          
                                             e
                                          
                                          
                                             k
                                          
                                       
                                    
                                 , then 
                                    
                                       
                                          
                                             e
                                          
                                          
                                             k
                                          
                                       
                                    
                                  is assigned to room 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             i
                                          
                                       
                                    
                                  and timeslot 
                                    
                                       
                                          
                                             t
                                          
                                          
                                             j
                                          
                                       
                                    
                                 . 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             1
                                          
                                       
                                    
                                  operates by first randomly selecting an element 
                                    
                                       
                                          
                                             Z
                                          
                                          
                                             
                                                
                                                   i
                                                
                                                
                                                   1
                                                
                                             
                                             ,
                                             
                                                
                                                   j
                                                
                                                
                                                   1
                                                
                                             
                                          
                                       
                                    
                                  containing an arbitrary event 
                                    
                                       
                                          
                                             e
                                          
                                          
                                             k
                                          
                                       
                                    
                                 . A second element 
                                    
                                       
                                          
                                             Z
                                          
                                          
                                             
                                                
                                                   i
                                                
                                                
                                                   2
                                                
                                             
                                             ,
                                             
                                                
                                                   j
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                  is then randomly selected in a different timeslot (
                                    
                                       
                                          
                                             j
                                          
                                          
                                             1
                                          
                                       
                                       
                                       ≠
                                       
                                       
                                          
                                             j
                                          
                                          
                                             2
                                          
                                       
                                    
                                 ). If 
                                    
                                       
                                          
                                             Z
                                          
                                          
                                             
                                                
                                                   i
                                                
                                                
                                                   2
                                                
                                             
                                             ,
                                             
                                                
                                                   j
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                  is blank, the operator attempts to transfer 
                                    
                                       
                                          
                                             e
                                          
                                          
                                             k
                                          
                                       
                                    
                                  from timeslot 
                                    
                                       
                                          
                                             j
                                          
                                          
                                             1
                                          
                                       
                                    
                                  into any vacant room in timeslot 
                                    
                                       
                                          
                                             j
                                          
                                          
                                             2
                                          
                                       
                                    
                                 . If 
                                    
                                       
                                          
                                             Z
                                          
                                          
                                             
                                                
                                                   i
                                                
                                                
                                                   2
                                                
                                             
                                             ,
                                             
                                                
                                                   j
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       =
                                       
                                          
                                             e
                                          
                                          
                                             l
                                          
                                       
                                    
                                 , then a swap is attempted in which 
                                    
                                       
                                          
                                             e
                                          
                                          
                                             k
                                          
                                       
                                    
                                  is moved into any vacant room in timeslot 
                                    
                                       
                                          
                                             j
                                          
                                          
                                             2
                                          
                                       
                                    
                                 , and 
                                    
                                       
                                          
                                             e
                                          
                                          
                                             l
                                          
                                       
                                    
                                  is moved into any vacant room in timeslot 
                                    
                                       
                                          
                                             j
                                          
                                          
                                             1
                                          
                                       
                                    
                                 . If such changes are seen to violate any of the hard constraints, they are rejected immediately, else they are kept and the new solution is evaluated according to Eq. (14).

This operates in the same manner as 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             1
                                          
                                       
                                    
                                 . However, when seeking to insert an event into a timeslot, if no vacant, suitable room is available, a maximum matching algorithm is also executed to determine if a valid room allocation of the events can be found. A similar operator was used by Cambazard et al. in their winning competition entry (Cambazard et al., 2008).

This is an extension of 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             2
                                          
                                       
                                    
                                 . Specifically, if the proposed move in 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             2
                                          
                                       
                                    
                                  will result in a violation of Constraint (6), then a Kempe chain interchange is attempted (Thompson & Dowsland, 1998; Chiarandini et al., 2006; Lewis & Thompson, 2010). Kempe chains are derived from the underlying graph colouring model and correspond to connected sub-graphs containing vertices (events) in two colour classes (timeslots). An example of this process is shown in Fig. 1
                                 (a). Imagine in this case that we have chosen to swap the events 
                                    
                                       
                                          
                                             e
                                          
                                          
                                             5
                                          
                                       
                                       ∈
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                    
                                  and 
                                    
                                       
                                          
                                             e
                                          
                                          
                                             10
                                          
                                       
                                       ∈
                                       
                                          
                                             S
                                          
                                          
                                             j
                                          
                                       
                                    
                                 . However, doing so would violate Constraint (6) because events 
                                    
                                       
                                          
                                             e
                                          
                                          
                                             5
                                          
                                       
                                    
                                  and 
                                    
                                       
                                          
                                             e
                                          
                                          
                                             11
                                          
                                       
                                    
                                  conflict but would now be assigned to the same timeslot, rendering the move invalid. In this case we therefore construct a Kempe chain from 
                                    
                                       
                                          
                                             e
                                          
                                          
                                             5
                                          
                                       
                                    
                                  which, when interchanged, guarantees the preservation of Constraint (6), as shown in Fig. 1(b). Note however that, as with the previous neighbourhood operators, a Kempe interchange might not preserve the satisfaction of the remaining hard constraints, and will need to be rejected if this is the case.

This operator extends 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             3
                                          
                                       
                                    
                                  by using the idea of double Kempe chains, originally proposed by Lü and Hao (2010). In many cases, a proposed Kempe chain interchange will be rejected because it will violate Constraint (10): i.e. suitable rooms cannot be found for all of the events proposed for assignment to a timeslot. For example, in Fig. 1(a) the proposed Kempe interchange involving events 
                                    
                                       {
                                       
                                          
                                             e
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             2
                                          
                                       
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             3
                                          
                                       
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             6
                                          
                                       
                                       ,
                                       
                                          
                                             e
                                          
                                          
                                             7
                                          
                                       
                                       }
                                    
                                  is guaranteed to violate Constraint (10) because it will result in too many events in timeslot 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             j
                                          
                                       
                                    
                                  for a feasible matching to be possible. However, applying a second Kempe chain at the same time may result in feasibility being maintained, as is illustrated in Fig. 1(c).

In this operator, if a proposed single Kempe chain interchange is seen to violate Constraint (10) only, then a random vertex from one of the two timeslots, but from outside this chain is randomly selected, and a second Kempe chain is formed from it. If the proposed interchange of both Kempe chains does not violate any of the hard constraints, then the move can be performed and the new solution can be evaluated according to Eq. (14) as before.

Finally, 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             5
                                          
                                       
                                    
                                  defines a multi-Kempe chain interchange operator. This generalises 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             4
                                          
                                       
                                    
                                  in that if a proposed double Kempe chain interchange is seen to violate Constraint (10) only, then triple Kempe chains, quadruple Kempe chains (and so on) can also be investigated in the same manner. Note that when constructing these multiple Kempe chains, a violation of any of the Constraints (7)–(9) will mean that we can reject the move immediately. However, if only Constraint (10) continues to be violated, then eventually the considered Kempe chains will contain all events in both timeslots, in which case the move will become equivalent to the swapping of the contents of the two timeslots. Trivially, in such a move Constraint (10) is guaranteed to be satisfied.

From the above descriptions it is clear that each successive neighbourhood operator is more expensive than its predecessor. However, each operator also generalises its predecessor – that is, 
                           
                              
                                 
                                    N
                                 
                                 
                                    1
                                 
                              
                              (
                              S
                              )
                              ⊆
                              
                                 
                                    N
                                 
                                 
                                    2
                                 
                              
                              (
                              S
                              )
                              ⊆
                              …
                              ⊆
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                              (
                              S
                              )
                              ,
                              
                              ∀
                              S
                              ∈
                              S
                           
                        . From the perspective of the graph 
                           
                              G
                              =
                              (
                              S
                              ,
                              E
                              )
                           
                         defined above, this implies a greater connectivity of the solution space since 
                           
                              
                                 
                                    E
                                 
                                 
                                    1
                                 
                              
                              ⊆
                              
                                 
                                    E
                                 
                                 
                                    2
                                 
                              
                              ⊆
                              …
                              ⊆
                              
                                 
                                    E
                                 
                                 
                                    5
                                 
                              
                           
                         (where 
                           
                              
                                 
                                    E
                                 
                                 
                                    i
                                 
                              
                              =
                              {
                              (
                              S
                              ,
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                              )
                              |
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              
                                 
                                    N
                                 
                                 
                                    i
                                 
                              
                              (
                              S
                              )
                              }
                           
                         for 
                           
                              i
                              =
                              1
                              ,
                              …
                              ,
                              5
                           
                        ). Note though, that the set of vertices 
                           
                              S
                           
                         remains the same under the different operators.

Finally, it is worth mentioning that each of the above operators only ever alters the contents of two timeslots in any particular move. In practice, this means that we only need to consider the particular days and students affected by the move when re-evaluating the solution according to Eq. (14). This allows considerable speed-up of the algorithm.

An additional way by which the connectivity of the underlying solution space might be enhanced is through the use of “dummy rooms”. A dummy room is an extra room made available in all timeslots and defined as suitable for all events (i.e. it has an infinite seating capacity and possesses all available room features). Dummy rooms can be used with any of the previous neighbourhood operators, and multiple dummy rooms can also be applied if necessary. We therefore use 
                           
                              
                                 
                                    N
                                 
                                 
                                    i
                                 
                                 
                                    (
                                    j
                                    )
                                 
                              
                           
                         to denote the use of neighbourhood 
                           
                              
                                 
                                    N
                                 
                                 
                                    i
                                 
                              
                           
                         using j dummy rooms (giving 
                           
                              |
                              r
                              |
                              +
                              j
                           
                         rooms in total). Similarly, we can use the notation 
                           
                              
                                 
                                    S
                                 
                                 
                                    (
                                    j
                                    )
                                 
                              
                           
                         to denote the space of all solutions that obey all hard constraints, and where j dummy rooms are available. (For brevity, where a superscript is not used, we assume no dummy room is being used.) Dummy rooms can be viewed as a type of “placeholder” that are used to contain events not currently assigned to the “real” timetable. Transferring events in and out of dummy rooms might therefore be seen as similar to moving events in and out of the timetable.

Note that the use of dummy rooms increases the size of the set 
                           
                              M
                           
                        , making Constraint (10) easier to satisfy. This leads to the situation depicted in Fig. 2
                        . Here, we observe that the presence of dummy rooms increases the number of vertices/solutions (i.e. 
                           
                              
                                 
                                    S
                                 
                                 
                                    (
                                    j
                                    )
                                 
                              
                              ⊆
                              
                                 
                                    S
                                 
                                 
                                    (
                                    j
                                    +
                                    1
                                    )
                                 
                              
                              ,
                              
                              ∀
                              j
                              ⩾
                              0
                           
                        ), with extra edges (dotted in the figure) being created between some of the original vertices and new vertices. As depicted, this may allow previously disjoint sub-graphs to become connected.

Because they do not form part of the original problem, at the end of the optimisation process all dummy rooms will need to be removed, meaning that any events assigned to these will contribute to the DTF measure. Because this is undesirable, in our case we attempt to discourage the assignment of events to the dummy rooms during evaluation by considering all events assigned to a dummy room as unplaced. We then use the cost function 
                           
                              W
                              ×
                              DTF
                              +
                              SCP
                           
                        , where W is a weighting coefficient that will need to be set by the user. Additionally, when employing the maximum matching algorithm we ensure that the dummy room is only used when necessary – that is, if a maximum matching can be achieved without using a dummy room, then this is the one that will be used.

We have now seen various neighbourhood operators for this problem and made some observations on the connectivity of their underlying search spaces, defined by G. Unfortunately however, it will usually be very difficult to gain a complete understanding of the connectivity of G because it will simply be too large to enumerate. In particular, we are unlikely to be able to confirm whether G is connected or not, which would be useful information if we wanted to know whether the optimal solution could be reached from any other solution within the solution space.

One way we might gain an indication of G’s connectivity is to make use of what we will call the feasibility ratio. This is defined as the proportion of proposed neighbourhood moves that are seen to not violate any of the hard constraints (i.e. that maintain validity/feasibility). A lower feasibility ratio therefore suggests a lower connectivity in G because, on average, more potential moves will be seen to violate a hard constraint from a particular solution, meaning movements within the solution space are more restricted. A higher feasibility ratio will suggest a greater connectivity.


                        Fig. 3
                         displays the feasibility ratios for neighbourhood operators 
                           
                              
                                 
                                    N
                                 
                                 
                                    1
                                 
                              
                              …
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                           
                         and also 
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                                 
                                    (
                                    1
                                    )
                                 
                              
                           
                         for all 24 problem instances. These mean figures were found by performing random walks of 50,000 feasible-preserving moves with each operator from a sample of 20 feasible solutions per instance (produced via Stage 1). As expected, we see that the feasibility ratios increase for each successive neighbourhood operator, though the differences between 
                           
                              
                                 
                                    N
                                 
                                 
                                    3
                                 
                              
                              ,
                              
                              
                                 
                                    N
                                 
                                 
                                    4
                                 
                              
                           
                        , and 
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                           
                         appear to be only marginal. We also observe quite a large range across the instances, with instance #10 appearing to exhibit the least connected solution space (with feasibility ratios ranging from just 0.0005 (
                           
                              
                                 
                                    N
                                 
                                 
                                    1
                                 
                              
                           
                        ) to 0.004 (
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                                 
                                    (
                                    1
                                    )
                                 
                              
                           
                        )), and instance #17 having the highest levels of connectivity (0.04 (
                           
                              
                                 
                                    N
                                 
                                 
                                    1
                                 
                              
                           
                        ) to 0.10 (
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                                 
                                    (
                                    1
                                    )
                                 
                              
                           
                        )). Standard deviations from these samples range between 0.000018 (
                           
                              
                                 
                                    N
                                 
                                 
                                    2
                                 
                              
                           
                        , #20) and 0.000806 (
                           
                              
                                 
                                    N
                                 
                                 
                                    1
                                 
                              
                           
                        , #23).

@&#EXPERIMENTAL RESULTS@&#

In our first set of experiments we examine the ability of each neighbourhood operator to reduce the soft constraint cost within the time limit specified by the competition benchmarking program (minus the time used for Stage 1). We also consider the effects of altering 
                           
                              
                                 
                                    T
                                 
                                 
                                    end
                                 
                              
                           
                         – the only run-time parameter required in this stage. To measure performance, we compare our results to those achieved by the five finalists of the competition using the competition’s ranking system. This involves calculating a “ranking score” for each algorithm, derived as follows.

Given x algorithms and a single problem instance, each algorithm is executed y times, giving xy results. These results are then ranked from 1 to xy, with ties receiving a rank equal to the average of the ranks they span. The mean of the ranks assigned to each algorithm is then calculated, giving the respective rank scores for the x algorithms on this instance. This process is then repeated on all instances, and the mean of all ranking scores of each algorithm is taken as its overall ranking score. The best ranking score achievable for an algorithm is therefore 
                           
                              (
                              y
                              +
                              1
                              )
                              /
                              2
                           
                        , (in which case its results are better than all other algorithms’ in all cases); the worst possible score is 
                           
                              (
                              x
                              -
                              1
                              )
                              y
                              +
                              (
                              y
                              +
                              1
                              )
                              /
                              2
                           
                        . A worked example of this process can be found in McCollum et al. (2010).

A full breakdown of the results and ranking scores of the five competition finalists can be found at http://www.cs.qub.ac.uk/itc2007/, where 
                           
                              x
                              =
                              5
                           
                         and 
                           
                              y
                              =
                              10
                           
                        . In our case, we added results from ten runs of our algorithm to these published results, giving 
                           
                              x
                              =
                              6
                              ,
                              
                              y
                              =
                              10
                           
                        . A summary of the resultant ranking scores achieved by our algorithm with each neighbourhood operator over a range of different settings for 
                           
                              
                                 
                                    T
                                 
                                 
                                    end
                                 
                              
                           
                         is given in Fig. 4
                        . The shaded area of the figure indicates those settings where our algorithm would have won the competition (i.e. that have achieved a lower ranking score than the other five entries).


                        Fig. 4 shows a clear difference in the performance of neighbourhood operators 
                           
                              
                                 
                                    N
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    N
                                 
                                 
                                    2
                                 
                              
                           
                        , illustrating the importance of the extra connectivity provided by the maximum matching algorithm. Similarly, the results of 
                           
                              
                                 
                                    N
                                 
                                 
                                    3
                                 
                              
                              ,
                              
                              
                                 
                                    N
                                 
                                 
                                    4
                                 
                              
                           
                         and 
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                           
                         are better still, outperforming 
                           
                              
                                 
                                    N
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    N
                                 
                                 
                                    2
                                 
                              
                           
                         across all the values of 
                           
                              
                                 
                                    T
                                 
                                 
                                    end
                                 
                              
                           
                         tested. However, there is very little difference between the performance of 
                           
                              
                                 
                                    N
                                 
                                 
                                    3
                                 
                              
                              ,
                              
                              
                                 
                                    N
                                 
                                 
                                    4
                                 
                              
                           
                         and 
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                           
                         themselves presumably due to the fact that, for these particular problem instances, the behaviour and therefore feasibility ratios of these operators are very similar (refer to Fig. 3). Moreover, the extra expense of 
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                           
                         over 
                           
                              
                                 
                                    N
                                 
                                 
                                    3
                                 
                              
                           
                         and 
                           
                              
                                 
                                    N
                                 
                                 
                                    4
                                 
                              
                           
                         appears to have minimal effect, with 
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                           
                         producing less than 0.5% fewer Markov chains than 
                           
                              
                                 
                                    N
                                 
                                 
                                    3
                                 
                              
                           
                         over the course of the run on average. Of course, such similarities will not always be the case – they merely seem to be occurring with these particular problem instances because, in most cases, hard constraints are being broken (and the move rejected) before the inspection of more than one Kempe chain is deemed necessary.


                        Fig. 4 also shows that the use of dummy rooms does not seem to improve results across the instances. In initial experiments we tested the use of 1 and 2 dummy rooms along with a range of different values for the weighting coefficient 
                           
                              W
                              ∈
                              {
                              1
                              ,
                              2
                              ,
                              5
                              ,
                              10
                              ,
                              20
                              ,
                              200
                              ,
                              ∞
                              }
                           
                        .
                           5
                           Some of these values were chosen due to their use in existing algorithms using weighted sum functions with this problem (Ceschia et al., 2012; Nothegger et al., 2012; van den Broek & Hurkens, 2012).
                        
                        
                           5
                         
                        Fig. 4 reports the best of these: 1 dummy room with 
                           
                              W
                              =
                              2
                           
                        . For higher values of W, results were found to be inferior because the additional solutions in the search space (shaded vertices in Fig. 2) would still be evaluated by the algorithm, but nearly always rejected due to their high cost.
                           6
                           We might consider the use of no dummy rooms as similar to using 
                                 
                                    W
                                    ≈
                                    ∞
                                 
                              , in that the algorithm will not accept moves that involve moving an event into a dummy room (i.e. introducing infeasibility to the timetable). However the difference is that when using dummy rooms, such moves will still be evaluated by the algorithm before being rejected while, when using no dummy rooms, these unnecessary evaluations will not take place, saving significant amounts of time during the course of a run.
                        
                        
                           6
                         On the other hand, using the setting 
                           
                              W
                              =
                              1
                           
                         means that the penalty of assigning an event to a dummy room will be equal to the penalty of assigning the event to the last timeslot of a day (soft constraint SC1), meaning there is little distinction between the cost of infeasibility and the cost of soft constraint violations.

As mentioned, a setting of 
                           
                              W
                              =
                              2
                           
                        , which seems the best compromise of these extremes, still produces inferior results on average compared to using no dummy rooms. However, for problem instance #10 we found the opposite to be true, with significantly better results being produced when using dummy rooms. From Fig. 3, we observe that #10 has the lowest feasibility ratio of all instances, and so the extra connectivity provided by the dummy rooms seems to be aiding the search in this case. On the other hand, the existence of a perfect solution here could mean that, while optimising the SCC, the search might also be being simultaneously guided towards regions of the solution space that are feasible. This matter will be examined further in Section 6.3.


                        Fig. 5
                         illustrates for the 24 problem instances the relationship between the feasibility ratio and the proportion by which the SCC is reduced by the SA algorithm for two contrasting neighbourhood operators. We see that the points for 
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                           
                         are shifted upwards and rightwards compared to 
                           
                              
                                 
                                    N
                                 
                                 
                                    1
                                 
                              
                           
                         illustrating the larger feasibility ratios and higher performance of the operator. The general pattern in the figure suggests that higher feasibility ratios allow large decreases in cost during a run, while lower feasibility ratios can result in both large or small decreases, depending on the instance. Thus, while there is some relationship between the two variables, it seems likely that other factors also have an impact here, including the size and shape of the cost landscape and the amount of computation needed for each application of the evaluation function.

Finally, Fig. 6
                         demonstrates the effect of introducing a larger number of dummy rooms into the solution. This generally increases the feasibility ratio because Constraint (10) becomes easier to satisfy; however, this increase also levels off due to hard constraints (4)–(9) remaining. As a result, there is also a levelling off in the amount that the SCC is reduced during the run. (Note that this does not imply that better overall results can be achieved when using large numbers of dummy rooms, since a weighting of 
                           
                              W
                              =
                              0
                           
                         has been used for this example.).

In our next set of experiments, we compare the performance of our algorithm to the best results reported for this problem since 2007. Table 3
                         gives a breakdown of the results achieved by our method using 
                           
                              
                                 
                                    T
                                 
                                 
                                    end
                                 
                              
                              =
                           
                         0.5 compared to the approaches of van den Broek and Hurkens (2012), Cambazard et al. (2012), and Nothegger et al. (2012). The latter two papers only list results for the first 16 instances. In this table, all statistics are calculated from 100 runs on each instance (with the exception of van den Broek and Hurkins whose algorithm is deterministic), and all results have been achieved strictly within the time limits specified by the competition benchmark program. Our experiments were performed using 
                           
                              
                                 
                                    N
                                 
                                 
                                    3
                                 
                              
                              ,
                              
                              
                                 
                                    N
                                 
                                 
                                    4
                                 
                              
                           
                        , and 
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                           
                        , though no significant difference was observed between the three operators’ best, mean, or worst results. Hence we only present the results of one of these, 
                           
                              
                                 
                                    N
                                 
                                 
                                    4
                                 
                              
                           
                        , here.
                           7
                           For pairwise comparisons, Related Samples Wilcoxon Signed Rank Tests were used; for other comparisons Friedman Tests were used (significance level 0.05).
                        
                        
                           7
                        
                     


                        Table 3 shows that, using 
                           
                              
                                 
                                    N
                                 
                                 
                                    4
                                 
                              
                           
                        , perfect solutions have been achieved by our method in 17 of the 24 problem instances. A comparison to the 16 results reported by Cambazard et al. indicates that our method’s best, mean, and worst results are also significantly better than their corresponding results. Similarly, our best, mean, and worst results are all seen to outperform the results of van den Broek and Hurkens (2012). Finally, no significant difference is observed between the best and mean results of our method compared to Nothegger et al. (2012); however, unlike our algorithm they have failed to achieve feasibility in a number of cases.

Another method reporting strong results, and for which source code is also available, is due to Ceschia et al. (2012), http://satt.diegm.uniud.it/projects/pe-ctt/. In their paper, the authors have performed extensive parameter tuning via an automated method and have also used an iteration limit to define the stopping criteria instead of the competition benchmark program. In practice this latter point makes it difficult to compare their published results to those in Table 3 because, in our repetition of their experiments, runs of their algorithm to their stated iteration limits were found to exceed the benchmark time limit by between 24% and 165%. To gain a more indicative comparison, we therefore repeated their published experiments, and used the resultant run times of their implementation as time limits for our own algorithm.


                        Table 4
                         gives the ranking scores for the two algorithms on each instance. These are calculated from 10 runs per algorithm (i.e. 
                           
                              x
                              =
                              2
                              ,
                              
                              y
                              =
                              10
                           
                        ), giving ranking scores of between 5.5 and 15.5. We see that our approach has outperformed Ceschia et al.’s method in 18 of the 24 instances, with one instance (#16) tied. In three instances (#9, #19, #23) these ranking scores are also at their extremes, indicating that all ten runs with our method have outperformed those of Ceschia et al.

A noteworthy feature of the results given in Tables 3 and 4 is that, in contrast to the approaches of Ceschia et al. (2012) and Nothegger et al. (2012), our method has performed relatively poorly with a small number of problem instances, most notably #10 and #22. According to Fig. 3, these instances also exhibit the lowest feasibility ratios with our operators, suggesting that freedom of movement in the search space is too restricted to allow adequate optimisation of the objective function.

On the other hand, it is also possible that the algorithms of Ceschia et al. and Nothegger et al. are being aided by the fact that perfect solutions to the 24 competition instances are known to exist – a feature that is unlikely to occur in real world problem instances. For example, as noted in Section 3, Ceschia et al.’s algorithm has produced its best results with the competition instances when optimisation is performed using an objective function in which hard and soft constraint are given equal weights. However it could be that, by moving towards solutions with low SCCs, the search could also inadvertently be moving towards feasible regions of the search space, simultaneously helping to satisfy the hard constraints along the way.

To test this hypothesis we repeated our experiments with Ceschia et al.’s method and our own using a second set of publicly available problem instances, the so-called “harder” problem instances. This set of instances has previously been used in the literature for testing algorithms’ ability to find feasibility only (Ceschia et al., 2012; Frausto-Sols, Alonso-Pecina, & Mora-Vargas, 2008; Lewis & Paechter, 2007; Liu, Zhang, & Chin, 2011; Mühlenthaler & Wanka, 2010; Qaurooni & Akbarzadeh, 2013; Tuga, Berretta, & Mendes, 2007) and they differ to the 24 competition instances in that they do not consider Constraints (8)–(10), and only some are known to feature perfect solutions (though they do all feature a feasible solution).
                           8
                           Previously these instances were at http://www.emergentcomputing.org/timetabling/harderinstances. They can now be found at http://www.rhydlewis.eu/hardTT/.
                        
                        
                           8
                         In our tests both algorithms were executed ten times on the forty largest instances from this set, of which 17 are known to feature perfect solutions. Because our algorithm was not able to able to achieve feasibility in seven of the forty instances, a maximum limit of 50% of the time run time was allocated to Stage 1, with the remainder given to Stage 2.


                        Table 5
                         summarises the results of these trials. For each problem instance a ranking score of between 5.5 and 15.5 was calculated for each algorithm, and the number of instances that each algorithm outperformed the other, together with the average ranking scores across these instances is presented. The results strongly support our hypothesis: for the 23 instances with no known perfect solution, our algorithm has outperformed Ceschia et al.’s in 21 cases (91.3%). Moreover, the average ranking score across these instances (6.2) is close to the minimum possible, indicating that this difference is stark. On the other hand, with the remaining 17 instances, Ceschia et al.’s approach has produced better results in 12.5 cases (73.5%), suggesting that the existence of perfect solutions is indeed benefitting the algorithm.

In our final set of experiments we look at the effects of using differing time limits with our algorithm. Until this point, most experiments have been performed according to the time limit specified by the competition benchmark program
                           9
                           247 s on our machines.
                        
                        
                           9
                        ; however, it is pertinent to ask whether the less expensive neighbourhood operators are actually more suitable when shorter time limits are used, and whether further improvements can be achieved when the time limit is extended. In Fig. 7
                         we show the relative performance of operators 
                           
                              
                                 
                                    N
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                              
                                 
                                    N
                                 
                                 
                                    2
                                 
                              
                              ,
                              
                              
                                 
                                    N
                                 
                                 
                                    3
                                 
                              
                           
                        , and 
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                           
                         using time limits of between 1 and 600seconds, signifying very fast and very slow coolings respectively. (
                           
                              
                                 
                                    N
                                 
                                 
                                    4
                                 
                              
                           
                         is omitted here due to its close similarity with 
                           
                              
                                 
                                    N
                                 
                                 
                                    3
                                 
                              
                           
                         and 
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                           
                        ’s results.) We see that even for very short time limits of less than 5seconds, the more expensive neighbourhoods consistently produce superior solutions across the instances. We also see that when the time limit is extended beyond the benchmark and up to 600seconds, the mean reduction in the soft cost rises from 89.1% to 94.6% (under 
                           
                              
                                 
                                    N
                                 
                                 
                                    5
                                 
                              
                           
                        ), indicating that superior results can also be gained with additional computing resources. This latter observation is consistent with that of Nothegger et al. (2012), who were also able to improve the results of their algorithm, in their case via parallelisation.

This paper has presented a robust and high-performance two-stage algorithm for the NP-hard post enrolment-based timetabling problem. The only parameter setting required in Stage 2 – the main phase of the algorithm – is the end temperature 
                        
                           
                              
                                 T
                              
                              
                                 end
                              
                           
                        
                     . All others are determined automatically according to the amount of available run time.

Stage 1 of this algorithm has shown to be very successful for finding feasibility with the considered problem instances with regards to both success rate and computation time. One feature of this stage is that it does not consider the soft constraints, meaning that its behaviour cannot be biased by the presence of any known perfect solution.

We have chosen to mostly focus on issues of solution space connectivity in this work, and have seen that results generally improve when this connectivity is increased. This observation has motivated the design of neighbourhood operators that offer additional flexibility (and solution space connectivity) over those previously used for this problem.

It is noticable that the best performing algorithms for the post enrolment-based timetabling problem have tended to use simulated annealing as their main mechanism for reducing the number of soft constraint violations (Kostuch, 2005; Chiarandini et al., 2006; Cambazard et al., 2012). Another popular method, at least in the submitted competition entries, has been tabu search. However this metaheuristic does not seem to have fared as favourably in practice. A contributing factor behind this lack of performance could be due to the observations made in this paper – that a decreased connectivity of the search space tends to lead to fewer gains being made in the optimisation process. As an illustration, consider the situation shown in Fig. 8
                      where a solution space and neighbourhood operator is again defined as a graph 
                        
                           G
                           =
                           (
                           S
                           ,
                           E
                           )
                        
                     . In the top example, we show the effect of performing a neighbourhood move (i.e. changing the incumbent solution) with simulated annealing. In particular, we see that the connectivity of G does not change (though the probabilities of traversing the edges may change if the temperature parameter T is subsequently updated). On the other hand, when the same move is performed using tabu search, a number of edges in G, including 
                        
                           {
                           S
                           ,
                           
                              
                                 S
                              
                              
                                 ′
                              
                           
                           }
                        
                     , will be made tabu for a number of iterations, effectively removing them from the graph for a period of time dictated by the tabu tenure.
                        10
                        The exact edges that will be made tabu depends on the structure of the tabu list. In typical applications to this problem (http://www.idsia.ch/Files/ttcomp2002), when an event 
                              
                                 
                                    
                                       e
                                    
                                    
                                       i
                                    
                                 
                              
                            has been moved from timeslot 
                              
                                 
                                    
                                       S
                                    
                                    
                                       j
                                    
                                 
                              
                            to a new timeslot, all moves that involve moving 
                              
                                 
                                    
                                       e
                                    
                                    
                                       i
                                    
                                 
                              
                            back into 
                              
                                 
                                    
                                       S
                                    
                                    
                                       j
                                    
                                 
                              
                            will be made tabu.
                     
                     
                        10
                      While this helps to prevent cycling (which may regularly occur with SA), this also has the effect of reducing the connectivity of G. Over the course of a run, the cumulative effects of this phenomenon may put tabu search at a disadvantage for these particular problems.

There are a number of areas of future research arising from this work. Improvements might be found by augmenting the algorithm with extra and/or improved neighbourhood operators that further increase the connectivity of the solution space. One suggestion is the Hungarian operator proposed by Cambazard et al. (2012), which works by extracting a set of events assigned to different timeslots, and then reassigning these optimally using an assignment algorithm. We experimented with this operator in preliminary trials. However, because of the hard constraints of this problem, and particularly with low cost solutions, we found that the extracted events were usually reassigned back to the timeslots from which they came, meaning that the solution would not change. However, modifications may be possible to improve on this behaviour. Other potential neighbourhood operators might allow events to be temporarily removed from a timetable, perhaps increasing the connectivity of the solution space for a period. Penalty terms may then also be needed in order to encourage their re-insertion at later stages (as with dummy rooms), but the weights of these could be dynamically altered during a run if necessary. Finally, improvements might also be achieved by treating the various soft constraints in different ways. For example, rather like when events are assigned to dummy rooms, the assignment of events to the last timeslots of the day will always incur a penalty cost. When events are moved out of these timeslots it might therefore make sense to prohibit any other events from being reinserted back into them. On the one hand, this will have the effect of removing many of the solutions featuring violations of SC1 from the solution space; however on the other hand it may also reduce the connectivity of this space, perhaps making further optimisation more difficult to achieve.

As mentioned earlier, all of the problem instances used in the study are available online (http://www.cs.qub.ac.uk/itc2007/). In addition, a full listing of our results, together with our implementation’s C++ source code is available at http://www.rhydlewis.eu/resources/ttCodeResults.zip.

@&#REFERENCES@&#

