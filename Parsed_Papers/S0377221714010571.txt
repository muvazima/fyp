@&#MAIN-TITLE@&#Mathematical programming techniques in water network optimization

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Survey mathematical programming approaches to water network optimization.


                        
                        
                           
                           Network design.


                        
                        
                           
                           Network operation


                        
                        
                           
                           Nonlinear network flow model tackled by Mixed Integer Nonlinear Programming.


                        
                        
                           
                           Linearization issues and opportunities.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Networks

Mixed Integer Nonlinear Programming

Combinatorial optimization

Global optimization

@&#ABSTRACT@&#


               
               
                  In this article we survey mathematical programming approaches to problems in the field of drinking water distribution network optimization. Among the predominant topics treated in the literature, we focus on two different, but related problem classes. One can be described by the notion of network design, while the other is more aptly termed by network operation. The basic underlying model in both cases is a nonlinear network flow model, and we give an overview on the more specific modeling aspects in each case. The overall mathematical model is a Mixed Integer Nonlinear Program having a common structure with respect to how water dynamics in pipes are described. Finally, we survey the algorithmic approaches to solve the proposed problems and we discuss computation on various types of water networks.
               
            

@&#INTRODUCTION@&#

In classic network flow problems the task is to route a flow through a network from a set of sources to a set of sinks. This point of view can become coarse when dealing with pressurized water networks, where the fluid is transported in pipes with no air contact and thus possibly varying pressure levels. A first step toward accurately modeling the physical aspects of such networks, is the introduction of pressure variables at nodes in addition to flow variables on arcs. In this modeling enhancement, what actually induces a flow between two nodes is explained by a pressure difference. To subsume a broader field of applications, the additional variables in such approaches are also referred to as node potentials, including as well the electric potential of a point in an electric circuit. Pressure again is an important quantity in gas networks. In drinking water distribution network optimization, such a modeling approach has experienced eminent interest in order to develop physically sound models for real-world applications. The drawback of the resulting accuracy gain is the fact that the relation between flow and potential difference usually leads to nonlinear equations. Together with discrete decisions that can be made regarding different network elements, this puts the optimization tasks faced here in the context of Mixed Integer Nonlinear Programming (MINLP).

In the following we focus on surveying topics related to the optimization of drinking water distribution networks. We will drop the attributes drinking and distribution and for this text establish the convention that the term water networks subsumes anything that is named by drinking water distribution networks, water supply systems, or combinations of the two. Other types of water networks, such as waste water networks (Rauch and Harremoës, 1999) or water usage and treatment networks in chemical plants (Huang, Chang and Ling, 1999) are not considered here. Moreover, we point out that besides design and operation there are other topics related to the optimization of water networks, for example the containment detection problem (Lorenz, Laird, Biegler and Van Bloemen Waanders, 2006) or topics related to water quality management (Rossman and Boulos, 1996), which are not covered here. The term network underlines the fact that we deal with applications in which the underlying structure can be modeled by a graph in a mathematical sense. Out of the different stages into which water network optimization can be subdivided, we focus on the somewhat different tasks of optimal design of water networks on the one hand and optimal operation of water networks on the other. On both sides, one assumes to have an underlying network with a fixed topology, i.e., a fixed set of nodes and arcs representing sources, sinks, pipes, pumps, valves, and tanks. The former of the two optimization tasks, i.e., the design problem, usually disregards pumps, valves and tanks. One then seeks to choose for each pipe in the network a diameter among a discrete set of commercially available diameters in a cost-minimal way, while maintaining the satisfiability of all costumer demands located at sinks. The diameter has an important impact not only on the pipe’s capacity, but also on the pressure distribution in the network. The operation problem instead typically assumes fixed pipe diameters but allows for the modeling of pumps, valves, and tanks. The task is then to operate pumps and valves, which again affect flow and pressure distribution, over a certain time horizon in order to satisfy the customer demands, while minimizing the operational costs mainly arising from power consumption of pumps. In its full-scale form, the operation problem hence incorporates the aspect of time into the model and is thus a dynamic problem. Conversely, in order to model the design problem, no time parameter is neither needed nor generally used in the literature, which is why we consider it a static problem.

The fact that active elements (pumps, valves, and tanks) are disregarded in design problems, and that there are only passive elements (pipes), is prevalent in the literature, although this does not necessarily have to be so. However, unifying design and operational phases in a single model bears some difficulties, and we will address this issue shortly in Section 5.3.

In spite of these differences, there are still some obvious similarities from a mathematical point of view, due to the way water dynamics in a pipe is described. Typically, the majority of the arcs in a network is constituted by pipes, and the equation associated with a pipe will be at the heart of the present survey. As mentioned earlier, the problems we consider here belong to the class of MINLPs and, in their general form, they involve two sources of non-convexity to model the flow of water into pipes (depending on the pressure difference at the nodes) and to deal with discrete choices. Thus, both water network design and operation are NP-hard problems, and in the present paper we are interested in mathematical programming approaches, i.e., methods that explicitly use a mathematical programming model. Those methods exploit (different variants of) different algorithmic paradigms to solve MINLPs, including Mixed Integer Linear Programming (MILP) techniques. We try to provide an overview of how different techniques succeed in different situations.

In the last decade, MINLP approaches have experienced increasing popularity, whereas before that, optimization problems related to water networks were prevalently attacked by (meta-)heuristic methods, see, e.g., da Conceição Cunha and Ribeiro (2004) and De Corte and Sörensen (2012), without explicitly using a mathematical programming formulation. In the following, we do not dwell on the variety of those heuristic approaches that exist in the field. For a broader discussion of topics related to water networks that covers also aspects that are not of algorithmic nature, we refer the reader to Coelho and Andrade-Campos (2014). Finally, it is worth mentioning the existence of Partial Differential Equation (PDE) approaches in the field of water network optimization, see, e.g. Laird, Biegler and Van Bloemen Waanders (2007), reflecting the fluid-dynamic nature of the topic. Again, this is outside the scope of the present survey.

To begin with, we present the main modeling aspects found in the literature concerning the design and the operation problems. Regarding the various network elements, different variants at different levels of detail can be found. The most detailed modeling description of the relevant aspects is provided in Burgschweiger, Gnädig and Steinbach (2009b). A network is naturally represented by a directed graph 
                        
                           G
                           =
                           (
                           N
                           ,
                           A
                           )
                           ,
                        
                      where nodes stand for sources and sinks and arcs stand for pipes, pumps, and valves. Tanks are usually modeled as nodes, but this is not always true, see, e.g., Morsi, Geißler and Martin (2012).

A main difference between the design and the operation problems is of course the contrast between the static and the dynamic setting. In the latter, in principle all variables and parameters can be made continuous-time dependent on t ∈ [0, T], where 
                           
                              [
                              0
                              ,
                              T
                              ]
                              ⊂
                              R
                           
                         is the considered time horizon. However, to get a tractable optimization model, time is usually discretized and the quantities depend on the discrete time period n ∈ {1, …, N} of length τ ∈ {τ
                        1, …, τN
                        }. A typical planning horizon is one day, divided in 24 hourly periods. In Burgschweiger, Gnädig and Steinbach (2009b) it is pointed out that the discretization has another practical motivation. Namely, demand forecasts and electricity price tariffs are usually given for discrete and not continuous time. In the following we will highlight the time dependency of variables or parameters with a superscript n only when different periods are involved in an equation or constraint. Otherwise, the equation usually has to be imposed in every time period. In a static setting there is of course no time dependency to be highlighted. In any case, we introduce a flow variable qa
                         on each arc 
                           
                              a
                              ∈
                              A
                           
                        . By allowing the flow to take negative values, a directed graph accounts for its both possible directions: a positive flow qa
                         on an arc a = (i, j) means that it goes from i to j, while a negative value of qa
                         stands for a flow of amount |qa
                        | from j to i. It is as well possible to allow only positive flow values and account for the directions with a binary variable.

From classical network flow problems one inherits the flow conservation constraints. For a node 
                           
                              i
                              ∈
                              N
                           
                         with demand di
                        , which for the moment is assumed to be a constant, and the set of incoming and outgoing arcs, 
                           
                              δ
                              i
                              −
                           
                         and 
                           
                              
                                 δ
                                 i
                                 +
                              
                              ,
                           
                         respectively, one has the linear constraint

                           
                              (1)
                              
                                 
                                    
                                       ∑
                                       
                                          a
                                          ∈
                                          
                                             δ
                                             i
                                             −
                                          
                                       
                                    
                                    
                                       q
                                       a
                                    
                                    −
                                    
                                       ∑
                                       
                                          a
                                          ∈
                                          
                                             δ
                                             i
                                             +
                                          
                                       
                                    
                                    
                                       q
                                       a
                                    
                                    =
                                    
                                       d
                                       i
                                    
                                    .
                                 
                              
                           
                        Sinks have a positive demand, which means that water actually leaves the network at those nodes. At sources, often called reservoirs in the water context, constraint (1) is usually not imposed. Otherwise, one can model di
                         as a variable that can assume only non-positive values, possibly bounded from below. Of course, there can be nodes with zero demands. Sometimes all nodes with positive or zero demand are called junctions. In real-world applications, there is usually uncertainty in the data, for example in the demand di
                        . This aspect has been addressed in (meta)heuristic approaches, see, e.g., Babayan, Kapelan, Savic and Walters (2005). However, in the Mathematical Programming literature, which is focus of the present paper, it has been very rarely taken into account. Thus, in this survey we consider approaches that assume deterministic data for the demands, which is, in any case, quite reasonable because generally one wants to establish a network design or operation that is feasible also in worst-case scenarios.

Next, one introduces the node potential variables hi
                        , 
                           
                              i
                              ∈
                              N
                              ,
                           
                         representing the hydraulic head of the water at a node. This variable represents the pressure: In fluid dynamics, total head is the total energy per unit weight of fluid and is the sum of potential energy (elevation), pressure energy due to the pressure exerted on its container (pressure) and kinetic energy (velocity head). Consistent with this definition, total head and pressure are expressed dimensionally as a length. Due to the small value of velocity head in relation to the other two terms of the sum, the velocity head is generally neglected and the total head is assimilated to the hydraulic head, given by the sum of elevation and pressure.

A set of constraints that is regularly found in diverse optimization approaches arises from the fact that the two groups of variables introduced above are typically bounded. The absolute value of the flow is bounded from above due to the capacity of the arcs. For example, taking into account the maximum flow velocity that is allowed in a pipe a, 
                           
                              
                                 v
                                 a
                                 max
                              
                              ,
                           
                         the flow bound can be written (Bragalli, D’Ambrosio, Lee, Lodi and Toth, 2012) as

                           
                              (2)
                              
                                 
                                    −
                                    
                                       π
                                       4
                                    
                                    
                                       v
                                       a
                                       max
                                    
                                    
                                       D
                                       a
                                       2
                                    
                                    ≤
                                    
                                       q
                                       a
                                    
                                    ≤
                                    
                                       π
                                       4
                                    
                                    
                                       v
                                       a
                                       max
                                    
                                    
                                       D
                                       a
                                       2
                                    
                                    ,
                                 
                              
                           
                        where Da
                         is the diameter of pipe a. The node potentials have to stay between certain bounds in order to guarantee minimum and maximum pressure levels at the nodes. Usually, the node potentials are fixed at source nodes, reflecting the fact that at sources water is not pressurized, but it exploits a fixed geographical height. We will see in Section 6 that the bounds on the potential values often constitute the physical bottleneck in a water network.

Typically, the majority of the arcs in a network represents pipes in which water is transported from one node to another, and this transportation is induced by different potentials at the nodes. The fundamental equation for a pipe a = (i, j) is the head-loss equation, also denominated potential-flow coupling constraint in Fügenschuh and Humpola (2013b) (and we will use this term in the following), that is regularly of the form

                           
                              (3)
                              
                                 
                                    
                                       h
                                       i
                                    
                                    −
                                    
                                       h
                                       j
                                    
                                    =
                                    
                                       Φ
                                       a
                                    
                                    
                                       (
                                       
                                          q
                                          a
                                       
                                       )
                                    
                                    ,
                                 
                              
                           
                        where 
                           
                              
                                 Φ
                                 a
                              
                              :
                              R
                              →
                              R
                           
                         is a strictly increasing uneven function, concave on the negative half-axis of its domain and convex on the positive half-axis, see Fig. 1
                        . The induced flow is not linear in the potential difference because this kind of function accounts for the modeling of friction in the pipes. A positive flow as a function of the potential difference is strictly increasing but concave: higher flow values mean higher influence of friction. The other way round, for the same reason, a positive potential loss as a function of the flow is strictly increasing and convex. Equation (3) is also referred to as the potential-loss equation, because it describes the pressure, or equivalently the energy, loss along a pipe. It is easy to see that once constraints (3) are embedded in a mathematical programming problem, the latter becomes non-convex. This is the case in most of the models we consider in this article.

Explicit forms of the potential-flow coupling equation are the so-called Darcy–Weisbach equation,

                           
                              (4)
                              
                                 
                                    
                                       h
                                       i
                                    
                                    −
                                    
                                       h
                                       j
                                    
                                    =
                                    
                                       
                                          sign
                                          
                                             (
                                             
                                                q
                                                a
                                             
                                             )
                                          
                                          
                                             q
                                             a
                                             2
                                          
                                          ·
                                          8
                                          ·
                                          
                                             L
                                             a
                                          
                                          ·
                                          
                                             λ
                                             a
                                          
                                       
                                       
                                          
                                             π
                                             2
                                          
                                          g
                                          ·
                                          
                                             D
                                             a
                                             5
                                          
                                       
                                    
                                    ,
                                 
                              
                           
                        or the Hazen–Williams equation,

                           
                              (5)
                              
                                 
                                    
                                       h
                                       i
                                    
                                    −
                                    
                                       h
                                       j
                                    
                                    =
                                    
                                       
                                          sign
                                          
                                             (
                                             
                                                q
                                                a
                                             
                                             )
                                          
                                          
                                             
                                                |
                                                
                                                   q
                                                   a
                                                
                                                |
                                             
                                             
                                                1.852
                                             
                                          
                                          ·
                                          10.7
                                          ·
                                          
                                             L
                                             a
                                          
                                       
                                       
                                          
                                             k
                                             a
                                             
                                                1.852
                                             
                                          
                                          
                                             D
                                             a
                                             
                                                4.87
                                             
                                          
                                       
                                    
                                    ,
                                 
                              
                           
                        both of which include some constants like the gravitational acceleration g, or ones depending on the pipe, such as the length La
                         or the roughness coefficient ka
                         depending on the material of the pipe. In the denominator appears the diameter Da
                         of a pipe, which in optimal water network design becomes a discrete variable but stays a constant in the operation case. The friction factor λa
                         = λa
                        (qa
                        ) actually depends on the Reynolds number, which in turn depends on the flow, in a nonlinear, but continuous manner. There are several, partly implicit formulas treating the relation between friction factor and Reynolds number, for details see again Burgschweiger, Gnädig and Steinbach (2009b). The most simplifying approximation neglects the dependency of the friction factor on the flow and thus treats the friction factor as a constant. This is done in most optimization models, see, e.g., Gleixner, Held, Huang and Vigerske (2012) and Verleye and Aghezzaf (2013), but sometimes also in simulation models. It can however be kept in the model, see, e.g., Morsi, Geißler and Martin (2012). As well in the Hazen–Williams equation, the dependency of the pressure drop on the flow is limited to the term sign(qa
                        )|qa
                        |1.852 (there is a dependency on the diameter and the roughness coefficient though). Another downside of the above head-loss equations can arise when studying their differentiability for qa
                         = 0. The second derivative of the Darcy–Weisbach function is discontinuous at the origin, while the Hazen–Williams equation is not even second order differentiable there. This can create problems when relying on derivative-based optimization methods as in Burgschweiger, Gnädig and Steinbach (2009b), which is why therein is used some kind of second order polynomial approximation of the Darcy–Weisbach equation with constant friction factor. The Darcy–Weisbach equation is often found with the substitution 
                           
                              sign
                              
                                 (
                                 
                                    q
                                    a
                                 
                                 )
                              
                              
                                 q
                                 a
                                 2
                              
                              =
                              
                                 q
                                 a
                              
                              
                                 |
                                 
                                    q
                                    a
                                 
                                 |
                              
                           
                        . The coefficients of the Hazen–Williams equation are based on empirical data, while the Darcy–Weisbach equation is a theoretical formula. To the best of our knowledge, there is no computational study about the accuracy in the final results of using either formula in the context of the design and operation problems we consider in this text.

The pipe models seen so far assume a constant flow in a pipe, which is natural in a stationary setting. When dealing with a dynamic problem, this can be modeled even more accurately. A pipe model that allows for varying flow inside a pipe is based on the so-called water hammer equations, see, e.g. Ghidaoui, Zhao, McInnis and Axworthy (2005). This set of partial differential equations describes the variation of the state vector (q, h) in function of time and space (index a is dropped here),

                           
                              (6)
                              
                                 
                                    
                                       
                                          ∂
                                          h
                                       
                                       
                                          ∂
                                          t
                                       
                                    
                                    +
                                    
                                       
                                          c
                                          2
                                       
                                       
                                          g
                                          A
                                       
                                    
                                    
                                       
                                          ∂
                                          q
                                       
                                       
                                          ∂
                                          x
                                       
                                    
                                    =
                                    0
                                    ,
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       
                                          ∂
                                          q
                                       
                                       
                                          ∂
                                          t
                                       
                                    
                                    +
                                    g
                                    A
                                    
                                       
                                          ∂
                                          h
                                       
                                       
                                          ∂
                                          x
                                       
                                    
                                    =
                                    −
                                    λ
                                    
                                       
                                          q
                                          |
                                          q
                                          |
                                       
                                       
                                          2
                                          D
                                          A
                                       
                                    
                                    ,
                                 
                              
                           
                        again with some coefficients among which are the diameter D and the cross-sectional area A of a pipe, the propagation speed of the pressure wave c and the friction factor λ, as before possibly depending on the Reynolds number. Note that when one assumes constant pressure and flow over time, i.e., turns to the static case, constraint (6) implies constant flow in the pipe, and constraint (7) becomes the Darcy–Weisbach equation with 
                           
                              
                                 ∂
                                 h
                              
                              
                                 ∂
                                 x
                              
                           
                         approximated by 
                           
                              
                                 
                                    h
                                    j
                                 
                                 −
                                 
                                    h
                                    i
                                 
                              
                              
                                 L
                                 a
                              
                           
                        .

Here, just like the time dimension, that, as already mentioned, is usually discretized in optimization models, the same can be done in space, for example by implicit box schemes, see, e.g., Kolb and Lang (2012). However, a slight modification of the underlying graph model is necessary, see, e.g., Morsi, Geißler and Martin (2012). In fact, the flow in a pipe a = (i, j) is not constant anymore, so a single variable qa
                         is not appropriate. Choosing the length of a pipe as spatial step size in the discretization scheme results in one flow value at the beginning of a pipe, as well as one at the end. This can be modeled by intermediate nodes. For node 
                           
                              i
                              ∈
                              N
                           
                         let 
                           
                              δ
                              i
                              −
                           
                         denote the set of incoming pipes and 
                           
                              δ
                              i
                              +
                           
                         the set of outgoing ones. Then, consider the additional nodes 
                           
                              
                                 i
                                 a
                              
                              ,
                              
                              a
                              ∈
                              
                                 (
                                 
                                    δ
                                    i
                                    −
                                 
                                 ∪
                                 
                                    δ
                                    i
                                    +
                                 
                                 )
                              
                              ,
                           
                         which can be imagined to be attached to the graph between the original node and the corresponding incident arc. We then have two flow variables per pipe per time step, 
                           
                              q
                              
                                 
                                    i
                                    a
                                 
                              
                              n
                           
                         and 
                           
                              q
                              
                                 
                                    j
                                    a
                                 
                              
                              n
                           
                        . With this, the discretized versions of (6) and (7) for a pipe a = (i, j) become

                           
                              (8)
                              
                                 
                                    
                                       
                                          
                                             h
                                             i
                                             
                                                n
                                                +
                                                1
                                             
                                          
                                          +
                                          
                                             h
                                             j
                                             
                                                n
                                                +
                                                1
                                             
                                          
                                       
                                       
                                          2
                                          
                                             τ
                                             n
                                          
                                       
                                    
                                    −
                                    
                                       
                                          
                                             h
                                             i
                                             n
                                          
                                          +
                                          
                                             h
                                             j
                                             n
                                          
                                       
                                       
                                          2
                                          
                                             τ
                                             n
                                          
                                       
                                    
                                    +
                                    
                                       
                                          c
                                          2
                                       
                                       
                                          g
                                          A
                                       
                                    
                                    ·
                                    
                                       
                                          
                                             q
                                             
                                                
                                                   j
                                                   a
                                                
                                             
                                             
                                                n
                                                +
                                                1
                                             
                                          
                                          −
                                          
                                             q
                                             
                                                
                                                   i
                                                   a
                                                
                                             
                                             
                                                n
                                                +
                                                1
                                             
                                          
                                       
                                       
                                          L
                                          a
                                       
                                    
                                    =
                                    0
                                    ,
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      q
                                                      
                                                         
                                                            i
                                                            a
                                                         
                                                      
                                                      
                                                         n
                                                         +
                                                         1
                                                      
                                                   
                                                   +
                                                   
                                                      q
                                                      
                                                         
                                                            j
                                                            a
                                                         
                                                      
                                                      
                                                         n
                                                         +
                                                         1
                                                      
                                                   
                                                
                                                
                                                   2
                                                   
                                                      τ
                                                      n
                                                   
                                                
                                             
                                             −
                                             
                                                
                                                   
                                                      q
                                                      
                                                         
                                                            i
                                                            a
                                                         
                                                      
                                                      n
                                                   
                                                   +
                                                   
                                                      q
                                                      
                                                         
                                                            j
                                                            a
                                                         
                                                      
                                                      n
                                                   
                                                
                                                
                                                   2
                                                   
                                                      τ
                                                      n
                                                   
                                                
                                             
                                             +
                                             g
                                             A
                                             
                                                
                                                   
                                                      h
                                                      
                                                         j
                                                      
                                                      
                                                         n
                                                         +
                                                         1
                                                      
                                                   
                                                   −
                                                   
                                                      h
                                                      
                                                         i
                                                      
                                                      
                                                         n
                                                         +
                                                         1
                                                      
                                                   
                                                
                                                
                                                   L
                                                   a
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                             =
                                             −
                                             
                                                1
                                                
                                                   2
                                                   D
                                                   A
                                                
                                             
                                             
                                                (
                                                
                                                   
                                                      λ
                                                      
                                                         (
                                                         |
                                                         
                                                            q
                                                            
                                                               
                                                                  i
                                                                  a
                                                               
                                                            
                                                            
                                                               n
                                                               +
                                                               1
                                                            
                                                         
                                                         |
                                                         )
                                                      
                                                      
                                                         q
                                                         
                                                            
                                                               i
                                                               a
                                                            
                                                         
                                                         
                                                            n
                                                            +
                                                            1
                                                         
                                                      
                                                      |
                                                      
                                                         q
                                                         
                                                            
                                                               i
                                                               a
                                                            
                                                         
                                                         
                                                            n
                                                            +
                                                            1
                                                         
                                                      
                                                      |
                                                   
                                                   2
                                                
                                                +
                                                
                                                   
                                                      λ
                                                      
                                                         (
                                                         |
                                                         
                                                            q
                                                            
                                                               
                                                                  j
                                                                  a
                                                               
                                                            
                                                            
                                                               n
                                                               +
                                                               1
                                                            
                                                         
                                                         |
                                                         )
                                                      
                                                      
                                                         q
                                                         
                                                            
                                                               j
                                                               a
                                                            
                                                         
                                                         
                                                            n
                                                            +
                                                            1
                                                         
                                                      
                                                      |
                                                      
                                                         q
                                                         
                                                            
                                                               j
                                                               a
                                                            
                                                         
                                                         
                                                            n
                                                            +
                                                            1
                                                         
                                                      
                                                      |
                                                   
                                                   2
                                                
                                                )
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

While Equation (8) is linear, (9) is not, just like its static counterpart (3).

On the design side, the problem that is usually attacked disregards pumps and thus assumes that the underlying network is gravity-fed. In other words, a source node has a higher elevation than the nodes to which it induces a flow. If a network is fed with groundwater so that gravity does not suffice, or if the flow has to be transported over very long distances and hence loses too much pressure along an arc in order to satisfy the required minimum pressure level at the end node, certain node potentials have to be raised. This can be done by pumps. Moreover, on the operational side pumps can serve to fill tanks for intermediate storage purposes (see below).

A pump is usually modeled as an arc a = (i, j), so in particular there is a flow qa
                         passing through it. In comparison to pipes, pumps have a negligible length and thus the matter of constant or variable flow in a pump is not encountered. The flow through a pump is usually restricted in sign, that is, qa
                         ≥ 0, allowing for flows from i to j only. Usually, the flow through a pump is considered semicontinuous, that is, either zero or in an interval 
                           
                              [
                              
                                 
                                    q
                                    ̲
                                 
                                 a
                              
                              ,
                              
                                 
                                    q
                                    ¯
                                 
                                 a
                              
                              ]
                              ,
                           
                         with 
                           q
                         
                        
                           a
                         > 0. This already shows the need of a binary variable xa
                         for a pump, switching on the pump (xa
                         = 1) or switching it off (xa
                         = 0), i.e., acting like a closed valve (qa
                         = 0, see below).

In the context of gas networks, the authors in Fügenschuh and Humpola (2013b) present an elegant overall MINLP formulation for network flow problems exploiting a rather simple static model for potential raising elements, i.e., pumps in the context of water networks. The potential-flow coupling equation in Fügenschuh and Humpola (2013b) has the explicit form 
                           
                              
                                 h
                                 i
                              
                              −
                              
                                 h
                                 j
                              
                              =
                              
                                 α
                                 a
                              
                              
                                 q
                                 a
                              
                              
                                 
                                    |
                                    
                                       q
                                       a
                                    
                                    |
                                 
                                 
                                    η
                                    a
                                 
                              
                              ,
                           
                         where αa
                         and ηa
                         summarize all the physical aspects of flow and pipe. The potential loss on the left-hand side is manipulated into a potential raise by multiplying the whole equation by minus one and adding a variable operating term,

                           
                              (10)
                              
                                 
                                    
                                       h
                                       j
                                    
                                    −
                                    
                                       h
                                       i
                                    
                                    =
                                    −
                                    
                                       α
                                       a
                                    
                                    
                                       q
                                       a
                                    
                                    
                                       
                                          |
                                          
                                             q
                                             a
                                          
                                          |
                                       
                                       
                                          η
                                          a
                                       
                                    
                                    +
                                    
                                       β
                                       a
                                    
                                    
                                       y
                                       a
                                    
                                    .
                                 
                              
                           
                        Here, βa
                         is a positive scaling factor that subsumes the physical characteristics of the pump and ya
                         is a non-negative variable. Thus, the product βaya
                         represents the increment of the hydraulic head of node i due to pump operation plus the head loss through the pipe. This means that instead of losing some potential along the arc representing a pump, at its head node, the flow can have a potential value strictly higher than the one at its tail node. In other words, although the flow is going from i to j, we can have hj
                         > hi
                        . The same equation with βaya
                         ≤ 0 can be used to model network elements that are able to reduce the pressure in some way.

A different pump model tries to replicate the characteristic curve of a pump. More precisely, for a pump a = (i, j), the potential raise can be written as

                           
                              (11)
                              
                                 
                                    
                                       h
                                       j
                                    
                                    −
                                    
                                       h
                                       i
                                    
                                    =
                                    Δ
                                    
                                       H
                                       a
                                    
                                    −
                                    
                                       γ
                                       a
                                       1
                                    
                                    
                                       q
                                       a
                                       
                                          γ
                                          a
                                          2
                                       
                                    
                                    ,
                                 
                              
                           
                        where the parameters 
                           
                              Δ
                              
                                 H
                                 a
                              
                              ,
                              
                                 γ
                                 a
                                 1
                              
                           
                         and 
                           
                              γ
                              a
                              2
                           
                         are chosen to approximate empirical pump data. A typical characteristic curve is shown in Fig. 2
                        . There are also pumps that operate at variable speed wa
                         ≥ 0. Basically, this quantity allows to shift the pump’s characteristic curve in the plane and thus to manipulate the relation between potential raise and flow through the pump. The above equation becomes

                           
                              (12)
                              
                                 
                                    
                                       h
                                       j
                                    
                                    −
                                    
                                       h
                                       i
                                    
                                    =
                                    
                                       w
                                       a
                                       2
                                    
                                    
                                       (
                                       Δ
                                       
                                          H
                                          a
                                       
                                       −
                                       
                                          γ
                                          a
                                          1
                                       
                                       
                                          
                                             (
                                             
                                                
                                                   q
                                                   a
                                                
                                                
                                                   w
                                                   a
                                                
                                             
                                             )
                                          
                                          
                                             γ
                                             a
                                             2
                                          
                                       
                                       )
                                    
                                    .
                                 
                              
                           
                        
                     

Also for a variable-speed pump the parameters of their characteristic curve are estimated through empirical data of the pump working at its nominal speed (wa
                         = 1). Equation (11) describes fixed-speed pumps that work at their nominal speed only. Instead, second order polynomials are used to fit the characteristic curve of a pump in Verleye and Aghezzaf (2013).

The obvious differences between the model approaches (10) and (11)/(12) can be explained by the discrepancy between network design and network operation. When designing a network, the pump to be installed might be chosen from a certain production series. A typical pressure raise that can be realized by the pumps of such a series is shown schematically in Fig. 3
                        . A very simple way to model this operation range is actually Equation (10). Things change when considering the task to operate an already existing pump in an existing network. This pump is already chosen and has its own specific characteristic curve, which can be modeled quite accurately, for example by Equations (11) or (12), respectively.

Another important quantity in the context of pumps is their power consumption pa
                        , which often appears in the objective function. The power consumption can be modeled as proportional to the product of the pressure raise of a pump and the flow through it, which adds a nonlinear equality constraint as in Gleixner, Held, Huang and Vigerske (2012). Otherwise, an equation similar to (12) or again a polynomial of degree two is fitted to empirical pump data at nominal speed.

Pumps are part of the active elements in a network and thus they allow for some discrete decision, that is, turning them on or off. Being turned on or off has implications on two aspects, one of which is the already mentioned semi-continuity of the flow variables. The same is valid in an analogous fashion also for the speed of pumps wa
                        . The second aspect concerns the potential-flow coupling equations (10)–(12), that are to be imposed only when the pump is working (xa
                         = 1). When xa
                         = 0, the pump is not working, and in this case it is usually regarded to act as a closed valve (see below). The potential values at the two ends of the arc are then uncoupled and do not follow any equation.

In order to avoid these combinatorial aspects, the authors in Burgschweiger, Gnädig and Steinbach (2009b) make some modeling modifications. A single pump a = (i, j) in a graph often models an aggregation of real pumps in the network. The individual pumps in such a pumping station a = (i, j) have a common pressure raise hj
                         − hi
                        , but the flow qa
                         through the pumping station is the sum of the individual flows. Approximately, the pressure raise of a pumping station becomes a degree of freedom independent of the aggregated flow value. To accurately measure the power consumption of such a pumping station, additional considerations about its efficiency are made. But all in all, the benefit is that there are no equations that have to be turned on or off.

Another set of active elements is given by valves. As for pumps, a valve is modeled by an arc a = (i, j) with negligible length. There are models for different types of valves with no unified terminology in the literature. The authors in Morsi, Geißler and Martin (2012) for example consider a total of four different types of valves. Valves can be used to actively block the flow completely or to reduce the pressure or the flow in its direction by a variable amount. They are usually modeled by a binary variable xa
                        . As an example consider the (rather simple) valve type that can be used to separate two pipes, that is, to avoid that fluid can pass between the two of them. If 
                           
                              
                                 
                                    q
                                    ̲
                                 
                                 a
                              
                              ,
                              
                                 
                                    q
                                    ¯
                                 
                                 a
                              
                              ,
                              
                                 
                                    h
                                    ̲
                                 
                                 i
                              
                              ,
                              
                                 
                                    h
                                    ¯
                                 
                                 i
                              
                              ,
                              
                                 
                                    h
                                    ̲
                                 
                                 j
                              
                           
                         and 
                           
                              
                                 h
                                 ¯
                              
                              j
                           
                         denote the upper and lower bounds of the flow and potentials, an open (xa
                         = 1) or closed (xa
                         = 0) valve state can be modeled by the big-M constraints

                           
                              (13)
                              
                                 
                                    
                                       
                                          q
                                          ̲
                                       
                                       a
                                    
                                    
                                       x
                                       a
                                    
                                    ≤
                                    
                                       q
                                       a
                                    
                                    ≤
                                    
                                       
                                          q
                                          ¯
                                       
                                       a
                                    
                                    
                                       x
                                       a
                                    
                                    ,
                                 
                              
                           
                        
                        
                           
                              (14)
                              
                                 
                                    
                                       (
                                       
                                          
                                             h
                                             ̲
                                          
                                          i
                                       
                                       −
                                       
                                          
                                             h
                                             ¯
                                          
                                          j
                                       
                                       )
                                    
                                    
                                       (
                                       1
                                       −
                                       
                                          x
                                          a
                                       
                                       )
                                    
                                    ≤
                                    
                                       h
                                       i
                                    
                                    −
                                    
                                       h
                                       j
                                    
                                    ≤
                                    
                                       (
                                       
                                          
                                             h
                                             ¯
                                          
                                          i
                                       
                                       −
                                       
                                          
                                             h
                                             ̲
                                          
                                          j
                                       
                                       )
                                    
                                    
                                       (
                                       1
                                       −
                                       
                                          x
                                          a
                                       
                                       )
                                    
                                    .
                                 
                              
                           
                        
                     

A closed valve forces the flow to be zero and decouples the two potentials, while an open valve forces the potential values to be equal.

Again in Burgschweiger, Gnädig and Steinbach (2009b), the authors model one specific valve type without auxiliary binary variables. Namely, the valve type considered allows to reduce the pressure by a variable amount, but only in the direction of the flow. This behavior is guaranteed by the inequality

                           
                              (15)
                              
                                 
                                    
                                       (
                                       
                                          h
                                          i
                                       
                                       −
                                       
                                          h
                                          j
                                       
                                       )
                                    
                                    
                                       q
                                       a
                                    
                                    ≥
                                    0
                                    .
                                 
                              
                           
                        
                     

Tanks can make the operation of the network more flexible. In a dynamic setting, where the demand at consumer nodes can vary in time, water can be stored in a tank during a period of low demand and be extracted from it to satisfy peak demands. In the static setting of Gleixner, Held, Huang and Vigerske (2012) tanks are modeled as nodes in the graph that have a variable demand, which can also be negative so as to account for a positive initial tank filling. The water in a tank is usually not pressurized, which means the pressure head is zero, so that the potential value hi
                         represents the elevation head only. Accordingly, in Gleixner, Held, Huang and Vigerske (2012) the potential value of the tanks is kept fixed as for reservoirs. In a dynamic setting, variable potential values can be used to describe the filling level of the tank at different points in time, which can then be linked to the tank’s variable demand of a time period. A simplified version of the model for tank 
                           
                              i
                              ∈
                              N
                           
                         in Burgschweiger, Gnädig and Steinbach (2009b) is given, for example, by

                           
                              (16)
                              
                                 
                                    
                                       ∑
                                       
                                          a
                                          ∈
                                          
                                             δ
                                             i
                                             −
                                          
                                       
                                    
                                    
                                       q
                                       a
                                       n
                                    
                                    −
                                    
                                       ∑
                                       
                                          a
                                          ∈
                                          
                                             δ
                                             i
                                             +
                                          
                                       
                                    
                                    
                                       q
                                       a
                                       n
                                    
                                    =
                                    
                                       e
                                       i
                                       n
                                    
                                    ,
                                 
                              
                           
                        
                        
                           
                              (17)
                              
                                 
                                    
                                       e
                                       i
                                       n
                                    
                                    =
                                    
                                       1
                                       
                                          τ
                                          n
                                       
                                    
                                    
                                       (
                                       
                                          h
                                          i
                                          n
                                       
                                       −
                                       
                                          h
                                          i
                                          
                                             n
                                             −
                                             1
                                          
                                       
                                       )
                                    
                                    
                                       A
                                       i
                                    
                                    ,
                                 
                              
                           
                        with 
                           
                              e
                              i
                              n
                           
                         denoting the variable volumetric tank inflow and Ai
                         being the cross-sectional area of the tank. A quite detailed tank model that includes binary variables is found in Verleye and Aghezzaf (2013). Unless the discretized water hammer equations (8) and (9) are used, the tank filling equations constitute the most important point where subsequent time periods are coupled. This fact is exploited, for example, in Ghaddar, Naoum-Sawaya, Kishimoto, Taheri and Eck (2015), in order to apply an algorithm based on Lagrangian decomposition relaxation. Note that it is also possible, see, e.g., Morsi, Geißler and Martin (2012), to model tanks as arcs in the graph, although this is far less common and essentially equivalent.

In this section we outline some algorithmic paradigms widely applied to MINLPs, both convex and non-convex. We actually show those techniques that are useful and have been applied to water network optimization. For a very complete survey on MINLP techniques the reader is referred to Belotti, Kirches, Leyffer, Linderoth, Luedtke and Mahajan (2013).

The most straightforward extension of MILP techniques to the nonlinear case is nonlinear branch and bound. As in branch-and-bound or branch-and-cut schemes for MILP, initially all integer requirements on the variables are relaxed and subsequently forced to be fulfilled by branching. The resulting node problems in a branch-and-bound tree are Nonlinear Programming (NLP) problems, which can be tackled by a variety of different NLP-solvers. In general, to solve such problems to global optimality is NP-hard, so that this is rarely an option in a subproblem of a search tree. However, there are algorithms for solving NLPs to local optimality in a computationally efficient manner (for example interior point methods), and one often has to restrict the algorithm to that in the nodes of a nonlinear branch-and-bound tree. In the case of convex MINLPs, the node problems are convex NLPs and their locally optimal solutions are automatically globally optimal and can be computed in polynomial time. Thus, the optimal solution values of node subproblems can be used for pruning rules in the tree. However, as already mentioned in Section 2.2, for the mathematical models including constraints (3), the nodes’ NLPs are non-convex instead. In that case, pruning a node might be based on an only locally optimal solution, while the globally optimal one is disregarded. In consequence, the solution obtained by the algorithm cannot be guaranteed to be globally optimal either. Nevertheless, nonlinear branch and bound can be applied to non-convex MINLPs as an only heuristic solver. In the context of water network design this has been done in Bragalli, D’Ambrosio, Lee, Lodi and Toth (2012).

Another algorithmic framework for solving convex MINLPs to global optimality is the so-called LP/NLP-based branch and bound, which is a modification of the outer approximation algorithm. In outer approximation, the feasible region of an MINLP is approximated by a polyhedron that is formed by first order Taylor approximations of the nonlinear functions at certain points, also called outer approximation cuts. Provided the nonlinear functions are convex, this results in a mixed integer linear relaxation of the original MINLP, which is solved to optimality. The first order Taylor approximations of the nonlinear functions at the optimal solution are then used to refine the polyhedral relaxation. This process is repeated iteratively, which leads to a series of MILPs being solved. If the set of points of which the corresponding outer approximation cuts are added to the MILP is populated by the “correct” points, at some iteration the refined polyhedron will suffice to solve the MINLP to global optimality.

The above algorithmic scheme is able to provide globally optimal solutions to convex MINLPs, basically because the first order Taylor approximations of convex functions do not cut off any part of the feasible region, while this is not true for non-convex functions. So also LP/NLP-based branch and bound leads to only heuristic solvers for non-convex MINLPs. The effect of outer approximation cuts on the potential-flow coupling equation (3) is depicted in Fig. 5. (Actually, having a nonlinear equality constraint in this case, the failure of outer approximation cuts to approximate the feasible region can be seen even more drastically than for non-convex inequality constraints.)

Outer approximation is also referred to as a multi-tree method, because in each iteration an MILP is solved by exploring an entire search tree. At each iteration the (same) MILP is slightly modified and again solved by exploring another search tree from scratch. The LP/NLP-based branch and bound, which is implemented for example in FILMINT 
                        (Abishek, Leyffer and Linderoth, 2010) and BONMIN 
                        (Bonami, Biegler, Conn, Cornuéjols, Lee, Lodi, Margot and Sawaya, 2008), aims at reducing this approach into a single search tree. Instead of solving every single MILP to optimality and then adding the corresponding outer approximation cuts, in every integer feasible node of an initial MILP approximation, the corresponding NLP is solved to optimality and the outer approximation cuts corresponding to that optimal point are added. The Linear Programming (LP) relaxation with the newly added cuts is then resolved and the search continues.

Based on this algorithm and outer approximation cuts, a method to solve water network design problems to global optimality, despite containing the non-convex constraints (3), is developed in Raghunathan (2013). This is discussed in Section 4.

As mentioned, solving NLPs to global optimality is a NP-hard task in general. Anyway, one way to do so is to use spatial branching, a paradigm first investigated by the global optimization community. Integrating spatial branching with mixed integer branching techniques opens the possibility of developing general-purpose algorithms that can in principle solve non-convex MINLPs to global optimality. The basic idea of such an algorithm remains to iteratively divide the problem into subproblems and to solve (usually linear) relaxations of these. The division of subproblems though is done not only by branching on integer variables, but also by branching on continuous ones. In other words, in a subproblem of the branching tree the continuous domain of some nonlinear function is divided at some breakpoint into two smaller domains, thus creating two new subproblems. Provided the relaxation of a nonlinear constraint becomes tighter when the domain of the corresponding nonlinear function is reduced, spatial branching gradually refines the relaxations, see Fig. 4
                        . Branching is continued until finally the relaxations are tight enough to provide solutions that are ε-feasible for the original problem.

A way to obtain relaxations of subproblems is to use reformulation techniques aiming for a reformulation of all nonlinear functions into some “basic” functions. For these basic functions, linear relaxations are then readily available. The tightness of the relaxations and thus performance of the algorithm are highly dependent on the bounds on the domains of the nonlinearities. This fact makes an efficient domain propagation between subproblems essential.

Such an algorithm is implemented for example in the MINLP frameworks COUENNE 
                        (Belotti, Lee, Liberti, Margot and Wächter, 2009) or BARON 
                        (Tawarmalani and Sahinidis, 2005). Also the constraint integer programming framework SCIP 
                        (Achterberg, 2009) employs spatial branching if applied to MINLPs, see Berthold, Heinz and Vigerske (2012). In water network optimization, SCIP has been applied in different contexts, as we will see further down.

Another way to approach MINLPs is to approximate all nonlinearities by piecewise linear functions. The advantage is that a piecewise linear function can be modeled by linear constraints in mixed integer variables, which opens the possibility of applying MILP solvers to an approximated MINLP. It has to be clear though that this is only an approximation of the original problem. Therefore, when the MINLP at hand is convex, there are more attractive methods (see above) toward which one usually orients. But when dealing with non-convex MINLPs, piecewise linear approximation becomes an intriguing alternative to expensive and sometimes ineffective MINLP methods. Especially in water network optimization, due to the presence of constraint (3) (among others), MILP approximations have experienced vast attention.

Piecewise linear approximations roughly work as follows. Imagine the domain of a univariate function to be partitioned into several intervals. That function can then be approximated by the line segments connecting the end points of these intervals (the breakpoints), see Fig. 6 a
                        
                        . This simple point of view already makes clear that the accuracy of such an approximation depends on the number of breakpoints.

There are several methods to model univariate piecewise linear functions, such as the so-called incremental method (Markowitz and Manne, 1957) or the convex combination method (Dantzig, 1960). For a comparison of different piecewise linear modeling techniques, particularly applied to nonlinear network flow problems, see Geißler, Martin, Morsi and Schewe (2012). It is also in this context that topics related to special ordered sets of type 2 and therefore developed branching rules came up (Beale and Tomlin, 1970). The piecewise linear modeling techniques have also been extended to multivariate functions, as becomes necessary, e.g., when attempting to approximate the function in (9) as done in Morsi, Geißler and Martin (2012) and Geißler, Kolb, Lang, Leugering, Martin and Morsi (2011). Instead of intervals, the domain of such a function is usually partitioned into several simplices, and over each simplex the function is approximated by an affine function. Some kind of curse of dimension is encountered here because the number of required simplices, that is directly connected to the number of auxiliary binary variables in a mixed-integer formulation, is strongly growing with the dimension of the function’s domain. Therefore, in this context we often find reformulation ideas that increase the number of variables and constraints, but decrease the dimension of the functions to be approximated. A new approach to piecewise linearly approximate higher-dimensional nonlinear functions is proposed in Rovatti, D’Ambrosio, Lodi and Martello (2014).

Anyway, one has to keep in mind that all the above leads to an approximation of the original problem only. This means that the obtained globally optimal solution of the MILP is not necessarily globally or locally optimal for the MINLP. Even worse, it might not even be feasible to the nonlinear constraints. A way to estimate a priori the approximation error and to refine it until it stays inside some desired predefined error bound is proposed in Geißler, Martin, Morsi and Schewe (2012). The authors also show how to use piecewise linear functions to create relaxations of the MINLP instead of approximations only. Basically, the maximum error of an approximation over each simplex is overestimated as tightly as possible, and a continuous variable bounded by this maximum error is added to the function value. The resulting relaxation of this procedure is depicted in Fig. 6 b.

There has also been some effort to integrate MILP and NLP concepts. Very intuitively, by fixing the integer variables to the values of a globally optimal MILP solution, one could solve the remaining NLP to local optimality. This would guarantee at least the feasibility of the solution, but not necessarily its global optimality. For a more detailed idea of how to integrate MILP and NLP in the context of piecewise linear approximations in the context of water networks see Kolb, Morsi, Lang and Martin (2012).


                        Figs. 4 and 6 highlight one big difference between spatial branching and piecewise linear relaxations. In the former case, the refinement of the approximating polyhedra is part of the branching, whereas in the latter case the fragmentation of the respective domain is given a priori and is not changed during the optimization process. However, there is some attempt to overcome this difference by extending the concept of piecewise linear relaxations to an algorithm where the approximation is refined dynamically in order to compute a globally optimal solution for the originally non-convex MINLP. This approach has been investigated in the context of gas networks in Geißler, Morsi and Schewe (2013), which also contains a computational comparison between the proposed approach exploiting piecewise linear approximations and several solvers that use spatial branching techniques.

As mentioned earlier, the combinatorial optimization problems surveyed in this article are in the problem class of non-convex MINLPs. However, a recurring feature is the possibility of solving certain subproblems by convex optimization methods.

Consider a static network as in Section 2 with no active elements and with fixed pipe diameters, that is, a network with a flow variable qa
                      for each arc and a potential variable hi
                      for each node. Denote the set of source nodes by 
                        
                           N
                           src
                        
                      and assume further that the potential values are fixed to some value 
                        
                           h
                           i
                           src
                        
                      at source nodes 
                        
                           i
                           ∈
                           
                              N
                              src
                           
                        
                     . Finally, assume that the flow conservation constraints (1) hold at each non-source node for a given set of fixed demands, and that each arc satisfies a potential-flow coupling equation like (3), where the only requirement about the function 
                        
                           
                              Φ
                              a
                           
                           :
                           R
                           →
                           R
                        
                      is strictly increasing monotonicity. Mathematically, this gives rise to the feasibility problem

                        
                           (18)
                           
                              
                                 
                                    ∑
                                    
                                       a
                                       ∈
                                       
                                          δ
                                          i
                                          −
                                       
                                    
                                 
                                 
                                    q
                                    a
                                 
                                 −
                                 
                                    ∑
                                    
                                       a
                                       ∈
                                       
                                          δ
                                          i
                                          +
                                       
                                    
                                 
                                 
                                    q
                                    a
                                 
                                 =
                                 
                                    d
                                    i
                                 
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 N
                                 ∖
                                 
                                    N
                                    src
                                 
                                 ,
                              
                           
                        
                     
                     
                        
                           (19)
                           
                              
                                 
                                    h
                                    i
                                 
                                 −
                                 
                                    h
                                    j
                                 
                                 =
                                 
                                    Φ
                                    a
                                 
                                 
                                    (
                                    
                                       q
                                       a
                                    
                                    )
                                 
                                 
                                 ∀
                                 
                                 a
                                 ∈
                                 A
                                 ,
                              
                           
                        
                     
                     
                        
                           (20)
                           
                              
                                 
                                    h
                                    i
                                 
                                 =
                                 
                                    h
                                    i
                                    src
                                 
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 
                                    N
                                    src
                                 
                                 ,
                              
                           
                        
                     
                     
                        
                           (21)
                           
                              
                                 
                                    q
                                    a
                                 
                                 ∈
                                 R
                                 
                                 ∀
                                 
                                 a
                                 ∈
                                 A
                                 ,
                              
                           
                        
                     
                     
                        
                           (22)
                           
                              
                                 
                                    h
                                    i
                                 
                                 ∈
                                 R
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 N
                                 ∖
                                 
                                    N
                                    src
                                 
                                 .
                              
                           
                        
                     
                  

A reformulation of the above as a strictly convex optimization problem was originally studied in Collins, Cooper, Helgason, Kennington and LeBlanc (1978). It is shown that the solution space of the above set of 
                        
                           |
                           A
                           |
                           +
                           |
                           N
                           |
                        
                      equations in the same number of variables has a unique solution.

A slightly different version of the problem is studied in Fügenschuh and Humpola (2013b); the flow conservation constraint is imposed at every node (also source nodes) but the node potentials are not fixed at sources. The number of variables and equations stays the same, and the existence of a solution is given for balanced flows only, that is, 
                        
                           
                              ∑
                              
                                 i
                                 ∈
                                 N
                              
                           
                           
                              d
                              i
                           
                           =
                           0
                        
                     . In that case, one flow conservation constraint at a node becomes redundant and the solution is a one-dimensional subspace. More precisely, the vector of flow variables q is unique and the vector of potential values h is on a straight line in 
                        
                           R
                           
                              |
                              N
                              |
                              +
                              |
                              A
                              |
                           
                        
                     . It is easy to deduce that if one fixes the potential at any node, for example a source node, also the potential values become unique here.

The most crucial assumption leading to the striking argument in a potential proof of the uniqueness in both versions is just the monotonicity of the function Φa
                     . More precisely, in absence of the potential-flow coupling constraint (as in classical network flow models), a duplicity of flows can arise in the presence of circles only. By a circle in a graph we mean the existence of two different (not necessarily directed) paths between two nodes. As an illustrating example consider a simple (sub-)graph as in Fig. 7
                     , see also Pilati and Todini (n.d.). (Actually, this is a multigraph, the two arcs a
                     1 and a
                     2 are to be thought of as two different paths from node i to node j.) Flow conservation implies that the relation between the flow values 
                        
                           q
                           
                              a
                              1
                           
                        
                      and 
                        
                           q
                           
                              a
                              2
                           
                        
                      is a line with negative slope, say 
                        
                           
                              q
                              
                                 a
                                 2
                              
                           
                           =
                           Δ
                           −
                           
                              q
                              
                                 a
                                 1
                              
                           
                        
                      for some 
                        
                           Δ
                           ∈
                           R
                        
                     . Taking into account also the potential-flow coupling constraints (3) we get

                        
                           (23)
                           
                              
                                 
                                    Φ
                                    
                                       a
                                       1
                                    
                                 
                                 
                                    (
                                    
                                       q
                                       
                                          a
                                          1
                                       
                                    
                                    )
                                 
                                 =
                                 
                                    Φ
                                    
                                       a
                                       2
                                    
                                 
                                 
                                    (
                                    Δ
                                    −
                                    
                                       q
                                       
                                          a
                                          1
                                       
                                    
                                    )
                                 
                                 .
                              
                           
                        
                     
                  

The function on the right-hand side of (23) is now strictly decreasing in 
                        
                           q
                           
                              a
                              1
                           
                        
                      and as such has exactly one intersection point with the strictly increasing function on the left-hand side. Such considerations and the resulting methods are implemented in widely used software packages like EPANET (http://www.epa.gov/nrmrl/wswrd/ dw/epanet.html), designed for numerically calculating flow and potential values in pressurized water networks.

As already mentioned, problem (18)–(22) represents a network with only pipes with fixed diameters and relaxed bounds on the variables. However, when we allow for discrete variable diameters, the problem occurs also as a leaf problem with relaxed bounds in a branch-and-bound tree, i.e., when all integer variables are fixed. In such a situation, a subproblem of this type can in principle be solved by an NLP-solver that solves to local optimality only. The fact that the bounds are relaxed does not create a problem in the exploitation of this property, because their satisfaction can easily be checked after having obtained a unique solution (as done, e.g., in Raghunathan, 2013). Also when the potential values are not unique but located on a line as in the slightly different version of (18)–(22) studied in Fügenschuh and Humpola (2013b), it is easy to check whether there is one solution inside the bounds. Also in other situations uniqueness of solutions in subproblems can occur. Consider, for example, a network with working pumps that follow Equation (11). Here, the pressure gain hj
                      − hi
                      on arc a = (i, j) is strictly decreasing in the flow qa
                     , meaning that the pressure loss is strictly increasing. This is true in the domain of qa
                     , while if the flow bounds are relaxed, the function has to be extended in such a way that it stays strictly increasing on 
                        R
                     . However, also a network with such pumps has a unique solution in its leafs, i.e., when the discrete decisions on which pumps are actually working and which are switched off have been taken.

The situation becomes different when pumps follow models (10) or (12). What actually happens here is that a degree of freedom is added. In the equation for a fixed-speed pump (11) the pressure rise is uniquely determined by the unique flow through the pump. This is not true for variable-speed pumps, where the pressure rise can be influenced by variation of the speed wa
                     . The same happens for model (10), where the pressure rise can be influenced by variation of the variable ya
                      independently of the flow qa
                     . Uniqueness or just convexity gets lost here. Staying with the previous example, imagine the arc a
                     2 in Fig. 7 to be a pump obeying Equation (10). Equation (23) then becomes

                        
                           (24)
                           
                              
                                 
                                    Φ
                                    
                                       a
                                       1
                                    
                                 
                                 
                                    (
                                    
                                       q
                                       
                                          a
                                          1
                                       
                                    
                                    )
                                 
                                 =
                                 
                                    Φ
                                    
                                       a
                                       2
                                    
                                 
                                 
                                    (
                                    Δ
                                    −
                                    
                                       q
                                       
                                          a
                                          1
                                       
                                    
                                    )
                                 
                                 +
                                 
                                    β
                                    
                                       a
                                       2
                                    
                                 
                                 
                                    y
                                    
                                       a
                                       2
                                    
                                 
                              
                           
                        
                     for some 
                        
                           
                              β
                              
                                 a
                                 2
                              
                           
                           ∈
                           R
                           ,
                        
                      which clearly represents a non-convex subspace of 
                        
                           R
                           2
                        
                     . A remedy, just like in Fügenschuh and Humpola (2013b), is to discretize the degree of freedom, i.e., to allow the variables ya
                      or wa
                      to take values in a discrete set only. Then, when they are fixed to one of these values in a leaf of a branch-and-bound tree, the functions describing the pressure loss are strictly increasing in the flow qa
                      and uniqueness or convexity can be exploited.

We believe that there is a lot of potential in the property of uniqueness or convexity, which has partially been exploited in water network optimization as we will see later. It might also be a key feature when developing techniques for discretized dynamic problems in water network optimization. For example, one can prove uniqueness of the solution when tanks are coupled by an equation of type (17) in a passive network with relaxed bounds considered over several discrete time periods.

In this section we show in more detail what kind of approaches were presented in the literature for solving water network design problems on the one hand, and water network operation problems on the other hand.

On the design side, one specific formulation together with a set of literature and real-world instances has been studied by several authors. As mentioned earlier, active elements like pumps, valves, and tanks are disregarded. In return, we can choose the diameter for each pipe from a discrete set. The formulation basically consists of the flow conservation constraint (1) for each non-source node and the Hazen–Willliams equation (5) for each pipe. The diameter Da
                         on a single pipe a is a variable constrained to belong to a discrete set 
                           
                              {
                              
                                 D
                                 
                                    a
                                    ,
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 D
                                 
                                    a
                                    ,
                                    
                                       r
                                       a
                                    
                                 
                              
                              }
                           
                        . The solutions to the Hazen–Williams equation for some discrete diameters are depicted in Fig. 8
                        .

To each diameter D
                        
                           a, i
                         is associated a positive unit length cost C
                        
                           a, i
                         in such a way that costs increase with the diameter. Finally, there are lower and upper bounds on the flows, cf. (2), as well as lower and upper bounds on the node potentials, and the potentials at source nodes are fixed. In an MINLP formulation, the membership of the diameter to a discrete set can be represented by introducing additional binary variables X
                        
                           a, i
                        , i = 1, …, ra
                         and using SOS-1 type equations,

                           
                              (25)
                              
                                 
                                    
                                       ∑
                                       
                                          i
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          
                                             r
                                             a
                                          
                                       
                                    
                                    
                                       X
                                       
                                          a
                                          ,
                                          i
                                       
                                    
                                    =
                                    1
                                    ,
                                 
                              
                           
                        
                        
                           
                              (26)
                              
                                 
                                    
                                       ∑
                                       
                                          i
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          
                                             r
                                             a
                                          
                                       
                                    
                                    
                                       D
                                       
                                          a
                                          ,
                                          i
                                       
                                    
                                    
                                       X
                                       
                                          a
                                          ,
                                          i
                                       
                                    
                                    =
                                    
                                       D
                                       a
                                    
                                    ,
                                 
                              
                           
                        in which case the objective function becomes 
                           
                              
                                 ∑
                                 
                                    a
                                    ∈
                                    A
                                 
                              
                              
                                 L
                                 a
                              
                              
                                 (
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       
                                          r
                                          a
                                       
                                    
                                 
                                 
                                    C
                                    
                                       a
                                       ,
                                       i
                                    
                                 
                                 
                                    X
                                    
                                       a
                                       ,
                                       i
                                    
                                 
                                 )
                              
                           
                        . As seen in Section 4, if the diameters were fixed, this would result in a convex (feasibility) problem. Convexity does not hold for a variable diameter, especially not when it is discrete. As mentioned, there is a set of nine instances for the design problem, out of which four are smaller literature instances and five are larger real-world ones representing water networks of three Italian cities, one of which is counted three times due to three different diameter sets. The characteristics of the instances are subsumed in Table 1
                        . The set of available diameters is actually the same for each pipe in each instance, i.e., ra
                         is constant for each 
                           
                              a
                              ∈
                              A
                           
                        .

The nonlinear branch-and-bound algorithm implemented in BONMIN 
                        (Bonami et al., 2008) was applied to these instances in Bragalli et al. (2012). Remember that this acts as a heuristic solver for non-convex MINLPs. Several amendments to the model, on the one hand, and to the algorithm itself, on the other hand, were made. In Bragalli et al. (2012) for example a fitted polynomial Ca
                        (Da
                        ) is used as objective function instead of the sum 
                           
                              
                                 ∑
                                 
                                    i
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    
                                       r
                                       a
                                    
                                 
                              
                              
                                 X
                                 
                                    a
                                    ,
                                    i
                                 
                              
                              
                                 C
                                 
                                    a
                                    ,
                                    i
                                 
                              
                           
                         in order to get a smooth function. Moreover, this function usually produces tighter bounds because the optimal cost value for pipe a of some NLP relaxation is a point on the graph of Ca
                        (Da
                        ) instead of just a point in the convex hull of the points 
                           
                              
                                 (
                                 
                                    D
                                    
                                       a
                                       ,
                                       1
                                    
                                 
                                 ,
                                 
                                    C
                                    
                                       a
                                       ,
                                       1
                                    
                                 
                                 )
                              
                              ,
                              …
                              ,
                              
                                 (
                                 
                                    D
                                    
                                       a
                                       ,
                                       
                                          r
                                          a
                                       
                                    
                                 
                                 ,
                                 
                                    C
                                    
                                       a
                                       ,
                                       
                                          r
                                          a
                                       
                                    
                                 
                                 )
                              
                              ,
                           
                         see Fig. 9
                        .

However, the polynomial is not chosen to be an exact fit in the arguments 
                           
                              {
                              
                                 D
                                 
                                    a
                                    ,
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 D
                                 
                                    a
                                    ,
                                    
                                       r
                                       a
                                    
                                 
                              
                              }
                              ,
                           
                         which is why the fitted objective is only used to guide the search in the tree, while the real objective is used to calculate the cost of integer feasible solutions. This is a nice example of how problem specific solution paradigms can give rise to enhancements of general-purpose solvers. Indeed, the option of working with two objective functions was added to the implementation of BONMIN afterward. Also the implementation of proper SOS-1 branching in BONMIN, which can be used instead of the binary requirement of the variables X
                        
                           a, i
                        , was stimulated by the water network design application.

A modified LP/NLP-based branch-and-bound framework that exploits the convexity structure presented in Section 4 is proposed in Raghunathan (2013). This algorithm is then exact for the non-convex design problem. There are three crucial points in the approach. First, each arc in the network is cloned as many times as there are diameters available on it. One therefore gets much more potential-flow coupling constraints, but each of them is given by a univariate function (because the diameter on a cloned arc is fixed, see Fig. 1). Second, for each arc, a record of the flow direction is then kept by explicitly introducing an additional binary variable indicating the direction. The gain of both reformulations above is that the resulting non-convex constraints can easily be relaxed to two convex constraints, because only an either concave or convex part of the function Φ has to be regarded. For example, for a positive flow qa
                         with upper bound 
                           
                              
                                 
                                    q
                                    ¯
                                 
                                 a
                              
                              ,
                           
                         these two constraints are precisely

                           
                              (27)
                              
                                 
                                    
                                       h
                                       i
                                    
                                    −
                                    
                                       h
                                       j
                                    
                                    ≥
                                    
                                       Φ
                                       a
                                    
                                    
                                       (
                                       
                                          q
                                          a
                                       
                                       )
                                    
                                    
                                    and
                                    
                                    
                                    
                                       h
                                       i
                                    
                                    −
                                    
                                       h
                                       j
                                    
                                    ≤
                                    
                                       
                                          
                                             Φ
                                             a
                                          
                                          
                                             (
                                             
                                                
                                                   q
                                                   ¯
                                                
                                                a
                                             
                                             )
                                          
                                       
                                       
                                          
                                             q
                                             ¯
                                          
                                          a
                                       
                                    
                                    ·
                                    
                                       q
                                       a
                                    
                                    .
                                 
                              
                           
                        
                     

This situation is depicted in Fig. 10
                        , see also Fig. 1.

In this way, in Raghunathan (2013) a convex MINLP is obtained that is a relaxation of the original MINLP. A branch-and-cut scheme as in an LP/NLP-based branch-and-bound algorithm is applied to such a convex MINLP relaxation. Instead of solving the associated NLP in integer feasible nodes, and this is the third crucial point, the unique solution to the feasibility problem stated in Section 4 is found. If this unique solution additionally satisfies flow and potential bounds, the node is feasible for the original non-convex MINLP. In this way a stronger condition, directly related to the original MINLP, is tested instead of just solving the sub-NLP of its convex relaxation. If the bounds are violated, the node is eliminated from the search tree by some cut. Note that a globally optimal solution to the non-convex MINLP is found since the objective function depends on the integer variables only.

Here we want to present the computational results that were reported in conclusion with the two algorithms presented in the previous section applied to the described water network design instances. We also include the results of applying plain SCIP, i.e., spatial branch and bound, to these instances, without any exploitation of problem structure, reported in Vigerske (2012a, Section 8.2), and updated in Vigerske (2012b). The results of these three different approaches are shown in Table 2
                           .

All reported results were obtained on different computers and with respect to some time limit and in one case with respect to an additional memory limit in terms of branch-and-bound nodes. The machine characteristics are given in the respective column. The best lower and upper bounds found are reported. For the BONMIN-based approach in the second column we obviously have no lower bounds due to the heuristic nature of the approach. The algorithm in Bragalli et al. (2012) reached the time limit in all except the first instance. The results of the exact approach of Raghunathan (2013), for brevity called LP/CVXNLP, are given in columns 3 and 4. Here, an optimal solution is found in all of the four smaller literature instances, as a side effect certifying the optimality of the heuristic solutions in column 2. For the larger instances, the algorithm LP/CVXNLP is not able to terminate within the specified limits, but in any case finds feasible solutions, that, except for the instance pescara, are worse than the solution found by the BONMIN-based algorithm. Taking into account the spatial branch-and-bound algorithm of SCIP in columns 5 and 6, there appear some inconsistencies. The reported optimal solution of the small instance blacksburg is smaller than the optimal solution found by LP/CVXNLP. In addition, the optimal solutions of foss_poly_0 and foss_iron are below the lower bounds given by LP/CVXNLP. We can only explain these inconsistencies with numerical issues in either of the two algorithms. One source of these issues might be the reformulation techniques used in SCIP, which sometimes produce slight infeasibilities (Vigerske, 2013).

The full-scale problem of optimal water network operation appears to be a rather hard task. By full-scale we mean being based on a time (and space) discretized formulation. To the best of our knowledge, there is no successful solution for this complete form in the literature. Three simplifications are proposed, which we will present in the following. Unfortunately, there does not seem to be a unified test set, which makes a concise comparison difficult.

The first simplification is obtained in Gleixner, Held, Huang and Vigerske (2012) by dropping the time dimension and regarding a static operation problem. Such a problem may arise as subproblem in the full-scale task, possibly useful in heuristic approaches to the latter. At the basis is a network model with fixed-speed pumps following Equation (11), valves that can be closed or reduce the pressure in the direction of the flow, and tanks with a fixed initial filling level. The pipes have a fixed diameter and the potential-flow coupling equation is given by (4). The objective function is the sum of the cost of water purchased at source nodes and the cost of the power consumption of pumps. An innovation of the study is the introduction of the concept of real and imaginary flows. It is observed that due to valves, it is possible that actually no water is present at certain nodes. Enforcing the potential-flow coupling constraint on an arc that is incident to such a node, which means inducing a flow on that arc, is wrong. If no water is present at a node, no flow emerging from it can be induced. The concept of real and imaginary flows is modeled with the help of additional binary variables. Some interesting preprocessing steps for that model are also presented, one of which can be applied to sequences of pipes and valves. Due to the presence of valves that can reduce the pressure in the direction of the pipe, the pressure-loss of an entire pipe-valve-sequence is not described by the Darcy–Weisbach equation itself but by some relaxation of it, see Fig. 11
                        . With some extra effort, this union of two convex sets can be modeled by convex constraints. Again, as in Raghunathan (2013), the potential-flow coupling function’s property of being “half-concave” and “half-convex” is exploited.

The resulting MINLP is solved by using SCIP, applying the approach on two real-world networks. The approach is tested on different scenarios in the two networks, given by different initial tank fillings and the forecast demands of different time windows of a day. The larger of the two networks consists of 88 nodes and 128 arcs, resulting in a program with about a hundred binary variables (without presolve). The most difficult scenario requires about half an hour of computing time. When applying the presolving steps, the computation times reduce drastically. All of the tested scenarios are solved within less than two minutes of computation time, on average much faster. A natural question to ask is how the solution method in Gleixner, Held, Huang and Vigerske (2012), that is, the spatial branch-and-bound algorithm of SCIP, works on the full-scale operation problem. The authors reported that already going up to the full-scale problem with only two or three time periods is troublesome with the—at that time—current version of SCIP 
                        (Gleixner, 2013).

Another simplification of the full-scale operational problem is obtained by piecewise linearly approximating the nonlinear functions in the time discretized model, as shown in Morsi, Geißler and Martin (2012) and Geißler et al. (2011), or in more detail in Morsi (2013). The model therein mainly consists of flow conservation constraints (1) adapted to time-dependent variables, potential-flow coupling constraints (8) and (9) and pump equations (12). As mentioned, four different types of valves are modeled and two types of constraints on each tank, that are modeled as arcs, are imposed. The authors also impose a terminal filling level of each tank and are able to model the so-called “breathing”. This technical requirement imposes that a tank has to be filled and emptied completely for a given number of times over the considered time horizon. Finally, there are additional linear constraints that account for minimum runtimes and downtimes of pumps.

Preprocessing techniques, see Section 3.4 and Geißler, Martin, Morsi and Schewe (2012), are used to approximate all nonlinear functions within a controlled error bound of 10−2. Some results on the comparison between the different models for piecewise linear functions especially in the water network context are reported in Geißler, Martin, Morsi and Schewe (2012). The winning method therein is the incremental method, which is also the method of choice in Morsi, Geißler and Martin (2012) and Geißler et al. (2011). The tests are conducted on three networks of varying size, optimized over a time horizon of either four hours divided into 12 time steps or one day divided into 24 hourly steps. It is interesting to note that there is some flexibility of what is represented by the objective function, according to the underlying application. So, in some tests, the objective function is chosen to be the minimization of the number of tanks with a filling level below a certain limit, so as to maximize the supply guarantee of the network. In other cases, the overall power consumption is minimized. As we have seen earlier, also the purchase cost of water at source nodes can be taken into account in the objective function. The largest considered network consists of 25 arcs, resulting in an approximating MILP with almost 11,000 binary variables, for which an MILP solver finds an optimal solution within 694 CPU seconds. Further computational results can be found in Morsi (2013, Section 8.1).

An MILP approach through piecewise linear approximations is also presented in Verleye and Aghezzaf (2013). Besides the Darcy–Weisbach equation there are second order polynomials that represent the characteristic curve of pumps with fixed-speed only, while the empirical power consumption of a pump is fitted by (linear) polynomials of degree one. The objective function is again a combination of the cost of purchased water and the power consumption of pumps.

The nonlinear univariate functions are piecewise linearly approximated by a modification of the convex combination method. This modification was proposed in Vielma and Nemhauser (2011) and observes that in SOS-2 situations as for piecewise linear approximations, the required number of auxiliary binary variables is actually only logarithmic in the number of approximating line segments. The formulation is further strengthened by adding valid inequalities.

In addition, the authors actually use a piecewise linear relaxation as described in Geißler, Martin, Morsi and Schewe (2012) rather than an approximation, see again Fig. 6 b. The test network consists of 30 arcs, and the time horizon of one day is divided into five time steps. The reported results consider linear relaxations based on a number of approximation intervals ranging from 2 to 8. An MILP solver terminates at an optimal solution in the range of less than 30 s.

Computational results obtained with the very detailed model developed in Burgschweiger, Gnädig and Steinbach (2009b) are reported in the follow-up paper (Burgschweiger, Gnädig and Steinbach, 2009a). As stated at the end of Sections 2.3 and 2.4, there are ways to approximate the MINLP model without introducing binary variables. For their large network with 1481 nodes and 1935 arcs arising from the drinking water distribution network in the city of Berlin, the authors apply purely nonlinear programming techniques without any kind of branching, thus no search trees are explored. Due to the non-convexities that are still present, this leads again to only locally optimal solutions of the problem with discrete aspects neglected.

As mentioned before, the inherent difference of the design and the operation problems is the contrast between static and dynamic modeling, which is also intimately related to the absence and presence of active network elements. Dynamic modeling can make sense under two conditions. First of all, considering a dynamic model is useful only if exogenous parameters that have impact on the decision variables, like the demand patterns of consumers, naturally change over time. In such a situation, neglecting time completely and taking for example mean values to express these parameters results in an accuracy loss. Of course, also a discretization leads to mean values, but these mean values are based on single time windows. The second condition is that it has to make physical sense to take different decisions at different points in time. A pump, for example, can be switched on and off over time. For design problems in the form that we discuss here, this is hardly the case. The variables in our model represent the decision to build a pipe with some diameter, which is not something that is easily reversed within a reasonable time horizon. In other words, decisions regarding passive elements are inherently static decisions.

Now if we want to put passive and active elements together in a unified model, that is, tackling design decisions and operational decisions at once, we have two choices. Either we consider the decisions regarding active elements (in an approximative fashion) as static as well, or we find a model that can handle static and dynamic decisions at the same time. In the first case, there arises the problem of how to correctly measure the cost of active elements. The cost of a pump, for example, is not only its installation cost, but also its variable working cost, and it is not clear how to establish it in a static model. Another problem is that, in theory, the decision of installing a pump implies that subsequently it is always working, which makes it somewhat needless to pose the operational question of when to switch it on and off.

In the second case, that is, when putting static and dynamic decisions in a unified model, an obvious problem is how to compare fixed and time-dependent costs. The weight of fixed costs decreases when considering longer time periods, which, for example, would make a bigger pipe more profitable in the context of water networks. Anyway, this raises the question of which is the correct period to consider, which then can have varying answers according to different points of view of what “correct” means.

Despite these difficulties, such a unified approach taking the first of the two choices outlined above, i.e., using a static model with operational components, is presented in Fügenschuh and Humpola (2013a); 2013b) in the context of gas networks. The basic structure of that static model can in principle be applied to water networks as well. The authors consider gas transmission networks, with flow conservation constraints at the nodes and arc equations of type (10). Therein, the operational component βaya
                         is forced to be zero for pipes, positive for compressors (the equivalent of pumps in gas networks) or negative for pressure regulators. The striking point is that variable ya
                         is modeled as a discrete variable. This leads to the fact that the leaf problems in a search tree that branches on the integer variables are convex optimization problems, as shown in Section 4.

The first paper (Fügenschuh and Humpola, 2013b) is of operational type. Fixed entry and exit flows into and out of the network at certain nodes are given, and the task is to determine if the network is able to satisfy this scenario, also called “nomination” in this context. Thus, a feasibility problem without the minimization of power consumption or anything else is solved. The convex leaf problems are therefore solved by an NLP solver via different relaxation strategies. For example, one possibility is to relax the bounds on the variables q and h and minimize the bound violation. A leaf is then feasible if the optimal value of the relaxed problem is equal to zero. Networks with up to almost 500 pipes are handled, although in the computations variables ya
                        ’s are relaxed as continuous. Hence the procedure is not able to prove infeasibility, but only the feasibility of a scenario. However, in the considered tests infeasibility did not occur.

The follow-up paper (Fügenschuh and Humpola, 2013a) treats the so-called topology optimization problems for the same type of gas networks. Based on the same equations, the model is now allowed to extend a network (that is infeasible for some scenario) by choosing on each arc exactly one of a discrete number of parallel network elements with different characteristics in a cost-minimal way. In principle, these elements can contain also pumps, but as a special case is contained the problem of choosing on each arc exactly one pipe out of a discrete set of pipes with varying parameters, i.e., the classic water network design problem. Again the convex leaf problems are solved through a relaxation. If such a relaxed leaf problem is infeasible for the original MINLP, a cut is derived that is based on information from the nicely interpreted dual problem of the relaxed leaf problem. Some tests were conducted on networks with only pipes, and it is shown that the cuts derived from the relaxed leaf problems can significantly reduce the computing times. This again underlines the potential that lies in the exploitation of the leaf problems.

@&#DISCUSSION@&#

We have surveyed a class of challenging optimization problems and the attempts to solve them. The problems exhibit some differences among them, but all have in common the underlying nonlinear network flow model. The potential-flow coupling constraint is present in almost all formulations (and if not, its dynamic extension (8) and (9) is), and this constitutes one of the main difficulties.

In the following, we will distinguish between NLP- and MILP-feasibility. By the former, we mean feasibility with respect to the original MINLP with fixed diameter choices. Instead, by the latter we mean MILP-feasibility of the piecewise linearly approximated subproblems of the original MINLP. A question that arises is the one about the relation between NLP- and MILP-feasible solutions, i.e., are there solutions that have, for example, both of these attributes? When as a solution we mean the collection of discrete decision values plus flow and potential values, the answer to that question is rather negative. Indeed, when approximating all nonlinear functions by piecewise linear ones, the only points that lie on the graph of both functions are the breakpoints. That means that only a solution that assumes values exclusively in the set of breakpoints would be both NLP- and MILP-feasible. Inside the continuous domain of the flow and potential variables, however, this is a fairly small set of points.

Instead, if as solution we intend only the discrete decision values (because from a practical point of view the flow and pressure variables are not really decision variables), the situation simplifies and we will come back to this further down.

We would like to discuss a very simple computational example. Consider the water network design instance shamir from Section 5.1. The network is depicted in Fig. 12
                     . Node 1 is the only source node and water is transported from there to all the other (consumer) nodes. Originally being a water network design instance, the shamir network does not have any active elements. In that figure are also listed the diameters on each pipe, that we consider as fixed for the moment. This diameter set actually represents the optimal diameter set of the water network design problem, which on this small instance can be determined by any of the three methods presented in Section 5.1.1. Since this diameter set is optimal, it is in particular NLP-feasible, i.e., leads to an NLP-feasible (and unique) solution (q, h) that satisfies the flow conservation constraints, the potential-flow coupling constraints and the bounds on flow and pressure, and can be determined by any (also local) NLP solver.

The example helps to illustrate the physical bottleneck in many subproblems. This bottleneck is actually constituted by the lower pressure bounds. For example, decreasing the diameter on arc a
                     6 to the next available discrete one from the water network design instance would result in a network flow that does not violate the capacity on that arc, but violates the lower bound on the pressure of node 7. This again can be certified by any NLP solver. The same effect can be obtained by reducing the diameter on several other arcs.

Another characteristic of the underlying nonlinear network flow model, which here leads to purely algorithmic consideration and does not aim at the discrepancy between NLP- and MILP-feasibility, is given by the property described in Section 4. We have seen that in some situations a nonlinear network flow in a subproblem is unique, provided it is feasible at all. It seems sensible to compute this solution by a convex NLP solver in polynomial time, instead of exploiting other methods. Take, for example, the classic formulation for the water network design problem described in Section 5.1. It turns out that an MILP approach via piecewise linear approximations performs terribly bad. Indeed, even when linearizing the Hazen–Williams equation with only a few linearization points, no MILP-feasible solution is found by an MILP-solver within a reasonable time limit on medium size instances. This is because the subproblems with fixed integer variables corresponding to the diameter choices, i.e., subproblems, that are encountered during a tree search, are either MILP-infeasible or have exactly one solution (note that as well the linearized version of the potential-flow coupling constraint is strictly increasing). Certifying MILP-infeasibility or searching this unique solution with an MILP formulation cannot be a good idea.

The same conceptual problem occurs if the subproblem with an at most unique solution is solved by spatial branching. An NLP-feasible solution will be found in at most one of the many branches. An additional difficulty in design problems often arises from the fact that the objective function is constant in such a subproblem, since it only depends on the diameter choices. This results in exploring a sub-tree without the guidance of the objective function.

We conclude that in this situation the most promising thing to do is to exploit the uniqueness of the leaf problems by some combination of integer branching and nonlinear programming techniques (see Section 4 and references therein).

We now turn to the above example (the shamir network) in order to shed some light on a side effect of MILP approximations of the potential-flow coupling equation. Imagine to have such an approximation for the shamir network with diameters fixed to the optimal diameter set, as above. Since the potential-flow coupling function is convex in |qa
                     |, the energy loss will be overestimated by this approximation, cf. Fig. 6 a. The worse the approximation is, the higher will be this overestimation. In fact, when fixing the diameters to the optimal diameter set and using five linearization points per pipe in an MILP model for our example, any MILP solver certifies the infeasibility of the optimal (and thus NLP-feasible) diameter set. The bottleneck are again the lower pressure bounds, this time at nodes 3, 5, 6 and 7. So, MILP approximations lead to conservative solutions in general, because they overestimate the energy loss in a network. The worse the approximation is, the more conservative gets the solution. If one keeps the approximation coarse as to keep the number of auxiliary binary variables low, fewer diameter configurations become feasible, which is why it becomes harder to find feasible solutions in the branch-and-bound tree. Refining the approximation augments the number of binaries and thus slows down the MILP solver.

At this point, it is possible to illustrate the role of pumps. Abstracting from the original physical setting of the shamir instance, imagine that there is a pump associated with arc a
                     3, modeled by the equation

                        
                           (28)
                           
                              
                                 
                                    h
                                    4
                                 
                                 −
                                 
                                    h
                                    2
                                 
                                 =
                                 −
                                 
                                    
                                       sign
                                       
                                          (
                                          
                                             q
                                             
                                                a
                                                3
                                             
                                          
                                          )
                                       
                                       
                                          
                                             |
                                             
                                                q
                                                
                                                   a
                                                   3
                                                
                                             
                                             |
                                          
                                          
                                             1.852
                                          
                                       
                                       ·
                                       10.7
                                       ·
                                       
                                          L
                                          
                                             a
                                             3
                                          
                                       
                                    
                                    
                                       
                                          k
                                          
                                             
                                                a
                                                3
                                             
                                          
                                          
                                             1.852
                                          
                                       
                                       
                                          D
                                          
                                             
                                                a
                                                3
                                             
                                          
                                          
                                             4.87
                                          
                                       
                                    
                                 
                                 +
                                 y
                                 ,
                              
                           
                        
                     where 
                        
                           y
                           ∈
                           
                              R
                              +
                           
                           ,
                        
                      cf. Equation (10). Obviously, the network with fixed optimal diameters still has an NLP-feasible solution. But also decreasing the diameter on arc a
                     6 leads to an NLP-feasible solution now, namely with y > 0. Adding another such virtual pump on arc a
                     2 turns feasible also the above mentioned MILP approximation of the optimal diameter set with five linearization points. In this case, pumps could also be placed on arcs a
                     2 and a
                     5 or just on arc a
                     1.

In other words, pumps are somehow able to compensate for the approximation error made by MILP approximations. This could lead to computational advantages by producing more quickly diameter configurations that, tested a posteriori by solving convex leaf problems, show no need of pump usage. Of course, this depends on the cost of the pumps that is, however, somehow difficult to evaluate in a static framework like the design one. Namely, taking decisions on pump usage in the design context might imply operation problems that are feasible only if the pump is always used. Thus, the cost saved for installing pipes might be spent for the continuous use of pumps.

An interesting paradox is encountered in this context. Imagine to have some water network optimization problem for which all subproblems with fixed integer variables possess the convexity or uniqueness structure described in Section 4. Again, take for example the classic water network design problem and imagine to have pumps modeled by Equation (28) in the network. In order to be able to use the above mentioned algorithmic combination of integer branching and exploitation of uniqueness, one would have to discretize the variable y as in Fügenschuh and Humpola (2013b). Otherwise, the introduced pump destroys the convexity of the subproblems. This is not true for an MILP approximation of the problem. Because everything is linear in such a model, the additive y does not destroy any convexity. On the contrary, it acts as a slack variable and can make things easier. Discretizing the variable y instead would again lead to the same situation as in an MILP approximation of the water network design problem without pumps: a branch-and-bound tree where subproblems solvable in polynomial time are instead attacked by integer branching.

Another aspect related to the role of pumps is more of algorithmic nature. As seen above, they actually have the ability to augment the number of feasible integer configurations in a tree search. It is in general easier to find feasible solutions. This algorithmic advantage can be seen directly. In an equation like (28), y acts as a slack variable. It becomes easier to find a solution somewhere above the graph of the Hazen–Williams function instead of exactly on that graph. Another piece of evidence of this can be found in Gleixner, Held, Huang and Vigerske (2012). One of the several effects of presolving therein is that some Darcy–Weisbach constraints are replaced by their relaxations depicted in Fig. 11. Instead of being constrained to find a feasible point on the graph, we can find it somewhere above (or below) the graph, and the performance of the algorithm is drastically improved by presolving. Also pumps with variable speed in an operational setting somehow allow to augment the set of feasible solutions. All in all, it depends of course on the cost of the above “slacks”, whether an overall procedure is improved or not.

Another way of approximating (sub-)problems in a manner that the space of feasible solutions is augmented is to use piecewise linear relaxations instead of piecewise linear approximations. In this way, it should become easier to find feasible solutions. In Geißler, Martin, Morsi and Schewe (2012) it is reported that the switch from piecewise linear approximation to piecewise linear relaxation does not result in an overall speed-up for the problem considered in that paper, i.e., a water network operation problem minimizing the power consumption of pumps. In this concluding section, we want to report the results of a small experiment with piecewise linear relaxations of the water network design problem described in Section 5.1. We proceed as in Section 6.3 in Bragalli et al. (2012) as for how to obtain a piecewise linear approximation. Without going too much into details, this amounts to approximating the inverse of the Hazen–Williams equation for each available diameter, and then deactivating the constraints for those diameters that are not chosen, with bigM constraints. In the inverse of the Hazen–Williams equation, the flow is expressed as a function of the head loss. After having computed a (non-positive) lower and a (non-negative) upper bound on the head loss, we distribute K breakpoints on each half axis. By taking the inverse, we can use this segmentation for each diameter, because the lower and upper bounds on the head loss are independent of the chosen diameter. We model the approximations by either the convex combination method or the incremental method (see Section 3.4 and Geißler, Martin, Morsi and Schewe (2012)), and optionally build piecewise linear relaxations as described in Geißler, Martin, Morsi and Schewe (2012). Table 3
                         reports some results for K = 2, 4, 10 on eight out of nine instances introduced in Section 5.1 (we do not consider the different problem of doubling pipes as in the new york instance). We report the best integer solution found by CPLEX 12.6 within a time limit of two hours (indicated by ∞, when reached) on a single core of a 3.1 GHz quad-core machine with 1.96 GB RAM. We checked the diameter configurations for each obtained integer solution for feasibility with the simulation software EPANET (http://www.epa.gov/nrmrl/wswrd/dw/epanet.html). Integer solutions that were certified feasible by EPANET are marked with an asterisk in front of the corresponding objective value in Table 3.

The results show that it is in general very hard to find feasible solutions. The piecewise linear approximation never finds a feasible solution within the time limit for medium or large size instances. The piecewise linear relaxation does find one in some cases on medium size instances for fairly few breakpoints when using the incremental method, and the smaller size instances are usually solved faster by the piecewise linear relaxation. However, the piecewise linear approximation provides a conservative solution, in the sense that the diameter configuration is usually feasible for the nonlinear problem. For the relaxation that is not true in general. In fact, as shown by the results in Table 3, when the algorithm provides an optimal solution to the piecewise linearly relaxed model, it is not always feasible. Instead, when hitting the time limit, the integer solutions found by the algorithm using the relaxation were all feasible in our experiment. However, there is clearly no controlled way of setting a time limit that would guarantee finding an integer solution that is feasible. All in all, we can see that the incremental method is generally a bit faster than the convex combination method, provided an instance is solved. This confirms the observation made in Geißler, Martin, Morsi and Schewe (2012).

We see two potential future research directions, one of which concerns more the modeling part, whereas the other one is of algorithmic nature.

The first aspect is the unification of design and operation problems. Despite the difficulties mentioned in Section 5.3, this is an area that could be tackled in the future. Therefore, robust and unified ways of modeling the costs of active and passive network elements are necessary. Additionally, it seems not yet clear which is the right dynamic model for the different network elements. For example, is the discretized version of the water hammer equations (8) and (9) really necessary to describe the water dynamics in pipes or is a static Hazen–Williams equation in every time step enough? A model that balances well accuracy and tractability should be determined.

Furthermore, we think that the exploitation of convex leaf problems as described in Section 4 bears a lot of potential, because it has the power of reducing the complexity of the problem (maybe at the cost of discretizing some continuous parameters). To the best of our knowledge this has not been applied to water network optimization problems of operational type, while this could be done also in the dynamic case.

@&#ACKNOWLEDGMENTS@&#

We would like to thank Jesco Humpola for sharing insights on nonlinear network flows and Stefan Vigerske and Ambros Gleixner for giving technical advice regarding SCIP. We also thank Wei Huang, Lars Schewe and Antonio Morsi for their helpful comments in the context of water network operation, as well as four anonymous referees.

The work is supported by the EU grant FP7-PEOPLE-2012-ITN no. 316647 “Mixed-Integer Nonlinear Optimization” and by MIUR (Italy) grant PRIN 2012 “Mixed-Integer Nonlinear Optimization: Approaches and Applications”.

@&#REFERENCES@&#

