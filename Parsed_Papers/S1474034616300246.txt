@&#MAIN-TITLE@&#Ontology-based semantic approach for construction-oriented quantity take-off from BIM models in the light-frame building industry

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Proposing ontology-based semantic framework for quantity takeoff (QTO).


                        
                        
                           
                           Establishing construction-oriented product ontology for light-frame building projects.


                        
                        
                           
                           Querying a BIM design model for construction-oriented QTO using richer vocabulary.


                        
                        
                           
                           Prototyping Autodesk Revit add-on toolwith light-frame building application case.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Building information modeling

Semantic quantity take-off

Ontology

SPARQL

Domain vocabulary

@&#ABSTRACT@&#


               
               
                  In building information modeling (BIM), the model is a digital representation of physical and functional characteristics of a facility and contains enriched product information pertaining to the facility. This information is generally embedded into the BIM model as properties for parametric building objects, and is exchangeable among project stakeholders and BIM design programs – a key feature of BIM for enhancing communication and work efficiency. However, BIM itself is a purpose-built, product-centric information database and lacks domain semantics such that extracting construction-oriented quantity take-off information for the purpose of construction workface planning still remains a challenge. Moreover, some information crucial to construction practitioners, such as the topological relationships among building objects, remains implicit in the BIM design model. This restricts information extraction from the BIM model for downstream analyses in construction. To address identified limitations, this study proposes an ontology-based semantic approach to extracting construction-oriented quantity take-off information from a BIM design model. This approach allows users to semantically query the BIM design model using a domain vocabulary, capitalizing on building product ontology formalized from construction perspectives. As such, quantity take-off information relevant to construction practitioners can be readily extracted and visualized in 3D in order to serve application needs in the construction field. A prototype application is implemented in Autodesk Revit to demonstrate the effectiveness of the proposed new approach in the domain of light-frame building construction.
               
            

@&#INTRODUCTION@&#

A building information model (BIM) is a digital representation of physical and functional characteristics of a facility. It is a product-centric and object-oriented information model whereby enriched building information is hosted by parametric building objects (e.g., walls and floors) as properties. This information can be retrieved from a BIM design model for building design analyses, such as energy analysis and structural analysis. Hence, the BIM model has the ability to support decision making in various aspects of the AEC industry, and boosts work efficiency by minimizing the rework of modeling or collecting building information for different purposes. As such, a large body of research has been focused on leveraging BIM models with discipline-specific information and information exchange between a BIM authoring program and discipline design tools. Nevertheless, it remains a challenge to tailor BIM to suit construction management tasks such as quantity take-off in connection with workface planning, which is “the process of organizing and delivering all the elements necessary, before work is started, to enable craft persons to perform quality work in a safe, effective and efficient manner” [8]. This is due to the fact that the BIM product model and the construction process model rely on different schemas to organize product and process data. A BIM model, including the Industry Foundation Classes (IFC) based open BIM model, is product-centric and represents an assembly of parametric building objects with properties, whereas a process model is a collection of processes usually organized by a material and method classification system (e.g., the MasterFormat developed by Construction Specifications Institute and Construction Specifications Canada) on the basis of material information, construction method, product design feature, and so forth. For this reason, one activity with a particular construction method (unique production rate and unit cost) in the process model might be only applicable to a specific group of building elements or for a portion of one building element or for a group of non-explicitly modeled building design features in a BIM product model. It is challenging for construction practitioners to obtain quantities in connection with construction activities from a BIM design model. Considerable human intervention must thus be involved to interpret the process model and to manually quantify the BIM product model in accordance with the process description.

Quantity take-off (QTO) is “a detailed measurement of materials and labor needed to complete a construction project” [13]. It serves as the foundation for other tasks in construction management such as cost estimation and schedule planning, and its accuracy can directly affect downstream analyses and decision making. The QTO process is an information extraction process during which quantities of building elements or features are measured based on the design drawings or the 3D model. BIM offers perhaps the best automatic approach to generating accurate QTO directly from 3D product models [33]. Indeed, BIM-based QTO is currently the most widely used BIM-based application in the AEC industry. Most BIM tools are able to support the QTO feature, including the “Schedules” function of Autodesk Revit. However, the quantities extracted from a BIM design model usually consist of tabular data of explicitly modeled building element dimensions and are product-oriented. This quantity information needs to be further manipulated by means of formulas or filter/aggregation functions in order to obtain construction-oriented QTO information for use by construction planners and trades personnel. Such a cumbersome manual process poses a challenge from the perspective of construction practitioners who take off work packages for detailed construction planning. Furthermore, some information that is relevant to construction practitioners is only implicitly represented in the BIM model, such as the topological relationships and various intersections among the building elements. It is challenging for construction practitioners to extract such specific building information from a BIM design model when it has not been modeled explicitly. For instance, although the open BIM IFC schema defines objectified relationships such as “IfcRelConnectsPathElements” in order to describe the connectivity between building elements, various connections (e.g., L-connection or T-connection), as well as their detailed properties (e.g., connection angle), are not explicitly defined in either IFC or the Autodesk Revit schema. Hence, instances of “T-connection” or “L-connection” representing the connection of walls are not explicitly present in the BIM design model. For this reason, information pertaining to connections (e.g., L-connection) cannot be readily extracted. Such implicitly modeled information restricts space-related information extraction (e.g., quantities of specific types of intersections); hence, the BIM design models are insufficient to account for the details necessary to serve the intended purpose. Additionally, existing BIM design models lack standardized industrial BIM object definitions in specific building domains. For example, studs and plates in light-frame walls are usually represented as “Structural Column/Framing” in the Autodesk Revit BIM design model and as “IFCMember” in the IFC-based BIM design model. These representations are not sufficient for construction practitioners (e.g., trades personnel) in taking off their work packages. As such, BIM design models lack domain semantics in connection with specific building trades. Construction practitioners need to understand the various complex BIM schemas or BIM object definitions in terms of their specific decomposition structure in order to obtain the desired QTO. This would considerably increase the workload and difficulty in their daily planning work. Given this reality, the varying object definitions at present make the BIM models less useful to construction practitioners in performing their specific tasks, while retrieving QTO information relevant to construction practitioners from a BIM design model without domain semantics is still far from efficient.

This paper presents an ontology-based semantic approach to extracting construction-oriented QTO information from a BIM design model. It allows users to semantically query the BIM model using domain vocabularies, capitalizing on building product ontology formalized from a construction perspective. The proposed ontology addresses the limitation of BIM design models in terms of lacking domain semantics and aligns BIM design models with construction-oriented QTO. As such, QTO information relevant to construction practitioners can be easily extracted and visualized in 3D in order to serve practical needs in the construction field. A prototype application is implemented in Autodesk Revit to demonstrate the effectiveness of the proposed approach in the domain of light-frame building construction.

In the remainder of this paper, state-of-the-art research is reviewed with respect to BIM-based QTO. Subsequently, the ontology background and the research scope are presented, and the ontology-based semantic QTO approach is described in detail. The development of a QTO prototype system is then presented. A case study is also shown to validate and demonstrate the effectiveness of the methodology. Conclusions are summarized and limitations of the present research are identified.

@&#LITERATURE REVIEW@&#

To date, various automated approaches have been explored by which to extract quantity take-off information from 2D drawings or 3D models, such as generating quantities using AutoCAD drawings [27] and Open BIM-based QTO systems [7]. Among these, BIM has emerged as the best automated approach to generating accurate QTO from 3D product models [33]. Most BIM authoring tools are able to support the QTO feature and allow the nearly seamless quantity information exchange for downstream analyses such as cost estimation. Nevertheless, BIM-based QTO may not provide all the necessary quantity data about the product model in the event that the BIM model is not designed with sufficient construction detail. To realize automatic QTO at a sufficient level of construction detail, the BIM model must be “redesigned”, which demands even more effort than performing manual take-off. As such, some studies have sought to explore an automatic approach to designing the BIM model in performing a QTO. Kim et al. [15] explored an automated modeling method by which to model a building’s interior. Monteiro and Poças Martins [27] proposed an add-on for ArchiCAD that would automatically generate the formwork model based on the structural model of the building. Liu et al. [22] studied an automatic approach to construction-centric BIM with the main focus on the sheathing and drywall modeling for a residential house. Noting that once the detailed information is represented in the BIM model, the thorough QTO in the form of tabular data could be generated by use of the routines in BIM tools. All these efforts pertaining to automatic modeling can improve the efficiency of QTO. Nevertheless, leveraging the BIM model may also result in a redundant information database and further pose challenges to retrieving specific QTO information. In this context, Monteiro and Poças Martins [27] reported that modeling guidelines enable users to extract a thorough QTO in accordance with existing specifications. Those modeling guidelines could filter the relevant information at the modeling phase, rather than at the quantity extraction phase, thus boosting the QTO efficiency.

One important factor impeding BIM-based QTO applications in the construction field is that some information, such as the spatial or topological relationships among building objects, is implicit in the BIM model. To tackle this problem, Borrmann et al. [6] developed a spatial query language for BIM models which enabled the spatial analysis of building and partial building information extraction. The newly developed query language covered spatial operators such as mindist, maxdist, isCloser and isFarther, which was proven to be a promising approach for partial model extraction that satisfied certain spatial constraints. Subsequently, this spatial query language was extended by adding other topological operators, including within, contain, touch, overlap, disjoint and equal in the 3D space using the 9-intersection model [5,9]. Nepal et al. [28] described a methodology for querying the BIM model for construction-specific spatial information. Custom spatial XQuery predicates such as Overlaps, Touches, Disjoint, Intersect, Proximate, and On-grid were created to support spatial queries over the BIM model. Similarly, Kim and Cho [16] proposed a geometric reasoning system, namely, Construction Spatial Information Reasoner (CSIR) that derived construction-specific spatial information of a BIM model in order to support automated construction planning. Indeed, the use of ontology technology can help reduce manual involvement in recognizing design conditions that considerably affects construction costs. Staub-French et al. [35,36] formalized a feature ontology to represent the cost-driving features of building product models such that practitioners could generate cost estimates more expeditiously. Nepal et al. [29] described a new approach using ontology-based feature modeling for construction information extraction from a given BIM model. In their approach, a feature ontology including feature type and feature property was formalized and a feature-based model was generated by the developed feature extractor in order to facilitate construction-specific information extraction. The information extraction was realized through formalized form-based query specification templates. Semantic query was not supported, and queried results could not be visualized in the BIM model. Additionally, detailed information about component intersections could not be identified in the proposed method. Lee et al. [18] illustrated an ontology-BIM-based approach for building cost estimation with the limitation of only focusing on tiling work. In their study, ontological inference was utilized to search for work items that are pertinent to particular building elements and materials on the basis of BIM data.

Another main challenge associated with QTO is the classification system used to organize the quantity measurements [27]. Today, there are a few classification systems, such as MasterFormat, UniFormat, and internal formats in companies that are commonly adopted by construction practitioners and scholars. For example, Zhao et al. [44] explored an automatic approach of QTO for modular construction which pre-loaded the industry company’s classification system—called “part number”—into the BIM model during the modeling phase. Thus, quantities could be automatically extracted from the BIM model into the unit price database in Excel according to the pre-loaded classification system via the Autodesk Revit application programming interface (API). Similarly, Choi et al. [7] leveraged a BIM model with a 10-digit construction classification code in order to facilitate the QTO process in their prototype system. The lack of a standard classification system challenges construction practitioners in regard to compatibility among various documents and quantity information exchanges during a project life cycle (e.g., from design to construction). Additionally, quantities extracted from a BIM design model are usually in the form of tabular data of explicitly modeled building elements with product-oriented dimension values. Human intervention is still required to manipulate (e.g., filter and group) this tabular data in order to obtain the quantity compliant with the work package description and the work breakdown structure (WBS). In contrast to rule-based QTO, Lawrence et al. [17] introduced a flexible mapping strategy which augmented a BIM-based design model with cost information in order to create and maintain the cost estimation. The developed flexible mapping approach described relationships between explicit BIM objects and cost items through queries (in the XQuery language or structured query language) on the building design; it was conducive to estimating in terms of updating the cost estimation. The proposed approach was intended for the early design stage of projects even when the design was still incomplete and evolving. Substantial effort and XQuery knowledge were required to formulate complex queries, presenting a hurdle which impeded its adoption in the AEC industry.

On the other hand, BIM-based QTO is an information extraction process during which quantities of building elements or design features are determined based on the 3D product model. A large number of studies emphasized on extracting specific information from the BIM model. In general, building information was extracted either from a BIM model in commercial software (e.g., Autodesk Revit and Tekla) or from an IFC-based open BIM model as inputs for downstream analyses such as construction scheduling and cost estimation. For instance, Liu et al. [21,19,20] investigated a BIM-based automatic scheduling approach whereby enriched building information, including QTO, was extracted from a Revit BIM model via Autodesk Revit API. Kim et al. [14] established a prototype for automating the generation of construction schedules by automating quantity data extraction from an IFC-based BIM model, and parsing building information as the inputs for scheduling. Zhang and Issa [43] reported ontology-based partial building information extraction from an IFC-compliant BIM model by means of semantic search, instead of pure syntactic analysis. However, their research encompassed only the geometry portion of IFC specifications. Ma et al. [25] identified an information requirement model in accordance with construction estimating practices for tendering in China, and extended existing IFC schemas to account for specific information requirements respectively. Subsequently, Ma et al. [24] introduced a semi-automatic method to conduct cost estimation for tendering building projects based on the use of a design model through the open IFC standard. Further attempts to enhance information exchanges among BIM applications have been carried out in recent years. For instance, Yang and Zhang [42] presented a new approach to the development of building design objects with the objective of enabling semantic interoperability in building designs. Venugopal et al. [38] proposed an object-oriented and modular mechanism for embedding semantic meaning in model views in order to improve information exchanges among BIM applications.

In short, an ontology-based semantic QTO approach, which enables construction practitioners to semantically query BIM design models using domain vocabularies in order to retrieve building quantity information from a construction perspective, has yet to be formalized.

In the context of computer science, ontology is defined as “explicit formal specifications of the terms in the domain and relations among them” [11]. In other words, an ontology is a formal definition of types, properties, and interrelationships of domain entities, which provides the vocabularies to describe the domain knowledge. Ontology is thus a promising solution to share common understanding of the structure of information and domain knowledge [30]. Within the ontology, classes (types) with properties describing themselves represent the terms or concepts in the domain, whereas relations describe interrelationships among classes (terms). Although ontological modeling is similar to object-oriented modeling in the view of syntax (i.e., class and property), ontology allows for explicitly representing domain terms and their relations in the form of class, property, and relationship in an intuitive and structured manner. Specifically, classes, properties and relationships are stand-alone entities in ontology such that properties and relationships can exist without classes. Ontology allows for multiple inheritances among classes, properties, and relationships, respectively (e.g., sub-class, sub-property, and sub-relationship can be explicitly defined). Ontology allows for arbitrary user-defined relationships among classes, whereas the class relationship in object-oriented modeling is limited to the subclass-superclass hierarchical relationship [34]. It is noteworthy that objects in object-oriented modeling are related through attributes (i.e., properties) and objectified relations (i.e., classes), rather than through explicit relationship entities as in ontological modeling. Ontology allows users to explicitly specify characteristics/properties (e.g., symmetry, transitivity, and inversion) to relationships and the nature of the relationships (e.g., Equivalent To) between classes, properties, and relationships. More importantly, ontology, founded on logic, represents domain knowledge in an intuitive and structured manner such that ontology allows for automated reasoning or inference that enables the user to check for conflicts of ontologies and infer new facts. For this reason, information extraction from a given BIM repository can be minimized, and the remainder can be inferred on the basis of extracted information within ontology. In addition, ontology is easier to be extended and merged due to the fact that the substantial work needed for mapping and converting data in different applications can be reduced [23]. Ontology allows for semantic queries capitalizing on formalized classes as well as properties and relationships. An ontology-based query can “understand” the semantic definition of these ontology entities; hence, it can retrieve the defining triples from the schema resources. Due to the fact that ontology mixes the schema specification with individual specific data, ontology-enabled semantic query using domain vocabularies can be executed not only on specific ontology data, but also on the ontology terms [26]. In comparison, Language-Integrated Query (LINQ) enabled by object-oriented modeling can only be executed on specific data sets, rather than data set schema. All these features, which are generally not provided by object-oriented modeling, make ontology superior in the representation of domain knowledge. Ontology has thus been successfully applied in various industries to facilitate domain knowledge management. In the construction industry, some ontology applications have also been successfully carried out in order to assist project stakeholders in cost estimation [18], code compliance checking [45,46], construction planning [4], and so forth. With BIM being an important focus in both industry and academia, research has been undertaken to maximize the benefit from integrating BIM and ontology for the AEC industry. For instance, Beetz et al. [3] lifted the IFC specification onto a logically rigid and semantically enhanced ontological level by strictly transforming EXPRESS schemas into ontologies, and developed IfcOWL. Zhang and Issa [43] explored an ontology-based algorithm in the extraction of a partial BIM model from the original model in order to reduce the difficulty of manipulating the complete model, which was typically large and complex. More recently, Venugopal et al. [39] proposed IFC reforms using ontology in order to address the limitation of IFC in terms of lacking semantic clarity and ambiguous nature and to make the data exchanges more semantically robust. Ontology is utilized in this study to facilitate construction-oriented QTO.

There are many representation languages used to construct ontologies, such as Knowledge Interchange Format (KIF), Resource Description Framework (RDF), and Web Ontology Language (OWL). The semantics of the information in an ontology depend on the representation languages, as each language raises its own semantic restrictions [26]. Semantics herein refers to the meaning or context of the information. In the early 2000s, ontology was implemented by object-oriented property-value representation that could declare classes and their properties [23]. In this sense, ontology with object-oriented property-value representation is similar to object-oriented modeling. In contrast, RDF-based ontology, as described above, provides stronger expressive power. It allows users to explicitly specify far more information about classes and properties and to define a set of constraints and axioms held among concepts, relationships and individuals. These constraints and axioms facilitate machine understanding of the information [38]. The RDF model represents a metadata data model with its schema, namely: “RDFS”, which is defined by a set of terms with specifiable meanings. Unlike markup languages such as Extensible Markup Language (XML), where semantics are implicitly expressed, RDF makes the semantics of information explicit [46]. As such, RDF-based ontology with its explicit formality increases semantic awareness of computer applications. Semantic awareness herein is defined as the ability of computer applications to interpret and represent the meaning of the information. Additionally, the RDF model is a graph-based data model that represents information in a directed and labeled graph data format [31]; it allows structured and semi-structured data to be merged and exposed, as well as for data to be shared across different applications [41]. Compared with object-oriented property-value representations, RDF-based ontology is more flexible and more easily extended, and thus is more suitable for representation of domain knowledge. In this research, RDF is employed to implement ontology and provide domain semantics in reference to domain terms, including their properties and interrelationships, as well as ontology reasoning. Simple Protocol and RDF Query Language (SPARQL) is a semantic graph query language designed to query RDF [10]. Due to that semantic query on large ontologies by means of graph query languages (e.g., SPARQL) is less complex than the use of complete reasoning rules and ontology reasoning engines [3], it is more straightforward for construction practitioners to formulate SPARQL queries on BIM models in comparison with ontology reasoning rule formulations. In this sense, an RDF-based ontology in conjunction with SPARQL would boost the information extraction efficiency.

Construction-oriented QTO produces quantities in proper units of measure which are taken off for construction activities based on activity definition and detailed specifications of construction methods and materials. As described previously, extracting building information implicitly represented in a BIM model is difficult, while retrieving building information without semantic domain terms and their interrelationships is inefficient. Owing to this reality, a challenge confronting construction practitioners is how to retrieve construction-oriented QTO information from a BIM design model. In this respect, an ontology can be utilized to enhance the BIM model by defining distinguishable domain terms or classes to represent features of this type. On the premise of some analysis such as topological analysis and ontology reasoning on a given BIM model, those implicit design features can be detected and then explicitly stored into an ontology-enhanced BIM model. As the building product ontology is formalized from the specific building domain and the construction practice, it enables construction practitioners to semantically query the ontology-enhanced BIM model using their domain vocabularies in order to retrieve the construction-oriented QTO information efficiently without the need to understand the technical structure of the underlying complex BIM schema. This section uses specific examples to illustrate these problems associated with construction-oriented QTO in the domain of light-frame building construction and how to address those problems using the proposed ontology-based approach.

Construction projects are completed by various builders/sub-contractors/trades-people. Builders and sub-contractors are coordinated to work together on different work packages based on their expertise. Builders and sub-contractors thus only need to retrieve quantity information concerning their specific work packages, rather than retrieving all the building information embedded in the BIM design model. For instance, framing subcontractors or carpenters are to frame walls and install blocking in wall frames; finishing carpenters are to install the interior trim, interior doors, windows/door casing, railing, and other interior elements; stucco subcontractors are to paint the building exterior; and drywallers are to install and finish drywall sheeting for residential building projects. In order to take off the quantity of the drywallers’ work, for example, determining the surface area of interior walls is important. This information can be easily extracted from the BIM model; however, the drywallers also need to tape and finish drywall sheets and wall corners, which takes time and incurs cost in construction. Consequently, drywallers need to have a clear understanding of how the walls intersect. Moreover, interior corners are usually taped using paper corner bead, whereas metal corner bead is used for exterior corners (see Fig. 1
                        
                        
                        ). Drywallers thus must know not only the number of general wall connections but also detailed wall connection information (e.g., L-connection, T-connection, Ext/Int-connection and Ext/Ext-connection) in order to obtain the correct quantity of metal corner bead. Similarly, estimators require this information in order to take off work packages based on detailed construction specifications during the detailed estimating process. For example, as shown in Table 1
                        , cost item “092915100411” described as “Accessories, gypsum board, corner bead, galvanized steel, 32
                        
                        mm
                        ×
                        23
                        
                        mm
                        ×
                        2450
                        
                        mm” is used for pricing metal corner bead. Given these complexities and due to the fact that detailed building component intersections are not represented explicitly, it is not possible to retrieve intersection quantities by merely applying existing BIM-based quantity routines and methods as proposed in previous research such as Nepal et al. [28,29].

With regard to wall framing, as summarized in Table 1, work packages for bearing walls are taken off by length of studs for line number “061110405167”, length of plates for line number “061110405106”, and number of window/door bucks for line number “061110400340” or “061110400170”. In order to obtain quantities for each aforementioned item, each type of wall frame subcomponent (see Fig. 2
                        ) needs to be explicitly modeled with distinguishable entities. For example, common studs associated with structural walls need to be distinguished from opening studs such as window buck, king studs, jack studs, rough sill, cripples, and header (see Fig. 2) so as to derive the total length of studs for item “061110405167” and number of window/door bucks for item “061110400340” and item “061110400170”. However, wall frame subcomponents in a BIM design model are generally represented by the same kind of model entity. As described earlier, all studs are usually modeled with the modeling element, called “Structural Column”, and all plates are represented as “Structural Framing” in Autodesk Revit. Within the open BIM schema, IFC, all studs and plates are represented as “IFCMember”. Without domain semantic awareness, all the model elements for wall frame subcomponents are identified as the identical entity (e.g., IFCMember); hence, without understanding of the complex BIM schema and human intervention by BIM experts, it is not possible to filter the studs in non-structural walls and the opening studs including cripple studs, king studs and jack studs in structural walls so as to obtain the required QTO for common studs in structural walls (line number “061110405167”) from a BIM design model.

Non-bearing wall framing is taken off by length of wall as for line number “061110260180” characterized by detailed framing features such as “50
                        
                        mm
                        ×
                        102
                        
                        mm studs, 305
                        
                        mm On Centre, 2450
                        
                        mm high, includes single bottom plate and double top plate”. For this item, framing features, such as wall structural usage, wall height, its stud size, stud spacing, and having double top plate or single top plate, need to be detected by the take-off system in order to obtain the non-bearing wall length having this kind of framing feature. By explicitly modeling stud, plate and their interrelationship with walls as required by exterior wall framing, stud size can be identified. Stud spacing and having double top plate or single top plate are another features which need to be modeled explicitly as wall properties in order to take off the work package for line number “061110260180”. Hence, the domain terms in light-frame building industry, such as king stud, jack stud, and cripple stud, need to be formalized into the proposed ontology in order to address the lack of domain semantics in wall frame modeling and to align BIM design models with construction-oriented QTO.

This study proposes an ontology-based semantic approach to construction-oriented QTO from a BIM design model. Ontology is employed in the study in order to enhance BIM models in terms of domain semantics, including: (1) domain terms, (2) properties, and (3) interrelationships. Domain terms such as Stud and Plate in the light-frame building industry and various wall connections are generalized into the product ontology. Their interrelationships and properties are defined explicitly in the ontology, providing the semantic foundation to the building quantity information retrieval application, as well as rich domain vocabularies, with which construction practitioners are conversant. This allows for construction practitioners to semantically query a BIM design model for explicit and implicit BIM data using their domain vocabularies without the need of understanding the technical structure of the underlying complex BIM schema. It addresses the challenges described previously with respect to construction-oriented QTO, and enables estimators or field contractor/sub-contractors to obtain QTO for construction work packages in a more efficient manner.


                     Fig. 3
                      shows the overview of the proposed methodology. As depicted in the figure, a construction-oriented product ontology is developed by formalizing domain terms, their interrelationships, and properties in the light-frame building industry. With the exception that building terms in the existing BIM model, such as IfcWall, and IfcSlab, some other terms including stud, plate, L-connection, T-connection are added into the product ontology. It is noteworthy that construction-oriented product ontology not only contains formalized terms from domain knowledge, but also includes specific BIM data. In order to populate this product ontology (i.e. ontology terms) with specific building information (i.e. ontology individuals), the terms in the formalized product ontology are first mapped with the BIM modeling elements within a building modeling tool (e.g., Revit, Tekla) or vendor-independent platform (e.g., IFC). Then, the BIM design model is analyzed against ontology terms using “BIM data parser” in order to extract specific BIM data, whereas “ontology individual generator” transforms extracted BIM data into the product ontology. Ontology reasoning enabled by “ontology reasoner” can be further applied in order to infer new information or facts on the basis of explicit BIM data. Finally, an ontology-enhanced BIM model is generated for applications in construction planning. Semantic query can be formulated against “semantic query processor” in order to semantically query the ontology-augmented BIM model, thereby obtaining the required construction-oriented QTO information.

@&#OVERVIEW@&#

The system architecture for implementing the proposed semantic QTO approach is presented in Fig. 4
                        . Generally, it includes a BIM design model, a BIM data parsing tool/library, an ontology editor, an ontology reasoner, and an RDF tool. The BIM design model is developed using the BIM authoring tool, Autodesk Revit, which gives end-users modeling flexibility (e.g. its built-in functions such as Family Editor) and supports API to enable third-party add-on programming. The ontology in this research is established using Protégé 4.3, a free, open-source ontology editor [32]. BIM data is parsed from an Autodesk Revit BIM model using Revit API, and dotNetRDF, an open source .Net Library for RDF [40], is employed to build the ontology-augmented BIM model by populating the formalized ontology with extracted BIM information. A default ontology reasoner in Protégé 4.3 is employed to infer new facts (i.e., implicit design features) in the ontology-augmented BIM model based upon explicit BIM data. SPARQL (which is supported by dotNetRDF) is used to query the ontology-augmented BIM model in order to obtain construction-oriented QTO information. All the system components are integrated through Autodesk Revit API in C# language, and the prototyped system is programmed as an add-on for Autodesk Revit. A detailed explanation of the methodology is presented in the following sections.

Construction-oriented product ontology in this research is intended to allow construction practitioners (particularly, trades personnel) and QTO professionals to take off quantities for construction work packages and to enable effective workface planning. This ontology is established in order to align a BIM design model with construction process oriented QTO and to enable semantic querying in the domain of light-frame building industry. As described above, this ontology augments the BIM model by adding light-frame building terms, including their properties and interrelationships, and implicit design feature terms such as “L-connection”, which are relevant to construction practitioners. Fig. 5
                         presents part of the construction-oriented product ontology formalized within Protégé 4.3. It is worth mentioning that term, property, and interrelationship are represented by Class, Data Property, and Object Property, respectively, in Protégé 4.3. As shown in Fig. 5, “Product” is the root term in the ontology, and “BuildingElement”, “ElementPart”, and “ElementIntersection” are inherited from “Product”. Basically, inheriting indicates an Is-a relationship which means that each term (“BuildingElement”, “ElementPart”, and “ElementIntersection”) is a “Product”. Furthermore, some building terms such as “Wall”, “Door”, and “Window”, which are contained in the existing BIM schema, are defined under “BuildingElement”. “Plate”, “Stud”, “Drywall”, etc. are defined under “ElementPart”. An intersection among building elements is described by “ElementIntersection”. A few object properties (interrelationships) are defined in order to describe relationships among those concepts. For example, “hasSubComponent” is an object property to describe the relationship between “BuildingElement” and “ElementPart”, whereas “hasOpening” has to do with the interrelationships among “Wall”, “Window” and “Door”. Besides this, “hasIntersection” describes the relationship between “BuildingElement” and “ElementIntersection”. Various connection types are further detailed by using “LConnection”, and “TConnection”, and these terms inherit “ElementIntersection”. It is notable that sub-terms in the ontology inherit both properties and interrelationships of their base terms. This entails, for example, that “hasIntersection” also describes the relationship between “TConnection” and “Wall” due to the fact that “TConnection” and “Wall” are inherited from “ElementIntersection” and “BuildingElement”, respectively.

As shown in Table 1, construction-oriented QTO is taken off on the basis of product design features. All features need to be distinguishable in the QTO system. In addition to terms and their interrelationships, some term properties that characterize the building terms are defined in the proposed product ontology as depicted in Fig. 5. For instance, Stud has a type property describing its stud size (i.e., “50×102” or “50×152”), while stud spacing and wall function (e.g., bearing/non-bearing, IsAcoustic, IsExterior, IsFireRated, IsPartition, and so forth) are also described explicitly as Wall properties in order to quantify the work packages such as framing partition wall. “Level” is another property defined for “BuildingElement”, since building elements, such as walls on the second level of a building and above, demand extra labor time and cost in comparison with first-level walls, as illustrated in Table 1, and QTO for wall framing must be taken off according to the floor level. It is noteworthy that “WorkZone” is defined as a property of “BuildingElement” so as to provide construction practitioners with the flexibility of taking off quantities of work packages based on the horizontal construction zone when performing location-based QTO on large construction projects.

To enable semantic QTO search, a BIM design model is augmented by the proposed construction-oriented ontology. Building information needs to be extracted from the BIM design model and inputted to the ontology in order to obtain the ontology-augmented BIM model. The ontology in this research is established using Protégé 4.3 (a free, open-source ontology editor supporting RDF/XML files) and saved into an RDF file. BIM data in this study is extracted from a BIM design model using Revit API and inputted into the RDF file using DotNetRDF, resulting in the ontology-augmented BIM model.

Due to the fact that ontology augments the BIM model with domain terms and their properties and interrelationships, which are not defined explicitly in a given BIM model, there are two kinds of ontology terms: (1) basic building terms already defined in the BIM design model and (2) extended domain terms which are missing in the BIM design model. Modeling elements in Autodesk Revit are mapped with those terms in the construction-oriented product ontology, while BIM data, including explicit and implicit data, is extracted from existing design-oriented BIM models to populate the construction-oriented ontology. It is noteworthy that the majority of implicit construction-oriented BIM data (e.g., topological information) are derived on the basis of the explicit design-oriented BIM data by using algorithms, whereas the other complementary portion of implicit BIM data is inferred from ontology reasoning. Explicit BIM data is directly extracted from existing design-oriented BIM models. In the following sub-section, two types of BIM data extraction, explicit and implicit, are described in detail.

Generally, building product information in the BIM model can be categorized into three groups: geometric, spatial/topological, and enriched functional. Geometric information refers to vertices, edges, and faces of building components, while spatial/topological information elaborates on their location and spatial relationships. Enriched functional information refers to additional attributes or properties describing building components such as host information. Spatial information in Autodesk Revit is described by “Location” as shown in Fig. 6
                              . The exact location information of building elements can be extracted according to the class diagram in Fig. 6. Its geometric information such as vertices, edges, and faces is described by “GeometryElement” and can be retrieved using the “Element.get_Geometry()” function. However, topological information is not represented explicitly in the Revit BIM model, and therefore must be derived by conducting topological analysis based on related spatial and geometric information. Enriched functional information is embedded into the BIM model as properties of parametric building objects. Since Autodesk Revit is a family-based BIM solution, where all building elements are grouped into “families” [1], properties are categorized into two groups: type property and instance property. Type property is defined at the family type level and shared by a group of building elements with the same type. In contrast, instance property pertains to individual building elements. It is worth noting that Autodesk Revit has two kinds of family: system family and loadable family. Basic building elements such as Wall (see Fig. 6) are system families that are predefined in Revit, whereas other building elements such as doors and windows are loadable families represented as “FamilyInstance” (see Fig. 6). As shown in Fig. 6, type property is defined as FamilySymbol and WallType classes for FamilyInstance (e.g., windows and doors) and Wall respectively, and all type properties are then attached to individual elements as one common property. In contrast, each individual instance property is attached as one property to individual elements. To retrieve enriched functional information, two functions, “element.get_Parameter(string)” and “elementType.get_Parameter (string)”, can be utilized with the property name as input parameters, respectively. Material information is described by “Materials” and can be retrieved using “element.GetMaterialIds()”, “element.GetMaterialArea()”, and “element.GetMaterialVolumn()”.

Taking a wood-framed wall (see Fig. 7
                              ) as an example, wall, stud, plate, and opening information is vital for construction-oriented QTO. In Revit, walls are instances of “Wall” class, whereas windows, studs, and plates are instances of “FamilyInstance” class. It is “Category” that further identifies a building object’s type (e.g., Window, Structural Column, and Structural Framing). As denoted in Fig. 6, Wall is defined explicitly as a subclass of “Element” in the Revit class diagram. Some information such as “Id”, “Name”, “Level”, “Material”, and geometric information is defined as instance properties, while wall layer information is given as its WallType property. Nevertheless, there is no modeling element named “Stud” or “Plate” in Revit. Structural Column and Structural Framing, each a type of “FamilyInstance”, are alternative elements that can be used to model “Stud” and “Plate”. Similarly, its geometric and spatial information is described using “Location” and “GeometryObject”. Its type property is defined in “FamilySymbol”. All this information can be extracted by referring to the class diagram shown in Fig. 6. Herein, it needs to be noted that the host information for doors and windows is retrieved in a different manner from studs. The host relationship between walls and windows/doors is stored in the “Host” property of FamilyInstance due to the fact that walls are the valid host elements for windows/doors, and Revit saves this intelligent relationship to the BIM model during the modeling process. On the contrary, structural columns/frames used to model studs and plates do not have host information in the Revit internal data schema because they are stand-alone building elements that may not be hosted by other building elements. In this case, a property should be defined by the user in order to save this hosting relationship between walls and studs. Note that a suite of commercial Revit add-ons, Metal Wood Framer (MWF) [37], is employed to frame wall panels in this research. Hosting information of studs is saved into its “BIMSF_Container” property by this commercial program. In addition, this commercial program defines a property “BIMSF_Description” for Structural Column and Structural Framing to store its function information such as King Stud and Jack Stud. Stud hosting information and function information can be retrieved using “Element.get_Parameter (BIMSF_Container/BIMSF_Description)” (see Fig. 7). It should be noted that while the hosting information can be retrieved from “Host” and “BIMSF_Container” properties, the implicit inverse relationship (e.g., Wall.HasDoor and Wall.HasSubComponent as shown in Fig. 7) does not exist in Autodesk Revit BIM. In this regard, the proposed ontology enhances the interrelationships among terms by explicitly defining them and specifying the nature of the relationships (e.g. Inverse Of, Equivalent To and Sub Property Of) among the domain term interrelationships. Ontology in turn can create new information by reasoning/inferring about the explicit information. More specifically, ontology reasoning can not only confirm and check “known knowns”, but also shed light on some “known unknowns”. For example, “hasDoor” as depicted in Fig. 8
                               is declared as a sub-property of “hasOpening”, whereas “hasOpening” is the inverse of “hostedBy” in the proposed ontology in Protégé 4.3. When the explicit hosting information of Door A (e.g., hostedBy) is extracted from the BIM design model and added to the ontology, ontology reasoning infers its implicit inverse relationship and deduces the fact that Wall A is hosting Door A as shown in Fig. 7. The inferred fact is then saved explicitly in the ontology, which boosts the efficiency of information extraction.

A BIM model is an assembly of building objects, but some building element intersections are not explicitly modeled in the BIM design model. Construction practitioners, however, specifically need to obtain detailed intersection information. In terms of domain terms such as element intersections defined implicitly in the existing BIM schema, further analysis is required in order to derive this information, after which the analysis results can be stored explicitly in an ontology-augmented BIM model in order to facilitate the building information extraction. This section takes wall connection and stud spacing as examples to illustrate in detail the extraction of implicit BIM data.

Wall connection, one type of intersection, is crucial to construction practitioners in determining the quantity of intersection corner bead, as described above. Commonly seen wall connections in building projects such as T-connection, L-connection and Double-T-connection as shown in Fig. 9
                              
                              
                              
                              
                               are identified in this study. An algorithm is developed by which to detect those wall-to-wall connections based on geometric information of faces, edges, and points (as depicted in Fig. 9a). Basically, the algorithm first takes every combination of two walls in order to check whether they are connected by sharing one face. More specifically, a connection relationship between two walls is determined by checking whether two faces (each from one building component) overlap on one contact area denoted by Eq. (1) and whether their normal vectors defined as pointing outward from the solid object are in opposite directions as Eq. (2). The location and geometric information are extracted by referring to “Location” and “GeometryElement” in the class diagram shown in Fig. 6. The algorithm then takes one vertical face (e.g., start face, end face, left face and right face in Fig. 9a) from each component; given that 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          1
                                       
                                    
                                 
                               is from component 1 and 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          2
                                       
                                    
                                 
                               is from component 2, normal vectors of 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          1
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          2
                                       
                                    
                                 
                               are checked to determine whether or not they are in opposite directions using Eq. (2). This is done in order to exclude the containment relationship. If the vectors are opposite (e.g. 
                                 
                                    
                                       
                                          V
                                       
                                       
                                          1
                                       
                                    
                                    ·
                                    
                                       
                                          V
                                       
                                       
                                          2
                                       
                                    
                                    =
                                    1
                                    ×
                                    -
                                    1
                                    +
                                    0
                                    ×
                                    0
                                    +
                                    0
                                    ×
                                    0
                                    =
                                    -
                                    1
                                 
                              ), then all points (including vertices of building components and middle points of edges) of 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          1
                                       
                                    
                                 
                               are checked to determine whether or not they lie in 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          2
                                       
                                    
                                 
                              . If there are more than 3 points that do not lie in a straight line (see Figs. 9b–9e), the two elements are considered to be connected. All points of 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          2
                                       
                                    
                                 
                               are also checked against 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          1
                                       
                                    
                                 
                               in order to consider the case in which 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          2
                                       
                                    
                                 
                               is inside of 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          1
                                       
                                    
                                 
                              . Subsequently, the connection type (e.g., T-connection, L-connection) of the detected connection is identified by checking whether the end faces (e.g., start face and end face) of these two walls overlap by sharing one contact area or one edge as denoted by Eq. (3). Also, more detailed connection information such as connection angle and wall joining end, as shown in Figs. 9 and 10
                              , is analyzed. Connection angle is crucial information in determining the quantity of corner beads for drywallers. As shown in Fig. 9b, when two walls adjoin at 180°, an L-connection is made with a primary angle of 180°; however, no corner bead needs to be placed at this connection. The angles in Fig. 9 are thus derived from the direction vector of walls and are stored explicitly in the ontology-enhanced BIM model. Afterward, all the detected connections between each two walls are checked to determine whether or not they share the same joining wall and its joining end in order to derive wall connections with multiple walls joining together as shown in Figs. 9d and 9e. The T-connection in Fig. 9d consists of two L-connections that share the same joining wall, whereas the T-connection in Fig. 9e is made of three L-connections. Once all wall-to-wall connections are detected, new connection entities are then created in the ontology-augmented BIM model, and detailed properties, such as connection angle and wall joining end, are populated based on the analysis results. Also, “hasIntersection” relationships are established between wall entities and those connection entities in the ontology-augmented BIM model. It is worth mentioning that as described above, wall connections with multiple walls consist of several wall connections, each between a pair of two walls, as shown in Figs. 9d and 9e. This containment relationship between connections is detected and stored in the “hasSubIntersection” object property as shown in Fig. 10. In summary, the governing equations for deriving wall connections are given as Eqs. (1)–(3).
                                 
                                    (1)
                                    
                                       
                                          
                                             
                                                F
                                             
                                             
                                                1
                                             
                                          
                                          °
                                          ∩
                                          
                                             
                                                F
                                             
                                             
                                                2
                                             
                                          
                                          °
                                          
                                          ≠
                                          
                                          ∅
                                       
                                    
                                 
                              
                              
                                 
                                    (2)
                                    
                                       
                                          
                                             
                                                V
                                             
                                             
                                                1
                                             
                                          
                                          ·
                                          
                                             
                                                V
                                             
                                             
                                                2
                                             
                                          
                                          =
                                          -
                                          1
                                       
                                    
                                 
                              
                              
                                 
                                    (3)
                                    
                                       
                                          
                                             
                                                F
                                             
                                             
                                                end
                                                ,
                                                1
                                             
                                          
                                          ∩
                                          
                                             
                                                F
                                             
                                             
                                                end
                                                ,
                                                2
                                             
                                          
                                          
                                          ≠
                                          
                                          ∅
                                       
                                    
                                 
                              where 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          1
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          2
                                       
                                    
                                 
                               represent faces from two solid geometries, 
                                 
                                    
                                       
                                          V
                                       
                                       
                                          1
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          V
                                       
                                       
                                          2
                                       
                                    
                                 
                               denote their respective normal vectors, and 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          end
                                          ,
                                          1
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          F
                                       
                                       
                                          end
                                          ,
                                          2
                                       
                                    
                                 
                               represent the start face or end face from two solid geometries.

The proposed algorithm runs through every possible combination of two walls in order to check whether they are connected or not. Each wall is checked against other walls, and the algorithm is implemented through one iteration loop with one nested iteration loop. As a result, its time complexity is O (N^2), where N represents the number of walls. Fig. 11
                               presents the measured performance result of the proposed geometric algorithm, with the horizontal axis representing the number of walls and the vertical axis showing the elapsed milliseconds of executing the proposed algorithm in the prototype system, respectively.

Stud spacing denotes the maximum center-to-center distance between adjacent studs in a light-frame wall. To obtain stud spacing information, opening studs, such as king studs and jack studs, need to be filtered out so that only location information pertaining to common and cripple studs is retrieved. Then, all distances between adjacent studs are calculated in Revit API. The maximum of all the calculated Euclidean distances defines the stud spacing denoted as Eq. (4). Generally, three steps are executed in the proposed algorithm. To begin, the common and cripple studs are sorted in the ascending order of their distances to the wall origin; then, distances between adjacent studs are calculated through an iteration loop; finally, the stud spacing is determined as the maximum value of all calculated distances. The time complexities in these steps can be expressed as O (N
                              ∗log (N)), O (N), and O (N), respectively. Here, N denotes the number of studs. Accordingly, the worst-case time complexity for calculating stud spacing is O (N
                              ∗log (N)). Fig. 12
                               presents the measured performance result of the proposed geometric algorithm. The horizontal axis represents the number of studs, whereas the vertical axis shows the elapsed milliseconds of executing the proposed algorithm in the prototype system.
                                 
                                    (4)
                                    
                                       
                                          Stud Spacing
                                          =
                                          
                                             
                                                
                                                   max
                                                
                                                
                                                   1
                                                   ⩽
                                                   j
                                                   ⩽
                                                   m
                                                   -
                                                   1
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               ∑
                                                            
                                                            
                                                               i
                                                               =
                                                               1
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           p
                                                                        
                                                                        
                                                                           i
                                                                           ,
                                                                           j
                                                                        
                                                                     
                                                                     -
                                                                     
                                                                        
                                                                           p
                                                                        
                                                                        
                                                                           i
                                                                           ,
                                                                           j
                                                                           +
                                                                           1
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              where 
                                 
                                    
                                       
                                          {
                                          
                                             
                                                p
                                             
                                             
                                                i
                                                ,
                                                j
                                             
                                          
                                          }
                                       
                                       
                                          i
                                          =
                                          1
                                          ,
                                          2
                                       
                                    
                                 
                               are the coordinates of location point of the 
                                 
                                    j
                                    th
                                 
                               stud, and m is the number of studs, including common and cripple studs, in the wall.

Once BIM data (including explicit data and derived data) have been analyzed and extracted using Revit API, dotNetRDF is integrated with the Revit API in order to populate the established ontology with the extracted BIM data and generate an ontology-augmented BIM model in RDF. Basically, the construction-oriented product ontology (referring to ontology terms) is established in Protégé 4.3 and saved into a RDF file with an extension of owl. DotNetRDF provides functions such as RDFGraph.Assert(new Triple(subject, predicate, object)) to write extracted BIM data into this file in order to generate ontology individuals. It should be noted that the ontology-augmented BIM model keeps references of building objects in the Revit BIM model by recording identification numbers of corresponding building elements into ontology entities. In this way, the query results can be visualized in 3D in the original Revit BIM model, which enables construction practitioners to more clearly envisage the search results. With respect to implicit design features such as intersections, related host building elements in turn can be highlighted to enable feature visualization.

The purpose of construction-oriented QTO is to take off work packages on the basis of product design features and construction methods; construction-oriented QTO is thus product design feature-based QTO. In other words, construction practitioners obtain the QTO by (1) filtering the product design features based on descriptions of work packages and (2) performing take-off on applicable building elements or product design features. For instance, the work package “061110405167” for wall framing, as shown in Table 1 and Fig. 13
                        , is to take off the total length of studs hosted by walls that are resting on the 1st level of the building, made of 50mm×152mm studs, with a height of 2540mm, and functions as structural walls. This work package only applies to studs with these particular design features, which are associated with unique unit price and production rate; various work packages can be defined in order to factor in the effect of design feature details on production rate and unit price in detailed construction planning. Nevertheless, it is a challenge for construction practitioners to manually look for applicable building elements and product design features, thereby obtaining the required QTO. A query-based approach allows construction practitioners to search through BIM design models for the desired information in a flexible, straightforward manner. This approach reduces the laborious manual work and human errors associated with looking for and performing take-off on relevant building elements and product design features. It thus provides a promising solution to retrieve construction-oriented QTO information. SPARQL, released by the W3C RDF Data Access Working Group [10], enables a semantic query using formalized domain vocabularies. In this study, it is employed to query the ontology-augmented BIM model in RDF in order to materialize construction-oriented QTO. Fig. 13 presents one example of a SPARQL query for taking off the aforementioned wall framing work package. As shown in the figure, a query using SPARQL is expressed as a collection of conditions in a “subject–predicate–object” triple structure, allowing construction practitioners to obtain its quantity information. A triple structure, as illustrated in Fig. 13, includes three parts: the first is always the subject, while the predicate and the object are the second and third, respectively. Variables are indicated by a “?” prefix, and the prefix, “proOnto”, herein refers to the established construction-oriented product ontology. It should be noted that users can formulate query statements by using richer vocabularies generalized in the construction-oriented ontology. Richer vocabularies are used in “predicate” and “object” in order to filter the design feature. For example, “proOnto:isPartOf” is a vocabulary to describe the relationship between “BuildingElement” and “BuildingPart”, while “proOnto:Height” is a property of Wall in the ontology. Each triple represents one filtering condition for each design feature. For instance, “stud proOnto:StudSize “L2X6”^^xsd:string” defines that framing studs are “50mm×152mm” (2in.×6in.) type stud, whereas “hostWall proOnto:IsStructural true.” requires that the walls hosting studs should be structural walls. As a result, construction practitioners can obtain the construction-oriented QTO information by formulating the SPARQL query in a flexible, straightforward manner.

This research implements the proposed approach as a Revit add-on. The dotNetRDF is adopted and integrated in the Revit API in order to allow construction practitioners to formulate queries on the QTO system user interface. Fig. 14
                         presents the prototyped Graphic User Interface (GUI) where the SPARQL query can be inputted. The SPARQL query is executed through the dotNetRDF.Net library, from which query results can be retrieved. More importantly, query results can not only be shown in the developed GUI literally, but can also be transferred to Revit API in order to visualize query results within Autodesk Revit by highlighting corresponding building elements (see Fig. 14). Each query statement, along with its item name that has been inputted within the GUI, can be saved and updated into a query database via corresponding buttons (e.g., Update and Delete) on the GUI. These query statements can be reused across different projects in order to expedite query formulations. In the case of new projects, construction practitioners are able to browse through the query database via a drop-down list and reuse the existing query statements. In future work, query statements in the database can be integrated with unit price and production rate databases in order to effectively support construction planners in cost estimation and scheduling.

To validate the proposed methodology and the prototyped system, a wood-framed residential building, as shown in Fig. 15
                     
                     , was chosen for case study. The building consists of two stories and 34 wall panels, including 12 exterior walls and 22 interior walls. The building model was built in Autodesk Revit 2015 [1]. Due to the fact that Autodesk Revit, as a general BIM modeling tool, does not provide efficient functionalities for detailed construction framing, a suite of commercial Revit add-ons, Metal Wood Framer (MWF) [37], was employed to frame the building components such as wall panels. The developed prototype system was then launched in Autodesk Revit to conduct construction-oriented QTO. It is noteworthy that the ontology-enhanced BIM model was first generated or updated by “GeneAugBIM” on the GUI as shown in Fig. 14. It took only a few seconds for the prototype system to populate ontology individuals in the case project, since the DotNetRDF library, an open source .Net Library for RDF, was integrated with Autodesk Revit API through programming. The substantial manual work involved in the generation of ontology individuals was thus eliminated. An ontology reasoner in Protégé 4.3 called “FaCT++” was then invoked to infer implicit design features (e.g., inverse relationships between ontology entities), as shown in Fig. 8. Afterward, SPARQL queries were formulated in the GUI to take off work packages and visualize query results based on the ontology-enhanced BIM model.

Four examples were utilized to test and validate the prototyped system with respect to new domain terms, new term interrelationships and new term properties. SPARQL queries for these four examples are shown in Fig. 16
                     . New domain terms were tested by taking off exterior corners of L-connections for work package “092915100411”, listed in Table 1. Since wall connections were modeled explicitly in the ontology-enhanced BIM model, semantic query could be formulated to query this feature (see Fig. 16b). Note that only exterior corners of L-connections with two interior walls are taped with metal bead. Hence, a triple “?hostWall pronto:IsExteior false” as shown in Fig. 16a was added into the query statement in order to filter L-connections hosted by exterior walls. New term interrelationships were tested by taking off studs for structural wall framing “061110405167”, since taking off stud framing of structural wall requires explicit modeling of the hosting relationship between walls and studs. Wall framing “061110405167” is defined only for “50mm×152mm” studs hosted by bearing walls, and this item is taken off by summarizing stud lengths. The SPARQL query language provides aggregate functions, such as SUM, MAX, ORDER BY, and GROUP BY, and these aggregate functions (e.g., sum as shown in Fig. 16c) can be used in the query statement in order to take off applicable design features in the BIM model. Non-bearing wall framing for “061110260180” was taken off in order to test the new term property “StudSpacing” and “HasDoubleTopPlate”. As shown in Fig. 16e, “?hostWall proOnto:StudSpacing “12”^^xsd:string” defines that the stud spacing of the walls is 305mm (12in.), whereas “?hostWall proOnto:HasDoubleTopPlate true” requires that the walls are framed with double top plates. The query results are tabulated in Table 2
                     . A manual QTO was conducted to verify and validate the semantic QTO. The prototyped system provided the same QTO results as manual QTO, while significantly improving QTO efficiency in comparison with manual QTO. In addition, as demonstrated in Fig. 14, the prototyped system is able to visualize the query results highlighted on the GUI, which can enhance communication among construction practitioners. Moreover, this visualization feature allows the user to check quickly whether the required QTO has been done for all relevant building design features. Fig. 16 shows the resulting design features in green for the four corresponding SPARQL queries. For instance, Fig. 16b highlights all the walls hosting the required L-connections. As depicted in Fig. 16d, studs for structural walls with 2743mm of height are not highlighted in green
                        1
                        For interpretation of color in Fig. 16, the reader is referred to the web version of this article.
                     
                     
                        1
                      due to the fact that this height does not fall into the range specified in the corresponding query statement. Studs around the opening, such as king studs and jack studs, are also not colored in the figure since they are filtered out by the query statement as expected. In terms of partition framing for “061110260180”, only walls with the exact design feature of “50 mm
                     ×
                     102
                     
                     mm studs, 305
                     
                     mm O.C., 2450
                     
                     mm high, single bottom-plate and double top-plate” are highlighted in Fig. 16f, whereas other partition walls that may only embrace one of the specified features are not highlighted after executing the corresponding query statement. As another example, door buck for structural wall framing “061110400170” is taken off in order to evaluate the interrelationship between door bucks and walls, “hasSubComponent”, that is inferred through ontology reasoning. As “hasSubComponent” is the inverse of “isPartOf” in ontology modeling, and only “isPartOf” is extracted from Revit-based BIM design models, “hasSubComponent” is inferred through executing ontology reasoning and can be utilized in the SPARQL query, as demonstrated in Fig. 16g. All the queries are found to generate the expected results, which demonstrate the reliability of the prototype system.

@&#DISCUSSION@&#

Ontology, as a formal approach to naming domain entities and describing their interrelationships and properties, provides a promising solution to organizing information for construction management applications. Ontology technologies such as RDF are the basis for the semantic web as it allows structured and semi-structured data to be shared and integrated across different applications. Moreover, a data model using ontology technology such as RDF is saved in a graph structure which represents and stores data with nodes, edges, and properties. This graph data model enables semantic queries and provides the semantic foundation for knowledge-based computer applications. As such, the developed RDF-based ontology in this study is utilized to enhance current BIM design models by adding domain terms and their interrelationships and properties. Existing BIM data in a given BIM model is extracted and further analyzed to derive the building information (e.g. wall connections) that is not modeled explicitly in the BIM. By deriving the implicit BIM data, instead of explicitly modeling it, a large amount of human efforts during the modeling phase can be saved; meanwhile, no additional efforts are required to obtain construction-oriented QTO information during the quantity take-off process. On the other hand, deriving the implicit BIM data enables QTO professionals to take off the implicit BIM features on the basis of existing design-oriented BIM models, which improves QTO efficiency. All explicit and derived BIM data are used to populate the construction-oriented product ontology, and ontology reasoning is further applied to infer new information on the basis of extracted BIM data in order to generate the ontology-enhanced BIM model in an RDF file. The resulting RDF model conceptually functions as a domain-specific “model view” of the given BIM model while enabling semantic queries to facilitate construction-oriented QTO. As a result, construction practitioners can semantically query a BIM design model in order to generate QTO for construction activities by using their domain vocabularies, without the need to understand the technical structure of the underlying complex BIM schema.

Due to the fact that BIM design models lack domain semantics and standardized BIM object definitions in specific building domains, construction practitioners may take off their work packages based on BIM models designed using various BIM authoring tools. In this case, they need to understand various BIM object representations for the same building objects or design features (e.g., Structural Column and IFCMember for studs in light-frame walls), which increases their workload and complicates the daily planning work. Formalizing the domain terms into ontology allows users to apply a unique domain vocabulary they are conversant with in order to semantically query the BIM design model, thus addressing this problem to a certain degree and improving QTO efficiency. Domain terms and their various relationships are explicitly represented within RDF-based ontology in a “subject–predicate–object” triple structure, while the SPARQL query statement is formulated in the same triple structure using domain vocabularies. Moreover, each triple in a SPARQL query statement defines one filtering condition in connection with each design feature for the desired QTO. SPARQL queries are well aligned with users’ mental models of the targeted domain. Hence, it is straightforward to formulate SPARQL queries on BIM models in order to retrieve construction-oriented QTO information. SPARQL query statements in the present research are formulated by the authors based on the description of work packages. Once users are acquainted with SPARQL, it would generally take less than one minute to formulate one query statement. Of course, this means that some learning effort would be necessary in order for construction practitioners or QTO professionals to master SPARQL. Moreover, construction practitioners may find it difficult to design SPARQL queries using rich vocabularies. Therefore, in future work, GUI utility functions will be investigated to empower construction practitioners to take full advantage of rich vocabularies in formatting their own SPARQL query statements in a user-friendly fashion. Such user-friendly utility functions will maximize the benefit of the proposed semantic QTO approach.

This research proposes an ontology-based semantic approach for construction-oriented quantity take-off (QTO) and develops a prototype QTO system as an Autodesk Revit add-on in the particular context of light-framing building construction. The established construction-oriented product ontology enhances the current BIM design models by extending domain terms and their properties and interrelationships and aligns the BIM models with construction-oriented QTO, such that construction practitioners can take off the quantities for work packages under certain design features that may not be modeled explicitly in BIM. This ontology is established in Protégé 4.3 in the format of RDF/XML; dotNetRDF (an open source .Net Library for RDF) is integrated into the prototyped system. Hence, Simple Protocol and RDF Query Language (SPARQL) can be utilized to query the ontology-augmented BIM model, which allows construction practitioners to formulate semantic queries using richer vocabularies they are conversant with. The main contributions of this research are summarized as follows:
                        
                           (1)
                           Establishing a construction-oriented product ontology, which extends current design BIM models by adding domain terms and their properties and interrelationships without changing the original BIM schema. Detailed wall connection information is derived based on existing BIM spatial and geometrical data and modeled explicitly in the ontology-enhanced BIM model, all intended to support construction process oriented QTO.

Prototyping a semantic QTO system as an Autodesk Revit add-on. This system includes: (i) a Revit BIM model parser that converts the Revit BIM model into an ontology-augmented BIM model in an RDF file and (ii) a semantic search graphic user interface (GUI) that enables semantic queries on the ontology-augmented BIM model, capitalizing on the semantic awareness provided by RDF-based ontology and SPARQL query. In addition, the prototyped system is capable of visualizing the query results in order to facilitate communication among project stakeholders.

However, this prototyped system currently has some limitations. For instance, although ontology reasoning by using the default reasoners in Protégé 4.3 can infer some implicit information such as relationships between ontological entities in the prototyped system, the rule-based ontology reasoning by Semantic Web Rule Language (SWRL) is not yet supported due to the fact that the present research does not encompass SWRL. It is anticipated that SWRL-based ontology reasoning will further provide semantics to the QTO system and will be addressed in the future. Additionally, the construction-oriented product ontology is formalized in the particular context of light-frame building construction. Algorithms for detecting implicit design features such as StudSpacing and HasDoubleTopPlate are specific to light-frame building, whereas the geometrical algorithms designated to detect various implicit connections are generic for all kinds of building projects. For other types of building projects, construction practitioners can still rely on the geometrical algorithms to detect such intersection information in planning day-to-day work, but other algorithms and specific domain ontologies need to be further developed or customized so as to adapt the proposed semantic QTO approach to applications on other types of building projects. Additionally, zone-based wall intersection detection, instead of checking detections on every combination of two walls, will be instrumental in simplifying the geometrical algorithms and improving computing efficiency. Ontology development is a continuous process and the established ontology should be continuously updated in order to satisfy new requirements of construction-oriented QTO. Another potential extension in future research is to shift the prototype system from a vendor related Revit-based application to a fully standardized IFC-based BIM application.

@&#ACKNOWLEDGMENTS@&#

The authors wish to thank all anonymous reviewers for their valuable comments and suggestions that improve the quality of this paper. The authors would also like to thank the Natural Sciences and Engineering Research Council of Canada (NSERC) for financial support (Grant File No. CRDPJ 470067-14), as well as ​personnel from Kent Homes for their support and technical assistance.

@&#REFERENCES@&#

