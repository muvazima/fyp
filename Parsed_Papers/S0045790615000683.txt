@&#MAIN-TITLE@&#A personal connected health system for the Internet of Things based on the Constrained Application Protocol

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We present a system that enables Personal Health Devices to share information in home networks and with the Internet.


                        
                        
                           
                           The Constrained Application Protocol (CoAP) is used as underlying protocol.


                        
                        
                           
                           The CoAP communication model was adapted to the ISO/IEEE 11073 model in the proposed system.


                        
                        
                           
                           Results showed how the network overhead is around 50% lighter when compared to other protocols.


                        
                        
                           
                           Interoperability experiments demonstrated how the proposed solution can work with legacy systems.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Internet of Things for healthcare

m-health

Personal Health Devices

Constrained Application Protocol

@&#ABSTRACT@&#


               
               
                  The increasing costs of healthcare along with the increasing availability of new Personal Health Devices (PHDs) are the ingredients of the connected health vision. Also, a growing number of consumer electronic and mobile devices are becoming capable of taking the role of a health gateway, thus operating as a data collector for PHDs. In this context, we present a system that enables PHDs to share information in home networks and with the Internet based on a new Internet of Things protocol, namely the Constrained Application Protocol (CoAP). CoAP is used along with the IEEE 11073 family of standards, which is the main exchange data model for PHD communication. We discuss how the proposed system can be integrated to other connected health systems, such as a Universal Plug and Play healthcare system. We detail how the CoAP communication model was adapted to the IEEE 11073 model. We also present a real PHD prototype and its evaluation results. These results demonstrated the feasibility of the proposed solution, showing how its network overhead is around 50% lighter when compared to other protocols. Finally, we tested the proposed solution based on different scenarios, including a proof-of-concept integration with a service in the cloud, using different wireless physical interfaces.
               
            

@&#INTRODUCTION@&#

In recent years, the connected health vision is growing due to the availability of new technology enablers, such as low energy wireless standards and new sensor technologies, allowing for the development of connected Personal Health Devices (PHD). At the same time, with skyrocketing costs of healthcare and the increasing demand for health services for both chronic diseases and aging populations, new challenges and opportunities are rising [1]. The current model of visiting a doctor or always having a caregiver around is not working anymore.

Nowadays, Personal Health Devices can transmit data using short-range wireless technologies such as Bluetooth,
                        1
                        
                           http://www.bluetooth.org.
                     
                     
                        1
                      Near-Field Communication (NFC),
                        2
                        
                           http://www.nfc-forum.org.
                     
                     
                        2
                      ZigBee
                        3
                        
                           http://www.zigbee.org.
                     
                     
                        3
                      or Bluetooth Low Energy (BLE), to mention some. Moreover, we are witnessing the explosion of connected and smart devices everywhere. Based on this scenario, a set of enablers like cheaper components, new standards, and the increasing availability of connected devices, contribute to an environment where we can use medical data sensors in our daily lives. For example, using these new technologies together with tools provided by connected TV manufacturers, it is possible to create a health application that pops up every morning to request the reading of blood glucose level and collects data from the PHD automatically. As a result, in the connected health vision, patients are the ones taking control of their health and wellness by being responsible for monitoring themselves using connected devices and services available on the Internet, enabling a true scenario for the Internet of Things (IoT) in healthcare.

There are some challenges when creating a personal connected health infrastructure. Consumer electronics and mobile devices interact with each other using plug and play technologies, such as the Universal Plug and Play (UPnP). On the other hand, PHDs use different communication technologies such as Bluetooth, ZigBee, or USB. However, most wellness and health device manufacturers define and implement their own protocols, creating vertical solutions where their devices only communicate with their services. In other words, the main challenge is to seamlessly integrate PHDs, mobile devices and Internet services, considering scalability, flexibility and heterogeneity of devices and technologies.

Based on these challenges, an expressive effort from companies and individuals defined standards for Personal Health Devices, such as the IEEE 11073 set of standards. These standards declare how devices should communicate to each other (IEEE 11073:20601 [2]) and how each entity should behave. This set of standards defines how health information is formatted independently of the transport layer.

In parallel, based on the IoT vision and the increasing number of constrained devices connected to the Internet, new Internet-ready protocols are being defined. One of these protocols is the Constrained Application Protocol (CoAP) [3] proposed by the Internet Engineering Task Force (IETF).
                        4
                        
                           http://www.ietf.org.
                     
                     
                        4
                      CoAP is based on the Representational State Transfer (REST) model and can be considered a real enabler for IoT. Therefore, its adoption in a connected health scenario should be evaluated and explored.

In this article we introduce a system architecture where PHDs, mobile, and CE devices share health sensor data with local and Internet services using CoAP and IEEE 11073. We evaluated and detailed how the IEEE 11073 communication model should be adapted for CoAP, and what limitations are created. As a complementary effort, we integrate this new architecture with home networks based on UPnP [4] and present how this new proposal can be used with legacy connected health systems. Another contribution of this work is the use of IEEE 11073 standards as the core protocol for all systems. This integration enables PHDs to communicate in a standardized way, allowing them to share information across different services and other connected devices at home and on the Internet.

The remainder of this article is organized as follows: In Section 2 we present a review of related works and systems for connected health. Section 3 gives an overview of Personal Health Devices technologies, presenting an overview of the IEEE 11073 standard and CoAP. In Section 4 we describe the proposed system architecture based on IEEE 11073, CoAP, and UPnP. Results of evaluation experiments and comparisons are presented and discussed in Section 5 in detail. Section 6 describes some real cases based on the proposed solution. Finally in the conclusion, an overall discussion, current challenges, and future works are presented.

@&#RELATED WORK@&#

In the connected health domain, it is necessary to discuss how the industry and community are using standards and communication technologies. One association in particular, namely the Continua Health Alliance,
                        5
                        
                           http://www.continuaalliance.org.
                     
                     
                        5
                      works in the definition of guidelines that promote the standardization of PHDs, envisioning a market of standard, affordable, and readily connectable health sensors [1]. Based on current available technologies and protocols, these guidelines envision a scenario where gateways or managers collect health information from PHDs, and export it to the Internet.

Continua Design Guidelines (CDG) were adopted as the recommendation ITU-T H.810 [5] by the International Telecommunication Union (ITU). These guidelines present a reference architecture focused on the definition of different interface levels, as illustrated in Fig. 1
                     .

In term of technologies, CDG defines NFC for its Touch Area Network (TAN), Bluetooth Health Device Profile (HDP) and Bluetooth Low Energy for its Personal Area Network (PAN), and ZigBee for LAN. In this first level of interfaces, the IEEE 11073:20601 exchange protocol was chosen. The main reason to choose IEEE 11073:20601 as the base protocol is its independence of transport mechanism, which means that it provides the essential data structures necessary to ensure the understanding of the measured data for upstream layers.

The Wide Area Network (WAN) interface uses the Integrating the Healthcare Enterprise (IHE)
                        6
                        
                           http://www.ihe.net.
                     
                     
                        6
                      Patient Care Device (PCD) profiles to comprehensively share personal health data across different services. This interface definition is focused on data payload, message exchange, and security aspects of health information sharing across external networks, such as the Internet. The results are recommendations that simplify the integration and data share across different domains and databases. In terms of database, the Health Record Network (HRN) interface uses the Health Level 7 (HL7) set of standard,
                        7
                        
                           http://www.hl7org.
                     
                     
                        7
                      which are one of the most used standards for exchange, management, and integration of health information in different levels, such as clinical and administrative levels. Another important point of Continua is its certification program, which is used to ensure that PHD and connected health solutions are compliant with CDG.

In the context of this work, CDG provides a reference design for connected health systems. However, CDG still considers the use of Application Host Devices (AHD), which are in most cases smartphones, computer tablets, or other smart devices. Therefore, CDG does not provide guidelines about how to share health information from PHDs to Internet services directly.

In the literature, most of the current works propose and investigate problems using gateways and managers, or by using proprietary and domain-specific solutions. Simons [6] and Aragues et al. [7] discussed general opportunities related to cross-domain integration, including home healthcare and the CE industry. In Spinsante and Gambi [8] a specific system where PHDs interact with televisions by using a Multimedia Home Platform (MHP) middleware is proposed. Yan et al. [9] and Ivanov et al. [10] presented purpose-specific wireless networks where new types of sensors are necessary to enable the integration, and Bosman et al. [11] proposed a system to integrate specific IEEE 802.15.4 sensors to a UPnP network. The work presented by Cornelius [12] evaluates methods for the configuration of sensors in an open mobile health sensing system. In the e-Health domain, Viswanathan et al. [13] presented how health monitoring systems can be integrated with social networks. In Domingo [14], the work lists some challenges when dealing with ubiquitous healthcare, and presents a system based on the IP multimedia subsystem. Other research, such as Wood et al. [15] and Lu et al. [16], also proposed systems with challenges or solutions for mobile healthcare systems. Finally, some works proposed specific solutions for PHDs, such as Abbate et al. [17] and Park et al. [18], and in Raychoudhury et al. [19]a survey of pervasive middleware is presented where different design dimensions are identified and investigated. In an IoT context, Bazzani et al. [20] presents an IoT middleware with a use case for healthcare, and in Zhao et al. [21], medical applications on the IoT are discussed and analyzed. Finally, in Istepanian et al. [22], a new concept of m-IoT (Internet of m-health Things) is presented and discussed. In general, all of these works need to communicate with PHDs to collect sensor data to be shared with services. Therefore, they need a standard way to communicate with such devices. Although this need exists, most of these works do not discuss communication aspects related to the standardization of health information on the Internet. More specifically, they do not discuss how health information can be shared directly from PHDs to Internet services enabling a new IoT vision for healthcare.

Before describing the underlying technologies used in the proposed architecture, it is important to understand how PHDs work internally. By evaluating a PHD’s structure, it is possible to split it in three modules:
                        
                           •
                           
                              Sensor module, which collects vital signals from a person, filters them, and makes them available for other modules.


                              Controller module, which receives sensor information. It stores and processes it, and also controls the device’s operation.


                              Communication module, which encapsulates health information and exchanges it with external devices or services.

The focus of this article is on the communication module, which has the transport and control layers. For the control layer, based on standards adopted by the industry, one suitable choice is the ISO/IEEE 11073 family of standards.

In general terms, and considering the IoT vision, one of the main challenges to the adoption of IoT-ready health solutions is the limitation of some wireless interfaces regarding the use of the Internet Protocol (IP). Technologies such as Wi-Fi support the use of IP and are well deployed, but they still impose limitations related to battery consumption and costs. Recently however, low-powered technologies are creating extensions to support the Internet Protocol. Examples are the ZigBeeIP specification
                        8
                        
                           http://www.zigbee.com/IP.
                     
                     
                        8
                      and the IPv6 over Bluetooth Low Energy (BLE) work driven by IETF and Bluetooth Special Interest Group (SIG).
                        9
                        More details at http://tools.ietf.org/wg/core/.
                     
                     
                        9
                      Technologies such as Bluetooth are deployed in almost all smartphones, tablets, and portable computers. With the support for IPv6 traffic over BLE, those devices can become portable Internet gateways. This environment where portable Internet gateways are available everywhere would enable sensors, including PHDs, to connect to the Internet directly in a dynamic and configuration-free way.

As explained before, the IEEE 11073 family of standards was chosen as the core protocol for our solution in the healthcare domain. In this set of standards, the main one is the IEEE 11073:20601 [2], where it is defined that there are two types of devices: agents and managers. Agents are data producers, which are typically sensor devices. Managers are data collectors. A connection may occur in either direction, but the agent normally takes the initiative because it is aware when new data is available, for example when a patient takes a blood pressure measurement. IEEE 11073 is based upon the idea that agents, being sensor devices, are low-powered and have few processing resources, while the manager is typically a powerful device connected to a main power source. Therefore, most of the burden of IEEE 11073 complexity is put on managers. The IEEE 11073 is transport-agnostic, meaning that it can be carried by almost any packet-based technology such as TCP/IP, Bluetooth, and USB. Some transport protocols are already available and prepared for IEEE 11073. Examples are the Bluetooth Health Device Profile and the USB Personal Health Device Class (PHDC). Their objectives are the same, namely: to provide suitable transport channels for IEEE 11073.

The IEEE 11073:20601 information is written in ASN.1 language and is carried by Application Protocol Data Units (APDU) [23]. On top of everything is a Domain Information Model (DIM), which defines an idealized structure of data inside the agent device, which is mirrored by the manager in order to describe it. A real agent device has a number of objects that instantiate classes and each object has a number of attributes. One agent contains exactly one Medical Device System (MDS) object. MDS describes and contains attributes like System ID, manufacturer information, device specialization, etc.

Apart from the base IEEE 11073:20601 document, there are additional documents that define device specializations. For example, IEEE 11703:10404 is the oximeter specialization. These specializations define how specific device information is represented and carried over IEEE 11073, and also what a device can support. For example, a glucometer device can save up to N entries internally.

Like most protocols, IEEE 11073 workflow is governed by a state machine shown in Fig. 2
                        . It has two main states which are Disconnected and Connected. When in the Connected state, the agent and manager should start the association, passing through the Associating, Associated, Disassociating, and Unassociated states. Finally, in the Associated state, the agent and manager should wait for configuration information, check the configuration information, and start the operation state where they really exchange measurement data based on exchanged configuration. It is very important to understand this state machine when mapping the IEEE 11073 to be carried over different protocols.

Despite its transport layer independency, there are some formal requirements on the transport layer for IEEE 11073. As it is clear in the state machine, IEEE 11073 relies on connection oriented channels, where the concept of connected and disconnected is presented. Therefore, the transport layer technology must be able to establish a logical (or virtual) channel between the agent and manager, where they can exchange APDUs. This requirement for channels could be a problem in the Internet, where the concept of services provided by resource servers is widely deployed.

Considering the IEEE 11073:20601 as the base protocol for PHD data exchange, it is necessary to carry this data over a transport or application protocol. In the context of this work, we used the Constrained Application Protocol (CoAP), which is a web transfer protocol for use with constrained devices and networks. The CoAP uses a RESTful model for information exchange and is not based on the SOAP (Simple Object Access Protocol) model, despite the name similarity. CoAP is designed to be used over UDP, and its communication design follows a client/server model, like the Hypertext Transfer Protocol (HTTP) model. In fact, it is possible to use CoAP with an HTTP-CoAP proxy [24], enabling the interaction between legacy services on the Internet and new constrained devices of the Internet of Things. Although the CoAP is designed to be carried by UDP packets, it supports confirmable messages which is a requirement for the health data transport layer. Another attractive feature of CoAP is its resource discovery capability which allows clients to discover resources hosted by servers.

CoAP can be used over different transport technologies. Although it is designed towards the IEEE 802.15.4 protocol, new proposals are presenting the use of CoAP over different technologies, such as Bluetooth Low Energy and SMS.
                           10
                           More details at http://tools.ietf.org/wg/core/.
                        
                        
                           10
                         This could enable a new set of applications and services for embedded and mobile devices.

In terms of security, CoAP is bonded to Datagram Transport Layer Security (DTLS). DTLS is supported by different types of solutions including PreSharedKey, RawPublicKey, and Certificate Exchange. Related to power consumption, some works have shown the benefits of CoAP power consumption when compared to HTTP [25]. Therefore, CoAP features can fulfill important requirements for PHDs communication in terms of privacy, security, and being lightweight.

As introduced before, connected health technologies make it possible to collect Personal Health Information (PHI) automatically in order to exchange and store it on the Internet. In this scenario, the first step is to automatically collect information from PHDs using a communication interface. Therefore, before detailing the proposed connected health architecture, we first present a classification of PHDs based on their communication method [26]. From an IoT point of view, it is possible to classify PHDs into two different groups:
                        
                           •
                           Gateway-Based devices are PHDs that collect health information and send it to a health-specific gateway device. This gateway handles the data before it is transported through the Internet. Most of the current PHDs available in the market need a gateway to export information to the Internet. For example, PHDs can use wireless interfaces and profiles, such as Bluetooth HDP, to export data to a gateway. In the gateway, an IEEE 11073 manager receives the data through Bluetooth and encapsulates it in another protocol to send to the Internet.

Internet-Ready devices are PHDs that generate data already prepared for the Internet. This means that the information is already formatted in an IP friendly way, and this information will not be changed in order to be transported through the Internet.

Despite their classification, all PHDs have common features and requirements. Some requirements are common for all constrained devices, such as:
                        
                           •
                           Low processing power, as most of these devices are based on small microcontroller units.

Low power consumption, as the power for these devices is provided by batteries.

Limited communication interfaces, as these devices usually only share information using one communication interface.

However, as devices designed for healthcare purposes, other requirements appear when dealing with Personal Health Information (PHI) and PHDs. PHI is highly sensitive so access to it must be protected and allowed for authorized personnel only. Besides privacy aspects of the communication, also the trust on the communication channel must be considered. For example, the communication channel must guarantee that the information will be delivered to the correct destination every time. Therefore, Quality of Service requirements must also be considered depending on the PHD’s usage. For example, the communication channel has different requirements if the PHD is used for emergency situations or not [27].

One new requirement is identified when introducing PHDs into the Internet of Things paradigm. On the Internet, most resources and services are available through Web Services, and most communication follows the HTTP model. Therefore, a desirable feature for connected PHDs would be the capability of interaction between PHDs and Internet Services using well deployed protocols and standards.

Based on this, it is necessary to define an architecture that supports these different types of PHDs and their respective technologies, keeping the interconnectivity necessary for the Internet of Things. For that reason, we need an architecture that communicates to legacy devices available in the market, but that is also prepared for new devices in the Internet of Things.

In this article, we propose a new communication design for Internet-ready and Gateway-based PHDs. In this new design, PHDs can send IEEE 11073 messages using a REST model over the CoAP, enabling them to connect directly to health services in the cloud.

Having in mind that Gateway-based PHDs are well deployed in the market, changing their design is not an option. Consequently, it is necessary to communicate with those devices somehow. Based on this requirement, we integrated our new CoAP proposal with a UPnP architecture [4] that implements a health gateway for home networks. This system integration could be applied to other IEEE 11073 based systems, as discussed later. One important point in this integration is that health information is not changed, as the whole system uses the IEEE 11073 as the base protocol.


                        Fig. 3
                         illustrates the complete scenario for the proposed architecture. It is important to notice the two main flows of information. In the first, health information is shared in the home network using UPnP. In the second, information is shared directly to the Internet using CoAP. Although we illustrated two gateway devices, in a real scenario both gateways could be implemented in the same physical device.

In the following section we present details about how this new communication model for PHDs uses CoAP and IEEE 11073.

As introduced before, the CoAP model is similar to the HTTP model and, consequently, methods similar to GET, POST, PUT, and DELETE are available. However, as explained in the previous section, the IEEE 11073 communication model is based on a bidirectional channel where agents and managers exchange APDUs.

Having these features in mind, the first step for integrating CoAP and IEEE 11073 is to map the IEEE 11073 communication model into the CoAP client/server model. The IEEE 11073 model is based on agents and managers, where any of them can start the communication. To keep this communication feature the same, the ideal solution would be to define agents and managers at the same time as CoAP clients and servers, as illustrated in Fig. 4
                        . As can be seen, it is mandatory to at least map IEEE 11073 managers as CoAP servers, and IEEE 11073 agents as CoAP clients, where communication is always started by the agent. This is a suitable solution since agents (PHDs) are usually off to save battery; located in private networks behind NATs; and start communication just when they have health data available to share. As an optional feature, an IEEE 11073 agent could also have an internal CoAP Server, which can use CoAP observable resources to report events.

As the concept of end-to-end connection does not exist in the CoAP model, to make possible use of the same set of IEEE 11073 states, we considered that every new IEEE 11073 agent Association request to the manager changed the state to Connected on both devices. When one of them sends a Disassociate request, they both enter in the Disconnected state. Following the same logic, after entering the Associated state both devices stay associated until a Configuration update is necessary.

Following these definitions, the IEEE 11073 Manager and CoAP Server (11073Server) receives PUT messages from the IEEE 11073 Agent and CoAP Client (11073Client) using a predefined Uniform Resource Locator (URL). These PUT messages carry IEEE 11073 APDUs. Although the IEEE 11073 standard supports a great range of messages and transactions, this proposal focuses only o n the following transactions:
                           
                              •
                              
                                 Association: the 11073Client sends an Association request message and the 11073Server responds (in the PUT response body) with an Association response message. If the 11073Server responds reporting that it does not understand the IEEE 11073 Configuration of the 11073Client, the 11073Client sends the IEEE 11073 Configuration Report in the next PUT message.


                                 PHD attributes: if the 11073Server wants to get the attributes of the PHD (such as a description of the IEEE 11073 agent), it can request the attributes in the last response of the Association transaction.


                                 Report events: after the Association transaction, both entities are in the associated state and the PHD can report events to the 11073Server. Basically, these events are biometric measurements from the PHD (e.g. blood pressure levels, oxygen level, etc.). In this solution, the PHD just enters in the associated state if it has events (or measurements) to report.


                                 Disassociation: at the end, the 11073Client requests a disassociation to the 11073Server. After they are disassociated, the 11073Server considers the 11073Client to be disconnected. The 11073Server can also consider the 11073Client to be disconnected (and disassociated) after a pre-defined timeout.

Based on this mapping and the definition of transactions, it is possible for 11073Clients to report events to 11073Servers using CoAP messages while at same time following the IEEE 11073 communication model. Fig. 5
                         illustrates the data flow between the 11073Client and 11073Server based on the presented transactions.

For the evaluation of the proposed solution, we developed a reference system and later integrated it with an already developed UPnP Health solution [4]. These open-source tools were used: Antidote IEEE 11073 Library
                        11
                        
                           http://oss.signove.com.
                     
                     
                        11
                      and libCoAP.
                        12
                        
                           http://sourceforge.net/projects/libcoap/.
                     
                     
                        12
                      Antidote is a portable and lightweight software framework for IEEE 11073:20601, which can be deployed on different devices such as televisions, mobile phones, or personal computers. It has a plugin-based architecture which makes possible the addition of new transport technologies dynamically, such as Bluetooth HDP and TCP/IP. Antidote is the core tool used in all components of the architecture.

Based on the proposed architecture, we developed two software components: The CoAP IEEE 11073 client and the server modules. Using Antidote’s plugin-based architecture, we developed a CoAP plugin using libCoAP, implementing two entities: a CoAP 11073Server and 11073Client. Both implementations were developed and executed in a Linux environment, and a pulse oximeter specialization was used for tests in the 11073Client. Fig. 6
                     (a) illustrates the underlying architecture design for the CoAP clients and servers.


                     Fig. 6(b) illustrates the internal embedded software flow, which is based on a core main loop that receives data from the sensor module and the network interface. The sensor module could be an internal simulator module, or a real sensor device. With this underlying embedded software, we also integrated the 11073Client into an embedded platform, building a real oximeter device using IEEE 11073 and CoAP. The 11073Client was ported to ARM architecture in a reference platform integrated to an adaptation shield, which was used to collect sensor data from an oximeter device. The sensor data is sent to the sensor software module, as shown in Fig. 7
                     . This prototype implementation has a Wi-Fi interface to communicate to an external 11073Server running in a separate machine.

For the UPnP HealthGateway implementation, we used a reference IEEE 11073 manager provided by Antidote named health-d. This reference manager collects data from PHDs using Bluetooth HDP on Linux, and shares the health information using a shared bus interface. The health information is encoded using Antidote’s DataList format. For the UPnP layer, the Brisa UPnP framework was used to collect data from the shared bus and share it using UPnP services. More details about the UPnP HealthGateway are presented in [4].

Based on the reference implementation, we executed evaluation experiments in order to validate the requirements needed for PHDs, and also to compare the CoAP proposal with other solutions.

The first set of experiments was executed in order to show how lightweight the IEEE 11073 CoAP REST model is. To have a reference solution to compare with, we used an implementation based on TCP/IP sockets mainly because of its simplicity and wide adoption in the Internet. For these experiments, we used a TCP/IP plugin on Antidote and, for both solutions, the same set of messages were exchanged between the IEEE 11073 agents and managers. As a result, it was possible to evaluate how many packets and bytes were exchanged in total and to calculate the overhead difference between the protocols. Two transaction were compared as defined as follows:
                              
                                 •
                                 Full transaction: the 11073Client starts an association, exchanges attributes, sends three measurements and then disassociates, in a total of nine (9) IEEE 11073 APDUs and 425bytes.

Simple transaction: the 11073Client starts an association, sends one measurement and then disassociates, in a total of five (5) IEEE 11073 APDUs and 172bytes.


                           Table 1
                            summarizes the comparison results for each protocol and transaction in term of data packets and bytes used for each protocol implementation.

As expected, the CoAP REST implementation is clearly more efficient with respect of number packets and bytes used compared to standard TCP/IP sockets. It is important to point out that even for this simple transaction case, one can notice that the traffic, in terms of packets or bytes, is 50% lower in the case of the CoAP REST implementation. This is an important result because it clearly shows how many fewer packets the PHD handles in the communication interface, thus saving resources such as processing power. Most of this overhead difference is due to the simplicity of UDP when compared to TCP. However, besides the use of UDP, one of the main reasons for this reduced number of packets is the use of piggybacked messages in CoAP acknowledgments (ACK) packets. In the CoAP IEEE 11073 implementation, every ACK packet carries the response of its respective request. For example, when sending a PUT request to the 11073Server, 11073Client receives the PUT response in the same packet that is carrying the ACK.

Network performance experiments were executed in order to evaluate key features of CoAP, such as the confirmable delivery and retransmission of messages. These experiments were executed in a simulation environment on a Linux virtual machine. We used the Traffic Control (TC) tool of Linux to manipulate the network interface in order to simulate delay and loss of packets. Using this setup we executed experiments to evaluate the total amount of time for a complete simple IEEE 11073 transaction in a wide area network. To simulate this network, we defined a delay distribution function for every packet that is transmitted using the network interface. Considering that delay in networks is normally distributed, we used a Normal distribution function to model the channel. We considered a mean of 
                              
                                 μ
                                 =
                                 120
                              
                           
                           ms and a standard deviation of 
                              
                                 σ
                                 =
                                 40
                              
                           
                           ms, which means that 95% of the packets have a delivery delay of 
                              
                                 μ
                              
                           
                           ±1.96*
                           
                              
                                 σ
                              
                           . After some experimentation, the median delay of 120ms was chosen based on the sum of the average roundtrip time of packets in Bluetooth networks (around 20ms), and the roundtrip time of packets towards Internet services in the cloud (around 100ms).

The graph in Fig. 8
                            shows the duration of simple transactions in seconds. The graph compares the CoAP and TCP/IP solutions, showing that the response time of CoAP is smaller than TCP/IP solution. The total duration of the transaction also fulfills the QoS requirements defined by IEEE 11073-00101 document [27]. It is important to notice that the duration of TCP/IP is greater due mostly to socket connection procedures. But even removing the time of these procedures (around 0.5s), the CoAP mean time is smaller.

To compare the CoAP proposal with a gateway-based system, such as the UPnP solution, we changed the UPnP HealthGateway device. Instead of sharing the health information in the UPnP network, the HealthGateway sends the XML encoded health information to a web server using a single HTTP POST request. It used the same channel configuration as the previous experiment, as well as a standard Bluetooth HDP IEEE 11073 Agent. As a result, the total duration of the transaction is the sum of the IEEE 11073 transaction in the Bluetooth link from the Agent to the HealthGateway, and the HTTP POST duration between the HealthGateway and the web server using the same modeled channel of the CoAP experiment. The graph in Fig. 9
                            shows the duration of simple transactions in seconds.

The next experiment was to validate the retransmission feature of the CoAP. In the same simulation environment, a loss rate of 10% was added to the channel. We chose this value to force loss of packets more often. The graph in Fig. 10
                            shows the total amount of packets exchanged in every simple transaction.

The last network experiment was the use of the CoAP 11073Server and the 11073Client through different physical interfaces. For these experiments, the 11073Server was deployed in a machine in the cloud and the 11073Client communicates to the Internet using three different network interfaces: Wi-Fi with a 30Mbps cable network; 3G cellular network; and 2.5G cellular network. The main objectives of the use of these interfaces are to evaluate CoAP performance over different networks throughput, and also to evaluate how multiple firewalls and network translations in heterogeneous paths could interfere with CoAP/UDP communication. Fig. 11
                            shows the results in terms of mean duration and its variation. The first observation is that all transactions were completed. Therefore, the use of heterogeneous networks and their firewalls did not create limitations for the proposed solution in terms of completeness.

Based on these network experiments and results, it is possible to observe features of the CoAP that fulfill PHD requirements. The light weight of the CoAP messages makes them suitable for constrained devices such as PHDs. Simple messages require less processing power from devices, and also require less internal storage buffers. Although its underlying simplicity, the CoAP design also makes it possible to achieve the required levels of network QoS for PHDs, as presented by IEEE 11073-00101 document [27]. For example, it is possible to observe that for Wi-Fi/Cable and 3G connections, the mean duration is kept inside required QoS levels for monitoring applications.

When comparing the CoAP solution with a Gateway-based solution, where the results are presented in Fig. 9, it is clear that the gateway in the middle of the end-to-end path adds considerable delay basically because of the extra Bluetooth link path, and also because of the overhead due to the use of HTTP and TCP/IP messages.

In the retransmission experiments, where the results are presented in Fig. 10, the main point to observe is how many packets it takes to complete an IEEE 11073 transaction when packets are lost. The graph shows that even when losing and retransmitting packets, the CoAP solution exchanges fewer packets than the TCP/IP solution. Another interesting point to observe is that all IEEE 11073 CoAP transactions were completed. When using TCP/IP sockets, some transactions are not completed and need to be restarted. This behavior happens due to consecutive packets loss, forcing the TCP/IP socket to disconnect. As a consequence, the whole IEEE 11073 transaction is aborted. One of the reasons the socket disconnects is because it considers the end-to-end channel to be unavailable.

After the integration experiments, more experiments were executed to evaluate how the CoAP system communicates with the UPnP system.

For these experiments, we implemented a local CoAP IEEE 11073 manager in the same device as the UPnP HealthGateway. The objective here is to make CoAP PHD devices interact with CE devices in home networks. We used the prototype pulse oximeter implemented with CoAP IEEE 11073 shown in Fig. 7. Besides the CoAP PHD device, we also used a set of real Bluetooth PHD devices that communicate directly to the UPnP LocalHealth service. They were used to evaluate how the central IEEE 11073 manager behaves when dealing with multiple requests. Fig. 12
                            shows the evaluation setup and some of these devices.

Another interoperability experiment was executed integrating CoAP 11073Server with a real connected health system, namely SigHealth.
                              13
                              
                                 http://health.signove.com.
                           
                           
                              13
                            This system is compliant with Continua Health Alliance Guidelines. The objective of this experiment was to evaluate how the CoAP solution proposal could be integrated with legacy systems. In these experiments we integrated a CoAP 11073Server with SigHealths cloud infrastructure, and configured our PHD prototype to send measurements directly to the 11073Server in the cloud. The 11073Server then sends measurements to SigHealths services in the same cloud environment.

For each PHD used in the setup, a set of 10 interoperability tests were executed. The overall scenario and communication process between devices worked as expected. This validated all interoperability tests. One interesting point of the CoAP PHD prototype is that it can be used in different places at home, as long it has a Wi-Fi network available.

In the interoperability experiments with a real connected health system, we were able to use the CoAP prototype PHD to send measurements to SigHealth services, showing how CoAP systems can be integrated with legacy connected health systems.

Usage scenarios and applications were developed and tested, showing the relevance of the proposed architecture. The most relevant ones are described in the following sections.


                        Fig. 13
                         illustrates a scenario where a PHD connects to a service in the Internet using a smartphone. It is important to notice that the smartphone does not need to have any type of health service or application installed. For this application, the smartphone runs an Internet Access Point service over its Wi-Fi interface. Therefore, the smartphone works as an Internet Gateway device. The prototype CoAP PHD connects to the smartphone to share its data with an external Health Service on the Internet. The same set of tests was executed using a prototype Internet Gateway over BLE, where GATT characteristics were used to share Internet Protocol packets with the smartphone.

In an extension of this application, the same PHD is used in other environments at the house, and now connects to a simulated TV set that also implements Internet Gateway service over Wi-Fi, as illustrated in Fig. 13(b).

@&#RESULTS AND DISCUSSION@&#

As the prototype PHD is configured to connect to both devices, all readings were shared with the Health Service on the Internet using CoAP. However, some questions appear in this case, such as how to guarantee that the Internet gateways are trustworthy? Another question is, why create a new CoAP server in the cloud? For the first question, one solution was to authorize each gateway individually, for example, using the Bluetooth or Wi-Fi registering mechanism. For the second question, instead of creating a specific CoAP server in the cloud, it is possible to map CoAP messages into HTTP messages in the Internet gateway [3]. That way, it is possible to use the same HTTP server for both CoAP and HTTP clients.


                        Fig. 14
                         shows two usage applications for HealthGateway services for a given device. The first application, shown in Fig. 14(a), uses both LocalHealth and PersonalHealth services. In this case, a user named John makes a measurement using a Bluetooth enabled PHD. The measurement is then sent to John’s tablet, which makes it available to the UPnP network using a UPnP event. John’s UPnP-enabled TV receives the event with the new measurement. In this case, the event source is a HealthGateway device with a PersonalHealth service, enabling the TV to retrieve user information from the tablet, and it also knows that the measurement is from John.

Another usage scenario is illustrated in Fig. 14(b). For this scenario only the PersonalHealth service is considered. In this case, a UPnP-enabled refrigerator seamlessly discovers a PersonalHealth service available in the UPnP network. The refrigerator uses PersonalHealth actions to retrieve the user information and the health measurements history. Using this information, the smart refrigerator application can recommend specific meal recipes for John.

@&#RESULTS AND DISCUSSION@&#

Using the same setup presented in Fig. 12, the described scenario was executed and validated. UPnP Devices simulating a TV set and a refrigerator were implemented and deployed in a local network. For the refrigerator, simple recommendations were created and integrated with a UPnP application. The tablet UPnP application accesses the SigHealth connected health service, which was integrated with the CoAP Health Service. As a result, the tablet application collects information from the UPnP network and shares health information with it. This usage scenario shows the feasibility of the integration of UPnP HealthGateway devices with legacy and IoT Health Services.

@&#CONCLUSIONS@&#

In this article we discussed aspects related to Personal Health Devices (PHDs) communication with Internet services and home networks. We presented a proposal for using the Constrained Application Protocol (CoAP) and the IEEE 11073:20601 standards as a complete transport method for those devices. This proposal aims to increase awareness and availability of medical device standards in many dimensions, making it possible for PHDs to exchange information in a standardized and Internet-ready way. We also presented the integration of this proposal with a home health network architecture based on UPnP, which aims to provide a solution to integrate legacy PHDs and home devices. The possibility of using CoAP over different physical transport layers, such as Bluetooth Low Energy, and SMS, is also a potential enabler for its adoption in personal and consumer environments. Therefore, the proposed solution could be used as an alternative to current deployed connected health solutions and architectures.

We presented a set of evaluation experiments and parameters that can be used to compare with other connected health solutions in an IoT world. The preliminary results have shown the feasibility of the introduced solution. The comparison results made clear how lightweight the CoAP is compared to other protocols, with more than 50% less traffic than other TCP/IP based solutions. Moreover, features such as confirmable messages proved to fulfill requirements for health information sharing on the Internet. In special, the results have shown that CoAP can be used as a replacement of TCP/IP for healthcare applications and PHDs. In fact, most of the expected limitations of UDP are solved by using the CoAP architecture instead.

Based on the reference implementation, a set of usage applications were defined that highlights the interaction between the end-user, PHDs, and CE devices such as television sets and tablets, among others. The evaluation of the applications and reference implementation demonstrated the feasibility of the proposed architecture. As a result, the use of the proposed solution can be applied to different purposes, such as for Ambient Assisted Living (AAL). Projects like universAAL
                        14
                        More details at http://www.universaal.org/.
                     
                     
                        14
                      present reference systems and specifications for different AAL subsystems, where the use of connected health technologies and protocols, like IEEE 11073, are already used.

@&#ACKNOWLEDGMENTS@&#

The authors would like to thank CAPES, Signove, and the members of the Embedded Systems and Pervasive Computing Laboratory of UFCG for the partial support in the development of this work.

@&#REFERENCES@&#

