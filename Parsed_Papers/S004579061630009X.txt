@&#MAIN-TITLE@&#A risk evaluation approach for authorization decisions in social pervasive applications

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A new risk indicator model to evaluate security risks associated with information sharing on social pervasive applications.


                        
                        
                           
                           A risk indicator value can be predicted by assessing a number of risk attributes using a neurofuzzy technique.


                        
                        
                           
                           The proposed model was implemented successfully in a case study at a university campus.


                        
                        
                           
                           An effective approach in predicting security risks and in deciding up on them about disclosure decisions in social pervasive applications.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Security risks

Authorization

Social networks

Social Network Services (SNS)

Social pervasive applications

Neuro-fuzzy systems

@&#ABSTRACT@&#


               Graphical abstract
               
                  
                     
                        
                           Image, graphical abstract
                           
                        
                     
                  
               
            

@&#INTRODUCTION@&#

The recent technological IT-developments in pervasive telecommunication networks and devices have paved the way for what is known as pervasive computing leading to the deployment of ubiquitous services [1–3]. Further, the introduction of the latest technology of smart phones with GPS capabilities led to a complete set of location-based services (LBS) in addition to social network sites (SNSs) and associated pervasive applications.

There is no doubt that privacy and security can represent challenges for the adoption of social pervasive applications [4]. Most scientific literature in this domain assumed the non-trustworthiness of unknown entities by default and thus the conventional approach was to block all requests coming from unknown entities to sensitive information using technological approaches such as cryptographic solutions and access control mechanisms [5,6]. Social pervasive applications are considered highly dynamic and data rich environments with lots of possibilities for the exposure of users’ sensitive data. In this context, users’ authorizations decisions are of dynamic nature and should take into consideration the limited computing resources of pervasive devices and limited bandwidth of pervasive networks.

Most research, in social networks, has focused on interactions among users while a few researches have considered third party application interactions [7]. In this paper, we propose an autonomous approach to risk management that takes into consideration user interactions as well as other entities’ interactions based on a risk indicator model. The paper is organized as follows: in the next section, we elaborate on related work. Then, we introduce the proposed model. Then, we present a case study followed by a discussion of the obtained results and performance evaluation. Finally, we conclude the paper highlighting potential future work.

@&#RELATED WORK@&#

The possibility of retrieving and mining sensitive information from social network sites (SNS) has raised many concerns on user privacy. Nowadays, most web applications use application programming interfaces (APIs) and integration mechanisms such as the representational state transfer (REST) protocol, simple object access protocol (SOAP) and web services to retrieve users’ profiles from SNS [7]. Privacy threats are caused by the linkage between personally identifiable information (PII) and sensitive data [8]. Therefore, most scientific literature in this domain has focused on the separation between both types of information using approaches such as anonymity solutions, access control mechanisms and data encryption [9,10].

Controlling the access to sensitive information in social networks though challenging may represent a realistic approach [7]. This can be achieved by controlling access to sensitive data or by enforcing user authorization decisions and access control mechanisms. Authorization decision making requires that data collection policies of information requestors (IR's) be communicated beforehand. Besides, users should be able to describe their privacy requirements. Moreover, trust plays an important role since users can be divided into trusted (friends) and non-trusted (unknown) ones. A number of research efforts has followed this approach such as [11–13]. In [11], a sophisticated rule-based access control was proposed which used certificates and authorization tokens to identify trusted users. In [12], a policy based application was presented for information sharing using other users recommendations. Despite these might seem sophisticated approaches, they lack the support to adapting to changes in user privacy and trust requirements as well as having the users heavily involved in controlling access to their data.

In the social network domain; a new approach is needed that adapts its functionalities to changes while minimizing users interactions. In [14], ShEM was proposed to enable users to dynamically (both manually and automatically) control their information disclosure decisions through the use of a Mamdani fuzzy inference system. Nevertheless, the ShEM approach like many others depends on a shared repository which has to be trusted and may represent a single point of failure. Avoiding the use of a shared repository may present another requirement for a private and trusted social network platform. Having said that, mechanisms are needed so that users can have dynamic control of their personal information disclosure. In this context, some efforts have focused on the use of peer-to-peer (P2P) or decentralized network topologies in the provisioning of social applications. Among these efforts is PeerSon which is a P2P system that facilitates social network activities among users relying on encryption mechanisms [15]. Another approach, the Safebook [16] is a decentralized architecture for information exchange between users where trust relationships are taken into consideration in the authorization decisions. Although these systems can help protect users’ privacy, because they avoid the use of a centralized repository, they add complexities because users have to self-manage their personal data storage and usage. Moreover, they may suffer from system performance issues due to the overhead associated with encrypting and decrypting taking place for every communication.

The proposed approach represents a new approach since it takes the above-mentioned issues into consideration; adapting to changes, minimizing users interactions and users access control to data. User data is controlled by the users themselves while avoiding the use of decentralized systems and associated complexities. This is achieved through the use of a services approach deployed partially on the user device and partially on an Internet application server via the Cloud. This service communicates with the user device through the Internet using an android mobile application running from the user mobile device. This way we are able to offload heavy computations to the server side minimizing network traffic by sending only needed information over the network. In addition, information is sent only after risks have been defined using a risk evaluation and an authorization decision models which will be discussed in the next section.

Uncertainty associated with information disclosure in pervasive networks makes it difficult to make a good decision on information disclosure [17,18]. In the social context, users are surrounded by many uncertainties; unknown third-party applications and other unknown users who would like to get access to sensitive information. Further, security risks do exist which are caused by these uncertainty conditions. Sharing information under uncertainty conditions while being able to guarantee security represents one of the challenges in these environments [14]. The authors’ research hypothesis is that risk prediction and weighing is critical in social environments and can lead to successful protection of user data. This hypothesis is tested in the paper by the use of a case study. Based on this research hypothesis, the risk-based authorization model is proposed (see Fig. 1
                     ). In the following, the components of this model are being introduced.

The authors assume that it is more convenient for users to specify a security risk rather than to make an authorization decision. The reason for that is that one can think a certain interaction to put one's privacy in risk but still be willing to make disclosure permission due to some obligations or expected benefits. We propose the use of a factor which we call risk indicator (KI) to represent security risks. Security requirements will change depending on the context or situation of the user. KI values can be changed to reflect changes in the user security requirements and hence KI values overall evaluation will change to reflect these new circumstances.

Risk attributes refer to factors that determine the overall risk indicator associated with an information item. Inspired by FAIR [19], we distinguish four risk attributes as follows:

                           
                              -
                              
                                 Criticality level: explaining how serious is the activity. Usually this is associated with the importance of the asset, analogous to the importance of the service or the transaction to the user.


                                 Probability or likelihood level: referring to the possibility of an incident. If the risk is critical but with very low probability then the evaluation of its impact is less than if the probability was higher.


                                 Impact: refers to the impact of security risks expected during this transaction or activity.


                                 Information requestor reputation (IR): refers to how the information collector is rated by others with respect to his or her trustworthiness. Reputation is impacted by many factors such as the self-experience with this IR, history of interactions of others and trusted parties opinions [18,20,21].

Security risk attributes associated with an information item fi
                         are impacted by other factors and thus can be considered as the output of assessment processes which are considered out of scope of this paper. For example, defining RiskAttr as {‘criticality’: 0.9, ‘probability’: 0.9, ‘impact: 0.9, ’IR’: 0.8] means that RiskAttr [‘impact’] = 0.9 which is ‘high'. This value was computed by conducting a security assessment that took certain controls into consideration such as access control policies, authentication protocol robustness, used identity management mechanisms, whether an intrusion detection mechanism exists, layers of the firewall, length and complexity of passwords etc.

Social pervasive applications are quite dynamic, rich in content and with the use of pervasive devices, interrupting users to edit their risk attributes, every time the situations they find themselves in change, will be (quite) cumbersome. The process of evaluating and specifying risk attributes can be automated by classifying users into three main categories according to their risk attitudes; unconcerned (UC), concerned (CO) and highly-concerned (HCO). For each of these categories, a number of pre-defined preferences sets are assigned automatically without the need for user interference.

We adopt an aggregated weighting approach where valuating KI is based on a weighting average of risk attribute values under a certain user risk attitude. Weight values can be further controlled to correspond to changing user requirements due to changing situations users find themselves in. Let the requested information set F
                         = {f1, f2
                        … fn
                        }, which contains a number n of information items fi
                         specified by an IR. Then, for each user u exist a risk attitude σ(u), a number k of risk attributes (RiskAttr) and a KIi
                         value such that:

                           
                              (1)
                              
                                 
                                    K
                                    
                                       I
                                       i
                                    
                                    
                                       (
                                       
                                          f
                                          i
                                       
                                       )
                                    
                                    =
                                    σ
                                    
                                       (
                                       u
                                       )
                                    
                                    *
                                    
                                       ∑
                                       
                                          j
                                          =
                                          1
                                       
                                       k
                                    
                                    
                                       
                                          w
                                          j
                                       
                                       *
                                       R
                                       i
                                       s
                                       k
                                       A
                                       t
                                       t
                                       
                                          r
                                          j
                                       
                                    
                                    
                                       (
                                       
                                          f
                                          i
                                       
                                       )
                                    
                                    
                                    where
                                    
                                    σ
                                    
                                       (
                                       μ
                                       )
                                    
                                    ,
                                    
                                       w
                                       j
                                    
                                    ,
                                    R
                                    i
                                    s
                                    k
                                    A
                                    t
                                    t
                                    
                                       r
                                       j
                                    
                                    
                                       (
                                       
                                          f
                                          i
                                       
                                       )
                                    
                                    
                                       ɛ
                                    
                                    
                                       [
                                       0
                                       ,
                                       1
                                       ]
                                    
                                    .
                                 
                              
                           
                        
                     


                        Fig. 2 shows the aggregation model. For the sake of simplicity, we assume that valuating RiskAttrj
                         is highly subjective and depends primarily on one's perception in assessing the different risk attributes’ impact on his or her perceived risk. Besides, risk attributes have a direct influence on KI values. For example, if w1
                        
                         = 
                        w2
                         = 0.5, RiskAttr1
                        
                         = 0.5, RiskAttr2
                         = 0.3, and σ = 0.9, then KIi
                         = 0.9∗ 0.5∗(0.5+0.3) = 0.36.

Weights should be chosen based on domain expertise. In this context, and in order to study the relationship between the risk indicator value (KI) and the risk attributes and due to the fact that the list of attributes are not complete in addition to the lack of precise valuation of them, a fuzzy inference system is used and risk attributes are represented as fuzzy sets. Moreover, and to meet the dynamics of the social network environments, the fuzzy system needs to adapt to these dynamics. Therefore, the ANFIS approach is adopted. ANFIS can deal with uncertainty and incompleteness in addition to adaptation to changes. ANFIS uses a learning algorithm to adapt parameters of the fuzzy inference systems against a training data; it applies a combination of statistical methods to train the fuzzy membership function parameters to represent a given training data set [22].

The ANFIS fuzzy engine produces an output value in five steps: fuzzification, rules evaluation, defuzzification, training the fuzzy inference system (FIS) model using representative data and validating the model using checking and testing data. The fuzzy system properties can be explained as follows:

In fuzzification, each risk attribute variable RiskAttrj
                         including risk attitude σ(u) is given a set of appropriate linguistic values aj
                         defined by membership functions µa
                        . On the other hand, the risk indicator KI is considered to be a linear function with a value different per rule. Rules used are (fuzzy) IF–THEN rules of the following type:

                           
                              (2)
                              
                                 
                                    I
                                    f
                                    
                                    R
                                    i
                                    s
                                    k
                                    A
                                    t
                                    t
                                    
                                       r
                                       1
                                    
                                    
                                    i
                                    s
                                    
                                    
                                       a
                                       1
                                    
                                    
                                    a
                                    n
                                    d
                                    
                                    R
                                    i
                                    s
                                    k
                                    A
                                    t
                                    t
                                    
                                       r
                                       2
                                    
                                    
                                    i
                                    s
                                    
                                    
                                       a
                                       2
                                    
                                    
                                    a
                                    n
                                    d
                                    
                                    R
                                    i
                                    s
                                    k
                                    A
                                    t
                                    t
                                    
                                       r
                                       3
                                    
                                    
                                    i
                                    s
                                    
                                    
                                       a
                                       3
                                    
                                    
                                    a
                                    n
                                    d
                                    
                                    R
                                    i
                                    s
                                    k
                                    A
                                    t
                                    t
                                    
                                       r
                                       4
                                    
                                    
                                    i
                                    s
                                    
                                    
                                       a
                                       4
                                    
                                    ,
                                    
                                    t
                                    h
                                    e
                                    n
                                    
                                    K
                                    I
                                    =
                                    b
                                    
                                 
                              
                           
                        
                     

Using Matlab we can see an example of the steps needed to generate and train a FIS. Fig. 3
                         shows how we can create and train the FIS model using the Matlab ‘neuroFuzzyDesigner’ console. In this example, training data is loaded in the ‘neuroFuzzyDesigner’ console in the ‘Load data section’. Then, the FIS is generated from the ‘Generate FIS’ section. Afterwards, a plot showing the FIS output is generated from the ‘Test FIS’ section using the training data.

Then, after we created the model and trained it to tune the membership function parameters, another part of the data usually called testing data is applied on the model to see if the output fits with the actual output as seen in Fig. 4
                        . Using the Matlab ‘neuroFuzzyDesigner’ console, checking data is loaded from the ‘Load data’ section. Then, a plot is generated from the ‘Test FIS’ section with the checking data. Usually a dataset is divided into three categories: training data (70–80% of the data), checking data (15%) and testing data (15%). Once the performance of the model is accepted (reaching acceptable mean absolute error), it can be used in predicting further KI values.

After introducing the aggregation of KI, we need to map this aggregated KI value to an authorization decision (Dd). It is clear that there is no straight forward relationship to map KI to Dd. Non-linear models can be helpful in modelling this type of complex relationships where uncertainty takes over [23], so we adopt this approach here. The negative exponential function is used to model the relationship between Dd and KI. The reason for choosing it is its suitability to the smooth modelling of the opposite relationship between Dd and KI.

For each information item fi
                        , the relationship between KIi
                         and a Ddi
                         can be modelled as follows:

                           
                              (3)
                              
                                 
                                    D
                                    
                                       d
                                       i
                                    
                                    
                                       (
                                       
                                          f
                                          i
                                       
                                       )
                                    
                                    =
                                    α
                                    ·
                                    
                                       e
                                       
                                          −
                                          β
                                          .
                                          K
                                          
                                             I
                                             i
                                          
                                          
                                             (
                                             
                                                f
                                                i
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        where KIi, Ddi
                         ε [0, 1], α, β ε +
                        
                        N. From Eq. (3), when KI is maximum then Dd is minimum which explains the expected opposite relationship. In case KI
                         = 0.3, then Dd = 0.7 (α, β
                         = 1).

In order to test the research hypothesis and the model proposed in the previous section, a case study has been executed. This case study concerns the facilitation of communication between faculty teachers and students using a location-based social pervasive service developed at a university campus. The proposed risk-based disclosure model was implemented into this service. The implementation depends on many technologies such as Google maps, Google cloud messaging, web services and mysql databases.

The case study service has been developed in Java using android and apache platform. The developed pervasive service is a web based mobile application for locating friends, students and nearby university teachers using GPS and web services. A user can search for another user by name, role or phone number. Location is viewed by integrating Google maps using Google API. The mobile application uses Google messaging service to interconnect the mobile phone to the web application server via internet. Google Cloud Messaging (GCM) is a service that helps data sending from servers to Android devices. The GCM service handles all aspects of queuing of messages and delivery to the target application. The user can do the following using this social mobile service:

                           
                              •
                              sign in using username and a password.

search for contacts by name, role or number as shown in Fig. 5
                                 ,

add a friend,

send messages to other contacts,

track a friend via a map,

change location finding settings.

The architecture consists of a set of integrated components. These components are the android mobile application, Google services component including Google Map and Google Cloud Messaging (GCM) services. Further, an IR represents the information requestor which can be another user of the social network or a third-party social mobile application. An IR is running the same mobile application on his or her device. He or she communicates through the Internet via Google services asking for an update of a certain user data. The request is received by the associated server component which is responsible for handling all location requests. Users’ information and signup events are stored in the databases. We distinguish two types of databases:

                           
                              1.
                              
                                 Server DB: a Mysql DB storing all users’ data and handling requests information.


                                 Mobile DB: SQLite DB to store the mobile user information, dynamic data and a light rule engine locally on his or her own device.

The client side is represented by the mobile application service located on the user device. The mobile application calculates the risk indicator value and disclosure decision based on Eqs. (1) and (3) using the fuzzy rule and the light rule engines. The fuzzy rule engine includes the computational model while the light one includes user preferences with respect to how they want to be contacted. It then responds back to the server which propagates the response to IR via the application service (see Fig. 6
                        ). After that the responses are stored in the databases and, based on the responses, an IR can get (denied) access.

@&#EXPERIMENTAL RESULTS@&#

We asked students to start using the service for a couple of days. Students were categorized into two equal groups; information requestors (IRs) and information owners (IOs). IOs were asked to specify their risk attributes and attitudes and to provide an actual value for KI and Dd per each request they receive. All data collected were stored in a mysql database server. Around 783 requests were recorded for users. The application calculated (predicted) KI and Dd later offline using Eqs. (1) and (3) to compare them to the manually entered (actual) values.

A sample of 747 requests was used to test the proposed KI neuro-fuzzy model. The dataset was divided into three datasets; training, checking and testing data (249 requests each). Fig. 7
                         shows the Matlab script used in creating the FIS system that was used in calculating (predicting) KI from recorded risk attributes.

The dataset is stored in files and loaded via the script into the Matlab workspace. We used four risk attributes (RiskAttr) as inputs (probability is left-out for simplicity reasons). Each input has three Gaussian membership functions [low, medium, and high]. The dataset is divided into three samples: checking data, training data and testing data where each consists of 249 requests. We create the FIS using checking data. Rules are then created automatically from the data as IF Then Blocks. The training data is used to train the FIS model into a new FIS. The FIS before training and that after training are applied on the testing data to test the performance of the model. Fig. 8
                         plots the trained FIS output compared to the actual values and the output of the weighted average method of Eq. (1). It can be seen from Fig. 8 that with the use of the training approach of the neuro-fuzzy system, the output is closer to the actual values, in almost all the requests, than the output of the weighted average method.


                        Fig. 9
                         shows the mean absolute error for KI after training (compared to actual KI) which is very small. Hence, we may conclude that the neuro-fuzzy model can predict risk indicators very close to the actual values users have assessed for this particular experiment.

We compared the actual disclosure decision made by users with that calculated by Eq. (3). Figs. 10
                         and 11
                         show that in most cases predicted disclosure decisions were close to the actual ones. Further, the prediction model could decrease the number of responses in the uncertain area between requests from 100 to 300.

We may conclude that the model is successful in representing low and high KI values to an accepted error level. While ‘medium’ values (0.35–0.55) will lead to ‘unsure’ disclosure decisions which require interference from the user side. From obtained results, only 15% of the requests were unsure requests. Additionally, it can be seen that the predicted Dd has decreased the unsure area where both KI and Dd lie in the middle (response values 0.35–0.55). The accuracy of the model can further be improved by tuning the parameters of Eq. (3) through some statistical and learning techniques such as genetics and neural algorithms which can help adjust these parameters by training the model [22]. For the sake of simplicity, we created a simple Matlab script that changes the values of α and β while calculating the mean absolute error (MAE) in each case. Fig. 12
                         shows the mean absolute error with changing α and β values. From the figure, it can be seen that the MAE is less impacted by changing β values for the small values of α (α
                         <0.6). For α ≥ 0.6, β has a higher effect on MAE. We noticed that α
                         =0.6 and β
                        =0.18 score the lowest mean absolute error (MAE
                        =0.1420).

Based on above analysis we can simply formulate Eq. (3) for this experiment as follows:

                           
                              (4)
                              
                                 
                                    D
                                    
                                       d
                                       i
                                    
                                    
                                       (
                                       
                                          f
                                          i
                                       
                                       )
                                    
                                    =
                                    0.6
                                    ×
                                    
                                       e
                                       
                                          −
                                          0.18
                                          .
                                          K
                                          
                                             I
                                             i
                                          
                                          
                                             (
                                             
                                                f
                                                i
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        
                     

In the following, we discuss the performance of the implemented model with respect to the three identified privacy requirements specific to social networks listed in Section 2; adapting to changes, minimizing users interactions and users access control to data as perceived by the results and compared to existing research such as [11,12,14]. In addition, other performance factors such as computational costs and resources utilization, dealing with security threats, and model applicability are also discussed.

Adapting to changes is implemented in this work using an aggregated weighting mechanism where weight values can be controlled according to changes in the user data. Further, the ANFIS model is used to adapt the functional relationship between KI, risk attributes and risk attitude to the collected data. This way the computed Dd becomes adapted to new circumstances which is not the case in [11,12], or [14].

The proposed model differs from previous research efforts in [11,12,14] in that it classifies users according to their risk attitude into three categories. Based on this classification, built-in settings can be used in computing Dd and hence users interactions can be minimized.

Similar to approaches in [11,12,
14], users are able to control access to their information. The services architecture used makes users able to control the disclosure of their data through the mobile application running on their mobile devices.

The implemented approach is expected to meet the requirement of low resources consumption on the mobile device side and on the network. Heavy computations, such as training the data and searching for users, are done on the server side with only needed information transferred over the network. The reason for that is that information is transferred on request basis only and most of the heavy calculations are made at the server side through the use of php requests with few computations made on the mobile device. The use of training can have impact on the system performance due to the iterations mechanism of the ANFIS approach compared to approaches in [11,12,14]. However, this will have limited impact on the system performance because of the high specifications of the server used.

The user satisfaction requirement is also met in this implementation. A sample of 30 users was chosen randomly from the population of users and was surveyed on how satisfied they were by the implemented approach. Collected results showed that around 88% of them were satisfied and only 12% were not satisfied. The satisfied users liked the approach especially the service functionality. Those unsatisfied users found it inconvenient entering a lot of manual input with regards to information items and disclosure decisions which was needed for testing purposes only.

Access to the service is restricted to registered users only. The implemented service requires user pre-registration before they can use the service with passwords stored encrypted in the database. Additionally, the service uses database authentication and session keys mechanisms to allow authorized users only to access the service using active sessions and hence avoid any possible intrusion to the system or malicious attacks. In the social network, there can be inside attacks from internal users who are authorized and authenticated. This type of attacks is not dealt with by our model but is recommended for future work.

So far we have indicated the usefulness of the proposed model in the context of the experimental work that was conducted at a university campus. In addition to that, the proposed model can be applied to assess risks associated with friendship requests or social gaming requests from unknown people on social networks by assessing risk attributes. Further, the model can be applied to assess the risk associated with using a certain product on social rating sites such as Epinion.com.

Epinion.com is a directed graph social network where members of the site decide whether to ''trust'' each other's ratings of products by rating users and rating products [24]. In Epinion, users rate other users by either adding them to their web of trust (IR = +1) or web of distrust lists (IR =−1). A user in this case is known as a node while the reputation connection between a user and another is known as an edge. In addition, users rate products.

In our model, the risk indicator KI can represent the overall risk evaluation associated with a product based on the rates in Epinion made by users. Risk attributes can refer to IR (users’ reputation), product quality, product rates (PR), and product criticality to the user. The dataset we used consists of 2.7 million records of product and user rates and is the same dataset used by [24]. We converted the dataset file into a microsoft access database. Applying simple SQL queries we could create an overview of the data as follows: (‘product_id’, ‘user_id’, ‘user_rate’, ‘IO’, ‘TR’, ‘Date’) where ‘user_id’ represents the user who rates the product with the value of ‘user_rate’. ‘IO’ is the user who evaluates the ‘user_rate’ with the value ‘TR’. ‘Date’ represents the date this review was made (because all dates were the same, the date field was not taken into consideration in the evaluation).


                        Table 1
                         shows an example of ratings made by one user (#199781) on a product (#836144772) with how other users evaluate his rating. For the sake of simplicity, we used two risk attributes only; product rate (PR) and user reputation (IR). We extracted data on one product only and collected 5 user rates of this product together with other users’ opinions on these rates. Product rates are from 1 to 5. After calculating the rate per user, we took the ratio of this rate (divided by 5). To calculate the risk, we subtracted this ratio from 1. Thus, risk KI(p) associated with using a product p can be calculated using the following equation:

                           
                              (5)
                              
                                 
                                    K
                                    I
                                    
                                       (
                                       p
                                       )
                                    
                                    =
                                    1
                                    −
                                    
                                       1
                                       
                                          n
                                          *
                                          m
                                       
                                    
                                    
                                       ∑
                                       
                                          l
                                          =
                                          1
                                          ,
                                          n
                                       
                                    
                                    
                                       (
                                       I
                                       
                                          R
                                          l
                                       
                                       *
                                       P
                                       
                                          R
                                          l
                                       
                                       *
                                       
                                          ∑
                                          
                                             u
                                             =
                                             1
                                             ,
                                             m
                                          
                                       
                                       
                                          T
                                          
                                             R
                                             u
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        where n is the number of users who rated product p, m is number of users who rated user l ratings, IRl
                         is a weighting factor representing user l reputation, PRl
                         is the product rate made by user l and TRu
                         is user u rate of PRl
                        .


                        Fig. 13
                         shows an overview of risks associated with a product based on five users’ ratings on that product. In order to calculate the overall risk associated with a certain product, a weighting average is taken of the above rates. User weights can be calculated based on the overall rates they received on their rating of all products on the website. This is similar to the approach of [24] where they count the number of positive trust minus number of negative trust values with respect to the total number of trust and distrust connections a user receives. IR(u) = (p
                        −
                        n) / (p
                        
                        +
                        
                        n), where p and n are number of positive and negative trust connections a user u received respectively. Then, we can calculate the average weight per user which is shown in Table 2
                        . Using Eq. (5), we can compute the total KI of a certain product. From Table 2, we notice that the risk has decreased when applying the average weighting approach (which is more accurate) in comparison to the normal average.

@&#CONCLUSION@&#

A new approach based on a risks evaluation model for information disclosure in social pervasive applications has been introduced. We showed how we can calculate risk levels using a single value called the risk indicator (KI). We used a neuro-fuzzy approach to make the prediction process of the risk indicator adaptive to changing circumstances. Additionally, a computational model was proposed for disclosure decisions. We tested both models using a social mobile service prototype. Experimental results showed that the predicted risk indicator values (KI) were very close to the actual ones compared to those calculated using average weighting only. We also showed how the model can be applied to one of the existing social sites such as Epinion.com. The next step will be to adopt some novel algorithms for training the ANFIS model, non-linear regression techniques and genetic algorithms to improve the computational model predictability in order to increase its accuracy. Additionally, we will be studying ways of dealing with inside attacks and the risks associated with the uncertain cases when neither the user nor the model can decide sharply.

@&#ACKNOWLEDGMENTS@&#

The authors would like to acknowledge that the research in this paper was funded by the research project number 6668 and titled: “Adaptive Private and Trustworthy Modern Software Systems” funded by Science and Technology Development Fund (STDF), Egypt. The authors would like also to acknowledge the support they got from Professor Marijn Janssen for his comments and for hosting part of this research project activities at the ICT department, Faculty of TBM, Delft University of Technology.

@&#REFERENCES@&#

