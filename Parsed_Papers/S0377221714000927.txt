@&#MAIN-TITLE@&#A bi-objective turning restriction design problem in urban road networks

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           This paper introduces a bi-objective turning restriction design problem.


                        
                        
                           
                           Vehicle emissions and total travel time are considered in the upper level problem.


                        
                        
                           
                           Modified artificial bee colony (ABC) is developed to obtain Pareto optimal solutions.


                        
                        
                           
                           Incorporating crossover operators into ABC can improve its performance.


                        
                        
                           
                           Traffic information provision does have an impact on the number of optimal designs.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Bi-objective turning restriction design problem

Bi-level programming

Stochastic user equilibrium

Artificial bee colony

Crossover operator

Vehicle emissions

@&#ABSTRACT@&#


               
               
                  This paper introduces a bi-objective turning restriction design problem (BOTRDP), which aims to simultaneously improve network traffic efficiency and reduce environmental pollution by implementing turning restrictions at selected intersections. A bi-level programming model is proposed to formulate the BOTRDP. The upper level problem aims to minimize both the total system travel time (TSTT) and the cost of total vehicle emissions (CTVE) from the viewpoint of traffic managers, and the lower level problem depicts travelers’ route choice behavior based on stochastic user equilibrium (SUE) theory. The modified artificial bee colony (ABC) heuristic is developed to find Pareto optimal turning restriction strategies. Different from the traditional ABC heuristic, crossover operators are captured to enhance the performance of the heuristic. The computational experiments show that incorporating crossover operators into the ABC heuristic can indeed improve its performance and that the proposed heuristic significantly outperforms the non-dominated sorting genetic algorithm (NSGA) even if different operators are randomly chosen and used in the NSGA as in our proposed heuristic. The results also illustrate that a Pareto optimal turning restriction strategy can obviously reduce the TSTT and the CTVE when compared with those without implementing the strategy, and that the number of Pareto optimal turning restriction designs is smaller when the network is more congested but greater network efficiency and air quality improvement can be achieved. The results also demonstrate that traffic information provision does have an impact on the number of Pareto optimal turning restriction designs. These results should have important implications on traffic management.
               
            

@&#INTRODUCTION@&#

Congestion is one of the most representative aspects of urban road traffic problems, and has become one of the most important factors that influence people’s mobility and travel cost in daily life. Meanwhile, road traffic leads to some intractable problems that attract wide attention from the whole society, such as road safety, environmental pollution, and energy consumption. Traditionally, traffic control, such as signal control, lane allocation, turning restriction, and road pricing, mainly aim to improve traffic efficiency and alleviate traffic congestion. Nowadays, especially in developing countries, the environmental pollution problem caused by vehicle emissions attracts more and more attention in the transportation engineering field and becomes a hot issue for studies (see Chung, Weaver, & Friesz, 2013; Demir, Bektaş, & Laporte, 2012, 2014; Gokhale, 2012; Mayeres, Ochelen, & Proost, 1996; Ng & Lo, 2013; Orubu, 2004; Pandian, Gokhale, & Ghoshal, 2009; Zhu, Lo, & Lin, 2013 for example).

Vehicle emissions, such as carbon monoxide (CO), nitrogen oxides (NO
                        x
                     ), and volatile organic compounds (VOC), have been shown to have a variety of negative effects on public health and the natural environment (Szeto, Jaber, & Wong, 2012). Compared to the emissions from industry, power plants, space heating, refuse disposal, etc., vehicle emissions play the most important role in contributing air pollutants in typical urban centers (Bach, 1972). Empirical studies show that transportation is identified as a highly significant contributor, accounting for well over 50% of total air pollutants in some countries (Fu, Hao, He, & He, 2001; Goyal, Ghatge, Nema, & Tamhane, 2006; Orubu, 2004). In some developing countries, this percentage is expected to increase quickly in the future because the vehicle growth has not been properly regulated by the government authorities. For example, the motor vehicle population continued to increase at an annual rate of approximately 10% in mega cities in China (Chan & Yao, 2008). This calls for the needs to control the situation. In fact, there are many means that have been successfully adopted to reduce vehicle emissions, such as tightening vehicle emission standards, reducing travel demand (e.g., pricing) and vehicle ownership (e.g., vehicle quota systems), improving traffic management and control (e.g., signal control), etc.

Turning restriction is one of the commonest traffic management techniques and an effective, low cost traffic improvement strategy for urban road networks. Turning restrictions are applied to a group of intersections where travelers are prohibited to drive into restricted downstream links. Long, Gao, Zhang, and Szeto (2010) proposed a turning restriction design problem (TRDP), which is the problem of determining a set of intersections to implement turning restrictions to minimize the total system travel time (TSTT). It has been demonstrated that implementing turning restrictions can effectively improve traffic efficiency by reducing the TSTT. However, the influence of turning restrictions on environmental pollution has not been examined yet. In fact, when a turning restriction is implemented, some drivers need to travel at a longer distance to reach their destinations as their original, shortest routes are not permitted to use. The vehicle emissions and the corresponding monetary values (i.e., the cost of vehicle emissions) are usually more as a result. Although the overall TSTT is reduced, there may be a tradeoff between minimizing the cost of total vehicle emissions (CTVE) and TSTT. Therefore, this paper investigates a bi-objective TRDP (BOTRDP), which aims to reduce not only the TSTT, but also the CTVE by implementing turning restrictions.

Turning restrictions are implemented by traffic managers, but the implementation should take travelers’ route choice behavior into account. A new turning restriction in road networks directly influences some travelers’ route choice, because their original routes include the restricted turning and are infeasible after implementing the turning restriction. As a result, the original traffic equilibrium state is disrupted and some travelers adjust their routes. A new equilibrium is realized again only when all travelers cannot be better off by unilaterally changing their routes. Similar to the original TRDP (Long et al., 2010) and the traditional network design problems (see Farahani, Miandoabchi, Szeto, & Rashidi, 2013 for a comprehensive review), the BOTRDP can be mathematically formulated as a bi-level problem. The upper level problem (ULP) of the BOTRDP is a bi-objective optimization problem that minimizes both the TSTT and the CTVE. The lower level problem (LLP) formulates travelers’ route choice behavior as the SUE assignment problem, which is more realistic than the deterministic user equilibrium (DUE) assignment problem (Chen & Alfa, 1991b).

Whether a turning restriction is implemented or not can be represented by a binary variable. Hence the ULP of the BOTRDP is a discrete optimization problem, and the BOTRDP is a bi-objective nonlinear bi-level mixed integer programming problem, which has been recognized as one of the most difficult and challenging problems in the transportation research area due to its computational difficulty. In general, all Pareto solutions of the BOTRDP cannot be obtained by using the exact solution methods when the number of binary variables is large. As a result, meta-heuristic methods are always used to find good, but not necessarily Pareto optimal solutions within a reasonable amount of computing time. During the past several decades, many meta-heuristic approaches were developed to tackle the multi-objective optimization problems (see Jones, Mirrazavi, & Tamiz, 2002 for a comprehensive review). The most popular meta-heuristics for multi-objective optimization problems include genetic algorithms (GAs) (Cantarella & Vitetta, 2006; Chen, Kim, Lee, & Kim, 2010; Chen, Subprasom, & Ji, 2006; Gen, Cheng, & Lin, 2008; Konak, 2012; Miandoabchi, Daneshzand, Szeto, & Farahani, 2013; Miandoabchi, Farahani, Dullaert, & Szeto, 2012; Miandoabchi, Farahani, & Szeto, 2012; Sharma, Ukkusuri, & Mathew, 2009; Shepherd & Sumalee, 2004; Sohn, 2011; Szeto, Wang, & Wong, 2014; Teklu, Sumalee, & Watling, 2007; Xu, Wei, & Wang, 2009; Yin, 2000, 2002), evolution strategies (Deb & Sinha, 2010; Zheng, Wan, & Wang, 2011), simulated annealing (Friesz et al., 1993; Suppapitnarm, Seffen, Parks, & Clarkson, 2000; Xu et al., 2009), tabu search (Armentano & Claudio, 2004; Jaeggi, Parks, Kipouros, & Clarkson, 2008; Uno & Katagiri, 2008), etc.

The artificial bee colony (ABC) algorithm is a swarm-based meta-heuristic algorithm that was introduced by Karaboga (2005) for solving numerical optimization problems. This algorithm is motivated by the foraging behavior of honey bees. Compared to existing evolutionary algorithms such as GA, one merit of the ABC algorithm is that the ABC algorithm has a better local search mechanism to improve the solution quality. Indeed, the ABC algorithm has been applied to solve other single objective optimization problems with great success (Karaboga, 2009, 2010; Karaboga & Basturk, 2008; Singh, 2009; Szeto & Jiang, 2012; Szeto, Jiang, Wang, & Sumalee, 2013; Szeto & Jiang, submitted for publication; Szeto, Wu, & Ho, 2011). Recently, the ABC algorithm has also been applied to solve the multi-objective optimization problems (Akbari, Hedayatzadeh, Ziarati, & Hassanizadeh, 2012; Omkar, Senthilnath, Khandelwal, Naik, & Gopalakrishnan, 2011; Zhang, Zhu, Zou, & Yan, 2012). It is worthwhile to evaluate the performance of the ABC algorithm for solving the BOTRDP.

In this paper, a bi-level programming model for the BOTRDP is introduced, and the ABC algorithm is developed to solve the BOTRDP. Rather than directly applying the ABC algorithm proposed by Karaboga (2005), this paper improves the ABC algorithm by enhancing its global search ability. For this purpose, crossover operators that are normally used in GA are incorporated in the ABC algorithm. The resulting ABC algorithm has both the strength of the original ABC algorithm and GA. The computational experiments show that the inclusion of the crossover operators can indeed improve the performance of the ABC heuristic, and that the proposed heuristic significantly outperforms the non-dominated sorting genetic algorithm (NSGA) even if various operators are randomly selected and adopted in the NSGA as in our proposed heuristic. The results also demonstrate that the Pareto optimal turning restriction strategy can obviously reduce both TSTT and the cost of total vehicle emissions. It is also found that the number of Pareto optimal turning restriction designs is smaller when the network is more congested but greater network efficiency and air quality improvement can be achieved. The results also illustrate that traffic information provision does have an impact on the number of Pareto optimal turning restriction designs.

The contributions of this paper include the following. (1) This paper proposes a new bi-objective, bi-level problem, which is NP-hard. (2) A modified ABC heuristic is proposed for solving the proposed problem, and the heuristic outperforms the NSGA. (3) The tradeoff between the TSTT and the CTVE under the implementation of turning restrictions is pointed out and illustrated. (4) The effects of demand levels and traffic information provision on the number of Pareto-optimal solutions are demonstrated and discussed.

The rest of the paper is organized as follows: In the next section, a BOTRDP is formulated as bi-level programming model. The modified ABC algorithm is presented in Section 3 to solve the proposed bi-objective problem. In Section 4, numerical examples are given. Finally, conclusions are drawn in Section 5.

Consider a multi-destination and connected network G. N denotes the set of nodes whereas A denotes the set of arcs (links). R and S denote the sets of origin and destination nodes, respectively. The following notations are adopted throughout this paper:
                           
                              
                                 
                                 
                                 
                                    
                                       
                                          r
                                       
                                       origin node, r
                                          ∈
                                          R
                                       
                                    
                                    
                                       
                                          s
                                       
                                       destination node, s
                                          ∈
                                          S
                                       
                                    
                                    
                                       
                                          Π′
                                       set of traffic movements in the whole network
                                    
                                    
                                       
                                          Π
                                       
                                       set of indices for the traffic movements in the whole network
                                    
                                    
                                       
                                          Πa
                                          
                                       
                                       set of traffic movements related to link a, and 
                                             
                                                
                                                   
                                                      Π
                                                   
                                                   
                                                      a
                                                   
                                                
                                                ⊂
                                                
                                                   
                                                      Π
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          xab
                                          
                                       
                                       flow on link a going to link b or the movement flow from link a to link b; [a,
                                          b]∈
                                          Πa
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       vector of movement flows, x
                                          =[xab
                                          ]
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      δ
                                                   
                                                   
                                                      a
                                                      ,
                                                      k
                                                   
                                                   
                                                      rs
                                                   
                                                
                                             
                                          
                                       
                                       0–1 indicator variable; it equals 1 if link a is on path k connecting r and s, and 0 otherwise
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      δ
                                                   
                                                   
                                                      ab
                                                      ,
                                                      k
                                                   
                                                   
                                                      rs
                                                   
                                                
                                             
                                          
                                       
                                       0–1 indicator variable; it equals 1 if both links a and b are on path k connecting r and s, and 0 otherwise
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      P
                                                   
                                                   
                                                      k
                                                   
                                                   
                                                      rs
                                                   
                                                
                                             
                                          
                                       
                                       route choice probability of path k connecting r and s
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      k
                                                   
                                                   
                                                      rs
                                                   
                                                
                                             
                                          
                                       
                                       travel cost of using path k connecting r and s
                                       
                                    
                                    
                                       
                                          qrs
                                          
                                       
                                       travel demand from origin r to destination s
                                       
                                    
                                    
                                       
                                          ta
                                          
                                          (x,
                                          y)
                                       travel cost function of link a
                                       
                                    
                                    
                                       
                                          μ
                                       
                                       an index representing the traffic movement from upstream link uμ
                                           to downstream link dμ
                                          , uμ
                                          , dμ
                                          
                                          ∈
                                          A, [uμ
                                          ,
                                          dμ
                                          ]∈
                                          Π′, μ
                                          ∈
                                          Π
                                       
                                    
                                    
                                       
                                          Γ
                                       
                                       set of indices for turning restrictions (or equivalently, set of candidate traffic movements to be prohibited), and 
                                             
                                                Γ
                                                ⊂
                                                Π
                                             
                                          
                                       
                                    
                                    
                                       
                                          yμ
                                          
                                       
                                       0–1 decision variable; if traffic movement μ is prohibited, then yμ
                                          
                                          =1; otherwise yμ
                                          
                                          =0
                                    
                                    
                                       
                                          y
                                       
                                       vector of turning restriction decision variables, or turning restriction strategy y
                                          =[yμ
                                          ]
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ϕ
                                                   
                                                   
                                                      μ
                                                      k
                                                   
                                                   
                                                      rs
                                                   
                                                
                                             
                                          
                                       
                                       0–1 indicator variable; if both links uμ
                                           and dμ
                                           are on path k connecting r and s, then 
                                             
                                                
                                                   
                                                      ϕ
                                                   
                                                   
                                                      μ
                                                      k
                                                   
                                                   
                                                      rs
                                                   
                                                
                                                =
                                                1
                                             
                                          ; otherwise, 
                                             
                                                
                                                   
                                                      ϕ
                                                   
                                                   
                                                      μ
                                                      k
                                                   
                                                   
                                                      rs
                                                   
                                                
                                                =
                                                0
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Since the implementation of turning restrictions make some routes become infeasible, it induces changes in traffic flow over the road network. The BOTRDP must take into an account the travelers’ route choice behavior to depict the resultant traffic flow pattern after the implementation. Capturing their route choice behavior into the problem is therefore essential. In the literature, travelers’ route choice is generally assumed to follow either the DUE principle (e.g., Cantarella, Pavone, & Vitetta, 2006; Friesz et al., 1993; Lo & Szeto, 2005, 2009; Sohn, 2011; Szeto & Lo, 2008; Xu et al., 2009) or the SUE principle (e.g., Akamatsu, 1996; Bekhor & Toledo, 2005; Chen & Alfa, 1991a; Chen et al., 2010; Huang, 1995; Maher, 1998; Meng, Lee, Cheu, & Yang, 2004; Meng & Liu, 2011). The DUE principle and SUE principle assume that travelers select their routes to minimize their actual travel times and perceived travel times, respectively. In reality, it is difficult for travelers to have perfect information on the network condition. Hence, the SUE problem is better than the DUE problem for describing the route choice behavior of travelers. Following Long et al. (2010), a logit-based SUE model is adopted to formulate the LLP of the BOTRDP, which can be characterized by the following nonlinear equations:
                           
                              (1)
                              
                                 
                                    
                                       x
                                    
                                    
                                       ab
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          rs
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                       
                                    
                                 
                                 
                                    
                                       q
                                    
                                    
                                       rs
                                    
                                 
                                 
                                    
                                       P
                                    
                                    
                                       k
                                    
                                    
                                       rs
                                    
                                 
                                 
                                    
                                       δ
                                    
                                    
                                       ab
                                       ,
                                       k
                                    
                                    
                                       rs
                                    
                                 
                                 ,
                              
                           
                        where
                           
                              (2)
                              
                                 
                                    
                                       P
                                    
                                    
                                       k
                                    
                                    
                                       rs
                                    
                                 
                                 =
                                 
                                    
                                       exp
                                       (
                                       -
                                       θ
                                       
                                          
                                             c
                                          
                                          
                                             k
                                          
                                          
                                             rs
                                          
                                       
                                       )
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             l
                                          
                                       
                                       exp
                                       (
                                       -
                                       θ
                                       
                                          
                                             c
                                          
                                          
                                             l
                                          
                                          
                                             rs
                                          
                                       
                                       )
                                    
                                 
                                 ,
                              
                           
                        and θ is the dispersion parameter of the logit model, representing the travel time variation of travelers (Lo & Szeto, 2002). It could be interpreted as the information qualities available to these travelers. A larger value implies a smaller travel time perception variation among travelers and, therefore, better information available to travelers. This parameter can be used to capture the effect of providing better traffic information.

Opposing flows through intersections significantly contributes to the turning delays and travel times of the traffic concerned, and thus affect the route choice of travelers in urban road networks. This paper employs the following generalized BRP function (Long et al., 2010) to capture the effects of opposing flows on link travel time:
                           
                              (3)
                              
                                 
                                    
                                       t
                                    
                                    
                                       a
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 )
                                 =
                                 
                                    
                                       t
                                    
                                    
                                       a
                                    
                                    
                                       0
                                    
                                 
                                 ·
                                 
                                    
                                       
                                          1
                                          +
                                          
                                             
                                                χ
                                             
                                             
                                                1
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  x
                                                               
                                                               
                                                                  a
                                                                  ,
                                                                  TH
                                                               
                                                            
                                                            +
                                                            
                                                               
                                                                  ϕ
                                                               
                                                               
                                                                  RT
                                                               
                                                            
                                                            
                                                               
                                                                  x
                                                               
                                                               
                                                                  a
                                                                  ,
                                                                  RT
                                                               
                                                            
                                                            +
                                                            
                                                               
                                                                  ϕ
                                                               
                                                               
                                                                  LT
                                                               
                                                            
                                                            
                                                               
                                                                  x
                                                               
                                                               
                                                                  a
                                                                  ,
                                                                  LT
                                                               
                                                            
                                                            +
                                                            
                                                               
                                                                  ϕ
                                                               
                                                               
                                                                  opp
                                                               
                                                            
                                                            
                                                               
                                                                  x
                                                               
                                                               
                                                                  a
                                                                  ,
                                                                  opp
                                                               
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  Q
                                                               
                                                               
                                                                  a
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      χ
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    t
                                 
                                 
                                    a
                                 
                                 
                                    0
                                 
                              
                           
                         is the free-flow travel time on link a; xa
                        
                        ,
                        
                           TH
                        , xa
                        
                        ,
                        
                           LT
                        , xa
                        
                        ,
                        
                           RT
                        , and xa
                        
                        ,
                        
                           opp
                         are the through, left turn, right turn, and opposing flows of link a, respectively; Qa
                         is the capacity of link a; ϕLT
                        , ϕRT
                        , and ϕopp
                         are parameters related to the influences of left turn, right turn, and opposing flows on the through flow, respectively; χ
                        1 and χ
                        2 are the BPR parameters. Opposing flow is a function of turning restriction decision variables because turning restrictions can remove the conflict between traffic flows moving in the concerned and opposing directions. The opposing flow of link a is formulated as follows:
                           
                              (4)
                              
                                 
                                    
                                       x
                                    
                                    
                                       a
                                       ,
                                       opp
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          μ
                                          ∈
                                          Π
                                       
                                    
                                 
                                 
                                    
                                       δ
                                    
                                    
                                       μ
                                       a
                                       ,
                                       opp
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       μ
                                    
                                 
                                 (
                                 1
                                 -
                                 
                                    
                                       y
                                    
                                    
                                       μ
                                    
                                 
                                 )
                                 ,
                              
                           
                        where δμa
                        
                        ,
                        
                           opp
                         is an indicator variable; it is equal to 1 if traffic movement μ is an opposing traffic movement of link a, and δμa
                        
                        ,
                        
                           opp
                         is equal to zero otherwise. xμ
                         denotes the flow of traffic movement μ. According to Eq. (4), the flow xμ
                         of a particular traffic movement μ will only be contributed to the opposing flow xa
                        
                        ,
                        
                           opp
                         of link a only if the movement conflicts with the flow of link a (δμa
                        
                        ,
                        
                           opp
                        
                        =1) and there is no turning restriction for that movement (yμ
                        
                        =0 or μ
                        ∉Γ).

The BPR function (3) is the generalized version of the link cost function in Horowitz (1997) and can capture the effect of turning flows on the link travel time in addition to the opposing flow. Using link travel time function (3), we can obtain route travel times by Eq. (5):
                           
                              (5)
                              
                                 
                                    
                                       c
                                    
                                    
                                       k
                                    
                                    
                                       rs
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                       
                                    
                                 
                                 
                                    
                                       t
                                    
                                    
                                       a
                                    
                                 
                                 (
                                 x
                                 ,
                                 y
                                 )
                                 
                                    
                                       δ
                                    
                                    
                                       a
                                       ,
                                       k
                                    
                                    
                                       rs
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          μ
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       μ
                                    
                                 
                                 M
                                 
                                    
                                       ϕ
                                    
                                    
                                       μ
                                       k
                                    
                                    
                                       rs
                                    
                                 
                                 ,
                              
                           
                        where M is a positive constant, which can be considered as the punishment cost for a traveler taking a restricted turning. The value of M should be far greater than the maximum travel time of all paths in the choice set so that very few travelers take restricted turnings. The first term on the right hand side of Eq. (5) is the actual route travel time and is equal to the sum of the travel times of the links on the route. The second term is introduced to avoid restricted turnings to be used.

The ULP of the TRDP is an optimization problem with two objectives. The first objective is to improve network traffic efficiency or mobility, i.e., minimizing the TSTT. The second objective is to reduce total vehicle emissions. These two objectives are set from the viewpoint of traffic managers and are related to traffic network performance. In fact, the choice of objectives depends on applications. If the leader of the upper level problem is concerned with user benefit, then one of the objectives of the problem should be maximizing the user benefit.

The TSTT was traditionally used as a performance measure of traffic efficiency in a traffic network. The TSTT is defined as the sum of travel times of all travelers traveling from their origins to their destinations, and also equals the sum of the products of link flows and the corresponding link travel times. The general expression of the TSTT can be formulated as follows:
                              
                                 (6)
                                 
                                    T
                                    =
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             a
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          a
                                       
                                    
                                    (
                                    y
                                    )
                                    
                                       
                                          t
                                       
                                       
                                          a
                                       
                                    
                                    (
                                    x
                                    (
                                    y
                                    )
                                    ,
                                    y
                                    )
                                    ,
                                 
                              
                           where T denotes the TSTT and T
                           =
                           T(x(y),
                           y) or simply T
                           =
                           T(y); xa
                           (y) is the flow on link a and xa
                           (y)=∑
                           
                              bxab
                           ; xa
                           (y) is an implicit function of y, which can be obtained by solving the LLP.

This cost relies on the assumption that the emission rate of a link is a function of the average speed of vehicles on it. The average speed can be found by the following:
                              
                                 (7)
                                 
                                    
                                       
                                          s
                                       
                                       
                                          a
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                L
                                             
                                             
                                                a
                                             
                                          
                                       
                                       
                                          
                                             
                                                t
                                             
                                             
                                                a
                                             
                                          
                                          (
                                          x
                                          (
                                          y
                                          )
                                          ,
                                          y
                                          )
                                       
                                    
                                    ,
                                 
                              
                           where sa
                            is the average speed of link a and in ft/s, and La
                            is the length of link a in ft. The average speed is used in the following emission rate function (Penic & Upchurch, 1992):
                              
                                 (8)
                                 
                                    
                                       
                                          φ
                                       
                                       
                                          a
                                       
                                       
                                          m
                                       
                                    
                                    (
                                    x
                                    (
                                    y
                                    )
                                    ,
                                    y
                                    )
                                    =
                                    
                                       
                                          
                                             
                                                A
                                             
                                             
                                                m
                                             
                                          
                                          exp
                                          {
                                          
                                             
                                                B
                                             
                                             
                                                m
                                             
                                          
                                          
                                             
                                                s
                                             
                                             
                                                a
                                             
                                          
                                          }
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                m
                                             
                                          
                                          
                                             
                                                s
                                             
                                             
                                                a
                                             
                                          
                                       
                                    
                                    ,
                                 
                              
                           where Am
                           , Bm
                            and Cm
                            are constants with respect to pollutant m, and 
                              
                                 
                                    
                                       φ
                                    
                                    
                                       a
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 x
                                 (
                                 y
                                 )
                                 ,
                                 y
                                 )
                              
                            is in grams per vehicle second.

Using the emission rate function (8), link flows, and the unit emission cost of each pollutant, we can obtain the total emissions of the whole network, which can be further translated into a monetary measure, i.e., the CTVE. The CTVE can be calculated by:
                              
                                 (9)
                                 
                                    E
                                    =
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             m
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             a
                                          
                                       
                                    
                                    
                                       
                                          η
                                       
                                       
                                          m
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          a
                                       
                                    
                                    (
                                    y
                                    )
                                    
                                       
                                          φ
                                       
                                       
                                          a
                                       
                                       
                                          m
                                       
                                    
                                    (
                                    x
                                    (
                                    y
                                    )
                                    ,
                                    y
                                    )
                                    
                                       
                                          t
                                       
                                       
                                          a
                                       
                                    
                                    (
                                    x
                                    (
                                    y
                                    )
                                    ,
                                    y
                                    )
                                    ,
                                 
                              
                           where ηm
                            is the emission cost of unit pollutant m; E denotes the CTVE and E
                           =
                           E(x(y),
                           y)=
                           E(y).

Whether a traffic movement is restricted or not is depicted by a 0–1 variable. Therefore, the BOTRDP is an integer programming problem. The problem aims to improve the network performance by reducing network-wide congestion and vehicle emissions simultaneously. They can be measured by the TSTT and the CTVE. Hence, the ULP of the BOTRDP is formulated as the following optimization problem:
                              
                                 (10)
                                 
                                    
                                       min
                                    
                                    
                                    [
                                    T
                                    ,
                                    E
                                    ]
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      a
                                                   
                                                
                                             
                                             
                                                
                                                   x
                                                
                                                
                                                   a
                                                
                                             
                                             (
                                             y
                                             )
                                             
                                                
                                                   t
                                                
                                                
                                                   a
                                                
                                             
                                             (
                                             x
                                             (
                                             y
                                             )
                                             ,
                                             y
                                             )
                                             ,
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      m
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      a
                                                   
                                                
                                             
                                             
                                                
                                                   η
                                                
                                                
                                                   m
                                                
                                             
                                             
                                                
                                                   x
                                                
                                                
                                                   a
                                                
                                             
                                             (
                                             y
                                             )
                                             
                                                
                                                   φ
                                                
                                                
                                                   a
                                                
                                                
                                                   m
                                                
                                             
                                             (
                                             x
                                             (
                                             y
                                             )
                                             ,
                                             y
                                             )
                                             
                                                
                                                   t
                                                
                                                
                                                   a
                                                
                                             
                                             (
                                             x
                                             (
                                             y
                                             )
                                             ,
                                             y
                                             )
                                          
                                       
                                    
                                    ,
                                 
                              
                           
                           
                              
                                 (11)
                                 
                                    subject to
                                    
                                    
                                    
                                       
                                          y
                                       
                                       
                                          μ
                                       
                                    
                                    =
                                    {
                                    0
                                    ,
                                    1
                                    }
                                    
                                    ∀
                                    μ
                                    ∈
                                    Γ
                                    ,
                                 
                              
                           where the objective (10) is to minimize the TSTT and the CTVE simultaneously. Constraint (11) is the definitional constraint for every turning restriction decision variable. Note that the objective function is a function of the lower level decision variable.

The ABC algorithm, firstly proposed by Karaboga (2005), is one of the most recently evolutionary algorithms motivated by the intelligent behavior of honey bees to search for foods near their hives. Similar to particle swarm optimization (PSO) and differential evolution (DE) algorithms, the ABC algorithm provides a population-based search procedure. In the ABC algorithm, the position of a food source represents a feasible solution to the problem and the nectar amount of a food source corresponds to the quality (fitness) of the associated solution. The bees’ aim is to discover the places of food sources with a large amount of nectar and finally the one with the largest nectar (Karaboga, 2010). This corresponds to finding good solutions in the solution space.

There are three groups of bees in the ABC algorithm: (i) employed bees, (ii) onlookers, and (iii) scouts (Szeto, Wu, et al., 2011). Both employed bees and onlookers fly around in a multidimensional search space and choose food sources depending on their own experience and their nestmates’ experience. Each of them only searches for a new food source in the neighborhood of the food source in their memories and only memorizes the positions of good food sources. If the nectar amount of a new source is larger than that of the previous one in their memory, then each of them memorizes the new position and forgets the previous one. Effectively, employed bees and onlookers carry out local searches in the solution space. The major difference between employed bees and onlookers is that each employed bee memorizes one food source that is not identical to the food sources memorized by other employed bees, whereas two or more onlookers can memorize the same food source before the start of finding a new food source in each iteration to have a more intensive local search in the region near that food source. The number of onlookers memorizing a particular food source depends on its relative amount of nectar. More onlookers will memorize a food source if the food source is better. Onlookers watch the dance of employed bees within the hive after one search to have the information of the nectar amount in each food source. Each of the onlookers then chooses a food source to memorize based on the relative amount of nectar informed by employed bees. Afterwards, each of the onlookers with the same food source in their memories searches for a new food source in the neighborhood of the old food source in their memories and memorizes the better one among the new and old food sources. Then, the food sources memorized by these onlookers are compared and only the best one is informed and memorized by the employed bee. (i.e., the old food source is replaced by the best one if the best one is better than the old one.) The number of employed bees is equal to the number of food sources (solutions) since each employed bee is associated with one and only one food source. The number of onlookers is usually equal to that of employed bees so as to reduce the number of parameters. Different from employed bees and onlookers, scouts fly around and choose their food sources randomly without using their experience, corresponding to carrying out global searches in the solution space. Scouts are related to employed bees because the employed bee becomes a scout if no better neighbor food source can be found in limit (a predetermined number) successive iterations. After finding a new food source, the scout becomes an employed bee again. Very often, there is no restriction on the number of scouts, but we can set a maximum number of scouts in each iteration.

Similar to most of meta-heuristic methods, the ABC algorithm is an iterative algorithm, which initially generates random solutions as food sources and assigns each employed bee to a unique food source. Thereafter, the nectar of food sources is exploited by firstly employed bees and then onlookers in each iteration. This continual exploitation can ultimately cause the food sources to become exhausted in certain iteration. Hence, after the local search of onlookers, the ABC heuristic checks whether any current food source should be abandoned in each iteration. A current food source will be abandoned by an employed bee in a particular iteration if no better neighbor food source can be found in limit successive iterations. Then, the employed bee becomes a scout in search for another new food source randomly. After that, the scout becomes an employed bee again. If no food sources are abandoned in an iteration, then there are no scouts in that iteration. A new iteration starts again by performing new local searches by first employed bees and then onlookers until a maximum number of iterations is reached.

We directly use a straightforward solution representation scheme. Fig. 1
                            illustrates a representation of a turning restriction scheme. The length equals the maximum number of turning restrictions that can be applied to the network. Each position in the solution vector represents a candidate traffic movement to be prohibited at a selected junction. A value of one in a position means that a turning restriction prohibits the candidate traffic movement and a value of zero means that the traffic movement is not prohibited. In Fig. 1, six turning restrictions out of thirteen potential turning restrictions are implemented.

An initial solution is constructed by a binary vector. Each element of the vector takes a value of one with a predetermined probability P
                           0. i.e., each turning restriction is adopted with the probability P
                           0. This procedure is repeated until a total of m initial solutions are generated where m is the number of employed bees. In this paper, we set P
                           0
                           =0.5.

In the ABC heuristic, a neighborhood operator is used to obtain a new solution 
                              
                                 
                                    
                                       y
                                    
                                    
                                       ̃
                                    
                                 
                              
                            from the current solution y. This paper develops two categories of neighborhood operators for the BOTRDP: mutation operators and crossover operators. The mutation operators perform local searches in the neighborhood of current solutions. The crossover operators perform global searches and are basic operators in GAs. The crossover operators in this paper require two parents to produce an offspring. The offspring consist of the genetic information of both parents. At least one of the parents is required to be a non-dominated solution since non-dominated solutions contain more useful information and a crossover of a food source with a non-dominated solution can quickly produce a good solution. A good combination of the two categories of operators can strike a balance between exploration and exploitation processes. The developed operators include the following:
                              
                                 (1)
                                 
                                    Point mutation: This operator randomly selects one position μ (or traffic movement μ) in the solution vector y and then set yμ
                                    
                                    =1−
                                    yμ
                                     to obtain 
                                       
                                          
                                             
                                                y
                                             
                                             
                                                ̃
                                             
                                          
                                       
                                    . As shown in Fig. 2
                                    , the seventh position is randomly selected (i.e., μ
                                    =7) among the 13 positions of the solution. Then, the operator changes y
                                    7 from 1 to 0 at the seventh position and does not change the values of yμ
                                     at other positions to obtain a new solution.


                                    Random mutation: This operator changes the value of every position μ of y from yμ
                                     to 1−
                                    yμ
                                     with a probability of Pm
                                    . An example is given in Fig. 3
                                    . The third, seventh, eighth, and twelfth positions are selected for flipping their values from one to zero or vice versa because the random numbers generated are not greater than Pm
                                    . The random numbers generated at other positions are greater than Pm
                                    .


                                    Section mutation: This operator randomly selects two positions μ
                                    1 and μ
                                    2 in y with 
                                       
                                          
                                             
                                                μ
                                             
                                             
                                                1
                                             
                                          
                                          ⩽
                                          
                                             
                                                μ
                                             
                                             
                                                2
                                             
                                          
                                       
                                     without loss of generality. Afterwards, this operator changes the value of every position μ between the two selected positions inclusively (i.e., 
                                       
                                          
                                             
                                                μ
                                             
                                             
                                                1
                                             
                                          
                                          ⩽
                                          μ
                                          ⩽
                                          
                                             
                                                μ
                                             
                                             
                                                2
                                             
                                          
                                       
                                    ) from yμ
                                     to 1−
                                    yμ
                                     to obtain 
                                       
                                          
                                             
                                                y
                                             
                                             
                                                ̃
                                             
                                          
                                       
                                    . Fig. 4
                                     illustrates an example, where μ
                                    1
                                    =6 and μ
                                    2
                                    =9. All the values in the positions between the sixth and ninth positions are changed from zero to one or vice versa. All other values remain unchanged.


                                    Point crossover with a non-dominated solution: Let Φ be the current set of non-dominated solutions. Then, this operator randomly selects a non-dominated solution j, denoted as y
                                    
                                       j
                                    
                                    ∈
                                    
                                    Φ, and randomly selects a position μ in such y that y and y
                                    
                                       j
                                     have a different value at this position. Replace the value in position μ in y by that in y
                                    
                                       j
                                     to get 
                                       
                                          
                                             
                                                y
                                             
                                             
                                                ̃
                                             
                                          
                                       
                                    . An example is shown in Fig. 5
                                    . The first row gives the current non-dominated solution of parent 1 whereas the second row gives the solution of parent 2. They have a different value at positions 1, 4, 5, 7, 8, 9, 12, and 13. Position 7 is randomly selected out of all these positions and the value of this position of parent 2 is replaced by that of parent 1 to form an offspring shown in the last row.


                                    Random crossover with a non-dominated solution: This operator randomly selects a non-dominated solution y
                                    
                                       j
                                    
                                    ∈
                                    Φ and replace the value in every position in y by that in y
                                    
                                       j
                                     with a probability of Pm
                                    . An example is given in Fig. 6
                                    . As in Fig. 5, the first row gives the current non-dominated solution of parent 1 whereas the second row gives the solution of parent 2. By comparing the random numbers generated for each position and the probability Pm
                                    , it is found that positions 4, 8 and 11 of parent 2 are selected and their values are replaced by those values in the corresponding position of parent 1 to form an offspring.


                                    Section crossover with a non-dominated solution: This operator randomly selects a non-dominated solution y
                                    
                                       j
                                    
                                    ∈
                                    Φ, and two positions μ
                                    1 and μ
                                    2 (
                                       
                                          
                                             
                                                μ
                                             
                                             
                                                1
                                             
                                          
                                          ⩽
                                          
                                             
                                                μ
                                             
                                             
                                                2
                                             
                                          
                                       
                                    ). Replace the sequence formed by the values in the positions between μ
                                    1 and μ
                                    2 in y by the sequence formed by the values in the corresponding positions in y
                                    
                                       j
                                     to obtain 
                                       
                                          
                                             
                                                y
                                             
                                             
                                                ̃
                                             
                                          
                                       
                                    . An example is illustrated by Fig. 7
                                     with μ
                                    1
                                    =6 and μ
                                    2
                                    =9. The crossover section is formed by the values in positions 6–9 and this section in parent 2 is replaced by that in parent 1 to form a new solution.

The neighborhood operator in the ABC heuristic can be formed by either a single pre-selected operator or a combination of some of above operators. The latter randomly chooses one neighborhood operator from a predetermined set of neighborhood operators at a time to find a new food source near a selected food source. In this paper, we also consider an alternative combination of operators: At a time, we firstly choose either the category of crossover operators with a predetermined probability Pc
                            or the category of mutation operators with a predetermined probability 1−
                           Pc
                           , and then randomly select one neighborhood operator from the selected category of operators. The results in Section 4 show that too many crossover operators selected may not lead to the best result. The probability Pc
                            can control the frequency of crossover operators used and determine the number of Pareto solutions obtained.

Before evaluating the fitness of a food source, we need to obtain the two objective values of the ULP, which requires the equilibrium link flows, i.e., the solution of the associated LLP. There are many solution algorithms to solve the lower level SUE problem, such as the method of successive averages (MSA) (Huang & Bell, 1998; Huang & Li, 2007; Powell & Sheffi, 1982; Sheffi & Powell, 1982), the optimal step length algorithm (OSLA) (Akamatsu, 1996; Chen & Alfa, 1991a; Huang, 1995; Maher, 1998), the Gradient Projection (GP) algorithm (Bekhor & Toledo, 2005; Chen, Lee, & Jayakrishnan, 2002), etc. Recently, Liu, He, and He (2009) improved the MSA method and proposed the self-regulated averaging method (SRAM) (see Appendix A for the algorithmic steps and the convergence requirements) to solve the SUE problem. The MSA relies on a predetermined step size for guaranteeing convergence, and its convergence speed is very slow due to improper step sizes (too large or too small) at some iterations. The SRAM can deal with this slow convergence problem and has been successful applied to solve the SUE problem (Liu et al., 2009; Long et al., 2010) and a multi-class doubly stochastic dynamic user equilibrium problem (Szeto, Jiang, & Sumalee, 2011). Ideally, the SRAM could be used to solve the lower level SUE problem for general networks. Indeed, in all our numerical studies, the SRAM converged to the equilibrium flow patterns. However, the link cost vector functions in our lower level problem do not have a symmetric continuous Jacobian with respect to the link flow vector. Hence, the convergence requirement of the SRAM is not met. Therefore, for general applications, we provide another version of the SRAM that can guarantee convergence when solving our lower level problem. The details of another version of the SRAM and its convergence requirements are given in Appendix B.

Fitness evaluation is a basic step in the ABC heuristic for solving multi-objective optimization problems. Since 1980s, several fitness assignment mechanisms have been proposed and applied in multiobjective optimization problems. Gen et al. (2008) classified the fitness assignment mechanisms into three categories: vector evaluation approach (e.g., Omkar et al., 2011; Schaffer, 1985), Pareto ranking with diversity approach (e.g., Deb, Pratap, Agarwal, & Meyarivan, 2002; Fonseca & Fleming, 1993; Goldberg, 1989; Srinivas & Deb, 1994; Zhang et al., 2012), and weighted sum with elitist preserving approach (e.g., Akbari et al., 2012; Ishibuchi & Murata, 1998; Zitzler & Thiele, 1999). This paper will use the second approach. The merit of this approach is that the fitness evaluation does not require specifying any parameters in advance. The Pareto ranking based fitness assignment method was first proposed by Goldberg (1989). The ranking procedure is as follows (Gen et al., 2008): giving rank 1 to the non-dominated food sources and removing them from contention, then finding the next set of non-dominated food sources and assigning rank 2 to them and then removing them for contention. The process continues until the entire population is ranked. Besides Pareto ranking, we also use the distance of a food source to the current Pareto frontier to evaluate the quality of the food sources. The closer the food source to the Pareto frontier, the higher quality the food source has. The distance of a food source to the current Pareto frontier can be formulated as follows:
                              
                                 (12)
                                 
                                    d
                                    (
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          
                                             min
                                          
                                          
                                             
                                                
                                                   y
                                                
                                                
                                                   j
                                                
                                             
                                             ∈
                                             Φ
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               T
                                                               (
                                                               
                                                                  
                                                                     y
                                                                  
                                                                  
                                                                     i
                                                                  
                                                               
                                                               )
                                                               -
                                                               T
                                                               (
                                                               
                                                                  
                                                                     y
                                                                  
                                                                  
                                                                     j
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   +
                                                   
                                                      
                                                         
                                                            
                                                               E
                                                               (
                                                               
                                                                  
                                                                     y
                                                                  
                                                                  
                                                                     i
                                                                  
                                                               
                                                               )
                                                               -
                                                               E
                                                               (
                                                               
                                                                  
                                                                     y
                                                                  
                                                                  
                                                                     j
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    ,
                                 
                              
                           where Φ is the set of current Pareto solutions. d(y
                           
                              i
                           ) is the distance of food source i to the closest, existing Pareto solution. T(y
                           
                              j
                           ) and E(y
                           
                              j
                           ) are the TSTT and CTVE of current Pareto solution j, respectively.

The food source with a higher ranking will have a higher fitness, and the fitness of a food source is inversely related to its distance to the Pareto frontier. Therefore, the following fitness function is adopted to evaluate the quality of each food source:
                              
                                 (13)
                                 
                                    f
                                    (
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    =
                                    -
                                    r
                                    (
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    D
                                    -
                                    d
                                    (
                                    
                                       
                                          y
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    ,
                                 
                              
                           where r(y
                           
                              i
                           ) is the Pareto ranking of food source i and D is a very large positive constant, for example D
                           =max{d(y
                           
                              i
                           )}. By definition, the ranking of all the food sources on the Pareto frontier is 1 and their distance to the Pareto frontier is 0. Hence, they have the largest fitness −D.

On the onlooker phase, each onlooker randomly selects a food source. Both the roulette wheel selection method and the tournament selection method can be used to drive the selection process towards better food sources. This paper applies the latter since its implementation is simpler than that of the former. For each onlooker, two food sources y
                           
                              i
                            and y
                           
                              j
                            are selected randomly. If f(y
                           
                              i
                           )>
                           f(y
                           
                              j
                           ), then the onlooker selects food source y
                           
                              i
                           ; if f(y
                           
                              i
                           )<
                           f(y
                           
                              j
                           ), then the onlooker selects food source y
                           
                              j
                           ; otherwise, the onlooker randomly selects one of the two food sources with the same probability.

The steps of the ABC algorithm for solving the BOTRDP are summarized as follows:
                              
                                 
                                    Step 0. Initialization. Randomly generate a set of solutions as initial food sources y
                                    
                                       i
                                    , i
                                    =1,2,…,
                                    m, where m is the number of employed bees. Assign each employed bee to a food source, and set the index κ
                                    =0, the set of non-dominated solutions 
                                       
                                          Φ
                                          =
                                          Ø
                                       
                                     and the trial number l
                                    1
                                    =
                                    l
                                    2
                                    =⋯=
                                    lm
                                    
                                    =0. Set the values of limit and MaxIterations.


                                    Step 1. Pareto ranking. Combine the set of non-dominated solutions Φ with all food sources y
                                    
                                       i
                                    , i
                                    =1,2,…,
                                    m and implement the Pareto ranking. Reset Φ to be the set of all the food sources on the current Pareto frontier.


                                    Step 2. Fitness update. Using Eq. (13) to evaluate the fitness f(y
                                    
                                       i
                                    ) for each of the food sources y
                                    
                                       i
                                    , i
                                    =1,2,…,
                                    m.


                                    Step 3. Working bee phase.
                                       
                                          
                                             Step 3.1. Employed bee phase. For each food source y
                                             
                                                i
                                             , apply a neighborhood operator on 
                                                
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   →
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ̃
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             . If 
                                                
                                                   f
                                                   (
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ̃
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                   >
                                                   f
                                                   (
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                
                                             , then replace y
                                             
                                                i
                                              with 
                                                
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ̃
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                              and set li
                                             
                                             =0; otherwise, set li
                                             
                                             =
                                             li
                                             
                                             +1.


                                             Step 3.2. Onlooker phase. For each onlooker, select a food source y
                                             
                                                i
                                              using the tournament selection method, and apply a neighborhood operator on 
                                                
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   →
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ̃
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             . If 
                                                
                                                   f
                                                   (
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ̃
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                   >
                                                   f
                                                   (
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   )
                                                
                                             , then replace y
                                             
                                                i
                                              with 
                                                
                                                   
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ̃
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                              and set li
                                             
                                             =0; otherwise, set li
                                             
                                             =
                                             li
                                             
                                             +1.


                                             Step 3.3. Scout phase. For each food source y
                                             
                                                i
                                             , if li
                                             
                                             =
                                             limit, then replace y
                                             
                                                i
                                              with a randomly generated solution.


                                    Step 4. Convergence test. Set κ
                                    =
                                    κ
                                    +1. If κ
                                    =
                                    MaxIterations, then stop; otherwise, return to step 1.

We adopted the Sioux Falls network (Leblanc, Morlok, & Pierskalla, 1975) as shown in Fig. 8
                      to illustrate the performance of the proposed ABC algorithm and the properties of the proposed problem. The Sioux Falls network consists of 24 nodes, 76 links, and 528 OD pairs. The feasible turning restrictions are listed in Table 1
                     . The two BPR parameters are χ
                     1
                     =0.15 and χ
                     2
                     =4 (Leblanc et al., 1975). Following Horowitz (1997), we use a ϕopp
                     -value of 0.4. Both ϕLT
                      and ϕRT
                      were set to 1 for simplicity. We set the punishment cost M
                     =50.0, which is believed to be large enough in this study because the maximum route travel time is less than 2.0 if there are no turning restrictions in the network. Following Long et al. (2010), the path set was generated by a combination of the link elimination method (see Bekhor, Ben-Akiva, & Ramming, 2001 for details) and Dial’s (1971) STOCH method (see, Dial, 1971; Sheffi, 1985 for details), where the STOCH method can be used to generate the basic path set and the link elimination method can generate some shorter paths omitted by the STOCH method. The average number of paths per OD pair is 3.6 and the maximum number of routes between an OD pair is 15. The values of the parameters for the solution algorithm of the lower level SUE problem are as follows: η
                     =1.5, γ
                     =0.1, and ε
                     =1.0×10−5. Parameters of emission rate functions and the emission costs of unit pollutant are given in Table 2
                     . Since right turns have the lowest influence on other traffic movements for the case of drive-to-the-right as in China, this study does not consider any right turning restrictions. Since the most CPU time was spent on solving the lower level SUE problem, we compared the performance of the algorithms under the same number of SUE traffic assignment problems solved. The maximum number of SUE traffic assignment problems solved is 50,000.

We used the number of obtained Pareto solutions to evaluate the performance of the proposed algorithm. To do this, all the Pareto solutions ought to be found firstly. However, the set of Pareto solutions was unknown beforehand. We ran the ABC algorithm 20 times for each test scenario in this paper using the above setting and combined the set of non-dominated solutions of each test scenario to estimate the set of Pareto solutions. Specially, a total of 62 Pareto solutions was obtained when θ
                     =1.0, which was used to calibrate the parameters of the proposed ABC algorithm.

Following Karaboga and Basturk (2008), the number of employed bees and the number of onlookers were set to be equal to the number of food sources memorized by all the employed bees at any iteration to reduce the number of parameters. The point mutation operator was used in the ABC algorithm to calibrate the number of food sources. We ran the algorithm 20 times for each predetermined number of food sources considered initially. The average numbers of Pareto solutions obtained by the ABC algorithm with different initial number of food sources are shown in Fig. 9
                           . It can be seen that the average number of Pareto solutions has an increasing tendency firstly and drops later as the number of food sources grows up. The best number of food sources is 80, which was used in the following experiments.

As mentioned earlier, a food source y
                           
                              i
                            will be abandoned if no better neighbor solutions 
                              
                                 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                              
                            can be found in the neighborhood of y
                           
                              i
                            in consecutive limit iterations. Karaboga (2009) has shown that this parameter is important regarding the performance of the ABC algorithm on solving function optimization problems. Hence, we calibrated this parameter. We ran the algorithm 20 times for each predetermined value of limit and determined the average numbers of Pareto solutions obtained by the ABC algorithm with different values of limit. The results are presented in Fig. 10
                           , showing that the average number of Pareto solutions has an increasing tendency when limit is less than 150, and then fluctuates around a constant value when limit is greater than 150. In the following experiments, we set limit to be equal to 200.

Calibrating the mutation probability is required for incorporating the random mutation operator in the ABC algorithm. Therefore, we only used the random mutation operator as the neighborhood operator in the ABC algorithm in this numerical experiment and repeated the experiment 20 times for each predetermined value of mutation probability to determine the average number of Pareto solutions for each case. The results are shown in Fig. 11
                           . From this figure, we can observe that the average number of Pareto solutions has an increasing tendency firstly and drops later as the mutation probability grows up. The best value of mutation probability is 0.01, which was used in the following experiments.

Numerical experiments were set up to test the performance of the six neighborhood operators. Hence, six variants of ABC heuristics were developed, each with only one operator. Each of the six variants was run 20 times and the results are reported in Table 3
                           . The results illustrate that different neighborhood operators performed differently. In particular, the ABC heuristic with the operator of point mutation or random mutation achieved the best average number of Pareto solutions while the ABC heuristic with point crossover or random crossover operator did not yield promising results. Moreover, we can observe that the ABC heuristic with section mutation and section crossover operators did not yield any Pareto solutions. This is because the solutions were changed a lot after carrying out section mutation or section crossover, and hence the heuristic could not perform a good local search.

In the ABC heuristic, all the neighborhood operators can be used randomly. Since including either the section mutation operator or the section crossover operator in the ABC algorithm did not yield any Pareto solutions, these two operators were omitted and the rest of the four operators formed the available set of neighborhood operators for being randomly chosen. This combined approach was tested and the results are reported in the last column of Table 3. One can observe from the table that the combined approach outperformed all the approaches of using single operator in terms of obtaining the average number and standard deviation of Pareto solutions obtained in 20 runs. Moreover, the maximum number of Pareto solutions obtained by the combined approach in 20 runs is very promising and is very close to the best known number of Pareto solutions (i.e., 62). An explanation for this result is that the crossover operator is useful for the ABC heuristic as it can improve the global search ability of the algorithm.

This numerical experiment aims to test the effect of the probability of crossover Pc
                            in an alternative combined approach on the performance of the algorithm. The idea of this alternative combined approach is as follows: At a time, we firstly choose either the category of crossover operators with a predetermined probability Pc
                            or the category of mutation operators with a predetermined probability 1−
                           Pc
                           , and then randomly select one neighborhood operator from the selected category of operators. We considered two combinations of operators: Combined approach (i) and combined approach (ii). Both allow the random and point mutation operators as well as the random and point crossover operators to be chosen. However, the first approach did allow the section crossover operator to be chosen and the second approach did not. Hence, there are two variants of ABC algorithm. We varied the crossover probability Pc
                            from 0.00 to 0.20 with an increment of 0.01, and for each value of Pc
                           , we solved for solutions using the two variant 20 times. The average numbers of Pareto solutions obtained by the two variants are shown in Fig. 12
                           . From the figure, one can observe that the average number of Pareto solutions increases firstly and decreases later, and combined approach (i) outperforms combined approach (ii). The best crossover probability for combined approach (i) is within 0.05–0.15. In the following experiments, the section crossover operator was included, and the crossover probability took a value of 0.10.


                           Fig. 13
                            shows the plot of the average number of Pareto solutions found by the ABC heuristic using the point mutation operator only, combined approach (i) with Pc
                           
                           =0.5, and combined approach (i) with Pc
                           
                           =0.1. The results presented in Fig. 13 show that both combined approaches outperformed the approach of only using the operator of point mutation, which confirm the results presented in Table 3 and Fig. 12 that incorporating crossover operators in the ABC heuristic indeed improves the performance of the ABC heuristic. In the first combined approach (i.e., combined approach (i) with Pc
                           
                           =0.5), the probability of using all crossover operators is much higher than that in the second combined approach (i.e., combined approach (i) Pc
                           
                           =0.1). One can observe from Fig. 13 that the first combined approach outperformed the second combined approach during the initial iterations, but was inferior to the second combined approach when the number of iterations grew up.

To further illustrate the merits of the proposed method, we compared our proposed ABC heuristic with GAs. One of the GAs considered is the non-dominated sorting genetic algorithm (NSGA). It is an extension of GA (Deb et al., 2002; Srinivas & Deb, 1994), which has been successfully applied to a wide range of multiobjective optimization problems (e.g., Fernandez, Lopez, Lopez, & Coello, 2011; Vilcot & Billaut, 2008; Whittaker et al., 2009). Herein, we applied the NSGA to solve the proposed BOTRDP. Previous results show that incorporating all the operators of crossover in this paper into the ABC heuristic can improve the performance of the heuristic. Hence, we also incorporated all those operators into the NSGA and allowed these operators to be selected randomly during the computation, leading to a modified NSGA (MNSGA). The parameters for the NSGA and MNSGA were set as follows: population size=65, crossover probability=0.4 and mutation probability=0.03. The experimental results of the NSGA, the MNSGA and the ABC heuristic are presented in Table 4
                           . One can observe that the MNSGA slightly outperforms the NSGA. This implies that incorporating all the operators of crossover into the NSGA can improve its performance. One can also observe from Table 4 that the ABC heuristic remarkably outperforms the two GA-based methods.

We changed the value of the dispersion parameter and applied the proposed ABC algorithm to solve the BOTRDP. The Pareto frontiers under different values of the dispersion parameter are graphically displayed in Fig. 14
                        . We can clearly observe a trade off between improving traffic efficiency (i.e., lowering the TSTT) and mitigating traffic-induced environment pollution (i.e., lowering the CTVE). We can also observe that the Pareto frontier moves towards the origin when the value of the dispersion parameter θ grows up. The result implies that both the TSTT and CTVE decrease as the value of the dispersion parameter θ grows up or as better traffic information is provided to travelers.

The numbers of Pareto solutions under different values of the dispersion parameter θ are given in Fig. 15
                        . We can observe that the number of solutions on the Pareto frontier increases as the value of the dispersion parameter θ grows up. This result is consistent with that in Fig. 14, where the number of Pareto solutions with respect to θ
                        =1.5 is greater than that with respect to θ
                        =1.0, and the number of Pareto solutions with respect to θ
                        =1.0 is greater than that with respect to θ
                        =0.5. This implies that the network has more alternative Pareto improvements when θ is larger and vice versa. It may be because when the perception error of network status is large (i.e., the value of θ is small), the drivers tends to use all the available routes, not concentrating on a few shortest routes. Hence, fewer effective alternatives can be found.

There are two special solutions for the BOTRDP: only optimizing the TSTT and only optimizing the CTVE. The objective values of the two solutions under various values of the dispersion parameter are given in Fig. 16
                        . We can observe that both the two solutions can improve the network performance in terms of reducing the TSTT. Moreover, according to Fig. 16(a), when the objective is to minimize the TSTT, the better the traffic information perceived by travelers, the lower the TSTT obtained. This is quite reasonable as fewer travelers travel on non-shortest routes. Furthermore, the TSTT obtained must be smaller than that under the objective of minimizing the CTVE. This also makes sense because by definition, the global minimum of the TSTT must be smaller than other TSTTs obtained by other feasible solutions, including the turning restriction scheme obtained under minimizing the CTVE. However, as the perception of travelers on the traffic network status is improved (i.e., as the dispersion value increases), the TSTT does not decrease monotonicity under the objective of minimizing the CTVE. This is due to the tradeoff between the two objectives. Hence, there are sudden increases in the TSTT as the dispersion value increases.

Similarly, we observe from Fig. 16(b) that when the objective is to minimize the CTVE, the better the traffic information perceived by travelers, the lower the minimum CTVE obtained. The minimum CTVE must also be smaller than the CTVE obtained under the objective of minimizing the TSTT. More importantly, Fig. 16(b) shows that the network performance can be worsened in terms of increasing the CTVE when we only consider optimizing the TSTT and the traffic information availability to travelers is good. Therefore, traffic managers should consider the congestion issue when they implement traffic controls to improve the CTVE.

It is also interesting to test the effect of traffic demand levels on the solutions of the BOTRDP. The demand level reflects the degree of network congestion. The demand matrix of the Sioux Falls network was uniformly varied by multiplying by a constant demand scaling factor, where the factor represents the demand level relative to the base demand matrix. Since the Sioux Falls network in the base scenario (i.e., when demand factor equals 1) is quite congested, we only varied the factor from 0.5 to 1.5, with an increment of 0.1. The numbers of Pareto solutions under different traffic demand levels are shown in Fig. 17
                        . The results show that the number of Pareto solutions decreases as the travel demand level grows up. This implies the number of alternatives of implementing turning restrictions is smaller when traffic network becomes more congested. Perhaps, it is because when the network is congested, it is not so easy to apply turning restrictions (abandon traffic movements) that do not result in an increase in total travel time without increasing the total emissions or vice versa. The travel time increase due to detouring is larger when the network is more congested because the travel time is highly affected by the congestion level. Hence, as the network is more congested, the increase in travel time due to detouring is much easier to be greater than the reduction of the travel time on a link due to lowering opposing flow. Moreover, the increase in vehicle emissions due to detouring is larger when the network is more congested because the speed is lower and is farther away from the optimal speed. Hence, fewer effective alternatives exist when the demand level is higher.

We also considered the two special solutions for the BOTRDP, i.e., only optimizing the TSTT or only optimizing the CTVE, when traffic demand level varies. Fig. 18
                         presents the relative network performance improvement after implementing the turning restrictions according to the two special solutions. The results show that the TSTT can be reduced when the BOTRDP only considers optimizing the TSTT. However, the TSTT can be increased after implementing the turning restrictions according to the optimal solution that only minimizes the CTVE. As shown in Fig. 18(a), the TSTT after implementing the optimal turning restrictions in terms of minimizing the CTVE only is greater than that of the case of no turning restriction when the traffic demand level is less than 0.9. Similar results can be observed in Fig. 18(b), which shows that the CTVE increases after implementing the optimal turning restrictions in terms of optimizing the TSTT only when the traffic demand level is less than 0.9. The results presented in Fig. 18 also illustrates that the network performance can be improved in terms of both reducing the TSTT and reducing the CTVE when the traffic demand level is high. Moreover, the more congested the traffic network is, the more improvement the network performance is in terms of both objectives. Therefore, the implementation of turning restrictions is very useful for improving the performance of congested traffic networks. Since the number of alternatives of implementing turning restrictions decreases as traffic demand grows up as observed in previous result, it is relatively easier to select Pareto improved turning restrictions for more congested networks.

@&#CONCLUSIONS@&#

This paper presents a bi-level programming model and proposes an ABC heuristic for solving the BOTRDP. Three mutation neighborhood operators, three crossover neighborhood operators (crossover between current non-dominated food sources) and their combinations with mutation operators are introduced to find a new food source near a selected food source. A Pareto ranking based fitness assignment method is adopted to evaluate the quality of each food source. The proposed ABC heuristic was applied to solve the BOTRDP for the Sioux Falls network. The test results show that some combinations of neighborhood operators including crossover operators can indeed improve the performance of the ABC heuristic, and that the proposed heuristic outperforms the NSGA even when different operators are randomly chosen and utilized in the NSGA as in our proposed heuristic. Numerical results also show that implementing turning restrictions can obviously reduce the TSTT and the CTVE individually, especially when the traffic network is very congested. However, we find that if we only consider optimizing one respect of the network performance, the other respect of the network performance can become inferior when the traffic network is not so congested. Therefore, we should consider the trade off between traffic efficiency and traffic induced environmental pollution when implementing a turning restriction strategy. We also find that the number of turning restriction designs is smaller when the network is more congested but greater network improvement can be achieved. The results also show that the effect of traffic information provision does have the impact on the number of Pareto optimal turning restriction designs. These results should have important implications on traffic management including special event traffic management.

This study proposed a modified ABC algorithm for solving the BOTRDP. In fact, there are many other meta-heuristic algorithms that can be developed to solve the BOTRDP. In the future, we will test the performance of other meta-heuristic algorithms for solving the BOTRDP.

@&#ACKNOWLEDGEMENTS@&#

This work is jointly supported by a Grant from the Research Grants Council of the Hong Kong Special Administrative Region, China (HKU 716312E), a Grant from the Central Policy Unit of the Government of the Hong Kong Special Administrative Region and the Research Grants Council of the Hong Kong Special Administrative Region, China (HKU7026-PPR-12), the National Basic Research Program of China (2012CB725401), and the National Natural Science Foundation of China (71001001, 71001005, 71271183). The authors are grateful to the two referees for their constructive comments.

A simple descent direction, denoted by d
                     =[dab
                     ], can be applied to solve the problem (1) for a given y, given by:
                        
                           (14)
                           
                              
                                 
                                    d
                                 
                                 
                                    ab
                                 
                              
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       rs
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                    
                                 
                              
                              
                                 
                                    q
                                 
                                 
                                    rs
                                 
                              
                              
                                 
                                    P
                                 
                                 
                                    k
                                 
                                 
                                    rs
                                 
                              
                              
                                 
                                    δ
                                 
                                 
                                    ab
                                    ,
                                    k
                                 
                                 
                                    rs
                                 
                              
                              -
                              
                                 
                                    x
                                 
                                 
                                    ab
                                 
                              
                              .
                           
                        
                     Note that 
                        
                           
                              
                                 P
                              
                              
                                 k
                              
                              
                                 rs
                              
                           
                        
                      is a function of xab
                     .

The SRAM for solving the SUE problem is outlined as follows (Long et al., 2010):
                        
                           
                              Step 1: Initialization. Calculate the route choice probability using free flow travel cost. Obtain the initial movement flow x
                              1 by Eqs. (1) and (2). Set κ
                              =1, η
                              >1, 0<
                              γ
                              <1, β
                              0
                              =1, and the convergence tolerance ε
                              >0.


                              Step 2: Descent direction finding. Compute the descent direction d
                              
                                 κ
                               by Eq. (14).


                              Step 3: Step size determination. Obtain the step size 
                                 
                                    
                                       
                                          λ
                                       
                                       
                                          κ
                                       
                                    
                                    =
                                    1
                                    /
                                    
                                       
                                          β
                                       
                                       
                                          κ
                                       
                                    
                                 
                              , where


                     
                        
                           
                              Step 4: Link flow update. Let 
                                 
                                    
                                       
                                          x
                                       
                                       
                                          κ
                                          +
                                          1
                                       
                                    
                                    =
                                    
                                       
                                          x
                                       
                                       
                                          κ
                                       
                                    
                                    +
                                    
                                       
                                          λ
                                       
                                       
                                          κ
                                       
                                    
                                    
                                       
                                          d
                                       
                                       
                                          κ
                                       
                                    
                                 
                              .


                              Step 5: Convergence test. If 
                                 
                                    ‖
                                    
                                       
                                          d
                                       
                                       
                                          κ
                                       
                                    
                                    ‖
                                    ⩽
                                    ε
                                 
                              , stop; otherwise, let κ
                              =
                              κ
                              +1, and go to Step 2.

The SRAM is similar to the MSA (which is also called the flow averaging method) except the choice of the step size. Hence, the proof of the convergence for the SRAM basically follows that for the MSA. The MSA was originally introduced by Robbins and Monro (1951) for solving the fixed point problem x
                     =
                     F(x). The MSA adopts the following to solve the fixed point problem:
                        
                           (15)
                           
                              
                                 
                                    x
                                 
                                 
                                    κ
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    x
                                 
                                 
                                    κ
                                 
                              
                              +
                              
                                 
                                    λ
                                 
                                 
                                    κ
                                 
                              
                              (
                              F
                              (
                              
                                 
                                    x
                                 
                                 
                                    κ
                                 
                              
                              )
                              -
                              
                                 
                                    x
                                 
                                 
                                    κ
                                 
                              
                              )
                              ,
                           
                        
                     where 
                        
                           
                              
                                 λ
                              
                              
                                 κ
                              
                           
                        
                      is the step size in the κth iteration.


                     Robbins and Monro (1951) and Blum (1954) state that one of the convergence requirements for the procedure (15) is that the sequence of step sizes 
                        
                           {
                           
                              
                                 λ
                              
                              
                                 κ
                              
                           
                           }
                        
                      should satisfy 
                        
                           
                              
                                 ∑
                              
                              
                                 κ
                              
                           
                           
                              
                                 λ
                              
                              
                                 κ
                              
                           
                           =
                           ∞
                        
                      and 
                        
                           
                              
                                 ∑
                              
                              
                                 κ
                              
                           
                           
                              
                                 (
                                 
                                    
                                       λ
                                    
                                    
                                       κ
                                    
                                 
                                 )
                              
                              
                                 2
                              
                           
                           <
                           ∞
                        
                     . The sequence of step sizes 
                        
                           {
                           
                              
                                 λ
                              
                              
                                 κ
                              
                           
                           }
                        
                      generated by the SRAM satisfies 
                        
                           
                              
                                 ∑
                              
                              
                                 κ
                              
                           
                           
                              
                                 λ
                              
                              
                                 κ
                              
                           
                           =
                           ∞
                        
                      and 
                        
                           
                              
                                 lim
                              
                              
                                 κ
                                 →
                                 ∞
                              
                           
                           
                              
                                 λ
                              
                              
                                 κ
                              
                           
                           =
                           0
                        
                      in which the latter is a more general condition than 
                        
                           
                              
                                 ∑
                              
                              
                                 κ
                              
                           
                           
                              
                                 (
                                 
                                    
                                       λ
                                    
                                    
                                       κ
                                    
                                 
                                 )
                              
                              
                                 2
                              
                           
                           <
                           ∞
                        
                      (Liu et al., 2009). Hence, the SRAM also satisfies the convergence requirement. The other convergence requirements for the SRAM are the same as those for the MSA because the two methods differs only in terms of step size determination. For the proof of convergence of the MSA, the readers can refer to Daganzo (1983) or Theorem 3 in Cantarella (1997). Note that one convergence condition required for the MSA is that the link cost vector functions have a symmetric continuous Jacobian with respect to the link flow vector (Cantarella, 1997; Daganzo, 1983). This condition is not satisfied in our problem. Yet, in our computation tests, the SRAM still converged to SUE follow patterns. Nevertheless, for general applications, we provide another version of the SRAM in Appendix B that guarantees convergence as if the cost averaging algorithm proposed by Cantarella (1997) and that avoids the slow convergence of the flow or cost averaging method.

We define an equivalent link flow 
                        
                           
                              
                                 
                                    
                                       x
                                    
                                    
                                       ˆ
                                    
                                 
                              
                              
                                 a
                              
                           
                        
                      for each link a as follows:
                        
                           (16)
                           
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    a
                                 
                              
                              =
                              
                                 
                                    x
                                 
                                 
                                    a
                                    ,
                                    TH
                                 
                              
                              +
                              
                                 
                                    ϕ
                                 
                                 
                                    RT
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    a
                                    ,
                                    RT
                                 
                              
                              +
                              
                                 
                                    ϕ
                                 
                                 
                                    LT
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    a
                                    ,
                                    LT
                                 
                              
                              +
                              
                                 
                                    ϕ
                                 
                                 
                                    opp
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    a
                                    ,
                                    opp
                                 
                              
                              .
                           
                        
                     Then, by combining Eqs. (1), (2), (4), (5), and (16), we can express the equivalent link flow vector 
                        
                           
                              
                                 x
                              
                              
                                 ˆ
                              
                           
                           =
                           [
                           
                              
                                 
                                    
                                       x
                                    
                                    
                                       ˆ
                                    
                                 
                              
                              
                                 a
                              
                           
                           ]
                        
                      as a function of the link travel time vector t
                     =[ta
                     ] for a given y, expressed as follows:
                        
                           (17)
                           
                              
                                 
                                    x
                                 
                                 
                                    ˆ
                                 
                              
                              =
                              x
                              (
                              t
                              )
                              ,
                           
                        
                     where X is the composite map. Moreover, the link travel time can be equivalently reformulated as follows:
                        
                           (18)
                           
                              
                                 
                                    t
                                 
                                 
                                    a
                                 
                              
                              =
                              
                                 
                                    t
                                 
                                 
                                    a
                                 
                                 
                                    0
                                 
                              
                              ·
                              
                                 
                                    
                                       1
                                       +
                                       
                                          
                                             χ
                                          
                                          
                                             1
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     x
                                                                  
                                                                  
                                                                     ˆ
                                                                  
                                                               
                                                            
                                                            
                                                               a
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               Q
                                                            
                                                            
                                                               a
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   χ
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              .
                           
                        
                     According to the BPR function (18), the link travel time vector t is also a function of the equivalent link flow vector 
                        
                           
                              
                                 x
                              
                              
                                 ˆ
                              
                           
                        
                     , defined as follows:
                        
                           (19)
                           
                              t
                              =
                              C
                              (
                              
                                 
                                    x
                                 
                                 
                                    ˆ
                                 
                              
                              )
                              ,
                           
                        
                     where C is the cost-flow map.

Substituting Eq. (17) into Eq. (19), we can obtain a fixed-point problem in terms of link times for the SUE problem addressed in this paper:
                        
                           (20)
                           
                              t
                              =
                              C
                              (
                              x
                              (
                              t
                              )
                              )
                              .
                           
                        
                     A simple descent direction denoted by h
                     =[ha
                     ] can then be applied to solve the problem (20) for a given y, given by:
                        
                           (21)
                           
                              h
                              =
                              C
                              (
                              x
                              (
                              t
                              )
                              )
                              -
                              t
                              .
                           
                        
                     
                  

An extension of the SRAM in terms of link times for solving the SUE problem is outlined as follows:
                        
                           
                              Step 1: Initialization. Set the initial link travel time t
                              1 equal to the travel time derived from a feasible flow pattern. Set κ
                              =1, η
                              >1, 0<
                              γ
                              <1, β
                              0
                              =1, and the convergence tolerance ε
                              >0.


                              Step 2: Descent direction finding. Compute the link flow 
                                 
                                    
                                       
                                          
                                             
                                                x
                                             
                                             
                                                ˆ
                                             
                                          
                                       
                                       
                                          κ
                                       
                                    
                                    =
                                    x
                                    (
                                    
                                       
                                          t
                                       
                                       
                                          κ
                                       
                                    
                                    )
                                 
                               by Eqs. (1), (2), (4), (5), and (16). Compute the link travel time 
                                 
                                    
                                       
                                          
                                             
                                                t
                                             
                                             
                                                ̃
                                             
                                          
                                       
                                       
                                          κ
                                       
                                    
                                    =
                                    C
                                    (
                                    
                                       
                                          
                                             
                                                x
                                             
                                             
                                                ˆ
                                             
                                          
                                       
                                       
                                          κ
                                       
                                    
                                    )
                                 
                               by the BPR function (3), and obtain the descent direction 
                                 
                                    
                                       
                                          h
                                       
                                       
                                          κ
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                t
                                             
                                             
                                                ̃
                                             
                                          
                                       
                                       
                                          κ
                                       
                                    
                                    -
                                    
                                       
                                          t
                                       
                                       
                                          κ
                                       
                                    
                                 
                              .


                              Step 3: Step size determination. Obtain the step size 
                                 
                                    
                                       
                                          λ
                                       
                                       
                                          κ
                                       
                                    
                                    =
                                    1
                                    /
                                    
                                       
                                          β
                                       
                                       
                                          κ
                                       
                                    
                                 
                              , where


                     
                        
                           
                              Step 4: Link travel time update. Let 
                                 
                                    
                                       
                                          t
                                       
                                       
                                          κ
                                          +
                                          1
                                       
                                    
                                    =
                                    
                                       
                                          t
                                       
                                       
                                          κ
                                       
                                    
                                    +
                                    
                                       
                                          λ
                                       
                                       
                                          κ
                                       
                                    
                                    
                                       
                                          h
                                       
                                       
                                          κ
                                       
                                    
                                 
                              .


                              Step 5: Convergence test. If 
                                 
                                    ‖
                                    
                                       
                                          h
                                       
                                       
                                          κ
                                       
                                    
                                    ‖
                                    ⩽
                                    ε
                                 
                              , stop; otherwise, let κ
                              =
                              κ
                              +1, and go to Step 2.

The proof of the convergence for the cost-averaging version of the SRAM is basically the same as for the cost averaging algorithm. The only difference between the two methods is the choice of step size and hence the only difference between the two proofs is on checking the convergence of the step size sequence. The choice of the step size in the cost-averaging version of the SRAM is basically the same as that for the original version of the SRAM, and therefore the sequence of step sizes 
                        
                           {
                           
                              
                                 λ
                              
                              
                                 κ
                              
                           
                           }
                        
                      generated by the cost-averaging version also satisfies 
                        
                           
                              
                                 ∑
                              
                              
                                 κ
                              
                           
                           
                              
                                 λ
                              
                              
                                 κ
                              
                           
                           =
                           ∞
                        
                      and 
                        
                           
                              
                                 lim
                              
                              
                                 κ
                                 →
                                 ∞
                              
                           
                           
                              
                                 λ
                              
                              
                                 κ
                              
                           
                           =
                           0
                        
                     . For the proof of the convergence of the cost-averaging algorithm proposed by Cantarella (1997), the readers can refer to Theorem 4 in his paper. This theorem states that if (1) the existence and uniqueness conditions mentioned in theorems 1 and 2 in his paper hold, and (2) all the choice maps are continuous with continuous first derivatives additive probabilistic, then the cost averaging algorithm converges to an equilibrium link cost vector. These two conditions are satisfied by our proposed lower level problem.

@&#REFERENCES@&#

