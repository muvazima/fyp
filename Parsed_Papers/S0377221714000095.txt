@&#MAIN-TITLE@&#The Aircraft Maintenance Base Location Problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Identifies a new location model that arises in maintenance routing.


                        
                        
                           
                           The AMBLP is shown to be NP-complete.


                        
                        
                           
                           A new theoretical lower bound is established for AMBLP.


                        
                        
                           
                           Four heuristic methods for AMBLP are analyzed for worst-case performance.


                        
                        
                           
                           A numerical example is presented to illustrate the heuristics.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Air transportation

Aircraft maintenance

Facility location

Approximation algorithms

Computational complexity

@&#ABSTRACT@&#


               
               
                  Aviation authorities such as the Federal Aviation Administration (FAA) provide stringent guidelines for aircraft maintenance, with violations leading to significant penalties for airlines. Moreover, poorly maintained aircraft can lead to mass cancellation of flights, causing tremendous inconvenience to passengers and resulting in a significant erosion in brand image for the airline in question. Aircraft maintenance operations of a complex and extended nature can only be performed at designated maintenance bases. Aircraft maintenance planning literature has focused on developing good tail-number routing plans, while assuming that the locations of the maintenance bases themselves are fixed. This paper considers an inverse optimization problem, viz., locating a minimal number of maintenance bases on an Euler tour, while ensuring that all required aircraft maintenance activities can be performed with a stipulated periodicity. The Aircraft Maintenance Base Location Problem (AMBLP) is shown to be NP-complete and a new lower bound is developed for the problem. The performance of four simple “quick and dirty” heuristics for obtaining feasible solutions to AMBLP is analyzed.
               
            

@&#INTRODUCTION@&#

On April 9, 2008 American Airlines was forced to cancel about a thousand flights (more than one-third of its schedule), stranding approximately one hundred thousand passengers (Koenig, Ilnytzky, & Carlton, 2008). A day earlier, the airline cancelled an additional four hundred and sixty flights. Federal inspectors allegedly found problems with aircraft wiring, although American claimed that passenger safety was never jeopardized. Stranded passengers included businesspeople, information technology consultants and even a bishop on his way to a sermon in Atlanta. In addition to flight cancellations, American was also forced to offer compensations for meals, transportation and hotels since this was not a weather-induced aircraft delay. The Federal Aviation Administration (FAA) is egalitarian however when dispensing maintenance-related punitive measures and American Airlines is not by far the only airline to be singled out. In Section 1.1 of the online appendix accompanying this paper, a brief history of problems that airlines have faced, specifically relating to maintenance issues, is provided. Given the mission-critical nature of airline maintenance operations and their cost and complexity, it behooves airlines to carefully study them in order to extract every possible efficiency from this domain. Motivated by this goal, this work develops an analytical framework for optimizing the number and locations of aircraft maintenance bases.

The contributions of this paper are listed below:
                        
                           1.
                           We develop a formal and detailed model of the AMBLP, and demonstrate its NP-completeness.

A new lower bound is developed for the number of bases required to achieve a desired periodicity of maintenance.

The lower bound is used to analyze the performance for four simple “quick and dirty” heuristics for the AMBLP.

Finally, in the online appendix, the paper proposes two categories of extensions to the basic AMBLP model, in order to take into consideration robustness of the (maintenance-base) solution with respect to real-world operational disruptions.

We note that the problem description herein, while stated in an airline context, is applicable to a much wider variety of operational situations where maintenance needs to be performed, e.g., Vaidyanathan, Ahuja, and Orlin (2008) describe a railroad routing problem wherein threshold limits are placed on the number of miles that locomotives can travel before being forced to visit either a refueling station, or a maintenance base. The rest of the paper is organized as follows. Section 2 provides further details about the problem context, notation and also reviews relevant literature. Section 3 resolves the complexity of the AMBLP. Section 4 devises a new lower bound for this problem. The performance for four heuristics for AMBLP is discussed in Section 5. Section 6 provides a short numerical example (in the online appendix). Section 7 (in the online appendix) provides a discussion of robust Aircraft Maintenance Base Location and extends the basic AMBLP model to situations where operational considerations force lines of flights for certain aircraft to be altered. For instance, Heinold (2008) considers aircraft swaps designed to increase maintenance opportunities. Since the location of maintenance bases represents a strategic decision whose consequences cannot be easily reversed, a robust set of maintenance bases must be selected a priori while taking into consideration the potential for such operational disruptions. Finally, the limitations of the current set of models, conclusions and future research directions are presented in Section 8.


                     Gopalan and Talluri (1998a) provide a comprehensive overview of the airline schedule development process. The first step in the process determines the schedule itself, which consists of a series of flight legs, e.g., a flight from Boston to Miami, departing at 3p.m. Schedule development is followed by fleet assignment which determines the equipment type to be assigned to a flight leg, e.g., that the Boston to Miami flight at 3 p.m. is to be flown by a MD-80. The principal consideration in fleet assignment is matching plane capacity with passenger demand. Fleet assignment does not indicate which one of the aircraft (called tail numbers or nose numbers in the industry) in that fleet actually flies the flight leg (e.g. the airline may own twenty MD-80s, but fleet assignment does not determine which precise tail number will fly from Boston to Miami at 3 p.m.). Fleet assignment is followed by through-flight selection and the determination of aircraft maintenance rotations. The current paper deals with an inverse optimization problem that is closely related to, and complementary to the design of effective aircraft rotations. It considers the location of aircraft maintenance bases in order to ensure that all required forms of maintenance can be performed with a pre-determined periodicity.

After fleet assignment and through flight selection have been completed, the aircraft rotation problem can be decomposed by fleet. The Federal Aviation Administration (FAA) requires several different types of aircraft maintenance. The checks, subdivided as A, B, C and D type checks, vary in their scope, duration and frequency. Of these, only type A checks have to be performed frequently (approximately every 65 flight hours) and are considered routine maintenance. A type A check involves a visual inspection of all the major systems. If the check is not performed within the specified period, FAA rules prohibit the aircraft from flying. The remaining checks are of longer duration and are not considered routine maintenance (however, a few of the major airlines split the C check into quarter C-checks or balance-checks and plan them together with A checks (Gopalan & Talluri, 1998a)). Industry maintenance practices are usually more stringent than even FAA requirements. Airlines allow at most 35–40hours of flying before the plane undergoes what is called a transit check. This check involves a visual inspection and a check of the Minimum Equipment List (MEL). The transit check is usually performed whenever a plane visits a maintenance station, regardless of how recently it was last performed. Note that a visit to a maintenance station represents a maintenance opportunity and does not necessarily mean that we actually perform maintenance on that aircraft.

During a typical day, a plane starts off at some station, makes a series of stops at intermediate airports and overnights at some other station, which may or may not be a maintenance base. In this work, we consider the location of maintenance bases to appropriately enable the performance of extended maintenance checks that can only be performed at night. We abbreviate a day’s activity for a specific tail number in terms of lines of flying (LOFs). A LOF only specifies the origin at the start of the day and the destination at the end of the day for a particular airplane (ignoring intermediate stops made during the day). LOFs are also referred to as over-the-day routings (Kabbani & Patty, 1992). The LOFs can be easily constructed from a fleeting by using simple rules such as first-in–first-out (FIFO) or last-in–first-out (LIFO). However, we note that the LOFs so constructed need not satisfy maintenance requirements. In order to meet the requirement for transit checks, we require that every tail number spend a night at a maintenance station after at most k
                     days of flying (k
                     =3, 4) since its last overnight visit to a maintenance station. All aircraft rotations must possess this periodic structure and any proposed locations for a set of maintenance bases must ensure that rotations can be developed that periodically pass through a maintenance base after at most k
                     days of flying.

The development of aircraft rotations within each fleet is therefore crucial for ensuring periodic maintenance. Two broad solution approaches are usually adopted when developing aircraft rotations: the first approach uses detailed mathematical programming methodology to appropriately insert maintenance opportunities into sequences of flights, referred to as flight strings (Barnhart et al., 1998; Clarke, Hane, Johnson, & Nemhauser, 1996; Clarke, Johnson, Nemhauser, & Zhu, 1997). Desaulniers, Desrosiers, Dumas, Solomon, and Soumis (1997) and Sarac, Batta, and Rump (2006) consider operational aircraft routing and scheduling problems. Cohn and Barnhart (2003) and Cordeau, Stojkovic, Soumis, and Desrosiers (2001) incorporate crew considerations with maintenance and aircraft routing, while more recently, Liang, Chaovalitwongse, Huang, and Johnson (2011) have considered a “rotation-tour” network model for aircraft maintenance.

The second approach, which we adopt in this paper, uses the structure of the underlying lines of flying (LOFs) for the day to devise maintenance heuristics (Gopalan & Talluri, 1998b). After completing fleet assignment, which determines the equipment type assigned to each flight leg, the routings of planes amongst airports can be modeled as an Eulerian graph (i.e., a graph where each node is incident to an even number of edges), where each arc (in the Eulerian graph) represents a line-of-flight (LOF) for a specific plane for a day (Fig. 1
                     ). In aircraft maintenance, it’s common practice to require tail numbers to follow an Euler tour of the graph (i.e., a tour that covers every edge exactly once) in order to ensure uniform wear and tear on all aircraft. The following sub-section provides some background information on Euler tours and their applications in various real-world logistical problems.

The Euler tour problem was first conceived by Leonhard Euler in the famous “7 Bridges of Konigsberg” problem. Assad (2007) provides a historical review of Euler and his contributions to graph theory. In an Euler tour, every edge in a graph is covered exactly once: a necessary and sufficient condition for the existence of an Euler tour is that every node be of even degree (Edmonds & Johnson, 1973). This condition is automatically satisfied in any graph G=(V, E) where the edges E represent the lines of flight for aircraft for a day, since the number of aircraft that overnight at a station must equal the number of aircraft originating at the station the next day (this observation excludes red-eye flights). Euler tours also naturally arise in a number of logistical contexts, e.g., salting streets during winter (Eglese & Li, 1992; Muyldermans, Cattrysse, Van Oudheusden, & Lotan, 2002). Edmonds and Johnson (1973) studied a variant of the Euler tour problem known as the Chinese Postman problem wherein each edge must be covered at least once in a CPP tour.

We now define a useful concept, the K-MET.
                           Definition
                           
                              K-MET – Given an Eulerian graph G=(V, E), with some subset of nodes of V designated as maintenance base locations, or 
                                 M
                               nodes, and all other nodes designated as non-maintenance nodes, or 
                                 NM
                               nodes, a K-MET is an Euler tour that satisfies the following property: The tour has at most K edges (or LOFs) between successive visits to maintenance bases (i.e. nodes of type 
                                 M
                              ).


                        Fig. 1 illustrates the Eulerian graph for a fleet with six individual planes or tail numbers. On any given day, each plane fulfills the obligations of a single LOF, e.g., the LOF starting with the PHL-MIA flight and ending the day with a flight from SEA-SDO. The importance of the Aircraft Maintenance Base Location Problem can be understood by comparing the two maintenance base locations portrayed in Fig. 1. In the first case, each tail number passes through a maintenance base once every three days (i.e. a 3-MET), while in the second case only a 6-MET is possible. Moreover, while Fig. 1 has only one possible Eulerian rotation, in a general Eulerian graph, a large number of distinct Euler tours are possible. When solving the AMBLP and scheduling maintenance rotations, the maintenance base locations must be planned while keeping in mind that for any fixed set of base locations, some Euler tours may represent better rotations from the perspective of minimizing the periodicity of maintenance visits (i.e. minimizing the integer K in a K-MET). Hence, to be precise, the AMBLP determines the minimal cardinality set 
                           M
                         of maintenance bases required (and their locations on the nodes of the Eulerian LOF graph), along with the Euler tour ξ itself (that is selected from the set of all possible Euler tours ET(G)), so that any required maintenance as required by the FAA can be performed with a stipulated periodicity (i.e. the chosen maintenance base locations and associated Euler tour ξ must enable a K-MET, where K is the stipulated periodocity parameter). Henceforth, we will refer to the K-MET AMBLP problem as the K-AMBLP. We note here that Feo and Bard (1989) solve a closely related, but different base location problem for American Airlines.

The K-AMBLP is also closely related to the classical arc routing problem (Corberan & Prins, 2010; Golden & Wong, 1981). Ghiani, Improta, and Laporte (2001) consider an arc routing problem with intermediate facilities that are fixed a priori (whereas in the K-AMBLP, the facility location points are a key decision variable). Lacomme, Prins, and Ramdane-Cherif (2005) and Chu, Labadi, and Prins (2006) consider arc routing problems with a periodic structure. Ghiani and Laporte (1999) consider a version of Eulerian location problems also known as Location-Rural-Postman problems. Benavent, Corberán, Plana, and Sanchis (2009) consider a version of a windy postman problem with a min–max criterion (in the K-AMBLP the maximum number of edges that can traveled without maintenance is K, a threshold criterion). Ahr and Reinelt (2006) also consider a k-Chinese postman problem with a min–max criterion. Mourão, Nunes, and Prins (2009) consider an arc routing problem with sector-based service. When multiple vehicles are considered in any of the arc routing formulations above, each vehicle’s tour is required to cover only a subset of the edges, a concept similar to a maintenance circuit decomposition in aircraft routing (Talluri (1998)).

The objective of the AMBLP is to select a set of maintenance base locations 
                        M
                      and an associated Euler tour ξ for the aircraft, that together can lead to a K-MET. As the parameter K increases, finding a K-MET should get progressively easier, i.e., a (K+1)-AMBLP is a relaxation of the K-AMBLP. The 2-AMBLP is therefore the most stringent problem that can be posed on a given Eulerian graph G. The following Lemma resolves the complexity of 2-AMBLP.
                        Lemma 1
                        
                           2-AMBLP is NP-complete.

In the 2-MET corresponding to any solution of 2-AMBLP, every edge in the Eulerian rotation is incident to at least one maintenance base, i.e., the maintenance base locations 
                              M
                            in any 2-AMBLP solution represent a vertex cover for G. Conversely, every vertex cover for G also represents a feasible solution to 2-AMBLP. Hence the 2-AMPLP reduces to a minimum vertex cover problem which is known to NP-complete for general, non-Eulerian graphs. If it can be shown that the vertex cover problem on Eulerian graphs is just as hard as the vertex cover problem on general graphs, 2-AMBLP is NP-complete. We now use the triangle device depicted in Fig. 2
                            to convert a vertex cover problem in a general graph to an equivalent vertex cover problem in an Eulerian graph. One triangle device is added for every pair of odd-degree vertices in G. The number of odd-degree nodes in a non-Eulerian graph is known to be even. Let χ represent the number of odd degree nodes in any given instance of vertex cover VC-G on a general Graph G. After adding the triangle device for every edge that connects odd-degree nodes in G, the transformed graph T-VC-G is now Eulerian. T-VC-G has a vertex cover with cardinality χ+n iff G has a vertex cover of cardinality n. Hence the vertex cover problem, even when restricted to Eulerian graphs, is NP-complete, showing that 2-AMBLP is also NP-complete.□

We next show that the K-AMBLP is NP-complete for K⩾4.
                        Theorem 1
                        
                           The K-AMBLP is NP-complete for K
                           ⩾4.

We reduce the Hamilton circuit problem to the K-AMBLP. Given a directed graph G=(V, E), the Hamilton circuit problem requires identification of a tour that starts at a node (designated as node 1 without loss of generality), uses a subset of the edges E to visit each node v∊V (v!=1) exactly once before returning to node 1. Given an instance of Hamilton circuit with |V|=n, it is possible to create an instance of K-AMBLP such that K-AMBLP has a solution with (n+1) maintenance bases (and an Eulerian routing ξ with periodicity K) if and only if Hamilton circuit has a solution.□


                     Fig. 3
                     (a)–(d) summarizes the constructions needed to transform an instance of Hamilton circuit into an instance of K-AMBLP. For ease of exposition, the proof is outlined for K=4, but Fig. 3 can be easily extended for any K>4. We summarize the constructions needed for the proof in the following three steps.
                        
                           
                              Step 1: Refer Fig. 3(a). For node U!=1 in the Hamilton circuit instance, split node U into two nodes U′ and U″, while inserting an artificial edge between U′ and U″ that contains two additional, artificial nodes. This construction is similar to Talluri (1998). A super-terminus node ST is added to the instance of Hamilton circuit. If IU is the in-degree of node U, create (IU
                              −1) arcs from U′ into node ST. Similarly, if OU is the out-degree of node U, create (OU
                              −1) arcs from ST to U″ and insert an artificial node into each such arc from ST to U″. The nodes with the symbols “M?” are to be designated as maintenance nodes in the final solution of K-AMBLP. Step 2 describes how these nodes can be forced to be maintenance nodes in any solution to K-AMBLP.


                              Step 2: This step describes the Sprinkler gadget depicted in Fig. 3(b). The gadget consists of (n+2) loops rooted at the “M-node wannabe”. Indeed if the root node is not designated as a maintenance base, at least one node in each of the (n+2) loops is forced to be a maintenance base in order to be able to observe maintenance activity once every K days, i.e., if the root node is not a maintenance base, it would add a cost of (n+2) maintenance bases to the solution. The penalty for not designating the “M-node wannabe” as a maintenance base is too high and the Sprinkler gadget ensures that every “M-node wannabe” is indeed designated as a maintenance base in any solution to K-AMBLP. Once the Sprinkler gadget is implemented, every node U!=1 resembles Fig. 3(c).


                              Step 3: This step describes the special construction required for the designated start node 1 (Fig. 3(c)). In addition to the usual alterations to nodes U!=1, there are two additional artificial edges from node 1′ to ST and from ST to 1′. Moreover there are artificial nodes (non-maintenance bases) inserted into each of these artificial arcs between 1′ and ST.

Once an instance of Hamilton circuit is converted to an instance of K-AMBLP using the sequence of constructions in Fig. 3, the K-AMBLP instance will have a solution with (n+1) maintenance bases and an Euler tour ξ of periodicity K if and only if the original instance of Hamilton circuit has a solution.

If Hamilton Circuit has a solution, create a solution to K-AMBLP as below:
                        
                           •
                           The (n+1) Sprinkler nodes are designated as maintenance bases.

Go down the special artificial edge from ST to 1′ and follow the Hamilton Circuit returning to 1′. Then return from 1′ to ST.

Finally, cover each of the |E|−n edges (between nodes U and T) not in the Hamilton Circuit by going down from ST to node U″, U″→T′ and from T′ back to ST.

If K-AMBLP has a solution with (n+1) maintenance bases and K-periodicity:
                        
                           •
                           Designate the Sprinkler nodes as maintenance bases as otherwise the solution will have at least (n+2) maintenance bases.

In every instance that the Euler tour in the K-AMBLP solution descends from ST to a node of type U″, the tour moves from U″ to some node of type T′ and is then forced to return to ST to observe the K-periodicity requirement. This happens exactly |E|−n times. These ST→ST loops can be removed from the K-AMBLP Euler tour without loss of generality. The rest of the graph has exactly one edge coming into nodes of type T′ and one edge going out of nodes of type U″. Given that an Euler tour exists, it must be the case that the tour is able to descend from ST to 1′, cover the edges in the HC and then return to ST via 1′. Hence the original graph contains a HC.

The discussion in this section still does not resolve the complexity of problem 3-AMBLP, but it is conjectured that this problem is also NP-complete.

Let the K-AMBLP be defined on a directed Eulerian graph G=(V, E) with |V|=n and |E|=m. Let ET(G) denote the set of all possible Euler tours in G. One possible solution approach to K-AMBLP is to successively select elements ξ of ET(G) and for each chosen element ξ, select a subset of the node set V such that K-AMBLP is feasible only for the chosen tour ξ. If the Euler tour ξ is fixed, K-AMBLP can be solved using a set covering formulation. Arbitrarily select any edge in the Euler tour ξ and denote it as edge e1. Let the successive elements of the Euler tour be e1,e2,…,e|E|. Let binary variable yi be 1 if node i is designated as a maintenance base and 0 otherwise. Let y(ei) denote the head node of edge ei. The following problem, denoted as SC-K-AMBLP, solves K-AMBLP when the Euler tour ξ is fixed a priori.


                     Problem SC-K-AMBLP:
                        
                           
                              
                                 
                                    
                                    
                                       
                                          Min
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                
                                             
                                          
                                          
                                             
                                                y
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          s.t.
                                          
                                          
                                          y
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                1
                                             
                                          
                                          )
                                          +
                                          y
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                2
                                             
                                          
                                          )
                                          +
                                          ⋯
                                          +
                                          y
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                K
                                             
                                          
                                          )
                                          ⩾
                                          1
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          y
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                2
                                             
                                          
                                          )
                                          +
                                          y
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                3
                                             
                                          
                                          )
                                          +
                                          ⋯
                                          +
                                          y
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                (
                                                K
                                                +
                                                1
                                                )
                                             
                                          
                                          )
                                          ⩾
                                          1
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          ⋯
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          y
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                |
                                                E
                                                |
                                             
                                          
                                          )
                                          +
                                          y
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                1
                                             
                                          
                                          )
                                          +
                                          ⋯
                                          +
                                          y
                                          (
                                          
                                             
                                                e
                                             
                                             
                                                (
                                                K
                                                -
                                                1
                                                )
                                             
                                          
                                          )
                                          ⩾
                                          1
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          
                                             
                                                y
                                             
                                             
                                                i
                                             
                                          
                                          ∈
                                          (
                                          0
                                          ,
                                          1
                                          )
                                       
                                    
                                 
                              
                           
                        
                     Problem SC-K-AMBLP has |E| constraints. Each constraint in SC-K-AMBLP corresponds to an edge string of length K in the chosen Euler tour ξ. The dual variable w(e) will correspond to (the primal constraint for) an edge string of length K starting with edge e.

The value of the linear programming relaxation to SC-K-AMBLP is a lower bound to the value of K-AMBLP (when the problem is constrained to a specific Euler tour ξ). In addition, any lower bound to the value of the linear programming relaxation itself is also a lower bound for problem SC-K-AMBLP. The strategy for obtaining a general lower bound (that will remain valid for all Euler tours ξ) to K-AMBLP consists of the following two steps:
                        
                           1.
                           Formulate the dual to the linear programming relaxation of SC-K-AMBLP which we denote as LPDUAL-SC-K-AMBLP.

Obtain a lower bound to the value of LPDUAL-SC-K-AMBLP by demonstrating a feasible solution to LPDUAL-SC-K-AMBLP that is independent of the initially chosen element ξ of ET(G) (that led to the formulation SC-K-AMBLP).

Prior to formulating the dual problem LPDUAL-SC-K-AMBLP, it’s useful to address the following question first: which specific constraints in the primal SC-K-AMBLP contain the variable yv corresponding to a specific vertex v? Identification of these specific primal constraints will also identify the precise dual variables we (for the primal problem) that need to be collected together (in the dual formulation) when the dual constraint corresponding to “column yv in the primal” is formulated. First, each primal constraint in SC-K-AMBLP corresponds to (and contains the y variables for the head nodes of) a string of K edges that begin with some specific edge e. If a string of K edges in the chosen Euler tour ξ contains node v as a head node for some edge e in the string, then the primal constraint corresponding to this string of K edges will contain variable yv. Every single time the Euler tour ξ passes through node v, K sets of K-edges can be found along the Euler tour that contain node v as a head node. Consider Fig. 4
                         which illustrates this concept for K=2, i.e. outlines sets of 2 edges in the chosen Euler tour ξ that pass through node v and include node v as a head node. In Fig. 4, node v has an out-degree=3, i.e., the Euler tour ξ passes through node v three different times. One specific passage of the Euler tour through v is marked by the sequence of nodes i1-i2-v-i3-i4. Since K=2, the primal set covering formulation SC-K-AMBLP will contain constraints corresponding to the “2-edge strings” i1-i2-v, i2-v-i3, v-i3-i4. Of these three strings, only two edge strings (for K=2) i1-i2-v and i2-v-i3 contain node v as a head node (and therefore the primal constraint corresponding to these 2-strings i1-i2-v and i2-v-i3 will include primal variable yv). Given that the Euler tour ξ passes through node v three different times, we could have up to (3×2)=6 “2-strings” that correspond to primal constraints in SC-K-AMBLP(that include primal variable yv).

Based upon the above discussion, prior to formulating problem LPDUAL-SC-K-AMBLP we can therefore define a generic set of edges ES(K, v) for each node v∊V (and each value of K) as follows: ES(K, v) represents the set of all edges e that satisfy the following two conditions:
                           
                              1.
                              ES(K, v) represent edges e that are part of any string of length K (of edges) that traverses node v in the fixed Euler tour ξ.

ES(K, v) includes node v as a head node for some edge e ∊ ES(K, v).

The principal observation is that the dual variables w(e) that correspond to edges e∊ES(K, v) are precisely those dual variables that must be included in the dual constraint that corresponds to primal column yv in SC-K-AMBLP. Note that node v is included as a head node in edge strings of length K at most K×Δ times, where Δ is the maximum out-degree (= maximum in-degree) for any arbitrary node v in G.

The dual LPDUAL-SC-K-AMBLP can now be formulated as:
                           
                              
                                 
                                    
                                       
                                       
                                          
                                             Max
                                             
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                             w
                                             (
                                             
                                                
                                                   e
                                                
                                                
                                                   i
                                                
                                             
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             s.t.
                                             
                                             
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      ei
                                                      ∈
                                                      ES
                                                      (
                                                      K
                                                      ,
                                                      v
                                                      )
                                                   
                                                
                                             
                                             w
                                             (
                                             
                                                
                                                   e
                                                
                                                
                                                   i
                                                
                                             
                                             )
                                             ⩽
                                             1
                                             
                                             for all
                                             
                                             v
                                             ∈
                                             V.
                                          
                                       
                                    
                                 
                              
                           
                        Noting that |ES(K, v)|⩽K×Δ, where Δ=the maximum degree of any node v, setting w(ei)=1/{K×Δ} for all ei provides a feasible solution to problem LPDUAL-SC-K-AMBLP, leading to the following theorem.
                           Theorem 2
                           
                              
                                 Ceiling[|E|/{K× Δ}] is a lower bound to problem K-AMBLP.

Setting w(ei)=1/{K×Δ} is feasible for any problem LPDUAL-SC-K-AMBLP 
                        irrespective of the initial Euler tour ξ chosen from the set ET(G). Even if the Euler tour ξ based upon which the primal formulation SC-K-AMBLP is changed, the parameter Δ does not change for the graph G=(V, E) and therefore the dual variable value w(ei)=1/{K×Δ} is valid for all dual problems, irrespective of the initially chosen Euler tour. Indeed, the same lower bound from Theorem 2 is also valid if the “optimal” Euler tour ξ* (that leads to the smallest number of maintenance bases) for K-AMBLP is selected from ET(G) to formulate SC-K-AMBLP.

The lower bound calculation in Section 4 suggests the following heuristic procedure for solving K-AMBLP: first select an arbitrary Euler tour ξ from the set of all tours ET(G) and then solve the set covering formulation SC-K-AMBLP to identify a feasible solution to K-AMBLP (with respect to the fixed tour ξ). Let υ(K-AMBLP(ξ)) represent the optimal solution value of K-AMBLP when the Euler tour is fixed to be ξ, i.e., υ(K-AMBLP(ξ)) represents the smallest number of maintenance bases that are capable of providing an Eulerian rotation of maintenance-periodicity K with respect to ξ. Let ξ* be the optimal Euler tour (i.e., the Euler tour that leads to the smallest number of maintenance bases in the optimal solution of K-AMBLP across all Euler tours in the set ET(G)).
                        Lemma 2
                        
                           The ratio α(ξ)=υ(K-AMBLP(ξ))/υ(K-AMBLP(ξ*)) can be arbitrarily large in the worst-case.

The construction in Fig. 5
                            indicates that this iterative procedure can be extremely sensitive to the initial Euler tour ξ selected from ET(G). In Fig. 5, the Euler tour on the left (= ET1) leads to fixing O(n) maintenance bases (for K=3). In ET1, the tour first (in phase 1) starts at node 0 and walks successively through nodes 0-1-2-…(3n) (in a large loop) before returning to node 0. Next (in phase 2), the yet uncovered pairs of edges from 0 to 2, 0 to 3,…0 to (3n−1) are covered in ET1. Given that K=3, ET1 will require at least O(n) maintenance bases to cover the long walk 1-2-3…(3n) (e.g., maintenance bases located at nodes 0, 3, 6 and so on). On the other hand, the second Euler tour ξ* (= ET2) on the right side of Fig. 5 leads to a single maintenance base in the final solution (at node 0), providing a worst-case error of magnitude O(n) (for arbitrarily large n) if tour ξ is erroneously fixed before solving 3-AMBLP. In ET2, the tour returns to node 0 frequently, covering, in succession, the cycles (0-1-2-0), (0-2-3-0),…,(0-(3n−1)-(3n)-0).□


                     Section 6 (in the online appendix) provides a numerical example illustrating the set covering formulation (of Section 4) for two different Euler tours, one of which is optimal for the problem instance (i.e. one Euler tour in the numerical example is ξ*). The remainder of this section discusses the performance of four simple heuristic strategies (HeurS) for producing feasible, initial solutions for K-AMBLP, summarized below (Section 6 provides a detailed illustration of these four heuristics):

If maintenance bases are located at any vertex cover solution, any Eulerian rotation will be feasible for any periodicity K⩾2. Since any vertex cover is feasible to K-AMBLP, we could start with a vertex cover solution to K-AMBLP (and any arbitrarily chosen Euler tour ξ), and progressively drop maintenance bases from the vertex cover that are not required in the solution in order to observe the K-periodicity requirement for the chosen ξ. The vertex cover problem itself is NP-complete, but we could obtain a vertex cover solution using the maximal matching heuristic (which is a 2-approximation for the vertex cover problem) and use this vertex cover solution as the starting solution to K-AMBLP. However, as the example in Fig. 6
                         demonstrates, the vertex cover starting solution can be arbitrarily bad. In the wheel graph of Fig. 6, a hub node (node 1) serves as the base for N (= |E|/3) wheels of three edges each. If the maximal matching heuristic for the vertex cover problem is used, it may find a vertex cover of cardinality 2N, while the optimal vertex cover has cardinality (N+1) (= Node 1 and any other node in each wheel). However if K=3, the optimal solution to K-AMBLP is Node 1. Hence the vertex cover heuristic, while always successful at finding a feasible solution for any K-AMBLP, can perform arbitrarily badly. In Fig. 6, if the vertex cover solution is improved by “dropping” maintenance bases, the optimal solution could be discovered by dropping one maintenance base from each wheel (while retaining the hub node as a maintenance base). The running time of the vertex cover heuristic is equal to (Time to find maximal matching+time for drop phase). A maximal matching can be obtained in O|E|2) time (successively select an edge e left in G, add it to the maximal matching and then remove all remaining edges incident to either end of e, and continue till the edge set is empty). The drop phase entails checking the impact of dropping every maintenance base (no more than |V| in the initial vertex cover) relative to a fixed Euler tour ξ (size |E|) and can be completed in O(|V||E|) time. A loose upper bound for the running time of the vertex cover heuristic for AMBLP is therefore O(|V|×|E|2).

Formulate SC-K-AMBLP for any Euler tour ξ. However, instead of solving SC-K-AMBLP to optimality, obtain a feasible solution to this set covering problem using Chvatal’s greedy heuristic (Chvatal, 1979). Chvatal shows that the ratio of the cover produced by his greedy heuristic to the optimal cover is at most 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 
                                    d
                                 
                              
                           
                         {1/i}, where d is maximum number of non-zero entries in any column of the set covering formulation. It was demonstrated in Section 4 that for any set covering formulation of K-AMBLP, the maximum number of entries in any column is K×Δ. Hence CG produces a solution within a O(ln[K×Δ]) factor of the optimal solution value of SC-K-AMBLP. However this worst case bound is with respect to the best solution of K-AMBLP when the Euler tour is fixed a priori as the tour ξ. If α(ξ)=υ(K-AMBLP(ξ))/υ(K-AMBLP(ξ*)), then CG has a real worst-case ratio of α(ξ) O(ln[K×Δ]). Lemma 2 demonstrated that α(ξ) can be arbitrarily high, but in most practical applications CG is in fact the most intuitive heuristic, i.e., we successively fix maintenance bases at nodes with a high degree (i.e. those columns with a large number of non-zeros in the set covering formulation), with the goal of covering the most number of edges with the fewest number of maintenance bases. The highest degree vertex vm can be obtained in O(|V|) time and further, all edges in the tour ξ that are covered by vm can be obtained in O(|E|) time. Hence Chvatal’s greedy heuristic procedure takes at most O(|V|2|E|) time (after repeating the procedure for finding the highest degree vertex at most |V| times).

Select an arbitrary Euler tour ξ=e1
                        →e2
                        →⋯→e|E| from ET(G). Starting at edge e1 of the Euler Tour, consider the first “K-edge-set” in ξ, consisting of e1,e2,…,eK. Let 
                           K
                        
                        1 represent the set of all head and tail nodes for edges e1,…,eK. (Note that |
                           K
                        
                        1|⩽(K+1)). Add all elements of 
                           K
                        
                        1 to the set of maintenance bases 
                           M
                        . 
                           K
                        
                        1 represents the first set in a sequence of maximal independent sets to be constructed by MIS. Then starting with edge e(K+1), walk through the edges of ξ to successively identify independent sets 
                           K
                        
                        2,
                        
                           K
                        
                        3,…,
                        
                           Ki
                           
                         such that 
                           Ki
                           
                        
                        ∩
                        
                           Kj
                           
                        
                        =ϕ for any pair of independent sets i and j. At each stage of the Eulerian walk, 
                           M
                        
                        =
                        
                           K
                        
                        1
                        ∪
                        
                           K
                        
                        2
                        ∪
                        
                           K
                        
                        3
                        …∪
                        
                           Ki
                           
                         and the construction of independent set 
                           K
                        
                        (
                        
                           
                              i
                           
                        
                        +1) begins afresh if an element of 
                           M
                         is encountered on the Euler tour even before completing the walk on the next set of K edges. After completing the Eulerian rotation, given that at least one member of each 
                           Ki
                           
                         must represent a maintenance base, the maximal independent set heuristic MIS represents a K-approximation for any fixed Euler tour ξ. As in CG, the true error bound of heuristic MIS is α(ξ)K. The MIS heuristic takes O(|E|) time to walk along the Euler tour and a further O(|V|) steps at every edge to check if the head node of the edge is already part of the set of maintenance bases M. If the head node is a maintenance base, the current independent set 
                           Kj
                           
                        
                        =ϕ, else 
                           Kj
                           
                        
                        =
                        
                           Kj
                           
                        
                        
                        ∪
                        
                        
                           {head node of current edge}
                        . The heuristic can be executed in O(|V|×|E|) time.

Select any arbitrary Euler tour ξ from ET(G). Let the successive elements of the Euler tour be e1,e2,…,e|E|. Let vi and v(i+1) represent the tail and head nodes of edge ei. Select node v1 in this Euler tour and mark it as a maintenance base. Set the parameter DSLM (Days Since Last Maintenance)=1. Set i=1 and current edge ei
                        =e1. Let 
                           M
                        
                        =Set of Maintenance Bases={1}. Walk along the Euler tour and if K successive edges are traversed (in the tour) without encountering maintenance (i.e. DSLM=K), designate the head node of the Kth edge as a maintenance base and add it to set 
                           M
                         and reset DSLM=1. The Walk-and-Mark heuristic designates at most |E|/K maintenance bases and for any Euler Tour in ET(G), the heuristic finds a solution to K-AMBLP with an approximation factor of {|E|/K}/[|E|/{K×Δ}]=Δ. The Δ-approximation factor holds independent of the initially chosen Euler tour ξ. The running time is O(|V|×|E|) (|E| for walking along the tour and |V| for comparing the current head node to a set of maintenance bases (of maximum cardinality |V|)).


                     Section 6 which presents a detailed numerical example, can be found in the online appendix accompanying this paper.

In this section, two extensions to AMBLP are considered, with the goal of ensuring a degree of robustness to any set of maintenance bases selected. The first extension in Section 7.1 (Robust-AMBLP-Mult-ET) addresses robustness with respect to LOF perturbations, while the second extension (Robust-AMBLP-MCD) in Section 7.2 builds a model that relaxes the “big cycle” assumption. Section 7 is found in the online appendix.

The K-AMBLP considers an inverse optimization problem, viz., locating maintenance bases along an Euler tour in order to observe a stipulated periodic maintenance requirement. The problem is shown to be NP-complete and a new lower bound is developed for K-AMBLP. While finding the optimal number of maintenance bases is hard, producing feasible solutions for K-AMBLP is relatively easy (e.g., designate all nodes as maintenance bases). For many problem instances, multiple optimal solutions could occur. Four intuitive heuristics for producing feasible solutions are proposed and their performance analyzed.

The basic AMBLP model presented in this paper considers the location of maintenance bases with respect to a fixed (immutable) set of lines of flight. In practice, airlines swap aircraft between lines of flight in order to increase maintenance opportunities (Heinold (2008)). Hence any set of maintenance bases must remain robust and feasible with respect to a large pool of LOFs. Some effort has been made to accommodate this type of robustness in the model extensions presented in Section 7. Moreover, maintenance bases are capacity constrained and worker hours might be strongly regulated by union regulations. Some stations may never qualify as maintenance bases for various reasons and in this case the corresponding yj variables can be pre-processed and set equal to 0 in the set covering formulation of AMBLP. The current set of models also do not consider the fixed costs for opening maintenance bases, or the strategic nature of the decision to open a base at a given location (i.e. the decision cannot be easily annulled or changed). Given these practical considerations, the main contribution of the current paper is to provide theoretical insights for the problem of locating maintenance bases with respect to an Euler tour, in order to achieve a desired periodicity in maintenance operations. A number of computational extensions to incorporate real-world complexity are outlined below.

Computational methods for solving K-AMBLP to optimality for large problem instances represent an important avenue for future research. In particular, the following computational issues could be explored:
                           
                              1.
                              Transform the Eulerian routing problem K-AMBLP into a Traveling Salesperson Problem (TSP) by using nodes to represent the edges in the original Eulerian graph (Laporte, 1997). In this transformation, two nodes (representing edges e1 and e2 in the original Eulerian graph) in the TSP are connected by an edge (in the TSP graph) only if edge e1 can be followed by edge e2 in an Eulerian walk in the original graph. An Euler tour in the original graph visits all edges exactly once and hence corresponds to a TSP tour in the transformed graph. Any sequence of K nodes in the TSP graph is maintenance feasible only if the K edges in the original Eulerian graph contain at least one maintenance base. Binary variables yj can be used to model the presence/absence of maintenance bases in the original Eulerian graph and the same yj variables can be linked to “K-node sequences” in the TSP graph. Maintenance violations (in any candidate TSP tour) can be added as valid inequalities to the original TSP formulation as needed. While such a formulation is complex, it has the capability to solve K-AMBLP to optimality without any a priori fixing of an Euler tour ξ. This formulation would also represent an extension of the Black and White Traveling Salesperson problem (Ghiani, Laporte, and Semet (2006)), wherein facilities are categorized as black or white (i.e. maintenance or non-maintenance bases) along with the development of a TSP tour itself.

A very intuitive solution procedure leverages the set covering formulation SC-K-AMBLP. In this two phase procedure, a meta-heuristic (e.g., a Tabu search heuristic) identifies a feasible Euler tour ξ from the set ET(G) in Phase I. Problem SC-K-AMBLP is then solved to optimality for ξ in Phase II, a feasible computational step given the availability of current solver technology. The heuristic iterates between Phases I and II till significant improvements to the current best solution are no longer feasible. Unlike the TSP strategy, this approach may be unable to demonstrate optimality of any given solution to K-AMBLP. Moreover, counting the number of Euler tours in G is #P complete for even undirected, planar, Eulerian graphs, while in sharp contrast, polynomial time algorithms exist for counting the number of Euler tours in directed Eulerian graphs (Creed, 2010).

Formulate problem Modified-SC-K-AMBLP, but including all sets of K-strings in the set covering formulation (i.e. not just a set of K-strings that are part of a given Euler tour ξ). If the parameters K and Δ are not too large, this computational approach is feasible since Modified-SC-K-AMBLP would contain O(|E|. ΔK) constraints. Any feasible solution to Modified- SC-K-AMBLP is also feasible to K-AMBLP (for any Euler tour ξ). If υ(P) and C-Set(P) represent the optimal solution value and constraint set of problem P, we have υ(Modified-SC-K-AMBLP)⩾υ(SC-K-AMBLP) and C-Set(SC-K-AMBLP) is a subset of C-Set(Modified-SC-K-AMBLP). The set covering solution to Modified-SC-K-AMBLP can therefore be improved by dropping maintenance bases that are not needed to observe K-periodicity for a given Euler tour ξ.

Computational methods can also be devised for solving problem K-AMBLP across multiple aircraft fleets. A limitation of the numerical example in the preceding section is that it illustrates maintenance base choices for only a single fleet, viz., the 767’s. If the Eulerian graph G for the 767 fleet is superimposed with the Eulerian graph for another fleet, e.g., MD-80’s, the maintenance base location problem gets more complicated and computationally challenging. Finding the optimal set of maintenance bases when maintenance resources are shared across fleets remains a rich area for future research. Solving K-AMBLP with multiple maintenance resources and maintenance base capacities represents a promising area of future research (e.g. similar to Zhang, Berman, and Verter (2011) who consider capacity issues in a healthcare facility location context).

Model extensions Robust-AMBLP-Mult-ET and Robust-AMBLP-MCD also provide an opportunity to combine meta-heuristics, valid inequalities and other optimization methods to develop robust solutions to the AMBLP.

Heuristics and exact methods are also needed to locate maintenance bases so as to minimize maintenance requirements during certain time windows (e.g. peak periods) and enhance maintenance opportunities during non-peak periods. As a referee for this article has pointed out, “Some airlines reduce B, C and D maintenance requirements during peak periods, in order to have more aircraft available. During non-peak periods, some aircraft are utilized more and sent earlier to maintenance (before peak periods commence), while other aircraft are utilized less during non-peak periods, to enable postponement of their maintenance operations till after the peak period.” Integrating complex time-window considerations such as these, along with maintenance base location itself, represents a challenging avenue for future research.

Finally, we reiterate that while the K-AMBLP is formulated in an aircraft maintenance context, the problem is quite general in nature and has wide applicability, e.g., the structure presented herein represents the requirements for maintenance routing in a wide variety of other operational contexts, including railcar maintenance.

@&#ACKNOWLEDGMENTS@&#

I am very grateful to the Associate Editor and the referees who made several constructive comments that greatly improved the article. I would also like to thank Prof. N.S. Narayanaswamy for his helpful suggestions.

Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.ejor.2014.01.007.


                     
                        
                           Supplementary data 1
                           
                              Numerical Example (Section 6) and Robust K-AMBLP (Section 7).
                           
                           
                        
                     
                  

@&#REFERENCES@&#

