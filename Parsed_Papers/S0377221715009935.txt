@&#MAIN-TITLE@&#Cyclic inventory routing in a line-shaped network

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We formalize the cyclic inventory routing problem in a line-shaped network.


                        
                        
                           
                           The problem is relevant, e.g., to routing feeder ships and tow trains.


                        
                        
                           
                           A complexity analysis identifies cases solvable in polynomial time.


                        
                        
                           
                           For the NP-hard cases, a dynamic programming procedure is developed.


                        
                        
                           
                           The computational study identifies costly routing policies.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Inventory routing

Cyclic routes

Container shipping

Facility logistics

@&#ABSTRACT@&#


               
               
                  The inventory routing problem (IRP) is a very challenging optimization task that couples two of the most important components of supply chain management, i.e., inventory control and transportation. Routes of vehicles are to be determined to repeatedly resupply multiple customers with constant demand rates from a single depot. We alter this basic IRP setting by two aspects: (i) only cyclic tours are allowed, i.e., each vehicle continuously tours its dedicated route, and (ii) all customers are located along a line. Both characteristics occur, for instance, in liner shipping (when feeder ships service inland ports along a stream) and in facility logistics (when tow trains deliver part bins to the stations of an assembly line). We formalize the resulting problem setting, identify NP-hard as well as polynomially solvable cases, and develop suited solution procedures.
               
            

@&#INTRODUCTION@&#

Among the most basic trade-offs each supply chain faces is the one for the right delivery frequency when moving goods from stage to stage: Frequent deliveries allow lowering inventories, but come at the price of higher transportation costs and vice versa (e.g., Andersson, Hoff, Christiansen, Hasle, & Løkketangen, 2010). In this context, we treat the following special inventory routing problem (IRP):

A set of customers each having an individual constant demand rate are to be supplied with a single commodity from a central depot. Customers may also send items back towards the depot, so that each customer also has a constant supply rate. These deliveries are executed by a homogeneous fleet of identical vehicles each having equal capacity and speed. Each vehicle is to be assigned a route, i.e., a sequence of customer visits, that is served according to a cyclic routing policy. A cyclic route means that a vehicle, once it has returned to the depot, is reloaded and instantaneously departs to repeat its identical route on and on. Vehicles are, thus, constantly in transit, so that transportation cost are less of an issue compared to the cost for the vehicle fleet that is applied to satisfy all customer demands in a timely manner. These costs are to be traded off against the inventory costs, which depend on how often each customer is visited. Another peculiarity we assume is that all customers are located along a line with the depot residing on one end. In this setting, we aim to determine cyclic routes, such that customer demands are satisfied without stock-outs and total costs are minimized.

Note that our two alterations of the basic IRP allow us to identify both NP-hard as well as efficiently solvable problem versions, which is anything but self-evident for the “surprisingly complex” IRP (Bertazzi, Savelsbergh, & Speranza, 2008).

Our special inventory routing problem has multiple potential applications, two of which are elaborated in greater detail in the following:
                           1
                        
                        
                           1
                           The pictures are published under the Creative Commons Attribution ShareAlike License. The author of map (a) is Huntster and picture (b) is from http://www.still.de/.
                        
                     


                        Liner shipping with feeders: Inland shipping, which already makes up about 20 percent of all hinterland traffic in the European Union (with its share growing, (see Martinez de Oses & Castells, 2008)), is mostly managed by short-sea shipping companies in the form of liner shipping (Christiansen, Fagerholt, & Ronen, 2004). Thus, the feeder ships (vehicles) connecting smaller satellite ports (customers) to an international hub port (depot) are typically operated on fixed tours that are cyclically repeated, e.g., every week (see Christiansen, Fagerholt, Nygreen, & Ronen, 2013), similar to bus lines. The items that are transported are containers that are moved from the hub to the inland ports and vice versa. Once the cargo is in the care of a short-sea shipping company, these companies bear the responsibility for the inventory and will therefore endeavor to move the freight as quickly as possible. As “usually, ships are operated round the clock” (Andersson et al., 2010), the transportation costs need not explicitly be considered, but are rather driven by the fleet of feeders applied. Thus, we trade off the fleet size against the inventory costs of waiting containers. Another peculiarity of short-sea shipping is that satellite ports typically range along a coastline or stream, so that their geographic positions can be approximated by a line segment. A good example for this application is the container transport between Rotterdam, Europe’s largest port, and the plenty inland ports located along river Rhine as is depicted in Fig. 1
                        (a).


                        Part supply by tow trains: In the wake of the large product variety that is offered to today’s customers, many mass-producers, e.g., in the automotive industry, aim to supply their assembly lines with parts via frequent, small-lot deliveries. For this purpose, many of them install JIT-supermarkets, which are decentralized logistics areas directly on the shop-floor where parts are intermediately stored and sorted according to the needs of the assembly process. In such a supermarket (depot), parts are sorted into bins, loaded on tow trains (vehicles, see Fig. 1(b)), and delivered to the stations along the assembly line (customers). Here, part bins are put into racks and empty bins are collected and returned to the supermarket. This process is schematically depicted in Fig. 1(c); a more detailed description is provided in Battini, Boysen, and Emde (2013); Boysen, Emde, Hoeck, and Kauderer (2015). In line with the famous heijunka-principle of the Toyota production system, the major aim of many logistics managers is to have a steady and reliable part supply, so that the final assembly never runs out of parts. Thus, tow trains are typically operated along fixed routes that are cyclically frequented (see Emde & Boysen, 2012). This way, each station is visited in equidistant time intervals, which considerably facilitates part inventory control. The space in assembly stations is notoriously scarce, so that inventory stored next to the line is to be traded off against the delivery costs caused by the tow train fleet. Furthermore, assembly stations are typically located along a straight line, so that the two peculiarities of our special IRP are fulfilled in this application, as well.

@&#LITERATURE REVIEW@&#

The relevant literature closely related to our special IRP stems from the following fields of research: vehicle and inventory routing, ship routing and scheduling, routing on the line, and part supply via tow trains.


                        Vehicle and inventory routing: A vast body of literature has accumulated over the years that combines routing and inventory management. Instead of trying to summarize this work we refer to the excellent survey papers published on this topic. A general overview on how to combine inventory management and routing is, for instance, provided by Andersson et al. (2010). Surveys on the IRP are provided by Baita, Ukovich, Pesenti, and Favaretto (1998); Bertazzi et al. (2008); Coelho, Cordeau, and Laporte (2013); Cordeau, Laporte, Savelsbergh, and Vigo (2007); Dror, Ball, and Golden (1985). The classic IRP, focusing mostly on traditional vendor managed inventory applications, aims to minimize total transportation cost. When all vehicles are constantly in use anyway, however, delivery cost are not as much of a concern, or are solely dependent on the number of employed vehicles and not the distance covered per trip. On the other hand, vehicle fleet and inventory cost – which are mostly neglected in the extant IRP literature – may be of very pressing importance, especially if storage space is scarce and just-in-time concerns need to be considered.

Long-term inventory routing problems with constant demand rates that do take inventory cost into account are mostly dealing specifically with cyclic problems, where identical routes are repeated frequently, similar to our assumptions. Extant research, however, primarily focuses on so-called fixed partition policies, where customers are clustered typically according to geographical proximity, and shortest routes as well as optimal replenishment intervals are then sought for these clusters, assuming that customers in the same cluster always lie on the same route. This avenue of research was pioneered by Anily and Federgruen (1990), with recent contributions by, e.g., Bramel and Simchi-Levi (1995); Chan, Speranza, and Bertazzi (2013). Cyclic IRP models explicitly taking into account the cost of the vehicle fleet are proposed by Aghezzaf, Raa, and Van Landeghem (2006); Raa (2015); Raa and Aghezzaf (2008); 2009). Due to the intractability of the treated routing problem in general networks, however, these papers focus mainly on heuristic approaches, while the important special case of line-shaped networks tackled in this paper has not received any attention so far.


                        Ship routing and scheduling problems have been of interest to the scientific community for several decades now; surveys are provided in Christiansen et al. (2013, 2004); Ronen (1983), 1993). The literature is typically divided by operating mode of the container traffic to be optimized, which can be either tramp, industrial or liner shipping. Since our goal is to find optimal fixed routes for feeder services operating on a regular schedule, our problem falls into the liner shipping category. We consider the strategic problem of creating long-term routes that fulfill the demand with as few ships as possible. This problem is strongly reminiscent of the vehicle routing problem (VRP), and indeed most papers dealing with liner ship routing have formulated the problem as a variant of VRP (e.g., Fagerholt, 1999; Fagerholt & Lindstad, 2000; Sambracos, Paravantis, Tarantilis, & Kiranoudis, 2004; Karlaftis, Kepaptsoglou, & Sambracos, 2009). While this is appropriate for many applications, these formulations are invariably NP-hard. In many short-sea shipping applications, where the ports-of-call lie on the same coastline or river, this problem structure is needlessly complex, however.

Recognizing this, Psaraftis, Solomon, Magnanti, and Kim (1990) were the first to propose a formulation for ship/vehicle routing on a line. The authors assume a scenario where one vehicle with unlimited capacity sets off from a depot and needs to visit a set of customers lying on a line, where goods at each customer can only be picked up or delivered after a certain release time. The goal is to minimize the completion time. The authors show that this problem can be solved in polynomial time. Tsitsiklis (1992) shows that the problem is also polynomially solvable in the case of each customer having to be visited before a specific deadline if there are no release times. If there are both release as well as due dates, the problem becomes strongly NP-hard; the same is true if release times plus non-zero handling times at the customers are part of the problem. Simchi-Levi and Berman (1992) present a polynomial-time algorithm for solving this problem in the absence of time windows for more than one vehicle while Yu and Liu (2009) solve the multi-vehicle variant with release times in polynomial time given a set of vehicles, each of which is stationed at a different depot. To date, all ship/vehicle routing on a line problems ignore the limited capacity of the vehicles. Furthermore, they are either single-vehicle models or assume a given vehicle fleet and neglect periodic deliveries to customers. Complexity results for capacitated inventory routing on a line remains still open, despite its great practical significance.

Finally, our other potential application, the supply of assembly stations via tow trains, is explained in detail in the recent survey papers provided by Battini et al. (2013) and Boysen et al. (2015). Papers covering the routing aspect of tow train delivery are provided by Emde and Boysen (2012) and Vaidyanathan, Matson, Miller, and Matson (1999). The former consider a deterministic station demand that varies over time, so that their planning approach is only suited for the short-term scheduling of tow trains once the assembly sequence (and thus the part demand pattern) is already known. Our approach considers average demand rates, which are defined by the fraction of workpieces requiring the respective part, and is, thus, better suited for a mid-term planning of the routes. Average demand rates are also considered by Vaidyanathan et al. (1999). They, however, do not exploit the arrangement of the assembly stations along a line and model the problem as some multi-period vehicle routing problem.

In summary, our problem setting has yet not been covered in the literature. Still, due to its plenty potential applications, investigating this problem seems a worthwhile endeavour.

This paper treats a special IRP that is restricted to vehicle routes that cyclicly serve customers arranged along a line. The justification for treating this special case is twofold. On the one hand, there are important applications in the field of feeder ship and tow train routing. On the other hand, our two assumptions lead to a quite compact problem setting. While traditional IRPs (or alternative problems that try to integrate inventory management and transportation) typically lead to extensive models that are very hard to solve, our problem is quite handy and (in some problem versions) efficiently solvable, so that it might be applicable as a subproblem in a larger solution framework or some bounding procedure.

The rest of the paper is organized as follows. In Section 2, we formally describe our problem and classify relevant subproblems, while in Sections 3–5 we analyze these problems further, providing complexity results and suited solution procedures. A comprehensive computational study testing the performance of our algorithms and comparing different routing policies is provided in Section 6 and, finally, Section 7 concludes the paper.

Applying the notation summarized in Table 1
                     , we can define our special cyclic inventory routing problem along a line (denoted as CIRPL) as follows. Consider a single depot (
                        
                           i
                           =
                           0
                        
                     ), e.g., a hub port or a JIT-supermarket, and 
                        
                           i
                           =
                           1
                           ,
                           2
                           ,
                           …
                           ,
                           n
                        
                      customers, e.g., inland ports or assembly stations. The depot resides on one end of a line segment which all customers are located on. Thus, customer locations can be measured as a distance di
                      from the depot and 
                        
                           
                              d
                              
                                 i
                                 ,
                                 j
                              
                           
                           =
                           
                              |
                              
                                 d
                                 i
                              
                              −
                              
                                 d
                                 j
                              
                              |
                           
                        
                      denotes the distance between customers i and j. Note that for our purposes it is not strictly necessary for the customers to lie on an actual straight line as long as the metric meets the following condition for 0 ≤ i ≤ k ≤ j ≤ n:

                        
                           
                              
                                 
                                    d
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 
                                    d
                                    
                                       i
                                       ,
                                       k
                                    
                                 
                                 +
                                 
                                    d
                                    
                                       k
                                       ,
                                       j
                                    
                                 
                                 .
                              
                           
                        
                     
                  

This is true, for example, for ports lying alongside a river or convex shorelines; Psaraftis et al. (1990) discuss such conditions and their practical applicability further. Note also that the distance d
                     
                        i, j
                      between two points i and j can be 0 if, for example, i and j are different terminals of the same port or two racks are served from the same stop of a tow train.

Customers are assumed to be numbered according to their distance from the depot, so that i < j holds if di
                      < dj
                      or in other words 
                        
                           
                              d
                              i
                           
                           =
                           
                              ∑
                              
                                 
                                    i
                                    ′
                                 
                                 =
                                 1
                              
                              i
                           
                           
                              d
                              
                                 
                                    i
                                    ′
                                 
                                 −
                                 1
                                 ,
                                 
                                    i
                                    ′
                                 
                              
                           
                        
                      applies. Each customer has a demand rate of bi
                      and a supply rate of ai
                     . This might be the number of containers accumulating per time unit that are to be delivered from the hub to inland port i and vice versa. In the tow train context, bi
                      specifies the average part demand of a station, and ai
                      refers to the empty bins to be returned to the JIT-Supermarket. Note that an exchange of items among customers is not considered. Given these rates, the number of items to be transported by a vehicle connecting a customer with the depot depends on its total tour length, i.e., the longer the trip takes, the more items will have to be transported.

Parameters 
                        
                           t
                           i
                           a
                        
                      and 
                        
                           t
                           i
                           c
                        
                      denote the time span for arrival and departure of a vehicle and the (un-)loading time of a single item at a customer or the depot, respectively. The former can, for instance, represent the time it takes a ship to navigate through a narrow bay and land at the quay wall. The latter denotes the (un-)loading time per item, which may, for instance, take longer if larger and heavier part bins are to be unloaded at a station. Furthermore, we presuppose a homogeneous vehicle fleet with an equal average travel speed of v and capacity C.

A route r is defined by a sequence of visits of customers i ∈ Ir
                      ∪ {0}, where Ir
                      denotes the set of customers served on route r, which starts and ends at the depot (
                        
                           i
                           =
                           0
                        
                     ). Each route r takes a total trip time T(Ir, Fr
                     ) and will be served by one 
                        
                           
                              F
                              r
                           
                           =
                           1
                        
                      or multiple Fr
                      ≥ 1 vehicles. We assume that multiple vehicles serving a route travel equidistantly, so that each 
                        
                           
                              T
                              (
                              
                                 I
                                 r
                              
                              ,
                              
                                 F
                                 r
                              
                              )
                           
                           
                              F
                              r
                           
                        
                      time units one of the Fr
                      vehicles arrives at each customer lying on the route. Thus, each vehicle effectively services a demand rate of 
                        
                           
                              b
                              i
                           
                           
                              F
                              r
                           
                        
                      and a supply rate of 
                        
                           
                              a
                              i
                           
                           
                              F
                              r
                           
                        
                      of these customers, and it delivers a total of 
                        
                           T
                           
                              (
                              
                                 I
                                 r
                              
                              ,
                              
                                 F
                                 r
                              
                              )
                           
                           ·
                           
                              
                                 b
                                 i
                              
                              
                                 F
                                 r
                              
                           
                        
                      and collects a total of 
                        
                           T
                           
                              (
                              
                                 I
                                 r
                              
                              ,
                              
                                 F
                                 r
                              
                              )
                           
                           ·
                           
                              
                                 a
                                 i
                              
                              
                                 F
                                 r
                              
                           
                        
                      items per trip.

The following proposition allows to precisely define a route by only specifying the (unsorted) set of all customers visited (instead of the sequence of visits).

                        Proposition 1
                        
                           Given a set Ir of customers to be visited, the routing policy requiring the least vehicle capacity and ensuring the shortest trip time is visiting all customers with bi
                            > ai, i ∈ Ir, in their given sequence on a vehicles’s path from the nearest customer
                           
                              
                                 j
                                 =
                                 min
                                 {
                                 i
                                 ∈
                                 
                                    I
                                    r
                                 
                                 }
                              
                            
                           to the farthest customer
                           
                              
                                 
                                    j
                                    ′
                                 
                                 =
                                 max
                                 
                                    {
                                    i
                                    ∈
                                    
                                       I
                                       r
                                    
                                    }
                                 
                              
                            
                           (seen from the depot) and the remaining customers in reverted sequence on the vehicles’s way back without detour.
                        

First, going from nearest customer j to the farthest j′ on a straight line without any “zigzag” routes minimizes a vehicle’s travel distance and time T(Ir, Fr
                           ), which in turn minimizes the number of items accumulating during this time. Furthermore, a zigzag-route cannot reduce the capacity required for transporting the items accumulating during the total trip time. First visiting all customers with bi
                            > ai, i ∈ Ir
                           , frees as much capacity as possible for loading items on the way back. Thus, with Fr
                            vehicles the capacity requirement is 
                              
                                 
                                    1
                                    
                                       F
                                       r
                                    
                                 
                                 ·
                                 max
                                 
                                    {
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          
                                             I
                                             r
                                          
                                       
                                    
                                    
                                       a
                                       i
                                    
                                    ;
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          
                                             I
                                             r
                                          
                                       
                                    
                                    
                                       b
                                       i
                                    
                                    }
                                 
                                 ·
                                 
                                    T
                                    r
                                 
                                 ,
                              
                            which cannot be reduced by altering the customer sequence.□

Consequently, if Ir
                      denotes the set of customers to be serviced by route r with Fr
                      vehicles, the total trip time T(Ir, Fr
                     ) is given as follows:

                        
                           
                              
                                 
                                    
                                       
                                          T
                                          (
                                          
                                             I
                                             r
                                          
                                          ,
                                          
                                             F
                                             r
                                          
                                          )
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          2
                                          ·
                                          
                                             d
                                             
                                                max
                                                {
                                                i
                                                ∈
                                                
                                                   I
                                                   r
                                                
                                                }
                                             
                                          
                                          ·
                                          
                                             1
                                             v
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          +
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                
                                                   I
                                                   r
                                                
                                             
                                          
                                          
                                             
                                                (
                                                
                                                   t
                                                   0
                                                   c
                                                
                                                +
                                                
                                                   t
                                                   i
                                                   c
                                                
                                                )
                                             
                                             ·
                                             T
                                             
                                                (
                                                
                                                   I
                                                   r
                                                
                                                ,
                                                
                                                   F
                                                   r
                                                
                                                )
                                             
                                             ·
                                             
                                                
                                                   
                                                      a
                                                      i
                                                   
                                                   +
                                                   
                                                      b
                                                      i
                                                   
                                                
                                                
                                                   F
                                                   r
                                                
                                             
                                          
                                          +
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                
                                                   I
                                                   r
                                                
                                                ∪
                                                
                                                   {
                                                   0
                                                   }
                                                
                                             
                                          
                                          
                                             t
                                             i
                                             a
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

The total trip time consists of three summands: The first part is the travel time from the depot to the farthest customer and back. Then, the 
                        
                           T
                           
                              (
                              
                                 I
                                 r
                              
                              ,
                              
                                 F
                                 r
                              
                              )
                           
                           ·
                           
                              
                                 
                                    a
                                    i
                                 
                                 +
                                 
                                    b
                                    i
                                 
                              
                              
                                 F
                                 r
                              
                           
                        
                      items to be carried by a vehicle need to be both loaded and unloaded at the depot and the customer, which takes 
                        
                           t
                           0
                           c
                        
                      and 
                        
                           t
                           i
                           c
                        
                      time units per item, respectively. Thus, the total (un-)loading time depends by itself on the total trip time and the number of vehicles Fr
                     , since with more vehicles on a route, the effective supply and demand rates decrease. The third part denotes the time span for arrival and departure of a vehicle at all customers lying on the route. Thus, solving for T(Ir, Fr
                     ), we get:

                        
                           (1)
                           
                              
                                 T
                                 
                                    (
                                    
                                       I
                                       r
                                    
                                    ,
                                    
                                       F
                                       r
                                    
                                    )
                                 
                                 =
                                 
                                    
                                       2
                                       ·
                                       
                                          d
                                          
                                             max
                                             {
                                             i
                                             ∈
                                             
                                                I
                                                r
                                             
                                             }
                                          
                                       
                                       ·
                                       
                                          1
                                          v
                                       
                                       +
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             
                                                I
                                                r
                                             
                                             ∪
                                             
                                                {
                                                0
                                                }
                                             
                                          
                                       
                                       
                                          t
                                          i
                                          a
                                       
                                    
                                    
                                       1
                                       −
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             
                                                I
                                                r
                                             
                                          
                                       
                                       
                                          
                                             (
                                             
                                                t
                                                0
                                                c
                                             
                                             +
                                             
                                                t
                                                i
                                                c
                                             
                                             )
                                          
                                          ·
                                          
                                             
                                                (
                                                
                                                   a
                                                   i
                                                
                                                +
                                                
                                                   b
                                                   i
                                                
                                                )
                                             
                                             
                                                F
                                                r
                                             
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        
                     
                  

Note that this formula only makes sense if 
                        
                           
                              ∑
                              
                                 i
                                 ∈
                                 
                                    I
                                    r
                                 
                              
                           
                           
                              
                                 (
                                 
                                    t
                                    0
                                    c
                                 
                                 +
                                 
                                    t
                                    i
                                    c
                                 
                                 )
                              
                              ·
                              
                                 
                                    (
                                    
                                       a
                                       i
                                    
                                    +
                                    
                                       b
                                       i
                                    
                                    )
                                 
                                 
                                    F
                                    r
                                 
                              
                           
                           <
                           1
                        
                      because otherwise (un-) loading the items would take so long that it becomes impossible for the vehicles to keep up, i.e., the route would be infeasible. Thus, condition 
                        
                           T
                           
                              (
                              
                                 I
                                 r
                              
                              ,
                              
                                 F
                                 r
                              
                              )
                           
                           =
                           ∞
                           ⇔
                           
                              ∑
                              
                                 i
                                 ∈
                                 
                                    I
                                    r
                                 
                              
                           
                           
                              
                                 (
                                 
                                    t
                                    0
                                    c
                                 
                                 +
                                 
                                    t
                                    i
                                    c
                                 
                                 )
                              
                              ·
                              
                                 
                                    (
                                    
                                       a
                                       i
                                    
                                    +
                                    
                                       b
                                       i
                                    
                                    )
                                 
                                 
                                    F
                                    r
                                 
                              
                           
                           ≥
                           1
                        
                      holds. Also note that, by Proposition 1, detours or idle (waiting) time cannot improve the vehicle capacity requirements or total trip time, hence in any solution that is optimal with regard to these considerations, each trip will take exactly T(Ir, Fr
                     ) time.

Clearly, during no point of a vehicles’s trip the number Γ(Ir, Fr
                     ) of items carried may exceed capacity C, so that the following condition must hold:

                        
                           (2)
                           
                              
                                 Γ
                                 
                                    (
                                    
                                       I
                                       r
                                    
                                    ,
                                    
                                       F
                                       r
                                    
                                    )
                                 
                                 =
                                 
                                    1
                                    
                                       F
                                       r
                                    
                                 
                                 ·
                                 max
                                 
                                    {
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          
                                             I
                                             r
                                          
                                       
                                    
                                    
                                       a
                                       i
                                    
                                    ;
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          
                                             I
                                             r
                                          
                                       
                                    
                                    
                                       b
                                       i
                                    
                                    }
                                 
                                 ·
                                 T
                                 
                                    (
                                    
                                       I
                                       r
                                    
                                    ,
                                    
                                       F
                                       r
                                    
                                    )
                                 
                                 ≤
                                 C
                                 .
                              
                           
                        
                     
                  

The maximum capacity utilization occurs either when the vehicle leaves or reaches the depot. Therefore, it suffices to simply compare the maximum of supply and demand accumulating during the trip time with the available capacity C.


                     Example: Consider the example data shown in Fig. 2 and an average driving speed 
                        
                           v
                           =
                           1
                        
                     . If a single vehicle 
                        
                           
                              F
                              r
                           
                           =
                           1
                        
                      was to supply all five customers on a single route 
                        
                           
                              I
                              1
                           
                           =
                           
                              {
                              0
                              ,
                              1
                              ,
                              2
                              ,
                              3
                              ,
                              4
                              ,
                              5
                              }
                           
                           ,
                        
                      this would take a total trip time of


                     
                        
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                          
                                          
                                          
                                          T
                                          (
                                          
                                             I
                                             1
                                          
                                          ,
                                          1
                                          )
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          =
                                          
                                             
                                                2
                                                ·
                                                
                                                   d
                                                   5
                                                
                                                ·
                                                
                                                   1
                                                   1
                                                
                                                +
                                                
                                                   t
                                                   0
                                                   a
                                                
                                                +
                                                
                                                   t
                                                   1
                                                   a
                                                
                                                +
                                                
                                                   t
                                                   2
                                                   a
                                                
                                                +
                                                
                                                   t
                                                   3
                                                   a
                                                
                                                +
                                                
                                                   t
                                                   4
                                                   a
                                                
                                                +
                                                
                                                   t
                                                   5
                                                   a
                                                
                                             
                                             
                                                1
                                                −
                                                (
                                                
                                                   (
                                                   
                                                      t
                                                      0
                                                      c
                                                   
                                                   +
                                                   
                                                      t
                                                      1
                                                      c
                                                   
                                                   )
                                                
                                                ·
                                                
                                                   (
                                                   
                                                      a
                                                      1
                                                   
                                                   +
                                                   
                                                      b
                                                      1
                                                   
                                                   )
                                                
                                                +
                                                
                                                   (
                                                   
                                                      t
                                                      0
                                                      c
                                                   
                                                   +
                                                   
                                                      t
                                                      2
                                                      c
                                                   
                                                   )
                                                
                                                ·
                                                
                                                   (
                                                   
                                                      a
                                                      2
                                                   
                                                   +
                                                   
                                                      b
                                                      2
                                                   
                                                   )
                                                
                                                +
                                                …
                                                +
                                                
                                                   (
                                                   
                                                      t
                                                      0
                                                      c
                                                   
                                                   +
                                                   
                                                      t
                                                      5
                                                      c
                                                   
                                                   )
                                                
                                                ·
                                                
                                                   (
                                                   
                                                      a
                                                      5
                                                   
                                                   +
                                                   
                                                      b
                                                      5
                                                   
                                                   )
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          =
                                          
                                             
                                                2
                                                ·
                                                170
                                                ·
                                                1
                                                +
                                                3
                                                +
                                                8
                                                +
                                                15
                                                +
                                                3
                                                +
                                                21
                                                +
                                                18
                                             
                                             
                                                1
                                                −
                                                (
                                                0.05
                                                ·
                                                3
                                                +
                                                0.08
                                                ·
                                                3.5
                                                +
                                                0.08
                                                ·
                                                1.5
                                                +
                                                0.05
                                                ·
                                                2
                                                +
                                                0.06
                                                ·
                                                1
                                                )
                                             
                                          
                                          =
                                          
                                             40800
                                             29
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

Consequently, the capacity of this vehicle cannot be less than

                        
                           
                              
                                 
                                    
                                       
                                          Γ
                                          (
                                          
                                             I
                                             1
                                          
                                          ,
                                          1
                                          )
                                       
                                    
                                    
                                       
                                          =
                                          max
                                          
                                             {
                                             
                                                a
                                                1
                                             
                                             
                                             +
                                             
                                             
                                                a
                                                2
                                             
                                             
                                             +
                                             
                                             
                                                a
                                                3
                                             
                                             
                                             +
                                             
                                             
                                                a
                                                4
                                             
                                             
                                             +
                                             
                                             
                                                a
                                                5
                                             
                                             ;
                                             
                                                b
                                                1
                                             
                                             
                                             +
                                             
                                             
                                                b
                                                2
                                             
                                             
                                             +
                                             
                                             
                                                b
                                                3
                                             
                                             
                                             +
                                             
                                             
                                                b
                                                4
                                             
                                             
                                             +
                                             
                                             
                                                b
                                                5
                                             
                                             }
                                          
                                          ·
                                          T
                                          
                                             (
                                             
                                                I
                                                1
                                             
                                             ,
                                             1
                                             )
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          =
                                          max
                                          
                                             {
                                             3
                                             +
                                             0.5
                                             +
                                             1
                                             +
                                             0
                                             +
                                             0
                                             ;
                                             0
                                             +
                                             3
                                             +
                                             0.5
                                             +
                                             2
                                             +
                                             1
                                             }
                                          
                                          ·
                                          
                                             40800
                                             29
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          =
                                          6.5
                                          ·
                                          
                                             40800
                                             29
                                          
                                          ≈
                                          9144.83
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

In summary, the CIRPL determines routes of vehicles, i.e., a set of customers visited by any vehicle applied, such that no vehicle’s capacity is exceeded and each customer is serviced by exactly one route, while pursuing some objective function. This generic problem formulation is differentiated according to the objective function and some routing restriction
                      as follows:

                        
                           •
                           On the one hand, it is a valid objective to minimize the vehicle fleet for serving all customers, so that either investment costs for novel vehicles can be reduced or already existing vehicles can be utilized for alternative transport requests. On the other hand, a smaller fleet enlarges the routes of vehicles, so that the waiting times both in the depot and at the customers increase. Thus, a cost model taking into account the sum of fixed cost, where a cost factor c
                              1 weights the number Fr
                               of vehicles utilized for each route 
                                 
                                    r
                                    =
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    ,
                                    R
                                    ,
                                 
                               and the inventory cost weighted with c
                              2, leads to the following objective function:

                                 
                                    (3)
                                    
                                       
                                          
                                             c
                                             1
                                          
                                          ·
                                          
                                             ∑
                                             
                                                r
                                                =
                                                1
                                             
                                             R
                                          
                                          
                                             F
                                             r
                                          
                                          +
                                          
                                             c
                                             2
                                          
                                          ·
                                          
                                             ∑
                                             
                                                r
                                                =
                                                1
                                             
                                             R
                                          
                                          
                                             T
                                             
                                                (
                                                
                                                   I
                                                   r
                                                
                                                ,
                                                
                                                   F
                                                   r
                                                
                                                )
                                             
                                             ·
                                             
                                                ∑
                                                
                                                   i
                                                   ∈
                                                   
                                                      I
                                                      r
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      a
                                                      i
                                                   
                                                   +
                                                   
                                                      b
                                                      i
                                                   
                                                
                                                
                                                   
                                                      F
                                                      r
                                                   
                                                   ·
                                                   2
                                                
                                             
                                          
                                          →
                                          m
                                          i
                                          n
                                          !
                                       
                                    
                                 
                              
                           

The first term in the objective function multiplies the total number of employed vehicles over all routes with the corresponding weighting factor c
                              1. The second term sums up the average number of items lying in stock over all customers, assuming that all demand is constant over time (similar to the classic EOQ model, see (Harris, 1990)), multiplied by weighting factor c
                              2. Note that if 
                                 
                                    
                                       c
                                       2
                                    
                                    =
                                    0
                                    ,
                                 
                               the only goal is to feasibly service all customers with as few vehicles as possible. We call this goal min. fleet. If both c
                              1 > 0 and c
                              2 > 0, we say min. cost.

With regard to the vehicle routes, two different routing policies are differentiated. On the one hand, the line segments served by different routes can be disjunct, which means, e.g., that a vehicle serving customers one and three also serves customer two. This policy is often applied for tow train routing because of the narrow driving lanes on the shop-floor, where parking trains exchanging bins at a station obstruct other vehicles. On the other hand, if overtaking is possible, e.g., in streams of sufficient width, overlapping line segments can be allowed.

Finally, the number of vehicles per route can be restricted to one, denoted as the single-vehicle policy (
                                 
                                    
                                       F
                                       r
                                    
                                    =
                                    1
                                    ,
                                    
                                    ∀
                                    r
                                    =
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    ,
                                    R
                                 
                              ), or a multi-vehicle policy can be applied, i.e., several vehicles can be used for one specific route (
                                 
                                    
                                       F
                                       r
                                    
                                    ≥
                                    1
                                    ,
                                    
                                    ∀
                                    r
                                    =
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    ,
                                    R
                                 
                              ).


                     Table 2 summarizes the complexity results and denotations for
                     
                      the different problem variants. Proofs and a detailed discussion of these results will follow in the next sections.

In this section, we will investigate the time complexity of single-vehicle CIRPL with disjunct lines segments as well as overlapping line segments. We will provide proofs of NP-hardness for the intractable problem versions and polynomial-time exact solution methods where possible.

In this section, we consider those problem settings where the line segments served by each vehicle do not overlap with another vehicles’s assigned area (i.e., disjunct line segments) and only one vehicle for each route will be used (i.e., single-vehicle-policy). Fig. 3 shows an example solution with two routes: One vehicle serves customers 1 and 2 and another route takes care of customers 3–5.

Without loss of generality we presuppose routes 
                           
                              r
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              R
                           
                         being sorted according to increasing trip length, so that non-overlapping line segments are ensured by the following condition:

                           
                              (4)
                              
                                 
                                    max
                                    
                                       {
                                       i
                                       ∈
                                       
                                          I
                                          r
                                       
                                       }
                                    
                                    <
                                    min
                                    
                                       {
                                       i
                                       ∈
                                       
                                          I
                                          
                                             r
                                             +
                                             1
                                          
                                       
                                       }
                                    
                                    ,
                                    
                                    ∀
                                    r
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    R
                                    −
                                    1
                                    .
                                 
                              
                           
                        
                     

We will now show that this problem is solvable in polynomial time for both objectives discussed and start with the minimization of the number of vehicles applied.

                           Theorem 1
                           
                              The CIRPL with disjunct lines segments operated under a single-vehicle-policy which minimizing the fleet size (denoted as DSF) is solvable in
                              
                                 
                                    O
                                    (
                                    n
                                    )
                                 
                               
                              time.
                           

DSF can be solved to optimality by a greedy algorithm, which iterates through the customers 
                                 
                                    i
                                    =
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    ,
                                    n
                                 
                               and extends the current vehicles’s route r by the current customer i (Ir
                               ≔ Ir
                               ∪ {i}) until its capacity would be exceeded. Then, an additional vehicle is required whose route 
                                 
                                    r
                                    +
                                    1
                                 
                               is initialized as 
                                 
                                    
                                       I
                                       
                                          r
                                          +
                                          1
                                       
                                    
                                    :
                                    =
                                    
                                       {
                                       i
                                       }
                                    
                                 
                               and so on. Clearly, loading a vehicle (of route r) already applied not to capacity would only increase the total item load to be handled by successive vehicles (of routes 
                                 
                                    
                                       r
                                       ′
                                    
                                    =
                                    r
                                    +
                                    1
                                    ,
                                    …
                                    ,
                                    R
                                 
                              ) and, thus, cannot reduce the fleet size. All n customers are evaluated exactly once and the sums of items to be processed by the current vehicle (required for determining trip length and capacity utilization) can successively be cumulated during the iterations, so that DSF is solvable in 
                                 
                                    O
                                    (
                                    n
                                    )
                                 
                               time and the proposition holds.□


                        Example (cont.): For the example data of Fig. 2 and a capacity of 
                           
                              C
                              =
                              2000
                           
                         
                        Fig. 4 visualizes the algorithm’s process. The bold faced arcs represent an optimal solution with two routes 
                           
                              r
                              =
                              1
                              ,
                              2
                           
                         where two vehicles serve customers 
                           
                              
                                 I
                                 1
                              
                              =
                              
                                 {
                                 1
                                 ,
                                 2
                                 ,
                                 3
                                 }
                              
                           
                         and 
                           
                              
                                 I
                                 2
                              
                              =
                              
                                 {
                                 4
                                 ,
                                 5
                                 }
                              
                              ,
                           
                         respectively.

                           Theorem 2
                           
                              The CIRPL with disjunct line segments operated under the single-vehicle-policy when minimizing total costs (denoted as DSC) is solvable in
                              
                                 
                                    O
                                    (
                                    
                                       n
                                       2
                                    
                                    )
                                 
                               
                              time.
                           

To prove this theorem we present a dynamic programming (DP) procedure, which subdivides the decision process into 
                                 
                                    n
                                    +
                                    1
                                 
                               stages, each stage containing only a single state representing customer 
                                 
                                    i
                                    =
                                    0
                                    ,
                                    …
                                    ,
                                    n
                                 
                              . A state i is connected by a transition to any other state j with j > i, such that each transition (i, j) represents a route r serving customers 
                                 
                                    
                                       I
                                       r
                                    
                                    =
                                    
                                       {
                                       i
                                       +
                                       1
                                       ,
                                       …
                                       ,
                                       j
                                       }
                                    
                                 
                              . Partial objective values ΔDSC
                              (Ir
                              ) associated with a transitions (i, j) are determined by:

                                 
                                    (5)
                                    
                                       
                                          
                                             Δ
                                             
                                                D
                                                S
                                                C
                                             
                                          
                                          
                                             (
                                             
                                                I
                                                r
                                             
                                             )
                                          
                                          =
                                          
                                             {
                                             
                                                
                                                   
                                                      
                                                         
                                                            c
                                                            1
                                                         
                                                         +
                                                         
                                                            c
                                                            2
                                                         
                                                         ·
                                                         T
                                                         
                                                            (
                                                            
                                                               I
                                                               r
                                                            
                                                            ,
                                                            1
                                                            )
                                                         
                                                         ·
                                                         
                                                            ∑
                                                            
                                                               l
                                                               ∈
                                                               
                                                                  I
                                                                  r
                                                               
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  a
                                                                  l
                                                               
                                                               +
                                                               
                                                                  b
                                                                  l
                                                               
                                                            
                                                            2
                                                         
                                                         ,
                                                      
                                                   
                                                   
                                                      
                                                         
                                                         if
                                                         
                                                         Γ
                                                         (
                                                         
                                                            I
                                                            r
                                                         
                                                         ,
                                                         1
                                                         )
                                                         ≤
                                                         C
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         ∞
                                                         ,
                                                      
                                                   
                                                   
                                                      
                                                         otherwise
                                                         
                                                         ,
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              where T(Ir
                              , 1) and Γ(Ir
                              , 1) are calculated by (1) and (2), respectively. Let Ψ(j) be the minimum routing cost for serving the first j customers and set 
                                 
                                    Ψ
                                    (
                                    0
                                    )
                                    =
                                    0
                                    ,
                                 
                               then DSC is solved by determining Ψ(n) with the following basic recursion formula:

                                 
                                    (6)
                                    
                                       
                                          Ψ
                                          
                                             (
                                             j
                                             )
                                          
                                          =
                                          
                                             min
                                             
                                                0
                                                ≤
                                                i
                                                ≤
                                                j
                                                −
                                                1
                                             
                                          
                                          
                                             {
                                             Ψ
                                             
                                                (
                                                i
                                                )
                                             
                                             +
                                             
                                                Δ
                                                
                                                   D
                                                   S
                                                   C
                                                
                                             
                                             
                                                (
                                                
                                                   {
                                                   i
                                                   +
                                                   1
                                                   ,
                                                   i
                                                   +
                                                   2
                                                   ,
                                                   …
                                                   ,
                                                   j
                                                   }
                                                
                                                )
                                             
                                             }
                                          
                                          ,
                                          
                                          ∀
                                          
                                          j
                                          =
                                          1
                                          ,
                                          2
                                          ,
                                          …
                                          ,
                                          n
                                          .
                                       
                                    
                                 
                              
                           

The optimal solution is now given along a path to target state n with minimal Ψ(n) and the optimal partition can be determined by a simple backward recovery. The number of transitions is bounded by n
                              2 and, again, the aforementioned forward scanning technique can be applied when calculating partial objective values ΔDSC
                              (Ir
                              ), so that the runtime is bounded by 
                                 
                                    O
                                    (
                                    
                                       n
                                       2
                                    
                                    )
                                 
                               time and the proposition holds.□


                        Example (cont.): For our example of Fig. 2, a vehicle capacity of 
                           
                              C
                              =
                              2000
                              ,
                           
                         and weighting factors 
                           
                              
                                 c
                                 1
                              
                              =
                              3500
                           
                         and 
                           
                              
                                 c
                                 2
                              
                              =
                              10
                           
                         the resulting DP-graph is depicted in Fig. 5. The bold faced optimal path represents a solution with three routes and total costs of 
                           
                              Ψ
                              (
                              5
                              )
                              =
                              24865.29
                           
                        .

In this section, we analyze those problem settings where line segments need not be disjunct, i.e., route segments may overlap such that, for example, one vehicle may serve customers 1 and 3 and another serves customers 2, 4, and 5 (i.e., condition (4) does not necessarily need to apply). Note that customers are still served by exactly one route each; however, customer locations need not be consecutive on each route. Fig. 6 shows such an example. We will now show that this problem is strongly NP-hard, even if only the fleet size is to be minimized.

                           Theorem 3
                           
                              The CIRPL with overlapping line segments operated under a single-vehicle-policy when minimizing the fleet size (denoted as OSF) is NP-hard in the strong sense.
                           

The proof applies a transformation from the 3-Partition problem, which is well known to be strongly NP-complete (see Garey & Johnson, 1979) and can be defined as follows: Given 3q positive integers gl
                               (
                                 
                                    l
                                    =
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    ,
                                    3
                                    q
                                 
                              ) and a positive integer B with B/4 < gl
                               < B/2 and 
                                 
                                    
                                       ∑
                                       
                                          l
                                          =
                                          1
                                       
                                       
                                          3
                                          q
                                       
                                    
                                    
                                       g
                                       l
                                    
                                    =
                                    q
                                    B
                                    ,
                                 
                               does there exist a partition of the set 
                                 
                                    {
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    ,
                                    3
                                    q
                                    }
                                 
                               into q sets 
                                 
                                    {
                                    
                                       G
                                       1
                                    
                                    ,
                                    
                                       G
                                       2
                                    
                                    ,
                                    …
                                    ,
                                    
                                       G
                                       q
                                    
                                    }
                                    ,
                                 
                               each having exactly three elements, such that 
                                 
                                    
                                       ∑
                                       
                                          l
                                          ∈
                                          
                                             G
                                             h
                                          
                                       
                                    
                                    
                                       g
                                       l
                                    
                                    =
                                    B
                                    ,
                                 
                              
                              
                                 
                                    ∀
                                    h
                                    =
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    ,
                                    q
                                 
                              ?

We reduce 3-Partition to OSF as follows. Consider q vehicles with capacity 
                                 
                                    C
                                    =
                                    2
                                    B
                                    +
                                    1
                                    ,
                                 
                               which serve two different sets of customers S
                              1 and S
                              2. The first set S
                              1 contains q customers each having distance 
                                 
                                    
                                       d
                                       i
                                    
                                    =
                                    
                                       1
                                       2
                                    
                                    B
                                 
                               to the depot and supply rate 
                                 
                                    
                                       a
                                       i
                                    
                                    =
                                    1
                                    +
                                    
                                       1
                                       B
                                    
                                    ,
                                 
                               while 
                                 
                                    
                                       b
                                       i
                                    
                                    =
                                    0
                                    ,
                                 
                               ∀i ∈ S
                              1. The second set S
                              2 contains 3q customers, which build the counterparts to the integer values of 3-Partition. Each of these customers has facultative distance 
                                 
                                    0
                                    ≤
                                    
                                       d
                                       i
                                    
                                    ≤
                                    
                                       1
                                       2
                                    
                                    B
                                 
                               to the depot and supply rate 
                                 
                                    
                                       a
                                       i
                                    
                                    =
                                    
                                       
                                          g
                                          i
                                       
                                       B
                                    
                                    ,
                                 
                               while 
                                 
                                    
                                       b
                                       i
                                    
                                    =
                                    0
                                    ,
                                 
                               ∀i ∈ S
                              2. Finally, let 
                                 
                                    
                                       t
                                       i
                                       a
                                    
                                    =
                                    
                                       t
                                       i
                                       c
                                    
                                    =
                                    0
                                 
                               ∀i ∈ {0} ∪ S
                              1 ∪ S
                              2 and 
                                 
                                    v
                                    =
                                    1
                                 
                              . The question we ask is whether a feasible solution with q vehicles can be found.

A feasible solution for an instance of 3-Partition can be transformed to a feasible solution of the corresponding OSF-instance in polynomial time by assigning each of the q vehicles one customer i ∈ S
                              1 of the first set. This customer has a distance of 
                                 
                                    
                                       d
                                       i
                                    
                                    =
                                    
                                       1
                                       2
                                    
                                    B
                                 
                               to the depot. Due to 
                                 
                                    
                                       t
                                       i
                                       a
                                    
                                    =
                                    
                                       t
                                       i
                                       c
                                    
                                    =
                                    0
                                    ,
                                 
                               ∀i ∈ 0 ∪ S
                              1 ∪ S
                              2 the total trip length is B time units. Thus, the total supply of the farthest customer is 
                                 
                                    B
                                    +
                                    1
                                 
                               and the remaining capacity of each vehicle is B. Due to the tour length of B all other customers of set two have a total supply of gi
                               items, ∀i ∈ S
                              2. Thus, each vehicle can be assigned the customers of set two corresponding to the integer values of 3-Partition without exceeding a vehicle’s capacity.

On the other hand, each feasible solution for any OSF-instance with q vehicles is also a feasible solution for 3-Partition. This holds true because any vehicle needs to be assigned to exactly one customer i ∈ S
                              1 of set one. Two or more of these customers per vehicle are impossible because during the travel time of B time units each of them creates a total supply of 
                                 
                                    B
                                    +
                                    1
                                    ,
                                 
                               so that inevitably the capacity 
                                 
                                    2
                                    B
                                    +
                                    1
                                 
                               would be exceeded. As there are q customers of set one, each of the q vehicles is assigned to one of these farthest customers. The remaining capacity of B units per vehicle is to be utilized by visiting exactly three customers because of the bounds on the integer values of 3-Partition, which will also load each vehicle to capacity since each customer of the second set will have a supply of exactly gi
                               items in the time it takes for a vehicles’s route. So, the corresponding 3-Partition solution can be generated by assigning all integer values representing the respective three customers of set two per vehicle of OSF to one set of 3-Partition, which completes the proof.□


                              The CIRPL with overlapping line segments operated under a single-vehicle-policy when minimizing the total cost (denoted as OSC) is NP-hard in the strong sense.
                           

This theorem directly follows from a transformation from OSF, which takes over all data and sets 
                                 
                                    
                                       c
                                       1
                                    
                                    =
                                    1
                                 
                               and 
                                 
                                    
                                       c
                                       2
                                    
                                    =
                                    0
                                 
                              .□

In this section, we will investigate the multi-vehicle CIRPL variants, providing proofs of NP-hardness for the intractable problem versions and polynomial-time exact solution methods where possible.

Now, we will analyze the CIRPL with disjunct line segments operated under a multi-vehicle policy, so that more than one vehicle can serve each route, i.e., Fr
                         ≥ 1. Recall that we assume that multiple vehicles serving the same route visit each customer in equidistant time intervals. We show that this problem setting remains solvable in polynomial time for both objectives.

                           Theorem 5
                           
                              The CIRPL with disjunct line segments operated under a multi-vehicle policy when minimizing the fleet size (denoted as DMF) is solvable in
                              
                                 
                                    O
                                    (
                                    
                                       n
                                       2
                                    
                                    )
                                 
                               
                              time.
                           

Unfortunately, we cannot apply the greedy procedure solving DSF any longer, because at each customer we have the alternative to either start a new route or to apply an additional vehicle. Thus, we have to adapt the DP procedure solving DSC; the only alteration required is that we have to calculate the minimum number of vehicles serving the route of a transition without stock-outs.

                           Proof
                           Adapting the DP approach from the proof of Theorem 2, let ΔDMF
                              (Ir
                              ) denote the minimum number of vehicles (with capacity C) that needs to be assigned to a route r to serve customers Ir
                               without stock-outs, calculated as


                              
                                 
                                    (7)
                                    
                                       
                                          
                                             
                                             
                                             
                                                
                                                   
                                                   
                                                   
                                                   
                                                   
                                                      Δ
                                                      
                                                         D
                                                         M
                                                         F
                                                      
                                                   
                                                   
                                                      (
                                                      
                                                         I
                                                         r
                                                      
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             
                                             
                                             
                                                
                                                   
                                                   
                                                   =
                                                   
                                                   
                                                      ⌈
                                                      
                                                      
                                                      
                                                         
                                                            
                                                               (
                                                               2
                                                               ·
                                                               
                                                                  d
                                                                  
                                                                     max
                                                                     {
                                                                     l
                                                                     ∈
                                                                     
                                                                        I
                                                                        r
                                                                     
                                                                     }
                                                                  
                                                               
                                                               ·
                                                               
                                                                  1
                                                                  v
                                                               
                                                               +
                                                               
                                                                  ∑
                                                                  
                                                                     l
                                                                     ∈
                                                                     
                                                                        I
                                                                        r
                                                                     
                                                                     ∪
                                                                     
                                                                        {
                                                                        0
                                                                        }
                                                                     
                                                                  
                                                               
                                                               
                                                                  t
                                                                  l
                                                                  a
                                                               
                                                               )
                                                            
                                                            ·
                                                            max
                                                            
                                                               {
                                                               
                                                                  ∑
                                                                  
                                                                     l
                                                                     ∈
                                                                     
                                                                        I
                                                                        r
                                                                     
                                                                  
                                                               
                                                               
                                                                  a
                                                                  l
                                                               
                                                               ;
                                                               
                                                                  ∑
                                                                  
                                                                     l
                                                                     ∈
                                                                     
                                                                        I
                                                                        r
                                                                     
                                                                  
                                                               
                                                               
                                                                  b
                                                                  l
                                                               
                                                               }
                                                            
                                                            +
                                                            
                                                               ∑
                                                               
                                                                  l
                                                                  ∈
                                                                  
                                                                     I
                                                                     r
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  (
                                                                  
                                                                     t
                                                                     0
                                                                     c
                                                                  
                                                                  +
                                                                  
                                                                     t
                                                                     l
                                                                     c
                                                                  
                                                                  )
                                                               
                                                               ·
                                                               
                                                                  (
                                                                  
                                                                     a
                                                                     l
                                                                  
                                                                  +
                                                                  
                                                                     b
                                                                     l
                                                                  
                                                                  )
                                                               
                                                            
                                                            ·
                                                            C
                                                         
                                                         C
                                                      
                                                      
                                                      
                                                      ⌉
                                                   
                                                   .
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

Given the formula for the partial objective value 
                                 
                                    
                                       Δ
                                       
                                          D
                                          M
                                          F
                                       
                                    
                                    
                                       (
                                       
                                          i
                                          +
                                          1
                                          ,
                                          …
                                          ,
                                          j
                                       
                                       )
                                    
                                 
                               associated with a transitions (i, j), we set ΨDMF
                              (0) to zero and apply the following Bellman recursion:

                                 
                                    (8)
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      Ψ
                                                      
                                                         D
                                                         M
                                                         F
                                                      
                                                   
                                                   
                                                      (
                                                      j
                                                      )
                                                   
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   
                                                      min
                                                      
                                                         0
                                                         ≤
                                                         i
                                                         ≤
                                                         j
                                                         −
                                                         1
                                                      
                                                   
                                                   
                                                      {
                                                      
                                                         Ψ
                                                         
                                                            D
                                                            M
                                                            F
                                                         
                                                      
                                                      
                                                         (
                                                         i
                                                         )
                                                      
                                                      +
                                                      
                                                         Δ
                                                         
                                                            D
                                                            M
                                                            F
                                                         
                                                      
                                                      
                                                         (
                                                         
                                                            {
                                                            i
                                                            +
                                                            1
                                                            ,
                                                            …
                                                            ,
                                                            j
                                                            }
                                                         
                                                         )
                                                      
                                                      }
                                                   
                                                   ,
                                                
                                             
                                          
                                          
                                             
                                             
                                             
                                                
                                                   ∀
                                                   
                                                   j
                                                   =
                                                   1
                                                   ,
                                                   2
                                                   ,
                                                   …
                                                   ,
                                                   n
                                                   .
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

This adaptation does not alter the runtime complexity of our DP, which is still bounded by 
                                 
                                    O
                                    (
                                    
                                       n
                                       2
                                    
                                    )
                                 
                               time. □


                        Example (cont.): Given our example of Fig. 2 and a vehicle capacity of 
                           
                              C
                              =
                              1000
                              ,
                           
                         the resulting DP-graph is depicted in Fig. 7. The bold faced optimal path represents a solution with a fleet size of three (
                           
                              Ψ
                              (
                              5
                              )
                              =
                              3
                           
                        ) where a single vehicle serves route 
                           
                              r
                              =
                              1
                           
                        
                         with 
                           
                              
                                 I
                                 1
                              
                              =
                              
                                 {
                                 1
                                 ,
                                 2
                                 }
                              
                           
                         and two vehicles share route 
                           
                              r
                              =
                              2
                           
                         with 
                           
                              
                                 I
                                 2
                              
                              =
                              
                                 {
                                 3
                                 ,
                                 4
                                 ,
                                 5
                                 }
                              
                           
                        .

                           Theorem 6
                           
                              The CIRPL with disjunct line segments operated under a multi-vehicle policy when minimizing total cost (denoted as DMC) is solvable in
                              
                                 
                                    O
                                    (
                                    
                                       n
                                       2
                                    
                                    )
                                 
                               
                              time.
                           

Total costs Z(Ir, Fr
                              ) of a route r servicing customer set Ir
                              , now, depend on the the number of vehicles Fr
                               applied, so that

                                 
                                    (9)
                                    
                                       
                                          Z
                                          
                                             (
                                             
                                                I
                                                r
                                             
                                             ,
                                             
                                                F
                                                r
                                             
                                             )
                                          
                                          =
                                          
                                             c
                                             1
                                          
                                          ·
                                          
                                             F
                                             r
                                          
                                          +
                                          
                                             c
                                             2
                                          
                                          ·
                                          T
                                          
                                             (
                                             
                                                I
                                                r
                                             
                                             ,
                                             
                                                F
                                                r
                                             
                                             )
                                          
                                          ·
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                
                                                   I
                                                   r
                                                
                                             
                                          
                                          
                                             
                                                
                                                   a
                                                   i
                                                
                                                +
                                                
                                                   b
                                                   i
                                                
                                             
                                             
                                                
                                                   F
                                                   r
                                                
                                                ·
                                                2
                                             
                                          
                                          .
                                       
                                    
                                 
                              
                           

By setting the derivative of Function (9) with respect to Fr
                               to zero, F
                              *(Ir
                              ), the (real-valued) optimal number of vehicles, can be calculated by:

                                 
                                    (10)
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      F
                                                      *
                                                   
                                                   
                                                      (
                                                      
                                                         I
                                                         r
                                                      
                                                      )
                                                   
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         i
                                                         ∈
                                                         
                                                            I
                                                            r
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         (
                                                         
                                                            t
                                                            0
                                                            c
                                                         
                                                         +
                                                         
                                                            t
                                                            i
                                                            c
                                                         
                                                         )
                                                      
                                                      ·
                                                      
                                                         (
                                                         
                                                            a
                                                            i
                                                         
                                                         +
                                                         
                                                            b
                                                            i
                                                         
                                                         )
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                             
                                             
                                                
                                                   +
                                                   
                                                      
                                                         
                                                            
                                                               c
                                                               2
                                                            
                                                            
                                                               2
                                                               ·
                                                               
                                                                  c
                                                                  1
                                                               
                                                            
                                                         
                                                         ·
                                                         
                                                            (
                                                            2
                                                            ·
                                                            
                                                               d
                                                               
                                                                  max
                                                                  {
                                                                  i
                                                                  ∈
                                                                  
                                                                     I
                                                                     r
                                                                  
                                                                  }
                                                               
                                                            
                                                            ·
                                                            
                                                               1
                                                               v
                                                            
                                                            +
                                                            
                                                               ∑
                                                               
                                                                  i
                                                                  ∈
                                                                  
                                                                     I
                                                                     r
                                                                  
                                                                  ∪
                                                                  
                                                                     {
                                                                     0
                                                                     }
                                                                  
                                                               
                                                            
                                                            
                                                               t
                                                               i
                                                               a
                                                            
                                                            )
                                                         
                                                         ·
                                                         
                                                            ∑
                                                            
                                                               i
                                                               ∈
                                                               
                                                                  I
                                                                  r
                                                               
                                                            
                                                         
                                                         
                                                            (
                                                            
                                                               a
                                                               i
                                                            
                                                            +
                                                            
                                                               b
                                                               i
                                                            
                                                            )
                                                         
                                                      
                                                   
                                                   .
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

Note that 
                                 
                                    
                                       
                                          ∂
                                          2
                                       
                                       
                                          ∂
                                          
                                             
                                                
                                                   F
                                                   r
                                                
                                             
                                             2
                                          
                                       
                                    
                                    Z
                                    
                                       (
                                       
                                          I
                                          r
                                       
                                       ,
                                       
                                          F
                                          *
                                       
                                       
                                          (
                                          
                                             I
                                             r
                                          
                                          )
                                       
                                       )
                                    
                                    >
                                    0
                                 
                               (for 
                                 
                                    
                                       
                                          c
                                          2
                                       
                                       
                                          c
                                          1
                                       
                                    
                                    >
                                    0
                                 
                              ), so that a minimum is found and route costs rise monotonically for fleet sizes greater than F
                              *(Ir
                              ). Unfortunately, F
                              *(Ir
                              ) will most probably not be an integer and the capacity constraint defined by (2) must be met, so that the integer-valued optimal fleet size 
                                 
                                    
                                       F
                                       +
                                    
                                    
                                       (
                                       
                                          I
                                          r
                                       
                                       )
                                    
                                 
                               is to be determined by:

                                 
                                    (11)
                                    
                                       
                                          
                                             F
                                             +
                                          
                                          
                                             (
                                             
                                                I
                                                r
                                             
                                             )
                                          
                                          =
                                          
                                             {
                                             
                                                
                                                   
                                                      
                                                         max
                                                         {
                                                         
                                                            ⌊
                                                            
                                                               F
                                                               *
                                                            
                                                            
                                                               (
                                                               
                                                                  I
                                                                  r
                                                               
                                                               )
                                                            
                                                            ⌋
                                                         
                                                         ;
                                                         
                                                            Δ
                                                            
                                                               D
                                                               M
                                                               F
                                                            
                                                         
                                                         
                                                            (
                                                            
                                                               I
                                                               r
                                                            
                                                            )
                                                         
                                                         }
                                                         ,
                                                      
                                                   
                                                   
                                                      
                                                         if
                                                         
                                                         Z
                                                         
                                                            (
                                                            
                                                               I
                                                               r
                                                            
                                                            ,
                                                            
                                                               ⌊
                                                               
                                                                  F
                                                                  *
                                                               
                                                               
                                                                  (
                                                                  
                                                                     I
                                                                     r
                                                                  
                                                                  )
                                                               
                                                               ⌋
                                                            
                                                            )
                                                         
                                                         ≤
                                                         Z
                                                         
                                                            (
                                                            
                                                               I
                                                               r
                                                            
                                                            ,
                                                            
                                                               ⌈
                                                               
                                                                  F
                                                                  *
                                                               
                                                               
                                                                  (
                                                                  
                                                                     I
                                                                     r
                                                                  
                                                                  )
                                                               
                                                               ⌉
                                                            
                                                            )
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         max
                                                         {
                                                         
                                                            ⌈
                                                            
                                                               F
                                                               *
                                                            
                                                            
                                                               (
                                                               
                                                                  I
                                                                  r
                                                               
                                                               )
                                                            
                                                            ⌉
                                                         
                                                         ;
                                                         
                                                            Δ
                                                            
                                                               D
                                                               M
                                                               F
                                                            
                                                         
                                                         
                                                            (
                                                            
                                                               I
                                                               r
                                                            
                                                            )
                                                         
                                                         }
                                                         ,
                                                      
                                                   
                                                   
                                                      otherwise
                                                   
                                                
                                             
                                          
                                          ,
                                       
                                    
                                 
                              where F
                              *(Ir
                              ) and ΔDMF
                              (Ir
                              ) are determined by (10) and (7), respectively.

Given the optimal fleet size, partial objective values ΔDMC
                              (Ir
                              ) for a transitions (i, j) associated with customer set 
                                 
                                    
                                       I
                                       r
                                    
                                    =
                                    
                                       i
                                       +
                                       1
                                       ,
                                       i
                                       +
                                       2
                                       ,
                                       …
                                       ,
                                       j
                                    
                                 
                               amount to:

                                 
                                    (12)
                                    
                                       
                                          
                                             Δ
                                             
                                                D
                                                M
                                                C
                                             
                                          
                                          
                                             (
                                             
                                                I
                                                r
                                             
                                             )
                                          
                                          =
                                          
                                             c
                                             1
                                          
                                          ·
                                          
                                             F
                                             +
                                          
                                          
                                             (
                                             
                                                I
                                                r
                                             
                                             )
                                          
                                          +
                                          
                                             c
                                             2
                                          
                                          ·
                                          T
                                          
                                             (
                                             
                                                I
                                                r
                                             
                                             ,
                                             
                                                F
                                                +
                                             
                                             
                                                (
                                                
                                                   I
                                                   r
                                                
                                                )
                                             
                                             )
                                          
                                          ·
                                          
                                             ∑
                                             
                                                l
                                                ∈
                                                
                                                   I
                                                   r
                                                
                                             
                                          
                                          
                                             
                                                
                                                   a
                                                   l
                                                
                                                +
                                                
                                                   b
                                                   l
                                                
                                             
                                             
                                                
                                                   F
                                                   +
                                                
                                                
                                                   (
                                                   
                                                      I
                                                      r
                                                   
                                                   )
                                                
                                                ·
                                                2
                                             
                                          
                                          .
                                       
                                    
                                 
                              
                           

Setting 
                                 
                                    
                                       Ψ
                                       
                                          D
                                          M
                                          C
                                       
                                    
                                    
                                       (
                                       0
                                       )
                                    
                                    =
                                    0
                                 
                               the objective value of final state ΨDMC
                              (n) can be calculated with Bellman recursion:

                                 
                                    (13)
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      Ψ
                                                      
                                                         D
                                                         M
                                                         C
                                                      
                                                   
                                                   
                                                      (
                                                      j
                                                      )
                                                   
                                                
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   
                                                      min
                                                      
                                                         0
                                                         ≤
                                                         i
                                                         ≤
                                                         j
                                                         −
                                                         1
                                                      
                                                   
                                                   
                                                      {
                                                      
                                                         Ψ
                                                         
                                                            D
                                                            M
                                                            C
                                                         
                                                      
                                                      
                                                         (
                                                         i
                                                         )
                                                      
                                                      +
                                                      
                                                         Δ
                                                         
                                                            D
                                                            M
                                                            C
                                                         
                                                      
                                                      
                                                         (
                                                         
                                                            {
                                                            i
                                                            +
                                                            1
                                                            ,
                                                            i
                                                            +
                                                            2
                                                            ,
                                                            …
                                                            ,
                                                            j
                                                            }
                                                         
                                                         )
                                                      
                                                      }
                                                   
                                                   ,
                                                
                                             
                                          
                                          
                                             
                                             
                                             
                                                
                                                   ∀
                                                   
                                                   j
                                                   =
                                                   1
                                                   ,
                                                   2
                                                   ,
                                                   …
                                                   ,
                                                   n
                                                   .
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

These alterations do not alter the runtime complexity of DP, so that our proposition holds.□


                        Example (cont.): For our example of Fig. 2, vehicle capacity 
                           
                              C
                              =
                              1000
                              ,
                           
                         and weighting factors 
                           
                              
                                 c
                                 1
                              
                              =
                              1000
                           
                         and 
                           
                              
                                 c
                                 2
                              
                              =
                              10
                           
                         the resulting DP-graph is depicted in Fig. 8. The bold faced optimal path represents a solution with six vehicles and total costs of 
                           
                              Ψ
                              (
                              5
                              )
                              =
                              10150.66
                           
                        . A single vehicle serves route 
                           
                              r
                              =
                              1
                           
                         with 
                           
                              
                                 I
                                 1
                              
                              =
                              
                                 {
                                 1
                                 }
                              
                           
                         and five vehicles share route 
                           
                              r
                              =
                              2
                           
                         with 
                           
                              
                                 I
                                 2
                              
                              =
                              
                                 {
                                 2
                                 ,
                                 3
                                 ,
                                 4
                                 ,
                                 5
                                 }
                              
                           
                        .

Finally, we analyze those versions of CIRPL with overlapping line segments operated under a multi-vehicle-policy. Thus, customers may facultatively be assigned to routes, which can be serviced by more than one vehicle, i.e., Fr
                         ≥ 1. Both problem versions of this category are shown to be strongly NP-hard.

                           Theorem 7
                           
                              CIRPL with overlapping line segments operated under a multi-vehicle policy when minimizing the fleet size (denoted as OMF) is strongly NP-hard.
                           

Analogous to the proof for OSF (Theorem 3), our transformation is from the 3-Partition problem. We consider q vehicles with capacity 
                                 
                                    C
                                    =
                                    2
                                    B
                                    +
                                    2
                                    ,
                                 
                               which serve two different sets of customers: S
                              1 and S
                              2. The first set S
                              1 contains q customers each having distance 
                                 
                                    
                                       d
                                       i
                                    
                                    =
                                    
                                       1
                                       2
                                    
                                    B
                                 
                               to the depot, supply rate 
                                 
                                    
                                       a
                                       i
                                    
                                    =
                                    1
                                    ,
                                 
                               demand rate 
                                 
                                    
                                       b
                                       i
                                    
                                    =
                                    0
                                    ,
                                 
                               and arrival time 
                                 
                                    
                                       t
                                       i
                                       a
                                    
                                    =
                                    B
                                    ,
                                 
                               ∀i ∈ S
                              1. The second set S
                              2 contains 3q customers, which are the counterparts to the integer values of 3-Partition. Each of these customers has facultative distance 
                                 
                                    0
                                    ≤
                                    
                                       d
                                       i
                                    
                                    ≤
                                    
                                       1
                                       2
                                    
                                    B
                                 
                               to the depot, supply rate 
                                 
                                    
                                       a
                                       i
                                    
                                    =
                                    
                                       
                                          g
                                          i
                                       
                                       
                                          B
                                          2
                                       
                                    
                                    ,
                                 
                               and demand rate 
                                 
                                    
                                       b
                                       i
                                    
                                    =
                                    0
                                    ,
                                 
                               ∀i ∈ S
                              2. Finally, let 
                                 
                                    
                                       t
                                       i
                                       a
                                    
                                    =
                                    0
                                    ,
                                 
                               ∀i ∈ {0} ∪ S
                              2, 
                                 
                                    
                                       t
                                       i
                                       c
                                    
                                    =
                                    0
                                    ,
                                 
                               ∀i ∈ {0} ∪ S
                              1 ∪ S
                              2, and 
                                 
                                    v
                                    =
                                    1
                                 
                              . The question we ask is whether a feasible solution with q vehicles can be found.

Again, it is not possible that more than one customer of S
                              1 is assigned to a single vehicle that serves a route by itself, since the supply accumulating during the total trip time would exceed the vehicle’s capacity. Furthermore, it is not possible that Φ > 1 vehicles jointly share a route that serves Φ customers of S
                              1, because Φ vehicles require a capacity of 
                                 
                                    
                                       (
                                       Φ
                                       B
                                       +
                                       B
                                       )
                                    
                                    ·
                                    
                                       
                                          Φ
                                          ·
                                          1
                                       
                                       Φ
                                    
                                 
                              . The first term, i.e., 
                                 
                                    
                                       (
                                       Φ
                                       B
                                       +
                                       B
                                       )
                                    
                                    ,
                                 
                               defines the total trip time, because Φ customers have to be visited, which takes 
                                 
                                    
                                       t
                                       i
                                       a
                                    
                                    =
                                    B
                                 
                               time units each, plus the way to and from S
                              1. The second term, i.e., 
                                 
                                    
                                       
                                          Φ
                                          ·
                                          1
                                       
                                       Φ
                                    
                                    ,
                                 
                               defines the supply per time unit, because Φ customers of S
                              1 with a supply rate of 1 are jointly served by Φ vehicles. Since 
                                 
                                    
                                       (
                                       Φ
                                       B
                                       +
                                       B
                                       )
                                    
                                    ·
                                    
                                       
                                          Φ
                                          ·
                                          1
                                       
                                       Φ
                                    
                                    =
                                    
                                       (
                                       Φ
                                       +
                                       1
                                       )
                                    
                                    ·
                                    B
                                    ,
                                 
                               the vehicle capacity of C is exceeded for any Φ ≥ 2. This leads to a situation analogously to that of our previous proof for OSF. Again any of the q feeder is assigned exactly one customer i ∈ S
                              1. The remaining capacity of 2 capacity units is to be filled with items for the customers of set S
                              2, i.e., the counterparts to the integer values of 3-Partition. The remaining capacity is exactly sufficient to load 
                                 
                                    2
                                    ·
                                    B
                                    ·
                                    
                                       B
                                       
                                          B
                                          2
                                       
                                    
                                    =
                                    2
                                    ,
                                 
                               because 
                                 
                                    B
                                    
                                       B
                                       2
                                    
                                 
                               items accumulate during a trip time of 2B for any subset of customers representing a subset of 3-Partition with sum B.□


                              CIRPL with overlapping line segments operated under a multi-vehicle policy when minimizing the total cost (denoted as OMC) is strongly NP-hard.
                           

This proposition directly follows from a transformation from OMF, which takes over any data and sets 
                                 
                                    
                                       c
                                       1
                                    
                                    =
                                    1
                                 
                               and 
                                 
                                    
                                       c
                                       2
                                    
                                    =
                                    0
                                 
                              .□

In this section, we present exact solution procedures for those problem versions our complexity analysis showed to be strongly NP-hard, which are all those where routes are allowed to overlap, i.e., OSF, OSC, OMF, and OMC. First, we have tested an off-the-shelf solver, namely FICO-XPress (version 23.01.06), solving MIP models of CIRPL, which are specified in Appendix A. However, the standard solver did not return optimal solutions (in a given time frame of 1800 s) even if only nine customers are considered. As our computational results will show, even a brute-force procedure enumerating all customer sequences is able to solve larger instances. Therefore, we do not treat MIP models in greater detail and only refer to Appendix A. Instead, two alternative exact procedures are briefly specified. Both of them rely on the calculation of partial objective values ΔP
                     (Ir
                     ) per route r serving customer set Ir
                     , whose determination depends on the specific problem setting treated, i.e., P ∈ {OSF, OSC, OMF, OMC}:

                        
                           •
                           
                              OSF: When minimizing the fleet size under a single-vehicle policy, each route is either assigned value 1 or ∞ depending on whether or not the capacity is sufficient:

                                 
                                    (14)
                                    
                                       
                                          
                                             Δ
                                             
                                                O
                                                S
                                                F
                                             
                                          
                                          
                                             (
                                             
                                                I
                                                r
                                             
                                             )
                                          
                                          =
                                          
                                             {
                                             
                                                
                                                   
                                                      
                                                         1
                                                         ,
                                                      
                                                   
                                                   
                                                      
                                                         
                                                         if
                                                         
                                                         Γ
                                                         (
                                                         
                                                            I
                                                            r
                                                         
                                                         ,
                                                         1
                                                         )
                                                         ≤
                                                         C
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         ∞
                                                         ,
                                                      
                                                   
                                                   
                                                      
                                                         otherwise
                                                         
                                                         ,
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              with Γ(Ir
                              , 1) being determined according to (2).


                              OSC: When minimizing total costs under a single-vehicle policy, partial objective value ΔOSC
                              (Ir
                              ) can be determined by (5).


                              OMF: When minimizing the fleet size under a multi-vehicle policy, partial objective value ΔOMF
                              (Ir
                              ) can be determined by (7).


                              OMC: When minimizing costs under a multi-vehicle policy, partial objective value ΔOMC
                              (Ir
                              ) can be determined according to (12).

Given the partial objective values of routes, a straightforward solution approach is to generate all sequences of customers (i.e., up to n!) by re-indexing them and to, then, evaluate all of these sequences with the respective counterpart procedure for the disjunct case. We denote this procedure as the brute-force approach, which suffers from the huge amount a different customer sequences.

A more promising approach is, thus, a DP procedure, which applies the basic DP structure for sequencing problems introduced by Held and Karp (1962). Consider states (ι), where 
                        
                           ι
                           ⊆
                           {
                           1
                           ,
                           …
                           ,
                           n
                           }
                        
                      is the set of customers that have already been serviced by some route. Beginning with initial state (∅), a transition from state (ι) to state (ι′) means that customers ι′∖ι are assigned to a new route, where ι′∖ι ≠ ∅ must hold, so that each new route serves at least a single customer.

Let G(ι′) be the (partial) optimal objective value to serve customers ι′ and let G(∅) be zero. Then G(ι′) can be calculated recursively by the following Bellman equation

                        
                           (15)
                           
                              
                                 G
                                 
                                    (
                                    
                                       ι
                                       ′
                                    
                                    )
                                 
                                 =
                                 
                                    min
                                    
                                       ι
                                       ⊂
                                       
                                          ι
                                          ′
                                       
                                    
                                 
                                 
                                    {
                                    G
                                    
                                       (
                                       ι
                                       )
                                    
                                    +
                                    
                                       Δ
                                       P
                                    
                                    
                                       (
                                       
                                          ι
                                          ′
                                       
                                       ∖
                                       ι
                                       )
                                    
                                    }
                                 
                                 ,
                                 
                                 ∀
                                 
                                 
                                    ι
                                    ′
                                 
                                 ⊆
                                 I
                                 .
                              
                           
                        
                     
                  

The optimal solution can simply be recovered by a backwards recovery along the optimal path. The runtime complexity of DP is in 
                        
                           2
                           
                              O
                              (
                              n
                              )
                           
                        
                      time, which is an improvement over our brute-force approach, but still probably not good enough to solve instances of large size. The development of efficient heuristic solution procedures, thus, seems a valuable task for future research. However, often real-world instances of our CIRPL turn out to be not that large (see Section 6.1), and since our intention is to compare the restrictiveness of the different routing policies (not diluted by heuristic gaps), we restrict ourselves to exact solution approaches (to not overload the paper).


                     Example (cont.): For the example data of Fig. 2, a capacity of 
                        
                           C
                           =
                           1000
                           ,
                        
                      and weighting factors 
                        
                           
                              c
                              1
                           
                           =
                           5000
                        
                      and 
                        
                           
                              c
                              2
                           
                           =
                           10
                           ,
                        
                      
                     Fig. 9 visualizes the DP graph when minimizing cost
                      under a single-vehicle policy, i.e., OSC. The bold faced arcs represent an optimal solution with three routes 
                        
                           r
                           =
                           1
                           ,
                           2
                           ,
                           3
                        
                      and total costs of 
                        
                           G
                           
                              (
                              {
                              1
                              ,
                              2
                              ,
                              3
                              ,
                              4
                              ,
                              5
                              }
                              )
                           
                           =
                           30081.5
                        
                     . Three vehicles serve customers 
                        
                           
                              I
                              1
                           
                           =
                           
                              {
                              1
                              ,
                              2
                              }
                           
                           ,
                        
                     
                     
                        
                           
                              I
                              2
                           
                           =
                           
                              {
                              3
                              ,
                              5
                              }
                           
                        
                      and 
                        
                           
                              I
                              3
                           
                           =
                           
                              {
                              4
                              }
                           
                           ,
                        
                      respectively.

Note that the performance of DP can be increased by caching partial objective values whenever symmetric solutions occur, e.g., 
                        
                           G
                           
                              (
                              {
                              1
                              ,
                              2
                              }
                              )
                           
                           =
                           G
                           
                              (
                              {
                              1
                              }
                              )
                           
                           +
                           
                              Δ
                              
                                 O
                                 C
                                 S
                              
                           
                           
                              (
                              {
                              2
                              }
                              )
                           
                           =
                           
                              Δ
                              
                                 O
                                 C
                                 S
                              
                           
                           
                              (
                              {
                              1
                              }
                              )
                           
                           +
                           
                              Δ
                              
                                 O
                                 C
                                 S
                              
                           
                           
                              (
                              {
                              2
                              }
                              )
                           
                           =
                           G
                           
                              (
                              {
                              2
                              }
                              )
                           
                           +
                           
                              Δ
                              
                                 O
                                 C
                                 S
                              
                           
                           
                              (
                              {
                              1
                              }
                              )
                           
                        
                     .

Our computational study, first, investigates the computational performance of our algorithms. Specifically, we investigate up to which number of customers DP is able to solve the NP-hard problem cases. Furthermore, we investigate the impact of the problem parameters (e.g., vehicle capacity) on the objective values in a sensitivity analysis. The primary focus of our computational study, however, is on the restrictiveness of the different routing policies. This way managerial insight is generated whether the gains of overlapping routes can outweigh the easier control of a disjunct policy or if allowing multiple ships per route considerably decreases the fleet size and/or total costs. There exists no established testbed for CIRPL, so that we, first of all, elaborate on how we have generated our test instances.

For our tests, our solution procedures have been coded in C#.NET and run on a x64 PC with an Intel Core 2 Quad 2.83 GHz CPU and 8GB of RAM.

Our two applications of CIRPL, i.e., feeder and tow train routing, greatly vary in their parameters. While a route of a feeder may take several days, a tow train typically returns to its JIT-supermarket (depot) any half an hour. Therefore, we have generated different datasets for both applications. To briefly refer to both applications (and their respective datasets) we abbreviate them as LINER and TOW.

To explore the algorithmic performance of our exact solution procedures when solving our NP-hard problem versions we have generate two instance sets, which vary between 7 and 20 customers. To derive the distances of the satellite ports in the LINER case, we apply the example of hub Rotterdam with its satellite ports located along river Rhine. If an instance has n customers, then we apply the distances of the first n ports along the Rhine according to Table 8 in Appendix B. In the TOW case, we assume a fixed distance of 50 meters between assembly stations (customers), so that distance di
                         is set to 
                           
                              
                                 d
                                 i
                              
                              =
                              i
                              ·
                              50
                              ,
                              ∀
                              i
                              =
                              0
                              ,
                              …
                              ,
                              n
                           
                        . Note that, in real-world factories, not every station is supplied by tow trains. Other means of conveyance, e.g., conveyor belts, are applied as well, so that 50 meters do not equal the length of a station, but only the distance between stations supplied by tow train. We presuppose one hour (one second) as the basic time unit and one a kilometer (one meter) as the basic length unit for LINER (TOW). For LINER, we assume the time span for loading and unloading a single container to be constant at each port i. Specifically, we set 
                           
                              
                                 t
                                 i
                                 c
                              
                              =
                              0.0
                              
                                 3
                                 ¯
                              
                              ,
                           
                         which is equivalent to a typical loading time by crane of two minutes (e.g., Boysen, Fliedner, Jaehn, & Pesch, 2013). For TOW, we set the loading and unloading time at each station to ten seconds per bin, i.e. 
                           
                              
                                 t
                                 i
                                 c
                              
                              =
                              10
                              ,
                              ∀
                              i
                              =
                              1
                              ,
                              …
                              ,
                              n
                              ,
                           
                         and to 30 seconds at the supermarket (
                           
                              
                                 t
                                 0
                                 c
                              
                              =
                              30
                           
                        ). We also assume a constant arrival and departure time of tow trains per station and supermarket, i.e., 
                           
                              
                                 t
                                 i
                                 a
                              
                              =
                              30
                              ,
                              ∀
                              i
                              =
                              0
                              ,
                              …
                              ,
                              n
                           
                        . Note that for TOW we assume that 
                           
                              
                                 a
                                 i
                              
                              =
                              
                                 b
                                 i
                              
                              ,
                              ∀
                              i
                              =
                              1
                              ,
                              …
                              ,
                              n
                              ,
                           
                         because each empty bin is replaced with a new one at a station. All other problem parameters are randomly drawn (with equal probability) from the intervals defined in Table 3. For the first test, 10 basic instances are randomly determined and combined with 
                           
                              n
                              =
                              7
                              ,
                              8
                              ,
                              …
                              ,
                              20
                           
                         customers, so that in total 
                           
                              10
                              ·
                              14
                              =
                              140
                           
                         instances have been obtained for each application.

For our sensitivity analysis, we fix the number of customers to 
                           
                              n
                              =
                              18
                           
                         and generate 10 basic instances as is defined above. Only the respective parameter, whose impact on the objective values is currently examined, is chosen according to the values of Table 4. In each basic instance, the respective parameter is replaced with the six values of Table 4. In total, we have six parameters to be analyzed, so that 
                           
                              10
                              ·
                              6
                              ·
                              6
                              =
                              360
                           
                         instances have been obtained for each application.

First, we investigate the performance of our solution algorithms. As the solution time of the polynomial cases is uncritical, we only detail the results of the NP-hard cases. Fig. 10
                         relates the average solution time (measured in CPU-seconds) of our two exact solution procedures, namely brute force and DP, with the number of customers n. We only report the results for problem setting OMC, because it requires the most time consuming calculations of the partial objective values (see Section 5). For the other three NP-hard cases, i.e., OSF, OSC, and OMF, the calculations are slightly simpler, which, however, does not considerably impact the runtime; their graphs are nearly identical.


                        Fig. 10 reveals that DP considerably outperforms our brute force approach. The latter is able to solve instances up to 11 customers within our given time frame of 1800 CPU-seconds. Note that this result is even better than that of default solver XPress solving the mixed-integer formulations specified in Appendix A. XPress did not return solutions with 
                           
                              n
                              =
                              9
                           
                         in our given time frame. DP is able to solve instances with up to 
                           
                              n
                              =
                              20
                           
                         customers before reaching the timeout. These results do not deviate between our two applications. We, thus, apply DP for all following tests.

Next, we address the sensitivity analysis and relate the parameters applied during instance generation (see Section 6.1) to the results of our two objective functions, i.e., fleet size (F) and total costs (C). This way, the impact of the parameters and the restrictiveness of the routing policies, i.e., disjunct (D) vs. overlapping (O) routes and single (S) vs. multiple (M) vehicles per route, is investigated. The results are summarized in Fig. 11
                        , where the left (right) two columns address the LINER (TOW) application. Firsthand, it can be concluded that the graphs do not considerably vary between both applications. As the parameters applied in both applications considerably deviate, this result indicates that our sensitivity analysis is quite stable and does not depend on a specific parameter setting. For the specific parameters the following conclusions can be drawn:

                           
                              (a)
                              Increasing the speed v of the vehicles reduces both the fleet size and the total costs. A faster vehicle reduces the trip time, so that less inventory accumulates between two successive visits at each customer. However, the positive impact quickly diminishes. For instance, increasing the tow train velocity from 0.5 meter per second to 1.5 meter per second leads to an average reduction (over all policies) of the fleet size of about 40 percent, whereas any further acceleration has only a rather negligible impact.

The vehicles’ capacity C impacts the objective values in an analogous manner. Larger capacities increase the flexibility of route design and, therefore, reduce the fleet size and total costs. Again, this positive impact quickly diminishes the larger the capacity becomes.


                                 Fig. 11(c) depicts the impact of varying weighting factors on total costs. It is not astounding to see that increasing the weighting factors c
                                 1 and c
                                 2 for the fixed costs of the vehicle fleet and the inventory costs, respectively, lead to higher total costs. However, it is interesting to see that the gap between the two single-vehicle policies (DSC and OSC) on the one hand and the multi-vehicle policies (DMC and OMC) on the other hand widens with increasing c
                                 2 (see columns 2 and 4). Allowing multiple vehicles to jointly serve a route enables more frequent customer visits, so that less inventory accumulates. Obviously, this possibility becomes the more appealing the higher weighting factor c
                                 2 for the inventory costs.

Regarding the weighting factors for the fleet size, the opposite trend is noticeable. The higher the fixed costs c
                                 1 for a vehicle the higher the pressure to reduce the fleet size. Since all customers still need to be served, this reduction cannot go beyond a certain minimum level, which explains the decreasing slope. Increasing inventory costs c
                                 2 induces more frequent customer visits, which can only be realized by a larger fleet. Again, the larger flexibility of the multi-vehicle policies (DMF and OMF) leads to a widening gap compared to the single-vehicle policies (DSF and OSF) with an increasing weighting factor c
                                 2.

The higher the supply rates ai
                                  and the demand rates bi
                                  the more inventory accumulates per time unit, which directly enlarges inventory costs, but also indirectly impacts the fleet size. The increasing number of items to be moved necessitates additional vehicles. Compared to the single-vehicle policies, allowing multiple vehicles sharing routes enables a more flexible reaction on such a development by increasing the frequencies of customer visits. Note that given a single-vehicle policy the maximum fleet size equals the number of customers n, meaning that each customer is served in a separate route. This explains the sharp bend of the graphs in column 3.

Finally, less variation of the supply and demand rates ai
                                  and bi
                                  among customers (moderately) reduces the objective values. Plenty variation especially hinders the disjunct policies to load (at least some) vehicles to capacity. Multiple vehicles, however, increase the flexibility and, thus, lead to considerably lower total costs.

With regard to the restrictiveness of the routing policies the results summarized over all test instances are listed in Table 5
                        . Here, the average objective value and the average relative deviation to the best policy is reported for any problem setting and application. Comparing the results of both applications, i.e., LINER and TOW, it can be concluded that although the total costs in absolute terms differ significantly, the relative deviations among the policies are very similar. This result, again, suggests that our findings generally hold for a wide range of parameter settings.

Furthermore, it is not astounding to see that allowing multiple vehicles to jointly serve overlapping routes (i.e., OMC and OMF) leads to much better solution values than the most restrictive combination with disjunct routes served under a single-vehicle policy (i.e., DSC and DSF). Astounding, however, is the considerably different impact of both restrictions. While disjunct routes, e.g., introduced to avoid vehicle obstructions in narrow streams or driving lanes, seem mostly unproblematic, allowing multiple ships per route considerably improves both objectives. For instance, the average relative deviation of the total costs in the LINER case between the best policy OMC and policy DMC amounts to merely 2.8 percent. Policy OSC, however, leads to considerable gap of 68.3 percent, which is only slightly superior to the most restrictive policy DSC with 80.4 percent. Multiple vehicles render more frequent customer visits possible, which effectively reduces inventory costs. This is especially advantageous if inventory costs are high in relation to the fixed costs per vehicle. If, however, the latter are predominant, then no such clear distinction exists. Consider, for instance, the fleet size objective of the LINER case. Here, policies DMF and OSF have a comparable average gap to best policy OMF of 7.0 percent and 7.3 percent. Both are considerably better than most restrictive policy DSF with a remarkable gap of 35.6 percent. Thus, if total costs are mainly driven by the fleet size, a careful evaluation of both restrictions seems recommendable.

The most striking result is perhaps the small gap between disjunct and overlapping routes. CIRPL with disjunct routes can be quickly solved in polynomial time and finds solutions only slightly inferior to the overlapping-routes policy. Thus, even if a solution for the latter case is sought, solving CIRPL with disjunct routes delivers good upper bound solutions. From such a promising starting point, already fairly simple heuristics, e.g., simple local search mechanisms, may lead to very good heuristic results in the overlapping case. To confirm this conjecture Table 6
                         summarizes the optimality gaps (from the optimal solutions for overlapping routes) for two simple approaches: First, we report the gaps of the solutions gained under disjunct routes. This solution is, then, applied as the start heuristic for a straightforward first-improvement 2-opt local search heuristic. Here, we swap customers served by different routes and realize any swap decreasing the objective value (first improvement), until no further improving swap is available. The results show that the already fairly low gaps of the disjunct routes can be further decreased by 2-opt, so that they are well in the single-digit range on average. Even the maximum gaps seem acceptable given such a simple heuristic approach. This way, efficient heuristics can be derived in a fairly simple manner, whose computational time is barely measurable and, thus, not reported in Table 6.

@&#CONCLUSION@&#

This paper is dedicated to the cyclic inventory routing problem on the line (dubbed CIRPL). The (traditional) inventory routing problem (IRP) trades off inventory costs with transportation costs when delivering items from a single depot to multiple customers at varying delivery frequencies. We extend the basic IRP setting by two peculiarities: (i) each vehicle (once returning to the depot) instantaneously repeats its dedicated route in a cyclic manner and (ii) all customers are located along a line. Especially, the latter characteristic, which, for instance, occurs in liner shipping along a stream or in part supply settings along assembly lines, allows us to identify polynomial solvable subproblems of CIRPL. In a thorough complexity analysis, we delimit theses polynomial solvable subproblems from the NP-hard cases. For the latter, we suggest an exact dynamic programming approach, which flexibly solves all NP-hard problem versions. The key finding of our computational study is that a single-vehicle policy, which applies only a single vehicle per route (compared to multiple ones sharing each cyclic route) is a very costly policy, which considerably enlarges the vehicle fleet and total costs. Disjunct routes, on the other hand, which restrict each vehicle to only serving customers that directly succeed each other along the line, hardly deteriorate the results of overlapping routes. Our findings with regard to the restrictiveness of the routing policies should impact the considerations of practitioners and operations researchers alike:

                        
                           •
                           Multiple vehicles per route allow increasing the delivery frequency at each customer and can, hence, considerably reduce inventory costs. Thus, especially if inventory costs are high, a single-vehicle policy, while having the benefit of always clearly identifying the culprit of a stock-out, is a costly procedure.

Disjunct routes are mostly unproblematic. Thus, if clearly separated routes relieve the traffic situation, e.g., in narrow streams or driving lanes, then they can be realized without a considerable increase of total costs. Only if costs are predominantly driven by the vehicle fleet, a critical assessment of the disjunct-routes policy seems recommendable.

Solving CIRPL with disjunct routes is possible in polynomial time and delivers solutions only slightly inferior to the overlapping-routes policy. Thus, even if a solution for the latter case is sought, solving CIRPL with disjunct routes delivers a good upper bound solution. For an algorithm designer having to find even better solutions for the overlapping cases, this might be a good starting point, e.g., for a local search mechanism.

Future research should design high-performance heuristic procedures for efficiently solving larger instances of CIRPL. An important extension of our problem setting are the integration of stochastic probability distributions to account for the uncertainty of customer demands. Finally, the (non-cyclic) inventory routing problem in a line-shaped network may also be interesting to investigate in a more short-term context, where exact demands are available and transportation costs play a more prominent role.

This section presents a mixed-integer model for problem version OMC, i.e., overlapping routes are served by multiple vehicles per route and total costs are minimized (see Section 4.2). Then, we briefly specify how to adapt the model to all other problem versions of CIRPL. Applying the notation summarized in Table 7
                      the mixed-integer program for OMC (dubbed CIRPL-OMC) consists of objective function (16) and constraints (17) to (25):

                        
                           (16)
                           
                              
                                 
                                    
                                       
                                          R
                                          P
                                          L
                                          −
                                          O
                                          M
                                          C
                                          :
                                          a
                                          CIRPL
                                          −
                                          OMC
                                          :
                                          Minimize
                                          
                                          Z
                                          =
                                          
                                             c
                                             1
                                          
                                          ·
                                          
                                             ∑
                                             
                                                k
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             
                                                ∑
                                                
                                                   l
                                                   =
                                                   1
                                                
                                                μ
                                             
                                             
                                                
                                                   z
                                                   
                                                      k
                                                      l
                                                   
                                                
                                                ·
                                                l
                                             
                                          
                                          +
                                          
                                             c
                                             2
                                          
                                          ·
                                          
                                             ∑
                                             
                                                k
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                n
                                             
                                             
                                                
                                                   
                                                      w
                                                      
                                                         k
                                                         i
                                                      
                                                   
                                                   +
                                                   
                                                      y
                                                      
                                                         k
                                                         i
                                                      
                                                   
                                                
                                                2
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     subject to

                        
                           (17)
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             
                                                k
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             x
                                             
                                                k
                                                i
                                             
                                          
                                          =
                                          1
                                          
                                       
                                    
                                    
                                       
                                          ∀
                                          
                                          i
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (18)
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             
                                                l
                                                =
                                                0
                                             
                                             μ
                                          
                                          
                                             z
                                             
                                                k
                                                i
                                             
                                          
                                          =
                                          1
                                          
                                       
                                    
                                    
                                       
                                          ∀
                                          
                                          k
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (19)
                           
                              
                                 
                                    
                                       
                                          
                                             u
                                             k
                                          
                                          ≥
                                          2
                                          ·
                                          
                                             d
                                             i
                                          
                                          ·
                                          
                                             x
                                             
                                                k
                                                i
                                             
                                          
                                          
                                       
                                    
                                    
                                       
                                          ∀
                                          
                                          k
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                          ;
                                          
                                          i
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (20)
                           
                              
                                 
                                    
                                       
                                          v
                                          k
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          
                                             
                                                u
                                                k
                                             
                                             v
                                          
                                          +
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             
                                                (
                                                
                                                   t
                                                   0
                                                   c
                                                
                                                +
                                                
                                                   t
                                                   i
                                                   c
                                                
                                                )
                                             
                                             ·
                                             
                                                (
                                                
                                                   w
                                                   
                                                      k
                                                      i
                                                   
                                                
                                                +
                                                
                                                   y
                                                   
                                                      k
                                                      i
                                                   
                                                
                                                )
                                             
                                          
                                          +
                                          
                                             (
                                             1
                                             −
                                             
                                                z
                                                
                                                   k
                                                   ,
                                                   0
                                                
                                             
                                             )
                                          
                                          ·
                                          
                                             t
                                             0
                                             a
                                          
                                          +
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             
                                                t
                                                i
                                                a
                                             
                                             ·
                                             
                                                x
                                                
                                                   k
                                                   i
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          ∀
                                          
                                          k
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (21)
                           
                              
                                 
                                    
                                       
                                          l
                                          ·
                                          
                                             w
                                             
                                                k
                                                i
                                             
                                          
                                          ≥
                                          
                                             v
                                             k
                                          
                                          ·
                                          
                                             a
                                             i
                                          
                                          −
                                          M
                                          ·
                                          
                                             (
                                             2
                                             −
                                             
                                                x
                                                
                                                   k
                                                   i
                                                
                                             
                                             −
                                             
                                                z
                                                
                                                   k
                                                   i
                                                
                                             
                                             )
                                          
                                          
                                       
                                    
                                    
                                       
                                          ∀
                                          
                                          k
                                          ,
                                          i
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                          ;
                                          
                                          l
                                          =
                                          0
                                          ,
                                          …
                                          ,
                                          μ
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (22)
                           
                              
                                 
                                    
                                       
                                          l
                                          ·
                                          
                                             y
                                             
                                                k
                                                i
                                             
                                          
                                          ≥
                                          
                                             v
                                             k
                                          
                                          ·
                                          
                                             b
                                             i
                                          
                                          −
                                          M
                                          ·
                                          
                                             (
                                             2
                                             −
                                             
                                                x
                                                
                                                   k
                                                   i
                                                
                                             
                                             −
                                             
                                                z
                                                
                                                   k
                                                   i
                                                
                                             
                                             )
                                          
                                          
                                       
                                    
                                    
                                       
                                          ∀
                                          
                                          k
                                          ,
                                          i
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                          ;
                                          
                                          l
                                          =
                                          0
                                          ,
                                          …
                                          ,
                                          μ
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (23)
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             w
                                             
                                                k
                                                i
                                             
                                          
                                          ≤
                                          C
                                          
                                       
                                    
                                    
                                       
                                          ∀
                                          
                                          k
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (24)
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             y
                                             
                                                k
                                                i
                                             
                                          
                                          ≤
                                          C
                                          
                                       
                                    
                                    
                                       
                                          ∀
                                          
                                          k
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (25)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             u
                                             k
                                          
                                          ≥
                                          0
                                          ,
                                          
                                          
                                             v
                                             k
                                          
                                          ≥
                                          0
                                          ,
                                          
                                          
                                             w
                                             
                                                k
                                                i
                                             
                                          
                                          ≥
                                          0
                                          ,
                                          
                                          
                                             y
                                             
                                                k
                                                i
                                             
                                          
                                          ≥
                                          0
                                          ,
                                          
                                          
                                             z
                                             
                                                k
                                                l
                                             
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                          ,
                                          
                                          
                                             x
                                             
                                                k
                                                i
                                             
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                          ∀
                                          
                                          k
                                          ,
                                          i
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                          ;
                                          
                                          l
                                          =
                                          0
                                          ,
                                          …
                                          ,
                                          μ
                                       
                                    
                                 
                              
                           
                        
                     
                  

Objective function (16) minimizes the total cost consisting of the fixed cost of vehicle fleet (weighted with c
                     1) and inventory costs (weighted with c
                     2). Constraints (17) and (18) ensure that each customer is served by exactly one route and each route is served by a specific number of vehicles (
                        
                           l
                           =
                           1
                           ,
                           …
                           ,
                           μ
                        
                     ) or is not operated at all (
                        
                           l
                           =
                           0
                        
                     ). Constraints (19)–(22) define Eq. (1) in a linearized manner. Constraints (19) determine the total distance of each route, and the total trip time of a vehicle on each route is given by (20). Constraints (21) and (22) ensure that sufficient items are picked up from and supplied to each customer, respectively. Furthermore, they take care that no customer is assigned to a route that is not operated (
                        
                           l
                           =
                           0
                        
                     ). The capacity restrictions of each vehicle are considered by Constraints (23) and (24). Finally, the domains of the variables are set by (25). Note that upper bound μ on the number of vehicles per route can, for instance, be calculated by Eq. (11). Further note that big integer M can be set to 
                        
                           M
                           =
                           μ
                           ·
                           C
                           ·
                           
                              
                                 
                                    max
                                    
                                       i
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       n
                                    
                                 
                                 
                                    (
                                    max
                                    
                                       (
                                       
                                          a
                                          i
                                       
                                       ;
                                       
                                          b
                                          i
                                       
                                       )
                                    
                                    )
                                 
                              
                              
                                 
                                    min
                                    
                                       i
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       n
                                    
                                 
                                 
                                    (
                                    max
                                    
                                       (
                                       
                                          a
                                          i
                                       
                                       ;
                                       
                                          b
                                          i
                                       
                                       )
                                    
                                    )
                                 
                              
                           
                        
                     .

Model CIRPL-OMC can easily be adapted to the objective of minimizing the fleet size, i.e., OMF, by setting weighting factors 
                        
                           
                              c
                              1
                           
                           =
                           1
                        
                      and 
                        
                           
                              c
                              2
                           
                           =
                           0
                        
                     . If the upper bound μ on the number of vehicles per route is fixed to one, then the one-ship-policy results, i.e., OSC. By adding Constraints (26) and (27) a disjunct routing policy, i.e., DMC, is enforced:

                        
                           (26)
                           
                              
                                 
                                    
                                       
                                          x
                                          
                                             1
                                             ,
                                             1
                                          
                                       
                                    
                                    
                                       
                                          =
                                          1
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (27)
                           
                              
                                 
                                    
                                       
                                          x
                                          
                                             k
                                             i
                                          
                                       
                                    
                                    
                                       
                                          ≤
                                          
                                             x
                                             
                                                k
                                                ,
                                                i
                                                +
                                                1
                                             
                                          
                                          +
                                          
                                             x
                                             
                                                k
                                                +
                                                1
                                                ,
                                                i
                                                +
                                                1
                                             
                                          
                                          
                                       
                                    
                                    
                                       
                                          ∀
                                          
                                          k
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

Clearly, all these alterations can be combined, so that mixed-integer models for all our subproblems of CIRPL are available.

​
                  

@&#REFERENCES@&#

