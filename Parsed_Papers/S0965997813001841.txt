@&#MAIN-TITLE@&#Cloud service access control system based on ontologies

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The proposed system supports cloud features: payment status and service level.


                        
                        
                           
                           The system uses rules and ontologies to detect policy conflicts and block accesses.


                        
                        
                           
                           The system architecture and database design are proposed.


                        
                        
                           
                           A case study shows how the system detects conflicts and denies illegal accesses.


                        
                        
                           
                           In the evaluation result, the proposed system has less concept explosion than RBAC.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Cloud service

Access control

Ontology

Conflict detection

Payment status

Service level

@&#ABSTRACT@&#


               
               
                  Cloud service is a new and distinctive business model for service providers. Access control is an emerging and challenging issue in supporting cloud service business. This work proposes a new access control mechanism called cloud service access control (CSAC). The CSAC mechanism considers payment status and service level as the two essential characteristics of cloud service. Ontology is a theoretical foundation for the CSAC mechanism. Inconsistent access control policies are detected by a set of proposed policy conflict analysis rules. Inappropriate user accesses are inhibited by access control policies according the proposed access denying rules. System architecture is designed to support the CSAC mechanism. A case study is provided to demonstrate how CSAC works. Finally, an evaluation is conducted to measure the concept explosion issue in CSAC.
               
            

@&#INTRODUCTION@&#

Cloud computing is a model that servers can dynamically provisioned and configured to deliver services in a scalable and low-management-effort manner [12,1]. Many users are increasing realizing that they can use cloud services to gain applications and resources rapidly, flexibly, and cheaply [16]. In cloud, service providers usually do not know their users in advance. It is difficult to assign users to roles in access control policies [17]. Therefore proposing a new access control mechanism for the new context of cloud computing is an important theoretical and practical issue.

Cloud can be classified in fourfold: private, public, community, and hybrid clouds. In private cloud, an organization provides its own cloud services for its internal users [10,16]. Public cloud means that a cloud services provider offers access for external and public users who are typically billed on a pay-as-you-use basis [10]. Hybrid cloud is a mixture of public and private clouds. Finally, community cloud is provisioned for exclusive use by a specific community constituted by a group of organizations that have shared concerns [11].

Cloud service business usually needs to consider two elements: payment status and Service Level Agreement. Payment status can be defined as a stage of payment process in cloud providers’ accounting records. In practice, cloud computing access control models usually considers service accounting records of cloud computing providers [17]. Cloud computing often utilizes the pay-per-use strategy to charge service fees. Pay-per-use means cloud resource charges are based on the quantity used [3]. The above discussion indicates that payment status for service fees is important for cloud access control. Service Level Agreement (SLA for short) is a part of service contract that defines the level of service and controls the use of computing resources [17]. In general, cloud computing service providers define SLA as guarantee about expected service level that the enterprise has committed to provide [3]. And SLA should be considered in cloud computing access control models [17].

RBAC (Role-Based Access Control) is a widespread used mechanism in business. The RBAC model uses application-specific and organizational role structure to control objects’ accesses in organizational-wide applications [4]. Considering the attributes, other than role and object, that affect users’ permission causes concept explosion and limits RBAC’s strengths. The concept explosion is twofold: role explosion and object explosion. Role explosion means that the number of roles can easily explode [4]. Role explosion occurs when users’ and context-specific attributes, such as payment status, affects users’ permissions. The idea of object explosion defined in this work means the number of resources can easily explode. Object explosion occurs when resources’ attributes, such as service level, are considered in access control mechanisms.

Conflicts are inevitable in access control policies. Here is a conflict example about multiple roles for the same person. In this example, policy A is: role X in company Y can not use resource Z in Cloud C. And policy B is: role I in community J can use resource Z in Cloud C. Therefore policy A contradicts policy B when person W plays both role X and role I.

To handle the cloud service business requirements and reduce concept explosion in cloud service, this work is based on and extend RBAC to proposes the cloud service access control (CSAC) system to automatically support for access control policy analysis and execution in cloud services. The CSAC system is designed to support the CASC method. The CSAC method is comprised of a process, policy and requirement metadata, and rules. The process describes the steps of CSAC method. The policy and requirement metadata reveals what information should be considered in access control policy and user requirement specification. The rules are used to analyze policy conflict and deny inappropriate accesses.

Ontology is the theoretical foundation of the CSAC system. Ontology is a shared and explicit conceptualization to represent a domain knowledge structure [5]. The ontology is an appropriate methodology to accomplish a common consensus of communication and to facilitate knowledge management [2]. In the CSAC system, ontology can provide necessary semantic information to execute policy conflict analysis and access denying rules.

The CSAC system is comprised of seven modules: access grant and denying, resource usage monitor, payment status monitor, policy specification, policy conflict detector, conflict resolver, and ontology management. Access grant and denying module executes access control policies and access denying rules to decide which access is allowed or not. Resource usage monitor module measures how many resources are used, such as used storage size. Payment status monitor indicates that each user’s accounting record about paying bills. The cloud administrator uses policy specification module to specify access control policies. Policy conflict detector module uses policy conflict rules and ontologies to automatically analyze inconsistencies between policies. The cloud administrator uses conflict resolver module to prioritize inconsistent policies to resolve conflicts. Finally, ontology management module is used to add, modify, and delete concepts and relationships.

This paper is organized as follows. Section 2 discusses related works about access control mechanisms. Section 3 proposes the CSAC method which is constituted of the process, metadata, and rules. Section 4 proposes the CSAC system architecture and database design. Section 5 provides a case study to demonstrate how the CSAC method works. Section 6 evaluates the concept explosion situation in CSAC and RBAC. The final conclusion section includes research contributions and further works.

@&#LITERATURE REVIEW@&#

Several related works in the literature are summarized in Table 1
                     . Le et al. [7] propose an access control method in ubiquitous hospital information system. It authorizes access permission according to user activities. Masoumzadeh and Joshi [9] use ontologies and policy rules to control access in online social networks. Hu et al. [6] use semantic web technology to control cloud computing access. Zhu et al. [18] extend Role-Based Access Control (RBAC) to the cloud computing context. Ruj et al. [15] provides an attribute-based access control mechanism in data storage cloud service.

The most above access control methods focus on cloud computing. In these works, few methods discuss the relationships between the payment issue and access control mechanism. Few works consider service level issue as an important element in the access control methods. In the other hand, ontology is used in the two methods in Table 1. Only an existing method in Table 1 discusses how to use ontology to analyze policy conflicts. Therefore this work proposes an ontological access control method which concerns payment status and service level agreement.

The main contribution of this work is to design and evaluate the CSAC system. Before we introduce the CSAC system design, the rationale behind the CSAC system is the CSAC method. The CASC method is an extended version of the prior work [8]. The CASC method is introduced in this section.

Four actors and six steps in Fig. 1
                         depicts how to use the proposed access control method. The four actors are the end user, administrator, access control server, and cloud. The six-stages process in the CSAC method is introduced as follows. In the first step, the end user requests the access control server to get a specific cloud computing service. Then the access control server uses policies to check the end user’s authority for this cloud service in step 2. The policies are managed by the administrator in step 0. If the end user has the authority, the access control server requests and acquire necessary resource in the cloud in step 3 and 4. If the end user has no authority, step 3 and step 4 are skipped. And the access control server records service logs in step 5. The final step is to deliver the service result to the end user.

The core elements in the proposed metadata are fivefold: payment status, role, access permission, service level, and cloud. The metadata (in Fig. 2
                        ) comprises two cloud access control policies and one user requirement. The six relationships (RPS1–PS2, RU1–U2, RR1–R2, RAP1–AP2, RSL1–SL2, and RC1–C2) are between access control policy ACP1 and ACP2. These relationships are used by the proposed policy conflict analysis rules (summarized in Table 2
                        ) to analyze conflicts between two policies. And the other five relationships (RPS1–PS3, RR1–R3, RAP1–AA3, RSL1–RSL3, and RC1–C3) are between access control policy ACP1 and user requirement UR3. These five relationships are utilized by the proposed access denying rules (summarized in Table 3
                        ) to deny and allow access.

This work proposes four policy analysis rules summarized in Table 2 for detecting conflicts. These rules are developed based on the proposed metadata in Fig. 2. These rules are introduced as follows.


                        
                           RulePCA1 for policy opposition conflict:
                        
                     


                        IF an equality or a kind relationship exists between payment status PS1 and PS2, an equality or a kind relationship exists between role R1 and R2, an antonym relationship is between access permission AP1 and AP2, an equality or a kind relationship exists between service level SL1 and SL2, and an equality, a kind, or a composition relationship is between cloud C1 and C2, THEN a policy opposition conflict occurs between access control policy ACP1 and ACP2
                        .


                        
                           RulePCA2a for policy exclusion conflict:
                        
                     


                        IF there is no equality and no kind relationship exists between role R1 and R2, a exclusion relationship is between access permission AP1 and AP2, an equality or a kind relationship exists between service level SL1 and SL2, and an equality, a kind, or a composition relationship is between cloud C1 and C2, THEN a policy exclusion conflict occurs between access control policy ACP1 and ACP2.
                     


                        
                           RulePCA2b for policy exclusion conflict:
                        
                     


                        IF there is no equality and no kind relationship exists between payment status PS1 and PS2, a exclusion relationship is between access permission AP1 and AP2, an equality or a kind relationship exists between service level SL1 and SL2, and an equality, a kind, or a composition relationship is between cloud C1 and C2, THEN a policy exclusion conflict occurs between access control policy ACP1 and ACP2.
                     


                        
                           RulePCA3 for user’s opposite permission:
                        
                     


                        IF an equality relationship between user U1 and U2, an antonym relationship is between access permission AP1 and AP2, an equality or a kind relationship exists between service level SL1 and SL2, and an equality, a kind, or a composition relationship is between cloud C1 and C2, THEN a user’s opposite permission conflict occurs between access control policy ACP1 and ACP2.
                     

Several semantic relationships are used in Tables 2 and 3. Kind (K) means a subclass relationship between two classes in an ontology or an instance relationship in an instance ontology. Equality (Eq) indicates that two concepts have the same meaning. Antonym (A) means a concept is opposite to another, such as “can” and “cannot”. Composition (C) indicates a concept is a part of another. Part (P) means an element of UR3 is a part of an element of ACP1 in Table 3 particularly. Exclusion (Ex) means a concept is not allow to be used by another. For example, “only someone can read” exclude “another one can read”.

Four rules are proposed to deny illegal accesses. These rules are based on the metadata in Fig. 2. These access denying rules are introduced as follows and summarized in Table 3.


                        
                           RuleAD1:
                        
                     


                        IF payment status PS3 equals or is a kind of PS1, role R3 equals or is a kind of role R1, access action AA3 is an antonym of access permission AP1, required service level RSL3 equals or is a kind of service level SL1, and cloud C3 equals, is a kind of, or is a part of cloud C1, THEN the user access is denied because access control policy ACP1 inhibits the user requirement UR3.
                     


                        
                           RuleAD2a:
                        
                     


                        IF payment status PS3 is unequal to and is not a kind of payment status PS1, access permission AP1 excludes access action AA3, required service level RSL3 equals or is a kind of service level SL1, and cloud C3 equals, is a kind of, or is a part of cloud C1, THEN the user access is denied because access control policy ACP1 excludes the user requirement UR3.
                     


                        
                           RuleAD2b:
                        
                     


                        IF role R3 is unequal to and is not a kind of role R1, access permission AP1 excludes access action AA3, required service level RSL3 equals or is a kind of service level SL1, and cloud C3 equals, is a kind of, or is a part of cloud C1, THEN the user access is denied because access control policy ACP1 excludes the user requirement UR3.
                     


                        
                           RuleAD3:
                        
                     


                        IF payment status PS3 equals or is a kind of PS1, role R3 equals or is a kind of role R1, access action AA3 equals or is a kind of access permission AP1, required service level RSL3 is unequal to, is not a kind of, and is not a part of service level SL1, and cloud C3 equals, is a kind of, or is a part of cloud C1, THEN the user access is denied because the user requirement UR3 does not conform to the service level agreement in access control policy ACP1.
                     

The CSAC system design is twofold: system architecture and database design. Fig. 3
                      depicts the CSAC system architecture. Users utilize cloud services through the CASC system. The CSAC system decides whether the user has a permission to access a cloud resource or not. The administrator has to specify access control policies, maintain ontologies, and resolve policy conflicts. The CSAC system comprises seven modules: access grant and denying, resource usage monitor, payment status monitor, policy specification, policy conflict detector, conflict resolver, and ontology management. These modules are described in detailed below.
                        
                           (1)
                           Access grant and denying: This module decides whether an access is permitted or not according to access control policies and access denying rules. The access grant and denying module is over the other six modules in Fig. 3 means that this module uses the outputs of the other seven modules.

Resource usage monitor: This module provides the resource usage information about how many resources have been used. The resource usage record in database is updated when a user gets a cloud resource successfully. Resource usage is measured by resource metrics, such as transaction count, storage size, and software version. [13,14] For consumptive resources x (e.g. transaction count and storage size), the required service level is calculated according to the used resource and the requested resource numbers. Used_resource(x) represents how many resources of cloud service x is already used. Requested_resource(x) is a number of resources requested by a user in each access. Therefore required service level (x)=requested_resource(x)+used_resource(x). For duration limitation, the legal required time of day should be in the arrange between start time and end time. For static resources (e.g. software version), required service levels do not consider the resource usage information provided in this module. If the required service level is go beyond the scope of the agreed service level defined in the policy, it means Service Level SL1 is not a kind of and unequal to Required Service Level RSL3 in Fig. 2.

Payment status monitor: This module provide accounting information about user payment and bill. The payment status record is updated when a user proceeds to a new stage in the payment process. When a user requests to access a cloud service, the payment status record is examined to decide whether the access is permitted or not.

Policy specification: The cloud administrator fills in the access control policy metadata (e.g. ACP1 in Fig. 2) as the blank form with the terms of payment status, role, access permission, service level, and cloud. These terms are stored in the ontologies. In other words, the cloud administrator uses this module to select the terms from the ontologies to represent a access control policies.

Policy conflict detector: This module executes the rules in Table 2 to analyze conflicts between policies. To be more concrete, this module examines the semantic relationships between access control policy ACP1 and ACP2. If the semantic relationships conform to the conflict conditions in Table 2, a conflict is detected by this module.

Conflict resolver: This module reminds the cloud administrator to resolve conflicts if any policy conflict is unresolved. And the cloud administrator uses this module to prioritize the inconsistent policies. When the conflict is resolved, the consistent policies becomes effective to control cloud access.

Ontology management: The cloud administrator uses this module to add, modify, and delete the terms and semantic relationships in payment status, role, access permission, service level, and cloud ontologies. The ontological terms are used to represent user’s payment status and access control policies. The semantic relationship in the ontologies are used by the policy conflict detector module to automatically detect conflicts. The semantic relationship in the ontologies are also used by the access grant and denying module to decide whether a user access requirement is permitted or not.

The database design of CSAC system consists of ten entities and thirteen relationships which are depicted in Fig. 4
                     . The ten entities are the role, payment status, user, resource, cloud service, ontological concept, ontological relationship, rule base, access control policy, and policy priority entities. The thirteen relationships are the played by, belong to, request, have utilized, before, after, assigned for, and five correspond relationships. The above entities and relationships are introduced as follows. The played by relationship between the role and user entity means a role is played by a user. The belong to relationship between the payment status and user entity means a payment status belongs to a user. The request relationship is a ternary relationship among the user, resource, and cloud service entity. The request relationship means a user requests a resource (requested_resource(x)) in a cloud service in an access. The have utilized relationship is also a ternary relationship among the user, resource, and cloud service entity. The have utilized relationship means a user have utilized an accumulated resource (used_resource(x)) in a cloud service. An accumulated resource indicates how many resources have been occupied by a user. The before and after relationships describes ontologies which is constituted of ontological concepts and ontological relationships. The assigned for relationship describes a policy priority is assigned for an inconsistent access control policy. The five correspond relationships means all used terms about payment status, role, resource, cloud service, rule, and access control policy are stored in the ontological concept entity.

This section provides a scenario of personal data backup service in cloud computing. This scenario includes five ontologies and six examples. These ontologies are payment status ontology, role ontology, access permission and action ontology, service level ontology, and data backup service ontology. These ontologies are depicted in the following figures.

The following data backup service example uses the above ontologies (in Fig. 5–9
                     
                     
                     
                     
                     ) and the metadata (in Fig. 2) to demonstrate and validate the proposed rules. The examples for RulePCA1 to RulePCA3 are introduced as follows.


                     
                        RulePCA1 for policy opposition conflict:
                     
                  


                     IF an equality or a kind relationship exists between payment status PS1 and PS2, an equality or a kind relationship exists between role R1 and R2, an antonym relationship is between access permission AP1 and AP2, an equality or a kind relationship exists between service level SL1 and SL2, and an equality, a kind, or a composition relationship is between cloud C1 and C2, THEN a policy opposition conflict occurs between access control policy ACP1 and ACP2.
                  


                     Fig. 10
                      depicts the RulePCA1 example. In this example, ACP1 is “Unpaid (PS1) customer (R1) can not access (AP1) any service level (SL1) personal data backup service (C1)”. ACP2 is: “Unpaid (PS2) customer (R2) can access (AP2) 1GB (SL2) personal data backup service (C2)”. In this example, PS1 equals PS2. R1 equals R2. Fig. 7 indicates that AP1 (can not access) is an antonym of AP2 (can access). Fig. 8 reveals that SL2 (1GB) is a kind of SL1 (any service level). C1 equals C2. According to RulePCA1, a conflict exists between ACP1 and ACP2.


                     
                        RulePCA2a for policy exclusion conflict:
                     
                  


                     IF there is no equality and no kind relationship exists between role R1 and R2, a exclusion relationship is between access permission AP1 and AP2, an equality or a kind relationship exists between service level SL1 and SL2, and an equality, a kind, or a composition relationship is between cloud C1 and C2, THEN a policy exclusion conflict occurs between access control policy ACP1 and ACP2.
                  


                     
                        RulePCA2b for policy exclusion conflict:
                     
                  


                     IF there is no equality and no kind relationship exists between payment status PS1 and PS2, a exclusion relationship is between access permission AP1 and AP2, an equality or a kind relationship exists between service level SL1 and SL2, and an equality, a kind, or a composition relationship is between cloud C1 and C2, THEN a policy exclusion conflict occurs between access control policy ACP1 and ACP2.
                  

The RulePCA2 example in Fig. 11
                      shows the conflict situation between ACP1 and ACP2. ACP1 is “Only paid (PS1) customer (R1) can access (AP1) 10GB (SL1) personal data backup service (C1)”. ACP2 is “Unpaid (PS2) VIP customer (R2) can access (AP2) 10GB (SL2) personal data cloud service (C2)”. In this case, Fig. 5 reveals that PS1 (Paid) is an antonym of PS2 (Unpaid). The antonym relationship means no kind and no equality relationship between PS1 and PS2. R2 is a kind of R1. AP1 excludes AP2 in Fig. 7. SL1 equals SL2. C1 and C2 are the same service. According RulePCA2b, a conflict occurs between ACP1 and ACP2.


                     
                        RulePCA3 for user’s opposite permission:
                     
                  


                     IF an equality relationship between user U1 and U2, an antonym relationship is between access permission AP1 and AP2, an equality or a kind relationship exists between service level SL1 and SL2, and an equality, a kind, or a composition relationship is between cloud C1 and C2, THEN a user’s opposite permission conflict occurs between access control policy ACP1 and ACP2.
                  

The RulePCA3 example depicted in Fig. 11 shows that user Louis plays two roles and results in a conflict. ACP1 is “Unpaid (PS1) customer (R1) can not access (AP1) any service level (SL1) personal data backup service (C1)”. ACP2 is “Unpaid (PS2) Employee (R2) can access (AP2) 15GB (SL2) personal data cloud service (C2)”. In this example, both U1 and U2 are Louis. Fig. 7 indicates that an antonym relationship exists between AP1 (Can Not Access) and AP2 (Can Access). Fig. 8 indicates that 15GB is a kind of Any Service Level. And both C1 and C2 are Personal Data Backup Service. According to RulePCA3, a conflict exists between policy ACP1 and ACP2 during policy execution (see Fig. 12
                     ).

RuleAD1 to RuleAD3 are the example of proposed access denying rules. RuleAD1 to RuleAD3 use ontologies (in Figs. 5–9) and policies (the policy metadata is in Fig. 2) to block inappropriate user access requirements (the user requirement metadata is also in Fig. 2). The examples for RuleAD1 to RuleAD3 are introduced as follows.


                     
                        RuleAD1:
                     
                  


                     IF payment status PS3 equals or is a kind of PS1, role R3 equals or is a kind of role R1, access action AA3 is an antonym of access permission AP1, required service level RSL3 equals or is a kind of service level SL1, and cloud C3 equals, is a kind of, or is a part of cloud C1, THEN the user access is denied because access control policy ACP1 inhibits the user requirement UR3.
                  

The RuleAD1 example shows how user Jason’s access requirement is inhibited by the policy. In this case, ACP1 is “Unpaid (PS1) customer (R1) can not access (AP1) any service level (SL1) personal data backup service (C1)”. UR3 is “Unpaid (PS3) customer (R3) Jason (U3) download data from (AP3) 10GB (RSL3) Jason’s data backup service (C3)”. In the above situation, PS1 equals PS3. Fig. 7 shows AP1 is an antonym of AA3. Fig. 8 reveals that RSL3 is a kind of SL1. Fig. 9 shows C3 is a kind of C1. According to RuleAD1, the user access is denied because the policy ACP1 inhibits the UR3 access (see Fig. 13
                     ).


                     
                        RuleAD2a:
                     
                  


                     IF payment status PS3 is unequal to and is not a kind of payment status PS1, access permission AP1 excludes access action AA3, required service level RSL3 equals or is a kind of service level SL1, and cloud C3 equals, is a kind of, or is a part of cloud C1, THEN the user access is denied because access control policy ACP1 excludes the user requirement UR3.
                  


                     
                        RuleAD2b:
                     
                  


                     IF role R3 is unequal to and is not a kind of role R1, access permission AP1 excludes access action AA3, required service level RSL3 equals or is a kind of service level SL1, and cloud C3 equals, is a kind of, or is a part of cloud C1, THEN the user access is denied because access control policy ACP1 excludes the user requirement UR3.
                  

The RuleAD2 example is a case about the access exclusion. In this example, ACP1 is “Only paid (PS1) customer (R1) can access (AP1) 10GB (SL1) personal data backup service (C1)”. UR3 is “30-day free trial (PS3) customer (R3) Alice (U3) upload data to (AA3) 10GB (RSL3) Alice’s data backup service (C3)”. Fig. 5 shows that no equality and kind relationship exists between PS1 and PS3. R1 and R3 are the same. Fig. 7 reveals that AP1 excludes AP3. SL1 equals RSL3. Fig. 9 presents that C3 is a kind of C1. According to RuleAD2a, the user access is denied because the policy ACP1 excludes the UR3 access (see Fig. 14
                     ).


                     
                        RuleAD3:
                     
                  

IF payment status PS3 equals or is a kind of PS1, role R3 equals or is a kind of role R1, access action AA3 equals or is a kind of access permission AP1, required service level RSL3 is unequal to, is not a kind of, and is not a part of service level SL1, and cloud C3 equals, is a kind of, or is a part of cloud C1, THEN the user access is denied because the user requirement UR3 does not conform to the service level agreement in access control policy ACP1 (see Fig. 15
                     ).

The RuleAD3 example demonstrates the user requirement exceeds the agreed service level. ACP1 is “Paid (PS1) VIP (R1) can access (AP1) 15GB (SL1) personal data backup service (C1)”. UR3 is “Paid (PS3) user John upload data to (AP3) 30GB (RSL3) John’s data backup service (C3)”. PS1 equals PS3. R1 also equals R3. AA3 is a kind of AP1 in Fig. 7. RSL3 exceeds SL1. And C3 is a kind of C1. According to RuleAD3, the access denied due to the service level excess problem.

This section analyzes the difference of concept explosion between the proposed CSAC and the popular RBAC mechanisms. Section 6.1 evaluates the user concept explosion problem about role and payment status on the CSAC and RBAC mechanisms. Section 6.2 evaluates the object concept explosion problem about service level and cloud resource on the CSAC and RBAC mechanisms.

Payment status and role are two important user concepts to classify users in cloud service. The proposed CSAC mechanism classifies users depending on payment status and role. If we assume that cloud users are only classified by two variables: payment status and role, the total concepts for user classification are the concepts of payment status adds the role concepts. Therefore the formula to calculate the number of user concept in CSAC is:
                           
                              (Formula (a))
                              
                                 Num
                                 (
                                 CSAC
                                 _
                                 User
                                 _
                                 Concept
                                 )
                                 =
                                 Num
                                 (
                                 Payment
                                 _
                                 status
                                 )
                                 +
                                 Num
                                 (
                                 Role
                                 )
                                 ;
                              
                           
                        
                     

The RBAC mechanism only uses role as a single discriminator to classify users. RBAC does not consider payment status directly. Different users with the same role can have different permissions depending on payment status in cloud service. For example, the role “customer” might have different permissions for customers who have two payment statuses: paid and unpaid. To cope with this situation in RBAC, two user concepts used as roles are necessary: “paid-customer” and “unpaid-customer”. The formula to calculate number of user concept in RBAC is:
                           
                              (Formula (b))
                              
                                 Num
                                 (
                                 RBAC
                                 _
                                 User
                                 _
                                 Concept
                                 )
                                 =
                                 Num
                                 (
                                 Payment
                                 _
                                 Status
                                 )
                                 *
                                 Num
                                 (
                                 Role
                                 )
                                 ;
                              
                           
                        Here is an example to apply Formula (a). In the proposed CSAC mechanism, there are three payment statuses and four roles. Three payment statuses are “unpaid”, “paid”, and “overdue”. And four roles are “consumer”, “general consumer”, “VIP consumer”, and “corporate employee”. According to Formula (a), the number used to classify users in CSAC is:
                           
                              
                                 Num
                                 (
                                 CSAC
                                 _
                                 User
                                 _
                                 Concept
                                 )
                                 =
                                 3
                                 +
                                 4
                                 =
                                 7
                                 ;
                              
                           
                        
                     

If we use the RBAC mechanism to handle the above three payment statuses and four roles, twelve user concepts as roles in RBAC are necessary: “unpaid-consumer”, “unpaid-general consumer”, “unpaid-VIP consumer”, “unpaid-corporate employee”, “paid-consumer”, “paid-general consumer”, “paid-VIP consumer”, “paid-corporate employee”, “overdue-consumer”, “overdue-general consumer”, “overdue-VIP consumer”, and “overdue-corporate employee”. According to Formula (b), the number used to classify users in RBAC is:
                           
                              
                                 Num
                                 (
                                 RBAC
                                 _
                                 User
                                 _
                                 Concept
                                 )
                                 =
                                 3
                                 *
                                 4
                                 =
                                 12
                                 ;
                              
                           
                        
                     

Now we assumed that the number of payment status is 3. According to Formulas (a) and (b), Fig. 16
                         depicts the relationship between the user concept number and the role number when payment status number is 3. In general, the user concept number in RBAC is higher than the user concept number in CSAC. Therefore the user concept explosion problem in RBAC is more serious than the user concept explosion problem in CSAC.


                        Service level and cloud service are two important concepts to classify cloud objects. The proposed CSAC mechanism classifies objects according to service level and cloud service. The formula to calculate object concept number in CSAC is:
                           
                              (Formula (c))
                              
                                 Num
                                 (
                                 CSAC
                                 _
                                 Object
                                 _
                                 Concept
                                 )
                                 =
                                 Num
                                 (
                                 Cloud
                                 _
                                 Service
                                 )
                                 +
                                 Num
                                 (
                                 Service
                                 _
                                 Level
                                 )
                                 ;
                              
                           
                        
                     

The RBAC mechanism only uses object to represent the controlled resource. The RBAC mechanism does not consider service level. A cloud service might has several service levels. And a set of service levels might be applied in a set of cloud services. The formula to calculate object concept number in RBAC is:
                           
                              (Formula (d))
                              
                                 Num
                                 (
                                 RBAC
                                 _
                                 Object
                                 _
                                 Concept
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          0
                                       
                                       
                                          n
                                       
                                    
                                 
                                 Num
                                 (
                                 Cloud
                                 _
                                 Service
                                 (
                                 i
                                 )
                                 )
                                 *
                                 Num
                                 (
                                 Service
                                 _
                                 Level
                                 (
                                 i
                                 )
                                 )
                                 ;
                              
                           
                        
                     

Here is an example to apply Formula (c). In group 1, four service levels are used to describe three cloud services. And in group 2, two service levels are used to describe another cloud service. The three clouds in group 1 are data backup service, PC data backup service, and mobile device data backup service. The four service levels in group 1 are any service level, 1GB, 10GB, and 15GB. The cloud in group 2 is game service. And two service levels for game service in group 2 are general version and professional version. According to Formula (c), the object concept number in CSAC is:
                           
                              
                                 Num
                                 (
                                 CSAC
                                 _
                                 Object
                                 _
                                 Concept
                                 )
                                 =
                                 (
                                 3
                                 +
                                 1
                                 )
                                 +
                                 (
                                 4
                                 +
                                 2
                                 )
                                 =
                                 10
                                 ;
                              
                           
                        
                     

If we use RBAC in the above example, group 1 needs twelve object concepts and group 2 needs two object concepts. The twelve object concepts in group 1 are “any service level-data backup service”, “1GB-data backup service”, “10GB-data backup service”, “15GB-data backup service”, “any service level-PC data backup service”, “1GB-PC data backup service”, “10GB-PC data backup service”, “15GB-PC data backup service”, “any service level-mobile device data backup service”, “1GB-mobile device data backup service”, “10GB-mobile device data backup service”, and “15GB-mobile device data backup service”. The two object concepts in group 2 are “general version-game service” and “professional version-game service”. According to Formula (d), the object concept in RBAC is:
                           
                              
                                 Num
                                 (
                                 RBAC
                                 _
                                 Object
                                 _
                                 Concept
                                 )
                                 =
                                 3
                                 *
                                 4
                                 +
                                 1
                                 *
                                 2
                                 =
                                 14
                                 ;
                              
                           
                        
                     

To concretely demonstrate the object concept explosion problem, we randomly generate a set of clouds and service levels for each group i in the experiment. The assumed range of cloud number, service level number, and data number for each group is 1–5. Table 4
                         shows the partial randomly generated data. In Table 4, the number of CSAC object concept is calculated according to Formula (c). And the number of RBAC object concept is calculated according to Formula (d). The total number of RBAC object concept (410) is more than the total number of CSAC object concept (314) in Table 4.


                        Fig. 17
                         depicts the relationship between object concept number and group i according to the randomly generated data. In most groups, the RBAC object number is more than the CSAC object number. Therefore the object concept explosion problem in RBAC is also more serious than the user concept explosion problem in CSAC.

@&#CONCLUSION@&#

This work proposes an access control mechanism in supporting the characteristics of cloud service: payment status and service level. A set of policy conflict analysis rules and access denying rules are introduced in CSAC. The proposed CSAC mechanism uses rules and ontology to detect conflict between inconsistent policies and block inappropriate user access. The system architecture and database are proposed to support CSAC. A case study demonstrates how the CSAC mechanism detects policy conflicts and denies illegal user accesses.

This work does not use the standard ontology language such as Web Ontology Language (OWL) to represent CSAC ontologies for two reasons. First of all, the deadlock problem is inevitable in the file systems which are used by OWL. The relational database systems which are used in this work is able to handle the deadlock issue. Second, some relationships are not included in the standard ontology language. For example, the exclusion relationship is not considered in the OWL standard. The standard sometimes limits the system design and innovation.

An evaluation is preceded to analyze the concept explosion problem in the CSAC and RBAC mechanisms. The evaluation result reveals that CSAC has less concept explosion problem than RBAC. Therefore CSAC might have cheaper operation cost than RBAC when an administrator encounters the concept explosion problem in cloud service. Empirical evaluation is a valuable direction in the further works.

@&#REFERENCES@&#

