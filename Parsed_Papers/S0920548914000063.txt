@&#MAIN-TITLE@&#Beyond ubiquitous computing: The Malaysian HoneyBee project for Innovative Digital Economy

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Research focuses on ensemble computing beyond ubiquitous distributed computing.


                        
                        
                           
                           HoneyBee project applies ensemble computing in Malaysian Innovative Digital Economy.


                        
                        
                           
                           Proposed layered platform enabling new ensemble computing requirements.


                        
                        
                           
                           Platform supports ad-hoc, peer-to-peer communication model with safety measures.


                        
                        
                           
                           Platform introduces Enhanced Intelligent Multi-Agent System concept as exemplar.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Ad-hoc network

Decentralized network

Ensemble computing

HoneyBee

Security

Safety

Performance statistics

@&#ABSTRACT@&#


               
               
                  In the proposed advanced computing environment, known as the HoneyBee Platform, various computing devices using single or multiple interfaces and technologies/standards need to communicate and cooperate efficiently with a certain level of security and safety measures. These computing devices may be supported by different types of operating systems with different features and levels of security support. In order to ensure that all operations within the environment can be carried out seamlessly in an ad-hoc manner, there is a need for a common mobile platform to be developed. The purpose of this long-term project is to investigate and implement a new functional layered model of the common mobile platform with secured and trusted ensemble computing architecture for an innovative Digital Economic Environment in the Malaysian context. This mobile platform includes a lightweight operating system to provide a common virtual environment, a middleware for providing basic functionalities of routing, resource and network management, as well as to provide security, privacy and a trusted environment. A generic application programming interface is provided for application developers to access underlying resources. The aim is for the developed platform to act as the building block for an ensemble environment, upon which higher level applications could be built. Considered as the most essential project in a series of related projects towards a more digital socio-economy in Malaysia, this article presents the design of the target computational platform as well as the conceptual framework for the HoneyBee project.
               
            

@&#INTRODUCTION@&#

The first generations of modern computers, during the 1950s and up to 1980, were characterized by centralized computing, where many people had to share a single central computer, typically a mainframe, through terminals that had no intelligence. After introduction of the personal computer in the early 1980s, people possessed their own computers, hence marking the dawn of the personal computing era, where the main mode of user interface was based on the desktop metaphor [1]. During the last two decades, the average number of computing devices per person had increased, along with an abundance of computing power, smaller form factors and interconnectivity between devices, leading to a pervasiveness of computing, which was also referred to as ubiquitous computing. The period beyond 2000 is sometimes labelled as the third computing era, as calculated by Want et al. [2]. Mark Weiser, considered as the father of ubiquitous computing, named the ubiquitous era as the third computing wave starting from 1996. He was not referring solely to the ratio of computing devices to users, but to the post-desktop environment, where computers, as we know them disappear, and become so pervasive to the degree of invisibility [3]. He described this concept in his 1991 seminal paper, envisioning the computer of the 21st century [4].

From another perspective, since the era of centralized computing, people began to wire their mainframes and supercomputers together. Later, the trend shifted towards personal computers, within local areas and over dispersed ones, hence moving from a centralized paradigm to a more distributed computing paradigm. Distributed computing utilized different models, like the client–server and peer-to-peer, and later led to more evolved paradigms, such as, Internet computing, grid computing and recently cloud computing. Initially, connectivity was achieved through wired media, then through wireless connections, which allowed for many further technologies, the wire-free Personal Area Networks (PANs), and later, the Body Area Networks (BANs). Wireless connectivity also allowed for another important feature: mobility. Also, earlier on, the possibility of connecting devices dynamically, using wireless connections independent of fixed infrastructure was recognized since 1970s, yielding Ad Hoc networking [5]. Adding the mobility factor made Mobile Ad Hoc Networks (MANETs) a hot research topic since the mid1990s [6].

Combining wireless connectivity, mobility, smaller devices, and lower prices, all with omnipresent computing power, leads us to ubiquitous computing, thought of by researchers in Xerox as early as 1988 [7], by research on calm technology, invisible computing, wearable computing, context-awareness, situated computing and disappearing computers [8]. Fig. 1
                      shows some of the key waves through which computing history has passed.

Around the beginning of the last decade, the idea of ensemble computing was introduced, influenced by all those technologies and by extending their space [9]. Researchers started researching about their device ensembles [10], ensemble engineering [11] and software engineering for ensembles [12]. Ensemble computing generally extends the ideas of distributed and ubiquitous computing, but several key factors are still required to consider the new paradigm. These include the dynamic changes of topologies caused by mobile computing, the notion of context awareness (for example, location and local ambience), and the increasing heterogeneity of computing resources and technologies. The combination of all these recent technological emergences is known as ensemble computing.

Considering the ad-hoc manner-like behaviour exhibited by ensemble devices, it seems natural to think of MANETs as a potential networking platform to support ensemble environments. The heart of ensemble computing is the ability to dynamically form ensembles, share resources, and disjoint, on a temporary basis as the need arises, which meets at some point with the idea of dynamic composable computing [13]. This project derives inspiration from ensembles in nature, to investigate and implement an ensemble computing platform, named after the honey bee, hence the HoneyBee environment.

The rest of the paper is organized as follows. Section 2 provides the background related to research into ensemble computing, while Section 3 identifies the main problem targeted by the project, placing that in the context of the Malaysian digital economy. The technical approach is presented in Section 4, describing the proposed platform's architecture, followed by a discussion on the research environment. Section 6 elaborates the key challenges that are faced by the project, and finally, Section 7 concludes the paper.

Ensemble computing lies at the intersection of the cultivation of many paradigms. As such, there is really a huge body of research to build upon. In this section, we only review a sample of the research projects that explored the ensemble computing as a paradigm or attempted to apply its ideas in a related perspective.

One of the most notable efforts in the research field of ensemble's engineering is the Coordination Action InterLink (International Cooperation Activities in Future and Emerging ICTs) project. The project was funded by the Future and Emerging Technologies (FET) Programme of the European Commission, which lasted for 32 months (from 1/10/2006 to 31/5/2009). This project included three thematic areas: of most interest to our project is the InterLink Working Group 1 (WG1), focusing on software intensive systems and new computing paradigms. A report in 2007 surveyed the state of the art in the field of software-intensive systems engineering, and sketched some of the relevant research [14]. A draft report plotting the research agenda for the group followed in 2008, and finally, a road mapping for research in this area was produced towards the end of 2009 [15].

Several important results emerged out of the project. It was concluded that future software intensive systems will exhibit a number of characteristic features, from which three general areas can be identified: (i) massive number of nodes per system, (ii) open/non-deterministic environment, and (iii) adaptation.

The feature of massive numbers of nodes per system ensues from many compelling factors, including the miniaturization of processing elements, integration of multi-core processors on single chips, decreasing energy demands and decreasing costs. In addition, the availability of new technologies such as Micro-Electro-Mechanical Systems (MEMSs) and nanotechnology contributes only towards new ensembles of the enormous number of nodes.

The large diversity of computing devices, technologies and service providers, combined with the fast pace in which new technologies and services is introduced to create challenging consequences. One such consequence is that deployed systems should expect changing environments, different from the ones that have been designed in the first place. Therefore, future software intensive systems should be designed to operate in open and non-deterministic environments, and even to take advantage of new services provided by the environment.

Generalizing on the previous point, future systems will often have to adapt to many changing conditions, beyond mere changes in their network environments. Adaptation is particularly required in the face of changes to the execution platform, e.g. the operating systems. Systems should also be able to embrace hardware technology innovations and user requirements that can evolve continuously, and contrary to current software systems. Essentially, future software intensive systems should be able to adapt to different requirements seamlessly and efficiently.

The InterLink WG1 called this future generation of software-intensive systems ‘ensembles’, and defined the engineering of these ensembles as the science and engineering discipline of complex, integrated ensembles of computing elements. The previous features can be viewed as new challenges to software intensive systems in general. The main challenge of engineering ensembles as collections of such elements was described in the final report in terms of harnessing the massive scale, stochastic behaviour and adaptation of ensembles.

InterLink WG1 identified two kinds of ensembles, which are considered particularly promising for driving future research, and proposed as the base for validating the test beds. Physical ensembles are intimately connected to the physical world, equipped with sensors and actuators and have to take into account issues of locality and resource constraints. Examples are real-time embedded systems, modular robots or programmable matter, sensor networks, distributed control systems for industrial plants, swarms of satellites, and many ad-hoc networks. Grid computing environments are not examples for physical ensembles since they lack the connection to the physical environment and the variable network topology; many traditional embedded systems are not physical ensembles as well because they are either not connected to a network, or only connected to a central server. Further examples of the original research on the engineering of physical ensembles can be found in references in [16].

Societal ensembles are closely related to humans, e.g., smart cities, ambient assistance, or global virtual enterprises. They have many aspects in common with ubiquitous computing, and involve different components with different and often conflicting objectives, and with very complex and unstructured interaction patterns between heterogeneous parties. More information on the unique aspects of what is called the socio-technical systems can be found in reference [17]. Of obvious importance is to investigate the social and emotional perception of human activities and dynamics of their interactions, hence to equip the ensembles with the ability to adopt and adapt to these patterns. Privacy, authentication, authorization, confidentiality and trustworthiness are all particularly important for societal ensembles, since these ensembles will process large amounts of personal data of their users [18,19].

Societal ensembles will be a particularly interesting test bed for research on heterogeneity and on ensembles where individual nodes exhibit partial cooperation and partial competition. Heterogeneity is the result of the many different types of devices that humans regularly use, and of the individual preferences for different kinds of devices. Therefore, societal ensembles are the chosen test bed model for the HoneyBee project in order to provide for a realistic case study that validates the ideas developed in the project, as discussed in more detail within Section 5 on research environment.

The concept of smart spaces (e.g. smart home and smart office) is one of the most occurring themes in ubiquitous computing research projects. The idea is to augment the environment with adequate intelligence to enhance the user experience in performing everyday activities. This intelligence is perceived via innovative composition of embedded, portable and fixed computing devices, along with algorithms to understand the current context and communicate information. To understand the context, a smart space would for instance make use of sensors like cameras and computer vision techniques to track people and their interactions, and even to build a model of the outside world. One example project at Microsoft Research, EasyLiving, took this particular path, building a geometrical model of the world to provide context [20].

EasyLiving revolved around developing of architecture and corresponding technologies to build an intelligent environment. The environment allowed for dynamic aggregation of diverse devices into a single coherent user experience. In this regard, it has a lot of common space with ensemble computing. The project used an XML-based distributed agent system relying on a middleware component to provide for asynchronous message passing, machine independent addressing and XML-based message protocols. Other components in the project included a modelling of the world around. The aim was for the target self-awareness space to know its own geometry, the people within it, their actions and preferences, and the resources available to satisfy their requests. Another characteristic of the environment was the ability to grow automatically as more hardware was added. This extensibility was again a principal feature of ensemble computing. Similar to EasyLiving, our aimed HoneyBee project would require its own middleware and agent-based distributed model, as will be discussed in Section 4.

Another occurring aspect in related research is the model for communication among dispersed and intermittently-connected nodes, which is the major use case in ensemble computing. Various ideas have been explored, and many of the proposed techniques evolved into separate research areas, named fittingly as opportunistic networking or delay-tolerant networking. Haggle is one of the notable research projects embodying this concept in a complete architecture that leverages the principles of search, as known from desktop operating systems and the web, in order to achieve truly data-driven communication [21]. The overall goal in this project is to disseminate content among a set of intermittently connected nodes. A typical scenario comprises users carrying mobile phones that hold various items of data of which users wish to share. Haggle was implemented in C/C++ for multiple platforms, including Android, Linux, Mc OSX and Windows Mobile. Despite the fact that the scope of such a project is not the same as the realm of ensemble computing, yet there are many aspects in which Haggle overlaps with the HoneyBee project, in particular for protocols to disseminate data over intermittent connectivity.

It is also worthy to note the research in the emergent paradigm of participatory sensing, in which large numbers of remotely located ensembles of devices (mainly mobile phones equipped with sensors or wearable sensors) share their sensing data in urban areas, on a participatory basis; hence the name participatory sensing 
                     [22]. In one view, such ensembles are considered as wireless sensors networks, with mobility inherited from human carrier movements, and consequently intermittent connectivity.

Despite all the new challenges that await the research into ensemble computing, the environments have many desirable properties, and promise several opportunities. Three major opportunities that have been considered by Want et al. in [2] include: (i) convertible resources, in which the limitations in resources of less capable devices could be compensated for by the resources of a more capable device in the ensemble, (ii) sharing processing power among ensemble devices, and finally (iii) the added value of the emerging behaviour, which refers to the collective wisdom of the ensemble rather than the collective resources of its components. The last point is a direct consequence of applying the Metcalfe's Law or the network effect, which has been known in telecommunications systems for some time.

Advantageous characteristics of ensemble environments include their ad-hoc interaction model; ensemble computing is primarily about ad-hoc interactions at four different levels: (i) communication layer level; (ii) appliance level; (iii) information level and (iv) user experience level. Also, the fluidity of ensembles makes them infinitely customizable. This relates to their transience; ensemble computing is characterized by the temporary nature of the ensemble where the various parts only come together when necessary. Further, ensemble computing implies scalability, where ensembles can be of any size — from two appliances to thousands of artefacts.

Two models of ensemble computing can be identified [23]: (i) the swarm-of-bats model, where overall activity is relatively well-coordinated and members are indistinguishable; and (ii) the bee-hive model, in which different roles are assigned for different members, and the outcome is of interest, not the coordination. We adopted the bee-hive model and named our project the “HoneyBee” project. More details on the model are given in Section 4, where the technical approach is discussed.

The 2010 report on the Digital Economy Ranking [24] showed that Malaysia is still lagging behind its true potential to achieve Innovative Digital Economy, ranked 36 with a score of 5.93/10 (first is Sweden at 8.49, followed by both Denmark and US at 8.41 and Singapore, ranked 8th with a value of 8.22/10). The individual scores for Malaysia over six elements were as follows: Connectivity (4.35), Social and Cultural Environment (5.47), Consumer and Business Adoption (5.85), Government Policy and Vision (6.65), Legal Environment (6.88), and Business Environment (7.36). The main shortcomings faced by Malaysia in moving towards a Digital Economy stem from the first three areas. We only discuss two of the elements, namely, Vision and Connectivity as our relevant interest in the HoneyBee project.

Vision 2010 [25] was introduced in the year 1990 with an ultimate objective of turning Malaysia into a fully developed country by the year 2020. In 2010, the Malaysian Government initiated an Economic Transformation Plan (ETP) as a strategy towards achieving Vision 2020 [26]. The government identified 12 National Key Economic Areas (NKEA) towards achieving its vision and has also recognized the value of digital innovation in the economy by establishing the Agensi Inovasi Malaysia/UNIK. On 17 May 2011, the Multimedia Development Corporation (MDEC) presented the Digital Malaysia initiative to the Global Science Innovation Advisory Council (GSIAC) on the Digital Economy, in the USA, by the Malaysian Prime Minister.

Connectivity, which had the least score in the Digital Economy Ranking Report, covers three elements: (i) availability of communicating devices and communication network, (ii) quality services and (ii) secured services. The first element is well addressed by Malaysia. For example, the ratio of mobile phones to users is currently 1.2, and the broadband usage is estimated at 55.6%. Issues related to broadband access are now being addressed by the Content and Communication Infrastructure (CCI) NKEA [27]. The issues related to quality services and secured services still need to be properly addressed. With these shortcomings, there is a need to conduct research, then to innovate new cutting edge technology that can help to improve seamless connectivity, especially in terms of quality and secured services, with good levels of safety, and act as an enabler in realizing the vision and transform Malaysia into a high income nation.

To this end, the Malaysian Ministry of Higher Education has initiated a long-term research program to advance the research towards an innovative digital economy environment. The ultimate objective of the program is to produce an advanced computing environment for the intended digital economy enhancement. The focus is on an ensemble computing model. Several sub-projects have been set out in the HoneyBee project under this program, each of which is assigned one aspect of the ambitious endeavour. Various aspects covered by those sub-projects include the semantic models of knowledge in ensembles, including knowledge representation, knowledge discovery and knowledge collection. Theories and tools under these sub-projects are being developed and case-tested. Another aspect considered the development of predictive analytic tools to analyse multivariate patterns for a wide range of applications like digital forensic inspection, intelligent decision support algorithms and inhabitants behaviour prediction. Another sub-project also tackles the impact of human and social factors in the success of reaching a digital socio-economy. Applications and use cases of such an environment are also being investigated by a sub-project under the umbrella of the main HoneyBee project that has far reaching goals and long-term research programme.

Yet, at the heart of the computing environment is the computing platform that supports all previous frameworks and applications. The design and implementation of this platform is the task of a largest core sub project (literally called the HoneyBee project), which comprises several sub-sub-projects to handle the different functions discussed throughout this article. We aim in this paper to outline the design and concepts of the proposed platform to provide a conceptual framework and reference material for the development of the project. Some ideas and few prototypes have already been implemented, and currently the project is the active work in progress phase.

The proposed technology should be viable for future software intensive systems, probably in an environment of ensemble computing. Such an environment is most desirable for the very own characteristics of ensembles, which support a model of decentralized management resembling ad-hoc models. These models will overcome some of the problems that are inherent in a centralized control model. For example, the lack of fixed infrastructure should not prevent people from utilizing their computational resources. People should be able to gain benefit from their computing devices, whether carried by them, or embedded ubiquitously in the environment, everywhere and at any time. Another problem of central control is that it could be a single point of failure which can collapse the whole system. Also, relying on central servers, typically remote from clients, prevents the system from taking advantage of the situational information that relate to the specific situation in which clients are requesting services. Such information could include location and ambient data. This leads to information that might not be most relevant, or timely. Or, it might cause unwise decisions due to this lack of context awareness, especially in critical conditions like an emergency response.

The preference of a decentralized management does not eliminate the need for a kind of central umbrella, where important resources, information, or even power can be accessed from a remote server, the Internet, or another ensemble [2]. A similar theme is the different modes of traditional peer to peer communication, as pure, centralized or hybrid P2P.

In summary, the ensemble computing project is required to develop a platform that progresses towards a more digitized socio-economic environment. This implies the design and implementation of the complete architecture with all its supporting services. For example, ensuring interoperability among heterogeneous nodes might necessitate the design of an adaptor layer to provide a virtual unified platform for the upper layers of middleware and their applications. The middleware should provide for a trusted, secure environment, with all basic functionalities related to communication and optimized resource management. The developed peer to peer protocols will connect the ensemble nodes collaboratively and should contribute to the improvement of mobile communication platforms. Finally, a platform with no applications is a platform of no use. A lightweight, transparent and reconfigurable set of Application Programming Interfaces (APIs) should be provided for an application development to support the digital economy platform.

In this section, we discuss the technical details of the proposed platform. As the focus of the project is mainly on nodes within an ensemble, we need to consider both the structure of the single nodes, and the communication model between the different nodes. Whether to design and implement new techniques, tools, and protocols, or to build upon existing technologies that are well-established, well-researched, and universally available is also discussed in this section. The discussion below takes into account the criteria that nodes of an ensemble are portable, mobile and diverse. These characteristics imply that nodes are of small factor and limited computing and power capabilities, hence energy-efficiency is essential. The mobility also implies that no infrastructure could be granted and that opportunistic connectivity between moving nodes puts into favour a peer-to-peer communication model. The diverse sorts of possible ensemble nodes dictate the seeking for universal technologies, especially in connectivity hardware.

In an ensemble computing environment, various computing devices need to communicate and cooperate efficiently within certain levels of security. This communication could occur to remote resources over the Internet or within an ensemble in a local area. We can therefore assume that single ensemble nodes would be using single or multiple interfaces and/or technologies/standards. There are multiple available enabler technologies in terms of connectivity, both in localized and in wide-area ensembles. Short-range radio technologies readily imply an operational environment for local ensembles, while long-range technologies enable the forming of wider ensembles. The two short-range most researched and widely deployed wireless communication technologies, Bluetooth and Wi-Fi, are strong candidates to fulfil the connectivity requirements for most ensembles. Emerging technologies that are not yet so widely deployed, but have great potential are Ultra-Wide-band (UWB), ZigBee and Near-Field-Communication (NFC).

Bluetooth, sometimes considered the successor of IrDA technology, was introduced in 1994 with the aim to replace wires over short distances, typically the size of a personal area network. The Bluetooth standard operates in the 2.4-GHz frequency band, supports data rates of up to 2 Mbps, has a range of 10 to 100m, no Line-of-Sight restriction, can penetrate walls, and supports point-to-multi-point and ad-hoc wireless connections. On the other hand, although the Bluetooth protocol can discover other devices, the user must distinguish between multiple devices within the range; in contrast, IrDA users can simply point two PDAs at each other and push a button [10]. This suggests the need for additional protocol layers (perhaps in the middleware), if that mode of point-to-point connectivity, similar to IrDA, is desirable by users.

By design, ensembles do not rely on a fixed infrastructure, but operate in a dynamic ad-hoc mode where nodes can form an ensemble and then depart on-demand, as the need arises. Ad-hoc can be regarded as the natural mode for ensembles. An early Ericsson Review article on the Ad-hoc technology stated that Bluetooth is particularly suitable for ad-hoc networking [28], and an evaluation of the efficacy of Bluetooth technology in supporting ad-hoc indoor multimedia traffic shows positive results [29]. One notable difficulty facing ad-hoc networking with Bluetooth is connected to loose specification of scatternet formation. Bluetooth scatternet formation has been researched extensively [30], and several alternative protocols are available to use in our HoneyBee project, where the awaiting selection is to be determined by its suitability for ensemble computing. Simulation can also help in making up such a design decision, and simulation tools for Bluetooth have already been developed. Blueware [31] is a Bluetooth simulation extension for Network Simulator 2 (NS-2), as well as BlueHoc [32].

Wi-Fi, has the advantage of much higher data rates and coverage ranges than Bluetooth, working at rates of up to 600 Mbps, over distances of up to 250m. Wi-Fi nodes consume much more power as they have to replace local wired infrastructure networks. The majority of the Wi-Fi networks operate in the infrastructure mode, where all nodes need to communicate through a physical device, called an access point, with each other, and through to the rest of the wired network or internetwork. Such features do not support the use of conventional Wi-Fi networks in the implementation of an ensemble environment. The later development of the technology by Wi-Fi Alliance allowed for peer-to-peer connection between network nodes, relaxing the requirement of an access point through a technology named Wi-Fi Direct [33]. Beyond portable computers, many mobile devices have this capability, including recently some Android powered devices.

As both Bluetooth and Wi-Fi technologies are widely available in consumer devices, they would be both the major tools of the HoneyBee project, in terms of investigation, support and implementation. It is assumed that the trade-off between the high bandwidth and long range of Wi-Fi versus the low-energy consumption of Bluetooth would form a valid reasoning to resort to either technology, subject to availability and context. The next generation technologies, like UWB and ZigBee will also be considered on a comparative basis. A comparison can be found between Bluetooth and Wi-Fi technologies [34], while a more general comparison can be found between all the four potential wireless technologies, including UWB and ZigBee [35].

Decentralized communication dictates a peer-to-peer model (as opposed to a client–server model), where point-to-point and point-to-multipoint connections could be established among an ensemble's nodes. Our HoneyBee project will utilize the notion of super-peer networks, a network of super-peers and their clients, in which a super-peer is a node that operates both as a server to a set of clients, and as an equal in a network of other super-peers. Applications of traditional P2P systems evolve mainly around the content sharing and searching, and VoIP communications, which is not the typical usage model of ensemble computing for our research. In a recent study, it was observed that existing P2P architectures that support collaborative applications are applicable only under specific conditions, and performs poorly under realistic workloads, which points out the need for novel solution(s) that can effectively aggregate resources in real-world collaborative P2P systems [36]. Therefore, a significant portion of the technical endeavours in this project is to design and implement efficient, but more importantly, effective (in the context of ensemble computing) peer-to-peer communication protocols that build upon the lower level wireless technologies discussed above. These contributions should pay off even in the more overall research framework of MANET and VANET systems. Considering each node in such an ad hoc, peer-to-peer network as a honey bee, the HoneyBee environment can be conceptually depicted as seen in Fig. 2
                     .

The structure of the platform in the individual nodes in the environment is composed of a number of vertical layers. The layered design approach is chosen for a number of key advantages. First, it makes it possible to build the proposed platform on top of the already existing hardware and software technologies, which is an essential requirement in order to accept new solutions. Second, a modular design segregates the development of separate modules that serve different purposes, which has many benefits. It allows for a parallel development of various technologies, saving time, and helping different teams in getting an impression of what other components would look like, so that a feedback is available during the design phase. Another benefit is the modular design isolates design mistakes and later on implementation errors in any layer from the other layers, so there is no single fundamental flaw in the design of the system that could bring the whole system to a halt. Finally, a layered design means that separate layers can evolve independently of the other layers, giving a crucial characteristic of flexibility. A layer could be updated or even replaced by a newer technology to adopt new advancement in the field, or to adapt new requirements, or even to adapt dynamically in real-time to changing environments, a key feature of ensembles, all without affecting the operation of the other parts of the system.

As common in layered design, parallel development dictates a preset specification of interfaces between different layers. Communication between adjacent layers occurs using function calls, called service primitives. Those service primitives might be system calls of the host operating system, custom system calls for the internal use of the middleware, or public application programming interfaces for developer needs. These classes are discussed below along with the platform layers.


                     Fig. 3
                      illustrates the structure of the proposed platform in a single node. The lowest layer is the device hardware layer. Each device has a native host operating system, either proprietary or an open source Operating System (OS), such as the Linux-derived operating systems, e.g. the Android. This diversity of the nodes imposes a challenge for the intended unified platform, which calls for the development of a special intermediate layer in the form of a lightweight OS. This layer uses resources provided by the host OS, and supplies a virtual platform-independent basis for the upper layers. It is basically a thin layer, called adaptor in the figure, to map the system calls of the host OS into unified custom system calls written exclusively to serve its upper layer: the middleware. The rationale behind this layer is that our middleware is a fat layer, with many functionalities, and we want to avoid writing different versions for different host operating system. The adaptor layer would map, for example, native calls to access lower networking layer modules (e.g. NIC drivers) provided by the host OS to consistent function call invoked by the middleware modules on any platform. In a sense, the adaptor's system calls are the interface service primitives between the host OS and the middleware.

In order to ensure that the network and other resources are managed efficiently and resiliently, a special purpose Resource and Network Management layer is also needed. As mentioned earlier, the platform should allow for seamless communication between nodes in an ensemble, in terms of efficient peer-to-peer protocols, including discovery, identification, and authentication of other nodes, ensemble detection and localization capability, connection establishment, ability of reconnection and then disconnection, exchanging data, load balancing, cognitive sensing and energy-efficient routing, within a framework of trusted and secure environment. All these functionalities could be gathered in the middleware layer. As discussed above, the middleware layer makes heavy use of the host OS functions through the adaptor layer interface.

To make the new platform usable for end users, it must fulfil their everyday needs in terms of powerful, intelligent and easy-to-use ensemble applications that run in ensemble environments. According to ubiquitous and invisible computing philosophies, these applications could/should (disappear) in the background; so that in certain situations, there is no need for the user intervention to execute the tasks and applications are totally transparent from the viewpoint of the users. Software developers are reluctant to deal with the intricacies of the middleware, and would certainly demand a set of carefully designed function libraries to write applications for the platform. These libraries are encompassed in the APIs. In a similar argument to the previous layer; the API libraries are a thin layer as an interface between the middleware and the applications layer. The set of function calls in this layer comprises the service primitives to be invoked by the developers from the most upper layer. Applications can still access the host OS's API, as our platform cannot substitute all their functions.

A key issue in the design of the HoneyBee platform is what model to follow in programming the ensemble nodes. Based on the research in distributed computing, and considering the intelligence required in ensemble nodes, it seems that a node could be associated with the notion of an intelligent agent, in Multi-Agent Systems (MAS) [37]. An Intelligent Agent (IA), in the context of an artificial intelligence field, is an autonomous entity which observes through sensors and acts upon an environment using actuators towards achieving goals, and may also learn or use knowledge to achieve their goals. Implemented in software, we obtain software agents. A Multi-Agent System can be defined as a loosely coupled network of agents that interact to solve problems that are beyond the individual capabilities or knowledge of each agent [38]. The characteristics of MASs are that each agent has incomplete information or capabilities for solving the problem and, thus, has a limited viewpoint; there is no system global control; data are decentralized; and computation is asynchronous [38]. Due to their partial information and decentralized nature, implementing MAS must be made secure [39].

The application development on the HoneyBee platform will be based on the concept of Enhanced Intelligent Multi-Agent System, where a number of enhancements are introduced to the current multi-agent systems. For example, the system comprises a very large number of agents; agents can be connected to the Internet; agents can be connected to many different ad-hoc networks; openness whereby systems involve heterogeneous agents; non-deterministic — agents can join or leave a network at any time; and integration of situational information. The HoneyBee project can benefit from a substantial amount of research in the field of MASs, for example, studies related to traditional applications (e.g. transport [40]), studies investigating teamwork management among software systems (e.g. a honey bee-inspired teamwork architecture [41]), or even recent proposals for MAS environments in the context of cloud and peer-to-peer ad hoc networks [42].

To place the proposed HoneyBee platform in the right perspective, Fig. 4
                      depicts the position of the platform in a wider context, where each device node is of the layered platform architecture shown in Fig. 3. This context includes other sibling components of the HoneyBee project's father programme, with the overall aim of providing an innovative digital economic environment, in the framework of Smart City/Smart Village project, as discussed in the next section. One final detail that relates to the implementation of the proposed platform is about initial prototyping of the system, which will have to support a portion of the widely diverse collection of available consumer-based mobile devices. A reasonable decision is to head for smartphones, as they are widely used, equipped with enough computation power to act as software-intensive systems, and their usage models match those of the ensemble computing vision. Android platform, as the host platform, is chosen to deploy the first prototypes of the system. Android has the lion's share of smartphones' market [42], and more importantly an open source platform, and is embraced by a large number of heterogeneous devices from various manufacturers. Many researchers have focused on Android from many different aspects that could feed the research in this project, for example, efforts to create mobile ad hoc networks with Android smartphones [43]. Regarding the API libraries, Java is adopted as a medium of application development in the context of MASs. JADE (Java Agent DEvelopment framework) is quite a popular software framework middleware for the development of applications, both in the mobile and fixed environment, based on the Peer-to-Peer intelligent autonomous agent approach.

In this section, we present the research environment in which the new platform is deployed and tested, in terms of a test scenario or case study, to validate the developed ideas. We first discuss the applications that the HoneyBee project can support. These applications will be demonstrated to showcase sustainability of the ensemble digital economy environment. Then we discuss a particular case study to experiment with the initial prototype platform.

The Smart City-Smart Village project is an initiative of Malaysia's Global Science and Innovation Advisory Council (GSIAC) that aims at balancing development in the urban and rural areas, focusing on the use of Green Technology and Information and Communications Technology (ICT). The goal of the initiative is to improve everything from energy use to healthcare, education, traffic and shopping by doing it ‘smart’ with the help of ICT and Green Technology [44]. This application framework is the target showcase of the HoneyBee project, where several areas could demonstrate the potential of an ensemble environment as in home automation and waste management (the scenario of waste truck movement within the city area, which includes scheduling, avoiding traffic congestion, and billing transactions.)

As a more specific case study, we consider the mapping devices used by people on city roads. To find the direction in a city, most cars are now equipped with mapping devices. Alternatively, drivers can use mapping software on the mobile devices, e.g. Google Maps for Android. The problem arises in the case of traffic congestion. Drivers currently have to adjust the route manually based on traffic information that is centrally controlled, where it is fed from sensors and cameras placed at various locations. The central monitoring station will then advise the drivers by relaying notices at some places. This approach involves several major drawbacks: for devices depending on GPS readings, the problem is lost satellite signals, and even if the signals are back, the long delay of re-calculating is still significant. During emergency situations, as that for an ambulance with the siren on, this delay might not be acceptable. Another problem is that the latest maps need to be updated, which might not always be feasible.

In such scenarios, we can envision the cars driving in traffic in a city, as an example of an ensemble environment that can be operated by the HoneyBee platform (Fig. 5
                     ). Various nodes exist: cars, sensors, and mobile devices. Nodes can communicate with a central server and obtain the information from various sources through the Internet; or, nodes can communicate between one another within an ad-hoc network based on P2P protocol; in such a case, information can be obtained in real time. Also, it is possible to consult the Integrated Transport Information System (ITIS) website for real-time traffic information in Kuala Lumpur and in Klang Valley and to incorporate the ITIS system with other available nodes. This setting resembles to some extent the experience of Facebook. Previously, information and news were obtained from central sources (e.g.: newspapers, TV). With Facebook, information and news are obtained from peers, so that they are localized, up-to-date, relevant, but may not be reliable. Similarly, more accurate information can be obtained for mapping devices by combining the information from the central servers (e.g. ITIS), and the information from their peers. Information from peers could be obtained directly from other cars, sensors, or from twitters.

The HoneyBee is a large scale project undertaking with many technical, scientific and operational challenges ahead of us. Within the confines of the proposed advanced computing environment of the HoneyBee project, the principal goal is to investigate and implement a new functional layered model of the common mobile platform with secured and trusted ensemble computing complex for an Innovative Digital Economic Environment in the Malaysian context. The significant aspects of this complex from the advanced computing point of view and their challenges are presented below.

The need for an operating system brings in considerable challenges, as much as designing an OS can impose, though the fact that this is a lightweight layer with the main purpose of imposing compatibility with various platforms makes the task less daunting. Most standard features of an operating system are provided by the host OS of different nodes, e.g. Android for Android powered nodes. Problems start to loom when some applications in an ensemble scenario demand peculiar features that are not usually guaranteed in every native operating system. A valid example of such a feature is the requirement of real-time applications; for example, if sensors embedded in ensembles are utilized on the road to detect pedestrians or other moving vehicles can prevent accidents with a very tight time constraints. Research of such requirements relative to popular platforms, such as the Android, is already taking place [45].

Both higher level development APIs and end-user friendly HCI are challenging. API level involves creating transparent applications not to be disturbed by programming cryptic and excessive details. Other than that, parameter exchanges such as cryptographic security functions and connectivity primitives need to be considered as well. At the end-user friendly level, creating transparency to use important underlying functions such as security, privacy, and file transfer needs to be easy to use and accessible. Usability of the system bears more challenges, where user interface should be minimal, adaptable, and even disappear altogether if no user intervention is required.

In an open innovative environment such as the ensemble environment, several safety measures are needed: security, privacy and audity. In a model based on coordination and cooperation, trust must be established between nodes to fulfill collaborative tasks. Given the ephemeral nature of ensembles, establishing trustworthiness is more challenging in such an environment than in traditional networks. A centralized entity for authorization is not typically feasible, and preconfiguration of nodes is not practical due to the inherent mobility and spontaneous nature of ensemble nodes. One possible approach is to make use of the existing research on trust establishment in mobile ad-hoc networks [46].

A software agent is a piece of software that executes on behalf of a program enacting the role of a process or end-user program. A Mobile Agent (MA) is a software code downloaded from remote systems via a network and then executed on a local system without explicit installation or execution by the recipient. A mobile software agent is, therefore, a computational entity which is able to operate autonomously (without human intervention) and with great flexibility (react responsively in a pro-active and responsible sociable behavioral manner) in a dynamic, information-filled and unpredictable environment which is also inhabited by other mobile agents and associated processes. The main achievements of the software agent technology include frameworks and platforms based on standardized languages and architectures for agent system development. Implemented software agents have attractive features such as intelligence, adaptability, communicability and compatibility, autonomy and mobility, but they lack safety measures.

An example of a masquerading intelligent mobile agent is a Web-based search agent which manoeuvres about retrieving desired e-market information against a given profile by its initiator boss. The mobile agent is instructed what to look for, and then dispatched to carry out the search and return with the information. This level of intelligent knowledge operation implies that agents can be implemented and managed to operate in any way they want, albeit, either legitimately or in an illegitimate manner. Those that operate illegally are a serious risk, threat, or abusive and cause damage in an open heterogeneous environment.

HoneyBee, comprising of mobile agents, underlying platforms, host computers, devices and infrastructures, should be trusted, need to be protected from abuse, secure from threats, safe to use, protect the user and provide privacy if necessary, and above all, be identifiable and auditable. All of these different aspects combined as requirements are essential for a secure, trusted and safe mobile agent-base e-business environment to operate successfully, regardless of the end-user application. The main security challenges facing HoneyBee are:
                           
                              •
                              The protection of all the resources, platforms or hosts that permit mobile agents to operate against these kinds of attacks which can harm or use their resources without guards, access rights or permission.

Respect the privacy of the ultimate human users of the system.

The essential protection necessary to guard mobile agents against malicious hosts that might alter or forge information it carries when it visits hosts in its application mobility itineraries.

Currently there are several methods to provide protection, such as sandboxing, authentication, authorization, proof-carrying code, and e-payment check, but they are not sufficient to make the e-marketplace completely secured and auditable because of illegitimate side channel operations. Other examples of safety measures which the mobile agent system has to overcome are:
                           
                              •
                              Masquerading: MA poses as another agent to gain access to services or data at a host.

False Identity: Host assumes a false identity in order to lure MAs, or MAs use false identities to defraud the host and infrastructure services.

Denial of Service: MAs may attempt to consume or corrupt resources of a host to preclude other MAs from accessing the host's services.

Hosts can ignore an MA's request for services or access to resources due to overload or inappropriate supply of credential information.

Unauthorized Access: MAs can obtain access to sensitive data by exploiting security weaknesses.

Interference: MA interferes with one another to gain access to data, corrupt it, disable it or force it to rerun.

Eavesdropping: Host can inspect MAs that are interpretive to obtain their internal algorithms and data, such as the maximum price the MA's owner is willing to pay for an item in an e-marketplace trade.

Alteration: Hosts can change an MA's internal data, results or profile from previous processing to influence the MA's behavior or decision in an e-marketplace trade.

Repudiation: After agreeing to some contract, an MA can subsequently deny that any agreement ever existed or modify the conditions of the contract to undermine e-marketplace trading.

Authentication: The ability to authenticate the identity of the owner (who holds authority) of an MA in a transparent and non-obtrusive manner.

Privacy: The ability to ensure anonymity, unobservability, pseudonymity and reputation of an owner of an MA with proper identity management verification and validation.

MA Tracking: The ability to track and locate MAs that have migrated to other computers or masquerading in either a fraudulent or an accidental manner.

MA Management: The ability to manage a collection of MAs in a multi-agent mobile system across autonomous boundaries and critical infrastructures.

In general, safety measures in the broadest sense are difficult to provide and are not always important for some mobile applications. Many, if not most applications, do not need these problems solved. For example, many simple applications like surfing the Internet by normal users for leisure holiday packages which do not impeach on the user's rights or the system's behavior do not need any major safety measures other than simple malware and spam control. While those applications requiring them need to protect the host from malicious mobile agents such as viruses and Trojan horses that covertly visit them and consume their resources in a pure or clone form. Some of the security, privacy and trust challenges may have limited or little impact on some applications. But in an open Innovative Digital Economic Environment in the Malaysian context, safety measures such as:
                           
                              •
                              Mobile peer-to-peer trustworthiness.

Concept of negotiation-contract approach in order to increase the level of trust.

Security

Intrusion Detection and Prevention Systems (IDPS)

Trust

Privacy and Identity Management

Audit

Digital forensics

They are needed as found from our initial research analysis of applications and critical infrastructures, with particular emphasis on Collective Collaborative-IDPS (CCIDPS) in cloud computing environments and smart grid critical infrastructures [47].

To ensure acceptance of the new model, it will also require both de facto and non-de facto regulatory and standards bodies, governments and industry to address the safety measures' issues to synthesize legislations, directives and guideline for the open Innovative Digital Economic Environment as part of a comprehensive deployment strategy.

Being an ensemble computing enabler, the HoneyBee platform, is expected to support a variety of applications in a variety of contexts. Availability of nodes equipped with sensors and computing power everywhere ubiquitiously also implies the variety of expected scenarios, each with its own context and data. This sheer amount of embedded knowledge in everyday usage cases calls for clarity and sensibility, leading to the challenges extracting semantics and building suitable ontology.

One of the challenges ahead of us in the HoneyBee project is to harmonize the semantic knowledge and ontologies within the advanced computing environment. It requires a general framework and architecture with exemplary techniques into a multi-disciplinary inter-related environment.

In order to design an effective resource management techniques, there is a need to perform several measurements related to the performance of ensemble nodes in action. Various factors may affect the perfomance of the ensemble. Some of the factors relate to the nodes themselves, such as limited resources in term of computing power and energy. Other factors are associated with the communication between nodes, such as interference and weak signals. The challenge is to set up adequate testbeds and/or simulations, and perform adequate measurements to fine-tune the HoneyBee performance. It is quite important to comprehend how the complex systems that we build actually operate. This requires basic research on ensemble modelling and simulation with the ability to prove that the simulation models reflect the real world as accurately as possible. For example, in order to derive the fundamental laws on network dynamics and control or to evaluate the ultimate capacity of self-organized wireless networks, we need simulation. It also requires advances in network measurements and performance analysis such as traffic statistics, Internet probing and measurement, dynamic display of network performance network inference and detection of service and intrusion anomalies.

We are moving from a Web of documents to a Web of services and Web of knowledge and beyond. This has triggered an explosion of new social-oriented applications such as Tweeter, FaceBook and LinkedIn. And there is more to come, with augmented reality, virtual worlds, real-time games and telepresence. New concepts such as service make-up and orchestrations are also emerging, and with them, new business models and processes. A good example is the iPhone and Samsung SIII which today already has more than several hundred thousand applications available for use. Such scenarios are a matter of concern for the HoneyBee project.
                        

Wireless mesh networks enable denser coverage and higher data rates than traditional wireless local area networks (LANs), while significantly lowering the deployment and operation costs, compared to cellular-based networks, e.g. CDMA and HSDPA. These cost reductions combined with symmetric bandwidth for uplink/downlink communication will make wireless mesh networks a key architecture for future IP-based radio access networks, enabling innovative pervasive services based on ubiquitous broadband access. Community mesh wireless nets are becoming pretty widespread in some areas as an alternative to expensive cellular data services. Such wireless mesh networks combine three key features: (i) the use of wireless transmission, (ii) the multi-hop nature of the end-to-end communication, and (iii) the availability of multiple paths. While each of these features raises a host of technical issues, at the same time they provide those advantages that make wireless mesh networks appealing. For instance, wireless transmission offers ubiquitous coverage for both stationary and mobile users; multi-path communication provides dependability in terms of increased network availability and reliability of wireless access to the Internet; and wireless multi-hop communication enables operation with reduced interference and low management costs. There is much research to be done in this significant elusive area of scientific, engineering and technical work which impinges upon the HoneyBee project.
                        

Future core networks will leverage IP over simple, super-fast optical core networks. A major trend is that of virtualization, featuring the construction of optimized virtual networks that answer the needs of a collection of users or applications with the ability to self-configure themselves at an instant using advanced autonomic service engineering techniques. A wide variety of wired and wireless access networks are available or being developed: FTTH/FTTO (Fiber To The Home/Fiber ToThe Office) in the wired domain, and 3G/CDMA, LTE, WiFi, WiMax and Satellite in the wireless setting. 4th Generation or beyond 3G, is the next level of evolution in the field of wireless communications. It is being developed to accommodate the Quality of Service (QoS) and rate requirements set by forthcoming applications like wireless broadband access, Multimedia Messaging Service (MMS), video chat, mobile TV, HDTV content, Digital Video Broadcasting (DVB), minimal services like voice and data, and other streaming services for “anytime-anywhere”. As Internet protocols grow in number and complexity each year, we need assurance that systems implementing them will behave correctly against a certificate of conformance test for the Internet and its telecommunication infrastructure to operate reliably. There is a wealth of research, development and business opportunities awaiting the members of the HoneyBee Consortium to fulfil the goals of the HoneyBee project.
                        

The Internet started by connecting computers and users to information, and then went on to connect users to each other with audio, video, games and social networking tools. Now the rapid evolution of pervasive, embedded networked devices means that we connect various types of devices to each other. From a management point of view, and given that there are far more computers in the world embedded in everyday objects (cars, domestic appliances, smart social networking devices, etc.) than there are on desktops. The interconnection of the Internet with the physical world through sensors and agents and the tagging of industrial production by RFIDs and other similar technologies will lead to new traffic and architecture challenges, with possibly hundreds of billions of new devices that will collect information and will have to be upgraded and managed remotely and conveniently in a flawless manner. This requires new paradigms for routing, search, naming, maintenance, data survival, robustness, fault-tolerance and reliability, which are all applicable to the HoneyBee project.
                        

Finally, a concern for the HoneyBee project is the case where ensembles expand in size and span a wide area network. In such cases, users may demand access to the Internet, Web and Cloud Computing services beyond the access to other ensemble nodes. Given the evolving Web knowledge, Web and Cloud Computing services, this only contributes to the challenges involved in a successful implemetation of the project.

@&#CONCLUSION@&#

In this paper, we have discussed the evolution from the ubiquitous/pervasive paradigm into the ensemble computing, motivated by the mobile, dynamic and heterogeneous network nodes and architectures. We have outlined the HoneyBee project, which is based on an ensemble computing platform to support the future of the Digital Economy trend in Malaysia. Based on the research discussed above, we identified a clearly defined approach by outlining the architecture of an innovative Digital Economy platform. We also proposed the concept of an Enhanced Intelligent Multi-Agent System as the main platform to support the application development. Our future work involves the design and development of the peer-to-peer routing, decentralized resource management, security and digital forensics protocols. These would span different middleware and API layers. An application based on the Digital Economy environment will be developed to validate the feasibility, behaviour and performance of the proposed HoneyBee architecture.

@&#ACKNOWLEDGMENT@&#

This work is supported by the Ministry of Higher Education, Long-Term Research Grant Scheme (LRGS/TD/2011/UKM/ICT/02).

@&#REFERENCES@&#

