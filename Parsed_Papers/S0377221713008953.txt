@&#MAIN-TITLE@&#Operational aircraft maintenance routing problem with remaining time consideration

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A new ILP model is proposed for the operational aircraft maintenance routing problem.


                        
                        
                           
                           Regular connection network is modified to keep track of remaining times of aircrafts.


                        
                        
                           
                           OAMRP is solved by using exact (B&B) and heuristic (compressed annealing) methods.


                        
                        
                           
                           Compressed annealing yields high quality routings within a reasonable amount of time.


                        
                        
                           
                           Aircraft initial conditions, airport capacities & booked maintenances are considered.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

OR in airlines

Integer programming

Metaheuristics

Compressed annealing

@&#ABSTRACT@&#


               
               
                  The aircraft maintenance routing problem is one of the most studied problems in the airline industry. Most of the studies focus on finding a unique rotation that will be repeated by each aircraft in the fleet with a certain lag. In practice, using a single rotation for the entire fleet is not applicable due to stochasticity and operational considerations in the airline industry. In this study, our aim is to develop a fast responsive methodology which provides maintenance feasible routes for each aircraft in the fleet over a weekly planning horizon with the objective of maximizing utilization of the total remaining flying time of fleet. For this purpose, we formulate an integer linear programming (ILP) model by modifying the connection network representation. The proposed model is solved by using branch-and-bound under different priority settings for variables to branch on. A heuristic method based on compressed annealing is applied to the same problem and a comparison of exact and heuristic methods are provided. The model and the heuristic method are extended to incorporate maintenance capacity constraints. Additionally, a rolling horizon based procedure is proposed to update the existing routes when some of the maintenance decisions are already fixed.
               
            

@&#INTRODUCTION@&#

Operations research methods are widely used for different planning and scheduling problems in the airline industry. These problems can be divided into four major classes: Flight scheduling, fleet assignment, aircraft maintenance routing and crew scheduling (Liang & Chaovalitwongse, 2009). In general terms, the flight scheduling problem deals with the scheduling of flights so that the market demand is met. The fleet assignment problem sorts out the assignments of plane types to fleets for predetermined flights with the aim of maximizing the total profit. While the crew scheduling problem tries to handle the assignments of crew members to each aircraft, the aircraft maintenance routing problem (AMRP), which is the main focus of this study, deals with arranging routes for the aircrafts so that the maintenance regulation constraints are not violated. Although all of these problems have been widely studied for the last few decades, the challenge remains due to high complexity of airline networks and increasing size of the industry.

There are established thresholds for the number of consecutive flight days and the number of operating hours for an aircraft beyond which a predetermined maintenance check must take place. The maintenance checks have different frequencies and durations depending on their type (Clarke, Johnson, Nemhauser, & Zhu, 1997). A type A check is repeated every 65–125hours of flying or every week and it involves visual inspection of major systems for about eight hours. A type B check is repeated every 300–600hours of flying and lasts around 1–3days. Type C and type D checks are repeated once in every one to four years and they can be only completed at specialized hangars in about one month (Sriram & Haghani, 2003). AMRP addresses short-term maintenance requirements with shorter maintenance frequencies. The rationale behind this is that longer checks which are less frequent directly affect the fleet capacity; hence, such maintenance checks must be considered while solving the fleet assignment problem.

Among the many studies that deal with AMRP, most of the early ones address the problem at a more tactical level, ignoring the operational level constraints and dynamic issues. In these studies, the aim is to find a unique rotation of flights (starting and ending at the same location) that will be repeated by each aircraft in the fleet with a certain lag. In practice, using a single rotation for the entire fleet may not be applicable due to stochasticity and operational considerations in the airline industry. Thus, AMRP has also been addressed at a more operational level to assign maintenance feasible flight sequences to each individual aircraft (identified by its tail number) of a given fleet by considering the current states of the aircrafts while covering all the flights in the flight schedule over a short-term planning horizon. A route is maintenance feasible when it contains no maintenance-free segment of flights whose accumulated duration is larger than the remaining time of the corresponding aircraft. The remaining time of an aircraft is defined as the difference between legal flying hour limit, which is the amount of time allowed between consecutive maintenance operations, and the accumulated flight duration since its last maintenance operation. In this study, our aim is to develop a fast and responsive methodology to solve the operational aircraft maintenance routing problem (OAMRP). For this purpose, a new ILP formulation is proposed for OAMPR. After attempting to solve this new model by exact methods, a heuristic method based on compressed annealing (CA) is proposed. The performance of the CA heuristic is validated with respect to exact solutions on a relatively small real-life flight network, then its applicability to larger networks is shown by using examples from the literature. Furthermore, the model and numerical examples are extended to incorporate capacity considerations for the maintenance facilities. Lastly, a rolling horizon based procedure is proposed to update the existing routes when some of the maintenance decisions are already fixed.

The paper is organized as follows: In Section 2, we present a literature review about AMRP and discuss the contributions of our study. In Section 3, OAMRP model is described and the new ILP formulation is proposed. In Section 4, the exact and the heuristic methods are presented in detail. Section 5 covers the numerical experiments and the comparison of the proposed methods. In Section 6, maintenance capacity related extensions are presented and a rolling horizon based routing method is introduced along with a discussion about the applicability of the heuristic method in real life. In Section 7, concluding remarks are provided.

@&#LITERATURE REVIEW@&#

In this section, we briefly describe and discuss some of the major studies in AMRP; however, one can refer to the surveys of Etschmaier and Mathaisel (1985), Gopalakrishnan and Johnson (2005) and Sherali, Bish, and Zhu (2006) for the flight scheduling, the fleet assignment and the crew scheduling problems, respectively. The focus of AMRP related studies can be operational or tactical. The studies with tactical focus find a unique rotation which can be repeated by the aircrafts in the fleet while ignoring the initial conditions of the aircrafts and dynamic changes (cancellations or delays) in the airline industry. At the operational level, all restrictions must be obeyed because the solutions at this level determine the plans to be followed in real life.

In some early studies, Daskin and Panayotopoulos (1989) present an ILP formulation to assign aircrafts to routes in a hub-and-spoke network with the objective of maximizing profits. Feo and Bard (1989) present a model that aims to both locate maintenance stations and develop flight schedules which better meet the cyclical demand for maintenance with minimum cost. Clarke, Hane, Johnson, and Nemhauser (1996) try to generalize the fleet assignment model of Hane et al. (1995) by considering maintenance and crew restrictions.

On the tactical side of AMRP, Kabbani and Patty (1992) propose a set partitioning model to solve the 3-day maintenance routing problem. Assuming that the checks are performed overnight, they generate over-the-day routings also known as lines of flight. After fixing over-the-day routings, they connect the route segments to solve their original problem. Gopalan and Talluri (1998) use lines of flight (LOF) logic of Kabbani and Patty (1992) on the k-day maintenance routing problem and develop a polynomial time algorithm for 
                           
                              k
                              =
                              3
                           
                        . They prove that even 2-day maintenance routing problem becomes NP-Hard when LOFs are not fixed and Talluri (1998) shows that 4-day maintenance routing problem is NP-Hard even with fixed LOFs. Clarke et al. (1997) use Lagrangian relaxation (LR) to find a unique, maintenance feasible rotation which yields the largest total through value where through value is defined as the total benefit obtained by connecting certain flights. Mak and Boland (2000) formulate AMRP as an asymmetric traveling salesman problem with replenishment arcs where a replenishment arc denotes a connection during which a maintenance operation can take place. They use LR to obtain lower bounds and simulated annealing (SA) to obtain upper bounds. Their SA method allows infeasible flight connections in solutions, but penalizes them with a large penalty cost. Liang, Chaovalitwongse, Huang, and Johnson (2011) consider k-day maintenance routing problem assuming that maintenances are overnight operations and the flight schedule is repeated every day. They construct a compact representation of time–space network, Rotation Tour Network (RTN), and propose a new ILP formulation based on their new representation.

On the operational side, Argüello and Bard (1997) propose a greedy randomized adaptive search procedure (GRASP) to reconstruct aircraft routings in response to dynamic changes in the airline industry with the objective of minimizing costs incurred by flight cancellations and delays. The focus of the paper is not directly on maintenance. Sriram and Haghani (2003) use Origin Destination (OD) pairs similar to LOFs. Assuming that the OD pairs are already given and maintenances are overnight operations, their aim is to determine individual aircraft assignments to the routes that yield the minimum total cost. One of the proposed models in this study tries to keep track of the remaining flying times; however, the authors do not attempt to solve that model owing to its size. Afsar, Espinouse, and Penz (2006) determine routes for aircrafts to satisfy the already scheduled long-term maintenance checks over an acyclic horizon. Due to stochasticity, they do not fix routes several weeks in advance; instead they prepare the plan based on a rolling horizon of one week. They propose a two-step heuristic approach where the first step deals with critical aircrafts which have to undergo maintenance operations soon and the second step deals with the non-critical ones. In Afsar, Espinouse, and Penz (2009), different heuristic methods, including SA, and priority rules for non-critical aircraft selection are applied to the same problem. Note that the maintenance operations of the critical aircrafts are assumed to be already scheduled in these studies and the problem becomes easier with such an assumption. Grönkvist (2006) uses constraint propagation in order to accelerate the column generation for the tail assignment problem, which is closely related to OAMRP. Sarac, Batta, and Rump (2006) propose a set partitioning based formulation to minimize total daily maintenance costs without violating the flying hour limit of each aircraft. Their model considers maintenance resource availability and legal remaining times of aircrafts. Since the set partitioning based formulation contains exponentially many variables each of which represents a feasible route, column generation technique is used as the solution procedure. The time horizon of the model is one day and as stated in the study, longer time horizons can better utilize remaining times of aircrafts. In a more recent study, Haouari, Shao, and Sherali (2012) develop a polynomially sized nonlinear model for the same problem. They linearize the nonlinear model by using reformulation–linearization technique and obtain high quality results for fairly large instances. Orhan, Kapanoglu, and Karakoc (2011) propose an ILP which maximizes the utilization of the remaining times with respect to given maintenance schedules. Reiners, Pahl, Maroszek, and Rettig (2012) develop an auto-adapting algorithm that is based on genetic algorithm to solve ARP with the objective of increasing profits and robustness. They relate the robustness to the probability of propagated delays and decrease this probability by enhancing the planned parking between consecutive flights in the routes.

There are also some studies which focus on solving different phases of the airline scheduling simultaneously. Barnhart et al. (1998), Desaulniers, Desrosiers, Dumas, Solomon, and Soumis (1997), Haouari, Aissaoui, and Mansour (2009), Jiang and Barnhart (2009) and Sosnowska and Rolim (2001) aim to solve the integrated fleet assignment and aircraft routing problem. In the studies of Cordeau, Stojković, Soumis, and Desrosiers (2001), Klabjan, Johnson, Nemhauser, Gelman, and Ramaswamy (2002), Cohn and Barnhart (2003), Mercier, Cordeau, and Soumis (2005), Mercier and Soumis (2007), Gabteni and Grönkvist (2008) and Weide, Ryan, and Ehrgott (2010) the crew scheduling problem and AMRP are solved simultaneously to increase cost benefits. Sandhu and Klabjan (2007) integrate the fleet assignment, the aircraft routing and the crew pairing problems while neglecting the maintenance constraints. In some of the more recent studies, Díaz-Ramírez, Huertas, and Trigos (2013) solve the flight scheduling and the maintenance routing problem simultaneously for small, single-fleet airlines assuming that the maintenance operations are handled overnight. Liang and Chaovalitwongse (2012) study weekly AMRP and fleet assignment problem with the same assumption by using the RTN structure from Liang et al. (2011). Sherali, Bae, and Haouari (2013) integrate the flight scheduling, the fleet assignment and the aircraft routing problems while considering aggregate level maintenance constraints and use Benders’ decomposition-based method to solve the resulting large-scale model.

In the scope of our study, the duration of a maintenance operation is assumed to be deterministic and the scheduling of tasks within a maintenance operation is not considered. One can refer to the artificial intelligence approaches of Marseguerra, Zio, and Podofillini (2002), Quan, Greenwood, Liu, and Hu (2007) and Papakostas, Papachatzakis, Xanthakis, Mourtzis, and Chryssolouris (2010) for further discussions regarding the scheduling of maintenance tasks.

The focus of this study is on OAMRP and the contribution of the paper is at least twofold. Firstly, as opposed to the set partitioning based formulations which contain exponentially many variables, our formulation uses a polynomial number of variables and constraints. It also keeps track of the remaining times of the aircrafts with the help of a slight modification on the flight connection network. Secondly, the weekly time horizon of the model is fairly long for the operational perspective and we do not have simplifying assumptions regarding the maintenance frequency. Most of the OAMRP studies focus on daily route assignment which reduces the opportunities for better utilization of the remaining time. On the other hand, the studies with longer planning horizons (generally weekly) ignore the remaining times of the aircrafts and consider maintenance operations as in the multiday maintenance routing problem to avoid the complexity of time tracking. In addition to these contributions, an extension, which facilitates the use of our proposed solution procedure on a rolling horizon basis, is provided to obtain updated routes whenever necessary by incorporating current status information and fixing some of the previous decisions. This feature enhances the applicability of the proposed method in real-life. Lastly, CA is applied to OAMRP for the first time and it generates high quality solutions in a short time enabling it to cope with the dynamic environment of the airline industry.

The proposed OAMRP formulation aims to assign maintenance feasible routes to each aircraft in the fleet while maximizing the utilization of remaining times. If an aircraft with positive remaining time undergoes a maintenance operation, then a portion of flight capacity is wasted and moreover the parts that need to be replaced during the maintenance are replaced before fully utilizing their useful lives. Denoting the wasted duration as unused legal flying time of the corresponding aircraft, maximizing the utilization of remaining times becomes equivalent to minimizing the unused legal flying times. As discussed in Sarac et al. (2006), the unused legal flying time minimization can be considered as a surrogate for the cost minimization.

The connection network is one of the most widely used network structures in aircraft routing (Gopalan & Talluri, 1998; Liang & Chaovalitwongse, 2009). The nodes in the network represent the flight legs in the flight schedule. The arcs, which connect the nodes representing the flights, can be elements of either the ordinary arc set, O, or the replenishment arc set, R. There is an ordinary arc, 
                           
                              ord
                              (
                              i
                              ,
                              j
                              )
                              ∈
                              O
                           
                        , between flight leg i and flight leg j if the arrival airport of flight leg i and the departure airport of flight leg j are the same and, there is a sufficient amount of time to prepare the aircraft for the next flight between the arrival time of flight leg i and the departure time of flight leg j. If the corresponding airport is a maintenance airport and the amount of the time between flight legs i and j is sufficient for a maintenance operation, then there is also a replenishment arc, 
                           
                              rep
                              (
                              i
                              ,
                              j
                              )
                              ∈
                              R
                           
                        , between flight legs i and j.

In order to keep track of the accumulated flight durations of the aircrafts, the model needs to distinguish whether a flight is covered before a maintenance operation or after it. For this reason, the connection network is slightly modified by using ordinary arc duplication. The ordinary arcs of the connection network are duplicated so that each connection is represented with a pair of ordinary arcs with different labels: before maintenance and after maintenance. In other words, O is duplicated, resulting in two ordinary arc sets 
                           
                              
                                 
                                    O
                                 
                                 
                                    bm
                                 
                              
                           
                         and 
                           
                              
                                 
                                    O
                                 
                                 
                                    am
                                 
                              
                           
                         both of which represent exactly the same connections; however, arc 
                           
                              
                                 
                                    ord
                                 
                                 
                                    bm
                                 
                              
                              (
                              i
                              ,
                              j
                              )
                           
                         in 
                           
                              
                                 
                                    O
                                 
                                 
                                    bm
                                 
                              
                           
                         indicate that the corresponding flight connection is done before maintenance whereas the arc 
                           
                              
                                 
                                    ord
                                 
                                 
                                    am
                                 
                              
                              (
                              i
                              ,
                              j
                              )
                           
                         in 
                           
                              
                                 
                                    O
                                 
                                 
                                    am
                                 
                              
                           
                         indicate that the connection is done after maintenance. The replenishment arcs remain the same for the modified network.

In this section, we propose a multi-commodity network flow based ILP formulation for OAMRP with remaining time consideration. The summary for the definitions of sets, parameters and decision variables used in the formulation can be seen in Table 1
                        .

Decision variables 
                           
                              
                                 
                                    x
                                 
                                 
                                    ijk
                                 
                              
                              ,
                              
                              
                                 
                                    y
                                 
                                 
                                    ijk
                                 
                              
                           
                         and 
                           
                              
                                 
                                    z
                                 
                                 
                                    ijk
                                 
                              
                           
                         represent the arcs in sets 
                           
                              
                                 
                                    O
                                 
                                 
                                    bm
                                 
                              
                              ,
                              
                              R
                           
                         and 
                           
                              
                                 
                                    O
                                 
                                 
                                    am
                                 
                              
                           
                         for each aircraft respectively. An aircraft k is considered to be critical, 
                           
                              k
                              ∈
                              C
                           
                        , if its initial remaining time, 
                           
                              
                                 
                                    D
                                 
                                 
                                    k
                                 
                              
                           
                        , is less than the length of the longest route of the connection network in terms of the accumulated flight duration, L, and non-critical, 
                           
                              k
                              ∈
                              
                                 
                                    C
                                 
                                 
                                    ′
                                 
                              
                           
                        , otherwise. In other words, a critical aircraft is an aircraft that may undergo a maintenance operation within the current planning horizon. Clearly, a non-critical aircraft does not need a maintenance operation within the current planning horizon even if it is assigned to the longest route in terms of accumulated duration; therefore, it is not necessary to define 
                           
                              
                                 
                                    x
                                 
                                 
                                    ijk
                                 
                              
                           
                         and 
                           
                              
                                 
                                    y
                                 
                                 
                                    ijk
                                 
                              
                           
                         variables for such an aircraft. This leads to a significant decrease in the number of decision variables in the formulation. The mathematical model of OAMRP with remaining time consideration (OAMRP-ILP) is as follows:
                           
                              (1)
                              
                                 min
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          ∈
                                          C
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                r
                                             
                                             
                                                k
                                             
                                          
                                          
                                             
                                                D
                                             
                                             
                                                k
                                             
                                          
                                          -
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   ∈
                                                   I
                                                
                                             
                                          
                                          
                                             
                                                d
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            j
                                                            ∈
                                                            S
                                                            (
                                                            i
                                                            )
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         ijk
                                                      
                                                   
                                                   +
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            j
                                                            ∈
                                                            
                                                               
                                                                  S
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            (
                                                            i
                                                            )
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         y
                                                      
                                                      
                                                         ijk
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          B
                                          (
                                          k
                                          )
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                x
                                             
                                             
                                                ojk
                                             
                                          
                                          +
                                          
                                             
                                                y
                                             
                                             
                                                ojk
                                             
                                          
                                          +
                                          
                                             
                                                z
                                             
                                             
                                                ojk
                                             
                                          
                                       
                                    
                                 
                                 =
                                 1
                                 
                                 k
                                 ∈
                                 C
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          B
                                          (
                                          k
                                          )
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       ojk
                                    
                                 
                                 =
                                 1
                                 
                                 k
                                 ∈
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       itk
                                    
                                 
                                 =
                                 1
                                 
                                 k
                                 ∈
                                 K
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          P
                                          (
                                          i
                                          )
                                          ∪
                                          {
                                          o
                                          }
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       jik
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          S
                                          (
                                          i
                                          )
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ijk
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          
                                             
                                                S
                                             
                                             
                                                ′
                                             
                                          
                                          (
                                          i
                                          )
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       ijk
                                    
                                 
                                 
                                 i
                                 ∈
                                 I
                                 ,
                                 
                                 k
                                 ∈
                                 C
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          
                                             
                                                P
                                             
                                             
                                                ′
                                             
                                          
                                          (
                                          i
                                          )
                                          ∪
                                          {
                                          o
                                          }
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       jik
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          P
                                          (
                                          i
                                          )
                                          ∪
                                          {
                                          o
                                          }
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       jik
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          S
                                          (
                                          i
                                          )
                                          ∪
                                          {
                                          t
                                          }
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       ijk
                                    
                                 
                                 
                                 i
                                 ∈
                                 I
                                 ,
                                 
                                 k
                                 ∈
                                 C
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          P
                                          (
                                          i
                                          )
                                          ∪
                                          {
                                          o
                                          }
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       jik
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          S
                                          (
                                          i
                                          )
                                          ∪
                                          {
                                          t
                                          }
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       ijk
                                    
                                 
                                 
                                 i
                                 ∈
                                 I
                                 ,
                                 
                                 k
                                 ∈
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   ∈
                                                   P
                                                   (
                                                   i
                                                   )
                                                   ∪
                                                   {
                                                   o
                                                   }
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         jik
                                                      
                                                   
                                                   +
                                                   
                                                      
                                                         z
                                                      
                                                      
                                                         jik
                                                      
                                                   
                                                
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   ∈
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   (
                                                   i
                                                   )
                                                   ∪
                                                   {
                                                   o
                                                   }
                                                
                                             
                                          
                                          
                                             
                                                y
                                             
                                             
                                                jik
                                             
                                          
                                       
                                    
                                 
                                 =
                                 1
                                 
                                 i
                                 ∈
                                 I
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                 
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   ∈
                                                   S
                                                   (
                                                   i
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                x
                                             
                                             
                                                ijk
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   ∈
                                                   
                                                      
                                                         S
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   (
                                                   i
                                                   )
                                                
                                             
                                          
                                          
                                             
                                                y
                                             
                                             
                                                ijk
                                             
                                          
                                       
                                    
                                 
                                 ⩽
                                 
                                    
                                       D
                                    
                                    
                                       k
                                    
                                 
                                 
                                 k
                                 ∈
                                 C
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                 
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   ∈
                                                   S
                                                   (
                                                   i
                                                   )
                                                   ∪
                                                   {
                                                   t
                                                   }
                                                
                                             
                                          
                                          
                                             
                                                z
                                             
                                             
                                                ijk
                                             
                                          
                                       
                                    
                                 
                                 ⩽
                                 
                                    
                                       D
                                    
                                    
                                       k
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       oik
                                    
                                 
                                 +
                                 L
                                 
                                    
                                       
                                          1
                                          -
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   ∈
                                                   I
                                                
                                             
                                          
                                          
                                             
                                                z
                                             
                                             
                                                oik
                                             
                                          
                                       
                                    
                                 
                                 
                                 k
                                 ∈
                                 C
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                 
                                    
                                       r
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                          ∪
                                          {
                                          o
                                          }
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          S
                                          (
                                          i
                                          )
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       ijk
                                    
                                 
                                 
                                 k
                                 ∈
                                 C
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ijk
                                    
                                 
                                 ,
                                 
                                    
                                       y
                                    
                                    
                                       ijk
                                    
                                 
                                 ,
                                 
                                    
                                       z
                                    
                                    
                                       ijk
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 i
                                 ,
                                 
                                 j
                                 ∈
                                 I
                                 ,
                                 
                                 k
                                 ∈
                                 K
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                 
                                    
                                       r
                                    
                                    
                                       k
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 k
                                 ∈
                                 K
                              
                           
                        The objective function (1) is the minimization of the total unused legal flying time of the critical aircrafts. It must be noted that the non-critical aircrafts and the critical aircrafts that do not undergo maintenance operations within current planning horizon do not contribute to objective function because the unused legal flying time can only occur when the aircrafts undergo a maintenance operation. Constraints (2) and (3) ensure that each aircraft in the fleet starts its route by flying one of the possible initial flight legs. Similar to (2) and (3), constraints (4) ensure the completion of routes.

Before discussing balance constraints, note that a feasible route in this network can be constructed in two different ways. Firstly, for a critical aircraft that undergoes a maintenance operation within the current planning horizon, the flights until the maintenance operation are connected by using the arcs in 
                           
                              
                                 
                                    O
                                 
                                 
                                    bm
                                 
                              
                           
                        , followed by a replenishment arc R that represents the maintenance (note that a critical aircraft can choose to start directly with a replenishment arc; in this case none of the ordinary arcs in 
                           
                              
                                 
                                    O
                                 
                                 
                                    bm
                                 
                              
                           
                         is used). The rest of the flights are connected by using the arcs in 
                           
                              
                                 
                                    O
                                 
                                 
                                    am
                                 
                              
                           
                        . Secondly, for the aircrafts which do not undergo maintenance, all flights are connected by using the arcs in set 
                           
                              
                                 
                                    O
                                 
                                 
                                    am
                                 
                              
                           
                        . The reason why the ordinary arcs in 
                           
                              
                                 
                                    O
                                 
                                 
                                    am
                                 
                              
                           
                         are used becomes apparent when our remaining time calculation in the objective function is examined. The ordinary arcs in 
                           
                              
                                 
                                    O
                                 
                                 
                                    am
                                 
                              
                           
                         are represented by 
                           
                              
                                 
                                    z
                                 
                                 
                                    ijk
                                 
                              
                           
                         variables in the model and these variables have no effect in remaining time calculations. This property serves to our aim perfectly because the aircrafts with no maintenance operations within current planning horizon have no effect on remaining time calculations.

Constraints (5) and (6) are the balance constraints for critical aircrafts. Constraints (5) indicate that if an aircraft covers flight leg i before maintenance, then the next flight leg covered by that aircraft must be either before maintenance again or right after maintenance. In other words, knowing that flight leg i is connected to its predecessor flight leg with some 
                           
                              
                                 
                                    ord
                                 
                                 
                                    bm
                                 
                              
                              (
                              j
                              ,
                              i
                              )
                              ∈
                              
                                 
                                    O
                                 
                                 
                                    bm
                                 
                              
                           
                        , it must be connected to its successor flight leg with either some 
                           
                              
                                 
                                    ord
                                 
                                 
                                    bm
                                 
                              
                              (
                              i
                              ,
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                              )
                              ∈
                              
                                 
                                    O
                                 
                                 
                                    bm
                                 
                              
                           
                         or with some 
                           
                              rep
                              (
                              i
                              ,
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                              )
                              ∈
                              R
                           
                        . Similar to (5), constraints (6) indicate that if an aircraft covers flight leg i after maintenance, then the next flight covered by that aircraft must be after maintenance again. It must be noted that these balance constraints do not enforce a critical aircraft to undergo a maintenance operation, it can still choose not to undergo maintenance by setting 
                           
                              
                                 
                                    x
                                 
                                 
                                    ijk
                                 
                              
                           
                         and 
                           
                              
                                 
                                    y
                                 
                                 
                                    ijk
                                 
                              
                           
                         variables to 0. Constraints (7) are the balance constraints for non-critical aircrafts. Since non-critical aircrafts do not undergo maintenance within the planning horizon, 
                           
                              
                                 
                                    x
                                 
                                 
                                    ijk
                                 
                              
                           
                         and 
                           
                              
                                 
                                    y
                                 
                                 
                                    ijk
                                 
                              
                           
                         variables are not defined for them and balance constraints (5) and (6) reduce to constraints (7).

Constraints (8) indicate that each flight must be covered by an aircraft. Constraints (9) and (10) are the legal flying hour limit constraints for the critical aircrafts. Constraints (9) become restrictive for the critical aircrafts that undergo maintenance operations by limiting the accumulated flight durations until the maintenance operations to the remaining times of the corresponding aircrafts. Similarly, constraints (10) become restrictive for the critical aircrafts that do not undergo maintenance operations because they limit the accumulated flight durations of the routes to the remaining times of the corresponding aircrafts. It must be noted that constraints (9) are redundant for the critical aircrafts that do not undergo maintenance operations whereas constraints (10) are redundant for the ones which undergo maintenance operations. There is no need to define such constraints for the non-critical aircrafts because, by definition, their remaining times cannot be violated within the current planning horizon. Constraints (11) are the coupling constraints between variables 
                           
                              
                                 
                                    r
                                 
                                 
                                    k
                                 
                              
                           
                         and 
                           
                              
                                 
                                    y
                                 
                                 
                                    ijk
                                 
                              
                           
                        : If an aircraft uses a replenishment arc within its route then this means that it undergoes a maintenance operation. Note that 
                           
                              
                                 
                                    r
                                 
                                 
                                    k
                                 
                              
                           
                         variable can be removed from the model by replacing the 
                           
                              
                                 
                                    r
                                 
                                 
                                    k
                                 
                              
                           
                         term in the objective with the right hand side of (11); however, 
                           
                              
                                 
                                    r
                                 
                                 
                                    k
                                 
                              
                           
                         has a physical meaning in variable prioritization for B&B; therefore, we decide to keep it in the model. Constraints (12) and (13) are the integrality constraints on variables.

In our formulation, a critical aircraft can undergo a maintenance operation at most once during the planning horizon. Therefore, legal flying hour limit, which is imposed by maintenance regulations, can be considered as an upper bound on L because it is not possible to guarantee the existence of a feasible solution with a single maintenance operation for each aircraft in the networks where L is larger than legal flying hour limit.

Before describing the solution methods, we must comment on the difficulty of OAMRP. Basically, OAMRP includes the partition problem, where 
                        
                           |
                           I
                           |
                        
                      many flight legs are covered by 
                        
                           |
                           K
                           |
                        
                      many routes exactly once, with some additional constraints. The partition problem is known to be NP-Complete; hence, OAMRP is NP-Hard (Sarac et al., 2006).

Although OAMRP is NP-Hard and exact methods are not likely to find effective solutions for large-scale instances, it is important to solve smaller instances to optimality in order to have a benchmark for heuristic method evaluation. OAMRP is solved to optimality by CPLEX which uses a combination of predefined rules in an automated manner to decide which variable to branch on. However, giving higher branching priorities to the variables in certain sets may reduce the solution times for some ILP problems significantly.

Assigning higher priority order to some set of variables means that the variables in that set must be decided before the other variables of the problem. In other words, variables in sets with higher priority order are branched on (i.e. fixed) at higher levels of B&B tree. Therefore, assigning higher priority orders to the set of variables which activate the other sets of variables is a reasonable decision (User’s Manual for CPLEX).

In the scope of OAMRP, 
                           
                              
                                 
                                    r
                                 
                                 
                                    k
                                 
                              
                           
                         and 
                           
                              
                                 
                                    y
                                 
                                 
                                    ijk
                                 
                              
                           
                         variables can be considered as activating variables. As discussed in Section 3.2, decision variable 
                           
                              
                                 
                                    r
                                 
                                 
                                    k
                                 
                              
                           
                         indicates whether aircraft k undergoes maintenance during the planning horizon. If we branch on 
                           
                              
                                 
                                    r
                                 
                                 
                                    k
                                 
                              
                           
                         variables at the higher levels of B&B tree, we gain important information regarding 
                           
                              
                                 
                                    x
                                 
                                 
                                    ijk
                                 
                              
                           
                         and 
                           
                              
                                 
                                    y
                                 
                                 
                                    ijk
                                 
                              
                           
                         variables. For instance, at the child nodes above which 
                           
                              
                                 
                                    r
                                 
                                 
                                    
                                       
                                          k
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         variable is set to 0, the values of 
                           
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          ijk
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         and 
                           
                              
                                 
                                    y
                                 
                                 
                                    
                                       
                                          ijk
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         variables directly become 0 due to constraints (5) and (11). In addition, constraints (9) become redundant. Similar to 
                           
                              
                                 
                                    r
                                 
                                 
                                    k
                                 
                              
                           
                         variables, 
                           
                              
                                 
                                    y
                                 
                                 
                                    ijk
                                 
                              
                           
                         variables can also be branched on at higher levels of B&B tree because, by doing so, we fix the information about the time of maintenance operation for aircraft k.

For these purposes, three prioritization schemes are defined and compared with the default branching scheme of CPLEX under different instances. In our first prioritization scheme, 
                           
                              r
                              -
                              prio
                           
                        , we assign high priority to all 
                           
                              
                                 
                                    r
                                 
                                 
                                    k
                                 
                              
                           
                         variables. In the second one, 
                           
                              r
                              -
                              
                                 
                                    y
                                 
                                 
                                    crit
                                 
                              
                              -
                              prio
                           
                        , we assign high priority to all 
                           
                              
                                 
                                    r
                                 
                                 
                                    k
                                 
                              
                           
                         variables and 
                           
                              
                                 
                                    y
                                 
                                 
                                    
                                       
                                          ijk
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         variables where 
                           
                              i
                              ,
                              
                              j
                              ∈
                              I
                           
                         and 
                           
                              
                                 
                                    k
                                 
                                 
                                    ′
                                 
                              
                           
                         is the index of the critical aircraft with the least remaining time. Finally, we assign high priority to all 
                           
                              
                                 
                                    r
                                 
                                 
                                    k
                                 
                              
                           
                         and all 
                           
                              
                                 
                                    y
                                 
                                 
                                    ijk
                                 
                              
                           
                         variables; and we call this scheme 
                           
                              r
                              -
                              
                                 
                                    y
                                 
                                 
                                    all
                                 
                              
                              -
                              prio
                           
                        .

Frequently occurring stochastic events in the airline industry may affect the states of the aircrafts in the fleet and such events generally increase the operational costs or even create infeasibilities in the existing route assignments. We may need to solve OAMRP very frequently in order to respond to such changes; therefore, developing a fast and responsive solution method becomes an essential task. For this purpose, we propose a heuristic solution procedure which uses compressed annealing (CA). CA (Morse, 1997; Theodoracatos & Grimsley, 1995) is a metaheuristic based on simulated annealing (Cerny, 1985; Kirkpatrick, Gelatt, & Vecchi, 1983) where infeasibilities are penalized with a variable penalty multiplier called pressure. Both the temperature (
                           
                              τ
                           
                        ) and the pressure (
                           
                              λ
                           
                        ) are adjusted simultaneously during the iterations of CA. At the beginning, the algorithm starts with a high temperature and a low pressure setting to move freely within the solution space. As the iterations go on, with decreasing temperature and increasing pressure values, CA starts to reject infeasible solutions and converges to local search. The variable penalty multiplier allows easier exploration of the solution space at the early stages (especially when the initial neighborhood contains high number of infeasible solutions) and prevent termination with an infeasible solution at the end. One can refer to Dowsland (1993), Ohlmann, Bean, and Henderson (2004) and Ohlmann and Thomas (2007) for further readings on SA and CA.

The solution structure used in the CA iterations consists of 
                           
                              |
                              K
                              |
                           
                         many flight strings where the kth flight string is the route that is assigned to aircraft k. The initial solution is obtained by solving a simplified version of OAMRP-ILP: We ignore the objective, remove constraints (2), (5), (6), (9)–(11) and write constraints (3) and (7) for both critical and non-critical aircrafts. As a result of the simplified model, 
                           
                              |
                              K
                              |
                           
                         many connection feasible routes (not necessarily maintenance feasible) are obtained as the initial solution. The neighboring solutions are generated by swapping the tails of the routes in the current solution without violating the connection feasibility. During the swap move, two flight strings, route 1 and route 2, are selected from the current solution randomly. Then, successive flight legs i and j are selected from route 1 and the second route is searched for flight legs 
                           
                              
                                 
                                    i
                                 
                                 
                                    ′
                                 
                              
                           
                         and 
                           
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                           
                         which satisfy the following conditions: 
                           
                              
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              S
                              (
                              i
                              )
                              ∪
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                              (
                              i
                              )
                           
                         and 
                           
                              j
                              ∈
                              S
                              (
                              
                                 
                                    i
                                 
                                 
                                    ′
                                 
                              
                              )
                              ∪
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                              (
                              
                                 
                                    i
                                 
                                 
                                    ′
                                 
                              
                              )
                           
                        . The tails of route 1 and 2 are swapped if such flight legs are found; otherwise the procedure is repeated.

Since the initial conditions of the aircrafts formalize the structure of the solution space in OAMRP, it is a wise decision to determine the initial temperature (
                           
                              
                                 
                                    τ
                                 
                                 
                                    0
                                 
                              
                           
                        ) and the maximum pressure (
                           
                              
                                 
                                    λ
                                 
                                 
                                    max
                                 
                              
                           
                        ) values with respect to them, rather than assigning constant values to these parameters for all cases. For this purpose, certain number of solution pairs are generated (by applying the tail exchange) at the beginning of the algorithm and 
                           
                              
                                 
                                    τ
                                 
                                 
                                    0
                                 
                              
                           
                         and 
                           
                              
                                 
                                    λ
                                 
                                 
                                    max
                                 
                              
                           
                         values are calculated by using the approximations from Dowsland (1993) and Ohlmann and Thomas (2007) respectively. The temperature and the pressure are updated by using the geometric cooling and limited exponential compression schedules of Ohlmann and Thomas (2007). Furthermore, the cycle length of CA is increased geometrically at the end of each cycle. Lastly, the CA algorithm stops when there is no improvement in the best feasible solution for a certain number of cycles and the cycle count exceeds a predetermined limit for the minimum number of cycles to execute. The algorithm also stops if the objective value of a feasible solution turns out to be 0 because 0 is a lower bound for OAMRP and a feasible solution with this value is surely optimal.

The objective function of solution 
                           
                              s
                              ,
                              
                              
                                 
                                    f
                                 
                                 
                                    s
                                 
                              
                              (
                              λ
                              )
                           
                        , is a composite one with two components, where the first component, 
                           
                              
                                 
                                    g
                                 
                                 
                                    s
                                 
                              
                           
                        , represents the amount of unused legal flying time and the second one, 
                           
                              
                                 
                                    h
                                 
                                 
                                    s
                                 
                              
                           
                        , represents the number of maintenance infeasible aircrafts:
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       s
                                    
                                 
                                 (
                                 λ
                                 )
                                 =
                                 
                                    
                                       g
                                    
                                    
                                       s
                                    
                                 
                                 +
                                 λ
                                 
                                    
                                       h
                                    
                                    
                                       s
                                    
                                 
                              
                           
                        The calculation of the objective value of a solution strongly depends on the assumption about the airport maintenance capacities. The airport maintenance capacity is a restriction on the maximum number of aircrafts that can undergo maintenance simultaneously at a certain airport. When maintenance capacities are ignored, individual unused legal flying times and infeasibilities of aircrafts can be computed independently to calculate 
                           
                              
                                 
                                    g
                                 
                                 
                                    s
                                 
                              
                           
                         and 
                           
                              
                                 
                                    h
                                 
                                 
                                    s
                                 
                              
                           
                         components of objective function. Under such an assumption, every aircraft can independently select the best maintenance option among all other options within its route without creating any infeasibilities regarding the airport maintenance capacities (the capacitated case is discussed in Section 6.1).

We perform computational experiments on a domestic flight network of a commercial airline company. The flight network is a hub-and-spoke (HAS) network which consists of 354 flights per week where the flights are covered by an 8-aircraft fleet. On a side note, HAS flight networks have feeder airports, hubs, which interconnect almost all the flights as opposed to point-to-point (PTP) flight networks which consist of direct flights from one airport to the next. The corresponding connection network includes 354 nodes, 2852 ordinary arcs and 1900 replenishment arcs. The longest route of flight network lasts 4885minutes; i.e. L
                        =4885minutes. The aim is to determine weekly routes for the fleet such that the unused flying time is minimized.

The experiments are carried out on 30 different test cases which are generated by assigning randomly determined remaining times to arbitrarily selected 
                           
                              |
                              C
                              |
                           
                         many aircrafts in the fleet where 
                           
                              |
                              C
                              |
                           
                         is the number of critical aircrafts. Cases 1–10 include only 1 critical aircraft per case whereas this number is 3 for cases 11–20 and 5 for cases 21–30. The remaining time, 
                           
                              
                                 
                                    D
                                 
                                 
                                    k
                                 
                              
                           
                        , assigned to a critical aircraft 
                           
                              k
                              ∈
                              C
                           
                         can take on values between 0 and 3000minutes as multiples of five. We select such an increment value because the fight durations in the provided data were multiples of five minutes. Notice that any 
                           
                              
                                 
                                    D
                                 
                                 
                                    k
                                 
                              
                           
                         value that is less than L could be used as the remaining time of a critical aircraft; however, we do not allow 
                           
                              
                                 
                                    D
                                 
                                 
                                    k
                                 
                              
                           
                         to be larger than 3000minutes in order to create tighter instances.

We employed CPLEX 11.0 in our exact method runs and the CA algorithm is coded in C# environment of Microsoft Visual Studio 2010. All the experiments are carried out on a PC with a 2.33gigahertz CPU running under 64-bit Windows Vista operating system. Maximum memory usage of CPLEX is limited to 4.00gigabyte and a time limit of five hours is alloted for the exact method runs.

The summary of the exact method results for different prioritization schemes can be seen in Table 2
                        . The first and the second columns provide the optimal values and the results of the best performing prioritization scheme for each test case. The remaining columns report the total unused legal flying time values (in minutes) along with the corresponding CPU times (in seconds) under all prioritization schemes. The optimality gaps of the prioritization schemes are not reported since most of the lower bound values become halted at the initial lower bound value of 0. As a preliminary study, LR is applied to OAMRP by relaxing constraints (8) in order to obtain better lower bounds; however, it failed to provide high quality lower bounds within a reasonable amount of time. Before discussing the individual performances of prioritization schemes, we must note that the instances with more critical aircrafts require longer CPU times. This is an expected behavior since an increase in the number of critical aircrafts makes the problem more difficult by increasing the number of 
                           
                              
                                 
                                    x
                                 
                                 
                                    ijk
                                 
                              
                           
                         and 
                           
                              
                                 
                                    y
                                 
                                 
                                    ijk
                                 
                              
                           
                         variables, and the number of legal flying hour limit constraints.

When the averages of objective values in Table 2 are investigated, the default branching scheme of CPLEX performs better than all prioritization schemes. However, the differences in averages are mainly caused by cases 22 and 28 (see bold values in Table 2) because all of the other prioritization schemes perform poorly in one of these two cases. Although this implies that the default branching scheme of CPLEX is more robust to changes in the instances, cases 22 and 28 are discarded and the average of remaining 28 cases are recalculated for further comparison. The differences between the revised averages become insignificant compared to the previous differences; hence, it is not possible to claim that any prioritization scheme is significantly better than the default one. On the other hand, the default branching scheme finds 
                           
                              
                                 
                                    Z
                                 
                                 
                                    best
                                 
                              
                           
                         values for 19 of 30 cases whereas this number is 20 for 
                           
                              r
                              -
                              prio
                           
                        , 22 for 
                           
                              r
                              -
                              
                                 
                                    y
                                 
                                 
                                    all
                                 
                              
                              -
                              prio
                           
                         and 23 for 
                           
                              r
                              -
                              
                                 
                                    y
                                 
                                 
                                    crit
                                 
                              
                              -
                              prio
                           
                         scheme. This supports our robustness claim about the default branching scheme of CPLEX: Although it is the worst scheme in terms of the number of best solutions found, it is the best one when average performance is considered.

In cases 1–10 all prioritization schemes find the optimum solutions; however, default branching scheme performs worse than the other three in terms of the required CPU time. For the remaining test case sets (11–20 and 21–30), it is not meaningful to compare the required CPU times of different schemes because the best solution performances of different schemes vary for most of the test cases in these sets. On the other hand, when we calculate the averages of the required CPU times of 16 cases for which the best solution performances of all prioritization schemes are the same, the average required CPU time for 
                           
                              default
                              ,
                              
                              r
                              -
                              prio
                              ,
                              
                              r
                              -
                              
                                 
                                    y
                                 
                                 
                                    crit
                                 
                              
                              -
                              prio
                           
                         and 
                           
                              r
                              -
                              
                                 
                                    y
                                 
                                 
                                    all
                                 
                              
                              -
                              prio
                           
                         schemes are 2630.15, 2383.39, 1494.99 and 2962.56seconds respectively.

To summarize, the default branching scheme of CPLEX produces more stable results and generally requires longer CPU time than the other branching schemes. Among the other schemes, 
                           
                              r
                              -
                              
                                 
                                    y
                                 
                                 
                                    crit
                                 
                              
                              -
                              prio
                           
                         provides the best solutions for many cases in shorter CPU times; however, its performance is poor on the average due to low quality solutions for the cases with high number of critical aircrafts. Performances of 
                           
                              r
                              -
                              prio
                           
                         and 
                           
                              r
                              -
                              
                                 
                                    y
                                 
                                 
                                    all
                                 
                              
                              -
                              prio
                           
                         are very similar to the default scheme and they are (especially 
                           
                              r
                              -
                              
                                 
                                    y
                                 
                                 
                                    all
                                 
                              
                              -
                              prio
                           
                        ) likely to find the best solutions for many cases; however, their robustness is arguable since they perform dramatically poor in cases 28 and 22 respectively.

A preliminary analysis is performed to determine the values of parameters for the CA runs. Among these parameters, cooling and compression coefficients determine the rate of change for the temperature and the pressure values at each update. Initial acceptance and pressure cap ratios are the parameters used by Dowsland (1993) and Ohlmann and Thomas (2007) for the 
                           
                              
                                 
                                    τ
                                 
                                 
                                    0
                                 
                              
                           
                         and 
                           
                              
                                 
                                    λ
                                 
                                 
                                    max
                                 
                              
                           
                         approximations. The initial cycle length is the number of iterations in the first CA cycle and this value is increased geometrically by using cycle length increment. Table 3
                         summarizes the parameter values used in this study. Note that each CA replication is executed at least 100 cycles even if they never improve the initial solution.

Since CA is not a deterministic metaheuristic, the runs are replicated several times in order to assess the average performance of CA. For this reason, preliminary runs with 5, 10 and 20 replications are carried out under various instances. For relatively small instances, changing the number of replications does not create a significant difference in terms of the best solution obtained and the average performance. For larger instances (Section 6.1.1), runs with ten replications yield slightly better results compared to 5-replication runs; however, increasing the number of replications from 10 to 20 seems to be unnecessary. Therefore the CA runs are replicated ten times for all test cases.

The summary of the CA replications can be seen in Table 4
                        . The first three columns of the table represent the optimal solutions and the results of the best performing prioritization schemes for the test cases. The remaining columns summarize the CA replications. 
                           
                              
                                 
                                    Z
                                 
                                 
                                    best
                                 
                              
                           
                         column reports the result of the best CA replication whereas 
                           
                              
                                 
                                    Z
                                 
                                 
                                    ‾
                                 
                              
                           
                         and 
                           
                              
                                 
                                    σ
                                 
                                 
                                    Z
                                 
                              
                           
                         columns provide the average and standard deviation summaries of the replication results. 
                           
                              
                                 
                                    CPU
                                 
                                 
                                    ‾
                                 
                              
                           
                         and 
                           
                              
                                 
                                    
                                       
                                          CPU
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    f
                                 
                              
                           
                         columns represent the average duration of a CA replication and average time to find the first feasible solution, respectively, for the corresponding cases. It must be noted that 
                           
                              
                                 
                                    CPU
                                 
                                 
                                    ‾
                                 
                              
                           
                         is not the average time to find the best solution since the best solution is reported after running ten CA replications. Therefore the best CA solution time is ten times the values in 
                           
                              
                                 
                                    CPU
                                 
                                 
                                    ‾
                                 
                              
                           
                         column.

When the best replication results are considered, CA method finds the optimal solution for 26 of 30 test cases. Furthermore, it performs slightly worse than the results of the best prioritization scheme only for the cases 23 and 30. In some of the cases from 1 to 20, the best CA solution time is worse than the solution time of the best prioritization scheme; however, 
                           
                              
                                 
                                    σ
                                 
                                 
                                    Z
                                 
                              
                           
                         values for most of the such cases are very close to zero, indicating that almost all the replications find the best solution. As the number of critical aircrafts increases, the total CPU times of CA replications become significantly lower than those of the exact runs.

For further discussion, the average objective values of the different methods are reported in Table 5
                         along with the average optimality gaps and the required solution times. The same statistics are provided by excluding the cases 22 and 28 since some of the prioritization schemes have robustness issues with them. CA avg row of the table is the average performance of a CA replication whereas CA best row represents the best performance among ten CA replications; hence, overall solution time of CA best is exactly ten times that of CA avg. It must be noted that the reported optimality gaps in Table 5 are high although the methods find the optimal solutions for most of the cases. The cause of the inflated gaps are the cases with optimal values of zero. Whenever a method fails to find the optimal solution for one of those cases, the gap becomes 100% no matter how close the result to the optimal value. For this reason, the average values are reported with the gap values so that a better comparison can be made.

By looking at the results in Tables 4 and 5, it is clear that CA outperforms all prioritization schemes in terms of both solution quality and required solution time. An average CA replication lasts 1.6minutes and returns a solution whose quality is almost the same as those of exact run results. The optimality gaps decrease to 5–6% by replicating the CA procedure 10 times. Additionally, CA method is very robust under all different test cases and finds feasible solutions within first few seconds, providing the responsiveness which is needed in the airline industry.

It is clear that an 8-aircraft fleet is not large-scale enough to discuss the solution quality and speed of CA; however, with the help of such small-scale instances, it is possible to compare the heuristic methods with exact methods. In most of the large-scale instances, exact methods fail to find even feasible solutions due to the size of the problem and the performance gap between heuristic and exact methods becomes immeasurable. Therefore, comparing a heuristic method with an exact one in large-scale instances is not meaningful since the comparison always favors the heuristic method. On the other hand, testing the heuristic methods in large-scale instances is necessary in order to see their applicability in real life. For this purpose, we perform computational experiments on 20-aircraft and 60-aircraft fleets with additional constraints in Sections 6.1 and 6.1.2 and comment on the scalability and applicability of CA.

Since we are dealing with the operational aircraft maintenance routing problem, operational level constraints related to airport maintenance capacities and satisfaction of already booked maintenances must be taken into account. The proposed ILP formulation of OAMRP and CA-based solution procedure ignore such restrictions; therefore, we propose some extensions to existing ILP formulation and heuristic solution method.

The maintenance capacity of an airport is a restriction due to maintenance facility availability and it limits the number of aircrafts that can undergo maintenance simultaneously at the corresponding airport. In most of the previous studies, maintenances are assumed to be overnight operations and with such an assumption maintenance capacity constraints can be constructed by limiting the number of replenishment arcs to be used during nighttime. When the duration of a maintenance operation is less than 24hours (eight hours in our case) and these operations do not necessarily occur during night time, the same maintenance facility can be used by different aircrafts during the same day. Since the available time window between the flights connected by a replenishment arc can be larger than the duration required by the maintenance operation, corresponding maintenances of the replenishment arcs whose time windows overlap can be scheduled without violating the maintenance facility capacities. However, our construction does not allow usage of overlapping replenishment arcs simultaneously even though a feasible schedule can exist, resulting in an underestimation of real maintenance facility capacities.

Although limiting the number of overlapping replenishment arcs may result in underestimation of real maintenance facility capacities, we used this approach to construct the capacity constraints due to various advantages it provides. First of all, such capacity constraints can be added to our ILP formulation without further complicating the existing structure. Secondly, since these constraints underestimate the real maintenance facility capacity, it is not likely to observe tight maintenance schedules in the solution. It is always better to avoid tight maintenance schedules because they tend to create operational problems in real life. For these reasons, we divide our planning horizon to daily time windows and allow at most capacity many replenishment arcs to be active during that day for the corresponding airport.

ILP formulation for capacitated OAMRP (COAMRP-ILP) can be written with the addition of capacity constraints to OAMRP-ILP:
                           
                              (14)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                
                                                   i
                                                   ,
                                                   j
                                                   :
                                                
                                                
                                                   rep
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                   ∈
                                                   
                                                      
                                                         R
                                                      
                                                      
                                                         aw
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          ∈
                                          C
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       ijk
                                    
                                 
                                 ⩽
                                 
                                    
                                       c
                                    
                                    
                                       aw
                                    
                                 
                                 
                                 a
                                 ∈
                                 A
                                 ,
                                 
                                 w
                                 ∈
                                 W
                              
                           
                        
                     


                        
                           
                              A
                           
                         is the set of airports and 
                           
                              W
                           
                         is the set of time windows. Set 
                           
                              
                                 
                                    R
                                 
                                 
                                    aw
                                 
                              
                           
                         is a subset of R and it contains the replenishment arcs that represent maintenance opportunities in airport a during time window w. Constraints (14) ensure that the number of maintenance operations in airport a for time period w is not greater than the maintenance capacity, 
                           
                              
                                 
                                    c
                                 
                                 
                                    aw
                                 
                              
                           
                        .

CA-based solution procedure for capacitated case differs from that of OAMRP in terms of objective calculation only. When we ignore the airport maintenance capacities, each aircraft can independently select the best maintenance opportunity in its current route and, individual unused legal flying times and infeasibilities of the aircrafts can be added to calculate g and h components of the objective function. However, in the capacitated case, such an approach may create infeasibilities because independently determined maintenance operations of the aircrafts can be capacity infeasible. For this reason, the following capacitated maintenance assignment model (CMA) must be solved to determine the best maintenance assignments for a solution s of CA:
                           
                              (15)
                              
                                 min
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          ∈
                                          
                                             
                                                C
                                             
                                             
                                                ″
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          l
                                       
                                       
                                          |
                                          
                                             
                                                M
                                             
                                             
                                                k
                                             
                                          
                                          |
                                       
                                    
                                 
                                 
                                    
                                       r
                                    
                                    
                                       kl
                                    
                                 
                                 
                                    
                                       m
                                    
                                    
                                       kl
                                    
                                 
                              
                           
                        
                        
                           
                              (16)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          l
                                       
                                       
                                          |
                                          
                                             
                                                M
                                             
                                             
                                                k
                                             
                                          
                                          |
                                       
                                    
                                 
                                 
                                    
                                       m
                                    
                                    
                                       kl
                                    
                                 
                                 =
                                 1
                                 
                                 k
                                 ∈
                                 
                                    
                                       C
                                    
                                    
                                       ″
                                    
                                 
                              
                           
                        
                        
                           
                              (17)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          ∈
                                          
                                             
                                                C
                                             
                                             
                                                ″
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          l
                                       
                                       
                                          |
                                          
                                             
                                                M
                                             
                                             
                                                k
                                             
                                          
                                          |
                                       
                                    
                                 
                                 
                                    
                                       e
                                    
                                    
                                       awkl
                                    
                                 
                                 
                                    
                                       m
                                    
                                    
                                       kl
                                    
                                 
                                 ⩽
                                 
                                    
                                       c
                                    
                                    
                                       aw
                                    
                                 
                                 
                                 a
                                 ∈
                                 A
                                 ,
                                 
                                 w
                                 ∈
                                 W
                              
                           
                        
                        
                           
                              (18)
                              
                                 
                                 
                                    
                                       m
                                    
                                    
                                       kl
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 k
                                 ∈
                                 
                                    
                                       C
                                    
                                    
                                       ″
                                    
                                 
                                 ,
                                 
                                 l
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 |
                                 
                                    
                                       M
                                    
                                    
                                       k
                                    
                                 
                                 |
                              
                           
                        
                     

In this formulation, 
                           
                              
                                 
                                    C
                                 
                                 
                                    ″
                                 
                              
                           
                         is the set of aircrafts that need to undergo maintenance with respect to the route assignments of solution s. The critical aircrafts are not necessarily a member of set 
                           
                              
                                 
                                    C
                                 
                                 
                                    ″
                                 
                              
                           
                         because even the critical ones do not undergo maintenance when the total accumulated flight durations of their routes are less than their remaining times; hence, 
                           
                              
                                 
                                    C
                                 
                                 
                                    ″
                                 
                              
                              ⊆
                              C
                           
                        . 
                           
                              
                                 
                                    M
                                 
                                 
                                    k
                                 
                              
                              =
                              {
                              
                                 
                                    m
                                 
                                 
                                    k
                                    1
                                 
                              
                              ,
                              
                                 
                                    m
                                 
                                 
                                    k
                                    2
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    m
                                 
                                 
                                    k
                                    |
                                    
                                       
                                          M
                                       
                                       
                                          k
                                       
                                    
                                    |
                                 
                              
                              }
                           
                         is the set of feasible maintenance opportunities for aircraft k where variable 
                           
                              
                                 
                                    m
                                 
                                 
                                    kl
                                 
                              
                           
                         represents the lth opportunity. 
                           
                              
                                 
                                    m
                                 
                                 
                                    kl
                                 
                              
                           
                         is a binary variable which takes value 1 if aircraft k uses its lth maintenance opportunity and 0 otherwise. 
                           
                              
                                 
                                    r
                                 
                                 
                                    kl
                                 
                              
                           
                         is a parameter which represents the amount of remaining time incurred by aircraft k when it selects the lth maintenance opportunity in its route. 
                           
                              
                                 
                                    e
                                 
                                 
                                    awkl
                                 
                              
                           
                         is a binary parameter that takes value 1 if lth maintenance opportunity of aircraft k takes place in airport a during time window w and 0 otherwise.

Objective (15) is the minimization of total remaining time. Constraints (16) are maintenance satisfaction constraints which ensure that every aircraft that needs maintenance utilizes one of its feasible maintenance opportunities. Constraints (17) are similar to constraints (14). They ensure that the number of maintenance operations in airport a for time period w is not greater than the maintenance capacity, 
                           
                              
                                 
                                    c
                                 
                                 
                                    aw
                                 
                              
                           
                        .

In our capacitated CA iterations, CMA is not solved for every route assignment we generate. We first assign the best maintenances to the aircrafts independently, calculate objective components as we do in uncapacitated case and check whether the assignments we find are capacity feasible. CMA is only solved if the maintenance assignments we find are capacity infeasible.

The experiments for the capacitated case are carried out on a larger and capacity-tight flight network. The new flight network, which is a different domestic HAS flight network of the same commercial airline, consists of 667 flights per week and a 20-aircraft fleet is assigned to cover these flights. Technically, the flight network includes 667 nodes, 11987 ordinary arcs and 6670 replenishment arcs. The longest route in terms of accumulated duration, L, is 5140minutes. The flights in the flight network visit 36 airports and five of these airports are maintenance airports. Among the maintenance airports, one has a maintenance capacity of five whereas the others have maintenance capacities of one. Our aim is, again, to determine weekly routes for the aircrafts in the fleet with minimum unused flying time.

The test cases are generated in a similar fashion to those in Section 5.1. The number of critical aircrafts, 
                              
                                 |
                                 C
                                 |
                              
                           , takes values of 8 and 12 and the remaining time of a critical aircraft 
                              
                                 k
                                 ,
                                 
                                 
                                    
                                       D
                                    
                                    
                                       k
                                    
                                 
                              
                           , is randomly generated between 0 and 2000minutes as multiplies of five. For each 
                              
                                 |
                                 C
                                 |
                              
                            value, ten different test cases are created, resulting in a total of 20 test cases, where the test cases 1–10 and 11–20 have 8 and 12 critical aircrafts respectively.

The parameter settings of the capacitated CA runs are the same as before except the initial cycle length. It is increased from 60 to 100, parallel to the increase in the number of flights in the flight network. The summary of ten capacitated CA replications can be seen in Table 6
                           . In Table 6, we report the same statistics as in Table 4 along with the average objective values of the first feasible solutions found during the CA replications, 
                              
                                 
                                    
                                       
                                          
                                             Z
                                          
                                          
                                             ‾
                                          
                                       
                                    
                                    
                                       f
                                    
                                 
                              
                           . Exact run results are not reported since the exact methods cannot generate even feasible solutions in five hours. In order to comment on the quality of solutions, we report the number of lost flight opportunities, NLFO, which denotes the average number of wasted flight opportunities due to unused remaining time:
                              
                                 (19)
                                 
                                    NLFO
                                    =
                                    
                                       
                                          Z
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                d
                                             
                                             
                                                i
                                             
                                          
                                          /
                                          |
                                          I
                                          |
                                       
                                    
                                    =
                                    
                                       
                                          unused remaining time
                                       
                                       
                                          average flight duration
                                       
                                    
                                 
                              
                           In terms of quality, it is clear that 
                              
                                 
                                    
                                       Z
                                    
                                    
                                       best
                                    
                                 
                              
                            values for cases 1, 3, 4, 6, 7, 12 and 20 are optimal because 0 is a lower bound for OAMRP. Since the optimal results for the rest of the cases are not known, NLFO values can be used to discuss the quality of solutions. In cases 1–10, averages of 
                              
                                 
                                    
                                       NLFO
                                    
                                    
                                       best
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       NLFO
                                    
                                    
                                       ‾
                                    
                                 
                              
                            are 0.15 and 0.45 respectively; in cases 11–20, these values increase to 0.96 and 1.63 leading to a grand average of 0.55 and 1.04. An average CA replication decreases the average number of lost flight opportunities to almost 1 flight whereas this value is around 34 flights in the first feasible results. From this perspective, we can claim that the capacitated CA replications perform well on 20-aircraft fleet runs in terms of solution quality. On a side note, among 
                              
                                 20
                                 ×
                                 10
                                 =
                                 200
                              
                            replications, only one replication failed to return a feasible solution.

The average duration of a CA replication is 25minutes; therefore, the best solutions are obtained around four hours. On the other hand, the first feasible solutions are found within the first 1.5minutes. In this sense, the responsiveness of CA is not lost because low quality (NLFO of 34.18 flights) routes for the entire fleet can be generated quickly in case of a sudden state change and these routes can be improved significantly (NLFO around 1.04 flights) within 25minutes.

CA based solution method is tested on larger instances with a 60-aircraft fleet in order to investigate the scalability and applicability in real life. The instances are created by using two flight networks from Reiners et al. (2012). The flight networks in their study, which originally had some disconnected flights and much longer horizons, are pre-processed to obtain the largest possible connected networks that can be accomplished with 60-aircraft fleet for planning horizons of 10–13days without using deadheading trips. Finally, AustralianTwo and AmericanDream networks are selected because they turn out to yield the largest HAS and PTP networks in terms of the number of flights in the schedule. It must be noted that the sizes of these networks, which will be denoted as 
                              
                                 
                                    
                                       AustralianTwo
                                    
                                    
                                       C
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       AmericanDream
                                    
                                    
                                       C
                                    
                                 
                              
                           , are comparable to the networks in Afsar et al. (2006), Haouari et al. (2012) and Sarac et al. (2006); however, a direct comparison of performances is not possible since these studies differ from our study in terms of either planning horizon length or maintenance schedule assumptions. 10 different test cases are created randomly for both flight networks where the remaining times of the aircrafts follow a discrete uniform distribution between 0 and 7500minutes (125hours). The properties of the flight networks and the summary of the average performance of CA can be seen in Table 7
                           .

Although it takes less than two minutes to generate the first feasible solutions for all the cases, the quality of these solutions are not very desirable; however, the values decrease dramatically at the end of the first hour. According to this observation, limiting the total execution time of CA in large-scale instances is a good idea because the major improvements in the objective function are observed within the first hour of the CA replication.

An average CA replication lasts 239.57minutes for 
                              
                                 
                                    
                                       AustralianTwo
                                    
                                    
                                       C
                                    
                                 
                              
                            instances and decreases NLFO to 0.82 flights whereas these numbers are 138.88minutes and 8.77 flights for 
                              
                                 
                                    
                                       AmericanDream
                                    
                                    
                                       C
                                    
                                 
                              
                            instances. An intuitive explanation to these differences is that HAS networks are more dense than PTP networks in terms of the number of potential flight connections (arcs). In general, this leads to longer run times with better results for HAS flight networks because the number of feasible (and potentially better) solutions increases with the number of potential connections.

These experiments show that the proposed CA method can be used effectively in large-scale instances. Even though the termination time of the replications is an increasing function of fleet and network size, a time limited version can be used in order to generate fairly good solutions.

Longer planning horizons yield high-quality routes from optimization perspective; however, such routes are not likely to be followed at the operational level. Basically, long-term routing results in longer flight strings to be followed. Even if these strings are feasible with respect to the operational constraints, it is not reasonable to assign them to aircrafts in advance due to the stochasticity of airline environment. On the other hand, selecting too short planning horizons results in routes that are more likely to be followed; however, it decreases the opportunities for better utilization of the remaining times. A rolling horizon approach which combines quality of long-term horizon and applicability of short-term routing can remedy these problems.

In our rolling horizon approach, we basically optimize for a long planning horizon and fix a small portion of our solution. For instance, OAMRP is solved for the following seven days to determine week-long routes for each aircraft and, from the weekly routes, the flights of the following day are set as daily routes to be followed. Then, at the end of the day, OAMRP is solved again by reconstructing the flight network for the following seven days and the same procedure is repeated. Upon doing so, we are able to determine shorter routes, which are more likely to be followed at operational level, without ignoring the flights of the rest of the week. A rolling horizon of one week is generally desirable since most of the flight networks follow a weekly pattern.

In this approach, we need to deal with the already booked maintenances. Booking a maintenance operation simply means reserving a maintenance interval at one of the maintenance facilities of a maintenance airport and we call these bookings booked maintenance slots. Since airports must be informed about maintenance operations beforehand, there are always some booked maintenance slots that have to be considered within our current planning horizon. In other words, the routes to be followed in the next day can be determined at the very last minute; however, the same is not true for the maintenance operations. As a result, the maintenance operations must be planned with respect to the long-term routing results; however, they must be obeyed at the operational level.

In the literature, when a maintenance operation is booked for some aircraft k, that aircraft must undergo that specific maintenance regardless of the situation. In other words, the aircraft which undergoes maintenance in a certain booked maintenance slot is fixed during the planning of maintenance operation and cannot be changed. For this purpose, such an aircraft is either forced to follow a fixed route until the booked maintenance occurs or restricted to arrive to the airport of the booked maintenance at the planned time. In this study, different from the literature, we do not assign aircrafts to booked maintenance slots in advance, instead, we only have a restriction which ensures that each booked maintenance slot must be utilized by an aircraft that needs to undergo maintenance. For instance, we may book a maintenance slot, p, at a certain airport at a certain time by considering the long-term routing result of some aircraft k; however, p is not necessarily used by aircraft k. During our rolling horizon iterations, routes of aircrafts keep changing and p may become more beneficial for another aircraft 
                           
                              
                                 
                                    k
                                 
                                 
                                    ′
                                 
                              
                           
                        . This relaxation is made due to the fact that most of the fleets consist of similar types of aircrafts and the maintenance slots can be used by any aircraft in such fleets.

It is assumed that a maintenance operation can take place within a booked maintenance slot p if the replenishment arc of the corresponding maintenance operation and p share a common interval whose length is more than a user-defined proportion of the maintenance duration. Fig. 1
                         shows an example where this proportion is set to 3/4 of 8-hour maintenance duration. In the figure, all replenishment arcs except the dotted ones can take place during p because they have sufficiently (more than six hours) long common intervals with p. Note that, 
                           
                              
                                 
                                    i
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                              
                                 
                                    i
                                 
                                 
                                    2
                                 
                              
                              ,
                              
                              
                                 
                                    i
                                 
                                 
                                    3
                                 
                              
                           
                         and 
                           
                              
                                 
                                    i
                                 
                                 
                                    4
                                 
                              
                           
                         are arriving and 
                           
                              
                                 
                                    j
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                              
                                 
                                    j
                                 
                                 
                                    2
                                 
                              
                              ,
                              
                              
                                 
                                    j
                                 
                                 
                                    3
                                 
                              
                           
                         and 
                           
                              
                                 
                                    j
                                 
                                 
                                    4
                                 
                              
                           
                         are departing flight legs for a maintenance aircraft.

The maintenance slot satisfaction constraints must be added to OAMRP-ILP (or COAMRP-ILP) in order to generate feasible routes for rolling horizon approach:
                           
                              (20)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                
                                                   i
                                                   ,
                                                   j
                                                   :
                                                
                                                
                                                   rep
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                   ∈
                                                   
                                                      
                                                         
                                                            
                                                               R
                                                            
                                                            
                                                               ‾
                                                            
                                                         
                                                      
                                                      
                                                         p
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          ∈
                                          C
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       ijk
                                    
                                 
                                 ⩾
                                 1
                                 
                                 p
                                 ∈
                                 P
                              
                           
                        
                     


                        
                           
                              P
                           
                         is the set of booked maintenance slots, set 
                           
                              
                                 
                                    
                                       
                                          R
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    p
                                 
                              
                           
                         is a subset of R and it contains replenishment arcs that represent maintenance opportunities which can take place within the booked maintenance slot p. Therefore, constraints (20) ensure that there is at least one maintenance operation during booked maintenance slot p. We must note that these constraints do not work correctly when a replenishment arc 
                           
                              rep
                              (
                              i
                              ,
                              j
                              )
                           
                         belongs to more than one 
                           
                              
                                 
                                    
                                       
                                          R
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    p
                                 
                              
                           
                         sets. For instance, when there are two booked maintenance slots, say 
                           
                              
                                 
                                    p
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    p
                                 
                                 
                                    2
                                 
                              
                           
                        , within the same interval at the same airport, then a replenishment arc 
                           
                              rep
                              (
                              i
                              ,
                              j
                              )
                           
                         can be element of both 
                           
                              
                                 
                                    
                                       
                                          R
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    
                                       
                                          p
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                           
                         and 
                           
                              
                                 
                                    
                                       
                                          R
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    
                                       
                                          p
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                           
                        . In such a case, when 
                           
                              rep
                              (
                              i
                              ,
                              j
                              )
                           
                         is utilized for some aircraft k, both constraints are satisfied by filling both slots with a single maintenance operation; however, this is not correct. Therefore, it is necessary to define variables which distinguish replenishment arcs that belong to different 
                           
                              
                                 
                                    
                                       
                                          R
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    p
                                 
                              
                           
                         sets. 
                           
                              
                                 
                                    y
                                 
                                 
                                    ijk
                                 
                                 
                                    p
                                 
                              
                           
                         is a binary variable denoting the replenishment arc 
                           
                              rep
                              (
                              i
                              ,
                              j
                              )
                           
                         of aircraft k in set 
                           
                              
                                 
                                    
                                       
                                          R
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    p
                                 
                              
                           
                        . Letting 
                           
                              A
                              (
                              i
                              ,
                              j
                              )
                           
                         be the set of p indices of 
                           
                              
                                 
                                    
                                       
                                          R
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    p
                                 
                              
                           
                         sets that contain 
                           
                              rep
                              (
                              i
                              ,
                              j
                              )
                           
                         as an element, constraints (20) are replaced with the following ones in order to correct the formulation:
                           
                              (21)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                
                                                   i
                                                   ,
                                                   j
                                                   :
                                                
                                                
                                                   rep
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                   ∈
                                                   
                                                      
                                                         
                                                            
                                                               R
                                                            
                                                            
                                                               ‾
                                                            
                                                         
                                                      
                                                      
                                                         p
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          ∈
                                          C
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       ijk
                                    
                                    
                                       p
                                    
                                 
                                 ⩾
                                 1
                                 
                                 p
                                 ∈
                                 P
                              
                           
                        
                        
                           
                              (22)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          p
                                          ∈
                                          A
                                          (
                                          i
                                          ,
                                          j
                                          )
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       ijk
                                    
                                    
                                       p
                                    
                                 
                                 =
                                 
                                    
                                       y
                                    
                                    
                                       ijk
                                    
                                 
                                 
                                 i
                                 ,
                                 j
                                 ∈
                                 I
                                 ,
                                 
                                 k
                                 ∈
                                 C
                              
                           
                        
                        
                           
                              (23)
                              
                                 
                                    
                                       y
                                    
                                    
                                       ijk
                                    
                                    
                                       p
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 i
                                 ,
                                 
                                 j
                                 ∈
                                 I
                                 ,
                                 
                                 k
                                 ∈
                                 C
                                 ,
                                 
                                 p
                                 ∈
                                 A
                                 (
                                 i
                                 ,
                                 j
                                 )
                              
                           
                        Constraints (21)–(23) ensure that there is at least one maintenance operation during each booked maintenance slot.

CA-based solution procedure for rolling horizon approach differs from that of OAMRP in terms of objective structure and calculation. The objective function has a new infeasibility component, u, where u denotes the number of unsatisfied booked maintenance slots. We define another pressure parameter for u component, 
                           
                              μ
                           
                        , and initialize 
                           
                              
                                 
                                    μ
                                 
                                 
                                    max
                                 
                              
                           
                         similar to 
                           
                              
                                 
                                    λ
                                 
                                 
                                    max
                                 
                              
                           
                         by using u instead of h. Rolling horizon based capacitated maintenance assignment model (RHCMA) can be written with the addition of following constraints to CMA:
                           
                              (24)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                
                                                   k
                                                   ,
                                                   l
                                                   :
                                                
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         kl
                                                      
                                                   
                                                   ∈
                                                   
                                                      
                                                         
                                                            
                                                               M
                                                            
                                                            
                                                               ‾
                                                            
                                                         
                                                      
                                                      
                                                         p
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       m
                                    
                                    
                                       kl
                                    
                                    
                                       p
                                    
                                 
                                 ⩾
                                 1
                                 
                                 p
                                 ∈
                                 P
                              
                           
                        
                        
                           
                              (25)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          p
                                          ∈
                                          E
                                          (
                                          k
                                          ,
                                          l
                                          )
                                       
                                    
                                 
                                 
                                    
                                       m
                                    
                                    
                                       kl
                                    
                                    
                                       p
                                    
                                 
                                 =
                                 
                                    
                                       m
                                    
                                    
                                       kl
                                    
                                 
                                 
                                 k
                                 ∈
                                 
                                    
                                       C
                                    
                                    
                                       ″
                                    
                                 
                                 ,
                                 
                                 l
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 |
                                 
                                    
                                       M
                                    
                                    
                                       k
                                    
                                 
                                 |
                              
                           
                        
                        
                           
                              (26)
                              
                                 
                                    
                                       m
                                    
                                    
                                       kl
                                    
                                    
                                       p
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 k
                                 ∈
                                 
                                    
                                       C
                                    
                                    
                                       ″
                                    
                                 
                                 ,
                                 
                                 l
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 |
                                 
                                    
                                       M
                                    
                                    
                                       k
                                    
                                 
                                 |
                                 ,
                                 
                                 p
                                 ∈
                                 E
                                 (
                                 k
                                 ,
                                 l
                                 )
                              
                           
                        
                     

Similar to 
                           
                              
                                 
                                    
                                       
                                          R
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    p
                                 
                              
                              ,
                              
                              
                                 
                                    
                                       
                                          M
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    p
                                 
                              
                           
                         is a subset of 
                           
                              
                                 
                                    M
                                 
                                 
                                    k
                                 
                              
                           
                         and it contains the maintenance opportunities which can take place in slot p. Similar to 
                           
                              
                                 
                                    y
                                 
                                 
                                    ijk
                                 
                                 
                                    p
                                 
                              
                           
                         variables, 
                           
                              
                                 
                                    m
                                 
                                 
                                    kl
                                 
                                 
                                    p
                                 
                              
                           
                         variables are defined to represent the maintenance opportunities in set 
                           
                              
                                 
                                    
                                       
                                          M
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    p
                                 
                              
                           
                        . 
                           
                              
                                 
                                    m
                                 
                                 
                                    kl
                                 
                                 
                                    p
                                 
                              
                           
                         is a binary variable that takes value 1 if lth maintenance opportunity of aircraft k is used during slot p, and 0 otherwise. Similar to 
                           
                              A
                              (
                              i
                              ,
                              j
                              )
                              ,
                              
                              E
                              (
                              k
                              ,
                              l
                              )
                           
                         is an index set of p indices of 
                           
                              
                                 
                                    
                                       
                                          M
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    p
                                 
                              
                           
                         sets that contain 
                           
                              
                                 
                                    m
                                 
                                 
                                    kl
                                 
                              
                           
                         as an element. Similar to the capacitated case, RHCMA is not solved for every route assignment that we generate in the CA iterations. First, the best maintenance opportunities are assigned to the aircrafts as in the uncapacitated case and, capacity and slot feasibilities of the independent assignments are checked. RHCMA is solved only when the independent maintenance assignments are capacity or slot infeasible.

An example of maintenance booking preservation with different aircrafts is presented in Fig. 2
                        , where two different route segments regarding the third day of a long-term route are shown. The length of intervals between two consecutive time lines is 15minutes and the night time is squeezed since there are no flights during that interval (between 22:00 and 03:00). Gray rectangles represent assigned flights of the corresponding aircrafts. Black and checkered rectangles represent the intervals in airports 
                           
                              
                                 
                                    a
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    a
                                 
                                 
                                    2
                                 
                              
                           
                         during which the corresponding aircrafts must undergo maintenance for eight hours. For instance, in the first route assignment, aircraft 
                           
                              
                                 
                                    k
                                 
                                 
                                    1
                                 
                              
                           
                         arrives at 
                           
                              
                                 
                                    a
                                 
                                 
                                    1
                                 
                              
                           
                         at 18:05 and we know that it must undergo maintenance until its departure at 05:00.

In the example, the first route assignment (upper one) is done at the beginning of the planning horizon and two slots are booked for aircraft 
                           
                              
                                 
                                    k
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    k
                                 
                                 
                                    2
                                 
                              
                           
                         in airports 
                           
                              
                                 
                                    a
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    a
                                 
                                 
                                    2
                                 
                              
                           
                         respectively. The first booked slot, 
                           
                              
                                 
                                    p
                                 
                                 
                                    1
                                 
                              
                           
                        , is for aircraft 
                           
                              
                                 
                                    k
                                 
                                 
                                    1
                                 
                              
                           
                         in airport 
                           
                              
                                 
                                    a
                                 
                                 
                                    1
                                 
                              
                           
                         between 20:00 and 04:00 and the second one, 
                           
                              
                                 
                                    p
                                 
                                 
                                    2
                                 
                              
                           
                        , is for aircraft 
                           
                              
                                 
                                    k
                                 
                                 
                                    2
                                 
                              
                           
                         in airport 
                           
                              
                                 
                                    a
                                 
                                 
                                    2
                                 
                              
                           
                         between 21:00 and 05:00. At the end of the first day, due to delays caused by some stochastic events, the remaining time of 
                           
                              
                                 
                                    k
                                 
                                 
                                    1
                                 
                              
                           
                         turns out to be less than our expectation, causing an infeasibility in the existing route assignment. Then, the horizon is shifted one day and new weekly route assignments (below one) are determined with respect to current states of the aircrafts. As seen in the second assignment the routes are changed and the maintenance slots 
                           
                              
                                 
                                    p
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    p
                                 
                                 
                                    2
                                 
                              
                           
                         are utilized by different aircrafts. Initially, 
                           
                              
                                 
                                    p
                                 
                                 
                                    1
                                 
                              
                           
                         was booked for aircraft 
                           
                              
                                 
                                    k
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    p
                                 
                                 
                                    2
                                 
                              
                           
                         was booked for aircraft 
                           
                              
                                 
                                    k
                                 
                                 
                                    2
                                 
                              
                           
                        ; however, at the end of the first day, 
                           
                              
                                 
                                    k
                                 
                                 
                                    1
                                 
                              
                           
                         is assigned to 
                           
                              
                                 
                                    p
                                 
                                 
                                    2
                                 
                              
                           
                         and 
                           
                              
                                 
                                    k
                                 
                                 
                                    2
                                 
                              
                           
                         is assigned to 
                           
                              
                                 
                                    p
                                 
                                 
                                    1
                                 
                              
                           
                         assuming that no changes occur until maintenance operations.

@&#CONCLUSION@&#

In this study, we proposed a new ILP formulation for OAMRP with remaining time consideration along with the exact and heuristic methods to solve it. From the operational perspective, airport capacity restrictions and satisfaction of already booked maintenance slots are considered. Our rolling horizon approach is unique in the sense that it neither enforces fixed routes nor dedicates certain arrivals to preserve already booked maintenance operations.

In terms of solution methods, B&B with different prioritization schemes performs better than the default one in terms of the number of optimal solutions found and the required CPU time; however, most of them are subject to robustness issues. On the other hand, CA is very effective in finding high quality solutions quickly. In the large-scale instances where exact methods fail to find even feasible solutions, CA method returns feasible solutions within the first two minutes and decreases the NLFO values to reasonable amounts at the end of the first hour. It must be noted that the ability to find feasible solutions quickly is necessary to provide the responsiveness that is needed by the airline industry. Contrary to most of the studies which focus on daily OAMRP, the problem is solved for a one-week planning horizon in order to utilize the remaining times better. Furthermore the proposed rolling horizon procedure eliminates the operational difficulties in following longer flight strings.

It is worth pointing out that the assumption regarding the maximum length of the longest route of the flight network can be eliminated in the CA replications by defining slightly more sophisticated objective value calculation routine. Furthermore, the models are written for a single maintenance operation type (Type A); however, this can be generalized to multiple maintenance types by defining different type of replenishment arcs in the modified network.

From modeling perspective, integrating OAMRP with crew scheduling in an efficient way can be a challenging future research subject. In terms of solution methodology, more sophisticated branching schemes may be designed to increase the efficiency of B&B for large-scale instances. Additionally, finding high quality lower bounds for OAMRP may improve the performance of the exact methods significantly because lower bounds generally become halted at very poor values during optimization. On the other hand, more intelligent neighbor generation rules may be defined to improve the solution quality and decrease the required solution time of CA further.

@&#ACKNOWLEDGMENT@&#

We gratefully acknowledge the three anonymous referees whose comments helped us improve the presentation of our work.

@&#REFERENCES@&#

