@&#MAIN-TITLE@&#A branch-and-cut-and-price approach for the pickup and delivery problem with shuttle routes

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We introduce the Pickup and Delivery Problem with Shuttle routes (PDPS).


                        
                        
                           
                           We propose one arc based model and two path based model for the PDPS.


                        
                        
                           
                           We develop a branch-and-cut-and-price algorithm.


                        
                        
                           
                           The method is evaluated on generated and real-world instances with up to 193 requests.


                        
                        
                           
                           Instances with up to 87 requests are solved to optimality in less than one hour.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Pickup and delivery problem

Transfers

Column generation

Branch-and-cut-and-price

@&#ABSTRACT@&#


               
               
                  The Pickup and Delivery Problem with Shuttle routes (PDPS) is a special case of the Pickup and Delivery Problem with Time Windows (PDPTW) where the trips between the pickup points and the delivery points can be decomposed into two legs. The first leg visits only pickup points and ends at some delivery point. The second leg is a direct trip – called a shuttle – between two delivery points. This optimization problem has practical applications in the transportation of people between a large set of pickup points and a restricted set of delivery points.
                  This paper proposes three mathematical models for the PDPS and a branch-and-cut-and-price algorithm to solve it. The pricing sub-problem, an Elementary Shortest Path Problem with Resource Constraints (ESPPRC), is solved with a labeling algorithm enhanced with efficient dominance rules. Three families of valid inequalities are used to strengthen the quality of linear relaxations. The method is evaluated on generated and real-world instances containing up to 193 transportation requests. Instances with up to 87 customers are solved to optimality within a computation time of one hour.
               
            

The Pickup and Delivery Problem (PDP) consists in defining a set of minimum cost routes to serve a set of independent transportation requests. Each transportation request is defined by an origin called the pickup point, a destination called the delivery point and a positive value called demand or weight. The PDP is one of the many extensions of the Vehicle Routing Problem (VRP). If time windows for requests are considered, the problem is called the Pickup and Delivery Problem with Time Windows (PDPTW). The demand may be static (each request is known in advance) or dynamic (new requests may arrive at any time). Requests can correspond to the transportation of goods or people. Depending on the context of the application, various objective functions may be considered: number of vehicles used, total ride time, total distance, cost or quality of service–related criteria. There is an abundant literature on pickup and delivery problems and many references can be found in recent surveys by Parragh, Doerner, and Hartl (2006), Berbeglia, Cordeau, Gribkovskaia, and Laporte (2007) and Cordeau, Laporte, and Ropke (2008).

The Pickup and Delivery Problem with Transfers (PDPT) is a recent extension of the PDP relaxing the constraint that the pickup and delivery points of a given request are serviced by the same vehicle. Instead, some requests may be transferred from one vehicle to another at some predetermined intermediate locations called transfer points. Then, distinct vehicles pick up the transferred requests and drives them to their respective delivery point. The PDPT implies a new precedence constraint stating that, if a request uses a transfer point, it must be delivered to the transfer point by a first vehicle before being picked up by a second vehicle. The objective function of the PDPT can be the same as that of the PDP.

Since the PDPT introduces hard precedence and synchronization constraints between vehicles, it is much more difficult to solve in practice than the PDP. The exact methods described in the literature can only solve small instances of the PDPT: Cortés, Matamala, and Contardo (2010) report optimal results for instances with 6 requests, Kerivin, Lacroix, Mahjoub, and Quilliot (2008) report optimal results for instances with 15 requests.

In this paper we introduce the Pickup and Delivery Problem with Shuttle routes (PDPS) which is a special case of the PDPT. The PDPS is a problem that arises in passenger transportation when passengers are picked up at a multitude of locations and dropped off at a few, common delivery points. The set of vehicle routes is split into two categories: pickup routes and shuttle routes. Pickup routes visit a set of pickup points independently of their associated delivery points and end at one delivery point. Shuttle routes are direct trips between two delivery points. Requests can then be transported in one leg (pickup route) or two legs (pickup route+shuttle route) from their pickup point to their delivery point.

The main contribution of the paper is to introduce the PDPS, to propose an exact algorithm for this problem based on the branch-and-cut-and-price paradigm and to optimally solve realistic-size instances (up to 87 requests) of the PDPT for the first time, albeit a special case.

The remainder of this paper is organized as follows. Section 1 shows a simple example and discusses the potential benefits of transfers. Section 2 summarizes the related works and positions the present paper in the literature. Section 3 formulates the PDPS, introduces a graph modeling of transfer points, and includes one arc-based and two path-based integer linear programming formulations of the problem. Section 4 describes the branch-and-cut-and-price method used to solve the PDPS. Section 5 presents computational experiments on generated instances with 15–75 requests and on real-life instances with 81–193 requests. Section 6 concludes the paper.

One reason to consider the transfer of requests is the potential savings that can be achieved by this practice. This is illustrated by the example given in Fig. 1
                     . We consider 9 requests: requests 1, 2 and 3 share the pickup point p
                     123, requests 4, 5 and 6 share the pickup point p
                     456, requests 7, 8 and 9 share the pickup point p
                     789. Requests 1, 2, 4, 5, 7 and 8 must be delivered to d
                     124578 while requests 3, 6, and 9 must be delivered to d
                     369. The nodes o and o′ represent the starting depot and the ending depot respectively. The distances between the points are reported in Fig. 1.

We consider that vehicles have a capacity of 3 and assume that routes are doubly-open, meaning that they start at first pickup point and end at the last delivery point. The optimal solution without any transfers uses three vehicles: vehicle 1 picks up requests 1, 2 and 3 at point p
                     123 then unloads requests 1 and 2 at d
                     124578 and request 3 at d
                     369. Vehicle 2 starts at p
                     456, visits d
                     124578 and ends at d
                     369. Vehicle 3 starts at p
                     789, visits d
                     124578 and ends at d
                     369. Each route has a cost of 4 so the total routing cost is 12.

If the transfer of passengers is allowed at point d
                     1, vehicles 2 and 3 can be totally emptied and end their trip at d
                     1. Then requests 6 and 9 can be loaded into vehicle 1 with request 3. The vehicle follows its itinerary to point d
                     2. Vehicle 1 has a route cost of 4 while vehicles 2 and 3 have a route cost of 2 so the total routing cost is 8. In this case, the use of a transfer point enables 33% to be saved on the cost of the optimal solution.

However, transfers also have negative impacts which can put the brakes on the practical implementation of such a system. The main drawbacks are the cost of building or running the facility corresponding to the transfer point, the need for tight synchronization between vehicles and the supplementary handling operations at the transfer point. Moreover, in the context of demand-responsive transportation, direct trips are often preferred by passengers. Transfers are seen as a reduction of the quality of the service. Thus, the decision makers have to balance the expected benefits and drawbacks of transfers.

Although the PDP has been intensively studied in the last 15years, the PDPT has been the subject of very few works. Cortés et al. (2010) present a mathematical formulation of the PDPT that is solved using a branch-and-cut algorithm. Instances with 6 requests and 2 vehicles are solved to optimality. Kerivin et al. (2008) consider a PDP where every request can be split as well as transferred from one vehicle to another at every node of the problem. This problem has no time window and is solved using branch-and-cut. Some instances with up to 15 requests are solved to optimality. Nakao and Nagamochi (2010) calculate a lower bound for the PDPT with a single transfer point. Transfers also appear in the school bus model of Fugenschuh (2009). In this work, the routes are already designated and the objective is to minimize the number of buses needed to cover these routes, allowing some transfer between buses.

As far as heuristic approaches are concerned, Mitrović-Minić and Laporte (2006) propose a local search method for the uncapacitated PDPT with a Manhattan distance. They solve generated instances with 100 requests. An Adaptive Large Neighborhood Search (ALNS) for the PDPT was proposed by Masson, Lehuédé, and Péton (2013a) and applied to the instances of Mitrović-Minić and Laporte (2006) and real-world instances with between 2 and 33 transfer points and between 55 and 193 requests. This method was adapted to the Dial–A–Ride Problem with Transfers in Masson, Lehuédé, and Péton (in press). In this study, the authors underline the complexity of enforcing the maximum ride time constraint.


                     Petersen and Ropke (2011) present another ALNS to handle freight transportation problems considering one transfer point and up to 982 requests. Qu and Bard (2012) propose a GRASP with an ALNS for solving generated instances with 25 requests and one transfer point. Their method can solve 88% of the instances with a distance no greater than 1% of the optimum.

The use of transfer points has also been considered, with special restrictions, for solving pickup and delivery problems. Russell, Morrel, and Haddox (1986) present a school bus routing application where some children are brought to a transfer point, where they are transferred into shuttle buses that take them to their school. The authors present a heuristic to solve this problem. In this approach, the design of the shuttle routes is carried out as a post-processing step. Shang and Cuff (1996) consider that any point can be used as a transfer point. Transfers are only considered to insert a request that cannot be inserted in the current solution without resorting to an extra vehicle. The heuristic relies on the construction of mini-routes which are assigned to vehicles. Thangiah, Fergany, and Awam (2007) use the same principles in a real-time version of the problem. Lin (2008) presents a PDP with time windows where all requests share the same delivery point but have distinct delivery time windows. In this problem, it is considered that a transfer can occur on the last pickup before a delivery. The author uses a heuristic based on a set-partitioning formulation of the problem to solve instances with up to 100 requests. Oertel (2000) presents a tabu search for a version of the problem with two transfer points. Gørtz, Nagarajan, and Ravi (2009) consider a version of the PDPT where the objective is to minimize the makespan. Approximation algorithms are proposed to solve the uncapacitated and capacitated cases. A heuristic column generation method is proposed by Mues and Pickl (2005). They consider a problem with a single transfer point through which requests are systematically routed. The set of routes is composed of pickup routes ending at the transfer point and delivery routes starting at this transfer point. Instances with up to 70 requests are considered for experiments.

This section formally presents three mathematical models for the PDPS. The PDPS was motivated by applications in the field of transportation of people with disabilities (Lehuédé, Pavageau, & Péton, 2009). This concerns people who require daily trips to and from their home to schools or vocational rehabilitation centers. The centers or local authorities have to pay for the increasing transportation costs. In practice, dozens of people share the same delivery point so the number of pickup points is significantly larger than the number of delivery points. In order to reduce transportation costs, some centers resort to transfers, which involves transferring some users from one vehicle to another at appropriate locations (generally some centers). People living in the same geographical area are picked up by one vehicle and transported to a center, where people going to the same destination are gathered in a single vehicle.

We assume that the time window at a delivery point is the same for each request asking for a transportation up to this point. This time window is determined by the opening hour of the school that the passengers are brought to. The distance between delivery points and tight time windows constraints at the delivery points imply that it is realistic to assume that any vehicle at most can serve two delivery points in the same trip.

A second simplifying hypothesis is that a vehicle does not service a pickup point between two delivery points. The transfer points are positioned at the delivery points, because there typically are staff available there at no additional cost. Several requests are generally transferred or delivered at delivery points; we consider that the time of service at delivery points is a constant which is independent of the number of requests getting in or off the vehicle.

We consider a homogeneous fleet of vehicles K with capacity Q. Each vehicle route starts at an initial depot denoted by o, visits a set of pickup points, goes to a delivery point where some passengers are dropped off and some other are picked up, coming from another vehicle. Then, the vehicle heads for a second delivery point where all passengers are dropped off. The vehicle terminates its route at the end depot o′. Note that some vehicles may not visit any pickup point, but carry shuttle routes between two delivery points, whereas some other vehicles may return to the depot after the first delivery point. In the following we consider open routes, that is, all distances to and from the two terminal points o and o′ are assumed to be zero. The objective of the problem is to minimize the total distance traveled by the vehicle fleet.

The set T of transfer points is decomposed into a set T
                        − of inbound transfer nodes where requests get off vehicles and a set T
                        + of outbound transfer nodes where requests are reloaded into vehicles. Figs. 2 and 3
                        
                         detail such a decomposition. Fig. 2 gives an example of a physical network covered by two vehicles. Vehicle 1 picks up requests 1 and 2 and transfers request 2 at point d
                        1, where request 1 is delivered. A second vehicle picks up request 3, then loads request 2 before delivering requests 2 and 3 at a common delivery point d
                        23.

The equivalent logical representation is given in Fig. 3. The transfer point d
                        1 is decomposed into two inbound transfer nodes 
                           
                              
                                 
                                    t
                                 
                                 
                                    
                                       
                                          d
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    2
                                 
                                 
                                    -
                                 
                              
                              ,
                              
                              
                                 
                                    t
                                 
                                 
                                    
                                       
                                          d
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    3
                                 
                                 
                                    -
                                 
                              
                           
                         and two outbound transfer nodes 
                           
                              
                                 
                                    t
                                 
                                 
                                    
                                       
                                          d
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    2
                                 
                                 
                                    +
                                 
                              
                              ,
                              
                              
                                 
                                    t
                                 
                                 
                                    
                                       
                                          d
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    3
                                 
                                 
                                    +
                                 
                              
                           
                        . In practice all these nodes share the same physical location represented by a circle. The transfer of request 2 is represented by the dotted arc between 
                           
                              
                                 
                                    t
                                 
                                 
                                    
                                       
                                          d
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    2
                                 
                                 
                                    -
                                 
                              
                           
                         and 
                           
                              
                                 
                                    t
                                 
                                 
                                    
                                       
                                          d
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    2
                                 
                                 
                                    +
                                 
                              
                           
                        .

In the remainder of this article the term node refers to the logical representation of the physical network. Let P define the set of pickup nodes and D the set of delivery nodes. Thus, the set N of all nodes of the problem is N
                        =
                        P
                        ∪
                        D
                        ∪
                        T
                        −
                        ∪
                        T
                        +
                        ∪{o}∪{o′}. The set of points that can be used as delivery or transfer points is denoted by T. We consider a set R of requests. Each request r
                        ∈
                        R has a pickup node p
                        
                           r
                         and a delivery node d
                        
                           r
                        . Without loss of generality, we assume that all pickup nodes are distinct. Several requests generally share the same physical delivery location; the delivery location of request r
                        ∈
                        R is denoted by b
                        
                           r
                        
                        ∈
                        T. If two requests r and r′ have the same physical delivery location, we split it into two logical vertices d
                        
                           r
                         and 
                           
                              
                                 
                                    d
                                 
                                 
                                    
                                       
                                          r
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         in the logical representation.

We define time windows [e
                        
                           i
                        , l
                        
                           i
                        ] at node i
                        ∈
                        N. 
                           
                              
                                 
                                    t
                                 
                                 
                                    τ
                                    ,
                                    r
                                 
                                 
                                    -
                                 
                              
                           
                         and 
                           
                              
                                 
                                    t
                                 
                                 
                                    τ
                                    ,
                                    r
                                 
                                 
                                    +
                                 
                              
                           
                         are the inbound and outbound transfer nodes of request r
                        ∈
                        R at transfer point τ
                        ∈
                        T. q
                        
                           i
                         is the number of customers loaded/unloaded at node i
                        ∈
                        N. This number may be negative if customers are unloaded at this node.

The set of arcs between the nodes of the problem is denoted by A. We write δ
                        −(i)⊂
                        A for the set of arcs entering node i
                        ∈
                        N and δ
                        +(i)⊂
                        A for the set of arcs leaving node i
                        ∈
                        N. The traversal of each arc a
                        ∈
                        A is associated with a known travel time θ
                        
                           a
                         and cost c
                        
                           a
                        .

The set of arcs considered includes all arcs that potentially can be traversed by vehicles. Arcs that are not consistent with the definition of the problem are not part of A. In particular: there is no arc from a transfer node or a delivery node to a pickup node. There is no arc from an inbound transfer node, a delivery node or a pickup node to an outbound transfer node. Arcs between inbound transfer nodes located at distinct transfer points are also not part of A. There is no arc between an inbound transfer node and a delivery node located at another delivery point. Symmetrically, arcs between a delivery node and an inbound transfer node located at another transfer point are not part of A. There is no arc between outbound transfer nodes located at distinct transfer points and no arc between two delivery nodes located at distinct delivery points. There is also no arc entering the starting depot or leaving the ending depot.

Some additional arcs are excluded from A in order to break some symmetries and reinforce the linear relaxation of the model. The details about these excluded arcs are given in the Appendix. In the remainder of the article, without loss of generality, we consider that service durations at nodes are taken into account in the matrix θ of travel times.

We define the following decision variables: 
                           
                              
                                 
                                    z
                                 
                                 
                                    a
                                 
                                 
                                    k
                                 
                              
                              =
                              1
                           
                         if arc a
                        ∈
                        A is traversed by vehicle k
                        ∈
                        K and 0 otherwise, 
                           
                              
                                 
                                    u
                                 
                                 
                                    i
                                 
                                 
                                    k
                                 
                              
                           
                         is the load of vehicle k
                        ∈
                        K before servicing node 
                           
                              i
                              ∈
                              N
                              ,
                              
                              
                                 
                                    s
                                 
                                 
                                    i
                                 
                                 
                                    k
                                 
                              
                           
                         is the time at which vehicle k
                        ∈
                        K services node i
                        ∈
                        N.

The arc-based formulation AB of the PDPS can then be formulated as follows:
                           
                              (1)
                              
                                 
                                    
                                       
                                          
                                             AB
                                             
                                          
                                       
                                       
                                    
                                    
                                       
                                          
                                             min
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      a
                                                      ∈
                                                      A
                                                      ,
                                                      k
                                                      ∈
                                                      K
                                                   
                                                
                                             
                                             
                                                
                                                   z
                                                
                                                
                                                   a
                                                
                                                
                                                   k
                                                
                                             
                                             
                                                
                                                   c
                                                
                                                
                                                   a
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                -
                                             
                                          
                                          (
                                          i
                                          )
                                          ,
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 i
                                 ∈
                                 P
                                 ∪
                                 D
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                -
                                             
                                          
                                          (
                                          i
                                          )
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          i
                                          )
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 
                                 ∀
                                 i
                                 ∈
                                 P
                                 ∪
                                 D
                                 ∪
                                 
                                    
                                       T
                                    
                                    
                                       -
                                    
                                 
                                 ∪
                                 
                                    
                                       T
                                    
                                    
                                       +
                                    
                                 
                                 ,
                                 
                                 k
                                 ∈
                                 K
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          o
                                          )
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 k
                                 ∈
                                 K
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                -
                                             
                                          
                                          (
                                          
                                             
                                                o
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 k
                                 ∈
                                 K
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          
                                             
                                                p
                                             
                                             
                                                r
                                             
                                          
                                          )
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          
                                             
                                                d
                                             
                                             
                                                r
                                             
                                          
                                          )
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          τ
                                          ∈
                                          T
                                          ,
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         τ
                                                         ,
                                                         r
                                                      
                                                      
                                                         -
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 
                                 ∀
                                 r
                                 ∈
                                 R
                                 ,
                                 
                                 k
                                 ∈
                                 K
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          
                                             
                                                d
                                             
                                             
                                                r
                                             
                                          
                                          )
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          (
                                          
                                             
                                                p
                                             
                                             
                                                r
                                             
                                          
                                          )
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          τ
                                          ∈
                                          T
                                          ,
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         τ
                                                         ,
                                                         r
                                                      
                                                      
                                                         +
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 
                                 ∀
                                 r
                                 ∈
                                 R
                                 ,
                                 
                                 k
                                 ∈
                                 K
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         τ
                                                         ,
                                                         r
                                                      
                                                      
                                                         +
                                                      
                                                   
                                                
                                             
                                          
                                          ,
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                δ
                                             
                                             
                                                +
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         t
                                                      
                                                      
                                                         τ
                                                         ,
                                                         r
                                                      
                                                      
                                                         -
                                                      
                                                   
                                                
                                             
                                          
                                          ,
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 
                                 ∀
                                 r
                                 ∈
                                 R
                                 ,
                                 
                                 τ
                                 ∈
                                 T
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       s
                                    
                                    
                                       j
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       θ
                                    
                                    
                                       a
                                    
                                 
                                 ⩾
                                 M
                                 
                                    
                                       
                                          
                                             
                                                z
                                             
                                             
                                                a
                                             
                                             
                                                k
                                             
                                          
                                          -
                                          1
                                       
                                    
                                 
                                 
                                 ∀
                                 i
                                 ∈
                                 N
                                 ,
                                 
                                 j
                                 ∈
                                 N
                                 ,
                                 
                                 k
                                 ∈
                                 K
                                 ,
                                 
                                 a
                                 ∈
                                 
                                    
                                       δ
                                    
                                    
                                       +
                                    
                                 
                                 (
                                 i
                                 )
                                 ∩
                                 
                                    
                                       δ
                                    
                                    
                                       -
                                    
                                 
                                 (
                                 j
                                 )
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       u
                                    
                                    
                                       j
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 ⩾
                                 M
                                 
                                    
                                       
                                          
                                             
                                                z
                                             
                                             
                                                a
                                             
                                             
                                                k
                                             
                                          
                                          -
                                          1
                                       
                                    
                                 
                                 
                                 ∀
                                 i
                                 ∈
                                 N
                                 ,
                                 
                                 j
                                 ∈
                                 N
                                 ,
                                 
                                 k
                                 ∈
                                 K
                                 ,
                                 
                                 a
                                 ∈
                                 
                                    
                                       δ
                                    
                                    
                                       +
                                    
                                 
                                 (
                                 i
                                 )
                                 ∩
                                 
                                    
                                       δ
                                    
                                    
                                       -
                                    
                                 
                                 (
                                 j
                                 )
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       e
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 
                                    
                                       l
                                    
                                    
                                       i
                                    
                                 
                                 
                                 ∀
                                 i
                                 ∈
                                 N
                                 ,
                                 
                                 k
                                 ∈
                                 K
                              
                           
                        
                        
                           
                              (12)
                              
                                 0
                                 ⩽
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                    
                                       k
                                    
                                 
                                 ⩽
                                 Q
                                 
                                 ∀
                                 i
                                 ∈
                                 N
                                 ,
                                 
                                 k
                                 ∈
                                 K
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                    
                                       z
                                    
                                    
                                       a
                                    
                                    
                                       k
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 a
                                 ∈
                                 A
                                 ,
                                 
                                 k
                                 ∈
                                 K
                              
                           
                        The objective function (1) sums the costs of all arcs traversed by the vehicles. Constraints (2) state that each pickup and each delivery node should be serviced exactly once. Constraints (3) are the flow conservation constraints. Constraints (4) and (5) state that each vehicle has to leave the starting depot and enter the ending depot exactly once. Unused vehicles follow arc (o, o′) at cost 0. Constraints (6) state that if a pickup is serviced on a route, then the corresponding delivery node or an inbound transfer node associated with this request is served on this route. Constraints (7) are similar to constraints (6): if a delivery node is served on a route, then either the pickup node or an outbound transfer node associated with this request is served on this route. Constraints (8) impose that if a given inbound transfer node is reached by one route then the associated outbound transfer node is served by one of the other routes. Constraints (9) state that if a node j is serviced after a node i in a route, the time of service at j is greater than the time of the beginning of service at i plus the service duration and the travel time between the nodes. Using the same reasoning as (9) for travel time, (10) model load conservation constraints. Constraints (11) are time window constraints and constraints (12) are vehicle capacity constraints.

It should be noted that the size of model AB grows with the size of the instances. The size of the logical representation can be computed in the following way. The number of vertices in the logical representation of model AB is 2∣R∣∣T∣+2. This number of vertices is decomposed in the following way: 2 vertices representing the starting and ending depots, and for each request r
                        ∈
                        R, 1 pickup point, 1 delivery point, ∣T∣−1 inbound transfer points and ∣T∣−1 outbound transfer points. The exact number of arcs actually depends on the constraints of the problem. However an upper bound on the number of arcs can be computed in the following way: there are ∣K∣∣R∣ arcs from the depots to a pickup node. There are at most ∣K∣∣R∣(∣R∣−1) arcs from one pickup node to another; ∣K∣∣R∣2∣T∣ arcs from a pickup node to a delivery/inbound transfer node; ∣K∣∣R∣∣T∣(∣R∣−1) arcs from an inbound transfer node to another; ∣K∣∣R∣∣T∣(∣R∣−1) arcs from an inbound transfer node to a delivery node; ∣K∣∣R∣∣T∣(∣R∣−1) arcs from an outbound transfer node to another; ∣K∣∣R∣2∣T∣(∣T∣−1) arcs from an outbound transfer node to a delivery node; ∣K∣∣R∣∣T∣(∣R∣−1) arcs from a delivery node to another; ∣K∣∣R∣ arcs from a delivery node to the depot. This sums up to a maximum of ∣K∣(∣R∣2
                        +∣R∣+4∣R∣2∣T∣−4∣R∣∣T∣+∣R∣2∣T∣2) arcs.

The PDPS is NP-hard since any instance of the the vehicle routing problem with time windows (VRPTW) can be transformed to a PDPS instance in polynomial time and since the VRPTW is known to be NP-hard (see e.g. Toth & Vigo (2002)). A VRPTW instance is transformed to a PDPS instance as follows: each VRPTW customer gives rise to a request in the PDPS with pickup at the location of the VRPTW customer and delivery at the depot which also represents the only transfer point. The demand of the request is set equal to the demand of corresponding VRPTW customer and vehicle capacity is replicated from the VRPTW instance. Time windows on pickup nodes are copied from the corresponding VRPTW customers while time windows on delivery nodes can be set such that it is impossible to visit a pickup node after performing a drop-off.

This section introduces two set partitioning formulations SP1 and SP2 based on paths. Path-based formulations are known to yield stronger LP relaxation than arc-based formulations. On the other hand, they introduce a huge number of decision variables. The column generation technique used to solve such models is detailed in Section 4.1.

In the path-based models we split routes into two independent legs on each side of the transfer point.
                           Definition 1
                           A pickup route starts at o, visits a sequence of pickup points, is emptied at one transfer or delivery point and returns to o′. A shuttle route starts at o, loads a set of requests at one transfer point, then unloads all these requests at the next stop before returning to o′.

This definition is consistent because the distance to the depot is zero and there are always vehicles available. In practice, a pickup route directly followed by a shuttle route can be performed by the same vehicle. However, these routes are distinct in the model.

A path is an ordered sequence of nodes between o and o′, such that every arc traversed is part of A, vehicle capacity Q and time windows constraints are satisfied. The cost of a path is the sum of the costs of its arcs.

We call Ω the set of all paths and Ω
                        
                           p
                         the set of pickup paths. The cost of path p
                        ∈
                        Ω is written c
                        
                           p
                        . 
                           
                              
                                 
                                    a
                                 
                                 
                                    i
                                    ,
                                    τ
                                 
                                 
                                    p
                                 
                              
                           
                         is a binary value equal to 1 if the node i
                        ∈
                        P
                        ∪
                        T
                        + and the delivery point τ
                        ∈
                        T are both serviced by path p
                        ∈
                        Ω. 
                           
                              
                                 
                                    v
                                 
                                 
                                    τ
                                    ,
                                    
                                       
                                          τ
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         is the cost of routing a vehicle from the delivery point τ
                        ∈
                        T to delivery point τ′∈
                        T. Finally, R
                        
                           τ
                         is the set of requests r
                        ∈
                        R delivered at point τ
                        ∈
                        T (i.e. such that b
                        
                           r
                        
                        =
                        τ). The use of the binary data 
                           
                              
                                 
                                    a
                                 
                                 
                                    i
                                    ,
                                    τ
                                 
                                 
                                    p
                                 
                              
                           
                         implies a different graph model: each pickup point is duplicated in as many nodes as there are delivery points. If a pickup route visits a pickup point p
                        
                           i
                         and terminates at delivery d
                        
                           j
                        , then it serves the duplicated node denoted 
                           
                              
                                 
                                    p
                                 
                                 
                                    i
                                 
                                 
                                    
                                       
                                          d
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                           
                         in this representation.


                        Fig. 4
                         illustrates this new graph representation for the routes presented in Fig. 2. This model is based on the following observations: in Fig. 2, it is not necessary to identify which vehicle performs the shuttle route between d
                        1 and d
                        23 to calculate the cost of the solution (this cost is the same if the plain route or the dashed route serves d
                        23 after d
                        1). In addition, arcs from and to the depot have cost zero, so they do not need to be included in routes. In Fig. 2, there are two delivery points (d
                        1 and d
                        23), therefore for each pickup point we define two nodes in the graph representation. The plain route picks up request 1 and 2 and terminates at d
                        1. This is represented by nodes 
                           
                              
                                 
                                    p
                                 
                                 
                                    1
                                 
                                 
                                    
                                       
                                          d
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                           
                         and 
                           
                              
                                 
                                    p
                                 
                                 
                                    2
                                 
                                 
                                    
                                       
                                          d
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                           
                        . The dashed route sequentially visits p
                        3, d
                        1 and d
                        23. In Fig. 4, we attribute only the pickup part of this route to a vehicle. This part ends at delivery point d
                        1, therefore its visit at p
                        3 is modeled by the service of node 
                           
                              
                                 
                                    p
                                 
                                 
                                    3
                                 
                                 
                                    
                                       
                                          d
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                           
                        . The dotted arc models one shuttle route from d
                        1 to d
                        23. In particular, this model is used to define dominance rules in the column generation approach proposed in Section 4.1.

The decision variables are the following:


                        ω
                        
                           p
                        
                        =1 if route p
                        ∈
                        Ω is used in the solution and 0 otherwise, 
                           
                              
                                 
                                    y
                                 
                                 
                                    τ
                                    ,
                                    
                                       
                                          τ
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         is an integer variable representing the number of vehicles performing shuttle routes between the delivery points τ
                        ∈
                        T and τ′∈
                        T. We consider y
                        
                           τ,τ
                        
                        =0, ∀τ
                        ∈
                        T.

Below we introduce models SP1 and SP2. Both models aim to select a set of paths which service all requests at minimum cost. Model SP1 separates the cost of pickup and shuttle routes and ignores which requests are transported in each shuttle route. Since the fleet is homogeneous, knowing the number of shuttle routes between each pair of delivery points suffices to compute the cost of a solution. Knowing which request is served by which vehicle can easily be computed in a post-processing step. In model SP2, the requests transported by each shuttle route are explicitly determined. The mathematical modeling does not distinguish shuttle routes from pickup routes.

On the one hand, the linear relaxation of model SP1 should be faster to solve, as the shuttle routes are directly managed in the master problem so fewer columns need to be generated. On the other hand, the linear relaxation of model SP2 provides better lower bounds.

In model SP1, the exact composition of the vehicles following a shuttle route between delivery points is not computed. Model SP1 can be stated as follows:
                           
                              (14)
                              
                                 
                                    
                                       
                                          
                                             SP
                                             1
                                             
                                          
                                       
                                       
                                    
                                    
                                       
                                          
                                             min
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      p
                                                      ∈
                                                      
                                                         
                                                            Ω
                                                         
                                                         
                                                            p
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   ω
                                                
                                                
                                                   p
                                                
                                             
                                             
                                                
                                                   c
                                                
                                                
                                                   p
                                                
                                             
                                             +
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      τ
                                                      ∈
                                                      T
                                                      ,
                                                      
                                                         
                                                            τ
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                      ∈
                                                      T
                                                   
                                                
                                             
                                             
                                                
                                                   y
                                                
                                                
                                                   τ
                                                   ,
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   v
                                                
                                                
                                                   τ
                                                   ,
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (15)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          p
                                          ∈
                                          Ω
                                          ,
                                          τ
                                          ∈
                                          T
                                       
                                    
                                 
                                 
                                    
                                       ω
                                    
                                    
                                       p
                                    
                                 
                                 
                                    
                                       a
                                    
                                    
                                       i
                                       ,
                                       τ
                                    
                                    
                                       p
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 i
                                 ∈
                                 P
                              
                           
                        
                        
                           
                              (16)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          p
                                          ∈
                                          Ω
                                          ,
                                          r
                                          ∈
                                          
                                             
                                                R
                                             
                                             
                                                
                                                   
                                                      τ
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       ω
                                    
                                    
                                       p
                                    
                                 
                                 
                                    
                                       a
                                    
                                    
                                       
                                          
                                             p
                                          
                                          
                                             r
                                          
                                          
                                             p
                                          
                                       
                                       ,
                                       τ
                                    
                                 
                                 
                                    
                                       q
                                    
                                    
                                       
                                          
                                             p
                                          
                                          
                                             r
                                          
                                       
                                    
                                 
                                 ⩽
                                 
                                    
                                       Qy
                                    
                                    
                                       τ
                                       ,
                                       
                                          
                                             τ
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 
                                 ∀
                                 τ
                                 ∈
                                 T
                                 ,
                                 
                                 
                                    
                                       τ
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 T
                                 |
                                 
                                    
                                       τ
                                    
                                    
                                       ′
                                    
                                 
                                 
                                 ≠
                                 
                                 τ
                              
                           
                        
                        
                           
                              (17)
                              
                                 
                                    
                                       ω
                                    
                                    
                                       p
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 p
                                 ∈
                                 
                                    
                                       Ω
                                    
                                    
                                       p
                                    
                                 
                                 ,
                              
                           
                        
                        
                           
                              (18)
                              
                                 
                                    
                                       y
                                    
                                    
                                       τ
                                       ,
                                       
                                          
                                             τ
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 ∈
                                 
                                    
                                       Z
                                    
                                    
                                       +
                                    
                                 
                                 
                                 ∀
                                 τ
                                 ∈
                                 T
                                 ,
                                 
                                 
                                    
                                       τ
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 T
                              
                           
                        The objective function (14) is divided into two parts representing the cost of pickup routes and shuttle routes respectively. Constraints (15) force each pickup node to be serviced exactly once. Constraints (16) ensure that the number of vehicles going from delivery point τ to delivery point τ′ is sufficient to transport all requests from τ
                        ∈
                        T to τ′∈
                        T.

In model SP2, the composition of the shuttle routes is formulated explicitly.
                           
                              (19)
                              
                                 
                                    
                                       
                                          
                                             SP
                                             2
                                             
                                          
                                       
                                       
                                    
                                    
                                       
                                          
                                             min
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      p
                                                      ∈
                                                      Ω
                                                   
                                                
                                             
                                             
                                                
                                                   ω
                                                
                                                
                                                   p
                                                
                                             
                                             
                                                
                                                   c
                                                
                                                
                                                   p
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (20)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          p
                                          ∈
                                          Ω
                                          ,
                                          τ
                                          ∈
                                          T
                                       
                                    
                                 
                                 
                                    
                                       ω
                                    
                                    
                                       p
                                    
                                 
                                 
                                    
                                       a
                                    
                                    
                                       i
                                       ,
                                       τ
                                    
                                    
                                       p
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 i
                                 ∈
                                 P
                              
                           
                        
                        
                           
                              (21)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          p
                                          ∈
                                          Ω
                                       
                                    
                                 
                                 
                                    
                                       ω
                                    
                                    
                                       p
                                    
                                 
                                 
                                    
                                       a
                                    
                                    
                                       
                                          
                                             p
                                          
                                          
                                             r
                                          
                                          
                                             p
                                          
                                       
                                       ,
                                       τ
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          p
                                          ∈
                                          Ω
                                       
                                    
                                 
                                 
                                    
                                       ω
                                    
                                    
                                       p
                                    
                                 
                                 
                                    
                                       a
                                    
                                    
                                       
                                          
                                             t
                                          
                                          
                                             τ
                                             ,
                                             r
                                          
                                          
                                             +
                                          
                                       
                                       ,
                                       
                                          
                                             τ
                                          
                                          
                                             ′
                                          
                                       
                                    
                                    
                                       p
                                    
                                 
                                 
                                 ∀
                                 τ
                                 ∈
                                 T
                                 ,
                                 
                                 
                                    
                                       τ
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 T
                                 ,
                                 
                                 r
                                 ∈
                                 
                                    
                                       R
                                    
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 |
                                 
                                    
                                       τ
                                    
                                    
                                       ′
                                    
                                 
                                 
                                 ≠
                                 
                                 τ
                              
                           
                        
                        
                           
                              (22)
                              
                                 
                                    
                                       ω
                                    
                                    
                                       p
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 p
                                 ∈
                                 Ω
                              
                           
                        The objective function (19) is the sum of all routes costs. Constraints (20) impose that each pickup node is serviced exactly once. Constraints (21) ensure that each request arriving at a transfer point is transferred to a vehicle that brings it to its delivery point.

The branch-and-cut-and-price algorithm consists in using column generation to compute the linear relaxation of each node of the branch-and-cut tree. This method has already been successfully applied to solve the related Pickup and Delivery Problem with Time Windows (Ropke & Cordeau, 2009; Baldacci, Bartolini, & Mingozzi, 2011). For each node, as long as valid inequalities strengthening the linear relaxation are found, they are added. This section describes algorithms for solving the pricing sub-problem associated with SP1 and SP2, it introduces three families of valid inequalities used for both path-based formulations of the PDPS and it presents the branching rules that are used to eliminate fractional solutions.

Path-based formulations typically include millions or billions of decision variables and cannot be handled directly. The general idea of column generation is to solve a linear relaxation which only considers a small subset of decision variables. If the result of the restricted problem is optimal, the algorithm stops. To check the optimality of a solution, a sub-problem called a pricing problem, is solved to identify columns having a negative reduced cost. If such columns are identified, they are appended to the subset of columns considered, and the problem is solved again. The process goes on for as long as the sub-problem finds columns with a negative reduced cost.

In the following, we introduce two sub-problems. The first aims to identify columns representing pickup routes, while the second searches for shuttle routes.

Generating pickup routes amounts to solving an Elementary Shortest Path Problem with Resource Constraints (ESPPRC). The ESPPRC aims to generate an elementary shortest path in a graph that respects some constraints on the consumption of resources (Feillet, Dejax, Gendreau, & Guéguen, 2004; Irnich & Desaulniers, 2005, chap. 2). In our case, we seek a shortest path between o and o′ where the resources considered are the capacity of the vehicles and the time of service at the nodes.

The algorithm used to solve the ESPPRC builds partial paths, which are ordered sequences of nodes that begin at the starting depot and return to the ending depot. A feasible extension of a partial path is a path that strictly includes this partial path without violating any constraint of the problem. The solution of the ESPPRC relies on a labeling principle which considers every feasible extension of a partial path that can lead to an optimal solution. In the construction of the path, the time of service at nodes is scheduled as early as possible.

This sub-problem is solved repeatedly ∣T∣ times. At each repetition, a distinct delivery point is selected to be the last point visited before the ending depot. We only consider requests that should be delivered at this point or can be transferred at this point without any time window violation. Knowing the final destination of the route, we can easily ensure that a partial path has a feasible extension. It consists in checking that every request already serviced by the route can arrive on time at its delivery node.

In order to solve this sub-problem, a label-correcting algorithm is used as proposed by Feillet et al. (2004). Each label represents a partial path. At each iteration, all the labels representing partial paths ending at a given node i are extended to the nodes that can be reached from i without violating any constraint of the problem. When a new label is generated, it is checked against the set of existing labels, in order to determine if it is dominated by a label, or if it dominates some labels. The labels that are dominated are discarded. When no label remains to be extended, the optimal solution has been identified.

The ESPPRC labeling algorithm relies on labels to model partial paths from o to any node i. A label indicates which is the current node as well as the consumption of resources along the partial path. It is modeled as a 6-tuple of the form 
                              
                                 (
                                 n
                                 ,
                                 t
                                 ,
                                 
                                    
                                       c
                                    
                                    
                                       ¯
                                    
                                 
                                 ,
                                 l
                                 ,
                                 m
                                 ,
                                 S
                                 )
                              
                           . If Λ is a label then n(Λ) denotes the last node of the partial path represented by Λ. t(Λ) is the time of service at node n(Λ). 
                              
                                 
                                    
                                       c
                                    
                                    
                                       ¯
                                    
                                 
                                 (
                                 Λ
                                 )
                              
                            represents the reduced cost of the partial path represented by Λ. l(Λ) denotes the load of the vehicle after servicing node n(Λ). m(Λ) is the latest time at which the delivery node can be serviced without leading to a time window violation for the requests serviced by the partial path. S(Λ) represents the set of requests that can still be serviced. A request r
                           ∈
                           R can be serviced if its pickup node can be serviced from n(Λ) within its time window and its delivery node can be serviced within its time window and before m(Λ).

Let us denote 
                              
                                 
                                    
                                       π
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 R
                              
                            the dual variable associated with constraints (15) and (20) in formulations SP1 and SP2, 
                              
                                 
                                    
                                       λ
                                    
                                    
                                       τ
                                       ,
                                       
                                          
                                             τ
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 ∈
                                 
                                    
                                       R
                                    
                                    
                                       -
                                    
                                 
                              
                           , the dual variables associated with constraints (16) in model SP1 and 
                              
                                 
                                    
                                       μ
                                    
                                    
                                       r
                                       ,
                                       τ
                                    
                                 
                                 ∈
                                 
                                    
                                       R
                                    
                                    
                                       -
                                    
                                 
                              
                            the dual variables associated with constraints (21) in model SP2. In model SP1 the reduced cost of a path p going to point τ
                           ∈
                           T is
                              
                                 
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                p
                                             
                                          
                                       
                                       
                                          ¯
                                       
                                    
                                    =
                                    
                                       
                                          c
                                       
                                       
                                          p
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             P
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          i
                                          ,
                                          τ
                                       
                                       
                                          p
                                       
                                    
                                    
                                       
                                          π
                                       
                                       
                                          i
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             
                                                
                                                   τ
                                                
                                                
                                                   ′
                                                
                                             
                                             ∈
                                             T
                                             ⧹
                                             {
                                             τ
                                             }
                                             ,
                                             r
                                             ∈
                                             
                                                
                                                   R
                                                
                                                
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                r
                                             
                                             
                                                p
                                             
                                          
                                          ,
                                          τ
                                       
                                    
                                    
                                       
                                          λ
                                       
                                       
                                          τ
                                          ,
                                          
                                             
                                                τ
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                 
                              
                           In model SP2 the reduced cost of a path p going to point τ
                           ∈
                           T is
                              
                                 
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                p
                                             
                                          
                                       
                                       
                                          ¯
                                       
                                    
                                    =
                                    
                                       
                                          c
                                       
                                       
                                          p
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             P
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          i
                                          ,
                                          τ
                                       
                                       
                                          p
                                       
                                    
                                    
                                       
                                          π
                                       
                                       
                                          i
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             
                                                
                                                   τ
                                                
                                                
                                                   ′
                                                
                                             
                                             ∈
                                             T
                                             ⧹
                                             {
                                             τ
                                             }
                                             ,
                                             r
                                             ∈
                                             
                                                
                                                   R
                                                
                                                
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                r
                                             
                                             
                                                p
                                             
                                          
                                          ,
                                          τ
                                       
                                    
                                    
                                       
                                          μ
                                       
                                       
                                          r
                                          ,
                                          τ
                                       
                                    
                                 
                              
                           In the label-correcting algorithm, a dominance criterion is used during the search to discard labels. It can be said that a label Λ dominates a label Λ′ when the reduced cost of any feasible extension of label Λ′ is larger than the lowest reduced cost of a feasible extension of label Λ. When a label is dominated it can be deleted.
                              Proposition 1
                              Dominance criterion


                              
                                 Let Λ and Λ′ be two labels representing partial paths from o. Let us denote ≻ the relation given by the following set of conditions:
                                 
                                    
                                       (23)
                                       
                                          Λ
                                          ≻
                                          
                                             
                                                Λ
                                             
                                             
                                                ′
                                             
                                          
                                          ⇔
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            n
                                                            (
                                                            Λ
                                                            )
                                                            =
                                                            n
                                                            (
                                                            
                                                               
                                                                  Λ
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            t
                                                            (
                                                            Λ
                                                            )
                                                            ⩽
                                                            t
                                                            (
                                                            
                                                               
                                                                  Λ
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  c
                                                               
                                                               
                                                                  ¯
                                                               
                                                            
                                                            (
                                                            Λ
                                                            )
                                                            ⩽
                                                            
                                                               
                                                                  c
                                                               
                                                               
                                                                  ¯
                                                               
                                                            
                                                            (
                                                            
                                                               
                                                                  Λ
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            l
                                                            (
                                                            Λ
                                                            )
                                                            ⩽
                                                            l
                                                            (
                                                            
                                                               
                                                                  Λ
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            m
                                                            (
                                                            Λ
                                                            )
                                                            ⩾
                                                            m
                                                            (
                                                            
                                                               
                                                                  Λ
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         
                                                            S
                                                            (
                                                            
                                                               
                                                                  Λ
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            )
                                                            ⊂
                                                            S
                                                            (
                                                            Λ
                                                            )
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 If Λ
                                 ≻
                                 Λ′, then Λ dominates Λ′.
                              

Assume that Λ
                                 ≻
                                 Λ′. Then S(Λ′)⊂
                                 S(Λ) and any node that can extend Λ′ can also extend Λ. Since t(Λ)⩽
                                 t(Λ′), any node that can be serviced after n(Λ′) without breaking time window constraints can also be serviced after n(Λ), earlier or at the same time. Since, m(Λ)⩾
                                 m(Λ′), any sequence of nodes that can be serviced in path Λ′ can also be serviced in path Λ. This also applies to capacity constraints, as the remaining capacity is greater for path Λ. Finally, we have 
                                    
                                       
                                          
                                             c
                                          
                                          
                                             ¯
                                          
                                       
                                       (
                                       Λ
                                       )
                                       ⩽
                                       
                                          
                                             c
                                          
                                          
                                             ¯
                                          
                                       
                                       (
                                       
                                          
                                             Λ
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                 . The reduced cost of a path depends only on the reduced cost of the traversed arcs, thus any extension of Λ′ has a greater cost than the same extension of Λ. Hence every feasible extension of Λ′ is a feasible extension of Λ and has a larger reduced cost. □

In formulation SP2, shuttle routes between delivery points have to be generated explicitly for each couple of delivery points. Let τ denote the starting transfer point and τ′ the ending delivery point of a shuttle route p. Let R
                           
                              p
                            be the set of requests delivered at τ′ by the shuttle route p. The reduced cost of this route can be expressed by
                              
                                 
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                p
                                             
                                          
                                       
                                       
                                          ¯
                                       
                                    
                                    =
                                    
                                       
                                          v
                                       
                                       
                                          τ
                                          ,
                                          
                                             
                                                τ
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                    +
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             r
                                             ∈
                                             
                                                
                                                   R
                                                
                                                
                                                   p
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          p
                                       
                                       
                                          
                                             
                                                t
                                             
                                             
                                                τ
                                                ,
                                                r
                                             
                                             
                                                +
                                             
                                          
                                          ,
                                          
                                             
                                                τ
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                    
                                       
                                          μ
                                       
                                       
                                          r
                                          ,
                                          τ
                                       
                                    
                                 
                              
                           Let us consider the binary variable ν
                           
                              r
                            which indicates if request 
                              
                                 r
                                 ∈
                                 
                                    
                                       R
                                    
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                              
                            is transported or not from τ to τ′ along this shuttle route. The shuttle route with the minimum reduced cost is characterized by the following problem:
                              
                                 (24)
                                 
                                    min
                                    
                                    
                                       
                                          v
                                       
                                       
                                          τ
                                          ,
                                          
                                             
                                                τ
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                    +
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             r
                                             ∈
                                             
                                                
                                                   R
                                                
                                                
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          ν
                                       
                                       
                                          r
                                       
                                    
                                    
                                       
                                          μ
                                       
                                       
                                          r
                                          ,
                                          τ
                                       
                                    
                                 
                              
                           
                           
                              
                                 (25)
                                 
                                    s
                                    .
                                    t
                                    .
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             r
                                             ∈
                                             
                                                
                                                   R
                                                
                                                
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          ν
                                       
                                       
                                          r
                                       
                                    
                                    
                                       
                                          q
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                r
                                             
                                          
                                       
                                    
                                    ⩽
                                    Q
                                 
                              
                           
                           
                              
                                 (26)
                                 
                                    
                                       
                                          ν
                                       
                                       
                                          r
                                       
                                    
                                    ∈
                                    {
                                    0
                                    ,
                                    1
                                    }
                                    
                                    ∀
                                    r
                                    ∈
                                    
                                       
                                          R
                                       
                                       
                                          
                                             
                                                τ
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                 
                              
                           The constraint (25) states that the number of requests transported by the shuttle vehicle should not exceed its capacity.

Since 
                              
                                 
                                    
                                       v
                                    
                                    
                                       τ
                                       ,
                                       
                                          
                                             τ
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                              
                            is a constant term, the previous model is strictly equivalent to
                              
                                 
                                    
                                       max
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      -
                                                      
                                                         
                                                            
                                                               ∑
                                                            
                                                            
                                                               r
                                                               ∈
                                                               
                                                                  
                                                                     R
                                                                  
                                                                  
                                                                     
                                                                        
                                                                           τ
                                                                        
                                                                        
                                                                           ′
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            ν
                                                         
                                                         
                                                            r
                                                         
                                                      
                                                      
                                                         
                                                            μ
                                                         
                                                         
                                                            r
                                                            ,
                                                            τ
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      r
                                                      ∈
                                                      
                                                         
                                                            R
                                                         
                                                         
                                                            
                                                               
                                                                  τ
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   ν
                                                
                                                
                                                   r
                                                
                                             
                                             ⩽
                                             Q
                                             ,
                                             
                                                
                                                   ν
                                                
                                                
                                                   r
                                                
                                             
                                             ∈
                                             {
                                             0
                                             ,
                                             1
                                             }
                                             ,
                                             ∀
                                             r
                                             ∈
                                             
                                                
                                                   R
                                                
                                                
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           Since Q is an integer and the ν
                           
                              r
                            are binary variables, the problem is solved optimally by selecting the Q requests with the smallest negative μ
                           
                              r,τ
                           . If fewer than Q requests have a negative μ
                           
                              r,τ
                           , all the requests with negative μ
                           
                              r, τ
                            are selected. Thus, solving this sub-problem amounts to sorting the requests in 
                              
                                 
                                    
                                       R
                                    
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                              
                           .

We consider three families of valid inequalities: rounded capacity inequalities (Naddef & Rinaldi, 2002, chap. 3), two-path inequalities (Kohl, Desrosiers, Madsen, Solomon, & Soumis, 1999) and subset-row inequalities (Jepsen, Petersen, Spoorendonk, & Pisinger, 2008). The two first families of valid inequalities are defined on aggregated variables x
                        
                           a
                         that are computed from the z-variables of the arc-based formulation AB as 
                           
                              
                                 
                                    x
                                 
                                 
                                    a
                                 
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    k
                                    ∈
                                    K
                                 
                              
                              
                                 
                                    z
                                 
                                 
                                    a
                                 
                                 
                                    k
                                 
                              
                              ,
                              ∀
                              a
                              ∈
                              A
                           
                        . We refer to Kohl et al. (1999) for a description of how to handle inequalities defined on the x
                        
                           a
                         variables in a branch-and-price algorithm. The last family of inequalities are defined directly on the ω
                        
                           p
                         variables of the path-based formulations. Jepsen et al. (2008) explains how such inequalities can be handled in a branch-and-price algorithm and a unified treatment of the subject of cutting planes in branch-and-price algorithms can be found in Desaulniers, Desrosiers, and Spoorendonk (2011).

The aim of rounded capacity inequalities (Naddef & Rinaldi, 2002, Laporte, Desrochers, & Nobert, 3; Laporte et al., 1984) is to prevent a set of nodes S
                           ⊂
                           P from being serviced by a number of vehicles which is not consistent with the capacity constraints. Let us denote by δ
                           −(S)⊂
                           A the set of arcs entering S and let x(δ
                           −(S)) be the flow along the arcs of the set δ
                           −(S) in the optimal solution. If q(S) designates the sum of the load of the nodes in S, then the following inequality is valid: x(δ
                           −(S))⩾
                           max (1, ⌈q(S)/Q⌉).

To detect the violated valid inequalities, we use the same separation heuristics as in Lysgaard, Letchford, and Eglese (2004). These heuristics have been made available in the CVRPSEP library (Lysgaard, 2003).

Two-path inequalities (Kohl et al., 1999) prevent a set of nodes S
                           ⊂
                           P from being serviced by fewer than two vehicles if no feasible solution with one vehicle exists. When S cannot be serviced by a single route, the inequality: x(δ
                           −(S))⩾2 is valid.

In order to detect whether a set S can be serviced by a single route, one should check if the TSPTW on this set has a feasible solution. In order to find candidate sets S we use a simple greedy heuristic: let x
                           ∗ be the aggregated variables corresponding to the current fractional solution. For each pickup node p
                           ∈
                           P, the separation heuristic starts with a set S′={p} and repeatedly adds to the set S′ the pickup node which minimizes the increase of the value of x
                           ∗(δ
                           −(S′)). As long as x
                           ∗(δ
                           −(S′))<2, it is checked whether a feasible solution of the TSPTW with the nodes of S′ exists. If not, a new violated valid inequality has been exhibited.

The third family of valid inequalities is subset-row inequalities introduced by Jepsen et al. (2008), which indicate that two routes which visit a common customer are conflicting. Considering a set S
                           ⊂
                           P of pickup nodes, and 
                              
                                 k
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       ∗
                                    
                                 
                              
                            such that 0<
                           k
                           ⩽∣S∣, the following inequality is valid:
                              
                                 (27)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             p
                                             ∈
                                             Ω
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   1
                                                
                                                
                                                   k
                                                
                                             
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                      ∈
                                                      S
                                                      ,
                                                      τ
                                                      ∈
                                                      T
                                                   
                                                
                                             
                                             
                                                
                                                   a
                                                
                                                
                                                   i
                                                   ,
                                                   τ
                                                
                                                
                                                   p
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          ω
                                       
                                       
                                          p
                                       
                                    
                                    ⩽
                                    
                                       
                                          
                                             
                                                
                                                   |
                                                   S
                                                   |
                                                
                                                
                                                   k
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           This means that the number of paths of the optimal solution where ∣S∣⩾
                           k should be lower than 
                              
                                 
                                    
                                       
                                          
                                             
                                                |
                                                S
                                                |
                                             
                                             
                                                k
                                             
                                          
                                       
                                    
                                 
                              
                            (otherwise at least one element of S is serviced by more than one route). We therefore search conflicting columns in the optimal solution of the linear relaxation of the PDPS, with a separation heuristic considering all sets S of three customers and k
                           =2. If the set of columns covering these customers violates constraints (27), the corresponding valid inequality is added to the set-partitioning formulation. These inequalities complicate the pricing sub-problem as each active constraint adds an extra resource to the ESPPRC. We refer to the paper by Jepsen et al. (2008) for further details.

Branching is performed when the solution of the linear relaxation of the master problem is fractional and no more valid inequalities can be found by the separation heuristics. The first node of the branch-and-bound tree, where no branching has been done, is called the root node. The computation time depends largely on the branching strategy. A very common approach is to give priority to branching decisions which eliminate most cases. We propose three branching rules that are used sequentially.
                           
                              1.
                              Since variables ω
                                 
                                    p
                                  associated with the use of columns p
                                 ∈
                                 Ω take either value 0 or 1, their sum should be an integer value. If not, we branch on the value of this sum and create two branches with constraints 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             p
                                             ∈
                                             Ω
                                          
                                       
                                       
                                          
                                             ω
                                          
                                          
                                             p
                                          
                                       
                                       ⩽
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      p
                                                      ∈
                                                      Ω
                                                   
                                                
                                                
                                                   
                                                      ω
                                                   
                                                   
                                                      p
                                                   
                                                
                                             
                                          
                                       
                                    
                                  and 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             p
                                             ∈
                                             Ω
                                          
                                       
                                       
                                          
                                             ω
                                          
                                          
                                             p
                                          
                                       
                                       ⩾
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      p
                                                      ∈
                                                      Ω
                                                   
                                                
                                                
                                                   
                                                      ω
                                                   
                                                   
                                                      p
                                                   
                                                
                                             
                                          
                                       
                                    
                                  respectively.

If 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             p
                                             ∈
                                             Ω
                                          
                                       
                                       
                                          
                                             ω
                                          
                                          
                                             p
                                          
                                       
                                    
                                  is integer, we consider branching on the number of vehicles following shuttle routes between two given delivery points. This corresponds to the y variables in model SP1 and the ω variables associated with the shuttle path columns in model SP2. Let us assume that some variable 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             τ
                                             ,
                                             
                                                
                                                   τ
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                  in the optimal solution has a non-integer value 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             τ
                                             ,
                                             
                                                
                                                   τ
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 . Then in one branch we add the constraint 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             τ
                                             ,
                                             
                                                
                                                   τ
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                       ⩾
                                       
                                          
                                             
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      τ
                                                      ,
                                                      
                                                         
                                                            τ
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                       
                                    
                                  and in the other branch 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             τ
                                             ,
                                             
                                                
                                                   τ
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                       ⩽
                                       
                                          
                                             
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      τ
                                                      ,
                                                      
                                                         
                                                            τ
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                       
                                    
                                 . In model SP2, we replace 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             τ
                                             ,
                                             
                                                
                                                   τ
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                  by 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             p
                                             ∈
                                             
                                                
                                                   Ω
                                                
                                                
                                                   τ
                                                   ,
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             ω
                                          
                                          
                                             p
                                          
                                       
                                    
                                 , where 
                                    
                                       
                                          
                                             Ω
                                          
                                          
                                             τ
                                             ,
                                             
                                                
                                                   τ
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                  is the set of columns that represent shuttle paths between τ and τ′.

If the sum of variables ω
                                 
                                    p
                                 , p
                                 ∈
                                 Ω and the number of shuttle routes are both integers, the algorithm branches on the arcs: if the sum of the ω
                                 
                                    p
                                  variables using a given arc is not an integer, two branches are created: one branch imposes the use of the arc while the other branch forbids it. We branch first on the arc for which the flow is closest to 0.5.

The algorithm presented in this paper was developed in C++ and run on an i3-530 Ubuntu 10.04 computer. We used IBM Ilog Cplex 12.2 to solve all linear relaxations. The main goal of this section is to evaluate the performance of the algorithm described in the preceding section. We first assess the performance of arc-based and path-based formulations on a set of small-sized instances. Next, we measure the efficiency of various combinations of valid inequalities. Models SP1 and SP2 are then compared on a collection of generated instances with 25–75 requests. The potential benefits of using transfer points are discussed in Section 5.6. We conclude the section with the results of instances arising from real-world data.

In order to assess the efficiency of the methods proposed in this article, we have generated several instances. The methodology for generating those instances has been the following. The points of the problem are located in a 100km×100km square, and the Euclidean distance is used. We consider that vehicles travel at a constant speed of 60km/hour. We consider 30minutes wide time windows at delivery points. The time windows at pickup points open one hour before the end of those of the delivery points. The service duration at pickup points is one minute. The service duration at delivery/transfer points is five minutes. The number of requests considered is 15, 20, 25, 50, and 75. The number of distinct delivery points is between 2 and 4. We assume that each delivery point can be used as a transfer point. The capacity of vehicles is 3, 4, 5, 6 or 8 passengers. The purpose of instances with 15 or 20 requests is to compare models SP1 and SP2 with model AB: 12 instances of each size have been created. These instances have 2 transfer points and vehicle capacities ranging from 3 to 6 passengers. In addition, we defined 27 instances for each of the 25, 50 and 75 requests size. These instances have between 2 and 4 transfer points and vehicle capacity of 4, 6 or 8 passengers. In total, there are 105 instances.

Those instances are classified in three sets based on their geographical distributions of pickup points: random (R), clusters (C) and mixed random-clusters (RC). In the three cases, the position of the first delivery point is selected randomly. Then we iteratively locate other delivery points such that the closest delivery point previously generated is not farther than 25km. For all instances of set (R), we first randomly select the delivery point of each request. Then the pickup points are randomly selected such that direct trips from the pickup points to the delivery points satisfy the time window constraints. For all instances of set (C), we consider clusters of size 8km×8km. We first randomly choose the centers of the clusters such that at least one delivery point can be reached within 1hour. Moreover, for each delivery point, at least one cluster must be reached within 1hour. Then for each request, we randomly select the delivery points and then the pickup points in one of the four clusters such that time window constraints are satisfied. Instances in set (RC) mix the properties of sets (R) and (C) and have 50% of their pickup points belonging to clusters.


                        Fig. 5
                         illustrates the distribution of the pickup and delivery points for one instance in each set. These instances are available online at https://subversion.assembla.com/svn/pdps_instances.

In order to compare the arc-based formulation AB and the path-based formulations SP1 and SP2, we use a collection of 24 small-sized instances with 15 and 20 requests, 2 delivery nodes and a capacity of 4, 5 or 6. The size of model AB makes it prohibitively hard to solve when the size of instances grows. This is why we only solve instances with 15 and 20 requests.


                        Table 1
                         reports the optimality gap obtained when solving the linear relaxations. The optimal solutions are computed using the branch-and-cut-and-price framework described in this paper.

Note that the linear relaxations of model AB have been solved with IBM ILOG Cplex 12.2. In the last column of Table 1, the original formulation of model AB have been enhanced with the cuts automatically added by Cplex. If these cuts are disabled the average gap is 47.2%. These results show that the linear relaxation of path-based models clearly outperforms that of the arc-based model, even if Cplex cuts significantly improve the lower bound of model AB.

From now on, we only consider path-based models. We assess the performance of the proposed algorithms on three sets of generated instances with 25, 50 and 75 requests respectively.

Our first numerical experiment concern the use of valid inequalities introduced in Section 4.2. We seek a trade-off between the number of branch-and-bound nodes explorations saved thanks to the cuts and the computation time required to separate these cuts. We run experiments on a subset of 10 representative instances, considering the following 12 settings:
                           
                              
                                 
                                 
                                 
                                    
                                       
                                          NoCut:
                                       
                                       No valid inequalities.
                                    
                                    
                                       
                                          RC–root:
                                       
                                       Rounded capacity inequalities are generated at the root node.
                                    
                                    
                                       
                                          RC–all:
                                       
                                       Rounded capacity inequalities are generated at every node of the branching tree.
                                    
                                    
                                       
                                          2P–root:
                                       
                                       Two-path inequalities are generated only at the root node.
                                    
                                    
                                       
                                          2P–all:
                                       
                                       Two-path inequalities are generated at every node of the branching tree.
                                    
                                    
                                       
                                          SR–root:
                                       
                                       Subset-row inequalities are generated only at the root node.
                                    
                                    
                                       
                                          SR–all:
                                       
                                       Subset-row inequalities are generated at every node of the branching tree.
                                    
                                    
                                       
                                          All–root:
                                       
                                       All valid inequalities are generated only at the root node.
                                    
                                    
                                       
                                          All–RC:
                                       
                                       Cumulates All–root and RC–all.
                                    
                                    
                                       
                                          All–2P:
                                       
                                       Cumulates All-root and 2P–all.
                                    
                                    
                                       
                                          All–SR:
                                       
                                       Cumulates All–root and SR–all.
                                    
                                    
                                       
                                          All–all:
                                       
                                       All inequalities are generated at every node of the branching tree.
                                    
                                 
                              
                           
                        
                     


                        Tables 2–5
                        
                        
                        
                         report the time needed to find the optimal solution for each configuration. The computation is stopped after 1hour. Tables 2 and 3 report the results for model SP1, while Tables 4 and 5 report results for model SP2.

Concerning model SP1, we observe a factor of at least 3 between configuration NoCut and any configuration using all families of valid inequalities. The best two average running times are achieved by configurations All-Root (500seconds) and All-RC (483seconds) while all configurations that include the three types of valid inequalities are among the most efficient. The results also show that the time saved by valid inequalities is offset by the time needed to separate them. This explains why configuration All-Root performs better than configuration All-all. Results for model SP2 are similar, the best two average running times are achieved by configurations All-Root (608seconds) and All-RC (585seconds). Therefore, in the remainder of this article, we separate all valid inequalities at the root node of the branching tree, and apply RC inequalities on all other nodes.

The next experiments evaluate the impact of time windows on the practical difficulty of the instances. We selected a representative subset of instances for which we created a modified version without time windows. We compare the time necessary to solve models SP1 and SP2 with or without time windows. The results are summarized in Table 6
                        .

Except for a few exceptions it can be noted that instances with time windows are easier to solve. From now on, we consider only instances with time windows.

We now compare models SP1 and SP2 on all generated instances. Tables 7–9
                        
                        
                         report the running time of each model on instances with 25, 50 and 75 requests respectively. A time limit of 1hour was used in these experiments.

All instances with 25 requests could be solved to optimality by both models. Table 7 compares the optimal solutions with the lower bound at the root node. It also reports the run times and the number of nodes explored during each run.

All 50 requests instances in set (R) could be solved to optimality. However, only 8 out of 9 instances in set (RC) could be solved by both models within the time limit. Only 7 out of 9 instance in set (RC) could be solved by model SP1 and 6 of them by model SP2. Then, instead of known optimal solutions z
                        ∗, Table 8 reports the best solutions obtained, denoted by z
                        
                           best
                        . Whenever z
                        
                           best
                         is not optimal, lower bounds found by SP1 and SP2 are also reported.


                        Table 9 shows that half of the instances with 75 requests could be solved to optimality (14 with model SP1 and 13 with model SP2). We observe that Model SP2 always gives better lower bounds at the root node. As a result, fewer nodes are then explored during the branch-and-price algorithm. However, when the problem cannot be solved to optimality, the final lower bound provided by both models are very similar.

In order to evaluate the cost savings due to transfers, we apply three distinct scenarios:
                           
                              (PDPS)
                              We solve the pickup and delivery problem with shuttle routes using model SP1.

We solve one independent vehicle routing problem with open routes and time windows for each delivery location. In this scenario, the passengers going to distinct delivery locations are not mixed. This is still the most common situation encountered in practice. The algorithm described for the PDPS was adapted for solving the OVRPTW by setting variables 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             τ
                                             ,
                                             
                                                
                                                   τ
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                  at 0.

We solve a pickup and delivery problem with time windows where each vehicle can visit at most two delivery points and no transfer operation is allowed. We adapted the column generation algorithm by setting variables 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             τ
                                             ,
                                             
                                                
                                                   τ
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                    
                                  at 0, and considering a modified ESPPRC where two delivery points can be visited.

The three scenarios were run on the 81 generated instances. With a time limitation of 1hour, we could solve all scenarios to optimality only for instances with 25 requests. The corresponding results are reported in Table 10
                        .


                        Table 11
                         presents the results for all 81 instances. We aggregated the results by the main characteristics of the instances: number of requests, layout of nodes, capacity of the vehicles and number of delivery points. Since the OVRPTW and PDPTW have not been solved up to optimality for every instance, we actually compute a lower bound on savings, by comparing the upper bound of the PDPS to the lower bounds of the OVRPTW and PDPTW.

It seems that the only characteristic having an impact on savings is the number of delivery points in the instance. Thus, the higher the number of delivery points, the higher the savings. However, these savings can vary a great deal from one instance to another. The average values of 3.82% and 2.14% may seem almost negligible but they hide many different cases. The maximal values observed show that, in some cases, significant savings can easily be made thanks to the use of shuttle routes. Identifying the characteristics of instances with a high potential for the use of shuttles remains an interesting topic for further research.

In this section we consider real-life data, collected in the area of Nantes, France, concerning people with mental disabilities traveling to specialized schools or vocational rehabilitation centers. The five instances include between 81 and 193 requests and refer to inbound trips from home to the centers. Thus, the pickup nodes are the personal addresses of the passengers and the delivery and transfer points are the centers. All requests have distinct pickup points and correspond to individual demands. The number of centers considered is 2 or 5. The time window [e
                        
                           i
                        , l
                        
                           i
                        ] for all centers are identical. Values l
                        
                           i
                         correspond to the official beginning of the daily activity. Values e
                        
                           i
                         are calculated as l
                        
                           i
                         – 25minutes: the passengers are allowed to arrive up to 25minutes prior the official time of opening. The vehicles used are 9 seaters minibuses. Table 12
                         reports the results of both models.

For instances with 2 centers, the gap between the lower bound and the upper bound is always less than 1.5% and the results of model SP1 are better on average. The linear relaxation of the largest instance with 5 centers can be solved within one hour only by model SP1, with a gap of about 4%. For almost all instances, the algorithm is still adding valid inequalities to the root node at the end of the one-hour time limit. As this is much faster with model SP1 than with model SP2, this may explain why model SP1 provides better results. Upper bounds are computed by solving the master problem considering only columns used at least once in a solution of a linear relaxation computed while generating columns at the root node. The computation of this upper bound takes only a couple of seconds.

Finally, Table 13
                         presents the comparison between the results of the PDPS, the PDPTW and the OVRPTW. The savings that can be achieved by the OVRPTW compared to the PDPS solution can reach up to 22.68%. The savings that can be achieved from the PDPTW lower bounds compared to the PDPS solution are, of course, smaller as the PDPTW is an intermediate solution between the PDPS and the OVRPTW solutions. They range from limited (0.49%) to interesting (9.59%). Unfortunately, the instances with 81 and 109 requests have a large gap between the lower and upper bounds for the PDPTW solution. Therefore, the real benefits of transfers cannot be measured with much accuracy. The reported savings of 3.45% and 5.20% are likely to be underestimated. In any case, these tests show that the pooling of the transport between the centers, and particularly the use of transfer, can bring significant savings. However, these savings vary a great deal from one instance to another.

@&#CONCLUSION@&#

Consolidation of requests at transfer points is likely to improve the efficiency of complex door-to-door transportation systems. In this paper, we proposed a graph model for transfer points, an arc-based and two path-based models for the Pickup and Delivery Problem with Shuttle routes (PDPS). We described a branch-and-cut-and-price method to solve the PDPS. The branch-and-price algorithm raises two sub-problems: an elementary shortest path problem with resource constraints solved by a labeling algorithm and a simple sorting problem. The linear relaxation of original models is reinforced by considering three types of valid inequality, which considerably speeds up the calculation.

We show that the path-based models can lead to optimal solutions of a large variety of instances. Within one hour, all generated instances with 25 requests are solved to optimality as well as almost all instances with 50 requests and half of the instances with 75 requests. One real-world instances with 87 requests could also be solved to optimality. Even when the instances cannot be solved within a time limit of one hour, the optimality gap observed is generally less than 1%. Hence, this study is a step toward the efficient solving of the Pickup and Delivery Problems with Transfers (PDPT).

We also assessed the cost savings brought by transfers compared to two approaches: solving independent VRPTWs with open routes (OVRPTW) for each delivery location or solving one classical Pickup and Delivery Problem with Time Windows (PDPTW) without considering any transfer opportunity. We show large savings variations from one instance to another. It can reach 9% when compared with the PDPTW cost and 22% if compared with the OVRPTW cost.

An important criterion for measuring the quality of service to users is the ride time, i.e. the time spent by each passenger in the vehicles. Associating each request with a maximum ride time transforms the problem into a Dial-a-Ride-Problem (DARP). However, it also considerably complicates route scheduling. Considering a heterogeneous fleet is also an interesting avenue to make the problem more realistic. More generally, identifying the characteristics of instances that may greatly benefit from transfer points and locating these transfer points are challenging research issues.

@&#ACKNOWLEDGMENTS@&#

The authors thank the doctoral school ED STIM for funding the research stay of Renaud Masson at the DTU. They are grateful to the Conseil Général de Loire-Atlantique and the ADAPEI 44 for their authorization to use their data. The work of Stefan Ropke was sponsored by the Danish Agency for Science, Technology and Innovation (Project “Intelligent Freight Transport Systems”).

The following sets of arcs are empty, in order to break some symmetries and reinforce the linear relaxation of the problem:
                        
                           •
                           
                              δ
                              +(i)∩
                              δ
                              −(o′)=∅, ∀ i
                              ∈
                              P
                              ∪
                              T
                              +.


                              δ
                              +(o)∩
                              δ
                              −(i)=∅, ∀i
                              ∈
                              D
                              ∪
                              T
                              −.


                              δ
                              +(i)∩
                              δ
                              −(j)=∅, ∀i
                              ∈
                              D, j
                              ∈
                              T
                              −.


                              δ
                              +(d
                              
                                 i
                              )∩
                              δ
                              −(d
                              
                                 j
                              )=∅, ∀i
                              ∈
                              R, j
                              ∈
                              R∣j
                              <
                              i.


                              
                                 
                                    
                                       
                                          δ
                                       
                                       
                                          +
                                       
                                    
                                    (
                                    
                                       
                                          t
                                       
                                       
                                          r
                                          ,
                                          τ
                                       
                                       
                                          -
                                       
                                    
                                    )
                                    ∩
                                    
                                       
                                          δ
                                       
                                       
                                          -
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   t
                                                
                                                
                                                   
                                                      
                                                         r
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   ,
                                                   τ
                                                
                                                
                                                   -
                                                
                                             
                                          
                                       
                                    
                                    =
                                    ∅
                                    ,
                                    
                                    ∀
                                    τ
                                    ∈
                                    T
                                    ,
                                    
                                    r
                                    ∈
                                    R
                                    ,
                                    
                                    
                                       
                                          r
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    R
                                    |
                                    
                                       
                                          r
                                       
                                       
                                          ′
                                       
                                    
                                    <
                                    r
                                 
                              .


                              
                                 
                                    
                                       
                                          δ
                                       
                                       
                                          +
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   t
                                                
                                                
                                                   r
                                                   ,
                                                   τ
                                                
                                                
                                                   +
                                                
                                             
                                          
                                       
                                    
                                    ∩
                                    
                                       
                                          δ
                                       
                                       
                                          -
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   t
                                                
                                                
                                                   
                                                      
                                                         r
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   ,
                                                   τ
                                                
                                                
                                                   +
                                                
                                             
                                          
                                       
                                    
                                    =
                                    ∅
                                    ,
                                    
                                    ∀
                                    τ
                                    ∈
                                    T
                                    ,
                                    
                                    r
                                    ∈
                                    R
                                    ,
                                    
                                    
                                       
                                          r
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    R
                                    |
                                    
                                       
                                          r
                                       
                                       
                                          ′
                                       
                                    
                                    <
                                    r
                                 
                              .

No arc between a pickup node or an outbound transfer node and the ending depot should be used. All requests must be unloaded at a delivery point before the vehicle goes back to the depot. The service duration at the delivery point is only accounted for once when multiple requests are unloaded simultaneously. Some equivalent solutions exist. In order to avoid these equivalent solutions, we assume that (i) all transfer operations are performed before delivery operations and (ii) requests are forced to be unloaded in decreasing order of their index at these points. These constraints only help to prevent symmetrical solutions and limit the risk of encountering sub-tours in solutions of the linear relaxation of the problem.

@&#REFERENCES@&#

