@&#MAIN-TITLE@&#Effect of selective replication strategy and dynamic admission control to QoS management in video on demand systems

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Development of a dynamic replication strategy of segments for popular video.


                        
                        
                           
                           Proposing an approach that can provide admissions control for all VoD systems. It addresses the following challenges: resource allocation and several algorithms for scheduling policies.


                        
                        
                           
                           Application of a measurement algorithm.


                        
                        
                           
                           Application of a decision algorithm.


                        
                        
                           
                           To demonstrate the efficiency and feasibility of our approaches and validate the results obtained, we conducted a series of experiments.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Video on demand

Multimedia data

Admission control

Replication policy

Feedback control loop

Quality of service

@&#ABSTRACT@&#


               
               
                  Several solutions have been proposed till date to achieve effective replication policies and admission control methods that can ensure a high Quality of Service (QoS) to Video on Demand (VoD) systems. In this paper, we have chosen to study admission control and a replication strategy in a video on demand system called Feedback Control Architecture for Distributed Multimedia Systems (FCA-DMS). The proposed approaches are founded on (i) the supervision and auto-adaptation of the system load, (ii) continued knowledge of the network and of the video servers’ workload, and (iii) the development of a dynamic replication strategy of segments for popular video, that remade to replica-placement problem by discussing the problem of the replicas number to create (Replication Degree). The workload of video servers and of network are calculated by a QoS controller. The proposed approach takes into account of replica detail and offers a replica removal policy to avoid waste and for a good management of storage space. The goal is to maintain an updated broad view of the system’s behaviour from the collected measurements to databases of available videos and databases of available video servers. To demonstrate the efficiency and feasibility of our approaches and validate the results obtained, we conducted a series of experiments based on a simulator that we implemented.
               
            

@&#INTRODUCTION@&#

During the last years, Video on Demand (VoD) systems has more and more constituted a significant element in multimedia networks. These types of systems require a real-time processing of video data, i.e., they must be completed before a fastened deadline.These systems treat an important volume of multimedia data and attempt to maintain a high level Quality of Service (QoS) in the video streams presented to the online end-users. The VoD managers confront the defiance to provide efficient resource exploitation and to satisfying the QoS level planned by online clients while providing efficient resource utilization.

Different approaches have been suggested, such as scheduling control and congestion control  [1], admission control  [2], bandwidth fair sharing  [3], replication strategy based on the popularity of video  [4] and adaptive replication policy to provide videos highly available in Internet using hybrid CDN (Content Delivery Network)  [5].

In the present study, we concentrate on replication policy in order to load balancing and on admission control of clients’ requests in video on demand systems, especially in FCA-DMS (Feedback Control Architecture for Distributed Multimedia Systems) system  [6]. For most online end-users that requests the video data, the incapacity to respond to a demand is perceived as more tolerable than the surprising termination of received QoS level. Consequently, the online end-users that request a video are not necessarily admitted. Even if the load balancing and storage of videos can respond to a request, it is necessary to ensure that sufficient resources are available to provide an acceptable QoS level.

Recent studies on the streaming applications are interested to scalability and reliability problems on VoD servers. We consider that network bandwidth I/O is the main obstacle of performance. However, we focus on the solution of how to replicate and place videos distributed servers for high quality and service availability. Admission control of end-users demands in video on demand systems has been classified among the active research areas  [7,8]. Different solutions have been proposed to provide a high QoS level to end-users while maximizing resource utilization. Almost all of such solutions are hampered by the difficulty of knowing all necessary parameters for admitting users’ requests.

According to the category of clients and the availability of resources, we examine the problem of load balancing between all video servers and the problem of admission control given a particular treatment of end-users’ demands. We aim to provide an approach that is applicable in all VoD infrastructures. That is sufficient to be extensively valid in Distributed Multimedia Systems (DMS) and implemented in real-time.

In the next section, we describe the components of a VoD infrastructure called FCA-DMS architecture and examine the replication policies and admission control solutions proposed in the literature. In Section  3, we describe the proposed approach to admission control and to load balance of video servers in VoD systems. We devote Section  4 to our experimental study, such as we expose the different results of simulations that validate the proposed approaches. Concluding remarks and the discussion about future work are given in Section  5.

To guarantee a high level of QoS demanded by end-users, a method treated in Real Time Database Systems (RDBSs)  [9,10] is studied. This method is founded on guarantees the QoS on the client side using a feedback control loop.

FCA-DMS architecture is characterized by three components: a master server, video servers and clients. The master server receives the end-users demands, chooses the available video servers, monitors the system state and finally, if necessary, it demands to adjust the QoS level of video data for the satisfaction of end-users. The video servers that sent the video data to end-users operate according to the control of the master server. The end-users receive the video data from the video server selected by the master server and send requests to the master server. When a state change occurs, they periodically send a feedback report to the master server.

We describe, in the following, the typical functioning of FCA-DMS architecture (see Fig. 1
                        ) when a video data is requested by an online user. Fig. 1 provides an overview of FCA-DMS architecture. At first, requests arrives to the master server to get a video on the part of end-users interested by the video contents, but also with a certain QoS level. Second, the request is broadcasted by the master server to all video servers. Only the unsaturated video servers containing the requested video contents in their disks (available video servers) respond to the master server. The master server selects one video server to meet the user’s demand, depending on the QoS provided by each video server. After the selection of the video server, a stream of video data is opened between the concerned end-user and the selected video server. Finally, the end-user periodically sends a retroaction report to the master server in order to provide an idea about the quality of the received video data. When necessary, the user asks to adapt the QoS. In this case, the master server informs the video server to continue sending the video data, but with a modified QoS.

Depending on the load system conditions, such as the congestion of servers and network, the feedback loop is proposed in order to adapt the QoS and to converge it to the desired value. The proposed feedback control loop maintains some system stabilization throughout the under-use or the over-use periods  [11]. The method is based on control of system’s performance and the resources availability. Otherwise, it examines if the observed QoS is consistent with the QoS initially demanded. For instance, in video on demand systems  [12], the system checks if the streams of video data have arrived and presented to end-users without interruptions with the requested QoS. The feedback control loop helps to adapting the performance of system according to the QoS requested by end-user, by adjusting some video and network resources  [13].

Several studies in the literature have been proposed to address the problem of video data replication and the admission control problem  [14–17]. Recent works on the streaming applications are interested in scalability and reliability problems on distributed servers, they consider the output network bandwidth is the main obstruction in performance.

The problem of replication and video placement has been widely studied  [4,5,18]. Several replication strategy based on the popularity of a video has been proposed. In  [4] the author proposed a replication strategy according to regional popularity of video prefixes for an efficient use of the proxy server storage space to store more replicas in order to optimize the response time. To do that they proceed as follows, they divide the popular video in three parts; the first W1 min of each video called prefix-1 are replicated in the selected proxy servers. The next W2 min called prefix-2 are cached in the Tracker. The rest is referred as the suffix of the video and the full video is stored at the master server. In  [4,5], the author proposed an optimal replication model between servers by establishing a compromise between the encoding bitrate for the quality of service and the degree of replication for service availability and load balancing. Then the research is directed towards to use P2P networks in order to exploit customers bandwidth to reduce the load on servers, thus some replication strategies are implemented, for example in  [19] the author introduced a replication strategy based on the Markov chain between peers to maximize availability.  [5] introduced Hermes, an adaptive replication policy provides highly available Internet video using hybrid CDN. Hermes is based on estimation of videos popularity. For this, he designed a learning model using nonlinear support vector machine (SVM). In  [4] a ZipfR-SLFA algorithm has been introduced which use Zipf-like distribution to represent video popularity, they have replicated the complete video in all proxy servers thus need to have a large storage capacity to store more replication.

Concerning the admission control problem, in  [14] the traffic descriptors are used as solutions to admission control of client’s demands. The primarily idea is to theoretically fix the current system workload, by using traffic descriptors. Based on measured values, the admission control decides, whether or not to let the demand come into the system. Such an approach, must know the real traffic descriptors and the arriving requests. A second approach is proposed in  [15], by using survey reports in order to produce the traffic model that the current source is on the edge to transmit across. This approach is referred to as an active technique. The third approach aims to assess the current workload for each system component, relying mainly on measurements in order to achieve its objective. These solutions are dubbed MBAC (measurement-based admission control) and are categorized as passive techniques  [20,21]. Such approaches do not need to know the current traffic.

Segments replication is required to reduce load on a video server. The decision is made if the present and future reading load in segment duration on this server exceeds a predefined threshold. The future load is checked before starting the replication process in addition to the current load since the decision replication can already have been triggered by another stream, and thus the future load may be below the threshold.

We use the P-DSR policy detailed in  [16], in order to enhance load distribution. After replication decision, the P-DSR policy must then select segments; replication can begin when a stream start to read a new segment. Therefore, if the server load exceeds the threshold when crossing a segment boundary, so it is desirable to replicate this segment using a copy-back stream only if it has the highest payoff among all segments on the server. Note that P-DSR policy does not replicate a segment simply because a playback stream for this segment caused the server overload. This avoids the problem of replicating a segment lightly requested only because it triggered the threshold.

The estimated payoff 
                           
                              
                                 
                                    Pr
                                 
                              
                              
                                 i
                              
                           
                         of replicating a segment 
                           i
                         from a video is a measure of the future load that can be reduced from the current server. This is calculated as: 
                           
                              (1)
                              
                                 
                                    
                                       
                                          Pr
                                       
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    (
                                    
                                       
                                          
                                             1
                                          
                                       
                                       
                                          
                                             
                                                r
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                    
                                       −
                                    
                                    
                                       
                                          
                                             1
                                          
                                       
                                       
                                          
                                             
                                                r
                                             
                                             
                                                i
                                             
                                          
                                          +
                                          1
                                       
                                    
                                    )
                                 
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       0
                                    
                                    
                                       i
                                       −
                                       1
                                    
                                 
                                 
                                    
                                       n
                                    
                                    
                                       j
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       i
                                       −
                                       j
                                       −
                                       1
                                    
                                 
                              
                           
                         where 
                           w
                         is the weighting factor. The main reason for using this formula is that the load expected in future will be high so it is desirable to replicate a segment which can divert the load in the near future (time of a segment).

After choosing the segments which will be replicated, the P-DSR policy then attempt to find the right server (see Fig. 2
                        ). The server with the lowest future load is selected as target server. So, it is important to use the future reading load instead of the current load on the target server. In fact, the future reading load includes an estimate of the impact of replication decisions that have already been made. Therefore, using future load avoids conflictual issue that would have been created if a number of servers were about to cross threshold simultaneously. Otherwise, if the current load is used, all invocations of the P-DSR policy use the least loaded video server for replication and thus cause an overload of target video server.

There are three additional requirements that the target server must satisfy. First, there must be more disk space where a new replica can be placed. Then, both the future and the current reading load for segment duration are verified as they are below the corresponding load in source server. In addition, the current total load on the target server (read 
                           +
                         write) must be less than a predefined threshold called the write threshold wth. This is to ensure that the policy does not attempt to replicate to a target server that also suffers from overload. Current read and write loads can be found in the server table while the future load is estimated from the current load. Once a target server is found, the policy calculates the payoff for each segment and removes the inactive segment with the lowest payoff.

Video on demand systems manages an important video data volume, so that each online user waits for a response to its request. They require a similar admissions control for all clients requesting a new video and for all clients requesting a QoS modification  [22].

The solutions that have been proposed to cure the admission control problem  [23,24] do not effectively treat our problem in chose of VoD system such as in FCA-DMS.

The proposed approaches create a set of procedures that do not consistently work together in coherent manner.

The proposed approach can provide admissions control for the FCA-DMS architecture, generally for all VoD systems. It addresses the following challenges: resource allocation and several algorithms for scheduling policies.

The challenges introduced by our approach are illustrated as follows. Firstly, it must communicate with the server of databases in order to have an overview of the available system resources  [25] and their properties of QoS guarantee. Secondly, it must also incorporate a measurement algorithm in order to continuously monitor the communication between the different components of FCA-DMS in a way to obtain the different measurements, and a decision algorithm which determines whether to accept or not the user request, based on performance prediction and on measures received from the QoS controller (C-QoS) and to Library of Available Resources (LAR). Thirdly, it must provide a simple use in order to communicate these requirements in terms of QoS, response time and set of resources it requires for receiving an acceptable QoS. Finally, it must perform a periodic analysis (timing) that takes into consideration the different properties of users’ requests.


                        Fig. 3
                         provides an overview of our proposed architecture for admission control in FCA-DMS. A online user requests a video with an acceptable QoS, and if necessary, it requests a QoS modification. The user communicates with the admission controller using the RM-QoS (Request of QoS Modification) and CR-Video (Contents Request of Video). The CR-Video provides the video, the required QoS and the processing requirements. The RM-QoS captures the necessary constraints to satisfy the requested QoS such as the allocation of necessary resource. If the selected video server is saturated, then the policy aims the replication strategy illustrated in  [26], to meet the requested QoS.

All components in Fig. 3 communicate with each other. Once the decision to reject or accept a user request is made, the information will propagate to all system’s components. Such decentralized system provides a connection between all components of the FCA-DMS architecture. The measurement algorithm determines the system resources that may be allocated to the user. This continues until the entire video stream is received by the end-user, with the requested QoS.

The measurement algorithm takes into account the measurements from the Library of Available Resources (LAR), C-QoS (Controller of QoS), C-QoD (Controller of Quality of Demand) and Requests Manipulator (RM), which aims to attribute system resources to the end-user. The LAR describes the state of the system resources and their availability and, with the aid of the RM to describe their synchronizing properties.

The scheduler (Sch) is used to choose the next user request that must be examined. The RM deals with all user requests. The concurrency controller (CC) deals with the case when many requests compete for the same resource that is not widely available. Consequently, CC examines and selects the demand which has the highest priority. Before any processing of a new online user request, a requests controller (RC) must verify the availability of the requested content.

Based on information found in the database server, C-QoS, C-QoD and RM, the measurement algorithm attempt to allocate system resources to the user. We have based our method on the MBAC solution  [27]. However, our method includes knowledge bases that come in between the decision algorithm and the measurement algorithm.

The measurement algorithm endlessly supervises the movement of the connection between all components of FCA-DMS architecture in order to obtain the necessary measures. These measures must respond has such a deadline (short time), and must consider the ongoing traffic in order to continuously update these data.

The RM measures the actual number of client requests that are admitted by the CC, Sch and DM and sends them to AC-FCADMS. This value is denoted by 
                           
                              
                                 A
                              
                              
                                 1
                              
                           
                         (requests/ms). Together with another performance parameter, say 
                           
                              
                                 R
                              
                              
                                 1
                              
                           
                         representing the number of requests that are rejected by the CC and by the Sch and finally by the DM.

We see that the first filtering of client requests was made by the RM. The requests admitted by RM will be sent to AC-FCADMS. However, AC-FCADMS may set the number of admitted client requests based on measurements sent by the LAR, C-QoS and C-QoD. For each time window of 100 ms, the AC-FCADMS measures the value 
                           A
                         (requests/ms) representing the number of requests admitted by the RM and admitted by the AC-FCADMS. A second performance parameter is considered, say 
                           R
                         representing the total number of requests that are rejected by the RM plus the sum of total number of requests that are rejected by AC-FCADMS (
                           
                              
                                 R
                              
                              
                                 2
                              
                           
                        ). Both measured values 
                           A
                         and 
                           R
                         yield a pair of data measures referred to as pairs 
                           
                              (
                              A
                              ,
                              R
                              )
                           
                        .

In this section, we use the MBAC method  [27] for admission control in FCA-DMS architecture. The MBAC method is based on the characterization of the evolution of performance parameter as a function of actual throughput. Then, we propose that R is the final performance parameter and A is the total of admitted client requests. Consequently, the evolution is denoted by the function: 
                           
                              (2)
                              
                                 R
                                 =
                                 
                                    
                                       f
                                    
                                    
                                       R
                                    
                                 
                                 
                                    (
                                    A
                                    )
                                 
                                 .
                              
                           
                        
                     

In our architecture, the arrivals of client requests follow the Poisson process. The arrival of client requests is performed by a generator program of requests arrivals whose operation is as follows: 
                           
                              (3)
                              
                                 X
                                 
                                    (
                                    
                                       
                                          N
                                       
                                       
                                          t
                                       
                                    
                                    =
                                    k
                                    )
                                 
                                 =
                                 
                                    
                                       e
                                    
                                    
                                       λ
                                    
                                 
                                 .
                                 
                                    
                                       
                                          
                                             λ
                                          
                                          
                                             k
                                          
                                       
                                    
                                    
                                       k
                                       !
                                    
                                 
                                 .
                              
                           
                        
                     


                        
                           
                              –
                              X is the random variable which allows the determination of the number of times that the event occurs in period 
                                    t
                                 .


                                 
                                    k
                                  represents integer values.


                                 
                                    λ
                                  is the average of client requests arrival (
                                    λ
                                    ∈
                                    
                                       
                                          R
                                       
                                       
                                          +
                                       
                                    
                                 ).

We note that the arrival rate of client requests (
                           λ
                        ) is transformed by the requests manipulator at an arrival rate 
                           
                              
                                 λ
                              
                              
                                 ′
                              
                           
                           ≤
                           λ
                        . Consequently, the probability to receive 
                           
                              
                                 N
                              
                              
                                 ′
                              
                           
                         arrivals of client requests in the AC-FCADMS during a time interval 
                           t
                         is transformed to: 
                           
                              (4)
                              
                                 X
                                 
                                    (
                                    
                                       
                                          N
                                       
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                    =
                                    k
                                    )
                                 
                                 =
                                 
                                    
                                       e
                                    
                                    
                                       
                                          
                                             λ
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 ⋅
                                 
                                    
                                       
                                          
                                             
                                                (
                                                
                                                   
                                                      λ
                                                   
                                                   
                                                      ′
                                                   
                                                
                                                )
                                             
                                          
                                          
                                             k
                                          
                                       
                                    
                                    
                                       k
                                       !
                                    
                                 
                                 .
                              
                           
                         The arrival rate is transformed, on the other hand, by the AC-FCADMS at an arrival rate 
                           λ
                           ≤
                           
                              
                                 λ
                              
                              
                                 ′
                              
                           
                           ≤
                           
                              
                                 λ
                              
                              
                                 ″
                              
                           
                        . Finally, the probability to receive 
                           
                              
                                 N
                              
                              
                                 ″
                              
                           
                         admitted client requests during a time interval 
                           t
                         is now: 
                           
                              (5)
                              
                                 X
                                 
                                    (
                                    
                                       
                                          N
                                       
                                       
                                          t
                                       
                                       
                                          ″
                                       
                                    
                                    =
                                    k
                                    )
                                 
                                 =
                                 
                                    
                                       e
                                    
                                    
                                       
                                          
                                             λ
                                          
                                          
                                             ″
                                          
                                       
                                    
                                 
                                 ⋅
                                 
                                    
                                       
                                          
                                             
                                                (
                                                
                                                   
                                                      λ
                                                   
                                                   
                                                      ″
                                                   
                                                
                                                )
                                             
                                          
                                          
                                             k
                                          
                                       
                                    
                                    
                                       k
                                       !
                                    
                                 
                                 .
                              
                           
                        
                     

The decision algorithm decides on the client request acceptance taking into account a prediction of system performance. Based on the function 
                           
                              
                                 f
                              
                              
                                 R
                              
                           
                        , the decision algorithm seeks to evaluate the expected performance of the system performance that must be increased by the new client request.

If a new client request is accepted, and this request is characterized by a QoS rate 
                           r
                        , then the new value of 
                           R
                         will be 
                           
                              
                                 R
                              
                              
                                 ˆ
                              
                           
                        . Then we have: 
                           
                              (6)
                              
                                 
                                    
                                       R
                                    
                                    
                                       ˆ
                                    
                                 
                                 =
                                 
                                    
                                       f
                                    
                                    
                                       R
                                    
                                 
                                 
                                    (
                                    
                                       
                                          A
                                       
                                       
                                          ˆ
                                       
                                    
                                    +
                                    r
                                    )
                                 
                              
                           
                         where 
                           
                              
                                 f
                              
                              
                                 R
                              
                           
                         defines the evolution of 
                           R
                         against the value 
                           A
                        . 
                           
                              
                                 A
                              
                              
                                 ˆ
                              
                           
                         reflects the adjusted performance of the ongoing workload.

We could see afterwards how our decision algorithm is formulated: A new client request is accepted if: 
                           
                              (7)
                              
                                 
                                    
                                       R
                                    
                                    
                                       ˆ
                                    
                                 
                                 +
                                 
                                    
                                       n
                                    
                                    
                                       1
                                    
                                 
                                 
                                    
                                       V
                                    
                                    
                                       a
                                       1
                                    
                                 
                                 +
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       V
                                    
                                    
                                       a
                                       2
                                    
                                 
                                 ≤
                                 
                                    
                                       R
                                    
                                    
                                       p
                                    
                                 
                                 .
                              
                           
                        
                     


                        
                           
                              
                                 R
                              
                              
                                 p
                              
                           
                         is the minimum performance required to meet the QoS requested by the client (in terms of rate of received frames, gigue, delay), 
                           
                              
                                 V
                              
                              
                                 a
                                 1
                              
                           
                         is the tolerable variation of 
                           
                              
                                 R
                              
                              
                                 1
                              
                           
                        , 
                           
                              
                                 V
                              
                              
                                 a
                                 2
                              
                           
                         is the tolerable variation of 
                           
                              
                                 R
                              
                              
                                 2
                              
                           
                        , 
                           
                              
                                 n
                              
                              
                                 1
                              
                           
                         is an adjustment parameter at requests manipulator and 
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                         is an adjustment parameter at AC-FCADMS.

The system performance 
                           
                              
                                 A
                              
                              
                                 ˆ
                              
                           
                         is calculated by the ratio between the minimum capacity required by client request in the system and the available capacity in the system for each 100 ms. The system performance is given by the following formula: 
                           
                              (8)
                              
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             t
                                             =
                                             0
                                          
                                          
                                             N
                                             b
                                             −
                                             R
                                             M
                                             Q
                                             o
                                             S
                                          
                                       
                                       
                                          ModifCap
                                       
                                       +
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             0
                                          
                                          
                                             N
                                             b
                                             −
                                             R
                                             V
                                             C
                                          
                                       
                                       
                                          VideoCap
                                       
                                    
                                    
                                       
                                          QPT
                                       
                                    
                                 
                              
                           
                         where: 
                           
                              –
                              
                                 Nb-RMQoS represents the requests number of QoS modification,


                                 Nb-RVC indicates the requests number of new videos,


                                 ModifCap denotes the consumption of a QoS modification request,


                                 VideoCap denotes the consumption of a new video request,


                                 QPT indicates the system ability.

The requests manipulator and AC-FCADMS uses the data coming from the library of available resources to regularly calculate the system load. When the load reaches the 80% threshold, the manipulator requires a first filtering of arriving requests at the system, then AC-FCADMS blocks the access of client requests up to recovery of tolerated threshold.

Definitely 
                           
                              
                                 A
                              
                              
                                 ˆ
                              
                           
                         requires to be constantly updated. When several new clients’ requests arrive, or whenever a new client request is admitted, the 
                           
                              
                                 A
                              
                              
                                 ˆ
                              
                           
                         value is forthwith updated.

The objective of this section is to expose the simulations results associated with our study. In this section, we call our QoS management approaches SACM-FCADMS. We have implemented our architecture with a simulator, such that we characterize the functioning mechanisms that occur between the different links in proposed approaches to manage the QoS in VoD systems. Finally, we compare the simulations results, in terms of QoS guarantee, when we apply the KBAC method  [27], when we apply the admission control approach, and when we apply the replication policy. In our simulations, we treat the MPEG-2 type of video compression. We chose Java as a programming language because it enjoys broad support on many platforms, and it is actually used in most of VoD architectures.

In many cases, knowledge of clients’ requests can be derived through use and/or the transmission of a token bucket. Nevertheless, this method (token bucket) is not easy to parameterize and may produce imprecise results for admission control (since the decision algorithm uses an imprecise value for 
                        r
                     ). In this study, we choose a rather simple approach that does not need any signalling as it is only based on clients requests. In the following, we describe the approach used by the system to estimate the arrival rates of new clients requiring admission.

We have assumed in the previous section that arrivals of client’s requests follow a Poisson process. The system’s load varies depending on the video streams sent to end clients and also varies according to requests arriving at the master server (variation of 
                        λ
                      value). In order to ensure effective assessment of new arrivals requests in the system, we repeat the experiment 100 times for each value and obtain a sample of 100 values of system performance. Otherwise, get results which reflect the QoS levels with different workloads of system.

In order to demonstrate the performance of our approaches, we see the simulation results in all load conditions of VoD system. The great advantage of proposed admission control method is to effectively filter user’s demands.

When 
                           λ
                           =
                           0.1
                        , the number of requests arriving during the simulation is 140. This number passes on about 1500 requests in case of 
                           λ
                           =
                           2
                        . The system’s workload is bound to the rate of client requests that arrive to the requests manipulator. The admission control has a crucial role in the FCA-DMS architecture as it is the case generally in all architectures of video on demand systems. Therefore, it is necessary to generate and modify well-defined constraints (cf. Table 1
                        ).

Measured parameters are: 
                           
                              –
                              
                                 Waiting-frames rate that shows the ratio among the number of not rejected frames (and not received) and the number of all sent frames;


                                 Received-frames rate answer to the report among the number of received frames and the number of sent frames throughout the simulation;


                                 Served-frames rate shows the ratio among the number of received frames with the requested QoS and all sent frames;


                                 Useful-frames rate shows the report among the number of received frames added to not rejected frames and the number of all sent frames;

The principal goal of our replication policy and SACM-FCADMS approach is to adjust and stabilize the QoS to the veritable conditions of a VoD application. Specially, the system must adapt the QoS in case of dynamic arrival of users’ requests, i.e. if the number of clients’ requests changes over time. We show the effectiveness of our method on different rates of frames. For this reason, we have chosen to compare our simulation results using our SACM-MCADAMS method, with replication policy, then without using an admission control method, and finally with the MBAC method.

We note in Figs. 4 and 7
                         that for all variations of 
                           λ
                           >
                           0
                         (all workload conditions), we have the best performances on the waiting-frames rate and on useful frames rate. The best simulation results are obtained when using the SACM-FCADMS approach (Fig. 4). The rate of received frames is the most significant, i.e. 86.7%. We must consider that when the application of our admission control method integrated in master server causes some rejects of client requests, these rejected requests will no longer be treated in the current system and will not be involved in our simulations.

In case of progression of the system workload (increasing of client requests), we determine that there is no great effect on the useful frames, on the waiting frames, and on the received frames. The fact that our approach is founded on supervision and auto-adaptation principles clearly explains this performance result. The supervision principle consists of results control obtained when client requests arrive in the system and verifying if the QoS initially requested is coherent with the QoS currently perceived.

We observe a progressive lowering of the rate of received frames and useful frames when using the MBAC method (see Figs. 4–7
                        
                        ), in all workload conditions (heavy workload, light workload).

Our approaches produce satisfactory performances since it practically always responds to the demanded QoS. We can notice that it presents performance results near to ideal results of ideal admission control. More accurately, the proposed method fulfils the rate of received frames more than 83% in all load conditions and also reduces the delays of video streams.

In all figures, we describe the case of fewer workload (i.e., 
                           λ
                           =
                           0.1
                        ), generally more than 140 clients requests, arriving to the case of the best workload (i.e., 
                           λ
                           =
                           2
                        ), than 1500 clients requests. The results of the MBAC method and our SACM-FCADMS method broadly differ depending on the definite adjustment parameter. Particularly, in case of heavy system workload, our solution greatly affects the rate of received frames and served frames (see Fig. 6). Thereafter, we treat, at different workloads, the SACM-FCADMS functioning on three gaps of 
                           λ
                        , 
                           λ
                           ∈
                           
                              [
                              1.5
                              ,
                              2
                              ]
                           
                         (high workload), 
                           λ
                           ∈
                           
                              [
                              0.8
                              ,
                              1.4
                              ]
                           
                         (average workload) and 
                           λ
                           ∈
                           
                              [
                              0.1
                              ,
                              0.7
                              ]
                           
                         (light workload).

As a result, our solutions are powerful to remedy to the problems of system congestion, particularly congestion of master server and video servers, in all overload status. We can see the overall performance of different methods to admission control, in Table 2
                         that concerns numerical simulation results. From these observations, we notice that the SACM-FCADMS solution provides satisfactory results. Notably, it leads to a number of received frames in the case of 
                           λ
                           =
                           2
                         (i.e., high workload) near 96%. On the other hand, it shows that our solution of admission control constantly provides good results (
                           λ
                           ∈
                           
                              [
                              0.1
                              ,
                              2
                              ]
                           
                        ).

@&#CONCLUSION@&#

The last evolutions in distributed multimedia systems and the selection of admission control solutions have addressed the problem of the QoS guarantee and the optimal use of system resources. They have met the challenge of input of an important number of client requests in the system even though existing approaches do not manage the current traffic of system. The MBAC method and the SACM-FCADMS method proposed in this paper have been tested on a wide variety of workloads. The proposed approach is based on double admission control to manage QoS in distributed multimedia systems, especially in FCA-DMS architecture.

We have shown the significance of our admission control approach in FCA-DMS architecture and in distributed multimedia systems. This proposed approach gives a priority to certain client requests in the system, in order to increase its reliability and robustness and to converge towards the QoS specified by the client. We have also proposed a way to integrate our method in FCA-DMS model. We have also integrated in this architecture our approach in order to render to real-time video streams a deterministic temporal guarantee according to the temporal constraints. However, we have presented the results showing the ratio differences with and without integration of our method. Our future work consists in proposing an optimal strategy of videos installation in video servers as well as bringing some fault tolerance at the master server level. Notably, the aspect of video installation is not tackled in our FCA-DMS architecture, even in most studies in distributed multimedia systems. Such as, we have remarked the importance of propose an optimal strategy of videos installation for some components of FCA-DMS architecture (video server, master server and network). The fault tolerance is also important, because we have one master server in the system. In case of master server fault, and with the importance of master server in distributed multimedia systems, it is necessary to propose solutions for remedy at this problem and for answer to constraints of client’s requests.

@&#ACKNOWLEDGMENT@&#

The authors would like to thank and acknowledge the scientific research deanship at Qassim University for their financial support during the academic year 2015/2016 under research Grant reference number SR-2970.

@&#REFERENCES@&#

