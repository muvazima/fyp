@&#MAIN-TITLE@&#A novel k-word relative measure for sequence comparison

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           The new normalized k-word average relative distance is proposed in this paper.


                        
                        
                           
                           A new method is suggested to reduce the matrix dimension, can greatly lessen the amount of calculation and operation time.


                        
                        
                           
                           The phylogenetic trees is plotted based on the new normalized k-word average relative distance.


                        
                        
                           
                           The AUC is calculated to test the effectiveness of this new distance.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

DNA sequences

Discriminate analysis

Phylogenetic analysis

Phylogenetic trees

@&#ABSTRACT@&#


               
               
                  In order to extract phylogenetic information from DNA sequences, the new normalized k-word average relative distance is proposed in this paper. The proposed measure was tested by discriminate analysis and phylogenetic analysis. The phylogenetic trees based on the Manhattan distance measure are reconstructed with k ranging from 1 to 12. At the same time, a new method is suggested to reduce the matrix dimension, can greatly lessen the amount of calculation and operation time. The experimental assessment demonstrated that our measure was efficient. What's more, comparing with other methods’ results shows that our method is feasible and powerful for phylogenetic analysis.
               
            

@&#INTRODUCTION@&#

The comparison of sequences is to find similarity, and to get biological features previously unknown. The pioneering approaches for sequence comparison were based on sequence alignment either global or local, pairwise or multiple sequence alignment. Waterman (1995) and Durbin et al. (1998) provided comprehensive reviews about this method. These approaches generally give excellent results when the sequences under study are closely related and can be reliably aligned, but when the sequences are divergent, a reliable alignment cannot be obtained. Hence, applications of sequence alignment are limited. Another limitation of these approaches is computational complexity and time-consuming, thus, they are limited when dealing with large-scale sequence data (Pham and Zuegg, 2004). To overcome these limitations, it is necessary to propose reliable and effective alignment-free sequence comparison methods.

Although many efficient alignment-free methods have been developed, they are still in early development compared with alignment-based measure. These alignment-free methods can be categorized into several classes: (i) Methods based on substrings employ the similarity and difference of substrings in a pair of sequences (Domazet-Louso and Haubold, 2011; He, 2006; Ukkonen, 1985; Ulitsky et al., 2006). (ii) Information Theory has provided successful methods for alignment-free sequence analysis and comparison. Existing applications of Information Theory include global and local characterization of DNA, RNA and proteins, estimating genome entropy to motif and region classification. It holds promise in gene mapping, next-generation sequencing analysis and metagenomics (Vinga, 2013). Methods based on Information Theory include: Base–base correlation (Cheng et al., 2013; Liu and Sun, 2008; Liu et al., 2008) and Lempel–Ziv compress (Li et al., 2001; Otu and Sayood, 2003). (iii) Graphical approaches can provide intuitive insights and the overall structure property, and therefore they are extremely useful in dealing with various biological problems, especially for very complicated biological systems, as indicated by various studies on a series of important biological topics, such as enzyme-catalyzed reactions (Andraos, 2008; Chou, 1980, 1989), protein folding kinetics and folding rates (Chou, 1990), drug metabolism systems (Chou, 2010), protein–protein interactions (Chou et al., 2011, 2011; Zhou, 2011), analysis of DNA sequence (Huang and Wang, 2012; Liao et al., 2006; Pandit and Sinha, 2010; Qi et al., 2004; Zhang et al., 2003), and graphic representation of protein sequence (Wu et al., 2010). (iv) The popular methods based on k-word frequencies include feature frequency profile (Sims et al., 2009; Sims and Kim, 2011), the D
                     2 score (Kantorovitz et al., 2007), frequency chaos game representation (Hatje and Kollmar, 2012), return time distribution (Kolekar et al., 2012) and composition vector (Gao and Qi, 2007; Hao et al., 2003; Qi et al., 2004; Lu et al., 2008; Wang et al., 2009; Wu et al., 2006). (v) Composition vectors based on k-word position is a new method. Many researchers have begun to extract the position information of a k-word (Afreixo et al., 2009; Ding et al., 2013; Gao and Luo, 2012; Huang and Wang, 2011; Yang and Wang, 2013). According to this classification, our method belongs to the composition vector based on k-word position. Based on Bonham-Carter et al. (2013), the basic steps of creating composition vectors based on k-word position are the following: (i) find the positions of the motifs in a sequence, (ii) create a vector by organizing the positions in some order, (iii) compute the distance between every two composition vectors to form a distance matrix, and optionally (iv) construct the phylogenic tree based on the differences.

In this paper, a new alignment-free method is presented based on the normalized k-word average relative distance to capture evolutionary information for sequence comparison. In our method, the effects of k-word counts, every k-word position distribution and the length of the sequence are combined together to capture more k-word distribution information. In Section 3, alignment-free method 
                        E
                        (
                        w
                        
                           
                           1
                        
                        
                           w
                           2
                        
                        …
                        
                           w
                           k
                        
                        )
                      (Ding et al., 2013) was compared with our method using discriminate analysis. The result demonstrated that each of our measure, with word length k range from 1 to 5, performs better than 
                        E
                        (
                        w
                        
                           
                           1
                        
                        
                           w
                           2
                        
                        …
                        
                           w
                           k
                        
                        )
                     . Our method was further used to construct phylogenetic trees on two separate sets. Both the results were in good agreement with the authoritative phylogenies, which indicate that our measure is efficient for phylogenetic analysis. In sum, all these results demonstrated that our measure provides more information and greatly improves the efficiency of sequence comparison.

Supposing that 
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                         is a k-word, where 
                           w
                           
                              
                              i
                           
                           ∈
                           
                              
                                 
                                    A
                                    ,
                                    T
                                    ,
                                    C
                                    ,
                                    G
                                 
                              
                           
                        . Let 
                           P
                           
                              
                              
                                 w
                                 
                                    
                                    1
                                 
                                 
                                    w
                                    2
                                 
                                 …
                                 
                                    w
                                    k
                                 
                              
                           
                         represents the position vector of 
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                         in a DNA sequence. If the 
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                         occurs in a given DNA sequence, then 
                           P
                           
                              
                              
                                 w
                                 
                                    
                                    1
                                 
                                 
                                    w
                                    2
                                 
                                 …
                                 
                                    w
                                    k
                                 
                              
                           
                         is composed by positions of 
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                         in the given sequence and 
                           P
                           
                              
                              
                                 w
                                 
                                    
                                    1
                                 
                                 
                                    w
                                    2
                                 
                                 …
                                 
                                    w
                                    k
                                 
                              
                           
                           (
                           i
                           )
                         denotes its ith element. If 
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                         does not exist in the given sequence, 
                           P
                           
                              
                              
                                 w
                                 
                                    
                                    1
                                 
                                 
                                    w
                                    2
                                 
                                 …
                                 
                                    w
                                    k
                                 
                              
                           
                           =
                           0
                        . For example, the 2-word position sequence for a short DNA sequence of length 20 attcggcgtaatcgaccaaa, so we can get P
                        
                           aa
                        
                        =(10, 18, 19), P
                        
                           ct
                        
                        =(0), …

These k-word position sequences can effectively capture distribution information of each k-word in the given sequence. For a fixed k, we can reverse this sequence by some of k-word position sequences. Furthermore, if a k-word exists in the given sequence, the counts of this k-word in the DNA sequence are equal to the length of its corresponding position sequence. We can use the following 2-word position sequences to reconstruct the DNA sequence used in the previous example:


                        P
                        
                           aa
                        
                        =(10, 18, 19), P
                        
                           ac
                        
                        =(15), P
                        
                           ag
                        
                        =(0), P
                        
                           at
                        
                        =(1, 11), P
                        
                           ca
                        
                        =(17), P
                        
                           cc
                        
                        =(16), P
                        
                           cg
                        
                        =(4, 7, 13), P
                        
                           ct
                        
                        =(0), P
                        
                           ga
                        
                        =(14), P
                        
                           gc
                        
                        =(6), P
                        
                           gg
                        
                        =(5), P
                        
                           gt
                        
                        =(8), P
                        
                           ta
                        
                        =(9), P
                        
                           tc
                        
                        =(3, 12), P
                        
                           tg
                        
                        =(0), P
                        
                           tt
                        
                        =(2).

Clearly, we do not find ag, ct and tg in the previous example. Now, we start to reverse the given DNA sequence as follows:


                        
                           
                              
                                 
                                    
                                       
                                          
                                             P
                                             at
                                          
                                          =
                                          (
                                          1
                                          ,
                                          11
                                          )
                                       
                                       
                                          at
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                          at
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                       
                                    
                                    
                                       
                                          
                                             P
                                             tc
                                          
                                          =
                                          (
                                          3
                                          ,
                                          12
                                          )
                                       
                                       
                                          attc
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                          atc
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                       
                                    
                                    
                                       
                                          
                                             P
                                             gg
                                          
                                          =
                                          (
                                          5
                                          )
                                       
                                       
                                          attcgg
                                          *
                                          *
                                          *
                                          *
                                          atc
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                       
                                    
                                    
                                       
                                          
                                             P
                                             cg
                                          
                                          =
                                          (
                                          4
                                          ,
                                          7
                                          ,
                                          13
                                          )
                                       
                                       
                                          attcggcg
                                          *
                                          *
                                          atcg
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                       
                                    
                                    
                                       
                                          
                                             P
                                             ta
                                          
                                          =
                                          (
                                          9
                                          )
                                       
                                       
                                          attcggcgtaatcg
                                          *
                                          *
                                          *
                                          *
                                          *
                                          *
                                       
                                    
                                    
                                       
                                          
                                             P
                                             ac
                                          
                                          =
                                          (
                                          15
                                          )
                                       
                                       
                                          attcggcgtaatcgac
                                          *
                                          *
                                          *
                                          *
                                       
                                    
                                    
                                       
                                          
                                             P
                                             ca
                                          
                                          =
                                          (
                                          17
                                          )
                                       
                                       
                                          attcggcgtaatcgacca
                                          *
                                          *
                                       
                                    
                                    
                                       
                                          
                                             P
                                             aa
                                          
                                          =
                                          (
                                          10
                                          ,
                                          18
                                          ,
                                          19
                                          )
                                       
                                       
                                          attcggcgtaatcgaccaaa
                                       
                                    
                                    
                                       
                                       
                                    
                                 
                              
                           
                        In order to calculate the similarity distances between different sequences, we should assign a signature to each k-word based on the k-word position sequence. In this paper, we try to extract more evolutionary information contained in position sequences. We use the following formula to extract evolutionary information from the DNA sequence. Suppose 
                           P
                           
                              
                              
                                 w
                                 
                                    
                                    1
                                 
                                 
                                    w
                                    2
                                 
                                 …
                                 
                                    w
                                    k
                                 
                              
                           
                           =
                           (
                           p
                           
                              
                              1
                           
                           ,
                           
                              p
                              2
                           
                           ,
                           …
                           ,
                           
                              p
                              n
                           
                           )
                        , where n is the counts of 
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                         in the given DNA sequence. The new normalized k-word average relative distance of 
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                         is denoted by 
                           D
                           (
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                           )
                         and it is defined as follows:


                        
                           
                              
                                 D
                                 (
                                 w
                                 
                                    
                                    1
                                 
                                 
                                    w
                                    2
                                 
                                 …
                                 
                                    w
                                    k
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                            
                                                               i
                                                               =
                                                               1
                                                            
                                                            n
                                                         
                                                         (
                                                         P
                                                         
                                                            
                                                            
                                                               w
                                                               
                                                                  
                                                                  1
                                                               
                                                               
                                                                  w
                                                                  2
                                                               
                                                               …
                                                               
                                                                  w
                                                                  k
                                                               
                                                            
                                                         
                                                         (
                                                         i
                                                         )
                                                         −
                                                         P
                                                         
                                                            
                                                            
                                                               w
                                                               
                                                                  
                                                                  1
                                                               
                                                               
                                                                  w
                                                                  2
                                                               
                                                               …
                                                               
                                                                  w
                                                                  k
                                                               
                                                            
                                                         
                                                         (
                                                         1
                                                         )
                                                         )
                                                      
                                                      
                                                         n
                                                         (
                                                         l
                                                         −
                                                         k
                                                         +
                                                         1
                                                         )
                                                      
                                                   
                                                   ,
                                                
                                                
                                                
                                                   
                                                      n
                                                      ≠
                                                      0
                                                   
                                                
                                             
                                             
                                                
                                                   0
                                                   ,
                                                
                                                
                                                
                                                   
                                                      n
                                                      =
                                                      0
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        where l is the length of the given sequence.

Comparison of our method with another method 
                           E
                           (
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                           )
                         (Ding et al., 2013) shows that our method not only depends on the counts of 
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                        , but also the length of a DNA sequence and all the occurring positions of 
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                        . The method presented here combines the distribution information and the counts of the k-word together. It will capture more phylogenetic information from DNA sequences. For example, for two sequences s
                        =
                        ggtcaacggg, t
                        =
                        gggtcaacgg, the counts of gg in s and t are both 3. If we only consider the frequency of gg, F
                        
                           s
                        (gg)=
                        F
                        
                           t
                        (gg), or if we use the method 
                           E
                           (
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                           )
                        , E
                        
                           s
                        (gg)=
                        E
                        
                           t
                        (gg), so phylogenetic information of gg captured by F(gg) and E(gg) is not enough. But when we use our method 
                           D
                           (
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                           )
                        , D
                        
                           s
                        (gg)=0.5, D
                        
                           t
                        (gg)=0.3. Hence, more phylogenetic information of gg can be captured by D(gg).

For a fixed k, there are total 4
                           k
                         distinct k-words to be considered. Putting these k-words in a fixed order, we can get a 4
                           k
                        -dimension feature representation vector denoted by 
                           (
                           
                              x
                              1
                           
                           ,
                           
                              x
                              2
                           
                           ,
                           …
                           ,
                           x
                           
                              
                              
                                 
                                    4
                                    k
                                 
                              
                           
                           )
                        . Then, according to the feature representation vector, we can get the vector 
                           (
                           D
                           
                              
                              1
                           
                           ,
                           
                              D
                              2
                           
                           ,
                           …
                           ,
                           
                              D
                              
                                 
                                    4
                                    k
                                 
                              
                           
                           )
                        . For given L DNA sequences, we can get a L
                        ×4
                           k
                         matrix:


                        
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                D
                                                
                                                   
                                                   11
                                                
                                             
                                             
                                                D
                                                
                                                   
                                                   12
                                                
                                             
                                             
                                                …
                                             
                                             
                                                D
                                                
                                                   
                                                   
                                                      
                                                         14
                                                         k
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                D
                                                
                                                   
                                                   21
                                                
                                             
                                             
                                                D
                                                
                                                   
                                                   22
                                                
                                             
                                             
                                                …
                                             
                                             
                                                D
                                                
                                                   
                                                   
                                                      
                                                         24
                                                         k
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                ⋮
                                             
                                             
                                                ⋮
                                             
                                             
                                                ⋱
                                             
                                             
                                                ⋮
                                             
                                          
                                          
                                             
                                                D
                                                
                                                   
                                                   
                                                      L
                                                      1
                                                   
                                                
                                             
                                             
                                                D
                                                
                                                   
                                                   
                                                      L
                                                      2
                                                   
                                                
                                             
                                             
                                                …
                                             
                                             
                                                D
                                                
                                                   
                                                   
                                                      L
                                                      
                                                         4
                                                         k
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

With the increase of k, the dimensions of the vectors become very large, so as the matrix. We need much time to calculate their distance in the general computer. In fact, when k become larger than a certain number, a lot of k-words will not appear in the given sequences, and the final matrix is a sparse matrix.

For the sake of reducing the amount of calculation and operation time, we should reduce the dimension of the matrix, so a new method is proposed. On the basis of the feature representation vector, we can get L vectors of the k-words count 
                           (
                           c
                           
                              
                              1
                           
                           ,
                           
                              c
                              2
                           
                           ,
                           …
                           ,
                           
                              c
                              
                                 
                                    4
                                    k
                                 
                              
                           
                           )
                        , where c
                        
                           i
                         denotes the count of its ith k-word element 
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                        . Then, we remove all the k-words that do not appear in each vector (c
                        =0), which means that if a k-word is removed, the count of this k-word must be 0 in all vectors. So we can get L new vectors with the same number of components. The dimension of the new vectors N is less than or equal to 4
                           k
                        . When k is small, N is equal to 4
                           k
                        , when k becomes large, N is far less than 4
                           k
                        . According to these new vectors, we can get L N-dimension vectors denoted by (D
                        1, D
                        2, …, D
                        
                           N
                        ), where D
                        
                           i
                         denotes the new normalized average relative distance of the ith k-word. Then we can get the L
                        ×
                        N matrix:


                        
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                D
                                                
                                                   
                                                   11
                                                
                                             
                                             
                                                D
                                                
                                                   
                                                   12
                                                
                                             
                                             
                                                …
                                             
                                             
                                                D
                                                
                                                   
                                                   
                                                      1
                                                      N
                                                   
                                                
                                             
                                          
                                          
                                             
                                                D
                                                
                                                   
                                                   21
                                                
                                             
                                             
                                                D
                                                
                                                   
                                                   22
                                                
                                             
                                             
                                                …
                                             
                                             
                                                D
                                                
                                                   
                                                   
                                                      2
                                                      N
                                                   
                                                
                                             
                                          
                                          
                                             
                                                ⋮
                                             
                                             
                                                ⋮
                                             
                                             
                                                ⋱
                                             
                                             
                                                ⋮
                                             
                                          
                                          
                                             
                                                D
                                                
                                                   
                                                   
                                                      L
                                                      1
                                                   
                                                
                                             
                                             
                                                D
                                                
                                                   
                                                   
                                                      L
                                                      2
                                                   
                                                
                                             
                                             
                                                …
                                             
                                             
                                                D
                                                
                                                   
                                                   LN
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where D
                        
                           ij
                         denotes the new normalized average relative distance of the ith sequence and jth k-word, i
                        =1, 2, …, L, j
                        =1, 2, …, N. In this way, the dimension of the matrix can be reduced. We can greatly reduce the amount of calculation and operation time. For example, in the experiment 1, there are 30 mammalian species, so the original matrix is 30×4
                           k
                        , the new matrix is 30×
                        N when k
                        =1,2,3,4, the dimension of the original matrix is same with the dimension of the new matrix. When k
                        =5,6,7,…,11,12, the original matrix is 30×1024, 30×4096, 30×16384,…, 30×4194304, 30×16777216, respectively, while the new matrix is 30×1007, 30×3466, 30×8213,…, 30×16450, 30×16544, respectively.

In this paper, the Manhattan distance was used to analyze similarity of biological sequences, the Manhattan distance can be used to calculate the absolute distance between the two vectors, the formula is the following:


                        
                           
                              
                                 d
                                 (
                                 D
                                 
                                    
                                    
                                       i
                                       .
                                    
                                 
                                 ,
                                 D
                                 
                                    
                                    
                                       j
                                       .
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       ∑
                                       
                                          t
                                          =
                                          1
                                       
                                       N
                                    
                                    |
                                    D
                                    
                                       
                                       it
                                    
                                    −
                                    D
                                    
                                       
                                       jt
                                    
                                    |
                                 
                              
                           
                        
                     

The cross-validation and Receiver operating characteristic (ROC) curves are used to evaluation our method. Cross-Validation is a statistical method of evaluating and comparing learning algorithms by dividing data into two segments: one utilized to learn or train a model and the other used to validate the model. It is mainly utilized in settings where the goal is predicted, and one wants to estimate how accurately a predictive model will perform in practice. ROC curve is a graphical plot which illustrates the performance of a binary classifier system as its discrimination threshold is varied. It is created by plotting the fraction of true positives out of the total actual positives (TPR=true positive rate) vs. the fraction of false positives out of the total actual negatives (FPR=false positive rate). TPR and FPR are the following:
                           
                              TPR=true positive/positive

FPR=false positive/negative

The cross-validation will be used to choose the best model. The basic cross-validation form is k-fold, so we use the 10-fold cross-validation in this paper. Separating data into training and testing sets, and the prediction model can be obtained using the training set and the best model. Then, prediction values can be got using the prediction model and testing set. According to prediction values and the true values, the TPR and FPR can be got. Here, true values are the genotypes I and II in Table 1
                        , but in our program, we use 1 and 0 to replace the genotypes I and II. And prediction values are 0 or 1. So the ROC curves can be plotted using the TPR and the FPR. At the same time, we can get the AUC. Different ROC curves can be got based on different training and testing sets.

@&#RESULTS@&#

The proposed measure is evaluated by experiments such as discriminate analysis and phylogenetic analysis. We presently group our experiments into two sets. The first one, via ROC analysis, we assess whether our method is better than other's. The second one, by reconstructing phylogenetic tree, we evaluate the performance of our measure for phylogenetic analysis.

We use 31 hepatitis E virus (HEV) sequences (Lu et al., 2006) to do discriminate analysis. Thirty-one HEV genomes are grouped into two separate branches. Genotype I includes JKN-Sap, JMY-HAW, HE-JA10, swUS1, US1, US2, ARKELL, JJT-KAN, JRA1, JBOAR1-HYO04, JDEER-HYO03L, JTH-HYO03L, JYO-HYO03L, JMO-HYO03L, JSO-HYO03L, SWJ570 and KYRGYZ). Genotype II includes HE-JA1, SWJ13-1, JSN-SAP-FH, JSN-SAP-FH02C, HE-JK4, HE-JI4, JTS-SAP02, JYW-SAP02, JKK-SAP, JSM-SAP95, JAK-Sai, CCC220 and SWCH25, T1. The information of the 31 HEV sequences is described in Table 1.

The ROC curve is computed to evaluate and compare the performance of our measure with 
                           E
                           (
                           w
                           
                              
                              1
                           
                           
                              w
                              2
                           
                           …
                           
                              w
                              k
                           
                           )
                         (Ding et al., 2013). When k is fixed, we can get the area under a ROC curve (AUC) A
                        
                           D(k) and A
                        
                           E(k) in the same training set and testing set. Different train set and test set can get different AUC, so we calculate the average and standard error of the area. Table 2
                         provides the areas under ROC curves (AUC) obtained from D
                        
                           k
                         and E
                        
                           k
                        . The AUC value is typically used as a measure of overall discrimination accuracy. From Table 2, we can see that A
                        
                           D(k) is larger than A
                        
                           E(k) with word length k from 1 to 5. It shows that our measure performs better than E
                        
                           k
                        , it illustrates that D
                        
                           k
                         extract more information than E
                        
                           k
                        .

If we have some DNA sequences, their phylogenetic relationships can be obtained through the following main operations: The first, we construct the statistical models for biological sequences and calculate their similarity distance by using our statistical distance measure; The second, by arranging all the similarity distance into a matrix, we obtain a pair-wise distance matrix based on Manhattan distance; The last, we get a phylogenetic tree by computing the pair-wise distance matrix.

Generally, there are a lot of methods to test the validity of a phylogenetic tree. In this paper, we test the validity of our phylogenetic tree by comparing it with the authoritative ones.


                        Experiment 1. There are 30 mammalian species. They are downloaded from GenBank. Marsupials (opossum, wallaroo) – monotremes (platy-pus), non-murid rodents (squirrel, rabbit, fat dormouse guinea pig) – murid rodents (rat, mouse), carnivores (dog, cat, harbor seal, gray seal) – perissodactyls (horse, donkey, Indian rhinoceros, white rhinoceros) – artiodactyls (cow, sheep, pig, hippopotamus) – cetaceans (fin whale, blue whale), primates (human, common chimpanzee, pigmy chimpanzee, gorilla, gibbon, baboon, orangutan) are grouped into three separate branches. The first group is rodents (Guinea pig, Platypus, Rat, Mouse, Opossum, Wallaroo, Rabbit, Squirrel, Fat dormouse), the second group is primates (Baboon, Gibbon, Orangutan, Gorilla, Human, Common chimpanzee, Pigmy chimpanzee), the last group is ferungulates (Cat, Dog, Harbor seal, Gray seal, Horse, Donkey, White rhinoceros, Indian rhinoceros, Hippopotamus, Fin whale, Blue whale, Pig, Cow, Sheep). The information of the 30 mammalian species is described in Table 3
                        .

By using our method D(k), we calculate 30 sequences above with k from 1 to 12. The result of experiment shows in the following. With D(k
                        =1), D(k
                        =2), D(k
                        =3), D(k
                        =4) and D(k
                        =5), at the overall level, three groups of 30 mammalian species are not separated clearly. With D(k
                        =6) and D(k
                        =7), the division of 30 mammalian species into three groups is a clear and prominent feature. With D(k
                        =8), D(k
                        =9), D(k
                        =10), D(k
                        =11) and D(k
                        =12), three groups of 30 mammalian species are not separated clearly.

In Fig. 1
                        , we outline the phylogenetic tree with D(k
                        =6). The phylogenetic trees of the other D(k) are supplied in the supplementary material. By careful comparison, Fig. 1 shows that our result is quite consistent with the accepted taxonomy and authoritative ones (Larkin et al., 2007; Otu and Sayood, 2003). They all support the ((Primates, Ferungulates), Rodents) grouping.


                        Experiment 2. Phylogeny of Hepatitis E virus genotyping: Hepatitis E virus (HEV) is a non-enveloped virus approximately 27–34nm in diameter. It was previously classified into the family of Caliciviridae, but is now classified as Hepevirus genus under the separate family of Hepeviridea (Mayo, 2005). HEV has a positive sense single-stranded RNA genome approximately 7.2kb in length. It contains a short 50 untranslated region (UTR), three discontinuous partially overlapped open reading frames (ORF1, ORF2, and ORF3) and a short 30 UTR that is terminated by a poly (A) tract (Tam et al., 1991). Abbreviation for the strains, accession number, nucleotide length, country, and genotypes of all HEV genomes (Lu et al., 2006) are described in Table 4
                        .

By using our method D(k), we calculate HEV with k from 1 to 12. The results are the following. With D(k
                        =1), D(k
                        =2) and D(k
                        =3), at the overall level, four genotypes of 48 HEV is not separated clearly. With D(k
                        =4), the division of 48 HEV into four genotypes is clear. However, there are some disappointing values in the subdivision of the phylogenetic trees. HE-JA1, HE-JK4, HE-JI4, JAK-Sai, JKK-SAP, JSM-SAP95, JSN-SAP-FH, JSN-SAP-FH02C, JTS-SAP02, JYW-SAP02, SWJ13-1, which are subtype of IVa, are separated by SWCH25 (IVc), T1 (IVc) and CCC220 (IVb). With D(k
                        =5), D(k
                        =6), D(k
                        =7), D(k
                        =8), and D(k
                        =9), different strains of the same genotype come together as they should. With D(k
                        =10), D(k
                        =11) and D(k
                        =12), four genotypes of 48 HEV is not separated clearly.

In Figs. 2 and 3
                        
                        , we outline the phylogenetic trees with D(k
                        =2) and D(k
                        =5). The phylogenetic trees of the other D(k) are presented in the supplementary material. Fig. 3 shows that our results are quite consistent with the accepted taxonomy and authoritative ones (Lu et al., 2006; Liu et al., 2008; Yang and Wang, 2013). Forty-eight HEV genomes are grouped into four separate branches, which are consistent with the accepted four genotypes. Genotype I includes subtype Ia (I3, Yam-67, B1, B2, Np1, P2, I2), subtype Ib (I1), subtype Ic (C3, China Hebei, C1, P1, C2, C4), subtype Id (Morocco), and subtype Ie (T3). Genotype II contains only a complete HEV genome M1. Genotype III includes subtype IIIa (JKN-Sap, JMY-HAW, HE-JA10, swUS1, US1, US2, ARKELL), subtype IIIb (JJT-KAN, JRA1, JBOAR1-HYO04, JDEER-HYO03L, JTH-HYO03L, JYO-HYO03L, JMO-HYO03L, JSO-HYO03L, SWJ570), and subtype IIIc (KYRGYZ). Genotype IV includes subtype IVa (HE-JA1, SWJ13-1, JSN-SAP-FH, JSN-SAP-FH02C, HE-JK4, HE-JI4, JTS-SAP02, JYW-SAP02, JKK-SAP, JSM-SAP95, JAK-Sai), subtype IVb (CCC220), and subtype IVc (SWCH25, T1).

To further illustrate the effectiveness of D(k), we calculate the multi-class AUC. There are many models can do multi-class classification. Here we use the support vector machines (SVM) model. In machine learning, SVMs are supervised learning models with associated learning algorithms that analyze data and recognize patterns, used for classification and regression analysis. Different train set and test set can get different AUC, so we calculate the average and standard error of the area. Table 5
                         provides the areas under ROC curves (AUC) obtained from SVM model. As we all know, an area of 1 represents a perfect test. From Table 5, we can see the results are very good. Although the AUC varies with k ranging from 1 to 5, they all larger than 0.95.

@&#CONCLUSION@&#

In this paper, a novel alignment-free method for DNA sequence comparison named by normalized k-word average relative distance is proposed. For testing our measure, discriminate analysis and phylogenetic analysis are applied. From the discriminate analysis, we can clearly find that our measure extracts more bulk information. The comparison with the other method demonstrates that our measure gives more competitive results (Table 2). In addition, the reasonable results of phylogenetic tree construction illustrate the validity of our method for phylogenetic analysis (Fig. 1). In summary, our method can capture more k-word distribution information providing a useful tool for whole genome sequence comparison analysis. As we all know, a suitable k is very important to capture rich evolutionary information of DNA sequence. According to the phylogenetic analysis, we can notice that the trees are reliable when k
                     =6 and 7. But how to select k when applying our measure to a new dataset in order to make the data analysis the most believable? We will make efforts to find an excellent method to select k in our future work.

Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.compbiolchem.2014.10.007.

The following are the supplementary data to this article:
                        
                           
                        
                     
                  

@&#REFERENCES@&#

