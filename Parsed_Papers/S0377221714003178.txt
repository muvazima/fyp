@&#MAIN-TITLE@&#A multi-start algorithm for a balanced real-world Open Vehicle Routing Problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Nine real-world problems that concerns the planning of bus services are solved.


                        
                        
                           
                           The problem is modeled as a variant of the Open Vehicle Routing Problem.


                        
                        
                           
                           The objective is to minimize the makespan instead of the total cost.


                        
                        
                           
                           A competitive multi-start algorithm is proposed.


                        
                        
                           
                           A specific local search for the considered problem is proposed.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Open Vehicle Routing Problem

Multi-start algorithm

Local search algorithm

@&#ABSTRACT@&#


               
               
                  The aim of this paper is to solve a real-world problem proposed by an international company operating in Spain and modeled as a variant of the Open Vehicle Routing Problem in which the makespan, i.e., the maximum time spent on the vehicle by one person, must be minimized. A competitive multi-start algorithm, able to obtain high quality solutions within reasonable computing time is proposed. The effectiveness of the algorithm is analyzed through computational testing on a set of 19 school-bus routing benchmark problems from the literature, and on 9 hard real-world problem instances.
               
            

@&#INTRODUCTION@&#

This work is motivated by a real-world problem that concerns the planning of bus services for an international company operating in Spain where everyday a huge number of employees must be picked up in several locations and taken to their working place.

The company has nine workplaces located in different cities in Spain, hence nine home-to-work bus services have to be optimized. The transport service planning is negotiated between the company management and the unions and approximately 5million Euros are spent every year by this company for the transportation of employees. Therefore, the main objective of the optimization is the reduction the total cost of the process, which is primarily related to the number of routes (i.e., vehicles) used.

The most important constraint imposed in the real-world problem concerns the time that the employees spend on the bus, which is limited to one hour. This constraint arises since companies in Spain have to protect and insure their employees not only in the workplace but also on the way to it and back to their home. However, insurance companies cover road accidents only if they occur one hour before or after the working hours. Therefore, a maximum duration of one hour is imposed to all routes so that all employees are insured. In addition, balanced routes, i.e., having similar duration, are desired to avoid conflicts and uneven treatment for the employees.

Given these characteristics, the problem can be modeled as a variant of the Open Vehicle Routing Problem (OVRP). The OVRP is a well known optimization problem in which either the vehicles are not required to return to the depot after completing their services, or they must return in reverse order along the route. In the OVRP, we are given a set of customers with a specified demand of goods and a depot where a fleet of identical capacitated vehicles is located. We are also given the “traveling costs” between the depot and all the customers, and between each pair of customers. The OVRP then consists in finding a set of routes performed by the vehicles and such that:
                        
                           1.
                           each route starts at the depot and ends at one of the customers, or vice versa,

each customer is served once by exactly one route,

total demand served by each route must not exceed the vehicle capacity, and

each route must have a total cost not exceeding a prescribed maximum.

Generally, the objective of the classical OVRP is to minimize the number of required routes (i.e., vehicles) first and then the total cost. Some authors address a variant of this problem in which the objective is just minimizing the total cost without taking into account the number of required routes. Many real-world problems fit into the OVRP framework. For example, those companies not owning a vehicle fleet that must contract services to external transporter (see Tarantilis, Kiranoudis, Ioannou, & Prastacos, 2005; Tarantilis, Diakoulaki, & Kiranoudis, 2004), pick up and delivery VRP (see Schrage, 1981) and the planning of train services or bus routes (see Fu, Eglese, & Li, 2005; Bodin, Golden, Assad, & Ball, 1983).

To take into account the route balancing and the maximum route duration constraint our problem is modeled as an OVRP calling for the minimization of the makespan, i.e., the maximum time spent on the vehicle by a user (see, e.g., Golden, Laporte, & Taillard, 1997). We denote the resulting problem as the Balanced OVRP (BOVRP). Clearly, minimizing the makespan leads to a set of routes whose makespan is smaller than the prescribed maximum travel duration, since otherwise the problem is infeasible. Furthermore, as often done in practice, to minimize the number of used vehicles we iteratively solve a BOVRP with fixed number of vehicles and we gradually increase such value until a feasible solution is found.

The OVRP, and thus BOVRP, is an 
                        
                           NP
                        
                     -hard combinatorial optimization problem by reduction from the Hamiltonian path problem (see Letchford, Lysgaard, & Eglese, 2007). Hence, it is reasonable to develop an approximate algorithm to find good quality feasible solutions in a reasonable computing time.

In this work a multi-start algorithm specifically designed for the BOVRP is proposed. Multi-start methods have two phases that are executed a certain number of iterations. The first phase generates a feasible solution and the second phase attempts to improve the outcome. They are well-known algorithms that have been successfully applied to a wide variety of complex real-world problems.

The paper is organized as follows: Section 2 describes the problem and provides a comprehensive literature review on methods proposed for BOVRP. Section 3 discusses the proposed algorithm. Then, numerical experiments to test the performance of the algorithm will be presented in Section 4. Finally, in Section 5 conclusions are drawn and further research directions are suggested.

The OVRP can be formally stated as follows. Let 
                        
                           G
                           =
                           (
                           V
                           ,
                           E
                           )
                        
                      be a complete graph, where 
                        
                           V
                           =
                           {
                           0
                           ,
                           1
                           ,
                           …
                           ,
                           n
                           }
                        
                      is the node set and 
                        
                           E
                           =
                           {
                           (
                           i
                           ,
                           j
                           )
                           :
                           i
                           ,
                           j
                           ∈
                           V
                           ,
                           i
                           
                           ≠
                           
                           j
                           }
                        
                      is the edge set. Node 0 is the depot and 
                        
                           N
                           =
                           {
                           1
                           ,
                           …
                           ,
                           n
                           }
                        
                      is the set of customers. Each edge 
                        
                           (
                           i
                           ,
                           j
                           )
                           ∈
                           E
                        
                      has an associated cost 
                        
                           
                              
                                 c
                              
                              
                                 ij
                              
                           
                        
                      and each customer 
                        
                           i
                           ∈
                           V
                        
                      has a demand 
                        
                           
                              
                                 q
                              
                              
                                 i
                              
                           
                           >
                           0
                        
                      (with 
                        
                           
                              
                                 q
                              
                              
                                 0
                              
                           
                           =
                           0
                        
                     ). Note that in our application the demand corresponds to the number of employees to be picked up at a given location and the cost of an edge is the associated travel time. Let 
                        
                           M
                           =
                           {
                           1
                           ,
                           …
                           ,
                           m
                           }
                        
                      be the fleet of m identical vehicles located at the depot. Each vehicle has an associated capacity Q and a maximum cost limit C (i.e., a maximum duration). The customers must be served by m Hamiltonian paths (open routes), each associated with one vehicle, starting at the depot and ending at one of the customers, or vice versa. Each vehicle’s route cannot exceed neither the cost limit nor the capacity. The objective of the OVRP is to minimize the total cost of the routes.

As we previously mentioned, in the BOVRP we minimize the makespan instead of the total cost. In addition, the minimization of the number of vehicles is obtained by repeatedly solve the BOVRP with fixed number of vehicles and determine the smallest value for which a feasible solution of BOVRP is found. Figs. 1 and 2
                     
                      show examples of an OVRP and a BOVRP solution, respectively. According to Fig. 1, these six routes are suitable for an OVRP solution where the total cost is minimized. Specifically, this is a benchmark instance known as C6 in the literature. In the example, the OVRP has a total cost of 412.96 and the longest route is the route number 6 with a cost of 80.72. Solving a BOVRP we get a more balanced set of routes, as depicted in Fig. 2. In the BOVRP solution, the total cost has incremented (432.19) but the longest route is now the route number 3 with a total cost of 77.92 and the cost of the route number 6 is reduced: 77.14.

Most of the existing literature is devoted to OVRP. The first mentioning of OVRP is in a paper by Schrage (1981) in 1981, where an explicit distinction is made between closed trips traveled by private vehicles, and open trips assigned to common carrier vehicles. However, the first solution approach for the OVRP is due to Bodin et al. (1983) in 1983, who dealt with a real-world application of express airmail distribution where delivery and pickup routes are modeled as open paths since airplanes are not required to return to the depot.

Since year 2000, many researchers developed methods to solve the OVRP (see, e.g., Repoussis, Tarantilis, Bräysy, & Ioannou, 2010; Salari, Toth, & Tramontani, 2010; Zachariadis & Kiranoudis, 2010 that are some of the most recent). As far as we know, only three papers addressed BOVRP in the literature and they all refer to the real-world problem of optimizing school bus routing. Indeed in these applications it is important to control the maximum time a student spends on the vehicle, i.e., the maximum route cost. In 2001, Delgado and Pacheco (2001) proposed a Tabu Search algorithm to solve the BOVRP. In 2002, Corberán et al., see Corberán, Fernández, Laguna, and Martí (2002), developed a solution procedure that constructs, improves and then combines solutions within the framework of the evolutionary approach known as Scatter Search. Finally, in 2006 Pacheco and Martí (2006) solved the problem using different construction procedures and a Tabu Search procedure that were coupled with an intensification phase based on the Path Relinking methodology. Their best results were obtained using Tabu Search with Path Relinking.

In this section, a novel multi-start approach is proposed to solve the BOVRP. Our multi-start algorithm is an iterative process, in which each iteration consists of two phases: the first one (called construction phase) in which a feasible solution is possibly generated, and the second (called local search phase) in which an attempt to improve the solution quality and possible infeasibility is performed. As a consequence, each iteration produces a locally optimal solution, and the algorithm returns the best one found during the iterative process.

According to Martí, Marcos Moreno-Vega, and Duarte (2010), in multi-start methods there are three key elements that can be used for classification purposes: memory, randomization and degree of rebuild. The choices for each one of these elements are not restricted to the extreme case of “present” and “not present”, but they represent the whole range of possible intermediate values. These can be labeled as Memory/Memory-less that refers to elements that are common to certain previously generated solutions, Randomized/Systematic meaning that the starting solutions can be either randomly generated or in a systematic way and Rebuild/Build-from-scratch that is a measure of the proportion of elements that remain fixed from one generation to another.

Next, the multi-start algorithm used to solve the BOVRP will be described in details with the above characteristics: Memory-less, Randomized and Build-from-scratch. We have selected those characteristics to favor diversity in the algorithm’s results.

One of the main problems in an OVRP is to appropriately include in the solution the nodes which turn out to be hard to service. In most cases these are nodes located far away from the depot or with a large demand. In our particular BOVRP the hard nodes are clearly the employees who live far from the depot (in our case they are employees for which the pickup trip has a long duration) and relatively isolated from the others. In most cases, if routes are constructed starting from the depot and ending at one of the nodes, then those hard nodes could not be served either because the capacity is reached or the maximum imposed duration is violated. To limit occurrence of this problem, routes are constructed in the reverse order, i.e., starting from one of the nodes and ending at the depot. To this end, the algorithm first selects some seed nodes which are used as the starting points of the routes. The number of selected seed nodes is limited by the number m of available vehicles but may be smaller since we avoid selecting seeds that are too close to each other.

To include some limited randomization in the process, at each iteration the cost matrix (given in time units) is slightly perturbed as follows. Each value 
                           
                              
                                 
                                    c
                                 
                                 
                                    ij
                                 
                              
                           
                        , for all 
                           
                              i
                              ,
                              
                              j
                              ∈
                              V
                           
                        , is perturbed yielding 
                           
                              
                                 
                                    
                                       
                                          c
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    ij
                                 
                              
                              =
                              (
                              1
                              +
                              
                                 
                                    ε
                                 
                                 
                                    ij
                                 
                              
                              )
                              ·
                              
                                 
                                    c
                                 
                                 
                                    ij
                                 
                              
                           
                        , where 
                           
                              
                                 
                                    ε
                                 
                                 
                                    ij
                                 
                              
                           
                         is a perturbation factor uniformly random in the interval 
                           
                              [
                              -
                              α
                              ,
                              α
                              ]
                           
                        , and 
                           
                              α
                              ∈
                              [
                              0
                              ,
                              1
                              ]
                           
                         is the perturbation parameter. Such a perturbation parameter controls the level or grade of randomization. Thus, the smaller the value of 
                           
                              α
                           
                         the more deterministic is the processes. According to our testing, it is difficult to find a single 
                           
                              α
                           
                         value that produces the best performance for all instances in a test set. Therefore, we repeated the multi-start approach considering a set including a finite number of different 
                           
                              α
                           
                         values chosen in the 
                           
                              [
                              0
                              ,
                              1
                              ]
                           
                         interval. More details about the selection of suitable 
                           
                              α
                           
                         values are given in Section 4.
                           
                              •
                              
                                 Seed selection. As previously observed, the selection of a node as seed depends both on its characteristics and on the other seeds already selected. The first seed node is the one for which the trip from the depot has the longest duration, breaking ties by considering the largest demand. The remaining seeds are chosen as those most time-consuming to arrive from the depot and from the other seeds. More precisely, let S be the set of already selected seed nodes the next candidate, 
                                    
                                       
                                          
                                             ı
                                          
                                          
                                             ^
                                          
                                       
                                       ∈
                                       N
                                       ⧹
                                       S
                                    
                                 , is selected as:
                                    
                                       
                                          
                                             
                                                ı
                                             
                                             
                                                ˆ
                                             
                                          
                                          =
                                          arg
                                          
                                             
                                                
                                                   max
                                                
                                                
                                                   i
                                                   ∈
                                                   N
                                                   ⧹
                                                   S
                                                
                                             
                                          
                                          
                                          
                                             
                                                
                                                   min
                                                
                                                
                                                   j
                                                   ∈
                                                   S
                                                   ∪
                                                   {
                                                   0
                                                   }
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      ˆ
                                                   
                                                
                                             
                                             
                                                ij
                                             
                                          
                                          .
                                       
                                    
                                 The seed selection procedure is interrupted either when the number m of desired seed nodes is reached, or whenever the candidate is closer than a predefined threshold value 
                                    
                                       ρ
                                    
                                  to other seeds in S: in this latter case we clearly have 
                                    
                                       |
                                       S
                                       |
                                       ⩽
                                       m
                                    
                                 . In our experimental testing we found that a value 
                                    
                                       ρ
                                       =
                                       0.25
                                       ·
                                       
                                          
                                             max
                                          
                                          
                                             i
                                             ,
                                             j
                                             ∈
                                             V
                                          
                                       
                                       
                                          
                                             c
                                          
                                          
                                             ij
                                          
                                       
                                    
                                  produces the best results. In addition, it is worth noting that the choice of the seeds is not deterministic because of the use of the perturbed cost matrix.


                                 Nodes insertion. After the seeds selection, routes are completed by using a specialized implementation of the extra-mileage algorithm by Mole and Jameson (1976). In our case, let 
                                    
                                       
                                          
                                             V
                                          
                                          
                                             ∗
                                          
                                       
                                    
                                  be the set of unassigned nodes, 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             k
                                          
                                       
                                    
                                  be the set of nodes already inserted into route k. In addition, let 
                                    
                                       
                                          
                                             j
                                          
                                          
                                             h
                                          
                                          
                                             k
                                          
                                       
                                    
                                  be the index of the node in position h in such a route, where 
                                    
                                       h
                                       =
                                       0
                                    
                                  denotes the first node of the route (i.e., the node that is visited first) and 
                                    
                                       
                                          
                                             j
                                          
                                          
                                             h
                                          
                                          
                                             k
                                          
                                       
                                       =
                                       0
                                    
                                  when 
                                    
                                       h
                                       =
                                       |
                                       
                                          
                                             S
                                          
                                          
                                             k
                                          
                                       
                                       |
                                    
                                  (i.e., the depot is the last node visited). The additional cost 
                                    
                                       
                                          
                                             γ
                                          
                                          
                                             k
                                          
                                       
                                       (
                                       i
                                       ,
                                       h
                                       )
                                    
                                  of assigning a still unassigned node 
                                    
                                       i
                                       ∈
                                       V
                                    
                                  into route k before position h is computed as follows:
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      γ
                                                   
                                                   
                                                      k
                                                   
                                                
                                                (
                                                i
                                                ,
                                                h
                                                )
                                                =
                                                
                                                   
                                                      
                                                         
                                                            c
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                      ,
                                                      
                                                         
                                                            j
                                                         
                                                         
                                                            h
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                   
                                                
                                             
                                          , if 
                                             
                                                h
                                                =
                                                0
                                             
                                          ,


                                          
                                             
                                                
                                                   
                                                      γ
                                                   
                                                   
                                                      k
                                                   
                                                
                                                (
                                                i
                                                ,
                                                h
                                                )
                                                =
                                                
                                                   
                                                      
                                                         
                                                            c
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            j
                                                         
                                                         
                                                            h
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      -
                                                      1
                                                      ,
                                                      i
                                                   
                                                
                                                +
                                                
                                                   
                                                      
                                                         
                                                            c
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                      ,
                                                      
                                                         
                                                            j
                                                         
                                                         
                                                            h
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                   
                                                
                                                -
                                                
                                                   
                                                      
                                                         
                                                            c
                                                         
                                                         
                                                            ˆ
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            j
                                                         
                                                         
                                                            h
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                      -
                                                      1
                                                      ,
                                                      
                                                         
                                                            j
                                                         
                                                         
                                                            h
                                                         
                                                         
                                                            k
                                                         
                                                      
                                                   
                                                
                                             
                                          , if 
                                             
                                                h
                                                =
                                                1
                                                ,
                                                …
                                                ,
                                                |
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      k
                                                   
                                                
                                                |
                                             
                                          .

Then, the node with minimum extra cost is inserted into the best position of the best route and 
                                    
                                       
                                          
                                             V
                                          
                                          
                                             ∗
                                          
                                       
                                    
                                  is updated accordingly. A route is closed whenever no more additional nodes can be inserted in it. If a node cannot be feasibly inserted into any of the existing routes, then a new one is initialized with it if still less than m routes are used; otherwise the insertion process is terminated since no feasible solution can be found by continuing the route construction.

Although the initial solution generated during the multi-start construction phase is usually of high quality, a local search step may help improving it by exploring neighboring solutions. Whenever an improving solution is generated, it becomes the current one and the process is iterated until a local optimum is reached.

The implemented local search procedure is specifically designed to optimize BOVRP solutions and is based on three classical movements adapted to our objective. The three neighborhoods we use are of node-exchange type and are defined as intra-route exchanges, when all considered nodes belong to the same route, and inter-route exchanges otherwise. More precisely, the following three neighborhoods are examined in sequence, and the first improving move is executed.

The first neighborhood we use is called Restricted 1–1 Intra-Route Exchange and is applied to all routes of the solution. This restricted exchange consists of swapping the position of two consecutive nodes in the same route, rather than any pair of nodes in the route.

Next, the Balanced 1–1 Inter-Route Exchange is considered. This exchange evaluates the possibility of exchanging one node belonging to the route having maximum cost with a node of any other route, thus possibly reducing the cost of the worst route. Both nodes are inserted in the best possible position in their new routes according to the above-described extra-mileage criterion.

Finally, the Balanced 1–0 Inter-Route Exchange neighborhood is used. This exchange evaluates the possibility of moving a node belonging to the route with maximum cost in the best position of any other route.

In addition, to reduce the overall computing time we apply the local search only to promising solutions, i.e. those solutions x satisfying 
                           
                              f
                              (
                              x
                              )
                              <
                              θ
                              ·
                              f
                              (
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                              )
                           
                        , where 
                           
                              f
                              (
                              x
                              )
                           
                         is the value of the objective function for the current solution x and 
                           
                              f
                              (
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                              )
                           
                         is the best solution found so far, 
                           
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                           
                        . According to our computational experience, by defining 
                           
                              θ
                              =
                              1.25
                           
                         one gets the best compromise between solution speed and quality.

The pseudo-code of the proposed multi-start algorithm is included in Algorithm 1 summarizing all the details given above.
                           Algorithm 1
                           Multi-start algorithm 
                                 
                                    
                                       
                                       
                                       
                                          
                                             1: 
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            ∗
                                                         
                                                      
                                                      ←
                                                      ∅
                                                      ,
                                                      
                                                      f
                                                      (
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            ∗
                                                         
                                                      
                                                      )
                                                      ←
                                                      ∞
                                                   
                                                ;
                                             
                                          
                                          
                                             2: for 
                                                
                                                all
                                                
                                                
                                                   
                                                      α
                                                      ∈
                                                      A
                                                   
                                                 
                                                do
                                             
                                             
                                          
                                          
                                             3: 
                                                initialize: 
                                                
                                                   
                                                      It
                                                      ←
                                                      1
                                                   
                                                ;
                                             
                                          
                                          
                                             4: 
                                                repeat
                                             
                                             
                                          
                                          
                                             5: 
                                                
                                                
                                                   
                                                      x
                                                      ←
                                                      Construction
                                                      (
                                                      α
                                                      )
                                                   
                                                ;
                                             
                                          
                                          
                                             6: 
                                                
                                                if 
                                                
                                                x is infeasible
                                                then
                                             
                                             
                                          
                                          
                                             7: 
                                                
                                                
                                                   
                                                      f
                                                      (
                                                      x
                                                      )
                                                      ←
                                                      +
                                                      ∞
                                                   
                                                ;
                                             
                                          
                                          
                                             8: 
                                                
                                                end 
                                                
                                                if
                                             
                                             
                                          
                                          
                                             9: 
                                                
                                                if
                                                
                                                
                                                   
                                                      f
                                                      (
                                                      x
                                                      )
                                                      <
                                                      θ
                                                      ·
                                                      f
                                                      (
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            ∗
                                                         
                                                      
                                                      )
                                                   
                                                 
                                                
                                                then
                                             
                                             
                                          
                                          
                                             10: 
                                                
                                                
                                                   
                                                      x
                                                      ←
                                                      LocalSearch
                                                      (
                                                      x
                                                      )
                                                   
                                                ;
                                             
                                          
                                          
                                             11: 
                                                
                                                if
                                                
                                                
                                                   
                                                      f
                                                      (
                                                      x
                                                      )
                                                      <
                                                      f
                                                      (
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            ∗
                                                         
                                                      
                                                      )
                                                   
                                                 
                                                then
                                             
                                             
                                          
                                          
                                             12: 
                                                
                                                
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            ∗
                                                         
                                                      
                                                      ←
                                                      x
                                                   
                                                ;
                                             
                                          
                                          
                                             13: 
                                                
                                                end if
                                             
                                             
                                          
                                          
                                             14: 
                                                
                                                end if
                                             
                                             
                                          
                                          
                                             15: 
                                                
                                                
                                                   
                                                      It
                                                      ←
                                                      It
                                                      +
                                                      1
                                                   
                                                ;
                                             
                                          
                                          
                                             16: 
                                                until 
                                                
                                                
                                                   
                                                      It
                                                      =
                                                      
                                                         
                                                            It
                                                         
                                                         
                                                            max
                                                         
                                                      
                                                   
                                                ;
                                             
                                          
                                          
                                             17: end 
                                                
                                                for
                                             
                                             
                                          
                                          
                                             18: return 
                                                
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            ∗
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                          
                                       
                                    
                                 
                              
                           

In this section we discuss the results of the computational testing conducted on the proposed algorithm. First of all, we considered a set of BOVRP instances proposed in the school-bus routing literature. Then we examined the real-world employees transportation problems from the home-to-work bus service that motivated our research.

All computational experiments were performed on a MAC OS X, processor 2.4gigahertz Intel Core 2 Duo and 4gigabytes RAM. All problems are solved 50 times, i.e., the number of runs is 50 in order to provide accurate statistical measures as means and standard deviations. Each run executes a total of 
                        
                           
                              
                                 It
                              
                              
                                 max
                              
                           
                           =
                           200
                        
                      multi-start iterations. Furthermore, for the school bus service problems the 
                        
                           α
                        
                      values are varying from 
                        
                           0.05
                        
                      to 1 with a step of 
                        
                           0.05
                        
                     . For the home-to-work bus service problems the perturbation parameters are limited to those belonging to the set 
                        
                           A
                           =
                           {
                           0.15
                           ,
                           0.20
                           ,
                           0.25
                           ,
                           0.30
                           }
                        
                     . This reduced set A produced the best solutions according to the fine-tuning of the algorithm described in Section 4.3.

The performance of the proposed algorithm described in the previous sections is first evaluated on the real-world school-bus routing problems originally proposed by Delgado and Pacheco (2001) and then used by Corberán et al. (2002), and Pacheco and Martí (2006). In total the testing set includes 19 problems, containing between 5 and 58 nodes, called problem 
                           
                              p
                              7
                              ,
                              
                              p
                              14
                              ,
                              
                              p
                              41
                           
                         (relative to primary schools) and 
                           
                              s
                              1
                           
                         to 
                           
                              s
                              16
                           
                         (relative to secondary schools). As in Delgado and Pacheco (2001), Corberán et al. (2002) and Pacheco and Martí (2006), each problem is solved for different numbers of available vehicles, m, resulting in a total of 94 test problems.

The meaning of columns in Tables 1 and 2
                        
                         which reports the computational results are described next:
                           
                              •
                              
                                 Problem: name of the problem,


                                 n: total number of nodes,


                                 
                                    
                                       
                                          
                                             Q
                                          
                                          
                                             T
                                          
                                       
                                    
                                 : total demand,


                                 m: maximum number of available vehicles,


                                 C: maximum cost (i.e., time) allowed for each route,


                                 Best: best solution value obtained using our algorithm,


                                 Average: average solution value obtained using our algorithm,


                                 SD: standard deviation of the solution values obtained using our algorithm,


                                 CPU: average CPU time, expressed in seconds, obtained using our algorithm for each specific 
                                    
                                       α
                                    
                                  value with 
                                    
                                       
                                          
                                             It
                                          
                                          
                                             max
                                          
                                       
                                       =
                                       200
                                    
                                  iterations.

In addition, Tables 1 and 2, includes columns reporting the results obtained by other algorithms from the literature, namely:
                           
                              •
                              
                                 
                                    
                                       TS
                                       1
                                    
                                 : best solution value obtained using the Tabu Search algorithm of Delgado and Pacheco (2001),


                                 SS: best solution value obtained using the Scatter Search algorithm of Corberán et al. (2002),


                                 
                                    
                                       TS
                                       2
                                    
                                 : best solution value obtained using the Tabu Search-Path Relinking algorithm of Pacheco and Martí (2006).

In the tables when an algorithm obtains the best solution this is marked in boldface. In addition the last two lines of each table report for each heuristic, the average percentage deviation of the solution value obtained by the heuristic with respect to the previous best values (i.e., the best solution found by 
                           
                              TS
                              1
                              ,
                              
                              TS
                              2
                           
                         and SS) and the number of improving solutions with respect to the new best-known values. Solutions in Table 2 for problems s11 and s12 marked with an asterisk 
                           
                              (
                              *
                              )
                           
                         mean that some of the constraints are violated, either the capacity or cost limit. Therefore we have ignored them in the average results.


                        Tables 1 and 2 demonstrate the effectiveness of the proposed algorithm for the solution of the BOVRP. The multi-start algorithm obtains competitive solutions in comparison to the best-known values obtained by 
                           
                              TS
                              1
                              ,
                              
                              SS
                           
                         and 
                           
                              TS
                              2
                           
                        . Results in boldface represent the best solution found, either using the proposed algorithm or the three previous algorithms. In fact, in 80 out of 94 problems the proposed multi-start algorithm obtained a solution value not worse than the previous best solution and in total obtained 22 new best solutions. In addition, on the primary school problems both the best and the average solutions found by our heuristic are on average better than the previous ones from the literature. As to the secondary school problems, the best solutions found by the multi-start heuristic has on average comparable quality of the best from the literature whereas the average solution is still within 3.27% of gap. Moreover, in all cases the multi-start algorithm shows a considerable stability having fairly small standard deviation of the solutions values with respect to the average. Finally, the multi-start algorithm is considerably fast requiring average computing times of few tenths of a second on a PC.

In this section we illustrate the results obtained when using the multi-start algorithm to solve the real-world problem proposed by an international company operating in Spain. To protect company’s privacy the instances have been called A1 to A9. The problem concerns the planning of bus services for the employees of the company that must be picked up in several locations (near their homes) and brought to the working place.

A Geographical Information System (GIS) tool was used to define the spatial database with all employees and working place locations and to define the travel time matrices used as costs in the computational testing.

The size of the test problems ranges from 62 to 363 bus stops (including the working place) and from 214 to 1347 employees. Costs are measured in minutes of travel time. Finally, all vehicles have a limited capacity of 54 seats and only solutions with a maximum travel duration of 60minutes were provided to the company. Each problem was solved taking five different values of the number of vehicles in order to get a variety of competitive solutions allowing to analyze the trade-off between the number of vehicles and the longest route. The first value for the number of vehicles is the lowest value for which a feasible solution was found, then four consecutive larger values are considered. The data of the real world problems can be obtained upon request to the corresponding author.

All obtained solutions were shown to the management of the company and the unions letting them make the final decision of selecting the most suitable according to their preferences. Table 3
                         includes the best solutions we got for the real-world problems that were provided to the company. We cannot compare our solutions to the ones used by the company up to now because the policy in which none of the routes could be longer than 60minutes was never used before. Moreover, in some cases even the capacity constraints were violated since previously a heterogeneous fleet was used and no data on the vehicle fleet is still available. Those details are shown in Tables 4 and 5
                        
                         and 7–13 where bold numbers represent violations either in time or in capacity constraints. Nevertheless, next a couple of examples are explained in details.

For example, the company previous solution for Problem A1, see Table 4, make use of six vehicles violating three constraints: the longest route took 106.01minutes, the second longest 81.16minutes and route four took 60 employees on the bus. This makes Problem A1 hard to be improved keeping the same number of vehicles. However, the proposed algorithm (which indeed limits the longest route to 60minutes and the bus capacity to 54 employees) finds a feasible solution with only seven vehicles obtaining an objective function value of 59.32minutes, see Problem A1 in Table 3. Thus, the solution is much more balanced with respect to the time and capacity constraints.

On the other hand, the solution of Problem A2 is improved by the multi-start with respect to the current company solution shown in Table 5. Indeed, our solution uses one less vehicle than the company one and produces routes with maximum duration of 52.98minutes (see Table 3).

It is worth pointing out that the proposed multi-start algorithm was able to find solutions with less routes than the previous ones used by the company in six out of nine cases (namely Problems A2, A3, A5, A6, A7 and A9).

Finally, it is worth mentioning that the robustness and speed shown for the school bus problems is still maintained for the home-to-work bus service problems: standard deviations are near to zero and CPU times still being relatively small considering the size of the real-world problems (i.e., about 200seconds for more than 350 nodes).

Clearly the number of different 
                           
                              α
                           
                         values used in the multi-start affects considerably the overall quality results of the algorithm. Given the larger size of the home-to-work problems we previously performed a fine tuning step to select a possibly small subset of the 
                           
                              α
                           
                         values we used for the school bus problems which obtain the best overall results. As described in Section 4.1, for the school bus problems 
                           
                              α
                           
                         was varied from 
                           
                              0.05
                           
                         to 1 with step of 
                           
                              0.05
                           
                        , thus yielding a set of 20 values. In order to select the best perturbation parameters a Kruskal–Wallis test (see Kruskal & Wallis, 1952), and its corresponding post hoc Dunn’s test (see Dunn, 1964), were used for each problem.

As it is well-known, Kruskal–Wallis test is a nonparametric test to allow the comparison of more than two categorical, independent groups. In our case, the independent variable consists of the 20 perturbation parameters and dependent variable is the solution obtained when the multi-start algorithm is applied. The null hypothesis of the Kruskal–Wallis corresponds to the condition in which there were no differences among the results applying the 20 perturbation parameters. Considering a significance level of 0.01, initial tests demonstrated that the hypothesis null was rejected. Then, the interest was to detect for which 
                           
                              α
                           
                         values there are differences and similarities. The Dunn’s test detected such differences comparing all possible pairs of perturbation parameters. Thus, the set was fixed to 
                           
                              A
                              =
                              {
                              0.15
                              ,
                              0.20
                              ,
                              0.25
                              ,
                              0.30
                              }
                           
                         because the values of this set obtain the best results for the school bus problems. That is why we have selected this set of 
                           
                              α
                           
                         values for solving the home-to-work bus problems, A1–A9. In order to illustrate the selection made to obtain the set A used for home-to-work problems, Table 6
                         shows the obtained results when the Kruskal–Wallis test is applied to each problem. Using the Kruskal–Wallis test, a chi-square statistic is used to evaluate differences in mean ranks to assess the null hypothesis, that is, there is no difference among the results applying any 
                           
                              α
                           
                         values of the set 
                           
                              A
                              =
                              {
                              0.15
                              ,
                              0.20
                              ,
                              0.25
                              ,
                              0.30
                              }
                           
                        .

Recall that the null hypothesis is rejected when the p-value is less than the predetermined significance level. In the literature, the significance level is generally either 0.01 or 0.05, indicating in both cases that the observed result would be highly unlikely under the null hypothesis. Considering a significance level of 0.01, we observe from Table 6 that the null hypothesis is not rejected for all cases. In other words, there is no relevant difference among the results we obtain applying the four best 
                           
                              α
                           
                         values of the set 
                           
                              A
                              =
                              {
                              0.15
                              ,
                              0.20
                              ,
                              0.25
                              ,
                              0.30
                              }
                           
                         and the whole set.

In this paper a new multi-start algorithm is proposed to solve the Balanced Open Vehicle Routing Problems (BOVRP), a variant of the OVRP that calls for the minimization of the makespan, i.e., the longest route. The performance of the proposed algorithm is compared against other previous competitive algorithms for BOVRP on a benchmark set consisting of school bus routing problems. Finally, the algorithm is used to solve a real-world problem proposed by an international company operating in Spain consisting in 9 home-to-work bus services.

Computational results show the competitiveness of the multi-start algorithm, improving 22 out of 94 best-known solutions for the school bus problems with respect to the previous literature. In addition, large savings were achieved for the real problem with respect to the routes used by the company in the past. Moreover, in both sets of problems, the multi-start algorithm showed to have very good properties as its simplicity, robustness and speed.

As future work, the multi-objective OVRP will be addressed. This new variant consists in minimizing the number of routes, the maximum route cost and the total cost. Thus, two different and often unrelated costs, distance and time, will be considered.

@&#ACKNOWLEDGEMENTS@&#

We wish to thank the company for providing us the data for the testing and two anonymous reviewers for their suggestions and comments.

Daniele Vigo acknowledges the support from Ministero dell’Istruzione, dell’Università e della Ricerca, Italy.


                     Tables 7–13
                     
                     
                     
                     
                     
                     
                     .

@&#REFERENCES@&#

