@&#MAIN-TITLE@&#A comparison study between the TLS-based security framework and IKEv2 when protecting DSMIPv6 signaling

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We compared the TLS-based security framework and IKEv2 when used for DSMIPv6.


                        
                        
                           
                           Network and processing costs are examined with different authentication methods.


                        
                        
                           
                           TLS-based solution has less computation cost with D–H Groups 5 and 14.


                        
                        
                           
                           TLS-based solution presents less authentication delay.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Mobile communication

Wireless networks

Access control

Data security

Cryptographic protocols

IP networks

@&#ABSTRACT@&#


               
               
                  This paper presents a comparison study between the TLS-based security for DSMIPv6 and IKEv2 when establishing Security Associations between MN and HA. The network transmission and processing costs are examined for each protocol using different authentication methods. The results show that the TLS-based solution has less computation cost and less authentication delay than IKEv2with D–H Groups 5 and 14. However, the high amount of transmitted data for certificate based authentications increases the authentication delay in low bandwidth wireless networks.
               
            

@&#INTRODUCTION@&#

Secure communications of mobility signaling protocols such as DSMIPv6 are critical to avoid a wide variety of threats like tampering and man-in-the-middle attacks [1]. The protocol of choice in DSMIPv6 specification is IPsec [2] with IKEv2 [3] to provide security for signaling and optionally for user traffic. IKEv2 is a component of IPsec used for performing mutual authentication and establishing and maintaining security associations. In the context of DSMIPv6, IKEv2 is used for performing mutual authentication, establishment and maintenance of SA between the MN and the HA and configuration of some MIPv6 parameters [4].

The security aspect of the DSMIPv6 protocol is a critical component for consideration in terms of deployment and operation on large scales. While IPsec and IKEv2 enable a wide range of configurations and authentication possibilities they are rather complex. From the implementation point of view, the use of IKEv2 and IPsec for protecting MIPv6 traffic requires tight coupling between these two protocols on host's stack. Implementation experience has shown that the use of IKEv2 and IPsec with MIPv6 is fairly complex, and not always readily available in a specific platform at all. Therefore, the design of the (DS)MIPv6 security should be revised [5].

To simplify implementations and make the mobility protocol easy to deploy without compromising security, a TLS-based framework was proposed by one of the authors and standardized on IETF in [6]. This framework is used for providing mutual authentication, security association establishment and management for DSMIPv6. Instead of using IKEv2, the proposed security framework is based on TLS protected messages for key exchange and for bootstrapping mobility related parameters between the MN and a new functional entity called HAC. The use of TLS is justified by its wide deployment on practically every possible platform that connects to Internet and Web services. Also, TLS implementations have high degree of maturity and the protocol is implemented entirely in the user space. The TLS security framework for DSMIPv6 will be referred as DSMIPv6-TLS in this paper.

With two security methods for DSMIPv6 now standardized, it is important to assess the network and computational costs of each protocol. This paper presents a technical comparison between DSMIPv6-TLS and IKEv2 for DSMIPv6 authentication and SA establishment. Experimental measurements of network transmission and processing costs for each protocol using different authentication methods were conduced in a laboratory network setup. We considered both WiFi and UMTS access technologies. In DSMIPv6-TLS the HAC is authenticated using TLS with server and mutual certificate based authentication. The authentication of the MN is done using either EAP or PSK inside the newly created TLS tunnel. In this paper we only concentrate on the EAP-MD5-based MN authentication. For IKEv2 the studied methods are PSK, EAP-MD5 and public key security using RSA with X.509 Certificates.

The structure of the rest of this paper is as follows. Section 2 presents the background of the TLS-based security framework and the IKEv2 operation with DSMIPv6. Section 3 presents the protocols and technologies, the terminology used as well as the reference scenario. Section 4 describes the experimental setup and different measurement scenarios. Section 5 describes the obtained results. Section 6 concludes this work with the discussions about the obtained results.

@&#BACKGROUND@&#

This section presents a brief overview of the TLS-based security framework for DSMIPv6. The current operation of IKEv2 for DSMIPv6 is also presented. The intention of this section is to provide a conceptual background to understand each security solution and how it is used to establish the security context for IP mobility.

The DSMIPv6-TLS architecture is illustrated in Fig. 1
                        . The architecture consists of the MN, HA and the HAC entities. The HAC is a node responsible for bootstrapping Mobile IPv6 security associations between a mobile node and one or more Home Agents. The HAC can interface with an AAA infrastructure for authentication and authorization of the MN and possibly for receiving other mobility related configuration parameters. A backend AAA server can be used to centralize AAA services with EAP authentication messages carried over RADIUS. The HA and the HAC can be implemented on the same physical node or can be split into two different network nodes. In either way, the communication between them must be secured.

The process of SA establishment between the MN and HA, and DSMIPv6 parameters bootstrapping is shown in Fig. 1. The protocol operates in the following way. (Step 1) The MN starts a TLS handshake with the HAC and secure TLS tunnel is established. (Step 2) After the TLS session is successfully created, the MN authenticates itself with the HAC either using some EAP method or PSK. These messages are transported inside the TLS tunnel using a container depicted in Fig. 2
                           . The message exchanges are always performed within the protected TLS tunnel and it’s cryptographically bound to the TLS tunnel through channel binding [6]. Our implementation uses EAP-MD5 for its simplicity. However, other EAP-based methods can be used to ensure a higher degree of security on top of the previously established TLS channel. (Step 3) If the MN authentication succeeds, the HAC sends the SA and DSMIPv6 bootstrapping parameters such as the HoA and the HAA to the MN. (Step 4) The HAC also sends the SA parameters to the HA. Once the MN-HAC bootstrapping has completed, the TLS session is terminated. After that the MN and HA have installed the SA to protect communication between them. (Step 5) Finally, the MN registers its CoA following the DSMIPv6 operation and starts data transmission.

The MN-HAC communication is carried by a simple lock-step Request–Response protocol carried by a message container transported inside the TLS tunnel. The creation of that secure tunnel is identical to the regular TLS process. In DSMIPv6-TLS the HAC is authenticated using its server certificate and public key cryptography-based authentication. Mutual authentication is also possible if a client certificate is provided. This procedure is a TLS level authentication: further, the MN must authenticate itself with the network using either EAP or PSK transported inside the newly created TLS tunnel.

The message container format is illustrated in Fig. 1. Each message consists of a fixed size header with four fields followed by the actual message content. The header consists of:
                              
                                 •
                                 3-bit protocol version field — the current version is zero (0).

5-bit reserved space — it must be zeroed by the sender and ignored when received.

8-bit identifier — this field identifies a single request–response pair. The identifier is a monotonically increasing value with an initial value of one. The value zero must not be used. The identifier is always copied from a request to a response.

16-bit length — length of the message content field in octets.

Content — this field contains the all the message information in the form of octets. The fragmentation of this field is not supported.

When the message container is transported over a connection-oriented transport protocol, it is expected that the transport protocol takes care of possible segmentation, flow control and congestion control.

The message content contains one or more TV pairs. These TVs carry the authentication and bootstrapping parameters. The message encoding is similar to the HTTP header as defined in Section 2.1 of the RFC2616 [7]. For the complete list of the currently supported TVs please refer to [6].

As per RFC6618 [6], SA between the MN and the HA must not be tied to the CoA. This means that the whole negotiation does not need to occur when the MN changes it's point of attachment. A new exchange occurs when the SA lifetime is near to an end or the HA mandates new SA establishment using a dedicated Status Code in a BA (value set to REINIT_SA_WITH_HAC). The SA lifetime must fulfill security and processing cost constraints as a fullTLS handshake implies costly mathematical operations for generating session keys and performing public key cryptography.

IKEv2 is a protocol which performs mutual authentication between two parties and establishes SA for IPsec. All IKEv2 messages are request–response pairs, and it is the responsibility of the peer sending the request to retransmit if it does not receive a timely response.

The use of IPsec for MIPv6 operation is specified in RFC4877 [4]. MIPv6 signaling is protected by IPsec and the SA that protects the signaling is established using IKEv2. For example, whenever the MN acquires a new CoA it sends a BU to the HA. If the required SA for protecting MIPv6 signaling is not present, the MN initiates an IKEv2 protocol exchange.

The IKEv2 initial exchange consists of two request/response pairs (Fig. 3
                        ). The first pair (IKE_SA_INIT) negotiates cryptographic algorithms, mutually authenticates, and establishes a session key generated by a cD–H key exchange, creating an IKE-SA. The second exchange pair (IKE_AUTH) is encrypted and integrity protected with keys generated on the first exchange. In the second exchange, peers divulge their identities and prove them using an integrity check. This integrity check is generated based on the secret associated with their identities (private key or shared secret key) and the contents of the first pair of messages in the exchange.

In the IKE_AUTH exchange, the mobile node includes the home address and the appropriate selectors in the TSi payload to negotiate IPsec security associations for protecting the Binding Update and Binding Acknowledgement messages.

After the IKE_AUTH exchange completes, the mobile node initiates CREATE_CHILD_SA exchanges to negotiate additional security associations for protecting Return Routability signaling, Mobile Prefix Discovery messages, and (optionally) payload traffic. The CREATE_CHILD_SA exchanges are also protected by IKEv2 security associations created during the IKE_SA_INIT exchange.

One of the important aspects to consider in IKEv2 operation with MIPv6 is the protocol behavior when the MN changes its point of attachment. If the MN moves and its CoA changes, the IKEv2 SA might not be valid. The IKE SA endpoints are updated on the HA if Key Management Capability (K) flag [1] is supported. If the mobile node or the Home Agent does not support this capability, and has no other means to update the addresses, then an IKEv2 exchange must be initiated to re-establish a new IKE SA which often implies IKEv2 re-authentication.IKEv2 does not have any special support for re-authentication, so it's done by creating a new IKE_SA from scratch (meaning new D–H key computations).

The reference scenario for DSMIPv6-TLS protocol is illustrated in Fig. 1. The HA and the HAC are implemented in the same physical node for this discussion. For the present study, only EAP-MD5 is considered for MN authentication using a form of user passphrase authentication on top of the previously used TLS Handshake. Moreover, the AAA functionality is also embedded in the HAC.

For IKEv2, the reference scenario is illustrated in Fig. 4
                     . In this scenario the HA plays the role of the Responder and provides the mobility services to the MN. The AAA Server is an authorization point for Mobile Services. The HA and AAA can communicate over RADIUS. For EAP authentications the AAA acts as the EAP-Server. For the present study the AAA function is embedded in the HA.

Different naming conventions are used by the TLS-based security and IKEv2. For example, the MN has the role of a client in the TLS handshake procedure (Fig. 1) while in IKEv2 authentication, it has the role of the initiator (Fig. 4). Considering a deployment where the HAC and the HA are implemented in a stand-alone node, the HAC assumes the role of the TLS Server while the HA assumes the role of the responder in IKEv2 semantics. Table 1
                         shows the role of the MN, HA and HAC according to the protocol semantics.

An experimental environment was constructed in a laboratory environment to conduct the measurements as illustrated in Fig. 5
                     . The MN accesses the network based on IEEE 802.11g and UMTS. Both networks use IPv6 for communication.

The hardware configuration for the participating nodes is as follows: the MN is a laptop with Intel Pentium Dual Core with 2.2GHz CPU clock rate. CPU clock frequency scaling was disabled so all measurements were done with full clock rate. The HA is a desktop PC with Intel P4 with 2.26GHz CPU. Both nodes run the Debian 6 Linux operation system with 2.6.32 kernel version.

The DSMIPv6-TLS daemon was developed for Linux OS. It implements the TLS-based security protocol using widespread and consolidated libraries. OpenSSL library [8] was used for TLS protocol implementation.

For IKEv2, the Strongswan version 4.5 IPsec for Linux [9] was used. Strongswan is a high performance, widespread, complete IPsec solution for Linux-based platforms.

Both DSMIPv6-TLS and Strongswan were compiled with the enabled option to use the same OpenSSL cryptographic library to prevent biased results due to different implementations of cryptographic functions.

Generally, TLS performance studies are focused on server side utilization specially when handling HTTP requests over TLS (HTTPS) [10,11]. However, when studying the DSMIPv6-TLS protocol other variables must be considered.

Delays due to network latency and message parsing have to be taken into account for cost measurements. On the other hand, the MN may roam into wireless networks that are under heavy load and thus bandwidth limitations may occur. In such scenarios, a high amount of transmitted data during the handshake can cause significant delays. Therefore, three types of metrics are considered for this work for performance comparison between DSMIPv6-TLS and IKEv2 protocols when used to secure MIPv6 traffic:
                           
                              1.
                              
                                 Amount of data transferred in terms of total messages and bytes transferred — The number of bytes transferred is important from a network cost perspective as radio resources are a concern for mobile operators.


                                 Authentication Delay — Authentication delay is important to measure user experience impacts when the MN performs re-authentication. Re-authentication is necessary when the MN is moving from one administrative domain to another and to must occur as quickly as possible.


                                 Processing cost — When processing cost comes into play, different authentication methods for both security solutions must be analyzed. Processing cost is measured by CPU utilization in MN and HA. Node utilization is important for both user and provider side. High consuming protocols could decrease the battery life of hand-held devices while on the provider side utilization must be considered for network planning and dimensioning.

TLS and IKEv2 use different types of authentication methods. Generally, the choice of one authentication method and its cryptographic parameters depends on the compromise between desired level of security and processing costs. Different authentication methods and cipher suites are analyzed for each protocol to measure the impact on authentication delay and processing cost.

In DSMIPv6-TLS there is the TLS level authentication that can be server-only (HAC only) or mutual authentication if the client certificate is also provided in the TLS Handshake. Although TLS can use mechanisms based on PSK or anonymous authentication they will not be analyzed since the DSMIPv6-TLS protocol relies on cipher suites that use server certificates and the Certificate Handshake message [6]. Therefore, only RSA public key authentication is considered. After the TLS-level authentication occurs, the MN must authenticate itself with the network. The MN authentication is done using EAP-MD5 carried inside the “eap-payload” and protected by the established TLS tunnel.

Different authentication methods are supported by the IKEv2 protocol. They are mainly based on pre-shared key, EAP methods [12] and public key authentication. Four authentication methods are considered in this analysis: PSK-based authentication, EAP-MD5, EAP-TLS and RSA public key authentication. After the IKE_SA_INIT message exchange, a shared secret between the two peers is created using D–H key exchange. The calculation of the public/private keys and the secret can take a long time depending on the D–H groups used [13]. A D–H group defines the prime used for the exchange, its size and the generator integer. To analyze the impact of such a calculation, groups 5(MODP1536) and 14(MODP2048) are studied.

The notations used in the following sections are summarized as follows and presented in Table 2
                        . The TLS with server only authentication is denoted only by DSMIPv6-TLS while TLS with mutual authentication is denoted DSMIPv6-TLS-Mutual. The client and server certificates chain length is two. The authentication methods for IKEv2 will be denoted simply as PSK, EAP-MD5, EAP-TLS and RSA-X509 throughout this work. When using D–H with Group 5 or Group14, the suffix “-MODP1536” or “-MODP2048” is added. When the D–H does not matter for the discussion, the suffix “-ANY” is used.

The cipher suites and key lengths used for measurements are summarized in Table 3
                        .

For authentication delay measurement the Wireshark [14] network protocol analyzer tool was used. Wireshark uses libcap as the packet capture library which provides 10−6
                        s resolution. As traffic access in the experiments rarely exceeds 50Mbps, timestamp precision should not be a concern [15].

The authentication delay measurements were taken as the difference between the timestamp of the first and the last captured packet of a successful authentication flow on the MN side. For the DSMIPv6-TLS case, the SA expiration was reduced in order to capture many re-authentications between the MN and the HAC. In the IKEv2 case, a SPD was installed on both MN and HA to protect traffic and signaling. The IKEv2 lifetime was set to 5s, just enough to complete the message exchange. The IKEv2 daemon installs traps on the kernel IP path such that every time a packet matches the traffic selectors for IPsec protection an IKEv2 exchange starts. More than 30 measurements were done for each authentication method for each protocol. The confidence interval for all measurements was computed with 95% confidence level.

Processing cost measurements were performed using a profiling tool called OProfile [16]. OProfile is a low-overhead, system-wide sampling profiler for Linux. OProfile was configured to take samples periodically to get time-based samples to indicate which sections of code are executed on the computer system. The processor gets interrupted at regular intervals when the hardware performance counter accumulates a certain number of events. Then the OProfile driver identifies which code had control at that moment for each CPU. The counted events used refer to CPU clock cycles when the CPU is not halted. Table 4
                         shows the profiler configuration used for the measurements.

The profiling measurements were done by sampling each authentication flow with 30 repetitions for each authentication method for each protocol. Only the authentication and network transmission processing was profiled.

This section presents the measurement results. First the amount of transferred data for each authentication flow is shown, followed by authentication delay measurements. Finally processing cost measurements are presented.

The amount of transferred data for each authentication exchange is expressed by the total number of authentication message exchanges, total number of packets (TCP for DSMIPv6-TLS and UDP for IKEv2 case) and total bytes transferred in one authentication flow as illustrated in Figs. 6–8
                        
                        
                        , respectively.

The authentication methods based on the TLS protocol (DSMIPv6-TLS and IKEv2 with EAP-TLS authentication) have the higher number of message exchanges and total transferred bytes. This is because the TLS Handshake protocol needs many message exchanges to complete, and the peer certificates must be transferred. For DSMIPv6-TLS, additional message exchanges need to be carried inside the TLS tunnel for MN authentication and DSMIPv6 bootstrapping. Those messages are transferred as encrypted application data by the Record Layer of the TLS protocol suite. Using mutual authentication for DSMIPv6-TLS does not increase the number of message exchanges as the needed information is added to the previous messages: note however, that the total bytes transferred increases. For the IKEv2 case, the EAP-TLS protocol has almost the same number of transferred messages as DSMIPv6-TLS. This should be expected as EAP-TLS uses the same TLS protocol procedures but they are transported in a different way.

The number of packets transferred by the DSMIPv6-TLS method is larger than IKEv2. However it was noted that half of the transmitted packets were TCP control messages (generally ACK packets). Those packets are very small when compared to the payload messages and do not incur a significant delay.

The number of transferred bytes in an authentication flow follows the trend of the number of packets exchanged. Note in Fig. 8 that the D–H group used in the IKEv2 first phase must be taken into account. This happens because, with higher groups, bigger keys need to be exchanged. The IKEv2 with PSK authentication largely reduces the number of messages and bytes transferred. This is because only the information about the pre-shared key is exchanged during the handshake process. For those authentication methods that use certificates (TLS and RSA), the number of transferred bytes increases because the peer certificate-chain need to be transferred. The DSMIPv6-TLS with server only authentication transfers fewer bytes as the client certificate chain don't need to be transferred. The EAP-MD5 contained slightly more transferred bytes due to EAP messages being carried inside the IKE_AUTH payloads.


                        Figs. 9 and 10
                        
                         illustrate the authentication delay measured when the MN accesses the network over WiFi and UMTS, respectively. The figures represent the mean and the symmetric 95% confidence level intervals for authentication delay measurements.

The authentication delay increases when the MN connects over UMTS due to lower transmission rates compared to WiFi. Authentication methods like EAP-TLS and DSMIPv6-TLS that have high data transmissions tend to suffer from higher delays when using low throughput connections. Because of the complex behavior of the radio channel of the UMTS scenario, the standard deviation is quite high for the measurements.

Protocols with higher number of transmitted bytes per authentication flow were expected to have greater network transmission times. However, the authentication delay figures show that the DSMIPv6-TLS exhibits lower authentication delays. Comparing Figs. 16 and 9 it can be noted that the main source of authentication delay when the MN is connected over WiFi actually comes from processing time. Fig. 11
                         shows that the authentication delay and the overall processing time for authentication exchanges are highly correlated. The processing cost analysis and the reason for the processing time increases for each protocol are presented in the following section.

The profiler samples were collected and the computational cost was derived in terms of CPU clock cycles. Figs. 12 and 13
                        
                         illustrate the derived computational costs in terms of CPU clock cycles for each authentication method during the message exchange. The figure represents the mean and the symmetric 95% confidence level intervals. The CPU clock cycles can be derived from the samples with the information provided in Table 4 and Eq. (1) as follows,
                           
                              (1)
                              
                                 
                                    
                                       n
                                       cycles
                                    
                                    =
                                    
                                       SC
                                       
                                          n
                                          CPU
                                       
                                    
                                 
                              
                           
                        where S is the number of samples measured by the profiler, nCPU
                         is the number of CPUs in the system and C is a profiler configuration parameter related to the number of CPU unhalted clock events counted for each sample (see Table 4).


                        Figs. 14 and 15
                        
                         show the number of CPU clock cycles for public key cryptography computations. As explained in Section 4 the same cryptographic library was used by both protocol implementations. Examining those figures it is possible to infer that cryptographic key computations are the main cause responsible for the processing costs. Also, the IKEv2 protocol is much more demanding than the DSMIPv6-TLS. This is mainly because of the cost of the D–H key computation process. Note the performance increase of the IKEv2 with different authentication methods when the D–H group is changed from 14 to 5. However, using a smaller key will decrease tunnel establishment time at the cost of decreased security. The EAP-TLS method has the highest cost because, additionally to compute the D–H keys to protect the IKE_AUTH messages, it must perform public key signature operations.

DSMIPv6-TLS-mutual authentication costs slightly more than DSMIPv6-TLS with single authentication as the public key signature operations must be performed on both sides.


                        Fig. 16
                         illustrates the estimated processing time at the MN and HA. The estimated processing time was computed from the number of CPU cycles. Comparing this figure and Fig. 9 it is possible to infer that processing time has a large contribution to the whole authentication delay if high speed networks is used.

This section analyzes the effect of available bandwidth on authentication delay using a simple mathematical model. With this model it is possible to validate the measurement results and also evaluate the net authentication delay based on network performance parameters like the packet transmission delay and data rate. The authentication delay for an authentication method i, given by Di
                        , is modeled as the sum of individual response times related to processing (D
                        
                           proc,i
                        ) and network delays (D
                        
                           net,i
                        ) for each message exchange between the MN and the HA/HAC.
                           
                              (2)
                              
                                 
                                    
                                       D
                                       i
                                    
                                    =
                                    
                                       D
                                       
                                          proc
                                          ,
                                          i
                                       
                                    
                                    +
                                    
                                       D
                                       
                                          net
                                          ,
                                          i
                                       
                                    
                                    .
                                 
                              
                           
                        
                     

The network delay is composed of the message transmission delay for each packet and network latency related to message forwarding and the time the packets spend on node queues waiting for transmission.
                           
                              (3)
                              
                                 
                                    
                                       D
                                       
                                          net
                                          ,
                                          i
                                       
                                    
                                    =
                                    
                                       T
                                       
                                          msg
                                          ,
                                          i
                                       
                                    
                                    +
                                    
                                       n
                                       
                                          msg
                                          ,
                                          i
                                       
                                    
                                    
                                       
                                          d
                                          /
                                          2
                                       
                                    
                                 
                              
                           
                        where n
                        
                           msg,i
                         is the number of authentication packets for an authentication flow given in Fig. 7 and d is the packet transfer round-trip time. The UMTS links have different rates for uplink and downlink. For that case the transmission time must be split into UL and DL packet transmission time.
                           
                              (4)
                              
                                 
                                    
                                       T
                                       
                                          msg
                                          ,
                                          i
                                       
                                    
                                    =
                                    
                                       
                                          n
                                          
                                             bytesUL
                                             ,
                                             i
                                          
                                       
                                       
                                          R
                                          UL
                                       
                                    
                                    +
                                    
                                       
                                          n
                                          
                                             bytesDL
                                             ,
                                             i
                                          
                                       
                                       
                                          R
                                          DL
                                       
                                    
                                 
                              
                           
                        where n
                        
                           bytesUL,i
                         and n
                        
                           bytesDL,i
                         are the total number of bytes within an authentication flow for each direction given in Fig. 7 and RUL
                         and RDL
                         are the network throughput for each direction.

The total processing time D
                        
                           proc,i
                        , can be derived from Eq. (5).
                           
                              (5)
                              
                                 
                                    
                                       D
                                       
                                          proc
                                          ,
                                          i
                                       
                                    
                                    =
                                    
                                       
                                          n
                                          
                                             cycles
                                             ,
                                             i
                                          
                                       
                                       
                                          f
                                          CPU
                                       
                                    
                                    ,
                                 
                              
                           
                        
                     

Eq. (2) is used to compute the authentication delay where the network rate (throughput) is varied. This analysis is necessary to examine the impact of large data transmissions over slow connections. Fig. 17
                         shows the effect of bandwidth limitation on the authentication delay. From the figure it's possible to conclude that the effect of low bandwidth is high for those authentication methods that require a large amount of data transmission. It can be seen that DSMIPv6-TLS performance decreases greatly for data rates lower than 384Kbps. The DSMIPv6-TLS methods out-perform all IKEv2 methods only when the network has data rates greater than 512Kbps. That's a drawback of authentication methods that use TLS, as it needs to transfer the peer certificate chain during the TLS Handshake phase.

The authentication delay is not much affected by the throughput for data rates over 512Kbps. Over that value the processing delay is predominant in the overall authentication delay.

@&#CONCLUSION@&#

The re-authentication latency is one of the issues in IPv6 mobility solutions. One of the requirements of Next Generation Networks is the support for multiple access networks while maintaining seamless connectivity. The experiment results show that significant delays may be introduced and they depend on the selected protocol for the authentication and the key exchange. Although re-authentications are not supposed to occur very often in static node scenarios that is not the case for mobile networks. Some common applications on mobile devices like e-mail clients and web browsers can provide good usability even when high delays are introduced. However, services like VoIP or video conference have strict latency constraints and will not work adequately, degrading the user experience.

One of the major sources of delay in security protocols is the processing time. The computational costs can be high depending on the authentication method used. IKEv2 uses D–H key exchange during the creation of the IKE SA. This paper shows that the key computations and the generation of safe prime numbers are time consuming and obviously depend significantly on the key size. For that reason the Group used for the D–H key exchange must be selected carefully to minimize the overall latency while maintaining an adequate level of security. The TLS-based methods also experience an increase in the computational cost when asymmetric cryptography is used. The certificate chain length is proportional to the amount of transferred data, hence it contributes directly to the number of key computations and the network transmission time.

The DSMIPv6-TLS method resulted in lower computational costs when compared to IKEv2 using a certificate chain length of two. That can result in better utilization of resources and better scalability in a mobile scenario. However, the authentication delay increases in low bandwidth scenarios due to higher amount of data necessary to complete a message exchange. On the other hand, PSK based authentication has known scaling issues in large-scale deployments.

From our experience the TLS based authentication was easiest to deploy and maintain. Furthermore, it doesn't need a special, usually kernel level, application in hosts. It usually comes with every device that has web browsing capability. IKEv2 has many possibilities of configuration and support for different deployment scenarios. However, IKEv2 has high configuration complexity and still quite often interoperability issues. It's also worth mentioning that IKEv2 implementations are highly dependent on the host operating system security, which translates to increased implementation complexity.

@&#REFERENCES@&#

