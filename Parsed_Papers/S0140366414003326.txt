@&#MAIN-TITLE@&#Stochastic barrier coverage in wireless sensor networks based on distributed learning automata

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Proposing a new approach to barrier coverage in wireless sensor network.


                        
                        
                           
                           Modeling barrier coverage with stochastic edge-weighted graph.


                        
                        
                           
                           Finding an optimal solution for the network stochastic edge-weighted coverage graph.


                        
                        
                           
                           Comparing the performance of the proposed method with the greedy and optimal methods.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Barrier coverage

Stochastic coverage graph

Wireless Sensor Networks (WSNs)

Distributed Learning Automata (DLA)

@&#ABSTRACT@&#


               
               
                  Barrier coverage is one of the most important applications of wireless sensor networks. It is used to detect mobile objects are entering into the boundary of a sensor network field. Energy efficiency is one of the main concerns in barrier coverage for wireless sensor networks and its solution can be widely used in sensor barrier applications, such as intrusion detectors and border security. In this work, we take the energy efficiency as objectives of the study on barrier coverage. The cost in the present paper can be any performance measurement and normally is defined as any resource which is consumed by sensor barrier. In this paper, barrier coverage problem is modeled based on stochastic coverage graph first. Then, a distributed learning automata-based method is proposed to find a near optimal solution to the stochastic barrier coverage problem. The stochastic barrier coverage problem seeks to find minimum required number of sensor nodes to construct sensor barrier path. To study the performance of the proposed method, computer simulations are conducted. The simulation results show that the proposed algorithm significantly outperforms the greedy based algorithm and optimal method in terms of number of network barrier paths.
               
            

@&#INTRODUCTION@&#

Nowadays, wireless sensor networks are implemented in a wide range of applications such as border surveillance and intrusion detection. Coverage is one the adapted metrics to measure the quality of service (surveillance) in networks [2]. For instance, sensor nodes can be deployed in borders of a country to detect intrusion, around forests to detect fire, both sides of gas and oil pipe lines to detect potential sabotage, around chemical factories to detect leakage and emission of chemical gases, and etc. The main goal of these applications is to detect any kind of intruders when they enter or penetrate into the network region [3]. The problem, which is referred to as barrier coverage problem, arises from the fact that sensors tend to unnecessarily cover the whole area in the network, rather than detecting only those intruders that enter or exit a network.

Basically, barrier coverage can be categorized into two classifications: weak barrier coverage and strong barrier coverage [4]. In weak barrier coverage, we only need to detect intruders moving along congruent crossing paths; and in strong barrier coverage, we need to detect intruders with arbitrary moving paths. In most of the studies in coverage problem of wireless sensor networks, sensors are supposed to have an omnidirectional sensing model, in which the sensing range of a sensor is mostly a disk model and an object can be covered or detected by a sensor if it is within the sensing range of the sensor [5,6].


                     Fig. 1
                      shows a network which can support 2-barrier coverage. It can be seen in the figure that any intruders can be detected by deployed sensor nodes. For instance, two intruders penetrating into the network can be seen in this network. We require that, in order to cover them, every crossing path be covered by deployed sensor nodes in networks. A path is a crossing path if it crosses from top to bottom [2]. In real implementation of wireless sensor networks, intruders are highly unlikely to follow such paths; a short path across the belt region is more likely to be taken.

A wireless sensor network consists of tiny nodes. Each node in network has a low computation power, battery capability, transmission power, etc. Thus, energy consumption is one of the critical issues in this kind of network. Scheduling algorithms try to schedule sensor nodes into proper status to save restricted resources in network. In barrier coverage, also most of the approaches select appropriate nodes to guarantee detection of intruders to network borders.

In this work, we model barrier coverage problem with stochastic edge-weighted graph, called it stochastic barrier coverage, and propose a novel method based on distributed learning automata to address the problem of stochastic barrier coverage in wireless sensor networks. In the proposed algorithm which is called DLASBC, each node in the network is equipped with a learning automaton which learns (schedules) best node to cover barrier path based on distributed learning automata structure. The DLASBC is developed around the modeling tool of distributed learning automata. It is established that the number of barriers in a network, gained by DLASBC, is better than that of other similar schemes. Our main purpose is to increase network barriers.

The main contributions of this paper are as following:
                        
                           •
                           Proposing a new approach to barrier coverage in wireless sensor network.

Modeling barrier coverage with stochastic edge-weighted graph.

Finding an optimal solution for the network stochastic edge-weighted coverage graph.

Comparing the performance of the proposed method with the greedy and optimal methods.

The rest of the paper is organized as following. Section 2 briefly surveys related works. Problem statement is given in Section 3. In Section 4, we overview the learning automata and distributed learning automata. The proposed method is given in Section 5. Section 6 reports the performance of our proposed network barrier monitoring scheme. Finally, Section 7 concludes the paper.

@&#RELATED WORK@&#

One of the most important issues in wireless sensor networks is coverage problem. This problem relates to the ability of a wireless network to monitor a certain area or some certain events. Coverage problem is classified into three main different types [7]; area coverage, point coverage, and barrier coverage. Area coverage: the main objective of area coverage is to monitor the whole area of the network with minimum number of sensors providing desired coverage level during the maximum lifetime of the network. Point coverage (target): the objective of point coverage is to cover a set of stationary or moving points.

Barrier coverage: barrier coverage can be considered as the coverage with the goal of minimizing the probability of undetected penetration through the barrier (sensor network). This type of coverage problem needs less number of sensors than full coverage problem.

He and Shi [32] studied sensor barriers with minimum cost in wireless sensor networks. They proposed a distributed algorithm to find maximum number of barrier coverage in wireless sensor networks. Their method works for any size of sensor nodes and any shape of field in networks, and no single node necessarily knows its exact location and only needs to communicate with its neighbors. Their proposed approach complexity is in order of O(n
                     2) where “n” is the number of deployment nodes in the network. Yang and Qiao [8] studied the barrier information coverage problem. They proposed an energy efficient method based on collaborations and information fusion between neighboring sensors to decrease the number of active nodes. However, the proposed heuristic algorithm requires the location information for all sensors and barriers, and also it may not find the optimal sensor barrier with minimum cost.

Kumar et al. [9] proposed a centralized wakeup/sleep scheme for optimally solve the problem of barrier coverage in WSNs. Mostafaei and Meybodi [10] proposed an energy efficient scheduling method based on learning automata, in which each node is equipped with a learning automaton, which helps the node to select best node to guarantee barrier coverage, at any given time. They initially executed Dijkstra’s algorithm on the static coverage graph snapshot and then proposed a learning automata based to find near optimal method find barrier paths in deployed network.

Barrier coverage with mobile sensor nodes is another type of this problem. Ban et al. [11] concentrated on the problem of how to relocate mobile sensors to construct k sensor barriers with minimum energy consumption. They modeled the problem as integer linear programming (ILP) and proved this problem is NP-Hard. Then proposed an approximation algorithm AHGB to construct one energy-efficient sensor barrier. Based on AHGB, a Divide-and-Conquer algorithm was proposed to achieve k-barrier coverage for large sensor networks. Saipulla et al. [12] studied how to efficiently improve barrier coverage using mobile sensors with limited mobility. They explored the fundamental limits of sensor mobility on barrier coverage and proposed a sensor mobility scheme that constructs the maximum number of barriers with minimum sensor moving distance. Wang et al. [13] studied how to efficiently use mobile sensors to achieve k-barrier coverage. They studied two problems under two scenarios. First, when only the stationary sensors have been deployed, what is the minimum number of mobile sensors required to form k-barrier coverage? Second, when both the stationary and mobile sensors have been pre-deployed. They introduced a novel concept of weighted barrier graph (WBG) and proved that determining the minimum number of mobile sensors required to form k-barrier coverage is related with finding k vertex-disjoint paths with the minimum total length on the WBG.

In [14] authors tried to achieve barrier coverage in sensor scarcity case by dynamic sensor patrolling. They designed a periodic monitoring scheduling (PMS) algorithm in which each point along the barrier line is monitored periodically by mobile sensors. Based on the insight from PMS, they proposed a coordinated sensor patrolling (CSP) algorithm to further improve the barrier coverage, where each sensor’s current movement strategy is decided based on the past intruder arrival information. Shibo et al. [15] studied deterministic sensor deployment to ensure barrier coverage in wireless sensor networks. They presented a condition under which line-based deployment is suboptimal, pointing to the advantage of curve-based deployment. By constructing a contracting mapping, they identified the characteristics for a deployment curve to be optimal and proposed sensor deployment algorithms for the optimal deployment curve by introducing a new notion of distance-continuous.

Saipulla et al. [16] studied barrier coverage with line based deployment in wireless sensor networks. They compared their proposed approach with Poisson model. In [17] authors proposed two centralized algorithms and a simple distributed one to guarantee barrier coverage in sensor networks. They used integer linear programming method to propose their algorithms.

In [18] authors introduced the notion of trespassers’ favorite paths (TFP) and provided a tool that could be used to forecast the detection probability of a surveillance network in such a network with TFPs. This way, the detection probability is reduced to the geometric line intersection problem using bisection by which the boundary conditions of intruder trajectories for the border area and the favorite region are determined. The line intersection problem is solved using tools from the integral geometry and geometric probability. The effect of the favorable region on the detection quality under different conditions is calculated using probabilistic models.

In [19] Clouqueur et al. discussed the detection capability of a sensor network. In this study, authors defined the path exposure phenomenon to quantify the detection capability of a sensor network. They defined the exposure of a target as the probability of detecting the target traversing along a minimum detection path. Their sensor model is based on the power of the signal emitted by the target at a distance. The detection probability is calculated according to the distance between the sensor node and the target. A sensor deployment strategy is proposed to reach the desired minimum exposure.

Authors [20] studied the weak k-barrier coverage problem. They derived a lower bound for the probability of weak k-barrier coverage with and without considering the border effect, respectively. Moreover, they proposed a simple but effective algorithm for accurately determining whether a deployed belt region is weakly k-barrier covered, and if not, what percentage of the region is not weakly covered by k-barrier.

In [21] authors investigated strong barrier coverage using directional sensors, where sensors have arbitrarily tunable orientations to provide good coverage. They investigated the problem of finding appropriate orientations of directional sensors capable of providing strong barrier coverage. They started with one-dimension strong barrier coverage problem, and proposed a polynomial time algorithm to achieve strong barrier coverage with minimum number of required directional sensors.

In this section some definitions, assumptions, and requirements necessary for proposed method to guarantee barrier coverage in network is introduced. First, the following assumptions are proposed.


                        
                           
                              (1)
                              We consider a rectangular, two dimensional, belt region with a size of L
                                 ×
                                 W and N sensor nodes randomly deployed in this belt region with a high enough density to build a sensor barrier path.

We assume a binary sensing and communication model, i.e. two sensor nodes are able to communicate if their distance is less than 
                                    
                                       
                                          
                                             R
                                          
                                          
                                             tx
                                          
                                       
                                    
                                  which is transmission range of each node, and each sensor is able to monitor a circular area of radius Rs
                                 ; also, we assume Rtx
                                 
                                 ⩾2Rs
                                 .

Intrusion to network is assumed to occur from top to bottom of region in the deployed network.

We assume that each sensor node knows its own location. The location information can be known through a localization mechanism or GPS.

Then the following definitions are presented.


                        
                           
                              (1)
                              Ordinary belt [22]:

A belt B is called an ordinary belt (with respect to a sensor network deployed over B) if it satisfies the following condition: For two deployed sensor nodes within B, if their sensing areas, A1 and A2, overlap, then (A1∪
                        A2)∩
                        B is a connected sub-region in B.
                           
                              (2)
                              Crossing path and orthogonal crossing path [22]:

A path is called a crossing path if it crosses from one parallel boundary to the other. A crossing path is orthogonal if its length is equal to the belt width (w). Fig. 2
                        a shows an orthogonal crossing path in network.

To simplify the presentation, a belt region is assumed from left to right, and two parallel boundaries are referred to as the top and the bottom boundaries. Furthermore, intrusion movement is assumed to occur from top to bottom of the belt. Fig. 2(a) illustrates these definitions in a rectangular belt. The cross paths in Fig. 2b cannot be 1-covered, and hence the network cannot provide barrier coverage.
                           
                              (3)
                              Coverage graph

A coverage graph of a sensor network with N sensor nodes is constructed as following. Let G(N)=(V; E): The set V consisting of a vertex corresponding to each sensor node. An edge exists between two sensor nodes if their sensing regions overlap in the deployment region R. In addition, it has two virtual nodes, s and t to correspond to the left and right boundaries. An edge exists between s or t if the sensing region of node overlaps with the left boundary (or right boundary) of the region. A graph called coverage graph.
                           
                              (4)
                              Stochastic edge-weighted graph

A stochastic edge-weighted graph (G) is defined by a triple 〈V,
                        E,
                        W〉 where V
                        ={v
                        1,
                        v
                        2,…,
                        v
                        n} represents the sensor node set, E
                        ={e
                        1,e2,…,
                        em
                        }⊆
                        V
                        ×
                        V represents the edge-set, and W
                        ={w
                        1,
                        w
                        2,…,
                        wm
                        } represents the set of weights (lengths) associated with the edge-set where positive variable wi
                         is the weight of edge ei
                        
                        ∊
                        E.

In stochastic edge-weighted graph G 〈V,
                        E,
                        W〉, let T
                        ={τ
                        1,
                        τ
                        2,
                        τ
                        3,…} represent the set of possible barrier path of the stochastic graph G; we also suppose that 
                           
                              
                                 
                                    
                                       
                                          ψ
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    τ
                                 
                              
                           
                         denotes the expected length of barrier path 
                           
                              
                                 
                                    τ
                                 
                                 
                                    i
                                 
                              
                           
                        . The stochastic barrier path (SBP) is defined as a stochastic barrier path with the shortest expected length. That is, stochastic barrier path 
                           
                              
                                 
                                    τ
                                 
                                 
                                    ∗
                                 
                              
                              ∈
                              T
                           
                         is the stochastic barrier path if and only if 
                           
                              
                                 
                                    
                                       
                                          ψ
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    τ
                                 
                              
                              =
                              min
                              
                                 
                                    τ
                                 
                                 
                                    i
                                 
                              
                              ∈
                              T
                              {
                              
                                 
                                    
                                       
                                          ψ
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              }
                           
                        .

A barrier path also should satisfy the following requirements:
                           
                              (1)
                              A barrier path should cover the sensing area of network in which any intruders cannot penetrate into network.

Sensor nodes in a barrier path should be able to transfer monitored data outside via sensor networks to by mutli-hop communications network.

A barrier path could be described on G(N). If a path from s to t could be found on G(N), which also satisfies requirement 1 and 2. And if multiple paths which connect s and t exist and also they do not share any sensor nodes, i.e. node-disjoint paths, then they also satisfy the requirement 3. As the information of intruder detection should be transmitted as fast as possible, one more requirement is needed: minimum hop count from any sensor to sink node, which a shortest path requirement.
                           
                              (3)
                              A barrier path is a shortest path in coverage graph G(N).


                              A network N provides k-barrier coverage iff there exist k node-disjoint paths between the two virtual nodes s and t in G(N) 
                              [2].

Intrusion detection by a barrier path should be transfers via multi-hop communications as soon as possible. Hence a barrier path is a shore test path in network from s to t. Our algorithm subject is to find shortest stochastic barrier paths with distributed learning automata.

An ‘automaton’ is a self-operating machine or a mechanism that responds to a sequence of instructions in a certain way, so as to achieve a certain goal. The term ‘learning’ refers to the process of acquiring knowledge from the execution of a simple machine/code (Automaton) and using the gained knowledge to decide on actions to be taken in the future. LA has three main component; Automaton, the Environment, and the Reward/Penalty structure.

The Automaton refers to the self-learning system. The medium in which this machine functions is called the Environment. The Automaton continuously performs actions on the Environment, the Environment, in turn, responds to the actions. The environment response may be either positive or negative and serves feedback to the automaton, which, in effect, leads to the Automaton either getting rewarded or penalized.

LA finds applications in optimization problems in which an optimal action needs to be determined from a set of actions. It should be noted that in this context, learning might be of best help only when there are high levels of uncertainty in the system in which the automaton operates. In systems with low levels of uncertainty, LA-based learning may not be a suitable tool of choice [8].

The Automaton in our case is, typically, defined by a quintuple {A, B, Q, F, G}, where [1]:
                           
                              (i)
                              
                                 A
                                 ={α
                                 1,
                                 α
                                 2,…,
                                 αr
                                 } is the set of outputs or actions, and α(t) is the action chosen by the automaton at any instant t.


                                 B is the set of inputs to the automaton: 
                                    
                                       {
                                       
                                          
                                             β
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             β
                                          
                                          
                                             2
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             β
                                          
                                          
                                             r
                                          
                                       
                                       }
                                    
                                 . β(t) is the input at any instant t, while the set B can be finite or infinite.


                                 
                                    
                                       Q
                                       =
                                       {
                                       
                                          
                                             q
                                          
                                          
                                             1
                                          
                                       
                                       (
                                       t
                                       )
                                       ,
                                       
                                          
                                             q
                                          
                                          
                                             2
                                          
                                       
                                       (
                                       t
                                       )
                                       ,
                                       …
                                       ,
                                       
                                          
                                             q
                                          
                                          
                                             s
                                          
                                       
                                       (
                                       t
                                       )
                                       }
                                    
                                  is the set of finite states, where q(t) denotes the state of the automaton at any instant t.


                                 F(·,·): Q
                                 ×
                                 B
                                 →
                                 Q is a mapping in terms of the state and input at the instant t, so, 
                                    
                                       q
                                       (
                                       t
                                       +
                                       1
                                       )
                                       =
                                       F
                                       [
                                       q
                                       (
                                       t
                                       )
                                       ,
                                       β
                                       (
                                       t
                                       )
                                       ]
                                    
                                 .


                                 G(·): is a mapping G: Q
                                 →
                                 A, and is called the output function. Depending on the state at a particular instant, this function determines the output of the automaton at the same instant as: 
                                    
                                       α
                                       (
                                       t
                                       )
                                       =
                                       G
                                       [
                                       q
                                       (
                                       t
                                       )
                                       ]
                                    
                                 .

The environment, E, typically, refers to the medium in which the automaton functions. Mathematically, an environment can be abstracted by a triple {A, C, B}. A, B, and C are defined as following [1]:
                           
                              (i)
                              
                                 
                                    
                                       A
                                       =
                                       {
                                       
                                          
                                             α
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             α
                                          
                                          
                                             2
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             α
                                          
                                          
                                             r
                                          
                                       
                                       }
                                    
                                  represents a finite input set,


                                 
                                    
                                       B
                                       =
                                       {
                                       
                                          
                                             β
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             β
                                          
                                          
                                             2
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             β
                                          
                                          
                                             r
                                          
                                       
                                       }
                                    
                                  is the output set of the environment, and


                                 
                                    
                                       C
                                       =
                                       {
                                       
                                          
                                             c
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             c
                                          
                                          
                                             2
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             c
                                          
                                          
                                             r
                                          
                                       
                                       }
                                    
                                  is a set of penalty probabilities, where element ci
                                 
                                 ∊
                                 C corresponds to an input action αi
                                 .

The process of learning is based on a learning loop involving the two entities: the RE and the LA as described in Fig. 3
                        . In the process of learning, the LA continuously interacts with the environment to process responses to its various actions. Finally, through sufficient interactions, the LA attempts to learn the optimal action offered by the RE. The actual process of learning is represented as a set of interactions between the RE and the LA.

We now provide a few important definitions used in the field of LA. Given an action probability vector P(t) at time ‘t’, the average penalty is defined as [8]
                        
                           
                              (1)
                              
                                 M
                                 (
                                 t
                                 )
                                 =
                                 E
                                 [
                                 β
                                 (
                                 t
                                 )
                                 |
                                 P
                                 (
                                 t
                                 )
                                 ]
                                 =
                                 Pr
                                 [
                                 β
                                 (
                                 t
                                 )
                                 =
                                 1
                                 |
                                 P
                                 (
                                 t
                                 )
                                 ]
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          r
                                       
                                    
                                 
                                 Pr
                                 [
                                 β
                                 (
                                 t
                                 )
                                 =
                                 1
                                 |
                                 α
                                 (
                                 t
                                 )
                                 =
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                                 ]
                                 ×
                                 Pr
                                 [
                                 α
                                 (
                                 t
                                 )
                                 =
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                                 ]
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          r
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 t
                                 )
                              
                           
                        
                     

The average penalty for the ‘pure-chance’ automaton is given by [8]:
                           
                              (2)
                              
                                 
                                    
                                       M
                                    
                                    
                                       0
                                    
                                 
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       r
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          r
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 n
                                 )
                              
                           
                        As 
                           
                              t
                              →
                              ∞
                           
                        , if the average penalty M(t)<
                        M
                        0, at least asymptotically, the automaton is generally considered to be better than the pure-chance automaton. E[M(t)] is given by [1]
                        
                           
                              (3)
                              
                                 E
                                 [
                                 M
                                 (
                                 t
                                 )
                                 ]
                                 =
                                 E
                                 {
                                 E
                                 [
                                 β
                                 (
                                 t
                                 )
                                 |
                                 P
                                 (
                                 t
                                 )
                                 ]
                                 }
                                 =
                                 E
                                 [
                                 β
                                 (
                                 t
                                 )
                                 ]
                              
                           
                        
                     

In our work, we deal with the variable structure stochastic automata (VSSA). VSSA are the ones in which the state transition probabilities are not fixed. In such automata, the state transitions or the action probabilities themselves are updated at every time instant using a suitable scheme. The transition probabilities and the output function in the corresponding Markov chain vary with time, and the action probabilities are updated on the basis of the input. VSSA depend on random number generators for their implementation. The action chosen is dependent on the action probability distribution vector, which is, in turn, updated based on the reward/penalty input that the automaton A variable-structure automaton is defined by the quadruple {α, β, P, T} in which α
                        
                        =
                        {α
                        1,⋯, αn
                        } represents the action set of the automata, β
                        
                        =
                        {β
                        1,⋯, βn
                        } represents the input set, P
                        
                        =
                        {P
                        1,⋯, Pn
                        } represents the action probability set, and finally p(n+
                        1)=
                        T[α(n), β(n), p(n)] represents the learning algorithm. This automaton operates as follows. Based on the action probability set p, automaton randomly selects an action αi
                        , and performs it in the environment. After receiving the environment’s reinforcement signal, automaton updates its action probability set based on Eq. (3) for favorable responses, and Eq. (4) for unfavorable ones.
                           
                              (4)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                   p
                                                
                                                
                                                   i
                                                
                                             
                                             (
                                             n
                                             +
                                             1
                                             )
                                             =
                                             
                                                
                                                   p
                                                
                                                
                                                   i
                                                
                                             
                                             (
                                             n
                                             )
                                             +
                                             a
                                             (
                                             1
                                             -
                                             
                                                
                                                   p
                                                
                                                
                                                   i
                                                
                                             
                                             (
                                             n
                                             )
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                
                                                   p
                                                
                                                
                                                   j
                                                
                                             
                                             (
                                             n
                                             +
                                             1
                                             )
                                             =
                                             (
                                             1
                                             -
                                             a
                                             )
                                             
                                                
                                                   p
                                                
                                                
                                                   j
                                                
                                             
                                             (
                                             n
                                             )
                                             
                                             ∀
                                             
                                             j
                                             ,
                                             j
                                             
                                             ≠
                                             
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                   p
                                                
                                                
                                                   i
                                                
                                             
                                             (
                                             n
                                             +
                                             1
                                             )
                                             =
                                             (
                                             1
                                             -
                                             b
                                             )
                                             
                                                
                                                   p
                                                
                                                
                                                   i
                                                
                                             
                                             (
                                             n
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                
                                                   p
                                                
                                                
                                                   j
                                                
                                             
                                             (
                                             n
                                             +
                                             1
                                             )
                                             =
                                             
                                                
                                                   b
                                                
                                                
                                                   r
                                                   -
                                                   1
                                                
                                             
                                             (
                                             1
                                             -
                                             b
                                             )
                                             
                                                
                                                   p
                                                
                                                
                                                   j
                                                
                                             
                                             (
                                             n
                                             )
                                             
                                             ∀
                                             
                                             j
                                             ,
                                             j
                                             
                                             ≠
                                             
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        
                     

In these two equations, a and b are reward and penalty parameters, respectively. For a
                        =
                        b, learning algorithm is called LR
                        
                        –
                        
                           P
                        ,
                           1
                           Linear Reward-Penalty.
                        
                        
                           1
                         for b
                        ≪
                        a, it is called LRεP
                        ,
                           2
                           Linear Reward epsilon Penalty.
                        
                        
                           2
                         and for b=
                        0, it is called LR–I
                        
                        
                           3
                           Linear Reward Inaction.
                        
                        
                           3
                        . For more information the reader may refer to [1]. Some applications of LA in WSNs can be found in [10,23–29].

A distributed learning automaton [30] is a network of automata which collectively cooperate to solve a particular problem. Formally, a DLA with n learning automata can be defined by a graph (A,
                        E), where A
                        ={A
                        1, A
                        2,…,
                        Az
                        } is the set of automata and 
                           
                              E
                              ⊂
                              A
                              ×
                              A
                           
                         is the set of edges in the graph in which an edge (i,
                        j) corresponds to action aj
                         of automaton Ai
                        . Let action probability vector for learning automaton Aj
                         be represented by pl
                         where a component of pl
                         denotes the probability of choosing action a, that is, the probability of choosing edge (j,
                        m).

The operation of a DLA can be described as following: At first, the root automaton randomly chooses one of its outgoing edges (actions) according to its action probabilities and activates the learning automaton at the other end of the selected edge. The activated automaton also randomly selects an action which results in activation of another automaton. The process of choosing the actions and activating the automata is continued until a leaf automaton (an automaton which interacts to the environment) is reached. The chosen actions, along the path induced by the activated automata between the root and leaf, are applied to the random environment. The environment evaluates the applied actions and emits a reinforcement signal to the DLA. The activated learning automata along the chosen path update their action probability vectors on the basis of the reinforcement signal by using the learning schemes. The paths from the unique root automaton to one of the leaf automata are selected until the probability with which one of the paths is chosen is close enough to unity. Each DLA has exactly one root automaton which is always activated, and at least one leaf automaton which is activated probabilistically.

An example of DLA is given in Fig. 4
                        , in which every automaton has two actions. If automaton A1 selects action α3, then automaton A3 will be activated. Activated automaton A3 chooses one of its actions which in turn activates one of the automata connected to A3. At any time only one automaton in the network will be activated.

In this section, we propose a distributed learning automaton based algorithm to find barriers in a wireless sensor networks. At first, each node in the network senses the environment and broadcasts an advertisement packet to its neighbors. After this stage, each node can locally determine its neighbors and, as a result, coverage graph of network is built.

Each node in our proposed method has the following data structures; node ID, actions probability vector P
                     ={p
                     1(n),
                     p
                     2(n),…,
                     pr
                     (n)}, outgoing neighbors list, and incoming neighbors list. If a neighbor node is located in the left hand of a node which means x coordination of this node is less than current node, it is inserted in incoming neighbors list and the same process is done for outgoing neighbors’ list. We use the Euclidean distance to compute it.

In our algorithm, the network graph plays the role of a random environment for the DLA. The action of a DLA is a sequence of actions that depicts a barrier in the network graph. The environment uses the sampled length of this barrier to produce its response. Based on environment response, whether the response is favorable or unfavorable, the actions along the traversed barrier are rewarded or penalized.

For constructing coverage graph in our proposed algorithm we used model in [2]. In this coverage graph of network, each node is a learning automaton and each outgoing edge of this node is one of the actions ({α
                     1,
                     α
                     2,…,
                     αr
                     }) of this learning automaton that is selected from outgoing neighbors’ list. pi
                     (n) represents the probability of choosing action αi
                      at the nth time instant. All elements of the action probability vector of a particular sensor node are initialized to have a value equal to one divided by the outdegree of that sensor node. For example, if a node has three outgoing edges (three possible actions) and the action probability vector for that node initially is {0.33,0.33,0.33}. Then, at the stage k, learning automaton of source node (left-hand), virtual node S chooses one of its actions, say action αi
                     . This action activates automaton Ai
                     . The process of choosing an action and activating an automaton is repeated until learning automaton of destination node (right-hand), virtual node T, is reached or for some reason moving along the edges of the network graph is not.

In the suggested approach, the corresponding edge is added to the barrier path once an action is chosen by a learning automaton. The length linked with the selected sensor node is also added to the total length of the barrier path. Since the length linked with the graph edge is assumed to be a positive, a special barrier path length may experience a different length at each stage of proposed method. Therefore, the proposed algorithm deals with the average length of the barrier paths rather than their length at each stage. Hence, at the end of stage k, the average length of the selected barrier path is computed as following:
                        
                           (6)
                           
                              
                                 
                                    
                                       
                                          ψ
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    k
                                 
                              
                              =
                              
                                 
                                    1
                                 
                                 
                                    
                                       
                                          k
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                    
                                    
                                       
                                          
                                             k
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    ψ
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    k
                                 
                              
                           
                        
                     
                  

We assume that barrier path τi
                      is selected at stage k. The average length of barrier path τi
                      until stage k is computed where ki
                      denotes the number of times barrier path τi
                      which has been constructed until stage k,
                        
                           (7)
                           
                              
                                 
                                    ψ
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       ∀
                                       ℓ
                                       (
                                       a
                                       ,
                                       b
                                       )
                                       ∈
                                       
                                          
                                             τ
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    ψ
                                 
                                 
                                    ℓ
                                    (
                                    a
                                    ,
                                    b
                                    )
                                 
                                 
                                    j
                                 
                              
                           
                        
                     
                     τi
                      denotes the length of the jth sample of barrier path τi
                     , which is defined as
                        
                           (8)
                           
                              
                                 
                                    ψ
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       ∀
                                       ℓ
                                       (
                                       a
                                       ,
                                       b
                                       )
                                       ∈
                                       
                                          
                                             τ
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    ψ
                                 
                                 
                                    ℓ
                                    (
                                    a
                                    ,
                                    b
                                    )
                                 
                                 
                                    j
                                 
                              
                           
                        
                     where 
                        
                           
                              
                                 ψ
                              
                              
                                 ℓ
                                 (
                                 a
                                 ,
                                 b
                                 )
                              
                              
                                 j
                              
                           
                        
                      denotes the weight of edge 
                        
                           ℓ
                           (
                           a
                           ,
                           b
                           )
                        
                      as a part of the jth sample taken from barrier path 
                        
                           
                              
                                 τ
                              
                              
                                 i
                              
                           
                        
                     .

To guarantee the convergence of the proposed approach to the optimal solution (i.e., barrier coverage), the average weight of the selected barrier path has to be compared with the dynamic threshold, Tk
                     , at each stage. At stage k>
                     1, the dynamic threshold is calculated as
                        
                           (9)
                           
                              
                                 
                                    T
                                 
                                 
                                    k
                                 
                              
                              =
                              
                                 
                                    1
                                 
                                 
                                    r
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       r
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          ψ
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    k
                                 
                              
                           
                        
                     where r denotes the number of all barrier paths explored until stage k.

At the end of each stage, the length of the selected barrier path is compared with a dynamic threshold, Tk
                     . Learning automata of all activated nodes in barrier path reward their actions if the length of selected barrier path is less than or equal to dynamic threshold. Otherwise they penalize the taken actions. Each learning automata updates action probability vector by using LR
                     
                     _
                     
                        I
                      learning algorithm as described over variable action learning automata in Section 4.3, and at the end of each stage, the disabled actions must be enabled again. The process of building barrier path, along with updating action probability vector, continues until the choice probability of the constructed barrier path is greater than a certain threshold T which is called stop threshold. In our approach, the choice probability of a barrier path is defined as the product of the probability of choosing the selected nodes. The selected barrier path just before the algorithm stops is our chosen barrier path in coverage graph with minimum number of nodes to do surveillance operation in boundaries of deployed network. Fig. 5
                      shows the pseudo code of proposed algorithms to compute barrier path.

In this section we prove the convergence of DLASBC. The method that is used for proving Theorem 1 is similar to method given in [1,31]. This theorem concerns the convergence of DLABSC to the optimal solution when each learning automaton updates its action-set by a linear reward-inaction reinforcement scheme. The result of theorem1 represents that, by choosing a proper learning rate, the choice probability of the optimal solution converges to one as much as possible.
                           Theorem 1
                           
                              Let 
                              
                                 
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    )
                                 
                               
                              be the probability of travelling barrier path 
                              
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          i
                                       
                                    
                                 
                               
                              at stage k. If 
                              
                                 
                                    
                                       
                                          q
                                       
                                       
                                          ̲
                                       
                                    
                                    (
                                    k
                                    )
                                 
                               
                              is updated according to DLASBC, then there exists a learning rate a∗(ɛ)∊(0,1) (for every ɛ>0) so that for all a∊(0,a∗), we have Prob[limk→∞ qi(k)=1]⩾1−ɛ
                           

The convergence proof of this algorithm is briefly outlined as following steps. Firstly, it is proved that the penalty probability of each barrier path converges to the constant value of the final penalty probability if k is selected large enough. This property is shown in Lemma 1. Then, it is shown that the probability of choosing the barrier path with the minimum expected weight is a sub-Martingale process for large values of k, and so the changes in the probability of constructing the shortest barrier path are always non-negative. Lemmas 2 and 3 show this result. Finally, the convergence of DLASBC to the barrier path with the shortest expected length is proved by using Martingale convergence theorems. Therefore, the following lemmas need to be proved before stating the proof of the Theorem 1.□


                              If barrier path τi is penalized with probability ci(k) at stage k 
                              
                                 
                                    (
                                    i
                                    .
                                    e
                                    .
                                    
                                       
                                          c
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    )
                                    =
                                    prob
                                    [
                                    
                                       
                                          
                                             
                                                ψ
                                             
                                             
                                                ‾
                                             
                                          
                                       
                                       
                                          
                                             
                                                τ
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                    >
                                    
                                       
                                          T
                                       
                                       
                                          k
                                       
                                    
                                    ]
                                    ]
                                    )
                                 
                              
                              , and 
                              
                                 
                                    
                                       
                                          Lim
                                       
                                       
                                          k
                                          
                                             
                                                ∞
                                             
                                             
                                                ‾
                                             
                                          
                                       
                                    
                                    
                                       
                                          c
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    )
                                    =
                                    
                                       
                                          c
                                       
                                       
                                          i
                                       
                                    
                                    ∗
                                 
                              
                              . Then, for every ɛ∊(0,1) and k>k(ɛ) we have,
                              
                                 
                                    
                                       prob
                                       [
                                       |
                                       
                                          
                                             c
                                          
                                          
                                             i
                                          
                                       
                                       ∗
                                       -
                                       
                                          
                                             c
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       k
                                       )
                                       |
                                       >
                                       0
                                       ]
                                       <
                                       ε
                                    
                                 
                              
                           

Let 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          i
                                       
                                       
                                          ∗
                                       
                                    
                                 
                               denote the final value of probability 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    )
                                 
                               when k is large enough. Using weak law of large numbers, we conclude that
                                 
                                    
                                       
                                          
                                             Lim
                                          
                                          
                                             k
                                             →
                                             ∞
                                          
                                       
                                       prob
                                       [
                                       |
                                       
                                          
                                             c
                                          
                                          
                                             i
                                          
                                          
                                             ∗
                                          
                                       
                                       -
                                       
                                          
                                             c
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       k
                                       )
                                       |
                                       >
                                       ε
                                       ]
                                       →
                                       0
                                    
                                 
                              Hence, for every 
                                 
                                    ε
                                    ∈
                                    (
                                    0
                                    ,
                                    1
                                    )
                                 
                              , there exists 
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ∗
                                       
                                    
                                    (
                                    ε
                                    )
                                    ∈
                                    (
                                    0
                                    ,
                                    1
                                    )
                                 
                               and 
                                 
                                    k
                                    (
                                    ε
                                    )
                                    <
                                    ∞
                                 
                               so that for all 
                                 
                                    a
                                    <
                                    
                                       
                                          a
                                       
                                       
                                          ∗
                                       
                                    
                                 
                               and 
                                 
                                    k
                                    >
                                    k
                                    (
                                    ε
                                    )
                                 
                               we have 
                                 
                                    prob
                                    [
                                    |
                                    
                                       
                                          c
                                       
                                       
                                          i
                                       
                                       
                                          ∗
                                       
                                    
                                    -
                                    
                                       
                                          c
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    )
                                    |
                                    >
                                    0
                                    ]
                                    <
                                    ε
                                 
                              , and the proof of Lemma 1 is completed.□


                              Let 
                              
                                 
                                    
                                       
                                          c
                                       
                                       
                                          j
                                       
                                    
                                    (
                                    k
                                    )
                                    =
                                    prob
                                    [
                                    
                                       
                                          
                                             
                                                ψ
                                             
                                             
                                                ‾
                                             
                                          
                                       
                                       
                                          
                                             
                                                τ
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                    (
                                    k
                                    +
                                    1
                                    )
                                    >
                                    
                                       
                                          T
                                       
                                       
                                          k
                                       
                                    
                                    ]
                                    
                                    and
                                    
                                    
                                       
                                          d
                                       
                                       
                                          j
                                       
                                    
                                    (
                                    k
                                    )
                                    =
                                    1
                                    -
                                    
                                       
                                          c
                                       
                                       
                                          j
                                       
                                    
                                    (
                                    k
                                    )
                                 
                               
                              be the probability of penalizing and rewarding barrier path τj (for all j=1, 2,…,r) at stage k , respectively. If q(k) evolves according to DLASBC, then the conditional expectation of qi(k) is defined as
                           

Since the reinforcement scheme that is used to update the probability vectors in DLASBC is LR
                              
                              −
                              
                                 I
                               , at each stage k, the probability of choosing the barrier path τi
                               (i.e., qi
                              (k)) remains unchanged with probability cj
                              (k) (for all j
                              =1,2,…,
                              r), when the selected barrier path τj
                               is penalized by the random environment. On the other hand, when the selected barrier path τj
                               is rewarded, the probability of choosing the edges of the barrier path τi
                               which are in the selected barrier path τj
                               increases by a given learning rate as that of the other edges decreases. To illustrate the proof of the lemma in more detail, we prove it for the shortest barrier path of the graph shown in Fig. 6
                              a. As shown in this figure, graph G has 5 sensor nodes with source node S1 and destination node S5 and 7 barrier paths as following: τ
                              1
                              ={S1,
                              S2,
                              S3,
                              S5}, τ
                              2
                              ={S1,
                              S2,
                              S4,
                              S3,
                              S5}, τ
                              3
                              ={S1,
                              S2,
                              S4,
                              S5}, τ
                              4
                              ={S1,
                              S3,
                              S5}, τ
                              5
                              ={S1,
                              S5}, τ
                              6
                              ={S1,
                              S4,
                              S3,
                              S5}, τ
                              7
                              ={S1,
                              S4,
                              S5}. It is also assumed that 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          1
                                       
                                    
                                 
                               is the barrier path with the shortest expected length of the graph given in Fig. 6b.□

After simplifying all terms in the right hand side of the equation above and some algebraic manipulations, we have
                           
                              
                                 E
                                 [
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 k
                                 +
                                 1
                                 )
                                 |
                                 q
                                 (
                                 k
                                 )
                                 ]
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          7
                                       
                                    
                                 
                                 
                                    
                                       q
                                    
                                    
                                       j
                                    
                                 
                                 (
                                 k
                                 )
                                 [
                                 
                                    
                                       c
                                    
                                    
                                       j
                                    
                                 
                                 (
                                 k
                                 )
                                 
                                    
                                       q
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 k
                                 )
                                 +
                                 
                                    
                                       d
                                    
                                    
                                       j
                                    
                                 
                                 (
                                 k
                                 )
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          ℓ
                                          (
                                          m
                                          ,
                                          n
                                          )
                                          ∈
                                          
                                             
                                                τ
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       ϑ
                                    
                                    
                                       m
                                    
                                    
                                       n
                                    
                                 
                                 (
                                 k
                                 )
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       ϑ
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                   (
                                                   k
                                                   +
                                                   1
                                                   )
                                                   =
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                   (
                                                   k
                                                   )
                                                   +
                                                   a
                                                   (
                                                   l
                                                   -
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                   (
                                                   k
                                                   )
                                                   )
                                                
                                                
                                                   ℓ
                                                   (
                                                   m
                                                   ,
                                                   n
                                                   )
                                                   ∈
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                   (
                                                   k
                                                   +
                                                   1
                                                   )
                                                   =
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                   (
                                                   k
                                                   )
                                                   ·
                                                   a
                                                   (
                                                   1
                                                   -
                                                   a
                                                   )
                                                
                                                
                                                   ℓ
                                                   (
                                                   m
                                                   ,
                                                   n
                                                   )
                                                   ∉
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        and hence the proof of lemma is in place.
                           Lemma 3
                           
                              The increment in the conditional expectation of qi(k) is always non-negative and subject to q(k) which is updated according to DLASBS. That is, Δqi(k)>0.
                           

Proof. Define
                           
                              
                                 Δ
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 k
                                 )
                                 =
                                 E
                                 [
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 k
                                 +
                                 1
                                 )
                                 |
                                 q
                                 (
                                 k
                                 )
                                 ]
                                 -
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 k
                                 )
                                 .
                              
                           
                        
                     

From Lemma 2, we have
                           
                              (10)
                              
                                 Δ
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 k
                                 )
                                 =
                                 E
                                 [
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 k
                                 +
                                 1
                                 )
                                 |
                                 q
                                 (
                                 k
                                 )
                                 ]
                                 -
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 k
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          r
                                       
                                    
                                 
                                 
                                    
                                       q
                                    
                                    
                                       j
                                    
                                 
                                 (
                                 k
                                 )
                                 
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                j
                                             
                                          
                                          (
                                          k
                                          )
                                          
                                             
                                                q
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          k
                                          )
                                          +
                                          
                                             
                                                d
                                             
                                             
                                                j
                                             
                                          
                                          (
                                          k
                                          )
                                          
                                             
                                                
                                                   ∏
                                                
                                                
                                                   ℓ
                                                   (
                                                   m
                                                   ,
                                                   n
                                                   )
                                                   ∈
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                ϑ
                                             
                                             
                                                m
                                             
                                             
                                                n
                                             
                                          
                                          (
                                          k
                                          )
                                       
                                    
                                 
                                 -
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 k
                                 )
                              
                           
                        where
                           
                              
                                 
                                    
                                       ϑ
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                   (
                                                   k
                                                   +
                                                   1
                                                   )
                                                   =
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                   (
                                                   k
                                                   )
                                                   +
                                                   a
                                                   (
                                                   l
                                                   -
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                   (
                                                   k
                                                   )
                                                   )
                                                
                                                
                                                   ℓ
                                                   (
                                                   m
                                                   ,
                                                   n
                                                   )
                                                   ∈
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                   (
                                                   k
                                                   +
                                                   1
                                                   )
                                                   =
                                                   
                                                      
                                                         P
                                                      
                                                      
                                                         n
                                                      
                                                      
                                                         m
                                                      
                                                   
                                                   (
                                                   k
                                                   )
                                                   ·
                                                   a
                                                   (
                                                   1
                                                   -
                                                   a
                                                   )
                                                
                                                
                                                   ℓ
                                                   (
                                                   m
                                                   ,
                                                   n
                                                   )
                                                   ∉
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    p
                                 
                                 
                                    n
                                 
                                 
                                    m
                                 
                              
                              (
                              k
                              +
                              1
                              )
                           
                         is the probability of choosing edge 
                           
                              ℓ
                              (
                              m
                              ,
                              n
                              )
                           
                         at stage k . Since the probability with which the barrier paths are constructed, the term rewarded or penalized is defined as the product of the probability of choosing the edges along the barrier paths. Then we have
                           
                              
                                 Δ
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 k
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          r
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          ℓ
                                          (
                                          m
                                          ,
                                          n
                                          )
                                          ∈
                                          
                                             
                                                τ
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∏
                                                
                                                
                                                   ℓ
                                                   (
                                                   m
                                                   ,
                                                   n
                                                   )
                                                   ∈
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                c
                                             
                                             
                                                n
                                             
                                             
                                                m
                                             
                                          
                                          (
                                          k
                                          )
                                          ·
                                          
                                             
                                                
                                                   ∏
                                                
                                                
                                                   ℓ
                                                   (
                                                   m
                                                   ,
                                                   n
                                                   )
                                                   ∈
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                p
                                             
                                             
                                                n
                                             
                                             
                                                m
                                             
                                          
                                          (
                                          k
                                          )
                                          ·
                                          
                                             
                                                
                                                   ∏
                                                
                                                
                                                   ℓ
                                                   (
                                                   m
                                                   ,
                                                   n
                                                   )
                                                   ∈
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                d
                                             
                                             
                                                n
                                             
                                             
                                                m
                                             
                                          
                                          (
                                          k
                                          )
                                          ·
                                          
                                             
                                                
                                                   ∏
                                                
                                                
                                                   ℓ
                                                   (
                                                   m
                                                   ,
                                                   n
                                                   )
                                                   ∈
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                ϑ
                                             
                                             
                                                m
                                             
                                             
                                                n
                                             
                                          
                                          (
                                          k
                                          )
                                       
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          ℓ
                                          (
                                          m
                                          ,
                                          n
                                          )
                                          ∈
                                          
                                             
                                                τ
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                              
                           
                        where 
                           
                              
                                 
                                    ϑ
                                 
                                 
                                    m
                                 
                                 
                                    n
                                 
                              
                              (
                              k
                              )
                           
                         is defined as given in Eq. (10) and 
                           
                              
                                 
                                    c
                                 
                                 
                                    n
                                 
                                 
                                    m
                                 
                              
                              (
                              k
                              )
                           
                         is the probability of penalizing edge 
                           
                              ℓ
                              (
                              m
                              ,
                              n
                              )
                           
                         at stage k and 
                           
                              
                                 
                                    d
                                 
                                 
                                    n
                                 
                                 
                                    m
                                 
                              
                              =
                              1
                              -
                              
                                 
                                    c
                                 
                                 
                                    n
                                 
                                 
                                    m
                                 
                              
                              (
                              k
                              )
                           
                        .
                           
                              
                                 Δ
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 k
                                 )
                                 =
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          ℓ
                                          (
                                          m
                                          ,
                                          n
                                          )
                                          ∈
                                          
                                             
                                                τ
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 E
                                 [
                                 
                                    
                                       p
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 +
                                 1
                                 )
                                 |
                                 
                                    
                                       p
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 ]
                                 -
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          ℓ
                                          (
                                          m
                                          ,
                                          n
                                          )
                                          ∈
                                          
                                             
                                                τ
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                              
                           
                        
                     

The equality above can be rewritten as
                           
                              (11)
                              
                                 Δ
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 k
                                 )
                                 ≥
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          ℓ
                                          (
                                          m
                                          ,
                                          n
                                          )
                                          ∈
                                          
                                             
                                                τ
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 E
                                 [
                                 
                                    
                                       p
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 +
                                 1
                                 )
                                 |
                                 
                                    
                                       p
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 ]
                                 -
                                 
                                    
                                       p
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 =
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          ℓ
                                          (
                                          m
                                          ,
                                          n
                                          )
                                          ∈
                                          
                                             
                                                τ
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 Δ
                                 
                                    
                                       p
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                              
                           
                        and
                           
                              
                                 Δ
                                 
                                    
                                       p
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 =
                                 a
                                 ·
                                 
                                    
                                       p
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          s
                                          ≠
                                          n
                                       
                                       
                                          
                                             
                                                r
                                             
                                             
                                                m
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       s
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 ·
                                 (
                                 
                                    
                                       c
                                    
                                    
                                       s
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 -
                                 
                                    
                                       c
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 )
                              
                           
                        
                        qi
                        (k)(ɛ)∊(0,1) for all 
                           
                              
                                 
                                    q
                                 
                                 
                                    ̲
                                 
                              
                              ∈
                              
                                 
                                    S
                                 
                                 
                                    r
                                 
                                 
                                    0
                                 
                              
                              ,
                           
                         where 
                           
                              
                                 
                                    S
                                 
                                 
                                    r
                                 
                              
                              =
                              {
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                              
                              (
                              k
                              )
                              :
                              0
                              ≤
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                              
                              (
                              k
                              )
                              ≤
                              1
                              ;
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 
                                    r
                                 
                              
                              
                                 
                                    q
                                 
                                 
                                    i
                                 
                              
                              (
                              k
                              )
                              =
                              1
                           
                         and 
                           
                              
                                 
                                    S
                                 
                                 
                                    r
                                 
                                 
                                    0
                                 
                              
                           
                         denotes the interior of 
                           
                              
                                 
                                    S
                                 
                                 
                                    r
                                 
                              
                           
                        . Hence, 
                           
                              
                                 
                                    p
                                 
                                 
                                    n
                                 
                                 
                                    m
                                 
                              
                              (
                              k
                              )
                              (
                              ε
                              )
                              ∈
                              (
                              0
                              ,
                              1
                              )
                           
                         for all m, n. since edge 
                           
                              ℓ
                              (
                              m
                              ,
                              n
                              )
                              ∈
                              
                                 
                                    τ
                                 
                                 
                                    i
                                 
                              
                           
                         is the edge with shortest expected length which can be chosen by automaton Am
                        , it is shown that 
                           
                              
                                 
                                    c
                                 
                                 
                                    s
                                 
                                 
                                    
                                       
                                          m
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              
                              -
                              
                                 
                                    c
                                 
                                 
                                    n
                                 
                                 
                                    
                                       
                                          m
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              
                              >
                              0
                           
                         for all s
                        ≠
                        n. It continues from Lemma 1 that for large value of k, 
                           
                              
                                 
                                    c
                                 
                                 
                                    s
                                 
                                 
                                    m
                                 
                              
                              (
                              k
                              )
                              -
                              
                                 
                                    c
                                 
                                 
                                    n
                                 
                                 
                                    m
                                 
                              
                              (
                              k
                              )
                              >
                              0
                           
                        . So, we deduce that for large value of k, the right hand side of the equation above consists of the non-negative quantities, so we have
                           
                              
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          ℓ
                                          (
                                          m
                                          ,
                                          n
                                          )
                                          ∈
                                          
                                             
                                                τ
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 a
                                 ·
                                 
                                    
                                       p
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          s
                                          ≠
                                          n
                                       
                                       
                                          
                                             
                                                r
                                             
                                             
                                                m
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       s
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 ·
                                 (
                                 
                                    
                                       c
                                    
                                    
                                       s
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 -
                                 
                                    
                                       c
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 )
                                 ≥
                                 0
                              
                           
                        
                     

And from Eq. (11), we have
                           
                              
                                 Δ
                                 
                                    
                                       q
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 k
                                 )
                                 ≥
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          ℓ
                                          (
                                          m
                                          ,
                                          n
                                          )
                                          ∈
                                          
                                             
                                                τ
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 a
                                 ·
                                 
                                    
                                       p
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          s
                                          ≠
                                          n
                                       
                                       
                                          
                                             
                                                r
                                             
                                             
                                                m
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       s
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 ·
                                 (
                                 
                                    
                                       c
                                    
                                    
                                       s
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 -
                                 
                                    
                                       c
                                    
                                    
                                       n
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 k
                                 )
                                 )
                              
                           
                        which completes the proof of this lemma.
                           Corollary 1
                           
                              The set of unit vectors in 
                              
                                 
                                    
                                       
                                          S
                                       
                                       
                                          r
                                       
                                    
                                    -
                                    
                                       
                                          S
                                       
                                       
                                          r
                                       
                                       
                                          0
                                       
                                    
                                 
                               where 
                                 
                                    
                                       
                                          S
                                       
                                       
                                          r
                                       
                                    
                                    =
                                    {
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    )
                                    :
                                    0
                                    ≤
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    )
                                    ≤
                                    1
                                    ;
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          r
                                       
                                    
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    )
                                    =
                                    1
                                 
                               
                              forms the set of all absorbing barriers of the Markov process 
                              
                                 
                                    
                                       
                                          {
                                          
                                             
                                                q
                                             
                                             
                                                ̲
                                             
                                          
                                          (
                                          k
                                          )
                                          }
                                       
                                       
                                          k
                                          ≥
                                          1
                                       
                                    
                                 
                              .


                              Lemma 3 implicitly proves that {q(k)} is a sub-Martingale. Using Martingale theorems and the fact that {q(k)} is a non-negative and uniformly bounded function, it is concluded that 
                                 
                                    
                                       
                                          Lim
                                       
                                       
                                          k
                                          →
                                          ∞
                                       
                                    
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    )
                                 
                               converges to q
                              ∗ with probability one. Hence, from Eq. (11), it can be seen that 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    +
                                    1
                                    )
                                    
                                    ≠
                                    
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    )
                                 
                               with a nonzero probability if and only if 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    )
                                    ∉
                                    {
                                    0
                                    ,
                                    1
                                    }
                                 
                              , and 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          ̲
                                       
                                    
                                    (
                                    k
                                    +
                                    1
                                    )
                                    =
                                    
                                       
                                          q
                                       
                                       
                                          ̲
                                       
                                    
                                    (
                                    k
                                    )
                                 
                               with probability one if and only if 
                                 
                                    
                                       
                                          q
                                       
                                       
                                          ∗
                                       
                                    
                                    ∈
                                    {
                                    0
                                    ,
                                    1
                                    }
                                 
                               where 
                                 
                                    
                                       
                                          Lim
                                       
                                       
                                          k
                                          →
                                          ∞
                                       
                                    
                                    
                                       
                                          q
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    k
                                    )
                                    =
                                    
                                       
                                          q
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              , and hence the proof is completed.□

Define
                           
                              
                                 
                                    
                                       ϕ
                                    
                                    
                                       i
                                    
                                 
                                 [
                                 x
                                 ,
                                 q
                                 ]
                                 =
                                 
                                    
                                       
                                          
                                             e
                                          
                                          
                                             -
                                             
                                                
                                                   xq
                                                
                                                
                                                   i
                                                
                                             
                                             /
                                             a
                                          
                                       
                                       -
                                       1
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             -
                                             x
                                             /
                                             a
                                          
                                       
                                       -
                                       1
                                    
                                 
                              
                           
                        where x
                        >0 is to be chosen, and 
                           
                              
                                 
                                    ϕ
                                 
                                 
                                    i
                                 
                              
                              [
                              x
                              ,
                              q
                              ]
                              ∈
                              C
                              (
                              
                                 
                                    S
                                 
                                 
                                    r
                                 
                              
                              )
                           
                         satisfies the boundary conditions above.

To evaluate the performance of the proposed method, several experiments have been conducted via simulations, and the results of proposed algorithm are compared with greedy method. This method simply tries to find barrier path from node S to T by greedy approach until no more barrier paths can be found. In our simulations, we consider a fixed deployment scenario in a rectangular region of 200m×150m. We assume that N (number of randomly scattered nodes) is varying between 100 and 500 with step of 50 nodes and R=
                     2r, where R and r are the transmission and sensing ranges of each sensor node, respectively. We also assume that sensing ranges of all sensor nodes are equal. The number of barrier paths that are produced by proposed approach is used as the performance metric.

We run DLASBC approach on small size network and study performance of the proposed approach in terms of barrier paths and investigate how much barrier paths can be gained by increasing sensor nodes in deployed network. For this experiment purpose, we suppose the simulation parameters as following: sensing range is set to 20(m) and 40(m); the network size varies from 80 to 160 steps by 20 sensor nodes. The calculated number of barrier paths by proposed algorithm is shown in Fig. 7
                        . It can be seen from the figure that as we increase the number of sensor nodes, the network’s barrier paths increase accordingly, and barrier paths increase with increasing number of nodes considerably.

Then, we study the effect of the sensing ranges of the sensor nodes on the barrier paths in the proposed scheduling mechanism. We set the number of the sensors to 100 and 200 sensor nodes, and also, sensing range of each node varies from 15(m) to 35(m) steps by 5(m). The results of this experiment are given in Fig. 8
                        . This figure demonstrates that the barrier paths increase as the sensing ranges of the sensor nodes expand. With increasing the sensing radius of each node in network, fewer sensors will be needed to monitor the barrier paths, and hence, more sensor nodes in the network can switch to the sleep state, saving their energies for future rounds.

In Fig. 9
                        , we perform the same simulation for large network size. To do this simulation, we set sensing range of each node to 30m, and the number of deployed nodes varies from 100 to 500 steps with 100 sensor nodes in each. We compared Fig. 7 with Fig. 9 and observed that even the gained barrier paths of each curve is very close to the others.

This experiment is conducted to study the performance of DLASBC in terms of barrier size. The results of DLASBC are compared with greedy method and with the optimal (centralized) algorithm in term of barrier paths [9]. To generate the random graphs, a number of vertices are uniformly distributed in a two-dimensional simulation area of 
                           
                              200
                              
                              m
                              ×
                              150
                              
                              m
                           
                         in a random manner. We assume that a link is established between every two vertices if the distance between them is no longer than R. In this experiment, we set network size to 300 nodes whose sensing range varies between 15 and 40m with 5m in each step. It can be seen from Fig. 10
                         that the proposed algorithm yields much more barrier than greedy method and it also have similar results as [9] . This is due to the fact that in proposed method, learning automata of each node help nodes to find the shortest path between two given nodes.

This experiment is repeated to study the performance of DLASBC in terms of the barrier size with different sensor nodes. We set sensing range to 30m. Network size varies from 100 to 400 steps with 50 nodes in each step. It can be seen from the Fig. 11
                         that by increasing network size, the proposed algorithm can find more barrier paths in deployed network in comparison with greedy approach. Our approach also have reached to optimal method performance in [9].

In this experiment, we study the impact of the learning rate, used in the proposed algorithm, on the number of barriers. In learning automata-based algorithms, the obtained result converges to the optimal solution as the learning rate decreases (converges to zero). This is due to the fact that a learning automata-based algorithm with a small enough learning rate is capable of exploring all possible solutions, and so finds the best one. To this end, we consider the following learning rates: 0.01, 0.1, 0.2, and 0.4. Additional simulation parameters are as following: sensing range is set to 30(m) and the network size varies from 100 to 400 nodes with a 50 nodes increment at each step. The result of this experiment, which is given in Fig. 12
                        , shows that by decreasing the learning rate, the number of barriers increases. In other words, increasing the (computational and communicational) complexity of the learning phase of the proposed algorithm (by decreasing the learning rate) is not a waste of resources, since this results in a much better scheduling of the activity states of the sensor nodes, which consequently results in an increase in the network barrier.

@&#CONCLUSION@&#

In this paper, a new distributed learning automaton based algorithm was proposed to solve stochastic barrier coverage problem in wireless sensor networks. This work explored how to use distributed learning automata to improve barrier coverage of wireless sensor networks after deployment. We used stochastic coverage graph to model this problem and proposed a novel method based on distributed learning automata for this problem. In this approach, each node in the deployed network is equipped with a learning automaton. Distributed learning automata were used to find a near optimal solution to the stochastic barrier coverage problem of wireless sensor networks. To show the performance of the proposed approach, simulation experiments were conducted, and the obtained results show that our algorithm can effectively improve the number of barrier paths in a wireless sensor network under a different range of deployment nodes.

@&#REFERENCES@&#

