@&#MAIN-TITLE@&#Routing-policy aware peering for large content providers

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We investigate the impact of routing policies and peering policies on the selection of peering connections for content providers.


                        
                        
                           
                           We formulate the policy-aware peering problem, and prove that the problem is NP-complete.


                        
                        
                           
                           We provide a heuristic algorithm to solve policy-aware peering problem.


                        
                        
                           
                           We examine the lower bound of peering connections to cover end users in today’s Internet.


                        
                        
                           
                           We investigate 5 large content providers, and find that adding as little as 3–5 new peering connections can enhance their connection to end users significantly.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Content providers

Peering connection

Peering relationships

Routing policy

@&#ABSTRACT@&#


               
               
                  Large content providers, such as Google, Yahoo, and Microsoft, aim to directly connect with consumer networks and place the content closer to end users. Exchanging traffic directly between end users and content providers can reduce the cost of transit services. However, direct connection to all end users is simply not feasible. Content providers by-and-large still rely on transit services to reach the majority of end users. We argue that routing policies are an important factor in considering the selection of ISPs for content providers. Therefore, determining which ISP to peer or use as a transit becomes a key question for content providers. In this paper, we formulate the policy-aware peering problem, in which we determine not only which ISP to connect with, but also the kind of peering agreement to establish. We prove that such a policy-aware peering problem is NP-complete, and propose a heuristic algorithm to solve the problem. Further, we perform a large-scale measurement study of the peering characteristics of five large content providers, and evaluate the existing peering connections deployed by the content providers. Our measurement results show that changing the existing peering agreements or adding as little as 3–5 new peering connections can enhance the connection between content providers and end users significantly.
               
            

@&#INTRODUCTION@&#

The rapid growth of large content providers, such as Google, Yahoo, and Microsoft, is changing not only the inter-domain traffic patterns but also the hierarchical topology of the Internet. Content providers are using the Internet to deliver videos, TV shows, movies, sports and live programs to mobile phones, televisions, tablets and computers. A recent measurement study [39] has shown that the majority of the inter-domain traffic is between large content providers and consumer networks. At the same time, the Internet topological hierarchy becomes flatter and denser due to the inter-connection strategies employed by large content providers [17,28,39]. Furthermore, large content providers (i) have built their own global backbones, (ii) directly peer with consumer networks, (iii) move the content closer to the end-users (through content delivery networks for example), and (iv) adopt various peering policies in order to ensure small latency in delivering content. For example, Google moves the majority of its video and search traffic away from transit providers to its own backbone infrastructure and directly connects with consumer networks [39].

However, direct connection to all customer networks is simply not feasible. Large content providers, while still relying on transit services of large Internet Service Providers (ISPs) to have global reachability, may select some access networks to connect directly with end users in order to provide better content delivery. For example, Netflix, a television and movie streaming content provider, agreed to pay Comcast millions of dollars annually to deliver its content directly [54]. Netflix previously connected to Comcast via its service provider, Cogent Communications. The new connection to Comcast’s network will speed up video streaming to Netflix customers. Therefore, determining which providers to connect to and the corresponding contractual agreement of the connections becomes a key question for large content providers.

In this paper, we formulate the problem of peer selection for large content providers. A content provider can choose to connect to an ISP using its transit service for global reachability. Alternatively, the content provider can connect to an ISP to reach its customers only. Our goal is to determine the ISPs that a content provider should connect with and the kind of peering agreement that the content provider should establish with the selected ISPs.

On the surface, our problem might be solved with content placement algorithms [9,21,34,40,41,47,51,58]. However, the fact that routing policies and peering agreements are taken into account in the selection of peers makes the problem much more challenging. Different from the content placement problem, we determine not only who to peer with but also the peering agreement to establish. We further consider routing policy in quantifying the distance between the content providers and an end user. It is well known that an AS may take a longer path rather than the shortest path, possibly as a result of the routing policies [46,56,59]. We prove that such a policy-aware peering problem is NP-complete, and propose a heuristic algorithm to solve the problem.

To evaluate our heuristic algorithm, we first perform a large-scale measurement study of peering characteristics of five large content providers. We then evaluate our heuristic algorithm in the context of current Internet topology. We derive the minimum number of peering ISPs with different peering agreements to cover today’s Internet. We investigate the existing peering agreements employed by the five large content providers. We find that it is still possible for those content providers to cover their clients within the same distance if they maintain less transit service agreements. In addition, our measurement shows that adding as little as 3–5 new peering connections can enhance the connection between content providers and end users significantly.

The rest of the paper is organized as follow: In Section 2, we introduce routing policies and peering relationships guided by commercial relationships. In Section 3 we formally define the policy-aware content placement problems. In Section 4, we propose a heuristic algorithm to address the problems. In Section 5, we perform a large-scale measurement study of peering characteristics of five large content providers, calculate the minimum number of peering ISPs for today’s Internet, and compare the peering selection return by our algorithm with that of the content providers. Section 6 presents the related work. We conclude the paper in Section 7 with a summary.

@&#BACKGROUND@&#

In this section, we introduce the concepts and terms used throughout the paper: content providers, routing policies and peering connections. Finally, we use two examples to demonstrate the impact of routing policies and peering relationships on the selection of peering locations.

An Internet content provider is an organization, such as Google or Facebook, which supplies content on the Web, such as web pages, video, and movies. It is likely that a content provider uses one or several content delivery networks (CDNs), for example Akamai, to deliver its content. A CDN is a shared distributed system deployed across the Internet for delivering content to end-users with high availability and high performance. CDNs can help content providers reduce the cost because CDNs offload the traffic from the content provider’s infrastructure. Content providers typically subscribe to one or several CDNs services. Then, content is replicated over several mirrored servers, which are closer to end users. In order to meet its Service Level Agreement (SLA) for its customers, CDN providers usually cooperate with each other so that content providers can utilize services of multiple CDNs to deliver contents.

While CDNs help to improve the content delivery, there is a recent trend [39] for large content providers to bring content closer to end-users. For example, in 2011, Google peered with Puerto Rico Bridge Initiative (AS23114) to improve speeds and costs in Puerto Rico [36]. Before peering with PRBI, the traffic from Puerto Rico had to be routed to some transit ISPs at the US mainland, which can cause congestion on these transport links. By peering with PRBI in Miami, Google was able to reduce the amount of Internet traffic traversing these ISPs so that millions of residents of the island have a better user experience at a lower cost [36]. Furthermore, a content provider can also directly connect with access networks to deliver the content to end users. For example, Netflix established an agreement with Comcast for a direct connection [54].

Content providers typically adopt an open peering strategy to assess potential peering relationships [3,43,48]. Under the open peering strategy, content providers are willing to peer with any AS that requests a peering relationship. For example, Google’s peering strategy requires at least 100Mbps peak traffic to establish a bilateral BGP peering over an IXP. If an AS with less than 100Mbps traffic can peer via the route servers at any participating IXP [2]. In addition, Google recommends that peers advertise all their prefixes over all peering sessions with Google.

Content providers usually establish a connection with an ISP at Internet Exchange Points (IXPs) or a private peering facilities. Note that while the traffic exchange might be free of charge, it is also possible to establish paid peering agreements between content providers and ISPs. For example, Netflix pays Comcast for its direct connection [54]. However, even under paid peering, the connection is only used to exchange traffic between Netflix and Comcast’s customers. That is, Netflix does not use Comcast to reach the global Internet.

Routing policy typically conforms to the commercial relationships between Autonomous Systems (ASes). A customer pays its provider for connectivity to the rest of the Internet. A pair of peers agree to exchange traffic between their respective customers free of charge. A mutual-transit agreement allows a pair of administrative systems to provide connectivity to the rest of the Internet for each other. The commercial contractual relationships between ASes translate into the export rule that an AS does not transit traffic between two of its providers and peers, which is called no-valley routing policy [24].

In addition to the no-valley routing policy, an AS typically chooses a customer route over a route via a provider or peer since the AS does not have to pay its customer to carry traffic or maintain a traffic volume ratio between the traffic from and to a peer. This policy is referred to as prefer-customer routing policy. For example, one of the peering policies adopted by content providers is that no transit or third party routes are allowed to be announced to the content providers. In other words, all routes exchanged between a content provider and the peering AS must be the peering AS’s and the peering AS’s customers’ routes.

In this paper, the following definitions are used to represent content providers’ peering strategy. A peering connection is a logical connection between a content provider and an ISP. A content provider can establish two kinds of peering connection with an ISP. A peering-to-peering connection means that the content provider and the ISP agree to exchange their own and their customers’ routes. We refer to the connection as local connection. A transit connection allows the content provider to access the rest of the Internet and advertises the content provider’s prefixes to the rest of the Internet, through the ISP. We refer to the connection as global connection.

We use two examples to demonstrate the impact of routing policy and peering relationships on the content placement decision. To simplify our examples, we determine a peering location and the peering relationship such that the AS level distance between end users and a content provider is minimized, which resembles the well-known facility location problem. In the next section, we will formulate a cost function to take in account other factors. Note that both examples are real scenarios derived from our dataset, which will be presented in Section 5.

The first example demonstrates the effect of routing policies on the placement of peering connections. In Fig. 1
                        (a), Google (AS15169) purchases transit service from an ISP (AS5568). Without considering the routing policy employed at each AS, the shortest AS path from every AS to the Google AS is less or equal to 3 AS hops. For example, the shortest AS path from AS56666 to Google is path (56666 2118 9002 15169). However, AS2118 has two paths to reach the Google AS: path (2118 9002 15169), and path (2118 3269 5568 15169). Suppose that AS2118 employs prefer-peer-over-provider routing policy. The second path is preferable than the first one. As a result, the shortest policy-conforming path from AS56666 to Google becomes (56666 2118 3269 5568 15169), which is inflated by one AS hop.

Now let us consider the case if Google negotiates a global connection (a transit connection) with AS3269 instead of AS5568, as shown in Fig. 1(b). The shortest path from AS56666 to Google is path (56666 2118 3269 15169), and the shortest paths from other ASes to Google are less than or equal to 3 AS hops. Peering with AS3269 results in a shorter AS path length than peering with AS5568.

The second example is used to show the impact of peering relationships on the selection of a peering connection. As shown in Fig. 2
                        (a), Google has a local connection with AS39912 such that only AS39912 and its customers can access Google via this connection. Without considering routing policy, the shortest AS path from every AS to Google is less or equal to 2 AS hops. For example, the shortest AS path from AS41336 to Google is path (41336 39912 15169). But, the path is a valley path because it traverses two peer-to-peer links. The valid path between AS41336 and AS15169 is path (41336 35549 3356 15169). Therefore, the policy-conforming AS path from AS41336 to Google is inflated by one AS hop.

Let us suppose that the Google AS still keeps this peering connection, but changes the peering relationship to a global connection. As a result, the shortest path from every AS to Google is less or equal to 2 AS hops as shown in Fig. 2(b).

From the above examples, we believe that routing policies and peering relationship are important factors in the selection of peering locations. The shortest-path distance alone might not be a good metric to evaluate a peering connections because a longer policy-conforming path can be used to deliver the contents.

In this section, we formalize our content peering model and the peering problem. We formulate the problem as follow: for a content provider, the problem is to determine: (i) a set of peering ISPs, and (ii) the peering relationships between the content provider and its peering ISP. We provide an analysis of the complexity of the problem, which is NP-complete. Finally, we use an example to demonstrate this problem.

First, we model the network infrastructure as an annotated AS graph 
                           
                              G
                              =
                              (
                              V
                              ,
                              E
                              )
                              ,
                           
                         which is a partially directed graph whose nodes represent ASes and edges are classified into provider-to-customer, and peer-to-peer edges. Fig. 3
                         shows an example of an annotated AS graph. Note that the nodes in an AS graph could represent all the ASes in the Internet or a subset of the ASes, for example, the ASes in Puerto Rico. In addition, the graph could be an IXP level graph, for example, including the participating ASes in IXPs.

Without loss of generality, we assume that a content provider can peer/connect with only a subset of ASes, 
                           
                              A
                              ⊆
                              V
                           
                         (due to the physical presence/coverage of the ISPs), and refer to these nodes as candidate peering ISPs. For example, we can consider the participant ASes in IXPs as the candidate peering ISPs. A subset k of ISPs 
                           
                              Φ
                              ⊆
                              A
                           
                         are finally selected to peer with a content provider. We use 
                           
                              S
                              ⊆
                              V
                           
                         to denote a set of end users. In this paper, set 
                           S
                         contains all stub ASes that do not have any customers in the AS graph. Each stub AS must be covered by at least one content provider via either a global connection or a local connection. As a result, the AS graph is partitioned into two sets: a set of candidate peering ISPs 
                           A
                         and a set of clients 
                           S
                        .

Second, we model the peering relationship. Suppose that the k peering connections consist of a set of global connections Φg
                         and local connections Φl
                        , or 
                           
                              
                                 |
                                 Φ
                                 |
                                 =
                                 |
                              
                              
                                 Φ
                                 g
                              
                              
                                 |
                                 +
                                 |
                              
                              
                                 Φ
                                 l
                              
                              
                                 |
                                 ≤
                                 k
                              
                           
                        . A transit peering relationship implies a global connection, while a peer-to-peer relationship implies a local connection. Due to the large cost of establishing a transit peering relationship, content providers typically limit the number of global connections. Thus, in this paper, when we determine the peering relationships between a content provider and its peering ISPs, we consider at most p global connections that are allowed to build, where p is a given number.

Finally, we model the cost function that is used to represent the total cost of implementing the peering connections. The cost function consists of the content service cost, which represents the cost of delivering the content from a content provider to an end user, and facility cost. The content service cost is an important factor in determining a peering connection. For example, Google can offer Google Global Cache (GCC) for the network with greater than 1 Gbps peak Google traffic [2]. Facebook requires a minimum of 50 Mbps of traffic volume destined to the peering network [1]. Like previous work [27,49,55], we define a cost cij
                         for delivering each unit of content demand from content provider i to a client j. We denote the amount of content demand of a node j delivered via peering connection i as sij
                        . Thus, the total service cost incurred at a peering connection is referred to as cijsij
                        . The facility cost is the cost of allocating ui
                         units of capacity for peering connection i, which is denoted as fi
                        (ui
                        ).

Finally, for each pair of nodes (i, j) ∈ V × V, we use d(i, j) to denote the path length of the shortest policy-conforming AS path from node i to node j. We will present a method to infer the shortest policy-conforming AS path length in the next section. Note that the distance can be computed at the AS level or at the router level. In this paper, the distance is computed using the AS path length and the relationship among ASes.

Policy-conforming paths do not obey the symmetric distance properties and the triangle inequality. In a graph, suppose that we use d(x, y) to represent the distance from node x to node y. The symmetric distance property means the distance from x to y is the same as the distance from y to x, or 
                           
                              d
                              (
                              x
                              ,
                              y
                              )
                              =
                              d
                              (
                              y
                              ,
                              x
                              )
                           
                        . The triangle inequality means that the distance from x to z via y is at least as great as from x to z directly, or 
                           
                              d
                              (
                              x
                              ,
                              z
                              )
                              ≤
                              d
                              (
                              x
                              ,
                              y
                              )
                              +
                              d
                              (
                              y
                              ,
                              z
                              )
                           
                        . Previous work has shown that without the triangle inequality or symmetric distance, it is extremely hard to approximate an NP-complete problem within any factor [6,15,30].

For example, suppose that in Fig. 4
                         Google connects AS7473 and maintains a global connection so that it can cover more end users. As a result, AS9752 has two paths: path (9752 4755 7473 15169) and path (9752 17439 55410 7473 15169) to access Google. Since both the paths are learned from its providers, AS9752 picks the shorter one, path (9752 4755 7473 15169), to send its content request to Google. On the other hand, AS7473 uses a longer path (7473 55410 17439 9752) to deliver the content to the end users at AS9752 due to prefer-customer routing policy. Thus, the path from Google to the end users is different from the one from the end users to Google, which is also called an asymmetric routing. Asymmetric routing implies that the symmetric distance property is not satisfied. In addition, the best path from AS7473 to AS9752 is path (7473 55410 17439 9752) with 3 AS hops. The best path from AS7473 to AS4755 and the one from AS4755 to AS9752 have 1 AS hop length, respectively. Thus, the path from AS7473 to AS9752 does not obey the triangle inequality property.

In this paper, we consider the AS path length from a content provider to end users as the distance. The reason is that the dominant traffic type across the Internet today is video traffic according to recent work [39,48]. Video content delivery tends to be asymmetric. That means, a large portion of Internet traffic consists of video contents pulled from content providers to video-streaming customers, and very little traffic is from end users to content providers.

Hence, we define a p-global k-connection problem as follows.


                        p-global k-connection Problem. 
                        Given a set of candidate peering ISPs,
                        
                           A
                         
                        and a set of stub ASes, 
                           
                              S
                              ,
                           
                         
                        and three non-negative integers k, p, and Dc, select a subset
                        
                           
                              Φ
                              ⊆
                              A
                           
                         
                        of ISPs such that the sum of service and facility costs is minimized:
                        
                           
                              
                                 
                                    
                                       
                                       
                                          minimize
                                       
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   ∈
                                                   Φ
                                                
                                             
                                             
                                                f
                                                i
                                             
                                             
                                                (
                                                
                                                   u
                                                   i
                                                
                                                )
                                             
                                             +
                                             
                                                ∑
                                                
                                                   i
                                                   ∈
                                                   Φ
                                                   ,
                                                   j
                                                   ∈
                                                   S
                                                
                                             
                                             
                                                s
                                                
                                                   i
                                                   j
                                                
                                             
                                             
                                                c
                                                
                                                   i
                                                   j
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             subject
                                             
                                             to
                                          
                                       
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   j
                                                   ∈
                                                   S
                                                
                                             
                                             
                                                s
                                                
                                                   i
                                                   j
                                                
                                             
                                             ≤
                                             
                                                u
                                                i
                                             
                                             ,
                                             ∀
                                             i
                                             ∈
                                             Φ
                                             ,
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                       
                                          
                                             d
                                             
                                                (
                                                i
                                                ,
                                                j
                                                )
                                             
                                             ≤
                                             
                                                D
                                                c
                                             
                                             ,
                                             ∀
                                             i
                                             ∈
                                             Φ
                                             ,
                                             j
                                             ∈
                                             S
                                             ,
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                       
                                          
                                             |
                                             Φ
                                             |
                                             ≤
                                             k
                                             ,
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                       
                                          
                                             
                                                |
                                             
                                             
                                                Φ
                                                g
                                             
                                             
                                                |
                                                ≤
                                                p
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The first constraint restricts that the service rendered by each peering connection should not exceed its total available capacity. The second constraint ensures that the minimum path distance from each peering connection to the stub ASes is bounded by Dc
                        . The third and the last constraints restrict the number of peering connections and the peering relationships.

This problem can be described as a sub-problem of capacitated 
                           
                              k
                              −
                              c
                              e
                              n
                              t
                              e
                              r
                           
                         problem [38], which is known to be NP-hard. We need to find an approximation solution to solve the problem. However, finding an approximation solution for the p-global k-connection problem is challenging. The reason is because that policy-conforming paths do not obey the symmetric distance properties and the triangle inequality, which has been shown in previous section. Thus, there is no direct way to apply exiting solutions to solve the p-global k-connection problem. For example, the polynomial time approximation algorithms proposed in previous work [38] cannot be used to solve this problem.

In order to find an approximation solution, we convert the problem to the same problem based on a bipartite graph. The bipartite graph consists of a set of candidate peering ISPs and a set of clients. As a result, we do not need to consider the triangle inequality and symmetric distance properties for the bipartite graph.

Next, we will prove that the p-global k-connection problem is still an NP-complete problem even for a bipartite graph. We prove the NP-completeness of this specific problem by restricting it as a special case of a capacitated d-domination problem for bipartite graphs [11,37].
                           1
                        
                        
                           1
                           In [11], the problem is defined as a k-domination problem, where k denotes the distance. Since we use k to present the number of peering ISPs, we define this problem as d-domination problem, where d denotes the cost.
                         Specifically, for a given bipartite graph 
                           
                              G
                              =
                              (
                              
                                 V
                                 1
                              
                              ∪
                              
                                 V
                                 2
                              
                              ,
                              E
                              )
                              ,
                           
                         a d-dominating set is a vertex set D ⊂ V
                        1 such that every vertex in V
                        2 is dominated within cost d by the vertex in D. The d-domination problem is to find the minimum cardinality of a d-dominating set. The capacitated d-domination problem for bipartite graphs has been proven to be an NP-complete problem [11,37]. To prove the complexity of the p-global k-connection problem is NP-complete, we convert the problem into a decision problem version, and prove it is NP-complete in the following theorem.

                           Theorem 1
                           
                              Given a bipartite graph
                              
                                 
                                    G
                                    =
                                    (
                                    A
                                    ∪
                                    S
                                    ,
                                    E
                                    )
                                 
                               
                              and three non-negative integers k, p and d, the problem of determining if there is a subset Φ ⊆ A with cardinality less than or equal to k and with at most p global connections such that every client in
                              
                                 S
                               
                              is dominated within distance d by a peering connection and the amount of service demand can be served by each peering connection should not exceed its available capacities is NP-complete.
                           

First, the problem is in NP. Suppose there is a feasible subset of 
                                 A
                              . We can check the solution in polynomial time to see if it can dominate all the nodes in 
                                 S
                               and satisfy all the constraints. For 
                                 
                                    k
                                    =
                                    p
                                    ,
                                 
                               the problem is equivalent to the capacitated d-domination problem, which is an NP-complete problem. Based on the restriction approach proposed in [26], if a problem is in NP and contains an NP-complete problem as a special case, the problem is also an NP-complete problem. Thus, the problem is NP-complete.□

We use an example to illustrate the p-global k-connection problem. Suppose that for the graph shown in Fig. 3, the client set is 
                           
                              S
                              =
                              {
                              a
                              ,
                              b
                              ,
                              c
                              ,
                              d
                              ,
                              e
                              ,
                              f
                              ,
                              g
                              ,
                              h
                              }
                              ,
                           
                         and the candidate peering ISP set is 
                           
                              A
                              =
                              {
                              1
                              ,
                              2
                              ,
                              3
                              ,
                              4
                              ,
                              5
                              }
                           
                        . In this figure, a solid circle denotes a candidate peering ISP, while a rectangle box is used to represent a client AS. Note that the nodes with dashed circles will not be considered as candidate ISPs. To simplify our example, in the example, we assume that the content demand from each of the stub ASes is the same, denoted as s. We assume the same unit content shipping cost, and the same capacity of each peering link, for example, 5s.

We can verify that there is one optimal solution to the example with 
                           
                              p
                              =
                              1
                           
                         and 
                           
                              k
                              =
                              2
                           
                        : 
                           
                              Φ
                              =
                              {
                              1
                              ,
                              3
                              }
                              ,
                           
                        
                        
                           
                              
                                 Φ
                                 g
                              
                              =
                              
                                 {
                                 3
                                 }
                              
                              ,
                           
                         and 
                           
                              
                                 D
                                 c
                              
                              =
                              4
                           
                        . That means, the content provider should maintain a local peering connection with ISP 1 and a global peering connection with ISP 3 such that the total cost is minimized.

In this section, we present a heuristic approach for the p-global k-connection problem, which is presented in Algorithm 1
                     . The algorithm has three phases: (1) deriving the bipartite graph based on the given AS graph, (2) computing the preliminary peering ISP set, and (3) searching the final peering ISP set. The purpose of the first phase is to derive the corresponding bipartite graph for the given AS level graph. Therefore, based on the derived bipartite graph, we can calculate the peering ISP sets at the second phase, which is denoted as a preliminary peering ISP set. Since we do not consider the peering relationship restrictions during the second phase, some peering ISPs may not meet the problem constraints. Thus, at the last phase, the algorithm searches the preliminary set to derive the final peering ISP set.

More specifically, the main idea of the algorithm is to vary the maximum distance between end users and the closest peering ISP from 1 to Dc
                     , where the predefined value Dc
                      is called coverage distance. This approach is motivated by our measurement result in the next section, and the fact that large content providers move the content closer to the end-users [39]. For each coverage distance value, the algorithm derives a corresponding bipartite graph within the distance. Based on the graph, a minimal peering ISP set is derived to see if it is possible to cover all clients with at most k connections, the number of global connections is less than p, and the demand served at each peering connection should not exceed its total available capacity. If this is the case, the algorithm stops, and we find the minimal ISP set. Otherwise, it then continues by successively increasing the coverage distance until k connections and p global connections are found.

The first phase in Algorithm 1 is to derive the corresponding bipartite graph 
                           
                              
                                 G
                                 ′
                              
                              =
                              
                                 (
                                 A
                                 ∪
                                 S
                                 ,
                                 E
                                 )
                              
                           
                         from the given AS graph, where set 
                           S
                         contains all stub ASes and 
                           A
                         represents the candidate peering ISPs. As we mentioned early, we model the problem based on a bipartite graph due to the fact that the policy-conforming paths do not obey the triangle inequality and the symmetric distance properties. Set 
                           S
                         contains stub ASes, and set 
                           A
                         contains transit ISPs.

Here, we focus on deriving the edges of the bipartite graph, which represent the shortest path from peering ISPs to stub ASes. We introduce two types of edges: global edges and local edges in a bipartite graph. A local edge is a path that contains only provider-to-customer edges. A global edge is a path that first traverses a peer-to-peer edge, or one or several customer-to-provider edges, and then traverses zero, one or more provider-to-customer edges. Based on the type of the edges incident on the peering ISP, we can determine the type of a peering connection with the ISP. If at least one of its edges is a global edge, the peering connection is opened as a global connection. Otherwise, if all its edges are local edges, the connection is made to open as a local connection.

Next, we briefly present an algorithm to derive the shortest policy-conforming paths. We refer the reader to our previous work [25] for more detail on the algorithm. We summarize the algorithm here. We perform breadth-first search from each candidate ISP to search a path that contains only provider-to-customer links. For each stub AS that can be reached through more than one path within (
                           
                              
                                 D
                                 c
                              
                              −
                              1
                           
                        ) AS hops, we select the shortest path as a local edge between the ISP and the stub AS. After exploring all candidate ISPs, we can derive all the stub ASes that can be reached through the local edges within (
                           
                              
                                 D
                                 c
                              
                              −
                              1
                           
                        ) AS hops.

For the other stub ASes which do not have local edges, we continue to search global edges to reach them. We derive the policy-conforming paths based on (i) a path that first traverses a peer-to-peer link and then traverses zero, one or more provider-to-customer links, and (ii) a path that contains one or several customer-to-provider links, followed by zero or one peer-to-peer link, followed by zero, one or several provider-to-customer links. Note that those paths are bounded by (
                           
                              
                                 D
                                 c
                              
                              −
                              1
                           
                        ) AS hops. For each stub AS that can be reached via those paths, we select the shortest path as the local edge between the stub AS and the ISP if there are more than one such paths.

Here, we use the previous example, shown in Fig. 3, to show the bipartite graph derived by our algorithm. Fig. 5
                         shows the corresponding bipartite graph with 
                           
                              
                                 D
                                 c
                              
                              =
                              4
                           
                        . We choose this value because our measurement shows that the distance between the majority of end users and the largest content providers is within 4 AS hops. In this paper, we use a solid edge to represent a global edge, and a dashed edge to denote a local edge. In addition, we add a number besides each edge to denote the path length. For example, the length of the path from ISP 1 to stub node a is 2 AS hops.

In the second phase, we apply Algorithm 2 to find the preliminary peering ISP set for 
                           A
                         and 
                           
                              S
                              ,
                           
                         denoted as Φ′. Since the minimum peering set problem is an NP-complete problem [26], even when the graph is bipartite, we propose a heuristic algorithm shown in Algorithm 2, which is similar to the method described in [58]. Let us present the main ideas of the heuristic algorithm. First, we derive the candidate peering ISPs for each stub AS j, denoted as Pj
                        , and calculate the size of the set |Pi
                        |. Then, we derive the stub ASes covered by each ISP i ∈ Pj
                        , denoted as Ni
                        . The total number of stub ASes covered by each ISP i is denoted as |Ni
                        |. Second, we select a stub AS with the smallest value of Pi
                        . And then, from the potential ISP set for stub AS j, we select the ISP with the maximum value of |Nj
                        |. That means, we select an ISP that can reach the largest number of stub ASes. At the same time, we verify if the total content demand served by the ISP does not exceed the capacity of the peering connection. If this is not true, we continue to select a new ISP with less |Nj
                        | value and check if it can satisfy the capacity constraint. Once we select an ISP, we remove all the stub ASes that are covered by the ISP and the ISP from the potential ISP set 
                           A
                        . We apply this procedure to select the peering ISPs until all stub ASes are covered. During each iteration, we update set Pi
                         and Nj
                         for the reduced stub AS set and the potential ISP set.
                     

We use the previous example to illustrate the algorithm. From the bipartite graph with 
                           
                              
                                 D
                                 c
                              
                              =
                              4
                           
                         AS hops, as shown in Fig. 5, we find that node a is covered by two ISPs (ISP1 and ISP2) and has the smallest value of |P|. From the two ISPs, we first select ISP2 because ISP2 covers more stub ASes than ISP1 (with the maximal value of |N|). However, the total content demand from the covered clients is more than the capacity of the peering connection if we assume the capacity is 5 and each client generates a unity demand. As a result, we select ISP1. We remove all the stub ASes that are covered by ISP1. From the left graph, we have three options to select because they have the same |N| value: ISP3 
                        ISP4 and ISP5. We select one of them as the peering ISP, ISP3. Finally, the algorithm returns the minimum peering ISP set 
                           
                              
                                 Φ
                                 ′
                              
                              =
                              
                                 {
                                 1
                                 ,
                                 3
                                 }
                              
                           
                         shown in Fig. 6
                        
                        .

In the third phase, which is described in Algorithm 3, we search the preliminary peering ISP set Φ′ and 
                           A
                         to determine the final set Φ. Specifically, the algorithm first searches the preliminary peering ISP set Φ′ to determine the peering relationship with each ISP. The algorithm explores all the stub ASes covered by the ISP j, which is returned by function π(j), to see if ISP j is the direct/indirect provider of all the stub ASes. If so, ISP j opens a local connection. Otherwise, it will open a global connection.

After determining the peering relationships for the preliminary set, the algorithm checks if the number of total peering connections and the number of global connections are less than or equal to the given number k and p, respectively. If this is the case, the algorithm stops and returns the peering set.

Otherwise, the algorithm continues to check the peering ISP set. We examine each ISPs j in set Φ to see if its global edges can be changed to local edges. More specifically, we explore each stub AS covered by an ISP j with a global edge to see if the stub AS can be covered by another ISP k ∈ Φ with a local edge. If this is true, we remove the stub AS from ISP j, and add it in k. Once we explore all the global edges, we continue to check if the total number of connections is less than or equal to k, the ISP set Φ is returned.

For example, the minimum peering ISP set, as shown in Fig. 6, contains two ISPs with global edges. Suppose that we want to open only one IPS with a global connection. In order to achieve this end, we search ISP1’s clients with global edges to see if they can be covered by ISP1 with local edges or not. In this example, stub AS d and f can be covered by ISP3 with local edges. Therefore, we will remove their global edges and add local edges to ISP3. The final ISP set is shown in Fig. 7
                        .

In this subsection, we discuss practical applications of our model. The first application is that a new content provider can use our model to determine its peering connections with transit ISPs such that the maximum peering cost between end users and the content provider is minimized. The problem can be described as our model with 
                           
                              k
                              =
                              p
                           
                        . In other words, the problem is to determine the minimal cost of establishing transit peering connections. Then, the content provider can use our model to determine local peering connections.

The second application is for an existing content provider to establish new peering connections. In this case, the new peering connections will compete with the existing peering connections to attract end users. This problem can be described by our problem with 
                           
                              p
                              =
                              0
                           
                        . That means, a set of peering ISPs with local connections will be determined.

We want to call the reader’s attention to the different granularity levels of peering connections. The peering decision could be made at various levels: either a global AS level topology or the IXP level. In our model, we use two sets to represent the potential peering ISPs and end users. The peering ISPs could be the participants at one or several IXPs. In addition, we can use the peering ISPs set to represent a set of routers that could be connected.

We acknowledge that our model may not include all factors that are associated with the peering connections. However, we believe that our model captures the basic, not necessarily all, interests of content providers. In addition, our model provides insights into the peering connections.

In this section, we first perform a large-scale measurement study of peering characteristics of five large content providers from today’s Internet. We focus on the parameters in our model. More specifically, based the Internet topology we apply the above algorithms to derive the upper bound of the coverage distance Dc
                     , and the lower bound of global peering connections p and the total peering connections k. Finally, we compare the peering connections generated by our algorithms with the existing peering connections deployed by the content providers.

In order to study the peering connections, we construct an AS graph by using BGP routing tables from the RouteViews [45] and the RIPE RIS [4]. We download daily dumps of BGP tables from all monitors deployed by RouteViews and RIPE RIS, and use the routing tables in 05/01/2013. The routing tables in 05/01/2013 contains 424 BGP monitoring peers. According to previous work [12,14,29], we also notice that a significant number of existing AS connections cannot be seen in BGP routing tables. To address this problem, we collect AS Links Dataset provided by CAIDA [10], which adds 44,424 more AS links to the AS graph. Note that although some AS level connections might not be included in the AS graph constructed from Route Views, this can only result in an overestimation of the shortest AS path length.

In addition, the AS relationship inference algorithm proposed in [20] is adopted in this paper because this algorithm gives the most accurate inference compared to the existing algorithms [19,23,57].

We focus on characterizing the peering connections of five well-known content providers: Google, Yahoo, Microsoft, Facebook and Amazon. First, we classify the ISPs into three classes at different hierarchical levels: tier-1 ISPs, tier-2 ISPs, and tier-3 ISPs. An ISP is called a tier-1 ISP if it accesses the global Internet without buying network capacity from other ASes. Providers that buy all of their inter-connectivity from tier-1 ISPs are tier-2 ISPs. Second, we classify other ISPs into tier-3 ISPs. In our data set, there are 16 tier-1 ISPs, 580 tier-2 ISPs, and 5,816 tier-3 ISPs. Finally, among the 6,396 non-tier-1 ISPs, we continue to study which AP is most likely to be peered with the content providers. We calculate the size of the APs in terms of the number of stub ASes that are directly connected with those APs. We find that all the content providers tend to connect with ISPs with more than 10 stub ASes.

The percentage of the local connections, or peering connections with peer-to-peer relationships, is shown in Table 1
                        . We find that the majority of the peering connections belongs to local connections. For example, Google has 47 peering connections with tier-1 ISPs, and all of them belong to global connections. It has 29 peering connections with tier-2 ISPs, and 93% (
                           
                              27
                              /
                              29
                              =
                              93
                              %
                           
                        ) of them belong to local connections.

We also find that these content providers have some local connections with stub ASes. For example, Facebook has a slightly more peering connections with stub ASes than other providers. We believe that it implies that peering connections will increasingly spread closer to end users in the near future. Note that since RouteView has very few sessions with stub ASes, our BGP data has bias on the numbers of stub ASes direct connecting with the large content providers.

Our further investigation shows that those stub ASes are single-homed or multi-homed to non-tier-1 ISPs. In other words, the content providers have no incentive to connect with the direct customers of tier-1 ISPs, which are either single-homed or multi-homed only to tier-1 ISPs.
                           2
                        
                        
                           2
                           In our data set, there is only one exception case, in which Google is connected to AS1668 (AOL), which provides Internet service for end users.
                         This peering strategy is due to the fact that those content providers already purchase the transit services from tier-1 ISPs. There is no incentive for them to build peering connections directly with the tier-1 directed customers.

We investigate the distribution of the AS-level distance between end users and the content providers. The results are shown in Fig. 9
                        . In this figure, the results are marked with “Existing”. We will discuss the other lines latter. We find that about 80% of the AS paths from the content providers to stub ASes consist of no more than 4 AS hops. That means, on average the path distance between end users and the large content providers is shorter than the average AS path length in the Internet [44]. From our previous measurement, we find that most of the path from the content providers to stub ASes have less than 4 AS hops. Hence, we consider that 4 AS-hop is the upper bound of the coverage distance Dc
                        .

We use Algorithm 2 to derive the lower bound of parameters p and k to cover today’s Internet. In today’s Internet, we find that if we want the distance from a content provider to each stub AS to be less than or equal to 2 AS hops, we need 3017 ISPs. Most of the peering connections are local connections. In other words, in order to cover all stub ASes within the range, we need to select the direct providers of stub ASes as the peering ISPs. On the contrary, if we want to cover all stub ASes within 3 or 4 AS hops, we only need at most 20 global connections as shown in Fig. 8.

In Fig. 8(a), the number of global peering connections p ranges between 1 and 20. We observe that after adding 20 global connections, the total number of peering connections to cover the Internet does not change any more. From this figure, we can determine the lower bound of p for the cases with 
                           
                              
                                 D
                                 c
                              
                              =
                              3
                           
                         and 
                           
                              
                                 D
                                 c
                              
                              =
                              4
                           
                         AS hops. For example, we need at least 10 global connections and at least total 688 connections such that all the stub ASes are covered within less or equal to 3 AS hops. On the contrary, we only need 10 global connections and overall 232 peering connections to serve all stub ASes within 4 AS hops.

From Fig. 8(a), we observe that for the case with 
                           
                              
                                 D
                                 c
                              
                              =
                              3
                           
                         AS hops, the number of overall ISPs does not change significantly as long as the number global connections is increased. The reason is that those ISPs are so near to the stub ASes so that those global connections cannot attract any more stub ASes. However, for the case with 
                           
                              
                                 D
                                 c
                              
                              =
                              4
                           
                         AS hops, when the number of global connections is larger than 4, the number of overall peering connections is reduced significantly. When the number of global connections is larger than 16, opening any more global connections does not help to reduce the total number of connections.

Comparing our measurement results to the real peering connection numbers from the large content providers, we find that our results are a little larger than theirs. The reason is that in our measurement all stub ASes must be covered within at most 4 AS hops. In reality, some stub ASes are covered with more hops. For example, the maximum distance from those content providers could be longer than 10 AS hops. This observation implies that some stub ASes exert a strong influence over the content placement solution if all stub ASes must be covered. Therefore, we focus on those ISPs with more than 10 customer ASes, and cover their stub ASes within 4 AS hops. For those ISPs with less than 10 stub ASes, their stub ASes will be covered with more than 4 AS hops. The result is presented in Fig. 8(b). In this case, we only need 10 global connections and total 196 peering connections to cover 98% of the stub ASes within 4 AS hops, and the other 2% of the stub ASes will be covered with more than 4 AS hops.

Hence, we can answer an interesting question – how many peering ISPs and how many global connections are necessary for a content provider to cover today’s Internet – from Fig. 8. For example, in order to cover the majority of customers within 4 AS hops, the content provider needs to connect with at least 157 peering ISPs, and maintain 20 global connections.

Since the five large content providers have already selected their peering location and determined the peering relationships, we are interested to investigate the existing peering relationships in terms of the number of global connections and the maximum distance. In particular, for each content provider, we use their peering connection and assume that all the peering connections are local connections. Then, we measure the minimum distance between each stub AS and its closest peering ISP. Next, we switch some of peering connections to global connections. Here, a global connection is opened according to its attraction value, which is defined as the number of stub ASes whose minimum distance to the content provider will be reduced due to the global connection. In fact, this problem can be considered as a competitive location problem [21,31]. That means, some local connections already exist and a new global connection will have to compete with them to attract end users such that the maximum distance is reduced.


                        Fig. 9 shows the distribution of the path length after we enable some global connections for each content provider. We find that the peering relationships derived from our method can cover more stub ASes than the existing ones from the perspective of the maximum distance. First, even though we open less global connections, the path distribution is still better than theirs. For example, Google maintains more than 30 global connections, but only 20 global connections are sufficient to cover all the stub ASes, and more than 90% of stub ASes are within 3 AS hops. That means, in reality, some of the peering connections are redundant. In addition, we find out that after opening a certain number of global connections, the path distribution does not change any more, which is consistent with the result derived from our algorithms. Each content provider needs no more than 20 global connections to cover all the stub ASes, and the majority of the stub ASes is covered within no more than 4 AS hops.

From the above measurement, we know that we do not need many global connections to cover the Internet. In this part, we consider adding new local connections for the content providers such that the maximum distance will be reduced. We use the same method as measuring the efficiency of peering relationships. We first compute the distance between each stub and a candidate ISP, then we calculate the attraction value for each ISP by counting the number of stub ASes whose distance to the ISP is less than the one to its nearest ISP. After we have scanned every pair of stub AS and ISPs, we obtain the attraction value for every candidate ISP. We then sort the candidate ISPs according to their attraction values, and select the first k candidate ISPs as the new peering ISPs. Note that we will open those new ISPs with local connections.


                        Fig. 10
                         shows the distribution of the forwarding path length for each content provider after we add 3–5 new local connections (lines marked by “k New”). Specifically, our goal is to add new local connections such that more than 90% of the stub ASes have less or equal to 3 AS hops to send requests to and receive the contents from those content providers. Note that before we add the new connections, only 70% of the stub ASes have AS paths within 3 AS hops. From this figure, we find that adding 3–5 new local connections can reduce the path length significantly.

@&#RELATED WORK@&#

We present the related work in two categories: (i) papers that formulate the content placement as facility location problem (ii) those that focus on content measurement, and (iii) previous work on peering strategy.

There is a large number of works focused on facility location theory, or the k-center problem. For exhaustive surveys of the previous work in facility location problem, or k-center problem, readers are referred to [21,58]. For example, the k-center problem can be solved as a series of set covering problems [16]. Here, we focus on previous works that are closely related to our content peering problem.

The authors in [33] propose an Internet distance map service to estimate a global distance in the Internet. Their heuristic algorithm to solve the p-center problem is based on k-hierarchically well-separated trees (k-HST) [8]. Li et al. 
                     [51] model the proxy placement as a dynamic programming problem, and present an approach based on the assumption that the underlying network topologies are trees. In [34], a constrained mirror placement problem is proposed, where the mirrors are allowed to be placed at some subset of network nodes. Two algorithms are proposed to select top k candidate locations with the largest influence values for a new facility in work [31].

Several approximation algorithms have been proposed to solve the general data placement problem [7,9,35]. For example, in [9], a constant approximation distributed algorithm was proposed to solve the general data placement problem. Several works have also investigated distributed optimization of the service placement problem [40,41,47] in order to solve the scalability issue caused by global knowledge requirements. These studies differ from ours in that our model takes routing policies into consideration when selecting content peers. Our solution is a complimentary effort to all the existing approaches.

Compared with facility location problem, there are not many efforts on measurements. Several measurement works have focused on studying the traffic characteristics of content providers [39,53]. Labovitz et al. [39] show that most of the amount of Inter-domain traffic originates from content providers.They also show that content providers often use their own networks to deliver contents. Most recent work [53] studied the topology trends of content providers, and shows the new interconnect strategies changing the structure of the Internet. Our work differs in that our measurement study focuses on the characteristics of peering connections and peering relationships of content providers on AS level.

In [18], the authors proposed a quantitative, value-based framework for Internet peering agreements. Their results show that two networks can arrive at optimal and fair price for a a paid peering relationship if they can accurately measure the costs of each network. In [32], the authors takes into account network size to model the interconnection between network peers.

Finally, we present the state-of-the-art peering strategy. In [13], a framework is proposed to identify a set of criteria that ASes use to establish a peering relationship. A recent study of a large European IXP [5] discovers that the number of actual peering links at this IXP exceeds the number of total peer-to-peer links inferred from AS-level topology. This work highlights the importance of full knowledge of the AS-level topology. Several recent proposals have focused on the collaboration between CDN and ISPs to improve their service performance [22,42,50,52]. For example, the study in [50] shows that CDN and ISP can benefit if they collaborate in server selection for traffic engineering. Research has investigated the interplay between content distribution strategies and traffic engineering in a collaboration manner [52]. In [22], the authors present the design and evaluation of a system to enable the collaboration between ISPs and CDNs. In [42], the authors study the interaction between traffic engineering and content distribution using a game-theoretic model.

@&#CONCLUSION@&#

In this paper, when we determine peering location for content providers, we take routing policy and peering relationships into account. We formulate the problem as a policy-aware peering problem and prove that the problem is NP-complete. We propose a heuristic algorithm to derive the minimum number of peering ISPs and their peering agreements to cover today’s Internet. In addition, we perform a large-scale measurement study of peering characteristics of five large content providers, and evaluate the efficiency of their existing peering agreements. All our measurements demonstrate that routing policies and peering relationships are an important factor in the selection of peering connections. We also demonstrate that our algorithms can enhance the performance of large content providers.

@&#REFERENCES@&#

