@&#MAIN-TITLE@&#Botnet detection via mining of traffic flow characteristics

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A new traffic flow behavior analysis method has been proposed to detect botnets irrespective of their control structures.


                        
                        
                           
                           Benchmark datasets collected from various sources, such as ISOT Botnet dataset from University of Victoria, Conficker dataset from CAIDA, dataset from CVUT University, dataset from Dalhousie University and dataset from Centro University.


                        
                        
                           
                           It can successfully detect the various types of botnets with a high detection rate and a low false positive rate.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Botnet detection

Network flows

Small packets

Packet ratio

Bot response packet ratio

Novelty detection

@&#ABSTRACT@&#


               
               
                  Botnet is one of the most serious threats to cyber security as it provides a distributed platform for several illegal activities. Regardless of the availability of numerous methods proposed to detect botnets, still it is a challenging issue as botmasters are continuously improving bots to make them stealthier and evade detection. Most of the existing detection techniques cannot detect modern botnets in an early stage, or they are specific to command and control protocol and structures. In this paper, we propose a novel approach to detect botnets irrespective of their structures, based on network traffic flow behavior analysis and machine learning techniques. The experimental evaluation of the proposed method with real-world benchmark datasets shows the efficiency of the method. Also, the system is able to identify the new botnets with high detection accuracy and low false positive rate.
               
            

@&#INTRODUCTION@&#

A botnet is a collection of compromised hosts or zombies that are remotely controlled by an intruder called botmaster via a Command and Control (C&C) channel. Due to the massive size of botnets, they pose a severe threat to cyber security. According to [1], the extent to which the botnets smash up is becoming more critical day by day. Botnets are used for different attacks such as sending Spam, launching distributed denial of service (DDoS) attack, identity theft, and click fraud, etc. Some of the largest spam botnets are sending out literally billions of messages per day. Cybercriminals use a variety of bots to conduct DDoS attacks on Internet servers and botnets are raising threats in the cyber space with millions of infected computers.

Botnet has made an endeavor to control zombies remotely and instruct them by commands from botmaster through C&C channel which is a crucial component of a botnet. Different botnets can organize their C&C channel in diverse ways [2]. Botnets can be centralized, decentralized or hybrid according to their C&C channels and communication protocols like HTTP, P2P, IRC, IM, etc. IRC-based centralized C&C structure is the most commonly used botnet structure [3]. In this, all the bots in a botnet are connected to a single C&C channel to obtain the commands from the botmaster. The IRC-based centralized botnet structures are easy to create, manage and they react to commands faster. However, it is also easier to combat centralized botnets, since the entire zombie network is neutralized if the C&C channel is blocked. Virut.n, Rbot, and Eldorado are some popular IRC botnets. Recently, botmasters have started using HTTP to manage their web-based centralized botnets. HTTP is a prominent communication protocol as it comprises of majority of the internet traffic [4]. These web-based C&C bots try to blend into normal HTTP traffic, which consequently makes them more difficult to identify, since HTTP is a network communication protocol in many applications. Zeus, Spyeye, and BlackEnergy are some popular botnets using HTTP as the communication protocol. These botnets are estimated to include millions of compromised computers around the world and mainly used to steal critical information including login credentials, sensitive financial data etc. Nowadays, botmasters have started to build botnets with more resilient C&C structures using peer-to-peer (P2P) protocols [5]. Bots belonging to P2P botnet form an overlay network in which any of the bots can be used by the botmaster to distribute commands to the other bots. In P2P botnet, commands are transferred from bot to bot, each bot has a list of several neighbors and any command received by a bot from one of its neighbors will be sent to the others, further distributing it across the zombie network. Storm, Waledac, ZeroAccess, Citadel, Kelihos, and Conficker are some popular P2P botnets. It offers higher resiliency, since even if a significant portion of P2P botnet is taken down, the remaining bots may still be able to communicate with each other and with botmaster.

In both centralized and decentralized botnet structures, a bot in the network will generate a burst of small packets when actively searching for susceptible hosts. The bot communication may exhibit a more uniform pattern when the bot queries for updates or instructions continuously, resulting in many uniform sized, small TCP/UDP packets. These traffic flows, especially the periodicity of the patterns are of great interest for botnet detection, since the passive traffic monitoring would like to recognize the suspicious patterns and disrupt the botnet before the actual attacks take place. Based on this bot behavior we have analyzed network traffic flow statistical features in a controlled environment. The traffic flow statistical features such as the size and number of packets are used to detect bot in both centralized and decentralized structures using three different classification techniques such as Boosted decision tree, Naive Bayesian and Support vector machine. The detection of botnets using behavioral analysis of network traffic flows has several advantages. The flow based approach requires only a fraction of the total amount of traffic data to be analyzed. The mining based method operated on the flow level network traffic has shown promising results towards botnet detection. It can detect even unknown botnets that are using encrypted communication with high accuracy. Another advantage is that the proposed approach for detecting bots will be less expensive compared to other approaches that implement deep-payload-analysis.

The rest of this paper is structured as follows. Section 2 summarizes and discusses related work on botnet detection and Section 3 discusses our proposed detection system. The data collection and analysis is described in Section 4 followed by the experimental results and performance evaluation in Section 5. Finally section 6 concludes the paper.

@&#RELATED WORK@&#

In recent years, botnet detection and tracking has been a major research topic. Even though a large collection of botnet detection techniques exist in the literature, many of the schemes are not efficient to detect current botnets. Early works in botnet detections are mainly based on payload analysis methods which examine the contents of TCP and UDP packets for malicious signature. Payload inspection methods are usually resource intensive that require the parsing of large amount of packet data and are normally slow. Also new bots frequently utilize encryption and other methods to obfuscate their communication and crush packet inspection methods. Moreover, botnet detection approaches with flow analysis have emerged only in the last few years [6]. Botnet detection techniques can be classified into signature-based detection, anomaly-based detection, DNS-based detection and mining-based detection [7]. Signature-based methods fail to detect new type of botnets. Anomaly based techniques are generally based on network behavior anomalies such as high network latency, activities on unused ports etc. But, the C&C traffic usually does not reveal anomalous behavior. It is hard to differentiate C&C traffic from usual traffic behavior and hence anomaly based mechanisms may fail in these cases. DNS-based detection methods are based on particular DNS information generated by a botnet and these detection methods are not useful to identify new botnets. In this point of view, machine learning based data mining techniques are very useful to extract unexpected network patterns.

Livadas et al. [8] proposed a flow based approach for the detection of the C&C traffic of IRC-based botnets. In their work, the first stage classifies traffic flows into chat or non-chat flows with mining algorithms, while the second stage utilizes mining algorithms to classify IRC flows into malicious or non-malicious. The flows are classified into IRC botnet flows with relatively high false negative rate of 10–20% and false positive rate of 30–40% using bayesian network classifier. Zhao et al. [9] proposed a botnet detection system based on traffic behavior analysis and flow intervals. The authors used Reduced Error Pruning algorithm (REPTree) to classify the malicious and non-malicious traffic. However, the detection system produces high false positive rate.

Saad et al. [10] studied the characteristics of network traffic behavior to detect P2P botnet command and control phase under the radar through malicious email, websites, file sharing networks, and ad hoc wireless networks. They have used five different machine learning algorithms to identify the botnet traffic using the benchmark ISOT botnet dataset and achieved the highest accuracy of 89%. Lu et al. [11] proposed a detection system that analyzes the temporal-frequent characteristics of the 256 ASCII bytes on the payload over a predefined time interval to distinguish malicious IRC bot traffic from normal one. But, the authors do not explicitly specify where or when the traces are collected. Masud et al. [12] proposed a host based botnet detection system using a flow-based detection method by considering the correlation between multiple log files installed on the host machine. The method analyzes the multiple log files and monitor the network content to find out bots. However, their technique is not effective in detecting P2P botnets that have encrypted communications. Nogueira et al.. [13] proposed a botnet detection system based on the identification of traffic patterns and used an artificial neural network technique to identify the licit and illicit traffic patterns. The mixture of licit and illicit traffic is passed to the neural network component to classify the licit and illicit traffic. Through this method they have achieved the detection accuracy of 87.56%. Liao et al. [14] developed a P2P botnet detection based on a data mining technique to analyze network behavior at the gateway level. A significant aspect of this approach is that it can monitor encrypted network traffic. However, this scheme is made for small-scale network infrastructures (LANs), and thus cannot be deployed or validated on large-scale networks. Kirubavathi et al. [15] designed specifically a HTTP-based botnet detection system using an adaptive learning rate multilayer Feed-Forward Neural Network. They have extracted TCP connections related features in specific time intervals for the detection purpose. Wang et al. [16] proposed a behavior-based botnet detection system based on fuzzy pattern recognition techniques. However, this system may lead to false positives when the generated network traces contain regular network activities such as checking new software updates. Huang [17] developed a host-based botnet detection system based on network failure model. The author assumes that network failure is an inherent property of botnet traffic which results from unavailability of C&C server, a peer or the attacked target. They extracted thirty four features from the failure flows which can be classified into six categories. The author believes that the proposed model can detect bots with 99% accuracy. But, if a bot never generates a failure, it could be missed.

The proposed model addresses some downsides of the existing botnet detection methods. The objective of the proposed method is to identify the bots irrespective of their structural properties. For that, we observed the network activities of the various types of bots such as Zeus, Spyeye, BlackEnergy, Citadel, Kelihos, Medfos, Storm, Waledac, Skynet, ZeroAccess, Virut.n, Rbot, and Eldorado. The significant features from the traffic flows are extracted and they are passed to the classification techniques to differentiate the botnet and normal traffic flows. It has a number of salient features compared to the previous work. First, our model does not rely on any prior knowledge about botnet structures. Second, it is resilient to the occurrence of encrypted communication as it does not inspect packet contents. The novelty in this approach is due to the capability of the data mining technique to recognize new or unknown botnets with good accuracy and very low false positive rate.

The proposed system extracts important features and these features are used to model the behavior of network flows to identify the botnets. The functional block diagram of the proposed system is given in Fig. 1
                     . The proposed method captures packets across a network and collects traffic flows during constant time intervals. A flow consists of consecutive packets having the same five-tuple (source_ip, destination_ip, source_port, destination_port, protocol). The ultimate goal is to find the most relevant features and to discover statistical correlation in the traffic flows in constant time for building efficient classification system.

Conventional botnet detection methods may fail to treat the small packet traffic flows as independent instances. Since these methods do not take the correlation among small packets traffic flows into account. In this paper, we consider the small packet correlation information which can significantly improve the classification accuracy. Also, the proposed method introduces new features like packet ratio, initial packet length and bot response over a period of time. These new metrics play a vital role in botnet detection.

Bots within a botnet typically exhibit the uniformity of traffic behavior and unique communication patterns. These botnet characteristics are well known and have been exploited by various researchers towards the development of detection mechanisms. Initially we analyze the botnet network behavior from the collected network traffic flow traces and publicly available traces. A set of correlated flows are analyzed from the constant time response packets. Based on the observation, the following features are identified as significant measures for botnet detection. The selected features are listed in Table 1
                        .


                        Small_packets (Ps
                        ): The time domain based network flow analysis reveals an interesting feature which takes a major role in distinguishing the botnet traffic from the benign traffic. The automated bot behavior exhibits some similarity in its network flows in terms of packet size and count. The botnets generate a large number of small size packets when actively searching for susceptible hosts in a network. The large portion of these packets are distributed within the range of 40–320 bytes. On the other hand, packet size of the benign server traffic is large. Also, the main role of the botnet C&C channel is to establish a connection between bots and C&C server. This channel should be both reliable as well as relatively innocuous in appearance. Hence, packets carrying botnet commands or information harvested from infected hosts are preferred to be as small as possible in order to minimize their observable impact on the network. On the other hand, the C&C communication activities are constant throughout the bot life-cycle. Since bots need to maintain connections with other bots to receive commands or updates. Therefore it follows uniformity in their packet size throughout the life-cycle. It is a significant characteristic of a botnet.


                        Packet_ratio (Pr
                        ): The bots are non-human driven and pre-programmed to respond to the set of commands they receive. Moreover, due to the limited number of commands in typical C&C protocols, the traffic do not fluctuate significantly. On the other hand, normal traffic fluctuate significantly. This behavior motivate us to calculate the packet ratio in a specified time window as,

                           
                              
                                 
                                    
                                       P
                                       r
                                    
                                    =
                                    
                                       
                                          N
                                          u
                                          m
                                          b
                                          e
                                          r
                                          
                                          o
                                          f
                                          
                                          i
                                          n
                                          c
                                          o
                                          m
                                          i
                                          n
                                          g
                                          
                                          p
                                          a
                                          c
                                          k
                                          e
                                          t
                                          s
                                       
                                       
                                          N
                                          u
                                          m
                                          b
                                          e
                                          r
                                          
                                          o
                                          f
                                          
                                          o
                                          u
                                          t
                                          g
                                          o
                                          i
                                          n
                                          g
                                          
                                          p
                                          a
                                          c
                                          k
                                          e
                                          t
                                          s
                                       
                                    
                                 
                              
                           
                        
                     


                        Initial Packet_length (Pl
                        ): In general, the botnet communication protocol follows well defined behavior during the initial exchange of packets when a client joins a network. This feature contains some information to identify the entire flow as malicious or benign. The initial packet size is obtained immediately when the flow has been established and it is carried to further time windows.


                        Bot Response Packet (BRp
                        ): During the bot communication for every incoming packet originated from some IP address and port number, there is an outgoing packet to the same IP address and port number with constant response time. This indicates that it is a potential bot-response command packet. The constant response time has been determined by our empirical observation of the bots. This is an important characteristic of a bot.

After identifying the significant features, bots can be detected in advance before the attack launches. To accomplish this task, individual flows are split into multiple parts using time windows WT
                         in seconds. The characteristics of a given flow are observed by examining its traffic in a given time window. Intuitively, smaller time windows may fail to capture unique traffic characteristics that only become visible over a longer period of time. If the time window is longer, our detection system will take long period to make decision. Ultimately, the selection of time window size will be a challenging task. In this work, WT
                         is fixed based on the experimental analysis.


                        Flow vector: Let fj
                         be a flow. A flow vector fj
                        (ti
                        ) = (Ps, Pr, Pl, BRp
                        ), where Ps, Pr, Pl, BRp
                         are the features extracted from the flow fj
                         during the time period ti
                        .

One ultimate consideration for the selection of features is to provide some resistance to potential evasion techniques for bots. Botnet developers could try to introduce dummy packets to randomize their communication patterns. In this case also, our system will detect botnet traffic correctly, because the traffic features used by the system such as small packets, packet length and packet ratio are intrinsic to botnet traffic. Hence it is harder to evade. Moreover, the analysis of traffic across different time windows allows our technique to effectively detect botnet traffic.

We investigated different machine learning based classification techniques, which can be used to distinguish botnet and benign traffic effectively. We have selected the most prominent classification techniques namely, Boosted decision tree (AdaBoostM1+J48) ensemble classifier, Naive bayesian (NB) statistical classifier and Support vector machine (SVM) discriminative classifier.


                        Boosted Decision Tree: An AdaBoost algorithm, which is one of the most widely used boosting techniques for constructing a strong classifier as a linear combination of weak classifiers. The boosting technique combines multiple classifiers by assigning weights to each of them according to their classification performance. The algorithm starts by assigning equal weights to all training samples, and a model is obtained from these training data. Then each misclassified instance weight is increased and another model is obtained from these new training data. This is iterated for a specified number of times. During classification each of these models is applied on the test data and a weighted voting is performed to determine the class of the test instance. We used AdaBoost.M1 algorithm on J48 to evaluate the performance of the proposed scheme.


                        Naive Bayesian Classifier: A Naive bayesian classifier is a probabilistic classifier based on Bayes theorem which analyzes the relationship between each feature and the corresponding class so as to derive a conditional probability that links feature values and the class. It assumes that the presence or absence of a particular feature of a class is unrelated to the presence or absence of any other feature. The Naive Bayesian classifier affords fast, highly scalable and it can work with small amounts of training data, and can also accommodate a large number of training samples which make them a good choice for botnet detection. Also the selected features satisfy the conditional independence property of the Naive bayesian classifier.


                        Support Vector Machine: The Support vector machine is a widely used classification technique in machine learning. The most important idea of SVM is that every data instance can be classified by a hyperplane, if the dataset is transformed into a space with sufficiently high dimensions. Therefore, SVM first projects input data instance into a higher dimensional space, and then divides the space with a separation hyperplane which not only minimizes the margin separating the two classes.

In order to collect botnet traffic traces, we have created botnet setup in our lab with seven computers which includes C&C interface and zombie machines. The C&C interface is hosted in http://botsample.6te.net. Zeus, Spyeye, and BlackEnergy botnets are installed using drive-by-download mechanism. The executable binaries of botnet malware are obtained from on-line sources such as openmalware, contagio-dump blog. Once the Zeus, Spyeye, and BlackEnergy are installed, antivirus and security software in victim (zombie) machines will be disabled automatically to avoid detection. The bot injects itself in the address space of the windows explorer. After the successful installation of bot binaries, the victim machine turns into a zombie. During the bot communication, network traffic flow traces have been collected for 5 hrs per day and it is repeated for 6 days for each botnet. In a similar manner, normal traffic has been collected from the National Knowledge Network with bandwidth of 100 Mbps. Table 2
                      shows some of the collected botnet traffic flow traces, background traffic flow traces and publicly available BitTorrent traffic flow traces. The BitTorrent traffic are captured during various operations such as file sharing, MP3 file sharing, FTP, etc.

While analyzing the collected botnet traffic, we could see a large number of small size packets which follows uniformity in their communication, since web-based botnets do not maintain the connection with web server, but frequently communicate with the web server for downloading commands and updating the bot source. Also, zombies in the network will generate a burst of small packets when actively searching for susceptible hosts in the network. Fig. 2
                      shows the botnet traffic flows for Spyeye and BlackEnergy botnets. The graphs are plotted at different timings during the bot communication. The normal traffic follows randomness in the packet size and non-uniformity in the communication pattern. Fig. 3
                      shows the various normal traffic flows at different timings during the normal communication.

Also we have used the publicly available ISOT Botnet dataset from University of Victoria [10], Conficker dataset from CAIDA [18], dataset from University of Georgia [19], four different datasets from CVUT University [20], Citadel botnet and Alexa benign datasets from Dalhousie University [21] and three different IRC botnet dataset from Centro University, Argentina [22] for our proposed detection model. Table 3
                      shows the descriptive details of the ISOT Botnet dataset and Table 4
                      shows the descriptive details of remaining datasets.

The ISOT Botnet dataset is the mixture of several accessible publicly available malicious and non-malicious datasets. The malicious traffic of this dataset contains storm and waledac botnets. To represent non-malicious traffic, ISOT incorporated two different datasets, one from the Traffic Lab at Ericsson Research in Hungary and the other from the Lawrence Berkeley National Lab (LNBL). The Conficker dataset contains data from the UCSD Network Telescope for three days between November 2008 and January 2009. This dataset contains 68 compressed pcap files each containing one hour of traces. The total size of the dataset is 69 GB. The dataset from university of Georgia consists of ZeroAccess and Skynet botnet traces. The ZeroAccess is one of the most prominent P2P botnet in the recent years and it contains 720 flows dataset. The skynet, a Tor-powered trojan with DDoS, Bitcoin mining and banking capabilities and it contains 770 flows data. The dataset from CVUT University includes Kazy, Medfos, Kelihos and Sogou botnet traces. Dalhousie University dataset contains Citadel botnet and Alexa benign traces. The dataset from the Centro University, Argentina contains three different IRC botnet datasets namely, virut.n, Eldorado and Rbot with 37,389 flows, 34,117 flows and 21,124 flows, respectively.

Certain interesting facts are observed while analyzing the above datasets and they are graphically shown in Figs. 4
                      and 5
                     . The traffic patterns of ISOT dataset and CAIDA Conficker is shown in Fig. 4. Fig. 5 depicts the traffic patterns of ZeroAccess and Rbot. The traffic patterns of the normal communications are given in Fig. 6
                     . The normal traffic shows randomness in the packet size and non-uniformity in the communication pattern. From the figures one can infer that the botnet communication traffic follows small size packets and unique communication pattern compared to the benign traffic. Further we have analyzed small packets for each botnet and benign traffic using wireshark. Packet distributions for various background and botnet traces are depicted in Fig. 7
                     . Spyeye and BlackEnergy have almost the same packets distributions whereas virut.n, Eldorado and Rbot exhibit the same distribution of packets. Similarly, the P2P botnets Storm and Waledac have almost the same distribution. From the figure, we can see the remarkable difference between botnet and benign traffic packets. Besides a few null packets, a large portion of packets in botnet traffic are distributed within the range of 40–320 bytes. But, the background traffic fluctuates since it consists of variety of applications.

In order to evaluate the performance of the proposed technique, series of experiments are conducted. The detailed descriptions of various datasets and experiments are given below:

The collected and publicly available benchmark dataset traces are very large to scale with our implementation of classifiers. We split dataset into three different datasets combining both botnet traffic and benign traffic from various sources. The detailed descriptions of the datasets are given below:

The first dataset (D1) contains ISOT botnet data which is the combination of several existing publicly available malicious and non-malicious datasets. The size of this dataset is 10.09 GB. The second dataset (D2) consists of two different traffic traces to represent botnet and benign traffic. For botnet traffic, we have used CAIDA Conficker dataset of size 10 GB from the UCSD network telescope. For benign traffic, 4.69 GB of our laboratory traffic traces which consist of FTP services, Web services and BitTorrent traces and 2.412 GB traffic from LBNL have been utilized. The total size of the benign dataset is 7.102 GB. The total size of the D2 dataset is 17.102 GB. The third dataset (D3) consists of both botnet and benign traces from laboratory traffic and three different IRC botnet traces from Centro University, two different P2P botnets from University of Georgia, two HTTP botnets and one P2P botnet traces from CVUT University. The total size of this dataset is 10.05 GB. The remaining two botnet traffic such as Kehilos traces from CVUT University and Citadel traces from NIMS are directly used for detection.

The performance of the proposed method has been evaluated using five different metrics namely, Precision, Recall, F-measure, Accuracy and False Positive Rate (FPR) to validate the feasibility of the system. Achieving very high accuracy is easy by carefully selecting the sample size. If we use accuracy alone as a measure for testing the performance of the system, the system can be biased and can attain very high accuracy . However to overcome these issues, Precision and Recall measures which are not dependent on the size of the training and the testing samples are also considered. Precision and Recall measures are to some extend inversely proportional to each other and there is normally a trade-off between these two metrics. Hence we observe one more measure called F-measure which is a harmonic mean of Precision and Recall.

@&#PERFORMANCE EVALUATION@&#

The proposed system is implemented using JNetPcap library integrated into a java based module and the Weka tool is used for classification techniques. The individual flows are split into multiple parts based on time windows using flow-tools. After the feature extraction, flow vector is formed to classify the traffic flows into botnet and normal flows by applying machine learning techniques. The 10-fold cross-validation technique is used to evaluate the accuracy of the proposed system.

Different size time windows ranging from 60 to 300 s in multiples of 60 are used to evaluate the performance of the proposed system. The classifiers accuracies are slightly increased when the time window is increased from 60 s to 120 s. The highest accuracy is reached when the time window is 180 s. This shows that a unique pattern is followed by the botnets when the size of the time window is 180 s. Presumably the period of 180 s is similar to real bot cycle. Interestingly, it is found that the detection accuracy is slightly decreased when the time window is 240 s and also, extracting flow based features with this time window do not significantly change the false positives. Again the detection accuracy is decreased when the time window is increased from 240 s to 300 s. This is due to the nature of the automated behavior of botnet communication lifecycle. Hence, we used the time window size from 60 s to 180 s for the performance comparison of the proposed work.

For various time windows, the results produced by the three different classification schemes are shown in Table 5
                        . From the table, one can infer that the naive bayesian classifier achieves highest accuracy of 99% and 0.02% false positive rate approximately. The other classifiers also achieve high detection accuracy and low false positive rate due to the appropriate feature selection. From the results, we may conclude that the naive bayesian classifier is more suitable to detect the botnet effectively.

One more inference is that, almost all the three algorithms achieve high precision rate and low recall rate for all three datasets. High precision is achieved due to the large percent of the correctly classified botnet classes. Thus in both cases, the number of false alarm is very low. Recall metric does not take into consideration the number of false alarms. Therefore a classifier can have at the same time both good recall and high false alarm rate. But a high F-measure value can only be achieved if both precision and recall values are high. The F-measure value of a classifier is desired to be as high as possible and it is close to 1 indicates that the algorithm is promising.

Finally, we observe the effects of varying time window size on the detection accuracy. Fig. 8
                         shows the effects of the time window size on the detection rates and false positive rates for botnet detection. The highest accuracy is obtained when time window size is 180 s.

For the real-time deployment of the proposed method, one has to check the detection time efficiency of the selected machine learning algorithms. Hence, we have tested the efficiency of the detection system with a desktop system running Intel(R) Pentium (R) D, CPU 3.00 GHz and 2 GB of RAM. We observed that the naive bayesian classifier takes only 1.20 s, 2.04 s and 1.15 s to classify the test instances of D1, D2 and D3 datasets, respectively. The SVM classifier takes 3.06 s, 4.28 s and 3.05 s to classify the test instances of D1, D2 and D3 datasets, respectively. The Boosted decision tree takes 5.18 s, 7.29 s and 5.04 s to classify the test instances of D1, D2 and D3 datasets, respectively.

For the new botnet detection, two different botnet datasets Citadel and Kelihos from NIMS and CVUT University have been used. None of the datasets are used in designing the training model. The features are extracted from these traces with the time window size of 180 s. Table 6
                         shows the results of the new botnet detection.

The performance comparison of the proposed system with that of some state-of-art systems for botnet detection is shown in Table 7
                        . The proposed system clearly outperforms the state-of-art systems for botnet detection with high detection accuracy and very low false positive rate when detecting the new botnets. The existing detection accuracies are calculated independently by each developer. Evaluation with different traces lead to different results. However, we believe that evaluation with real / publicly available botnet traces would be better than that with self-generated botnet traces. The characteristics of the self-generated botnet traces do not follow the spatial-temporal correlation as the real / publicly available botnet traffic traces follow. The comparison result shows that the proposed method achieves better detection accuracy with less number of features than the existing methods.

To ensure the performance of the classifiers, a One-Way ANOVA with post-hoc test has been conducted. The accuracy values of 10 fold cross-validation for the three classifiers with n = 30 samples at 5% level of significance are calculated. The Table 8
                         shows the values of One-Way ANOVA test results. From the results one can infer that the Null hypothesis that all classifiers have equal average detection accuracies is rejected since there is a significant difference between these three classifiers. The pair wise comparison of classifiers with post-hoc test result is given in Table 9
                        . From Table 9, we can confirm that the Naive Bayesian classifier out performs the other two classifiers.

@&#CONCLUSION@&#

Botnets are used by attackers to perform many illegal activities such as DDoS, spamming, phishing, click fraud etc. Over the past years, even though many researchers have proposed various botnet detection techniques, there is a need for new techniques to identify new botnets irrespective of structures, command and control protocols in the early stage itself. The proposed method utilizes the fact that zombies in a botnet are most likely to have almost the same communication pattern which will be reflected in their traffic flow. The method extracts significant features from the traffic flows in specified time windows and utilizes Boosted decision tree, Naive Bayesian and SVM to classify the traffic into bot and normal traffic.

The advantages of this method over many of the existing methods are its lightweight nature, possibility to detect bot traffic even if the communications are encrypted, and detection of botnets irrespective of their control structures. It is a lightweight system since only a fraction of the total amount of data needs to be analyzed and very few features are extracted. Also, since it analyzes traffic flow behavior only, it can detect even encrypted communications. The proposed system is validated through experiments on a set of publicly available benchmark datasets such as ISOT botnet, CAIDA Conficker, ZeroAccess, Skynet, Citadel, Medfos, Sogou, Kelihos, Rbot, Virut.n, Eldorado and self-generated botnet datasets such as Zeus, Spyeye and BlackEnergy. The experimental results show that the proposed method is capable of detecting the known and new botnets effectively irrespective of their structures with high detection accuracy and low false positive rate. The performance comparison of the proposed method with the existing state-of-art detection techniques shows the efficiency of our scheme.

@&#REFERENCES@&#

