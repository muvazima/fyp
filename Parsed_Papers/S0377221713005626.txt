@&#MAIN-TITLE@&#A novel group ranking model for revealing sequence and quantity knowledge

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The aggregation of preferences into a consensus ranking is a group ranking problem.


                        
                        
                           
                           A model for finding consensus sequential patterns with linguistic terms is proposed.


                        
                        
                           
                           Experiments by synthetic and real datasets showed its efficiency and effectiveness.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Group ranking

Data mining

Sequential data

Quantitative data

Linguistic terms

@&#ABSTRACT@&#


               
               
                  The aggregation of individuals’ preferences into a consensus ranking is a group ranking problem which has been widely utilized in various applications, such as decision support systems, recommendation systems, and voting systems. Gathering the comparison of preferences and aggregate them to gain consensuses is a conventional issue. For example, b>c⩾d⩾a indicates that b is favorable to c, and c (d) is somewhat favorable but not fully favorable to d (a), where>and⩾are comparators, and a, b, c, and d are items. Recently, a new type of ranking model was proposed to provide temporal orders of items. The order, b&c→a, means that b and c can occur simultaneously and are also before a. Although this model can derive the order ranking of items, the knowledge about quantity-related items is also of importance to approach more real-life circumstances. For example, when enterprises or individuals handle their portfolios in financial management, two considerations, the sequences and the amount of money for investment objects, should be raised initially. In this study, we propose a model for discovering consensus sequential patterns with quantitative linguistic terms. Experiments using synthetic and real datasets showed the model’s computational efficiency, scalability, and effectiveness.
               
            

@&#INTRODUCTION@&#

In the field of social science, there are numerous problems which cannot be directly solved by mathematical models or structured approaches-the issue of group ranking is one of them. As participators in a group are requested to proffer opinions to obtain an outcome, their thoughts are always diverse and in conflict. As a result, the outcome may be appropriate but not optimal. The way in which the group comes to a compromise solution or reaches a consensus, therefore, is significant in group decision making. As a response, researchers have come to pay more attention to the problem of reaching a consensus in a group with divergent participators’ opinions.

To manage this kind of decision making in a group, Smith (2009) introduces six steps to success. After options have been developed and tested, fulfilling the former five steps, the final step is to choose a best solution by a consensus approach. Consensus indicates that all members can honestly say about two thoughts. First, we should be as fair and open as possible when collecting various opinions (Smith, 2009). Nowadays, the assistance of information technologies (IT) can help us to meet this requirement. We can gather opinions from the Internet or a communication system in a company. Everyone can receive information openly and provide their opinions fairly. Second, when collecting a myriad of opinions, a group must consolidate and aggregate them to reach a consensus or the best result for the group at the time (Smith, 2009). This thought is not easy to reach because the process of generating a consensus from a great diversity of opinions leads to problems of conflict. Therefore, finding a way to resolve conflicts to gain a consensus in a group is the core of the group ranking problem.

The group ranking problem has been investigated for more than two centuries (Cook, 2006) and has been applied to many fields, such as recommendation systems (Chen & Cheng, 2008), decision support systems (Cook, Golany, Kress, Penn, & Raviv, 2005; Huang, Chang, Li, & Lin, 2013), machine learning (Fagin, Kumar, & Sivakumar, 2003), and sport tournaments (Moon, 1968). In recommendation systems, we can consider more recommendations for items, such as books, CDs, and other products, through group rating. For example, in a recommendation system, five users have rated four books, a, b, c, and d, based on their preferences as (1) c>a>d>b, (2) c⩾a⩾d>b, (3) a>c>d>b, (4) c>a⩾d⩾b, and (5) c>a>d⩾b, where>denotes the former is favorable to the latter, and⩾denotes the former is somewhat favorable but not fully favorable to the latter. As a result, we generally realize that the purchasing order of the four books suggested by users is c first, and then a, d, and finally b. As in this example, the goal is to aggregate each user’s ranking and ultimately show an outcome. However, a conflict has occurred in this case, that is, user (3) has a different preference about a>c than the others, and has to be dealt with further.

Recently, Chang (2011) proposed a new type of preference ranking model which can provide temporal orders between items. For example, three users have given their orders as (1) b→d&a→c, (2) b→d→a→c, and (3) b→a&d→c, where → denotes that the latter occurs after the former and & denotes that the former and latter can occur together. After consolidating and aggregating them, we have two consensuses, b→d→c and b→a→c, but there is a conflict between a&d and a→d. This conflict is represented by a∼d, where ∼ denotes that the preceding item can occur together with or before the succeeding one (Chang, 2011). The model can be applied to many fields, such as portfolios of investments, the order of treatment for diseases, course plans in colleges, and the reading order of books. Take portfolios of investments for example, when investors choose different kinds of investment objects, they invest in objects by considering different sequences to divert risks. An outcome, 〈(conventional stock)&(Asia fund)→(real estate and property)〉, represents that after investing in conventional stock and an Asia fund, investors are then advised to invest in real estate and property. In this example, we see that researching temporal orders between items is interesting and necessary in real-life circumstances.

Although the approach of Chang (2011) can gain the order ranking of items, the knowledge about quantity-related items is also of importance when approaching more real-life circumstances. For instance, when enterprises or individuals handle their portfolios in financial management, two considerations, the sequences and the amount of money for investment objects, should be raised initially. Then, the outcome, 〈(conventional stock, Middle)&(Asia fund, High)→(real estate and property, Low)>, provides more referrals for investors, where Low, Middle, and High are linguistic terms for purchased quantities. This means that having invested in conventional stock in Middle quantities and the Asia fund in High quantities, investors should then invest in real estate and property in Low quantities. This certainly provides investors with more knowledge. No studies, to the best of our knowledge, have ever developed this type of group ranking model for disclosing sequence and quantity knowledge from the preference data and identifying conflicts. In this study, therefore, we propose a model following the idea of mining frequent patterns (MFP) to discover consensus sequential patterns with quantitative linguistic terms (Han & Kamber, 2006).

There are two reasons why we adopt the idea of MFP in the data-mining field to aggregate preferences into consensus patterns. The first is that MFP is to find common subsequences within users’ preferences. MFP can discover all possible common subsequences preliminarily. The second is that the support mechanism in MFP is similar to the voting one in democracy. Therefore, when a subsequence is over the threshold, we can say that this subsequence is of consensus from the certain ratio of users’ agreements.

There are three advantages to applying linguistic terms in our proposed model. First, the knowledge of users can be represented more naturally and appropriately by linguistic terms. Verbal communication with linguistic terms is preferred for the exchange of soft knowledge. Second, it is widely acknowledged that many real-life situations are intrinsically brief, and the partition of quantity information into linguistic terms is one such situation (Watson & Frolick, 1993). We may not like to confront a lot of statistic data but are willing to read the summary with linguistic terms systematized from these statistic data. Third, using linguistic terms is simple and easy for human beings and is an important tool for solving problems (Herrera, Herrera-Viedma, & Martínez, 2008; Kao & Liu, 1997; Mitra, Pal, & Mitra, 2002).

This paper is organized as follows. Section 2 reviews related works. Section 3 formally defines the problem. A new algorithm, consensus sequential pattern mining (CSPM), to discover patterns with quantitative linguistic terms and conflicts is developed in Section 4. Section 5 describes experiments that evaluate the efficiency, scalability, and effectiveness of the CSPM algorithm. Finally, conclusions and implications are presented in Section 6.

@&#RELATED WORK@&#

In this section, we review managerial studies related to the group ranking problem in Sections 2.1 and 2.2. After that, we provide the review of technical studies of sequential pattern mining in Sections 2.3 and 2.4.

As we enter postindustrial societies, authorities increasingly rely on knowledge and competence in organizations and decision making should be more decentralized (Laudon & Laudon, 2007). Many decisions are made by groups of professionals, not only by a minority of executives. We think that unstructured or semi-structured problems could be solved by the former more effectively than the latter. As the Chinese saying goes, however, where there are too many people trying to do something, they make a mess of it. Hence, the crux of group decision making is to gain compromise solutions and deal with discrepancies when combining group members’ preferences.

Making group decisions takes a variety of forms and ranking is one of them. This is also called the group ranking problem. Dealing with this type of problem, there are generally three topics which can be discussed (Chen & Cheng, 2009). The first is the input format in which user preferences are collected and expressed. The second is the input completeness of preferences given by users. Finally, the last talks about the work of combining these preferences into compromise solutions. Generally, users express their thoughts by three approaches. The first is to acquire them by assigning rates, e.g. 5-Likert or 7-Likert scales, to the assigned items. For example in a 5-Likert scale, a user can choose one level of his/her preference for an item among strongly dislike, dislike, neutral, like, or strongly like. Fuzzy number ranking methods also can be applied to provide the uncertain preference of a user (Chen & Cheng, 2005). The second is to acquire them by providing a set of pair-wise comparisons for all alternatives (Cook, 2006; Jabeur & Martel, 2007). For example, if there are two items, a and b, a user can provide the following possible comparisons:
                           
                              (1)
                              He/she prefers a over b, denoted as a>b.

He/she prefers b over a, denoted as b>a.

He/she is indifferent between a and b, denoted as a=b.

The last is to provide ranking lists for the assigned items (Chen & Cheng, 2009, 2010). For example, if there are six items, a, b, c, d, e, and f, a user ranks the list of the first, second, third, fourth, fifth, and sixth preferences as (c, d, a, e, f, b). When inputting the preferences, users are required to provide two types of rankings, the full ranking approach (Borda, 1981; Fagin et al., 2003; Kemeny & Snell, 1962) and the partial ranking approach (Bogart, 1975; Cook, Golany, Penn, & Raviv, 2007; Cook, Kress, & Seiford, 1986, 1996; Greco, Mousseau, & Slowinski, 2008). For this example, the full ranking of the six items is (c, d, a, e, f, b), and the partial ranking of the six items is (c, a, e, f), lacking the ranking of items b and d. Users inputting their rankings to present their preferences can be called the input mode. As a result, the compromise outcomes can be of two types, full and partial orders, by using the full and partial ranking approaches, respectively. Therefore, the generation of compromise outcomes by computing the inputs of all users’ preferences is called the output mode. In our proposed model, however, users are allowed to offer the same item repeatedly to their ranking lists so that this might exist a situation that the same item appears in an outcome multiple times. Because the input and output modes are both different from the traditional ones, we refer to the input as the extra ranking approach and the output as extra order.


                        Chang (2011) was the first to address the topic of group ranking in temporal preferences between items with a closed idea. An algorithm, called the closed consensus temporal mining (CCTM), was presented to discover closed consensus temporal patterns. It was developed by modifying the well-known GSP (Generalized Sequential Patterns) algorithm (Srikant & Agrawal, 1996).

In the CCTM algorithm, there are two steps which are repeatedly executed to generate patterns. The first step generates candidate temporal sequences of length l, denoted by Cl
                        , from the frequent consensus temporal sequences of length l
                        −1, denoted by Ll
                        
                        −1. In each cycle, one more item and its time relation (→, &, or ∼) will be added to each candidate sequence, based on the frequent sequences in the preceding cycle. After discovering all candidate sequences, the second step scans a database once to determine the support of each candidate sequence, and the result consists of all frequent patterns of length l. Also, the algorithm deals with conflict cases in which the ratio of two time relations between items reaches a specified conflict threshold. The research results showed that their model discovers interesting patterns to provide more concise knowledge and reduce information overloading.

Sequential pattern mining (SPM) was first introduced in the mid-1990s, when it was shown that patterns occur frequently in sequence databases (Agrawal & Srikant, 1995). For example, suppose that 55% of customers return to buy two items, b and c, after buying item a. The sequence of items, 〈a (b, c)〉, is called a sequential pattern with a support of 55%, where its support is over a user-specified minimum support threshold. In an SPM problem, these patterns are found from a sequence database, of which data are automatically gathered by information systems or technologies. We call the data-collection approach the objective mode, because its data source is naturally collected by human behaviors without intervening with them. In our research problem, however, the data source (data sequences) is manually gathered by asking for human thinking; hence, we can call it the subjective mode.

SPM has been successfully applied to real circumstances, and its extensions have been proposed in many applications. One such application is taking into account the quantity variable. The investigation of an SPM with quantitative data can reveal more abundant information for users. Kim, Lim, Ng, and Shim (2007) studied the issue of mining sequential patterns with quantities and proposed extensions to the Apriori and PrefixSpan algorithms. The quantity type of patterns is crisp. For example, 〈[beer, 10] [cola, 4]〉 means that after purchasing ‘10’ beers, a customer will return to purchase ‘4’ colas. Compared with crisp, Hong, Kuo, and Chi (1999) proposed an approach to discover quantitative sequential patterns with fuzzy linguistic terms. For example, 〈[beer, Middle] [cola, Low]〉 means that after purchasing beer in ‘Middle’ quantities, a customer will return to purchase cola in ‘Low’ quantities. Since the algorithm proposed by Hong et al. (1999) is inefficient, Chen and Huang (2006) employed the divide-and-conquer strategy to develop a more efficient algorithm.

Although the model proposed by Hong et al. (1999) is similar to our model, there are still two differences. First, they used membership functions to tally the support value, regarding the non-integral range from 0 to 1; however, we only count either 0 or 1. Second, our proposed model tackles the issue of the conflict identification, which is void of their model. To describe the differences and application between our and prior studies, we provide comparison data in Table 1
                        .

In this section, we formally define the problem of mining consensus sequential patterns with quantitative linguistic terms in temporal ranking datasets.

Here we first give a brief example to illustrate the problem definition for ease of understanding. Given the temporal ranking dataset TRD for the problem of portfolio management shown in Table 2
                     , we may have a candidate pattern such as 〈(Real estate and properties in Taipei city, Middle)&(Hi-tech stock, Low)→(European dollar, Low)〉, meaning after investing in Real estate and properties in Taipei city and Hi-tech stock in middle and low quantities, investors are recommended to put money into European dollar in low quantities. There are two quantitative sequences in the database that can contain this pattern: quantitative sequences 04 and 05. Afterward summing these supports and dividing by the total number of sequences yields the final support value as (1+1)/5=0.4. If the support value of the candidate pattern is larger than or equal to a minimum support threshold, it is called a consensus sequential pattern with quantitative linguistic terms.

Let UID
                     ={u
                     1, u
                     2, …, um
                     } be the set of user identifiers and I
                     ={i
                     1, i
                     2, …, in
                     } be the set of distinct items in a temporal ranking dataset TRD. A lt-item is a pair consisting of an item and its linguistic term, denoted as (i, lt), where 
                        
                           i
                           ∈
                           I
                        
                      and 
                        
                           lt
                           ∈
                           LT
                        
                     
                     . LT is a set of linguistic terms for quantities, and the quantity range of each linguistic term prompted to users is specified by decision makers. Each user identifier uid
                      (1⩽
                     id
                     ⩽
                     m) has provided a quantitative sequence (or q-sequence) in accordance with his/her preference. Let sid
                      be a q-sequence for the user identifier uid
                      and be defined as:
                        
                           
                              
                                 
                                    s
                                 
                                 
                                    id
                                 
                              
                              =
                              〈
                              (
                              
                                 
                                    i
                                 
                                 
                                    k
                                    1
                                 
                              
                              ,
                              
                                 
                                    lt
                                 
                                 
                                    k
                                    1
                                 
                              
                              )
                              
                                 
                                    ⊗
                                 
                                 
                                    1
                                 
                              
                              (
                              
                                 
                                    i
                                 
                                 
                                    k
                                    2
                                 
                              
                              ,
                              
                                 
                                    lt
                                 
                                 
                                    k
                                    2
                                 
                              
                              )
                              
                                 
                                    ⊗
                                 
                                 
                                    2
                                 
                              
                              …
                              (
                              
                                 
                                    i
                                 
                                 
                                    kn
                                    -
                                    1
                                 
                              
                              ,
                              
                                 
                                    lt
                                 
                                 
                                    kn
                                    -
                                    1
                                 
                              
                              )
                              
                                 
                                    ⊗
                                 
                                 
                                    n
                                    -
                                    1
                                 
                              
                              (
                              
                                 
                                    i
                                 
                                 
                                    kn
                                 
                              
                              ,
                              
                                 
                                    lt
                                 
                                 
                                    kn
                                 
                              
                              )
                              〉
                              ,
                              
                              where
                              
                              1
                              ⩽
                              id
                              ⩽
                              m
                              ,
                              
                                 
                                    i
                                 
                                 
                                    kj
                                 
                              
                              ∈
                              I
                              ,
                              
                                 
                                    lt
                                 
                                 
                                    kj
                                 
                              
                              ∈
                              LT
                              ,
                              1
                              ⩽
                              j
                              ⩽
                              n
                              ,and
                              
                              
                                 
                                    ⊗
                                 
                                 
                                    l
                                 
                              
                              ∈
                              {
                              &
                              ,
                              →
                              ,
                              ∼
                              }
                              ,
                              1
                              ⩽
                              l
                              <
                              n
                              .
                           
                        
                     The time relation (i.e. ⊗) “&” means that the preceding and succeeding lt-items occur together. The time relation “→” indicates that the succeeding lt-item occurs after the preceding one. Finally, the time relation “∼” means that the preceding lt-item can occur together with or before the succeeding one; that is, the time relation between them can hold either & or →.

For example, we have I
                     ={a, b, c, d, e, f, g, h, i} and 
                        
                           ⊗
                           ∈
                        
                      {&, 
                        
                           →
                           ,
                           ∼
                        
                     } and give a set of linguistic terms for quantities as LT
                     ={Low, Middle, High, *}, where 1⩽Low<10, 10⩽Middle<20, and 20⩽High⩽∞. Notably, the element * in LT denotes that the linguistic term of an lt-item can include all elements in LT except itself; it is also represented as “doesn’t matter”. For instance, an lt-item (h, *) represents that the linguistic term of item h can be Low, Middle, or High. There are two q-sequences provided by users u
                     1 and u
                     2 as s
                     1
                     =〈(g, Low)→(a, Low)→(f, High)→(b, High)→(c, Low)&(f, Low)→(d, Middle)→(h, Low)〉 and s
                     2
                     =〈(f, Middle)&(g, Low)→(d, Middle)&(i, Low)∼(h, *)〉. The total number of lt-items in a q-sequence is the length of the sequence. A q-sequence whose length is l is referred to as an l-q-sequence. Hence, we say that s
                     1 is an 8-q-sequence and s
                     2 is a 5-q-sequence. After introducing the concept of the q-sequence, we then employ it to define the following notions.
                        Definition 1
                        Given a q-sequence s
                           =〈(ikx
                           , ltkx
                           ) ⊗
                              x
                            … ⊗
                              y
                           
                           −1 (iky
                           , ltky
                           ) …〉 whose length is n, a function to get the time relation between two lt-items, TR(s, 
                              
                                 
                                    
                                       (
                                       
                                          
                                             i
                                          
                                          
                                             kx
                                          
                                       
                                       ,
                                       
                                       
                                          
                                             lt
                                          
                                          
                                             kx
                                          
                                       
                                       )
                                    
                                    
                                       
                                          
                                             p
                                          
                                          
                                             kx
                                          
                                       
                                    
                                 
                              
                           , 
                              
                                 
                                    
                                       (
                                       
                                          
                                             i
                                          
                                          
                                             ky
                                          
                                       
                                       ,
                                       
                                       
                                          
                                             lt
                                          
                                          
                                             ky
                                          
                                       
                                       )
                                    
                                    
                                       
                                          
                                             p
                                          
                                          
                                             ky
                                          
                                       
                                    
                                 
                              
                           ), is defined as:

If 
                                 
                                    ∀
                                    
                                       
                                          ⊗
                                       
                                       
                                          j
                                       
                                    
                                    ∈
                                 
                               
                              “&”, for 1⩽
                              x
                              ⩽
                              j
                              <
                              y
                              ⩽
                              n, then TR(s, 
                                 
                                    
                                       
                                          (
                                          
                                             
                                                i
                                             
                                             
                                                kx
                                             
                                          
                                          ,
                                          
                                          
                                             
                                                lt
                                             
                                             
                                                kx
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                kx
                                             
                                          
                                       
                                    
                                 
                              , 
                                 
                                    
                                       
                                          (
                                          
                                             
                                                i
                                             
                                             
                                                ky
                                             
                                          
                                          ,
                                          
                                          
                                             
                                                lt
                                             
                                             
                                                ky
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                ky
                                             
                                          
                                       
                                    
                                 
                              ) is equal to “&”;

If 
                                 
                                    ∃
                                    
                                       
                                          ⊗
                                       
                                       
                                          j
                                       
                                    
                                    ∈
                                 
                              
                              “→”, for 1⩽
                              x
                              ⩽
                              j
                              <
                              y
                              ⩽
                              n, then TR(s, 
                                 
                                    
                                       
                                          (
                                          
                                             
                                                i
                                             
                                             
                                                kx
                                             
                                          
                                          ,
                                          
                                          
                                             
                                                lt
                                             
                                             
                                                kx
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                kx
                                             
                                          
                                       
                                    
                                 
                              , 
                                 
                                    
                                       
                                          (
                                          
                                             
                                                i
                                             
                                             
                                                ky
                                             
                                          
                                          ,
                                          
                                          
                                             
                                                lt
                                             
                                             
                                                ky
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                ky
                                             
                                          
                                       
                                    
                                 
                              ) is equal to “→”;

If 
                                 
                                    ∃
                                    
                                       
                                          ⊗
                                       
                                       
                                          j
                                       
                                    
                                    ∈
                                 
                              
                              “∼”, for 1⩽
                              x
                              =
                              j
                              <
                              y
                              =
                              x
                              +1⩽
                              n, then TR(s, 
                                 
                                    
                                       
                                          (
                                          
                                             
                                                i
                                             
                                             
                                                kx
                                             
                                          
                                          ,
                                          
                                          
                                             
                                                lt
                                             
                                             
                                                kx
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                kx
                                             
                                          
                                       
                                    
                                 
                              , 
                                 
                                    
                                       
                                          (
                                          
                                             
                                                i
                                             
                                             
                                                ky
                                             
                                          
                                          ,
                                          
                                          
                                             
                                                lt
                                             
                                             
                                                ky
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                p
                                             
                                             
                                                ky
                                             
                                          
                                       
                                    
                                 
                              ) is equal to “∼”;

If 
                                 
                                    ∃
                                    
                                       
                                          ⊗
                                       
                                       
                                          j
                                       
                                    
                                    ∈
                                 
                              
                              “∼”, for 1⩽
                              x
                              <
                              j
                              <
                              y
                              ⩽
                              n, then
                                 
                                    ■
                                    if 
                                          
                                             ∃
                                             
                                                
                                                   ⊗
                                                
                                                
                                                   j
                                                
                                             
                                             ∈
                                          
                                       
                                       “→”, for y’=
                                       y
                                       +1 and 1⩽
                                       x
                                       ⩽
                                       j
                                       <
                                       y’⩽
                                       n, then TR(s, 
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         i
                                                      
                                                      
                                                         kx
                                                      
                                                   
                                                   ,
                                                   
                                                   
                                                      
                                                         lt
                                                      
                                                      
                                                         kx
                                                      
                                                   
                                                   )
                                                
                                                
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         kx
                                                      
                                                   
                                                
                                             
                                          
                                       , 
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         i
                                                      
                                                      
                                                         ky
                                                      
                                                   
                                                   ,
                                                   
                                                   
                                                      
                                                         lt
                                                      
                                                      
                                                         ky
                                                      
                                                   
                                                   )
                                                
                                                
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         ky
                                                      
                                                   
                                                
                                             
                                          
                                       ) is equal to “→”;

otherwise, TR(s, 
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         i
                                                      
                                                      
                                                         kx
                                                      
                                                   
                                                   ,
                                                   
                                                   
                                                      
                                                         lt
                                                      
                                                      
                                                         kx
                                                      
                                                   
                                                   )
                                                
                                                
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         kx
                                                      
                                                   
                                                
                                             
                                          
                                       , 
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         i
                                                      
                                                      
                                                         ky
                                                      
                                                   
                                                   ,
                                                   
                                                   
                                                      
                                                         lt
                                                      
                                                      
                                                         ky
                                                      
                                                   
                                                   )
                                                
                                                
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         ky
                                                      
                                                   
                                                
                                             
                                          
                                       ) is equal to “∼”.

where (ikx
                     , ltkx
                     ) and (iky
                     , ltky
                     ) are lt-items and pkx
                      and pky
                      are the positions of (ikx
                     , ltkx
                     ) and (iky
                     , ltky
                     ) in s. The position of an lt-item in s is one plus the number of lt-items preceding it.
                        Example 1
                        Suppose we have two q-sequences s
                           1
                           =〈(a, Low)→(a, Low)→(b, High)→(c, Low)→(b, High)→(c, Low)&(a, High)→(f, Middle)→(d, Middle)〉 (n
                           =9) and s
                           2
                           =〈(f, Middle)&(g, Low)→(d, Middle)&(i, Low)∼(h, *)〉 (n
                           =5). Then some time relations between two lt-items in s
                           1 and s
                           2 are:


                              TR(s
                              1, (a, Low)1, (c, Low)6)=“→”, TR(s
                              1, (c, Low)6, (a, High)7)=“&”, TR(s
                              1, (c, Low)6, (d, Middle)9)=“→”, and TR(s
                              1, (b, High)3, (b, High)5)=“→”;


                              TR(s
                              2, (f, Middle)1, (d, Middle)3)=“→”, TR(s
                              2, (g, Low)2, (h, *)5)=“→”, and TR(s
                              2, (d, Middle)3, (h, *)5)=“∼”.

Let sα
                           
                           =〈(a
                           1, lt
                           1) ⊗1 (a
                           2, 
                              lt
                              2
                           ) ⊗2 ⋯ (an
                           
                           −1, ltn
                           
                           −1) ⊗
                              n
                           
                           −1 (an
                           , ltn
                           )〉 be a q-sequence and 
                              
                                 
                                    
                                       s
                                    
                                    
                                       β
                                    
                                 
                                 =
                                 〈
                                 (
                                 
                                    
                                       b
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       lt
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 
                                    
                                       ⊗
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                                 (
                                 
                                    
                                       b
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 
                                    
                                       lt
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 
                                    
                                       ⊗
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                                 ⋯
                                 (
                                 
                                    
                                       b
                                    
                                    
                                       m
                                       -
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       lt
                                    
                                    
                                       m
                                       -
                                       1
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 
                                    
                                       ⊗
                                    
                                    
                                       m
                                       -
                                       1
                                    
                                    
                                       ′
                                    
                                 
                                 (
                                 
                                    
                                       b
                                    
                                    
                                       m
                                    
                                 
                                 ,
                                 
                                    
                                       lt
                                    
                                    
                                       m
                                    
                                    
                                       ′
                                    
                                 
                                 )
                                 〉
                              
                            be another q-sequence, where m⩽n. sβ
                            is contained in sα
                            if there are integers 1⩽
                           j
                           1
                           <
                           j
                           2
                           <⋯<
                           jm
                           
                           −1
                           <
                           jm
                           
                           ⩽
                           n in sα
                            satisfying the following:


                              b
                              1
                              =
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                 
                              , b
                              2
                              =
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          2
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              =
                              ltj2
                              , …, bm−1
                              
                              =
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                m
                                                -
                                                1
                                             
                                          
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          m
                                          -
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                m
                                                -
                                                1
                                             
                                          
                                       
                                    
                                 
                              , and bm
                                 
                              =
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                m
                                             
                                          
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          m
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                m
                                             
                                          
                                       
                                    
                                 
                              ;


                              TR(sβ
                              , (b
                              1, 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                 
                              )1, (b
                              2, 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          2
                                       
                                       
                                          ′
                                       
                                    
                                 
                              )2)=
                              TR(sα
                              , (
                                 
                                    
                                       
                                          a
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                 
                              , 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                 
                              ), (
                                 
                                    
                                       
                                          a
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                              , 
                                 
                                    
                                       
                                          
                                             
                                                lt
                                             
                                             
                                                
                                                   
                                                      j
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                              )=
                              
                                 
                                    
                                       
                                          ⊗
                                       
                                       
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                 
                              , TR(sβ
                              , (b
                              2, 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          2
                                       
                                       
                                          ′
                                       
                                    
                                 
                              )2, (b
                              3, 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          3
                                       
                                       
                                          ′
                                       
                                    
                                 
                              )3)=
                              TR(sα
                              , 
                                 
                                    
                                       
                                          (
                                          
                                             
                                                a
                                             
                                             
                                                
                                                   
                                                      j
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                          
                                             
                                                lt
                                             
                                             
                                                
                                                   
                                                      j
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                              ), (
                                 
                                    
                                       
                                          (
                                          
                                             
                                                a
                                             
                                             
                                                
                                                   
                                                      j
                                                   
                                                   
                                                      3
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                          
                                             
                                                lt
                                             
                                             
                                                
                                                   
                                                      j
                                                   
                                                   
                                                      3
                                                   
                                                
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                3
                                             
                                          
                                       
                                    
                                 
                              )=
                              
                                 
                                    
                                       
                                          ⊗
                                       
                                       
                                          2
                                       
                                       
                                          ′
                                       
                                    
                                 
                              , …, TR(sβ
                              , (bm−1
                              , 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          m
                                          -
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                 
                              )
                                 m−1
                              , (bm
                              , 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          m
                                       
                                       
                                          ′
                                       
                                    
                                 
                              )
                                 m
                              )=
                              TR(sα
                              , 
                                 
                                    
                                       
                                          (
                                          
                                             
                                                a
                                             
                                             
                                                
                                                   
                                                      j
                                                   
                                                   
                                                      m
                                                      -
                                                      1
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                             
                                                lt
                                             
                                             
                                                
                                                   
                                                      j
                                                   
                                                   
                                                      m
                                                      -
                                                      1
                                                   
                                                
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                m
                                                -
                                                1
                                             
                                          
                                       
                                    
                                 
                              , 
                                 
                                    
                                       
                                          (
                                          
                                             
                                                a
                                             
                                             
                                                
                                                   
                                                      j
                                                   
                                                   
                                                      m
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                          
                                             
                                                lt
                                             
                                             
                                                
                                                   
                                                      j
                                                   
                                                   
                                                      m
                                                   
                                                
                                             
                                          
                                          )
                                       
                                       
                                          
                                             
                                                j
                                             
                                             
                                                m
                                             
                                          
                                       
                                    
                                 
                              )=
                              
                                 
                                    
                                       
                                          ⊗
                                       
                                       
                                          m
                                          -
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                 
                              .

Suppose we have five q-sequences sα
                           
                           =〈(f, Middle)&(g, Low)→(d, Middle)&(i, Low)∼(h, *)〉, 
                              
                                 
                                    
                                       s
                                    
                                    
                                       
                                          
                                             β
                                          
                                          
                                             1
                                          
                                       
                                    
                                 
                              
                           
                           =〈(f, Middle)→(i, Low)〉, 
                              
                                 
                                    
                                       s
                                    
                                    
                                       
                                          
                                             β
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                           
                           =〈(f, Middle)&(g, Low)〉, 
                              
                                 
                                    
                                       s
                                    
                                    
                                       
                                          
                                             β
                                          
                                          
                                             3
                                          
                                       
                                    
                                 
                              
                           
                           =〈(g, Low)→(i, Low)∼(h, *)〉, and 
                              
                                 
                                    
                                       s
                                    
                                    
                                       
                                          
                                             β
                                          
                                          
                                             4
                                          
                                       
                                    
                                 
                              
                           
                           =〈(g, Low)∼(h, *)〉. Then 
                              
                                 
                                    
                                       s
                                    
                                    
                                       
                                          
                                             β
                                          
                                          
                                             1
                                          
                                       
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       s
                                    
                                    
                                       
                                          
                                             β
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 ,
                                 
                                 and
                                 
                                 
                                    
                                       s
                                    
                                    
                                       
                                          
                                             β
                                          
                                          
                                             3
                                          
                                       
                                    
                                 
                              
                            are contained in sα
                           , because there exist distinct integers j
                           1
                           =1 and j
                           2
                           =4 for 
                              
                                 
                                    
                                       s
                                    
                                    
                                       
                                          
                                             β
                                          
                                          
                                             1
                                          
                                       
                                    
                                 
                              
                           , j
                           1
                           =1 and j
                           2
                           =2 for 
                              
                                 
                                    
                                       s
                                    
                                    
                                       
                                          
                                             β
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                           , and j
                           1
                           =2, j
                           2
                           =4, and j
                           3
                           =5 for 
                              
                                 
                                    
                                       s
                                    
                                    
                                       
                                          
                                             β
                                          
                                          
                                             3
                                          
                                       
                                    
                                 
                              
                           , such that:


                              
                                 
                                    
                                       
                                          s
                                       
                                       
                                          
                                             
                                                β
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                 
                               is contained in sα
                               because of:
                                 
                                    1.
                                    f=f and Middle=Middle and i=i and Low=Low;


                                       TR(
                                          
                                             
                                                
                                                   s
                                                
                                                
                                                   
                                                      
                                                         β
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                
                                             
                                          
                                       , (f, Middle)1, (i, Low)2)=
                                       TR(sα
                                       , (f, Middle)1, (i, Low)4)=“→”.


                              
                                 
                                    
                                       
                                          s
                                       
                                       
                                          
                                             
                                                β
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                               is contained in sα
                               because of:
                                 
                                    1.
                                    f=f and Middle=Middle and g=g and Low=Low;


                                       TR(
                                          
                                             
                                                
                                                   s
                                                
                                                
                                                   
                                                      
                                                         β
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                             
                                          
                                       , (f, Middle)1, (g, Low)2)=
                                       TR(sα
                                       , (f, Middle)1, (g, Low)2)=“&”.


                              
                                 
                                    
                                       
                                          s
                                       
                                       
                                          
                                             
                                                β
                                             
                                             
                                                3
                                             
                                          
                                       
                                    
                                 
                               is contained in sα
                               because of:
                                 
                                    1.
                                    g=g and Low=Low, i=i and Low=Low, and h=h and *=*;


                                       TR(
                                          
                                             
                                                
                                                   s
                                                
                                                
                                                   
                                                      
                                                         β
                                                      
                                                      
                                                         3
                                                      
                                                   
                                                
                                             
                                          
                                       , (g, Low)1, (i, Low)2)=
                                       TR(sα
                                       , (g, Low)2, (i, Low)4)=“→” and TR(
                                          
                                             
                                                
                                                   s
                                                
                                                
                                                   
                                                      
                                                         β
                                                      
                                                      
                                                         3
                                                      
                                                   
                                                
                                             
                                          
                                       , (i, Low)2, (h, *)3)=
                                       TR(sα
                                       , (i, Low)4, (h, *)5)=“∼”.

However, 
                        
                           
                              
                                 s
                              
                              
                                 
                                    
                                       β
                                    
                                    
                                       4
                                    
                                 
                              
                           
                        
                      is not contained in sα
                      since TR(
                        
                           
                              
                                 s
                              
                              
                                 
                                    
                                       β
                                    
                                    
                                       4
                                    
                                 
                              
                           
                        
                     , (g, Low)1, (h, *)2)=“∼” is not equal to TR(sα
                     , (g, Low)2, (h, *)5)=“→”.
                        Definition 3
                        A q-sequence sγ
                           
                           =〈(r
                           1, 
                              
                                 
                                    
                                       lt
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                              
                           ) 
                              
                                 
                                    
                                       ⊗
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                              
                            (r
                           2, 
                              
                                 
                                    
                                       lt
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                              
                           ) 
                              
                                 
                                    
                                       ⊗
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                              
                           … (rm
                           
                           −1, 
                              
                                 
                                    
                                       lt
                                    
                                    
                                       m
                                       -
                                       1
                                    
                                    
                                       ′
                                    
                                 
                              
                           ) 
                              
                                 
                                    
                                       ⊗
                                    
                                    
                                       m
                                       -
                                       1
                                    
                                    
                                       ′
                                    
                                 
                              
                            (rm
                           , 
                              
                                 
                                    
                                       lt
                                    
                                    
                                       m
                                    
                                    
                                       ′
                                    
                                 
                              
                           )〉 is a subsequence of q-sequence sα
                           
                           =〈(a
                           1, lt
                           1) ⊗1 (a
                           2, lt
                           2) ⊗2 ⋯ (an
                           
                           −1, ltn
                           
                           −1) ⊗
                              n
                           
                           −1 (an
                           , ltn
                           )〉, where m⩽n, if there are integers 1
                              
                                 ⩽
                              
                            
                           k
                           1
                           <
                           k
                           2
                           <⋯<
                           km
                           
                           -1
                           <
                           km
                            
                           
                              
                                 ⩽
                              
                            
                           n in sα
                            satisfying the following:


                              r
                              1
                              =
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                 
                              , r
                              2
                              =
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          2
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                              , …, rm−1
                              
                              =
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                m
                                                -
                                                1
                                             
                                          
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          m
                                          -
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                m
                                                -
                                                1
                                             
                                          
                                       
                                    
                                 
                              , and rm
                                 
                              =
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                m
                                             
                                          
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          m
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          lt
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                m
                                             
                                          
                                       
                                    
                                 
                              ;


                              
                                 
                                    
                                       
                                          ⊗
                                       
                                       
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                    
                                    =
                                    
                                    ⊗
                                    
                                       
                                          
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                 
                              , 
                                 
                                    
                                       
                                          ⊗
                                       
                                       
                                          2
                                       
                                       
                                          ′
                                       
                                    
                                    
                                    =
                                    
                                    ⊗
                                    
                                       
                                          
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                              , …, 
                                 
                                    
                                       
                                          ⊗
                                       
                                       
                                          m
                                          -
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                    =
                                    
                                       
                                          ⊗
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                m
                                                -
                                                1
                                             
                                          
                                       
                                    
                                 
                              .

Suppose we have two q-sequences sα
                           
                           =〈(a, Low)→(a, Low)→(b, High)→(c, Low)→(b, High)→(c, Low)&(a, High)→(f, Middle)→(d, Middle)〉 and sγ
                           
                           =〈(a, Low)→(a, Low)→(b, High)〉. Then sγ
                            is called the subsequence of sα
                            because distinct integers k
                           1
                           =1, k
                           2
                           =2, and k
                           3
                           =3 exist so that: (1) a
                           1
                           =
                           r
                           1
                           =a, a
                           2
                           =
                           r
                           2
                           =a, and a
                           3
                           =
                           r
                           3
                           =b and 
                              
                                 
                                    
                                       lt
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                           =
                           lt
                           1
                           =Low, 
                              
                                 
                                    
                                       lt
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                           =
                           lt
                           2
                           =Low, and 
                              
                                 
                                    
                                       lt
                                    
                                    
                                       3
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                           =
                           lt
                           3
                           =High and (2) 
                              
                                 
                                    
                                       ⊗
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                              
                           = ⊗
                           1=“→” and 
                              
                                 
                                    
                                       ⊗
                                    
                                    
                                       2
                                    
                                    
                                       ′
                                    
                                 
                              
                           = ⊗
                           2=“→”.

A data sequence is represented by (u, s), where u is a user identifier and s is a q-sequence. A temporal ranking dataset TRD is formed from a set of data sequences (u, s).
                        Definition 4
                        For a given q-sequence β, its support in database TRD is defined as:

As for the idea of consensus decision making (Smith, 2009), consensus is a negotiation approach ensuring that a group can share their understanding, and finally all the members reach an agreement by majority voting. Accordingly, we propose the idea of a minimum support threshold to filter out the q-sequences of which supports do not reach a majority consensus.

Given a positive value min_sup as the minimum support threshold, a q-sequence β is called a consensus sequential pattern with quantitative linguistic terms or a frequent consensus sequence if the support of β is no less than min_sup. Such a pattern with a length is k is referred to as a k-consensus sequential pattern (k-CSP).
                        Property 1
                        Downward-Closure Property


                        
                           If a q-sequence is frequent, so are all of its subsequences. Conversely, if a q-sequence is not frequent, neither is its super sequence.
                        

In this section, we propose the consensus sequential pattern mining (CSPM) algorithm to find consensus sequential patterns with quantitative linguistic terms. Section 4.1 describes the differences between the CSPM and traditional algorithms. Section 4.2 introduces the proposed algorithm and Section 4.3 provides an example to easily understand the whole process of the CSPM algorithm.

The CSPM algorithm is developed by modifying the well-known GSP algorithm (Srikant & Agrawal, 1996). However, there are four major differences between the CSPM and GSP algorithms.
                           
                              1.
                              The CSPM algorithm can find conflicts, i.e. the time-relation and quantity contradictions, from the subjective data, whereas the GSP algorithm does not handle this issue for the objective data. Although the difference stems from the nature of the research problem, the algorithmic logic of the CSPM algorithm still has to be reconsidered and modified and cannot be directly employed by that of the GSP algorithm.

The GSP algorithm was proposed to discover sequential patterns, considering two cases of time relation, co-occurrence or order, between items. However, in the CSPM algorithm, we added one more time relation ∼, specially provided for users when they cannot express definite opinions.

For detecting conflicts, the CSPM algorithm harnesses a tolerant mechanism, a conflict threshold θ, to avoid redundant conflicts; however, the GSP algorithm does not. For example, if the support of 〈(c, Low)&(a, High)〉 divided by that of 〈(c, Low)→(a, High)〉 is equal to or larger than θ, a conflict can be established. It is worth noting that we only disclose the time-relation contradiction but do not reveal the item contradiction, e.g. the case between 〈(c, Low)→(a, High)〉 and 〈(a, High)→(c, Low)〉. In addition, because the CSPM algorithm attempts to identify conflicts, it designs a new function to reveal the complete set of conflicting patterns to be furnished to users. However, the GSP algorithm cannot because it does not deal with this issue according to its problem statement (Srikant & Agrawal, 1996).

The CSPM algorithm is employed to discover patterns from the subjective data, and the GSP algorithm looks at the objective data. The difference of data source is that the subjective data is gathered by questionnaires to gain explicit user input, and the objective data is automatically collected by computer devices to gain implicit user input. For instance, in a supermarket workplace, managers can collect the objective data from their checkout machines or radio frequency identification readers to obtain customers’ purchase transactions. On the other hand, if managers want to collect the subjective data, they can request customers to fill out their questionnaires.

In the CSPM algorithm, two phases are repeatedly executed to generate patterns. The first phase generates candidate quantitative sequences (candidate sequences or candidate patterns hereafter) of length k, denoted by Ck
                        , from the consensus sequential patterns with quantitative linguistic terms (frequent sequences, frequent patterns, or patterns hereafter) of length k
                        -1, denoted by Lk
                        
                        −1. In each cycle, one more lt-item and its time relation will be added to each candidate sequence, based on the frequent sequences in the preceding cycle. After finding all candidate sequences, the second phase scans the database once to determine the support of each candidate sequence, and the result consists of all frequent patterns of length k. The first phase is introduced in Section 4.1.1 and the second one is in Section 4.1.2. In addition, the identification of conflicts is described in Section 4.1.3.

The process of finding the candidate sequences for the different lengths of k (the first phase) is described as follows.
                              
                                 (1)
                                 For k
                                    =1: The set of candidate sequences (i.e. lt-items) of length 1, C
                                    1, will be generated by enumerating all distinct items of the database and linguistic terms. For instance, we have three items in I
                                    ={a, b, c} and LT
                                    ={Low, Middle, High, *}. Then the candidate sequences in C
                                    1 are (a, Low), (a, Middle), (a, High), (a, *), (b, Low), (b, Middle), (b, High), (b, *), (c, Low), (c, Middle), (c, High), and (c, *). The procedure can also be represented as C
                                    1
                                    =
                                    I×LT, where × denotes the joining operation.

For k
                                    =2: Traditionally, C
                                    2 is obtained by directly joining L
                                    1 with L
                                    1; that is, C
                                    2
                                    =
                                    L
                                    1×L
                                    1. However, since the first and second lt-items in C
                                    2, e.g., s
                                    1
                                    =(
                                       
                                          
                                             
                                                i
                                             
                                             
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                          
                                             
                                                lt
                                             
                                             
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                          
                                       
                                    ) and s
                                    2
                                    =(
                                       
                                          
                                             
                                                i
                                             
                                             
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                          ,
                                          
                                          
                                             
                                                lt
                                             
                                             
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    ), have various quantitative linguistic terms, pairs must be generated for all such possible relationships. Let us consider an explanatory example. Suppose that s
                                    1 and s
                                    2 belong to L
                                    1 and ⊗={&, →, ∼}. Then C
                                    2 has a total of three candidate sequences, 〈s
                                    1&s
                                    2〉, 〈s
                                    1
                                    →
                                    s
                                    2〉, and 〈s
                                    1
                                    ∼
                                    s
                                    2〉. In a word, C
                                    2 can be generated by L
                                    1×⊗×L
                                    1. For instance, if we have two lt-items, (a, Middle) and (c, *), in L
                                    1, the candidate sequences in C
                                    2 are 〈(a, Middle)&(c, *)〉, 〈(a, Middle)→(c, *)〉, and 〈(a, Middle)∼(c, *)〉.

For k〉2: Let sα
                                       
                                    =〈(a
                                    1, lt
                                    1) ⊗1 (a
                                    2, lt
                                    2) ⊗2 ⋯ (ak−1
                                    , ltk−1
                                    ) ⊗
                                       k−1
                                     (ak
                                    , ltk
                                    )〉 be a k frequent sequence in Lk
                                    . According to Property 1 (downward-closure property), the (k
                                    -1)-subsequences of sα
                                    , 
                                       
                                          
                                             
                                                s
                                             
                                             
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                          
                                       
                                    
                                    =〈(a
                                    1, lt
                                    1) ⊗1 (a
                                    2, lt
                                    2) ⊗2 ⋯ (ak−2
                                    , ltk−2
                                    ) ⊗
                                       k−2
                                     (ak−1
                                    , ltk−1
                                    )〉 and 
                                       
                                          
                                             
                                                s
                                             
                                             
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                    =〈(a
                                    2, lt
                                    2) ⊗2 (a
                                    3, lt
                                    3) ⊗3 … (ak−1
                                    , ltk−1
                                    ) ⊗
                                       k−1
                                     (ak
                                    , ltk
                                    )〉, must be frequent, because the support of sα
                                     cannot be larger than the supports of sα1
                                     and sα2
                                    . This means that 
                                       
                                          
                                             
                                                s
                                             
                                             
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                          
                                       
                                     and 
                                       
                                          
                                             
                                                s
                                             
                                             
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    , the shorter sequences, have more opportunities to be contained in data sequences than sα
                                    , the longer sequence. Therefore, if sequences 〈(a
                                    1, lt
                                    1) ⊗1 (a
                                    2, lt
                                    2) ⊗2 ⋯ (ak−2
                                    , ltk−2
                                    ) ⊗
                                       k−2
                                     (ak−1
                                    , ltk−1
                                    )〉 and 〈(a
                                    2, lt
                                    2) ⊗2 (a
                                    3, lt
                                    3) ⊗3 ⋯ (ak−1
                                    , ltk−1
                                    ) ⊗
                                       k−1
                                     (ak
                                    , ltk
                                    )〉 exist in Lk−1
                                    , then sα
                                       
                                    =
                                    
                                       
                                          
                                             
                                                s
                                             
                                             
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                          
                                          ×
                                          
                                             
                                                s
                                             
                                             
                                                
                                                   
                                                      α
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                    =〈(a
                                    1, lt
                                    1) ⊗1 (a
                                    2, lt
                                    2) ⊗2 ⋯ (ak−1
                                    , ltk−1
                                    ) ⊗
                                       k−1
                                     (ak
                                    , ltk
                                    )〉 must exist in Ck
                                    . All the sequences in Ck
                                     can be generated by joining the sequences in Lk−1
                                     this way.

Next, we will discuss how to execute the second phase, i.e., to determine the supports of all candidate sequences in Ck
                           . To this end, a tree structure, called a candidate tree, is adopted as a basis. Basically, it is similar to the prefix tree adopted in previous studies (Agrawal & Srikant, 1994; Liu, Lu, Xu, & Yu, 2003). The major difference lies in that the traditional approach saves each tree node with an item name, whereas, in the new approach, two components are attached – an item name and a linguistic term. In addition, the time relation between any two lt-items is stored by the edge between two nodes. An example of a candidate tree is given in Fig. 1
                           .

Suppose we are given a candidate set Ck
                           . Initially, we have an empty tree with a single root node. Then, we insert every candidate pattern in Ck
                            into the tree, just as when building a prefix tree. After all the candidate patterns in Ck
                            have been inserted, the tree is built. Next, we traverse the tree for every q-sequence in the temporal ranking dataset TRD. For a given q-sequence, after finishing the traversal we can determine the degrees at which the candidate patterns in the tree are contained in that sequence. Finally, after the tree has been traversed by all q-sequences, the support value of every candidate pattern is kept in the corresponding leaf node in the tree. Thus, we can determine which candidate patterns are frequent and which are not.

As a candidate pattern in the tree is contained in a q-sequence, its leaf node also has to store the user identifier of this sequence. The reason is that if the sequence owns more than two of the same lt-items, the repeated count can be avoided. For example, there exist multiple combinations of the candidate pattern 〈(a, Low)→(c, Low)〉 in a q-sequence 〈(a, Low)→(a, Low)→(b, High)→(c, Low)→(b, High)→(c, Low)&(a, High)→(f, Middle)→(d, Middle)〉. There are four ways to match this candidate pattern to the sequence. We represent them by underlining the corresponding lt-items:
                              
                                 (1)
                                 〈(a, Low)
                                    →(a, Low)→(b, High)→
                                    (c, Low)
                                    →(b, High)→(c, Low)&(a, High)→(f, Middle)→(d, Middle)〉;

〈(a, Low)
                                    →(a, Low)→(b, High)→(c, Low)→(b, High)→
                                    (c, Low)&(a, High)→(f, Middle)→(d, Middle)〉;

〈(a, Low)→
                                    (a, Low)
                                    →(b, High)→
                                    (c, Low)
                                    →(b, High)→(c, Low)&(a, High)→(f, Middle)→(d, Middle)〉;

〈(a, Low)→
                                    (a, Low)
                                    →(b, High)→(c, Low)→(b, High)→
                                    (c, Low)&(a, High)→(f, Middle)→(d, Middle)〉.

However, when the candidate pattern has been traversed as Fig. 1 by way of (1), the remainder will not be counted repeatedly because the leaf node of 〈(a, Low)→(c, Low)〉 has recorded the same user identifier.

After completing the two phases, we obtain the result consisting of all frequent patterns of length k, Lk
                           , i.e. the complete set of consensus sequential patterns L. In general, the traditional algorithm, GSP, is terminated after finishing the two phases. In the CSPM algorithm, however, one more phase has to be performed, i.e. the identification of conflicts in Lk
                            (k
                           ⩾2).

Execution of the identification of conflicts is begun in k
                           =2. The CSPM algorithm detects all conflicts from Lk
                            and adds any pair of patterns to a set of conflicting patterns LCk
                           , satisfying two conflicting conditions: (1) all their k items are identical but (2) at least one difference exists among their linguistic terms or time relations. Following the two conditions, we still have to work out their support ratio so that they can be confirmed and added to LCk
                           . If there are two patterns, called s
                           1 and s
                           2, then the ratio is calculated by 
                              
                                 
                                    
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       .
                                       count
                                    
                                    
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       .
                                       count
                                    
                                 
                              
                            if s
                           1.count
                           ⩽
                           s
                           2.count; otherwise 
                              
                                 
                                    
                                       
                                          
                                             s
                                          
                                          
                                             2
                                          
                                       
                                       .
                                       count
                                    
                                    
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                       .
                                       count
                                    
                                 
                              
                           , where s
                           1.count and s
                           2.count are the supports of s
                           1 and s
                           2. Accordingly, if the ratio is equal to or larger than a conflict threshold θ, the two patterns are added to LCk
                           . Notably, when the compared pattern s
                           2 is included in LCk
                           , it will no longer be compared with others from Lk
                           .

As follows, the major steps of the CSPM algorithm are listed in Fig. 2
                        .
                           Example 4
                           Consider the temporal ranking dataset TRD shown in Table 2 and assume that we set min_sup
                              =0.4 (40%) and θ
                              =0.95 and have 
                                 
                                    ⊗
                                    ∈
                                    {
                                    &
                                    amp
                                    ;,
                                    →
                                    ,
                                    ∼
                                    }
                                 
                               and LT
                              ={Low, Middle, High, *}. For brevity, we used more abstract and concise codes to represent the original item-names in Table 3
                              . Then, the set of candidate sequences (i.e. lt-items) of C
                              1 is generated by enumerating all distinct items of the database and LT
                              ={Low, Middle, High, *} as follows (the format is pattern: support).

After the generation of L
                        2, the algorithm begins to produce Ck
                         and Lk
                         for k>2. Since there are 22 patterns in L
                        2, the candidate sequences and their supports in C
                        3 are enumerated as follows (the format is pattern: support).
                           〈(a, Low)→(b, High)→(c, Low)〉: 0.4, 〈(a, Low)→(b, High)→(d, Middle)〉: 0.4, 〈(a, Low)→(c, Low)→(d, Middle)〉: 0.4, 〈(a, Low)→(d, Middle)→(h, Low)〉: 0.2, 〈(a, Low)→(d, Middle)∼(h, ∗)〉: 0, 〈(a, Middle)&(b, Low)→(d, Low)〉: 0.4, 〈(a, Middle)→(d, Low)→(d, Middle)〉: 0.2, 〈(a, Middle)→(d, Low)→(h, ∗)〉: 0.2, 〈(b, Low)→(d, Low)→(d, Middle)〉: 0.4, 〈(b, Low)→(d, Low)→(h, ∗)〉: 0.2, 〈(b, High)→(c, Low)→(d, Middle)〉: 0.4, 〈(b, High)→(d, Middle)→(h, Low)〉: 0.2, 〈(b, High)→(d, Middle)∼(h, ∗)〉: 0, 〈(c, Low)→(d, Middle)→(h, Low)〉: 0.2, 〈(c, Low)→(d, Middle)∼(h, ∗)〉: 0, 〈(d, Low)→(d, Middle)→(h, Low)〉: 0.2, 〈(d, Low)→(d, Middle)∼(h, ∗)〉: 0.2, 〈(d, Middle)∼(h, ∗)∼(e, ∗)〉: 0.4, 〈(d, Middle)∼(h, ∗)→(i, High)〉: 0.4, 〈(d, Middle)∼(e, ∗)→(i, High)〉: 0.4, 〈(f, Middle)→(d, Middle)→(h, Low)〉: 0, 〈(f, Middle)→(d, Middle)∼(h, ∗)〉: 0.2, 〈(g, Low)→(d, Middle)→(h, Low)〉: 0.2, 〈(g, Low)→(d, Middle)∼(h, ∗)〉: 0.2, 〈(g, High)→(d, Low)→(d, Middle)〉: 0.4, 〈(g, High)→(d, Low)→(h, ∗)〉: 0.2, 〈(g, High)→(d, Middle)→(h, Low)〉: 0.2, 〈(g, High)→(d, Middle)∼(h, ∗)〉: 0.2, and 〈(h, ∗)∼(e, ∗)→(i, High)〉: 0.4.
                        
                     

After filtering C
                        3 by the min_sup mechanism, we have L
                        3 in Table 4. Moreover, two conflicting patterns in LC
                        3 are listed in Table 4 as well.

Since C
                        4 can still be generated from L
                        3, we have two candidate sequences, 〈(a, Low)→(b, High)→(c, Low)→(d, Middle)〉 and 〈(d, Middle)∼(h, *)∼(e, *)→(i, High)〉, in C
                        4 and their supports are both 0.4. Because their supports are equal to the min_sup, the two candidate sequences can turn into only two patterns in L
                        4 (see Table 4). Besides, no conflicting patterns can be added to LC
                        4. Since there are no more than two patterns in L
                        4 which can be combined as candidate sequences in C
                        5, the procedure of the algorithm is terminated.

In this section, we use synthetic datasets and a real dataset to study the performances of the following algorithms: the GSP (Srikant and Agrawal, 1996), the CCTM (Chang, 2011), and the CSPM. These proposed algorithms were implemented using Sun JavaTM language (J2SDK 1.4.2_16) and tested on a PC with an Intel Core 2 Duo 2.4GHz processor and 2GB main memory using the Microsoft™ Windows Server 2003 operating system. Neither multithreading technology nor parallel computing skills were used in implementing our programs. As follows, we present the results of experiments using the synthetic datasets in Section 5.1 and the results of those using the real dataset in Section 5.2.

Synthetic datasets were generated by applying the well-known synthetic data generation algorithm in Agrawal and Srikant (1995). According to their algorithm, the sequence generation is begun by generating itemsets. That is, items in an itemset occur together like in our proposed time relation, &. After that, a sequence is generated by itemsets so that the time relation of items between different itemsets is like →. Linguistic terms and the sign * are then generated randomly but corresponding to the requirement of the pattern generation and are appended to items, forming lt-items. Based on the description, we modify their algorithm to develop the data generator. Table 5
                         shows the parameters in this generator and their definitions.

To obtain frequent patterns and conflicts, the data generator initially generates lt-items and itemsets to form potential frequent patterns. Based on the parameter cr, it then generates the conflicts in two ways: (1) by picking up some patterns from the potential frequent patterns according to the proportion of cr and (2) by randomly modifying their linguistic terms or time relations to acquire potentially conflicting patterns. After obtaining the potential frequent patterns and potential conflicting patterns, the data generator then employs them as seeds to make |U| q-sequences.

We describe two experiments. The first evaluates the performances of the three algorithms by comparing the results when different minimum supports are used in Section 5.1.1. The second evaluates their performances by comparing the scalability when varying arguments, |U|, |I|, |S|, |N|, |LT|, and θ are used in Section 5.1.2.

The first comparison analyzes the run times of the GSP, the CCTM, and the CSPM algorithms with different minimum supports. The comparison is made on the basis of the four datasets shown in Table 6
                           , in which the minimum support threshold varies from 1% to 20%. Fig. 3
                            summarizes the results. From these four datasets, we can observe how the performances of the algorithms change as we vary the values of |U|, |I|, |S|, and |N| but fix |LT|=4 and θ
                           =0.7.

The results all show that the GSP and CCTM algorithms are faster than the CSPM algorithm. As expected, discovering patterns with sequence and quantity data requires more time because more combinations of candidate patterns need to be considered, resulting in a much larger search space. Moreover, as the minimum support threshold decreases, the size of this candidate set increases greatly, degrading the performance of the CSPM algorithm. This explains why the performance of our proposed algorithm is worse than that of the GSP and CCTM algorithms. Even so, the CCTM algorithm can still be run in a reasonable amount of time.

As follows, the scalabilities of the three algorithms are compared. To this end, six tests are designed based on dataset U500-I2.5-S5-N50. During each test, all parameters are fixed, and min_sup is set to 1%. However, in each test, a parameter is varied to see how the algorithms scale up with the parameter. The first test varies the number of users, |U|, from 500 to 50,000 (as shown in Fig. 4
                           ). The second varies the average number of lt-items per itemset, |C|, from 2.5 to 10 (as shown in Fig. 5
                           ). The third varies the average number of itemsets per user, |S|, from 5 to 20 (as shown in Fig. 6
                           ). The fourth varies the number of lt-items, |N|, from 50 to 200 (as shown in Fig. 7
                           ). The fifth varies the number of linguistic terms, |LT|, from 4 to 8 (as shown in Fig. 8
                           ). Three sets of linguistic terms, |LT|=4, |LT|=6, and |LT|=7, are {Low, Middle, High, *}, {Very Low, Low, Middle, High, Very High, *}, and {Extremely Low, Very Low, Somewhat Low, Middle, Somewhat High, Very High, Extremely High, *}, respectively. The final one varies the conflict threshold, θ, from 0.7 to 0.55 (as shown in Fig. 9
                           ).

The results show that the run times of all three algorithms grow linearly with respect to |I|, |S|, and θ. However, the other three parameters, |U|, |N|, and |LT|, have an impact on the performance of the CSPM algorithm; that is, it scales up somewhat exponentially. To understand why, note that increasing values of |U|, |N|, and |LT| all degrade the performance of the CSPM algorithm. The greater the number of users or the number of lt-items we test, the more candidate patterns the algorithm will generate. Therefore, the CSPM algorithm has to spend more time dealing with those candidate patterns, leading it to scale up somewhat exponentially. In addition, even when increasing the value of |LT|, a q-sequence in the dataset may contribute parts of its support to several linguistic terms. This causes smaller supports for the candidate patterns, and consequently, fewer patterns are generated so that the performance of the CSPM algorithm is not so bad.

In this section, we observe how the consensus sequential patterns with quantitative linguistic terms work in practice. We conducted the group ranking of portfolios as the empirical investigative subject for providing sequence and quantity knowledge in financial management. The details of the experiment are described as follows.
                           
                              1.
                              First of all, we adopted a Web-based survey method to acquire the raw data. The data collection period was from April 14th, 2012 to June 14th, 2012. In this experiment, we provided fifty items (investment objects) for respondents (|N|=50) to present their know-how of these items. Hence, respondents chose the whole or partial items among the fifty items to rank their sequences and simultaneously assigned one linguistic term to each item. The major categories of the fifty items include stocks, funds, futures, real estate and properties, insurance, bonds, and foreign currencies. To save space, they are not listed; for example, the major category, funds, contains four items, Asian, European, American, and Middle Eastern and African funds. Furthermore, the related information was attached to the Web-based questionnaire to confirm that the respondents understood our research purpose and how to execute the ranking process.

Second, 168 users (respondents) participated and offered 486 q-sequences, 13 of which had to be dropped because they left invalid data and could not be analyzed. In the end, there were 473 useful samples selected in this experiment (|U|=473).

Finally, we performed the CSPM algorithm in this real dataset and gained sets of frequent patterns and conflicts. The CSPM algorithm was carried out under the following settings for the real dataset: (1) the minimum support threshold was specified as 1%, 1.5%, and 2.0%, (2) LT
                                 ={Very Low, Low, Middle, High, Very High, *} and |LT|=6, and (3) θ was 0.5, 0.6, and 0.7.

In this part, there are two results which can be discussed. First, we report the run times of the CSPM algorithm executed in the real dataset and the number of patterns and the number of conflicts in Section 5.2.1. Second, we list some interesting patterns as well as conflicts to discuss their business implications in Section 5.2.2.

As expected, the run time of the CSPM-θ0.5 is inferior to the run times of the CSPM-θ0.6 and the CSPM-θ0.7 when min_sup is varied from 1.0% to 2.0% (as shown in Fig. 10
                           ). Since the conflict threshold of the former is lower than that of the latter two, the former will generate more pairs of potential conflicts and then spend more time to establish their conflicting statuses. This is the reason why the performance of the CSPM-θ0.5 is worse than that of the latter two.

Based on the above test, we also reported the number of patterns and the number of conflicts by varying different minimum support and conflict thresholds, as seen in Fig. 11
                           . We observed that the number of patterns with min_sup
                           =2.0% is fewer than that with min_sup
                           =1.5% and min_sup
                           =1.0%. This is because higher min_sup causes the supports of more candidate patterns which cannot surpass the min_sup effortlessly, in turn generating fewer patterns. In addition, higher conflict thresholds from 0.7 to 0.5 also lead to a strict constraint, making it difficult to identify any pair of conflicts and, thus, generating fewer conflicts.

As follows, we discuss some interesting patterns in this experiment. The results of frequent patterns (their supports) and conflicting patterns (their support ratios) are listed in Table 7
                           . Their settings are based on min_sup
                           =1.0%, |LT|=6, and θ
                           =0.7. We underlined their conflicting parts, to make it easier for audiences to read. There are three business implications which can be provided for investors.
                              
                                 (1)
                                 Observing frequent pattern 1, we know that there is one type of investor who attempts to invest in higher risk objects so that they can earn more returns. Since two objects, houses and lands, in Taiwan do not own the pricing standard and public price information, investors could have a lot of room to maneuver their prices in markets so that they earn the profit from the spread of the buying and selling objects. However at the same time, they also have to shoulder a risk if buyers would not accept their prices. Accordingly, investments in real estate and properties in North and South Taiwan simultaneously are higher risk objects, especially in real estate and properties in North Taiwan, which has High quantities. Two factors, higher inflation and lower interest rates in Taiwan, might also be the major reasons why people like to invest in these risky objects.

Observing frequent patterns 2, 3, 4, and 5, there is also another type of investor whose strategy of investment is conservative. They are only fond of small investments in some objects, such as funds, foreign currencies, and futures. Also, their purchased quantities could be between Very Low and Middle.

Finally, observing frequent patterns 6, 7, and 8, a safe way to invest could be to consider the following objects, foreign currencies, such as Renminbi currency or U.S. dollars, or Taiwan stocks, such as Hi-tech, Conventional, or Tourism stocks. The time relation between items could be either at the same time or in order. Moreover, their purchased quantities reveal a wide spectrum from Very Low to High.

To observe the two pairs of conflicts, we also have the following ideas.

First, in conflicting pattern 1, two types of investors, active and conservative investors, invest in Middle Eastern and African funds and Renminbi currency. The former invests with greater quantities which also could be managed simultaneously. However, the latter is completely the opposite of the former in that they invest both in fewer quantities and at the different times to divert risks.

Second, in conflicting pattern 2, since the visa-free issue for the U.S. was raised during our data collection period, objects, such as Tourism or Hi-tech stocks and U.S. dollars, are considered for investment. However, determining how to invest in their orders and quantities brings rise to circumstances of conflict.

Most existing approaches focus on giving the preference ranking of items based on group decisions. Unfortunately, no studies have ever addressed the group ranking problem for disclosing sequence and quantity knowledge. This work presents a novel group ranking model to find consensus sequential patterns with quantitative linguistic terms in temporal ranking datasets. The spectrum of group ranking research is also broadened by our study. We briefly conclude this study in Section 6.1. Contributions and implications for academic researchers and business practitioners are given in Sections 6.2. Limitations of this study are described in Section 6.3. Finally, we provide suggestions for future work in Section 6.4.

@&#CONCLUSIONS@&#

The CSPM algorithm is presented for discovering consensus sequential patterns with quantitative linguistic terms. Also, we tackle a conflict situation, i.e. there is a pair of frequent patterns of which some items are identical but time-relation or quantity contradictions also exist. To study the performances of the three algorithms, the GSP, the CCTM, and the CSPM, with varying different minimum support thresholds, an analysis is carried out using synthetic datasets. In a scalability test, the run time of the CSPM algorithm grows somewhat exponentially with increases in the number of users, the number of lt-items, and the number of linguistic terms. The algorithm, however, scales up linearly with increases in the average number of lt-items per itemset and average number of itemset per user, and decreases in the conflict threshold. As a result, the performance of the CSPM algorithm is still serviceable and can be applied to discover patterns and conflicts. An experiment with the real dataset collected in this study showed that the novel model can identify interesting patterns and conflicts, providing more plentiful knowledge about sequences and quantities for users.

Compared with Chang (2011) model, our proposed model has two additional contributions. The first is that the proposed model adds a new dimension, the quantity variable, for reference. The second is that the conflict identification for the quantity variable is also provided in the proposed model. Although the study has to deal with the two concerns, spending times to compute the outcomes, the run time of the proposed model is still reasonable and not too worse than that of the Chang (2011) model, showed in the experimental results.

There are some implications for academic researchers and business practitioners in this study. For academic researchers, this study addressed the group ranking problem to propose a model for discovering the sequential preferences with quantitative linguistic terms. However, the time relation of this model only includes three forms, &, →, and ∼. More precise information about the time relations could be found by extending the proposed model. Since we are living in a network era, opinions or thoughts can be presented on the Internet conveniently and are collected by businesses easily. Therefore, this study provides an implement to gain them and then analyze their meanings. Managers can also employ the proposed model in a variety of industries to understand the meanings of opinions or thoughts from their customers. In addition, because enterprises can gather timely data and own fast computing capacities, managers can make more quickly responses as the favor of customers is changing.

@&#LIMITATIONS@&#

There are two limitations in this study. One is the problem of lack of user involvement. Although the proposed model could find the patterns from the scarce inputs, we might doubt their representativeness. For example, if we can only collect a few sequences but specify a min_sup as 70%, the discovered results may be not many or empty because of the higher threshold; however, they are more representative. To solve the problem, we can adjust the threshold as 50% or less to bring out more patterns. However, the representativeness of these patterns may not be significant or valuable. Another limitation is the trade-off problem between users’ patience and the number of the listed items. Ideally, we can dig more varied patterns by listing whole items. For example, there are hundreds of stocks in the stock market of Taiwan, yet, we only chose the most important some to perform the experiment. If we provide too many items for users, this may cause that users lose their patience and arbitrarily fill out their opinions. Therefore, the imprecise or arbitrary inputs would limit the proposed model to discover more typical results.

@&#FUTURE WORK@&#

The discovery of consensus sequential patterns with quantitative linguistic terms represents a new and promising research area in group ranking. Three directions are suggested to extend our research model further. First, other kinds of quantity-related variables, such as time intervals or weights of items, can be considered to provide more complicated knowledge for users. For example, B stock is recommended to purchase after 1–3days if the price of A stock moves up, or users think that the value of B is more than that of A, that is, the weight of B should be higher than that of A. Second, the efficiency of the CSPM algorithm could be further improved. A divide-and-conquer idea could be realized to improve the problem (Han and Kamber, 2006). Finally, the same range of linguistic terms for different types of items could be inappropriate. Because the cognitive ranges of different items from human beings depend on their prices or values, we should incorporate this idea into the proposed model. For instance, the price of real estate and properties is higher than that of stocks; therefore, we should define two different ranges of linguistic terms for them. The invested amount of over one hundred thousand for the former could be just defined as the linguistic term of Low. However, for the latter, the linguistic term should be Middle or High.

@&#ACKNOWLEDGEMENTS@&#

The author would like to thank the Editor, Dr. Immanuel Bomze, and three anonymous referees for their helps and valuable comments to improve this paper. He also appreciates Krannert School of Management, Purdue University, providing the research resources to support the revision of this paper during his visiting period. This research was supported by the National Science Council of the Republic of China under the grant NSC 102-2410-H-194-100-MY2.

@&#REFERENCES@&#

