@&#MAIN-TITLE@&#Applying episode mining and pruning to identify malicious online attacks

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           All on-line attempts to access a honeypot can be regarded as attacks.


                        
                        
                           
                           A honeypot’s logs can be very large, which an administrator will be unable to handle.


                        
                        
                           
                           We apply serial episode mining and two-round pruning to identify suspected attack.


                        
                        
                           
                           The experiments conducted in this paper focus on port 445 for the SMB protocol.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Honeypot system

Episode

Episode mining

Episode pruning

Server Message Block (SMB)

@&#ABSTRACT@&#


               
               
                  A honeypot system can be deployed to decoy and record malicious intrusions over the Internet. However, events logged by a honeypot can rapidly accumulate an enormous amount of data, which an administrator will be unable to handle. The proposed system combines episode mining and pruning, and allows an administrator to identify suspected intrusions, and thus focus his energy on addressing them, instead of reading enormous amounts of raw data. An attack episode is composed of a series of events, and represents an Internet intrusion as a series of relevant events occurring to a victim host in a specific sequence. Due to the variety of internet attacks, this paper focuses on discovering attack episodes for the Server Message Block (SMB) protocol, which provides Microsoft Windows Network services. Experiments show that the proposed approach can locate suspicious episodes that are very likely novel attacks, from an immense amount of logged data.
               
            

@&#INTRODUCTION@&#

According to a report by Kaspersky Lab [1], among the 20 ports most commonly used for internet attacks, TCP port 445 is the most popular, accounting for 32.28% of all internet attacks, as shown in Fig. 1
                     . TCP port 445 is assigned by the Internet Assigned Numbers Authority (IANA) for the Server Message Block (SMB) protocol [2], which is used by Windows versions for file and printer sharing. In the same report, port 80, used by HTTP connections, is ranked as the fourth most commonly used; most malicious port 80 connections are caused by spammers looking for open proxies. This paper therefore focuses on helping administrators identify Internet attacks against the SMB protocol through TCP port 445. This study applies an approach based on episode mining and pruning to help administrators identify Internet attacks from the log files of a honeypot system. Internet attacks caused by computer worms at port 445 are addressed in this paper. A computer worm is a typical Internet attack that can rapidly pervade a computer without user intervention.

To date, a great deal of research has been devoted to identifying unknown attacks. Hubballi et al. [3] proposed a multi-layer concept of n-gram for payload-based anomaly network intrusion detection. The authors aimed to determine whether an individual packet was abnormal by checking the n-grams of the payload of the packet. Each byte in the payload is an item, so the payload can be regarded as a sequence of items. The value of n is the number of elements paired together in a defined order. For example, assuming the sequence to be a, b, c, d, e, f, …, if n
                     =2 then the subsequences of 2 are (a, b), (b, c), (c, d), (d, e), (e, f), and so on. The authors considered the value of n from 1 to 8. In the multi-layer system, each layer works as an independent anomaly-detection system. A packet is considered normal after passing through all the layers. A packet is considered anomalous if at any layer it is declared as anomalous. The same authors later [4] extended their n-grams concept to determine whether a program was normal. In [4], system calls of a program are the items in a sequence. A system call is a routine that user programs call to receive the service of the operating system. However under abnormal conditions, i.e. when an attacker tries to abuse service privileges, the program takes code paths that have not been seen before, and this generates system call sequences that differ from the sequences generated under normal conditions. Both of the above papers [3,4] had good results according to their experiments. However, the main goal of this paper is to identify a significant suspect episode (a series of network events making up an episode) that may be an unknown network attack, unlike an individual packet in [3], or a malicious program in [4]. Moreover, the approach adopted in this paper is episode mining and pruning, while the idea behind [3,4] is n-gram based on frequency.

Mannila et al. [5] proposed the WINEPI and MINEPI algorithms for discovering serial episodes defined by minimal occurrence of subsequence. Their source codes can be found in the forum [6]. Since then, the algorithms have been applied to various fields [7,8], including network intrusion detection [9–15]. Lee et al. [10] modified Mannila et al.’s algorithms to use two types of attributes, called axis and reference, as forms of item constraints, which limited computing to relevant patterns, i.e. episodes. In addition, Lee et al. used an iterative level-wise approximate mining procedure to uncover low frequency, but important, episodes. Luo and Bridges [11] applied fuzzy logic to episode mining, so that flexible frequent episodes could be obtained, which helped to improve the performance of network intrusion detection systems. Luo et al. [12] modified this method so that the system could be applied in near real-time detection. Qin et al. [13] proposed a new Internet tracing technique, which generates frequent episode rules that characterize Internet traffic events. These episode rules are used to distinguish anomalous sequences of TCP, UDP and ICMP connections from normal traffic episodes. In addition, fundamental pruning techniques were introduced to reduce the rule search space by 70%.

Hwang et al. [9] designed a system combining signature-based detection and anomaly detection. The basic idea proposed is running SNORT [16] to rule out known attacks, and then to identify anomalous attacks by the so-called anomaly detection system (ADS). In the ADS design, the authors used attack-free traffic to build a normal profile by rule-mining techniques in the training phase. Later, in the detecting phase, ADS compares the rules, by mining from undetermined network traffic, with the predefined normal profile. If the matching score is less than a given threshold, the ADS reports that an anomaly or a novel attack has occurred, and adds the features of the newly identified attack to the SNORT database to extend its ability. However, some issues emerged as follows. First, many anomalous intrusion detections [3,4,9] needed a dataset with all instances pre-classified for training, and most of them used the DARPA dataset [17] which was released in 1999, for experiments. In reality, however, network traffic can vary significantly between networks. It is difficult to have such a fully and completely pre-classified dataset for training, or it may be hard to create a normal profile from attack-free network traffic unless the network is extremely simple. Second, once a threshold is involved in making a decision, false alarms occur. In addition, the so-called normal profile and threshold value will definitely vary from network to network.

Therefore, instead of building a normal profile from attack-free traffic, this study intends to actively help the administrator identify attack episodes from honeypot logs, which are supposed to contain known and unknown attacks. Honeypots can only straightforwardly and individually record all network events in detail, and are unable to analyze the relations between events. Since the logs of a honeypot can be augmented very rapidly, the proposed system in this paper can extract likely unknown attack episodes to help the administrator focus only on these episodes, and then decide if they are attack episodes. Once a suspected episode has been determined as an attack by the administrator, the episode will be put into a database so that the unknown attack becomes known and will not require administrator attention the next time it occurs.

In this paper, a honeypot system called KFSensor [18] was installed to record all network events, and the network service SMB protocol using port 445 was considered as an example to demonstrate the performance of the proposed system. With the system, the administrator will only have to focus on likely unknown attack episodes against the SMB protocol instead of checking the huge amount of raw data in the logs. A preliminary view of this study can be found in [15]. The remainder of the paper is arranged as follows. Some background, including a type of episode mining and the SMP protocol for Windows Network services is introduced in Section 2. The proposed system is presented in Section 3. Experiment results are given in Section 4 and a conclusion is offered in Section 5.

@&#BACKGROUND@&#

In this section, the method applied to retrieve frequent serial episodes from an event sequence is first described, and the Server Message Block (SMB) protocol addressed in this study is then introduced.

A modification of WINEPI [5,19] was applied in this study to meet the demands of the proposed system for retrieving potential attack episodes from honeypot log files. An episode is a number of events within an event sequence. In serial episode mining, data are regarded as a sequence of events, where each event has an associated time of occurrence, and thus offers significant use in identifying possible Internet intrusions. Fig. 2
                         is an example for illustration. Suppose that 〈E,A,B〉 is a serial episode, which means that after event E, event A occurs, and the episode ends with event B. When considering events and their time of occurrence, possible patterns are 〈(E,0), (A,2), (B,4)〉, 〈(E,0), (A,3), (B,4)〉, 〈(E,5), (A,10), (B,12)〉, 〈(E,9), (A,10), (B,12)〉, 〈(E,15), (A,16), (B,17)〉, etc. Serial episodes are of interest to this paper as hacker attack actions also have time sequences.

Let e-type={A,B,C,…} be a collection of all event types in the event sequence. An event (A, t) denotes an A type event occurring at time t. An event sequence s is associated with two times: the starting and ending time, denoted as (s, Ts, Te
                        ) which, more precisely, can be expressed as 〈(A
                        1,
                        t
                        1), (A
                        2,
                        t
                        2),…,(An
                        ,
                        tn
                        )〉, where Ai
                        
                        ∊
                        e-type, 1⩽
                        i
                        ⩽
                        n; tj
                        
                        ⩽
                        tj
                        
                        +1, 1⩽
                        j
                        ⩽
                        n
                        −1, Ts
                        
                        ≦
                        ti
                        
                        <
                        Te
                        , 1⩽
                        i
                        ⩽
                        n. An episode is a number of events within an event sequence. The length of an episode is the number of events in the episode.

Sliding windows are regarded as time intervals. While scanning an event sequence for every single process, only those events in the sliding window are of concern, and the window slides from left to right until all events have been scanned. For example, if the window width is five, the events occurring in the windows are sequentially examined, i.e. intervals [t
                        0,
                        t
                        4], [t
                        1,
                        t
                        5], [t
                        2,
                        t
                        6], and so on. This means that only the events in the same window are considered to be related. If two events do not occur in the same window, they are most likely independent. Subsequent events in a window are called a window event sequence, denoted by w. Given an event sequence of s
                        =(s,
                        Ts
                        ,
                        Te
                        ), let W(s,
                        wid) denote the collection of window event sequences, i.e. all w’s, with a sliding window width wid. The frequency of episode α occurring in the event sequence s is computed as:

                           
                              
                                 
                                    freq
                                    
                                       (
                                       α
                                       ,
                                       s
                                       ,
                                       wid
                                       )
                                    
                                    =
                                    
                                       
                                          |
                                          {
                                          w
                                          ∈
                                          W
                                          (
                                          s
                                          ,
                                          wid
                                          )
                                          |
                                          α
                                          occurs
                                          
                                          in
                                          w
                                          }
                                          |
                                       
                                       
                                          |
                                          W
                                          (
                                          s
                                          ,
                                          wid
                                          )
                                          |
                                       
                                    
                                    ,
                                 
                              
                           
                        where |W(s,
                        wid)| is the total number of window sequences, and the numerator is the number of windows in which episode α appears. If episode α’s frequency is greater than, or equal to, the frequency threshold, denoted as min_freq, it is called a frequent episode.

Note that this study mined frequent episodes from the log files of honeypot systems, so all log files first needed to be merged into a large event sequence. In cases of Internet attack, a meaningful episode is a complete and sophisticated attack, possibly lengthy. In addition, this study used a low frequency threshold min_freq in order to mine more significant attacks, albeit these rarely occur. Honeypot data logs usually accumulate very quickly, and thus cannot be manually analyzed by administrators.

The SMB protocol, which provides Microsoft Windows Network services, defines a group of commands for communications between servers and clients, and uses TCP port 445 as the default port for communication. It also dominates MSN files, printers and other network functions. The SMB header structure is shown in Fig. 3
                        , which contains a command field 2 bytes in length. Different codes in the command field signify different events. So examining the inbound SMB packets of a connection and checking their command fields reveals the intension of the connection. An extended SMB command can be found in [20], and the normal SMB protocol packet exchange scenario is presented in [21]. Quite a few computer worms compromise SMB through port 445, such as Korgo [22], Shelp [23] and Sasser [24]. They were adopted in this study to demonstrate the feasibility of the proposed system.

This study aims to identify suspected attack episodes from the large amount of raw data in honeypot logs. Administrators can thus focus only on these selected episodes and make decisions based on their expertise, instead of reading the logs to find intrusions. The proposed system takes the codes in the command fields of SMB packets, also known as events, for analysis. In other words, the system only mines significant misused connections contrary to the normal SMB protocol packet exchange scenario. The administrator needs to read more detailed information from the honeypot logs or firewall logs to make decisions according to his knowledge. In fact, no method can exactly and automatically identify novel attacks without human assistance. Once a suspected episode has been determined as an attack by the administrator, the attack episode will be stored in the database so that the administrator will not have to check it again when it next occurs.


                     Fig. 4
                      illustrates the framework of the proposed system. Initially, the honeypots, KFSensor [18], are deployed on the Internet for a long time in order to collect all possible attacks on Microsoft Windows Network services. The honeypot itself does not provide normal services; therefore, all on-line attempts to access the honeypot can be regarded as attacks or attempted attacks. Since the KFSensor records events occurring on each day in a separate log file, all logs must be merged and preprocessed to form a large event sequence. The event sequence is then fed into the mining algorithm in order to derive the frequent serial episodes. The mining algorithm applied in the paper, as shown in Fig. 5
                     , is a modification derived from WINEPI [5,19].

After the mining, all obtained episodes are input into the episode pruning procedure, called Redundant/Correlated Episode Pruning (RCEP). The structure of RCEP, shown in Fig. 6
                     , contains three sub-procedures illustrated in Figs. 7
                     (a–c), respectively. Fig. 7(a) is the procedure to select every episode starting with “event A”, while deleting unnecessary episodes. According to [21], the standard SMB protocol begins with a negotiation request, which is defined as event A in this study (see Table 1
                      in the next section), so only episodes starting at event A need further attention. Fig. 7(b) was designed to remove duplicate episodes. Finally, Fig. 7(c) was used to prune the episodes contained in other episodes, i.e. pruning sub-episodes. After the whole RCEP procedure, the remaining episodes are very likely to be attack episodes. Furthermore, if some of them have been determined as attack episodes by the administrator before, then these known attack episodes are removed. The remaining undetermined suspected episodes, however, need to be manually verified by the administrator. Once an episode is recognized as an unknown/novel attack by the administrator, the episode will be added to the database, i.e. it now becomes a known attack episode, and will thus not require the administrator’s attention when it next occurs.

Note that in this study, an event is only derived from the command field of an SMB packet (recall Fig. 3). An event represents a type of action with no detailed information (see Table 1). The administrator must check more information in the honeypot logs or firewall logs to determine whether or not the suspected episodes suggested by the proposed system are attack episodes. The administrator cannot judge an episode only from the episode itself, for instance “ABCDJGJHAB”, without further information.

The dataset for experiments was gathered from the log files of KFsensor honeypot systems. This study only selected events on port 445, and merged them into a large event sequence while assigning a time tag to every event. After parsing, there were 17 types of events, as shown in Table 1. The window width was set to 20, based on the assumption that one complete attack did not consist of more than 20 actions. After the pruning (RCEP), Table 2
                      shows the final results of episodes with the frequency threshold, min_freq, set to 0.1. Some notorious worm attack episodes, Korgo [22], Shelp [23] and Sasser [24] are shown (marked) in Table 2. Compared to the normal SMB protocol activities in Fig. 8
                     (a), i.e. “ABCDF”, their corresponding episodes are “ABBCKJJ”, “ABBABBCKJJ” and “ABCKJLJ”, as shown in Figs. 8(b–d), respectively.


                     Table 2 also shows some possible unknown attack episodes, for example “ABCDJGB” and “ABCDEGH” of length 7, and “ABCDJGJH”, “ABCDEFEF” and “ABCDIPEQ” of length 8, etc. If the administrator is concerned by these possible attack episodes, he must check the honeypot log files for extended information. After a second round of pruning, including cutting (1) episodes that are too short or episodes with excessive repetition of events and (2) episodes mixed with trivial episodes, there may only be 13 remaining episodes, as shown in Table 3
                     , requiring further investigation by the administrator. The principle of the second round of pruning is explained as follows. For example, according to the SMB protocol, episode “AB” denotes an attempted login. As the goal is to retrieve sophisticated and meaningful attacks from the log files, those episodes, including repetitive AB, such as “ABAB… AB” or “ABAB… ABA”, would be deleted. Moreover, all sub-episodes would be dropped; for example, “ABCD” would be dropped if “ABCDE” exists, etc.

To sum up, in the experiments shown in Fig. 9
                     , instead of checking the approximately 5200 port 445 attack records in the log files of the honeypots, the administrator only needs to focus on 13 suspect episodes, which are possibly unknown or novel attacks. It should be noted that no method can exactly and automatically identify novel attacks without human assistance. The proposed system in this study can automatically filter out limited, but significant, suspect episodes from the large amount of data in the honeypot log files, thereby helping administrators to further identify novel Internet attacks. If an attacker inserts bogus events in a connection, then the connection’s behaviors should contrast with the normal SMB protocol packet exchange scenario, and the connection will be picked out by the proposed system.

An anomaly intrusion detection system (IDS) [3,4,9] requires full and complete training before being deployed online. Therefore, the training dataset is absolutely decisive for the performance of the IDS. However, network traffic can differ greatly from one network to another, or even in the same network from one time period to another. From a practical point of view, this paper suggests an approach to identify significant misused SMB-protocol connections (suspected attack episodes), from the enormous log data of a honeypot, allowing the administrator to determine if these episodes are novel attacks. Since the proposed method only examines the command fields of SMB headers, the information is insufficient to make definitive determinations, and the administrator needs to read more information about these episodes recorded in the honeypot or firewall logs.

@&#CONCLUSION@&#

While a honeypot deployed on the Internet can attract a lot of attacks, it cannot identify relationships among events to derive attack episodes. In addition, the log files of a honeypot accumulate very rapidly and become very large. It is almost impossible for an administrator to identify novel attacks using these massive amounts of logged data. The proposed system applies serial episode mining and two-round pruning to efficiently help the administrator identify suspected attack episodes and focus his energy on addressing them, instead of reading enormous amounts of raw data from log files. Since the raw data are honeypot logs, any meaningful episodes derived from the logs are likely to be attack episodes. In other words, the system presents likely unknown attack episodes extracted from a honeypot’s log files to the administrator, allowing him to make decisions, instead of making decisions for the administrator. Once the suspect episodes have been determined as attacks by the administrator, the system will log the newly identified attacks in a database so that the administrator does not need to verify the attacks when they next occur. The experiments conducted in this paper show that this approach can successfully identify some known attack episodes, and very suspicious novel or unknown attack episodes on port 445 for the SMB protocol from the large amount of logged data. A report from Kaspersky Lab showed that the TCP port 445 is the most used communication port for launching Internet attacks. This paper therefore addressed attacks using the SMB protocol through port 445.

@&#ACKNOWLEDGMENTS@&#

This work was partially supported by the Ministry of Science and Technology, Taiwan with contracts NSC 102-2221-E-130-006, MOST 103-2221-E-130-016 and MOST 104-2221-E-130-008.

@&#REFERENCES@&#

