@&#MAIN-TITLE@&#Scalable rank-mapping algorithm for an icosahedral grid system on the massive parallel computer with a 3-D torus network

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Rank-mapping algorithm for an icosahedral grid system is developed.


                        
                        
                           
                           The new algorithm is applicable to the computer with a 3-D torus network topology.


                        
                        
                           
                           Using the new algorithm, number of hops does not increase with the number of nodes.


                        
                        
                           
                           The new algorithm achieves almost perfect weak scaling on the K computer.


                        
                        
                           
                           The new algorithm seems to reduce the communication congestion on the K computer.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

MPI

HPC

Torus network topology

Icosahedral grid system

Rank-mapping algorithm

Performance

@&#ABSTRACT@&#


               
               
                  In this paper, we develop a rank-mapping algorithm for an icosahedral grid system on a massive parallel computer with the 3-D torus network topology, specifically on the K computer. Our aim is to improve the weak scaling performance of the point-to-point communications for exchanging grid-point values between adjacent grid regions on a sphere. We formulate a new rank-mapping algorithm to reduce the maximum number of hops for the point-to-point communications. We evaluate both the new algorithm and the standard ones on the K computer, using the communication kernel of the Nonhydrostatic Icosahedral Atmospheric Model (NICAM), a global atmospheric model with an icosahedral grid system. We confirm that, unlike the standard algorithms, the new one achieves almost perfect performance in the weak scaling on the K computer, even for 10,240 nodes. Results of additional experiments imply that the high scalability of the new rank-mapping algorithm on the K computer is achieved by reducing network congestion in the links between adjacent nodes.
               
            

@&#INTRODUCTION@&#

A global atmospheric model is a core part of a numerical model for the simulation of weather and climate. In general, such a weather and climate model performs better as the spatial and temporal resolution are increased (e.g. [1]) and as more sophisticated physics components are introduced. Thus, a global atmospheric model should be carefully designed and tuned so that the weather and climate model uses computer resources as efficiently as possible.

An icosahedral grid system [2–4] is a promising horizontal grid system for a global atmospheric model [5]. Historically, global atmospheric models often adopt the spectral method (e.g. [4]). However, the spectral method is not highly scalable for an up-to-date supercomputer with more than tens of thousands of computing nodes, since it needs global communication at every time step. In contrast, the finite volume method (FVM) just needs point-to-point communications with the surrounding control volumes, and such localized communications are more easily scaled. Because of its uniformity on a sphere, an icosahedral grid system is often employed as a horizontal grid system for the FVM [5–9]. In this study, the target application is the Nonhydrostatic Icosahedral Atmospheric Model (NICAM) [6,7], a global atmospheric model with an icosahedral grid system. NICAM uses the Message Passing Interface (MPI) for the point-to-point communications.

A 3-D or higher-dimensional torus is a widely used node network topology in distributed-memory computer systems. Of the top ten supercomputers in the latest TOP500 list [10], Sequoia, Mira, JUQUEEN, Vulcan (these are Blue Gene/Q), the K computer (Tofu interconnect), and Titan (the Cray Gemini network) adopt a 3-D or higher-dimensional torus network topology. In this study, the target machine is the K computer [11,12], which adopts a virtual 3-D torus network topology called Tofu.

In this study, we develop a rank-mapping algorithm (i.e., an algorithm that creates a one-to-one mapping between the MPI ranks and the computing nodes) for an icosahedral grid system on a supercomputer that uses the 3-D torus network topology. Weak scaling is defined to be a dependency of the elapsed time on the number of nodes, under a fixed amount of work per rank. The aim of this study is to improve the weak scaling performance of the point-to-point communications for exchanging grid-point values between adjacent grid regions on a sphere. Fig. 1
                      shows an example of the NICAM communication graph, representing the MPI ranks and the communication networks between them. Ideally, MPI ranks should be allocated to the computing nodes so that all the adjacent MPI ranks in the communication network are adjacent in the node network; if so, each point-to-point communication has the exclusive use of a link between the computing nodes. However, finding such a perfect rank-mapping algorithm seems to be impossible for this case, since the NICAM communication graph has cycles consisting of three vertices. A 3-D torus graph does not have such a three-vertex cycle, except for the special case in which one length of the 3-D torus is exactly three. As we will explain in Section 4, as the number of computing nodes increases, simple rank-mapping algorithms cause an increase in the number of hops for the point-to-point communications. This generally results in the network congestion in the links between the nodes.

In Section 2, we discuss related works. The specifications of NICAM and the K computer are presented and the rank-mapping problem is defined in Section 3. A new rank-mapping algorithm and the standard ones are presented in Section 4. These algorithms are evaluated using the NICAM communication kernel (Section 5) on the K computer, and the results are presented in Section 6. Our conclusions are presented in Section 7.

@&#RELATED WORK@&#

For several decades, many researchers have tackled the rank-mapping problem in order to efficiently execute application on parallel computer. (e.g. [13–21] and the references cited therein). In graph theory, the rank-mapping problem is interpreted as the problem of embedding a source graph that represents a communication network into a destination graph that represents a node network. For a hypercube communication topology, which is found in the algorithm for the fast Fourier transform, rank-mapping algorithms were developed for the 2-D mesh network topology [14] and for a torus network topology of any dimension [15]. Rank-mapping algorithm for irregular communication topology was investigated for mesh and torus topology networks in [20]. For the numerical modeling in meteorology, [19,21] applied rank-mapping algorithms on the Blue Gene/P and/or Blue Gene/L system to the Weather and Research Forecast model (WRF), in which the communication topology is 2-D mesh or nested 2-D mesh. The communication topology of an icosahedral grid system, however, has not yet been studied.

The rank-mapping problem may be defined as a special case of the quadratic assignment problem (QAP; [13,16,22]). Let 
                        
                           
                              
                                 w
                              
                              
                                 ij
                              
                           
                        
                      be the distance between node 
                        
                           i
                        
                      and node 
                        
                           j
                        
                      and let 
                        
                           
                              
                                 S
                              
                              
                                 pq
                              
                           
                        
                      be a measure of the amount of communication between rank 
                        
                           p
                        
                      and rank q. The QAP is to find the mapping function 
                        
                           f
                        
                      between the rank and node, such that the total communication, 
                        
                           
                              
                                 ∑
                              
                              
                                 i
                                 ,
                                 j
                              
                           
                           
                              
                                 w
                              
                              
                                 ij
                              
                           
                           
                              
                                 S
                              
                              
                                 f
                                 (
                                 i
                                 )
                                 f
                                 (
                                 j
                                 )
                              
                           
                        
                     , is minimized. However, the QAP is NP-hard, and efficiently obtaining its exact solution is challenging even for several tens of nodes [22]. In addition, though some authors [19–21] uses the total communication or average number of hops as a metric of the elapsed time, minimizing them does not necessarily mean efficiently reducing the communication imbalance between the nodes, which seems to be a key factor in worsening the weak scaling. Instead of the total communication or average number of hops, to reduce the communication imbalance, we now use the maximum number of hops as a metric of the elapsed time. In Section 6.1, we will show that the MPI rank with larger number of hops tends to cost more time for the communication on the K computer. It seems that the metric of the elapsed time should include not only the number of hops but also the other factors such as network congestion, as with “effective bisection bandwidth” introduced by [23] to evaluate routing algorithms. We will discuss the effect of network congestion in Section 6.2.

This study is applicable only to a 3-D or higher-dimensional torus node network topology with static routing algorithm. Another promising node network topology for the exascale computer era is multi-level direct network with all-to-all connections at each level such as dragonfly topology [24] and PERCS topology [25,26]. This approach, with the aid of the high-radix router, achieves the small number of hops between any two nodes on a massive parallel computer. In order to reduce network congestion across different network levels, adaptive routing algorithms have been suggested, in which the route is dynamically chosen to bypass the congested link. Adaptive routing algorithms also have been proposed and evaluated for mesh/torus-type network such as tori-connected mesh (TESH) network [27]. Such a development of adaptive routing algorithms as well as an improvement of static routing algorithms [23] may lead to obviate the needs for explicit rank-mapping [26].

@&#BACKGROUND@&#

NICAM [6,7] is a cutting-edge global atmospheric model with an icosahedral grid system, developed mainly at the Japan Agency for Marine-Earth Science and Technology, The University of Tokyo, and RIKEN. NICAM leads the world in the field of high-resolution global atmospheric modeling [28,1]. With the aid of the K computer, NICAM recently achieved global simulation with a revolutionizing horizontal resolution of 870m, the world’s finest horizontal mesh actually used in the simulation of the global atmosphere [29].


                        Fig. 2
                         shows an icosahedral grid system. A horizontal grid point is defined at each vertex. An icosahedron has twelve horizontal grid points and ten diamonds, each consisting of two regular triangles (Fig. 2a). A finer horizontal grid can be generated by recursively dividing each diamond into four sub-diamonds (Fig. 2b–d; [7]). The recursion depth is called the grid division level, denoted as LG
                         (
                           
                              ⩾
                              0
                           
                        ) in this paper. Each control volume is defined to include one horizontal grid point. In the following discussion, for simplicity, the grid points at the north and south poles will be neglected; it will be justified in Sections 5 and 6.1. The number of horizontal grid points is expressed as 10×
                        
                           
                              
                                 
                                    4
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          G
                                       
                                    
                                 
                              
                           
                        . The atmosphere is also discretized in the vertical direction. Physical variables such as temperature, wind, pressure, and water vapor are defined at each 3-D grid point. These 3-D variables make up the greater part of the point-to-point communications.

For parallel computing using the MPI, NICAM introduces the concept of “region”, a collection of horizontal grid points [30]. Each color in Fig. 3
                        a shows a “basic region”, which handles 
                           
                              
                                 
                                    4
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          G
                                       
                                    
                                 
                              
                           
                         horizontal grid points. There are ten basic regions on a sphere. A basic region can be recursively divided, similarly to the grid division (Fig. 3b), and its recursion depth is called the region division level and denoted as LR
                         (
                           
                              ⩾
                              0
                           
                        ). The number of regions is 
                           
                              
                                 
                                    N
                                 
                                 
                                    R
                                 
                              
                              =
                              10
                              ×
                              
                                 
                                    4
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          R
                                       
                                    
                                 
                              
                           
                        .

In this study, NICAM allocates one region to each MPI rank. There are four communication links for each MPI rank neglecting minor communications with only a tiny amount of data. Fig. 1 shows the communication graph between MPI ranks (hereinafter GR) for NICAM. GR is an unweighted, undirected 4-regular graph. The vertices and edges in GR show the MPI ranks and the communication links necessary to advance one step in time. They also show the regions and the adjacent regions. Let 
                           
                              R
                              =
                              (
                              p
                              ,
                              q
                              ,
                              r
                              )
                           
                         be an index vector of the vertex in GR defined in Fig. 1 (
                           
                              0
                              ⩽
                              p
                              ,
                              q
                              <
                              
                                 
                                    2
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          R
                                       
                                    
                                 
                              
                              ,
                              0
                              ⩽
                              r
                              <
                              10
                           
                        ), where the coordinates (p,
                        q) identify a point within a basic region r. In NICAM, the MPI rank is related to 
                           
                              R
                           
                         by
                           
                              
                                 MPIrank
                                 =
                                 p
                                 +
                                 
                                    
                                       2
                                    
                                    
                                       
                                          
                                             L
                                          
                                          
                                             R
                                          
                                       
                                    
                                 
                                 ·
                                 q
                                 +
                                 
                                    
                                       4
                                    
                                    
                                       
                                          
                                             L
                                          
                                          
                                             R
                                          
                                       
                                    
                                 
                                 ·
                                 r
                                 .
                              
                           
                        
                     

Each MPI rank has 
                           
                              
                                 
                                    4
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          G
                                       
                                    
                                    -
                                    
                                       
                                          L
                                       
                                       
                                          R
                                       
                                    
                                 
                              
                           
                         horizontal grid points. There are 
                           
                              
                                 
                                    N
                                 
                                 
                                    p
                                 
                              
                              =
                              10
                              ×
                              
                                 
                                    4
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          R
                                       
                                    
                                 
                              
                           
                         MPI ranks.

The K computer, the world’s first system to exceed peak performance of 10 PFlops, was developed by RIKEN and Fujitsu as a Japan national project between 2006 and 2012 and has been operated by RIKEN since September 2012. It is a distributed-memory supercomputer system with more than 80,000 computing nodes. The interconnection between the nodes is the 6-D mesh/torus network topology named Tofu (Torus fusion) [31–33]. In actual use, a job process can use a virtual 3-D torus network topology projected onto the physical layer of 6-D mesh/torus interconnection. This provides a complete and exclusive 3-D torus to each process, and there is a high availability of ways to bypass failed nodes.

In this study, we only consider this virtual 3-D torus network topology from a user’s perspective. The 3-D torus is represented as an unweighted, undirected 6-regular graph (GN). Each node is identified by an index vector 
                           
                              N
                              =
                              (
                              X
                              ,
                              Y
                              ,
                              Z
                              )
                           
                        , where 
                           
                              0
                              ⩽
                              X
                              <
                              
                                 
                                    N
                                 
                                 
                                    X
                                 
                              
                              ,
                              0
                              ⩽
                              Y
                              <
                              
                                 
                                    N
                                 
                                 
                                    Y
                                 
                              
                              ,
                              0
                              ⩽
                              Z
                              <
                              
                                 
                                    N
                                 
                                 
                                    Z
                                 
                              
                           
                         and 
                           
                              (
                              
                                 
                                    N
                                 
                                 
                                    X
                                 
                              
                              ,
                              
                                 
                                    N
                                 
                                 
                                    Y
                                 
                              
                              ,
                              
                                 
                                    N
                                 
                                 
                                    Z
                                 
                              
                              )
                           
                         are the numbers of nodes in the X, Y, and 
                           
                              Z
                           
                         directions, respectively. This notation is defined to express an isotropic 3-D torus, and hence the X, Y, and 
                           
                              Z
                           
                         directions are interchangeable. If it is necessary to distinguish the three directions, a hat is added to the above notation, as 
                           
                              
                                 
                                    N
                                 
                                 
                                    ∧
                                 
                              
                              =
                              (
                              
                                 
                                    X
                                 
                                 
                                    ∧
                                 
                              
                              ,
                              
                                 
                                    Y
                                 
                                 
                                    ∧
                                 
                              
                              ,
                              
                                 
                                    Z
                                 
                                 
                                    ∧
                                 
                              
                              )
                              ,
                           
                         where 
                           
                              0
                              ⩽
                              
                                 
                                    X
                                 
                                 
                                    ∧
                                 
                              
                              <
                              
                                 
                                    N
                                 
                                 
                                    
                                       
                                          X
                                       
                                       
                                          ∧
                                       
                                    
                                 
                              
                              ,
                              0
                              ⩽
                              
                                 
                                    Y
                                 
                                 
                                    ∧
                                 
                              
                              <
                              
                                 
                                    N
                                 
                                 
                                    
                                       
                                          Y
                                       
                                       
                                          ∧
                                       
                                    
                                 
                              
                              ,
                           
                         and 
                           
                              0
                              ⩽
                              
                                 
                                    Z
                                 
                                 
                                    ∧
                                 
                              
                              <
                              
                                 
                                    N
                                 
                                 
                                    
                                       
                                          Z
                                       
                                       
                                          ∧
                                       
                                    
                                 
                              
                           
                        . For the K computer, 
                           
                              
                                 
                                    N
                                 
                                 
                                    
                                       
                                          X
                                       
                                       
                                          ∧
                                       
                                    
                                 
                              
                              ⩽
                              48
                              ,
                              
                                 
                                    N
                                 
                                 
                                    
                                       
                                          Y
                                       
                                       
                                          ∧
                                       
                                    
                                 
                              
                              ⩽
                              54
                              ,
                           
                         and 
                           
                              
                                 
                                    N
                                 
                                 
                                    
                                       
                                          Z
                                       
                                       
                                          ∧
                                       
                                    
                                 
                              
                              ⩽
                              32
                           
                        . Although the 3-D torus on the K computer is anisotropic, this does not affect the main conclusions and discussion of this paper. The effect of the anisotropic aspect is briefly mentioned in Appendix A.

The rank-mapping problem is formulated as finding a one-to-one mapping function between 
                           
                              R
                           
                         and 
                           
                              N
                           
                         in order to improve the elapsed time of the point-to-point communications. The mapping function F is defined to satisfy 
                           
                              N
                              =
                              F
                              (
                              R
                              )
                           
                        . Let 
                           
                              
                                 
                                    R
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    R
                                 
                                 
                                    2
                                 
                              
                           
                         be adjacent vertices in GR, and let 
                           
                              
                                 
                                    N
                                 
                                 
                                    1
                                 
                              
                              =
                              F
                              (
                              
                                 
                                    R
                                 
                                 
                                    1
                                 
                              
                              )
                           
                         and 
                           
                              
                                 
                                    N
                                 
                                 
                                    2
                                 
                              
                              =
                              F
                              (
                              
                                 
                                    R
                                 
                                 
                                    2
                                 
                              
                              )
                           
                        . Then, the distance between 
                           
                              
                                 
                                    N
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    N
                                 
                                 
                                    2
                                 
                              
                           
                         on GN represents the number of hops for the point-to-point communication between 
                           
                              
                                 
                                    R
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    R
                                 
                                 
                                    2
                                 
                              
                           
                        . In this study, the maximum number of hops for any combination of adjacent vertices on GR (which does not include the poles by definition) is chosen to be the metric for the rank-mapping problem. Scalability is a measure of the independence of this metric to the number of nodes. On the K computer, the actual routing is done on a 6-D mesh/torus, and therefore, in most cases, the theoretical number of hops on a 3-D torus is greater than or equal to the actual number on a 6-D mesh/torus.

The communication graph GR contains 2-D mesh graphs consisting of 
                        
                           
                              
                                 2
                              
                              
                                 
                                    
                                       L
                                    
                                    
                                       R
                                    
                                 
                              
                           
                           ×
                           
                              
                                 2
                              
                              
                                 
                                    
                                       L
                                    
                                    
                                       R
                                    
                                 
                              
                           
                        
                      vertices (shadings in Fig. 1; hereinafter graph GRS). The union of ten different GRS is a spanning subgraph of GR. Therefore, it is natural to consider a rank-mapping algorithm based on the GRS and restrict the node shape to 
                        
                           (
                           
                              
                                 N
                              
                              
                                 X
                              
                           
                           ,
                           
                              
                                 N
                              
                              
                                 Y
                              
                           
                           ,
                           
                              
                                 N
                              
                              
                                 Z
                              
                           
                           )
                           =
                           (
                           
                              
                                 2
                              
                              
                                 
                                    
                                       L
                                    
                                    
                                       R
                                    
                                 
                              
                           
                           ,
                           
                              
                                 2
                              
                              
                                 
                                    
                                       L
                                    
                                    
                                       R
                                    
                                 
                              
                           
                           ,
                           10
                           )
                        
                     . In this section, we introduce three rank-mapping algorithms, as depicted in Fig. 4
                     a–c. For each algorithm, the theoretical number of hops is represented by the color in Fig. 4a–c. The maximum values as a function of the number of nodes is shown in Fig. 5
                     .

BASIC (Fig. 4a) is the default rank-mapping algorithm, simply formulated as follows:
                           
                              
                                 X
                                 =
                                 p
                                 ,
                                 
                                 Y
                                 =
                                 q
                                 ,
                                 
                                 Z
                                 =
                                 r
                                 .
                              
                           
                        
                     

The thin solid line in Fig. 5 shows the theoretical maximum number of hops, using BASIC. This strongly depends on the number of nodes, and, therefore, BASIC is not a scalable rank-mapping algorithm. The increase in the number of hops originates in the point-to-point communications between the MPI ranks of different GRS (shown in red in Fig. 4a). For example, the point-to-point communication between 
                           
                              (
                              p
                              ,
                              q
                              ,
                              r
                              )
                              =
                              (
                              
                                 
                                    2
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          R
                                       
                                    
                                    -
                                    1
                                 
                              
                              -
                              1
                              ,
                              
                                 
                                    2
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          R
                                       
                                    
                                 
                              
                              -
                              1
                              ,
                              0
                              )
                           
                         and 
                           
                              (
                              0
                              ,
                              
                                 
                                    2
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          R
                                       
                                    
                                    -
                                    1
                                 
                              
                              ,
                              1
                              )
                           
                         needs 
                           
                              
                                 
                                    2
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          R
                                       
                                    
                                 
                              
                              +
                              1
                           
                         hops; therefore, the maximum number of hops rapidly increases as 
                           
                              
                                 
                                    L
                                 
                                 
                                    R
                                 
                              
                           
                         increases.

STAG (staggered; Fig. 4b) is the same as BASIC except for the Z direction:
                           
                              
                                 X
                                 =
                                 p
                                 ,
                                 
                                 Y
                                 =
                                 q
                                 ,
                                 
                                 Z
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   2
                                                   r
                                                
                                                
                                                   (
                                                   for
                                                   
                                                   0
                                                   ⩽
                                                   r
                                                   <
                                                   5
                                                   )
                                                
                                             
                                             
                                                
                                                   2
                                                   (
                                                   9
                                                   -
                                                   r
                                                   )
                                                   +
                                                   1
                                                
                                                
                                                   (
                                                   for
                                                   
                                                   5
                                                   ⩽
                                                   r
                                                   <
                                                   10
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        
                     

STAG reduces the distance in the Z direction between adjacent GRS (e.g. r
                        =0 and 5). The maximum number of hops is smaller with STAG than with BASIC, by two to three hops (Fig. 5, thick solid line). However, the maximum number of hops still increases as the number of nodes increases for the same reason as with BASIC (shown in red in Fig. 4b).

STAG-TRIF (staggered triangular folding; Fig. 4c) is based on STAG. First, define 
                           
                              
                                 
                                    r
                                 
                                 
                                    ′
                                 
                              
                           
                         as follows:
                           
                              
                                 
                                    
                                       r
                                    
                                    
                                       ′
                                    
                                 
                                 ≡
                                 
                                    
                                       
                                          
                                             
                                                
                                                   2
                                                   r
                                                
                                                
                                                   (
                                                   for
                                                   
                                                   0
                                                   ⩽
                                                   r
                                                   <
                                                   5
                                                   )
                                                
                                             
                                             
                                                
                                                   2
                                                   (
                                                   9
                                                   -
                                                   r
                                                   )
                                                   +
                                                   1
                                                
                                                
                                                   (
                                                   for
                                                   
                                                   5
                                                   ⩽
                                                   r
                                                   <
                                                   10
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        
                     

As discussed previously, the factor that prevents scalability in BASIC and STAG is the point-to-point communications between the MPI ranks of different GRS. To avoid an increase in the number of hops as the number of nodes increases, each GRS is divided into triangles, as shown in Fig. 4c. Formulations of STAG-TRIF are expressed for the following four conditions:
                           
                              (1)
                              
                                 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             ′
                                          
                                       
                                    
                                  is even and 
                                    
                                       p
                                       +
                                       q
                                       <
                                       
                                          
                                             2
                                          
                                          
                                             
                                                
                                                   L
                                                
                                                
                                                   R
                                                
                                             
                                          
                                       
                                    
                                 ,
                                    
                                       
                                          X
                                          =
                                          p
                                          ,
                                          
                                          Y
                                          =
                                          q
                                          ,
                                          
                                          Z
                                          =
                                          
                                             
                                                r
                                             
                                             
                                                ′
                                             
                                          
                                          .
                                       
                                    
                                 
                              


                                 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             ′
                                          
                                       
                                       
                                       is even and
                                       
                                       p
                                       +
                                       q
                                       ⩾
                                       
                                          
                                             2
                                          
                                          
                                             
                                                
                                                   L
                                                
                                                
                                                   R
                                                
                                             
                                          
                                       
                                       ,
                                    
                                 
                                 
                                    
                                       
                                          X
                                          =
                                          
                                             
                                                2
                                             
                                             
                                                
                                                   
                                                      L
                                                   
                                                   
                                                      R
                                                   
                                                
                                             
                                          
                                          -
                                          q
                                          -
                                          1
                                          ,
                                          
                                          Y
                                          =
                                          
                                             
                                                2
                                             
                                             
                                                
                                                   
                                                      L
                                                   
                                                   
                                                      R
                                                   
                                                
                                             
                                          
                                          -
                                          p
                                          -
                                          1
                                          ,
                                          
                                          Z
                                          =
                                          
                                             
                                                r
                                             
                                             
                                                ′
                                             
                                          
                                          +
                                          1
                                          .
                                       
                                    
                                 
                              


                                 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             ′
                                          
                                       
                                    
                                  is odd and 
                                    
                                       p
                                       +
                                       q
                                       <
                                       
                                          
                                             2
                                          
                                          
                                             
                                                
                                                   L
                                                
                                                
                                                   R
                                                
                                             
                                          
                                       
                                    
                                 ,
                                    
                                       
                                          X
                                          =
                                          
                                             
                                                2
                                             
                                             
                                                
                                                   
                                                      L
                                                   
                                                   
                                                      R
                                                   
                                                
                                             
                                          
                                          -
                                          q
                                          -
                                          1
                                          ,
                                          
                                          Y
                                          =
                                          
                                             
                                                2
                                             
                                             
                                                
                                                   
                                                      L
                                                   
                                                   
                                                      R
                                                   
                                                
                                             
                                          
                                          -
                                          p
                                          -
                                          1
                                          ,
                                          
                                          Z
                                          =
                                          
                                             
                                                r
                                             
                                             
                                                ′
                                             
                                          
                                          .
                                       
                                    
                                 
                              


                                 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             ′
                                          
                                       
                                    
                                  is odd and 
                                    
                                       p
                                       +
                                       q
                                       ⩾
                                       
                                          
                                             2
                                          
                                          
                                             
                                                
                                                   L
                                                
                                                
                                                   R
                                                
                                             
                                          
                                       
                                    
                                 ,
                                    
                                       
                                          X
                                          =
                                          p
                                          ,
                                          
                                          Y
                                          =
                                          q
                                          ,
                                          
                                          Z
                                          =
                                          mod
                                          (
                                          
                                             
                                                r
                                             
                                             
                                                ′
                                             
                                          
                                          +
                                          1
                                          ,
                                          10
                                          )
                                          .
                                       
                                    
                                 
                              

In theory, STAG-TRIF achieves perfect scalability in the sense of the maximum number of hops, which is constant (=2), independent of the number of nodes (Fig. 5, thick dashed line).

The NICAM communication kernel was employed to measure the actual impact of the rank-mapping algorithms on the elapsed time of the point-to-point communications. The communication kernel, constructed based on the NICAM source code, contains the minimum required procedures for the point-to-point communications that are necessary for the time integration of NICAM. Generally, the amount of computation per time step is different for each MPI rank at each time step. The NICAM communication kernel is free from such a load imbalance, unlike NICAM itself. Therefore, use of the communication kernel helps us to understand, in a simple manner, the impact of the rank-mapping algorithm on the elapsed time of the point-to-point communications.


                     Fig. 6
                      shows brief flowcharts for the NICAM communication kernel and comm_data_transfer(), the subroutine for the point-to-point communications. The elapsed time of comm_data_transfer() was measured for this analysis. The subroutine mpi_barrier() was inserted just before comm_data_transfer() so that the point-to-point communications began simultaneously. The amount of data transmitted (or received) for each rank is approximately 
                        
                           8
                           ×
                           4
                           ×
                           
                              
                                 2
                              
                              
                                 
                                    
                                       L
                                    
                                    
                                       G
                                    
                                 
                                 -
                                 
                                    
                                       L
                                    
                                    
                                       R
                                    
                                 
                              
                           
                           ×
                           vmax
                           ×
                           kmax
                        
                      bytes per one call of comm_data_transfer(), where vmax and kmax are the numbers of 3-D variables and vertical layers, respectively, and for an 8-byte data format. As with the algorithms in the previous section, the communication kernel ignores the north and south poles; the amount of data transmitted for the poles is approximately 
                        
                           8
                           ×
                           2
                           ×
                           5
                           ×
                           vmax
                           ×
                           kmax
                        
                      bytes, about 
                        
                           
                              
                                 2
                              
                              
                                 
                                    
                                       L
                                    
                                    
                                       G
                                    
                                 
                                 -
                                 
                                    
                                       L
                                    
                                    
                                       R
                                    
                                 
                                 -
                                 1
                              
                           
                        
                      times smaller than that between the normal regions. For each rank-mapping algorithm, we prepared a “rank-map file” that listed 
                        
                           N
                        
                      for each MPI rank. When the job script was submitted to the K computer, the job manager allocated the MPI ranks to the nodes according to the rank-map file.

For the elapsed-time measurement, comm_data_transfer() was called 1000 times (NUM=1000 in Fig. 6), and vmax and kmax were set to 100 and 38, respectively. Though the configuration of vmax=100 may be too large considering the current standard configuration of vmax=12, vmax is expected to increase in near future by introducing chemical processes (plus several dozen) and more cloud categories (plus 6 or more). In addition, vmax and kmax are exchangeable in a sense of the point-to-point communications, and the realistic simulation with kmax=261 is planned on the K computer in 2014. In order to observe weak scaling, the amount of the point-to-point communications per node was kept constant by keeping 
                        
                           
                              
                                 L
                              
                              
                                 G
                              
                           
                           -
                           
                              
                                 L
                              
                              
                                 R
                              
                           
                        
                      unchanged throughout the series of experiments; 
                        
                           (
                           
                              
                                 L
                              
                              
                                 G
                              
                           
                           ,
                           
                              
                                 L
                              
                              
                                 R
                              
                           
                           )
                           =
                           (
                           5
                           ,
                           0
                           )
                           ,
                           (
                           6
                           ,
                           1
                           )
                           ,
                           (
                           7
                           ,
                           2
                           )
                           ,
                           (
                           8
                           ,
                           3
                           )
                           ,
                           (
                           9
                           ,
                           4
                           )
                           ,
                           
                           and
                           
                           (
                           10
                           ,
                           5
                           )
                        
                     . The corresponding numbers of nodes are 10, 40, 160, 640, 2560, and 10,240. Each experiment was repeated three times in order to check fluctuations of the elapsed time. A weak scaling index, 
                        
                           
                              
                                 α
                              
                              
                                 weak
                              
                              
                                 N
                              
                           
                        
                     , was defined to be the elapsed time for N/4 nodes divided by that for N nodes. The amount of data transmitted for each rank was approximately 3.7 MiBytes for each call of comm_data_transfer() in all the experiments.

@&#RESULTS AND DISCUSSION@&#


                        Fig. 7
                         shows the maximum elapsed time of the point-to-point communications between the MPI ranks in the NICAM communication kernel. For BASIC, 
                           
                              
                                 
                                    α
                                 
                                 
                                    weak
                                 
                                 
                                    N
                                 
                              
                           
                         was more than 0.98 for 40, 160, and 640 nodes, about 0.96 for 2560 nodes, and 0.90 for 10,240 nodes. The maximum elapsed time increased by 19% from 10 to 10,240 nodes. For STAG, the maximum elapsed time and 
                           
                              
                                 
                                    α
                                 
                                 
                                    weak
                                 
                                 
                                    N
                                 
                              
                           
                         were similar to those for BASIC. Compared to STAG and BASIC, the maximum elapsed time for STAG-TRIF was significantly reduced for 2560 and 10,240 nodes. 
                           
                              
                                 
                                    α
                                 
                                 
                                    weak
                                 
                                 
                                    N
                                 
                              
                           
                         was more than 0.99 not only for 160 and 640 nodes, but also for 2560 and 10,240 nodes. Therefore, based on the actual weak scaling, STAG-TRIF is the most scalable rank-mapping algorithm among the three that we tested. We also run NICAM communication kernel with the north and south poles and confirmed that the exclusion of the poles has no significant impact on the above conclusion (Appendix B).


                        Fig. 8
                         shows the elapsed time for each MPI rank when 10,240 nodes were used. Fig. 9
                         indicates the corresponding theoretical number of hops. The patterns in Fig. 8 resemble those in Fig. 9, for example, the 1024-rank-cycle for BASIC and STAG. For STAG-TRIF, both the elapsed time and the number of hops show little change with rank. For 
                           
                              0
                              ⩽
                              rank
                              <
                              1024
                           
                         [
                           
                              (
                              p
                              ,
                              q
                              ,
                              r
                              )
                              =
                              (
                              ∗
                              ,
                              ∗
                              ,
                              0
                              )
                           
                         in Fig. 1; ∗ stands for any possible index], the elapsed times for rank=0, 32, 64… [
                           
                              (
                              p
                              ,
                              q
                              ,
                              r
                              )
                              =
                              (
                              0
                              ,
                              ∗
                              ,
                              0
                              )
                           
                        ] are longer than the background times (∼9.3s) for BASIC and STAG. This tends to be more evident as the rank approaches 512 [
                           
                              (
                              p
                              ,
                              q
                              ,
                              r
                              )
                              =
                              (
                              0
                              ,
                              
                                 
                                    2
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          R
                                       
                                    
                                    -
                                    1
                                 
                              
                              ,
                              0
                              )
                           
                        ; 
                           
                              
                                 
                                    L
                                 
                                 
                                    R
                                 
                              
                              =
                              5
                           
                        ]. In addition, the elapsed times for the ranks between 992 and 1023 [
                           
                              (
                              p
                              ,
                              q
                              ,
                              r
                              )
                              =
                              (
                              ∗
                              ,
                              
                                 
                                    2
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          R
                                       
                                    
                                 
                              
                              -
                              1
                              ,
                              0
                              )
                           
                        ] are also longer than the background times. Such characteristics are commonly seen for 
                           
                              0
                              ⩽
                              r
                              <
                              5
                           
                        . For 
                           
                              5
                              ⩽
                              r
                              <
                              10
                           
                        , the elapsed times are longer at 
                           
                              (
                              p
                              ,
                              q
                              ,
                              r
                              )
                              =
                              (
                              
                                 
                                    2
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          R
                                       
                                    
                                 
                              
                              -
                              1
                              ,
                              ∗
                              ,
                              r
                              )
                           
                         and 
                           
                              (
                              ∗
                              ,
                              0
                              ,
                              r
                              )
                           
                        . Consistently, these ranks with longer elapsed time theoretically need larger numbers of hops. This indicates the usefulness of the number of hops on 3-D torus network as a metric of the elapsed time for the K computer.

We further investigated what causes the difference in weak scaling between the STAG-TRIF and the other algorithms for larger numbers of nodes. The elapsed time corresponds to the number of hops, as mentioned in the previous subsection, and therefore the number of hops itself may simply affect the elapsed time and weak scaling. At the same time, increases in the number of hops are often accompanied by greater congestion in communication, and this may also affect the results. To separate the two possible factors, a random sleep time was inserted just before comm_data_transfer() to reduce the probability of congestion and to isolate the effect of the number of hops. The length of the sleep time was randomly allocated from between 0 and 0.01 [s] for each MPI rank and each of the 1000 calls to comm_data_transfer(). We also confirmed that the following conclusion is not affected by setting random sleep time between 0 and 0.1 [s] (not shown).


                        Fig. 10
                         shows the results of the random-sleep experiments. The elapsed time was shorter for ten nodes than elsewhere, since for only ten nodes, the random sleep time did not well cover the interval of 0–0.01 [s]. For 40 nodes or more, the elapsed time was saturated around 18 [s], and the weak scaling index became almost 1 for 160 nodes or more. Comparison between BASIC and STAG for the random and no-sleep experiments suggests that the synchronicity of the point-to-point communications among MPI ranks significantly affects the weak scaling. Fig. 10 also shows that the choice of the rank-mapping algorithm does not affect the elapsed time if the timing for the point-to-point communications differs among the MPI ranks. This indicates that the number of hops itself does not worsen the weak scaling on the K computer. Alternatively, congestion of the communication (generally as a result of a larger number of hops) seems to affect the weak scaling, though to observe and improve this congestion is beyond the scope of this study.

@&#CONCLUSION@&#

We developed a scalable rank-mapping algorithm, STAG-TRIF, for icosahedral grid system on a supercomputer with the 3-D torus network topology. Regardless of the number of nodes, with STAG-TRIF, the maximum number of hops for the point-to-point communications is constant (=2). We confirmed that STAG-TRIF achieves almost perfect weak scaling on the K computer using the NICAM communication kernel, even for 10,240 nodes. The results of additional experiments imply that STAG-TRIF achieves high scalability by reducing the communication congestion through the links between the adjacent nodes. When the timings of the communications are delayed randomly among the MPI ranks, in order to reduce the probability of congestion, both STAG-TRIF and the standard algorithms show almost perfect weak scaling.

In principle, STAG-TRIF is applicable to any 3-D or higher-dimensional torus network topology. Such a node network topology is highly scalable for a massively parallel computer system, such as the exascale computer, which is expected to appear in the late 2010s. In theory, STAG-TRIF is perfectly scalable, and thus we believe it is useful not only for the K computer but also for other computer systems with a 3-D or higher-dimensional torus network topology. We will confirm this in a future study on an exascale computer.

@&#ACKNOWLEDGEMENTS@&#

We would like to express our sincere thanks to J. Ueno at Fujitsu Limited for providing valuable information on the node interconnections of the K computer. Our thanks also go to the three anonymous reviewers for providing us constructive comments. Part of the figures in this paper were plotted using Grid Analysis and Display System (GrADS). The elapsed times were measured on the K computer at the RIKEN Advanced Institute for Computational Science (Proposal number hp120279 and hp130010). This study is supported by Strategic Programs for Innovative Research (SPIRE) Field 3 (Projection of Planet Earth Variations for Mitigating Natural Disasters), which is promoted by the Ministry of Education, Culture, Sports, Science and Technology (MEXT), Japan.

The three directions of the 3-D torus network are anisotropic on the K computer. Such an anisotropic aspect quantitatively affects the impact of the rank-mapping algorithms on the elapsed time of the point-to-point communications. Fig. A1 shows the results for 
                        
                           (
                           
                              
                                 N
                              
                              
                                 
                                    
                                       X
                                    
                                    
                                       ∧
                                    
                                 
                              
                           
                           ,
                           
                              
                                 N
                              
                              
                                 
                                    
                                       Y
                                    
                                    
                                       ∧
                                    
                                 
                              
                           
                           ,
                           
                              
                                 N
                              
                              
                                 
                                    
                                       Z
                                    
                                    
                                       ∧
                                    
                                 
                              
                           
                           )
                        
                     
                     =
                     
                        
                           (
                           
                              
                                 2
                              
                              
                                 
                                    
                                       L
                                    
                                    
                                       R
                                    
                                 
                              
                           
                           ,
                           10
                           ,
                           
                              
                                 2
                              
                              
                                 
                                    
                                       L
                                    
                                    
                                       R
                                    
                                 
                              
                           
                           )
                        
                      and 
                        
                           (
                           
                              
                                 2
                              
                              
                                 
                                    
                                       L
                                    
                                    
                                       R
                                    
                                 
                              
                           
                           ,
                           
                              
                                 2
                              
                              
                                 
                                    
                                       L
                                    
                                    
                                       R
                                    
                                 
                              
                           
                           ,
                           10
                           )
                        
                     , where 
                        
                           
                              
                                 L
                              
                              
                                 R
                              
                           
                        
                     
                     =3 and 4. As in Fig. 7, only STAG-TRIF achieves an almost perfect weak scaling for 2560 nodes. The elapsed times for BASIC and STAG were worse than those for 
                        
                           (
                           
                              
                                 N
                              
                              
                                 
                                    
                                       X
                                    
                                    
                                       ∧
                                    
                                 
                              
                           
                           ,
                           
                              
                                 N
                              
                              
                                 
                                    
                                       Y
                                    
                                    
                                       ∧
                                    
                                 
                              
                           
                           ,
                           
                              
                                 N
                              
                              
                                 
                                    
                                       Z
                                    
                                    
                                       ∧
                                    
                                 
                              
                           
                           )
                        
                     
                     =
                     
                        
                           (
                           10
                           ,
                           
                              
                                 2
                              
                              
                                 
                                    
                                       L
                                    
                                    
                                       R
                                    
                                 
                              
                           
                           ,
                           
                              
                                 2
                              
                              
                                 
                                    
                                       L
                                    
                                    
                                       R
                                    
                                 
                              
                           
                           )
                        
                     . Determining why the quantitative impact of the rank-mapping algorithm differs with rotation of the node is beyond the scope of this study. It will require consideration of the actual 6-D mesh/torus network topology. Again, this anisotropic aspect does not affect the main conclusions and discussion of this paper.

In this study, the point-to-point communications with the grid points at the north and south poles are not included in the measurement of the elapsed time (Figs. 7–10 and A1
                     ). It is justified by comparing the results with and without pole grids (Figs. A2 and 7
                     ). Both figures show that, as number of nodes increases, weak scaling index, 
                        
                           
                              
                                 α
                              
                              
                                 weak
                              
                              
                                 N
                              
                           
                        
                     , is decreased for BASIC and STAG, whereas it remains almost constant for STAG-TRIF. Therefore, the exclusion of the pole grids has no significant impact on the conclusion of this paper.

@&#REFERENCES@&#

