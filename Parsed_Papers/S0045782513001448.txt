@&#MAIN-TITLE@&#Incompressible smoothed particle hydrodynamics (SPH) with reduced temporal noise and generalised Fickian smoothing applied to body–water slam and efficient wave–body interaction

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We conduct truly incompressible SPH simulations for free-surface flows.


                        
                        
                           
                           We further develop a stabilising particle shifting algorithm.


                        
                        
                           
                           An improved free-surface boundary treatment is presented.


                        
                        
                           
                           Slamming cases, and a novel, efficient wave–structure interaction technique are presented.


                        
                        
                           
                           Accuracy is good, pressures are virtually noise free.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Incompressible SPH

Free-surface flow simulation

Fluid–structure interaction

@&#ABSTRACT@&#


               
               
                  Incompressible smoothed particle hydrodynamics generally requires particle distribution smoothing to give stable and accurate simulations with noise-free pressures. The diffusion-based smoothing algorithm of Lind et al. (J. Comp. Phys. 231 (2012) 1499–1523) has proved effective for a range of impulsive flows and propagating waves. Here we apply this to body–water slam and wave–body impact problems and discover that temporal pressure noise can occur for these applications (while spatial noise is effectively eliminated). This is due to the free-surface treatment as a discontinuous boundary. Treating this as a continuous very thin boundary within the pressure solver is shown to effectively cure this problem. The particle smoothing algorithm is further generalised so that a non-dimensional diffusion coefficient is applied which suits a given time step and particle spacing.
                  We model the particular problems of cylinder and wedge slam into still water. We also model wave-body impact by setting up undisturbed wave propagation within a periodic domain several wavelengths long and inserting the body. In this case, the loads become cyclic after one wave period and are in good agreement with experiment. This approach is more efficient than the conventional wave flume approach with a wavemaker which requires many wavelengths and a beach absorber.
                  Results are accurate and virtually noise-free, spatially and temporally. Convergence is demonstrated. Although these test cases are two-dimensional with simple geometries, the approach is quite general and may be readily extended to three dimensions.
               
            

@&#INTRODUCTION@&#

Smoothed particle hydrodynamics (SPH) is an attractive method for simulating unsteady flows with free-surfaces due to its Lagrangian form. Free-surface tracking or capturing is not required and hence arbitrarily complex free-surface deformations can be handled automatically. For this reason, SPH has received considerable attention in simulating complex hydrodynamic problems. In virtually all such cases, the working fluid (water) can be considered incompressible.

Traditionally, the simulation of incompressible fluid flow by the SPH method has been through a weakly compressible SPH formulation (WCSPH). In this approach, the pressure is treated as a thermodynamic variable and is calculated using an artificial equation of state. The sound speed is set to be sufficiently high to limit density variations to within a small fraction of the actual fluid density. In practice, this high sound speed places a limitation on the maximum permissible time-step size through the Courant–Friedrichs–Lewy (CFL) constraint. A particular weakness relates to noise in the pressure field since a small perturbation in the local density will yield a large variation in the local pressure. This can make WCSPH formulations ineffective for accurate force and pressure prediction, although recent developments which create more uniform particle distributions have improved this [1,2]. A review of the SPH method can be found in [3] while a review of the classical WCSPH formulation applied to free-surface flows can be found in [4].

To overcome the limitations of the WCSPH formulation, a truly incompressible approach has been adopted based on the projection method of Chorin [5] for a general time-stepping solution of the incompressible Navier–Stokes equations. The method decouples the momentum and continuity equations and enforces a divergence-free velocity field, thereby satisfying the continuity condition for an incompressible fluid. The method initially solves the momentum equations without a pressure gradient, generating an intermediate velocity field. A Poisson equation for the pressure is then derived such that the divergence of the intermediate velocity field is balanced by the divergence of the pressure gradient term. The final velocity field at the end of the time step is thus made to be divergence free. Cummins and Rudman [6] were probably the first to apply the Chorin projection method to SPH. They have demonstrated their method for internal test-cases such as vortex spin-down and Rayleigh–Taylor instability. It was found that satisfactory agreement with finite difference simulations could be attained. However Cummins and Rudman noted error accumulation and inhomogeneous particle distributions. Xu et al. [7] found that this inhomogeneous particle distribution can lead to instability in the solution, often leading to divergence, particularly at high Reynolds number. Comparisons between WCSPH and incompressible SPH (ISPH) have been made by Lee et al. [8] for confined flows, and Hughes and Graham [9] for free-surface flows.

Shao and Lo [10] proposed an alternative formulation in which density invariance is enforced directly rather than a divergence-free velocity field. Shao [11] demonstrates good agreement against experimental data for wedge entry cases, although the pressure field is quite noisy [7]. Since the density is nearly homogeneous (i.e. the particles are uniformly distributed) stability issues do not occur.

Hu and Adams [12] proposed an algorithm whereby density invariance and a divergence-free velocity field are both enforced, necessitating the solution of two Poisson equations at each time step. Several internal iterations may also be required to maintain density invariance if the particle spacing is tending to become highly inhomogeneous. The computational costs associated with the method can therefore be high, but the method appears stable.

Xu et al. [7] followed the approach of [6], imposing a divergence-free velocity field. In order to avoid instability through clumping or stretching, particles are shifted slightly across a streamline to give a more uniform distribution at the end of each time-step, with hydrodynamic variables being corrected to account for their change in position through interpolation. The shifting vector is based on an averaged distance vector between the particles within its kernel support. Xu et al. demonstrate that their method yields high accuracy and approximately uniform particle distributions for internal flows involving vortex spin-down and lid driven cavities. Since the shifting distance in a time step is typically an order of magnitude smaller than the particle advection distance, any interpolation errors tend to be negligible. This approach has also been applied with the weakly compressible method with adaptive particle sizing, reducing the pressure noise [2]. The δ-SPH also produces more uniform particle distributions, reducing pressure noise [1].

Lind et al. [13] found that the method proposed in [7] suffers from instabilities for flows with a free surface. A crude fix is to artificially introduce high viscosity for particles close to the free surface. This is clearly undesirable since it is in violation of the required physics. Instead Lind et al. [13] proposed a shifting algorithm based on Fick’s law of diffusion. The method was shown to be highly accurate and stable, with virtually spatially noise-free pressure predictions for free-surface cases involving both impulsive flows and long-term wave propagation. No special treatment of the free-surface particles was required, other than minimising shifting of the free-surface particles themselves in the direction normal to the surface.

The implementation of solid boundary conditions in [13] was however simple and not well suited to complex geometries. In the present study, we use a more versatile body boundary condition and apply the method to the challenging problems of cylinder and wedge slamming into initially still water and to regular wave impact on a horizontal cylinder. Slam and wave impact loading are important practical problems with highly distorted free-surface motion, relating to wave impact on ships, offshore and coastal structures, floating bodies such as wave energy or wind turbine support systems, and fast vessel slam loads. It will be shown that for such problems the shifting algorithm of [13] needs to be generalised to provide stable shifting in different regions of the flow. In practice, this entails the use of a local shifting coefficient for each individual particle. Importantly, it will also be shown that spurious temporal noise may be produced in these situations and a method for reducing this is presented.

For wave propagation problems, the conventional scheme for generating waves through a wave paddle representation requires a large domain with absorption at the other end as in Lind et al. [13]. Here, this is replaced with several pre-determined wavelengths in a periodic domain, thus reducing computational expense considerably.

This paper is structured as follows. Section 2 outlines the ISPH algorithm, boundary conditions and the diffusion based shifting algorithm. In Section 3, we present results for an internal flow, cylinder slam, wedge slam and wave–cylinder interaction. These results provide validation of the ISPH algorithm. Finally, conclusions and closing remarks can be found in Section 4.

@&#METHODOLOGY@&#

In SPH, the integral representation of smooth function f at point x is given by the following;
                           
                              (1)
                              
                                 〈
                                 f
                                 
                                    
                                       
                                          x
                                       
                                    
                                 
                                 〉
                                 =
                                 
                                    ∫
                                    
                                       Ω
                                    
                                 
                                 f
                                 
                                    
                                       
                                          
                                             
                                                x
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                 
                                 W
                                 
                                    
                                       
                                          x
                                          -
                                          
                                             
                                                x
                                             
                                             
                                                ′
                                             
                                          
                                          ,
                                          h
                                       
                                    
                                 
                                 d
                                 
                                    
                                       x
                                    
                                    
                                       ′
                                    
                                 
                              
                           
                        where 
                           
                              W
                              
                                 
                                    
                                       x
                                       -
                                       
                                          
                                             x
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       h
                                    
                                 
                              
                           
                         is the smoothing function, or kernel. The volume integral is conducted over the entire domain Ω (in practice, only a small portion of the domain is integrated since W is selected to have compact support). The operator 
                           
                              〈
                              〉
                           
                         is used to highlight the fact that (1) is not exact (unless the kernel function is taken as the Dirac delta function). Eq. (1) can be discretised in a straightforward manner through numerical integration thereby forming the basis of the SPH method.

To obtain a gradient operator, we treat the function 
                           
                              f
                              (
                              x
                              )
                           
                         in (1) as a gradient, i.e. 
                           
                              f
                              (
                              x
                              )
                              =
                              ∇
                              g
                              (
                              x
                              )
                           
                        , where 
                           
                              g
                              (
                              x
                              )
                           
                         is a smooth function. After integration by parts (in order to transfer the gradient term to the analytical kernel function), the gradient operator can be discretised to give:
                           
                              (2)
                              
                                 〈
                                 ∇
                                 
                                    
                                       ϕ
                                    
                                    
                                       i
                                    
                                 
                                 〉
                                 ≈
                                 -
                                 
                                    ∑
                                 
                                 
                                    
                                       V
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                ϕ
                                             
                                             
                                                i
                                             
                                          
                                          -
                                          
                                             
                                                ϕ
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                                 ∇
                                 
                                    
                                       W
                                    
                                    
                                       ij
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    V
                                 
                                 
                                    i
                                 
                              
                           
                         is the volume of particle 
                           
                              i
                              ,
                              
                              ϕ
                           
                         is any variable, 
                           
                              
                                 
                                    W
                                 
                                 
                                    ij
                                 
                              
                           
                         is the value of the kernel function centred on particle i at particle j, and 
                           
                              ∇
                              
                                 
                                    W
                                 
                                 
                                    ij
                                 
                              
                           
                         is its gradient. The summation is performed over all particles, j, within the support domain of i. A kernel function is chosen with compact support in order to minimise computational costs. An expression of similar form to (2) is obtained for the divergence operator since the divergence operator can be decomposed into a series of gradient operators.

Eq. (2) is used to discretise some terms of the Navier–Stokes equations. For the viscous term, we choose the Laplacian operator proposed by Schwaiger [14] due to the enhanced performance at a free surface with truncated kernel support, relative to other simpler formulations. While this Laplacian operator is strictly non-conservative, it has been shown to provide highly accurate solutions for many cases involving a free surface [13].

To enforce incompressibility, the projection method [6] has been employed to ensure a divergence-free velocity field. Particles are advected to their intermediate location through:
                           
                              (3)
                              
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                    
                                       ∗
                                    
                                 
                                 =
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                    
                                       n
                                    
                                 
                                 +
                                 Δ
                                 t
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                    
                                       n
                                    
                                 
                              
                           
                        
                     

An intermediate velocity, 
                           
                              
                                 
                                    u
                                 
                                 
                                    i
                                 
                                 
                                    ∗
                                 
                              
                           
                         is calculated based on the discretised momentum equations without a pressure gradient:
                           
                              (4)
                              
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                    
                                       ∗
                                    
                                 
                                 =
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                    
                                       n
                                    
                                 
                                 +
                                 
                                    
                                       
                                          
                                             
                                                μ
                                             
                                             
                                                ρ
                                             
                                          
                                          
                                             
                                                ∇
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                u
                                             
                                             
                                                i
                                             
                                             
                                                n
                                             
                                          
                                          +
                                          
                                             
                                                g
                                             
                                             
                                                i
                                             
                                             
                                                n
                                             
                                          
                                       
                                    
                                 
                                 Δ
                                 t
                              
                           
                        where g is the gravity vector.

The pressure at time 
                           
                              n
                              +
                              1
                           
                         is obtained from a solution of the Poisson equation;
                           
                              (5)
                              
                                 ∇
                                 ·
                                 
                                    
                                       
                                          
                                             
                                                1
                                             
                                             
                                                ρ
                                             
                                          
                                          ∇
                                          
                                             
                                                p
                                             
                                             
                                                n
                                                +
                                                1
                                             
                                          
                                       
                                    
                                 
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       Δ
                                       t
                                    
                                 
                                 ∇
                                 ·
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                    
                                       ∗
                                    
                                 
                              
                           
                        We again choose the Schwaiger Laplacian operator [14] to discretise the left-hand side of (5).

The velocity at time 
                           
                              n
                              +
                              1
                           
                         is obtained by the projection of 
                           
                              
                                 
                                    u
                                 
                                 
                                    ∗
                                 
                              
                           
                         onto divergent free space;
                           
                              (6)
                              
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                    
                                       n
                                       +
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       u
                                    
                                    
                                       i
                                    
                                    
                                       ∗
                                    
                                 
                                 -
                                 
                                    
                                       Δ
                                       t
                                    
                                    
                                       ρ
                                    
                                 
                                 ∇
                                 
                                    
                                       p
                                    
                                    
                                       i
                                    
                                    
                                       n
                                       +
                                       1
                                    
                                 
                              
                           
                        
                     

Finally, particles are advected to their positions at time 
                           
                              n
                              +
                              1
                           
                         by a centred scheme:
                           
                              (7)
                              
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                    
                                       n
                                       +
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                    
                                       n
                                    
                                 
                                 +
                                 Δ
                                 t
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      u
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      n
                                                      +
                                                      1
                                                   
                                                
                                                +
                                                
                                                   
                                                      u
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      n
                                                   
                                                
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

We wish to maintain a near uniform particle distribution for stability. For the slamming cases considered herein, large free-surface deformation occurs in conjunction with stagnation regions, ultimately yielding a highly distorted non-uniform particle distribution in the absence of shifting. To avoid this, Fick’s law is used at the end of each time step in order to shift particles along the particle concentration gradient, from regions of high concentration to regions of low concentration. Following shifting, the primitive fluid variables are corrected to account for their change in position by a Taylor’s series expansion.

Fick’s law is given by:
                           
                              (8)
                              
                                 J
                                 =
                                 -
                                 
                                    
                                       D
                                    
                                    
                                       i
                                    
                                    
                                       ′
                                    
                                 
                                 ∇
                                 
                                    
                                       C
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        where J is the flux, 
                           
                              
                                 
                                    D
                                 
                                 
                                    i
                                 
                                 
                                    ′
                                 
                              
                           
                         is a diffusion coefficient, and C is the concentration (which can be taken to be the sum of the kernel function).

We assume that the flux, J, is proportional to a shifting velocity, 
                           
                              
                                 
                                    v
                                 
                                 
                                    s
                                 
                              
                           
                        . From 
                           
                              
                                 
                                    v
                                 
                                 
                                    s
                                 
                              
                           
                        , a particle displacement vector, 
                           
                              δ
                              
                                 
                                    r
                                 
                                 
                                    i
                                 
                              
                           
                        , can be found from 
                           
                              δ
                              
                                 
                                    r
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    v
                                 
                                 
                                    s
                                 
                              
                              Δ
                              t
                           
                        , which is used to update the particle positions such that:
                           
                              (9)
                              
                                 δ
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                 
                                 ∝
                                 -
                                 
                                    
                                       D
                                    
                                    
                                       i
                                    
                                    
                                       ′
                                    
                                 
                                 Δ
                                 t
                                 ∇
                                 
                                    
                                       C
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        
                     

The diffusion coefficient, 
                           
                              
                                 
                                    D
                                 
                                 
                                    i
                                 
                                 
                                    ′
                                 
                              
                           
                        , should be set to be large enough to provide effective particle shifting, while not being so large as to introduce significant errors or instabilities. An upper limit on the diffusion coefficient can be found through a Von Neumann stability analysis of the advection-diffusion equation:
                           
                              (10)
                              
                                 
                                    
                                       D
                                    
                                    
                                       i
                                    
                                    
                                       ′
                                    
                                 
                                 ⩽
                                 
                                    
                                       1
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       
                                          
                                             h
                                          
                                          
                                             2
                                          
                                       
                                    
                                    
                                       Δ
                                       
                                          
                                             t
                                          
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              Δ
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                                 
                                    ′
                                 
                              
                           
                         is the maximum local time step that is permitted by the CFL condition for a given local velocity and particle spacing (we solve with time step 
                           
                              Δ
                              t
                              ⩽
                              Δ
                              
                                 
                                    t
                                 
                                 
                                    min
                                 
                                 
                                    ′
                                 
                              
                           
                        ). The CFL condition states that:
                           
                              (11)
                              
                                 Δ
                                 
                                    
                                       t
                                    
                                    
                                       i
                                    
                                    
                                       ′
                                    
                                 
                                 ⩽
                                 
                                    
                                       h
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            u
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   u
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                           
                         is the velocity magnitude of particle i. A value of 
                           
                              Δ
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                                 
                                    ′
                                 
                              
                              =
                              0.5
                              h
                              /
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   u
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                           
                         is selected, corresponding to a CFL number of 
                           
                              0.5
                           
                        . Substituting this value into (10) yields:
                           
                              (12)
                              
                                 
                                    
                                       D
                                    
                                    
                                       i
                                    
                                    
                                       ′
                                    
                                 
                                 ⩽
                                 h
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      u
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        Combining results (9) and (12) yields:
                           
                              (13)
                              
                                 δ
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 -
                                 Ah
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      u
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 Δ
                                 t
                                 ∇
                                 
                                    
                                       C
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        
                     

Note that A is a dimensionless constant that is independent of the problem setup and discretisation. A single value can thus in principle be used for any problem. The diffusion coefficient does not need to be manually tuned to suit a given spatial and temporal resolution (as was the case in [13]). Values of A in the range [1,6] have been tested, and found to work satisfactorily. It is however desirable to minimise the diffusion coefficient to the smallest possible value that still yields effective shifting, thereby minimising any interpolation errors that are introduced. A value of 
                           
                              A
                              =
                              2
                           
                         has been found to provide a good compromise and has been used for all problems presented here.

In Lind et al. [13], an upper limit on the shifting distance is imposed as 
                           
                              0.2
                              h
                           
                        . This is necessary for stability of their algorithm since a single global value for 
                           
                              
                                 
                                    D
                                 
                                 
                                    ′
                                 
                              
                           
                         is used for all particles. However, particles will generally have different speeds, and hence will have a different stability criterion to satisfy. This issue is circumvented in [13] by setting the coefficient to be high enough to provide effective shifting for the slow moving particles, with the consequence of it being unnecessarily high for the faster particles. The limit in the maximum shifting distance will clip that for the faster particles, thereby satisfying some alternative stability criterion, but consequently not fully satisfying (8). In the present study, since the shifting diffusion coefficient is local, the enforcement of a maximum shifting distance is not necessary and (8) can be satisfied at each time step. It will be shown in Section 3 that the new method can yield a far smoother particle distribution than that of [13] for some applications.

For the test cases presented herein, it has been found that the CPU cost of the shifting algorithm does not exceed 5% of the overall CPU cost for a time step.

It should be considered that, as in Lind et al. [13], an application of the shifting algorithm violates exact momentum conservation in an SPH sense. We shall see that despite this, the method is accurate, stable and has satisfactory convergence properties.

For further details of the diffusion based shifting algorithm’s treatment at a free surface, see Lind et al. [13].

The multiple boundary tangent method [15,16] has been employed in order to provide kernel support close to solid boundaries. Mirror particle velocities are set by linear extrapolation in order to yield the no-slip condition at the wall, with the following boundary condition used for pressure:
                           
                              (14)
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∂
                                                   p
                                                
                                                
                                                   ∂
                                                   n
                                                
                                             
                                          
                                       
                                    
                                    
                                       wall
                                    
                                 
                                 =
                                 -
                                 ρ
                                 
                                    
                                       
                                          g
                                          -
                                          
                                             
                                                d
                                                
                                                   
                                                      u
                                                   
                                                   
                                                      wall
                                                   
                                                
                                             
                                             
                                                d
                                                t
                                             
                                          
                                       
                                    
                                 
                                 ·
                                 n
                              
                           
                        where n is the unit vector pointing into the fluid, normal to the solid boundary and 
                           
                              
                                 
                                    u
                                 
                                 
                                    wall
                                 
                              
                           
                         is the velocity vector of the solid boundary.

For the test cases presented the particle resolution is not sufficient to resolve the boundary layer on a solid surface. However replacing the no-slip condition with the slip condition for the circular cylinder case (Section 3.5) produced negligible difference in predicted forces indicating insensitivity to this boundary layer.

Free-surface particles are identified by computing the divergence of the position vector, 
                           
                              ∇
                              ·
                              r
                           
                        . In the bulk fluid this will equal 2 for a 2D simulation (in the limit of zero particle spacing). At the free surface however, 
                           
                              ∇
                              ·
                              r
                           
                         will be substantially lower than 2. A criterion of 
                           
                              ∇
                              ·
                              r
                              ⩽
                              1.5
                           
                         can be selected to identify free-surface particles, with these particles having their pressure set to zero throughout the time step (a Dirichlet condition in the pressure Poisson equation).

While this procedure does have the capability of providing accurate pressure fields that are spatially noise free, temporal noise may still occur. This is due to the fact that an infinitesimal change in the position of a particle can lead to a dramatic change in the applied boundary condition if the particle’s status switches from free-surface to fluid-bulk, or vice versa, according to the above criterion. The applied boundary conditions on the pressure Poisson equation can therefore change abruptly from one time-step to the next as particles are advected. In order to reduce this adverse effect, we propose a novel method for smoothing the discontinuous free surface. The basic idea involves gradually introducing the effect of the free surface over a small distance across the surface so as to avoid the discontinuous treatment that would otherwise arise.

We use the criterion 
                           
                              ∇
                              ·
                              r
                              ⩾
                              1.6
                           
                         to identify particles that conclusively constitute the fluid bulk. Similarly, for particles where 
                           
                              ∇
                              ·
                              r
                              ⩽
                              1.4
                           
                         holds, a free-surface condition can safely be assumed. For intermediate particles, where 
                           
                              1.4
                              <
                              ∇
                              ·
                              r
                              <
                              1.6
                           
                        , we modify the coefficients and source term of the pressure Poisson equation such that the effect of the free-surface is introduced gradually. This is justifiable since, for the range 
                           
                              1.4
                              <
                              ∇
                              ·
                              r
                              <
                              1.6
                           
                        , it is unclear if a particle is on the free-surface or not.

After discretisation, the pressure Poisson equation can be rewritten in the following form;
                           
                              (15)
                              
                                 
                                    
                                       a
                                    
                                    
                                       ii
                                    
                                 
                                 
                                    
                                       P
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    ∑
                                 
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       a
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       P
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       b
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    a
                                 
                                 
                                    ij
                                 
                              
                           
                         are the coefficients of the Poisson equation, and the summation is conducted over all particles within the support domain of particle i (excluding particle i itself). The coefficient α appears in (15) in order to implement the free-surface boundary condition, and takes the following value:
                           
                              (16)
                              
                                 α
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   0
                                                
                                                
                                                   if
                                                   
                                                   ∇
                                                   ·
                                                   r
                                                   ⩽
                                                   1.4
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         1
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            1
                                                            -
                                                            cos
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           ∇
                                                                           ·
                                                                           r
                                                                           -
                                                                           1.4
                                                                        
                                                                        
                                                                           1.6
                                                                           -
                                                                           1.4
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   if
                                                   
                                                   1.4
                                                   <
                                                   ∇
                                                   ·
                                                   r
                                                   <
                                                   1.6
                                                
                                             
                                             
                                                
                                                   1
                                                
                                                
                                                   if
                                                   
                                                   ∇
                                                   ·
                                                   r
                                                   ⩾
                                                   1.6
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The range (1.4,1.6) for 
                           
                              ∇
                              ·
                              r
                           
                        , over which discrete free-surface smoothing has been applied, has been selected since this was found to be large enough to provide satisfactory temporal noise reduction, whilst not being so large as to affect adversely the simulation (e.g. due to contamination of the smoothing effect into the fluid bulk, or due to the over-smoothing of the free-surface).

Note that due to the diagonal dominance of the coefficient matrix, 
                           
                              
                                 
                                    a
                                 
                                 
                                    ii
                                 
                              
                           
                         is guaranteed to be greater than 0, and hence a singularity in the iterative solver is avoided. Eq. (15) is solved iteratively by the sparse preconditioned Bi-CGSTAB method [17].


                        Fig. 1
                         illustrates the value of the function 
                           
                              α
                              (
                              ∇
                              ·
                              r
                              )
                           
                        . The plot also shows the original step function for α that is generally employed. The improvements that the smoothing of the free-surface yields will be shown for the case of cylinder slam (Section 3.3) and wave impact onto a circular cylinder (Section 3.5).

@&#RESULTS@&#

For all simulations presented in this work, we employ the quintic spline kernel with initially uniform particle spacing and a smoothing length equal to 
                        
                           1.3
                        
                      times this spacing, which is quite standard.

In order to test both the present implementation of the multiple boundary tangent method and the modified shifting algorithm, we first consider the simple case of circular Couette flow. Fig. 2
                         shows the geometry and problem setup. The radius of the inner wall (
                           
                              
                                 
                                    r
                                 
                                 
                                    i
                                 
                              
                           
                        ) is equal to 1m while that of the outer wall (
                           
                              
                                 
                                    r
                                 
                                 
                                    o
                                 
                              
                           
                        ) is equal to 2m. We set the inner wall to rotate with angular velocity 
                           
                              ω
                              =
                              0.2
                              
                                 
                                    rads
                                 
                                 
                                    -
                                    1
                                 
                              
                           
                         while the outer wall is stationary. The no-slip condition is enforced on both walls. The gravity vector is zero. The analytical solution for the velocity field can be obtained from the Navier–Stokes equations:
                           
                              (17)
                              
                                 
                                    
                                       u
                                    
                                    
                                       θ
                                    
                                 
                                 =
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                 
                                 ω
                                 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             o
                                          
                                       
                                       /
                                       r
                                       -
                                       r
                                       /
                                       
                                          
                                             r
                                          
                                          
                                             o
                                          
                                       
                                    
                                    
                                       
                                          
                                             r
                                          
                                          
                                             o
                                          
                                       
                                       /
                                       
                                          
                                             r
                                          
                                          
                                             i
                                          
                                       
                                       -
                                       
                                          
                                             r
                                          
                                          
                                             i
                                          
                                       
                                       /
                                       
                                          
                                             r
                                          
                                          
                                             o
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    u
                                 
                                 
                                    θ
                                 
                              
                           
                         is the circumferential velocity component (the radial velocity is zero).

We advance in time until a steady state solution is obtained. Several different initial particle spacings in the range (0.003,0.025)m have been considered in order to assess the convergence rate (resulting in 40–333 particles between the inner and outer walls). Fig. 3
                         shows the circumferential velocity component with analytical comparison. The non-linear nature of the flow, induced by the radial pressure gradient that is necessary in order to balance the centrifugal force associated with streamline curvature, is apparent from the plot. The agreement between computed and analytical results is clearly very good, as should be expected for this simple case.

The effect of spatial refinement is shown in Fig. 4
                        , from which it is apparent that the discretised numerical scheme is slightly better than first order. Such a convergence rate is typical for SPH. Similar convergence has been observed for plain Couette flow with mirror particles, thereby suggesting that the boundary condition for the curved surface does not adversely affect convergence rate.

Here we consider a vertical plate which is started impulsively with steady velocity 
                           
                              U
                              =
                              0.2
                              m
                              ·
                              
                                 
                                    s
                                 
                                 
                                    -
                                    1
                                 
                              
                           
                        , following [13]. The plate drives a 2m by 0.5m body of water which is initially at rest. Fig. 5
                         shows the case setup.

A jet of water forms asymptotically against the face of the plate. An analytical solution for the free-surface elevation (η) is available [18]:
                           
                              (18)
                              
                                 η
                                 =
                                 -
                                 
                                    
                                       2
                                       Ut
                                    
                                    
                                       π
                                    
                                 
                                 ln
                                 
                                    
                                       
                                          tanh
                                          
                                             
                                                
                                                   
                                                      
                                                         π
                                                         
                                                            
                                                               
                                                                  x
                                                                  -
                                                                  Ut
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         4
                                                         D
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 +
                                 D
                              
                           
                        where D is the initial water depth. In (18), it has been assumed that gravity and viscous affects are zero, which is a reasonable physical approximation over the initial stages of flow development.

We have performed ISPH simulations of this case using an initial particle spacing of 0.0125m. Fig. 6
                         shows the free surface elevation at times 0.2s, 0.4s, 0.6s, and 0.8s. From the figure, it is apparent that the agreement with the analytical solution is satisfactory.

Tests have been conducted with four different initial particle spacings in the range [0.006m, 0.04m]. Fig. 7
                         shows the 
                           
                              
                                 
                                    L
                                 
                                 
                                    2
                                 
                              
                           
                         norm of the error in free-surface elevation predicted by the SPH algorithm for the various particle spacings considered. From the figure, it is apparent that the method is again slightly better than first order, importantly showing that there is no adverse affect of the free-surface boundary treatment on the convergence rate.

Numerical experiments have been performed in order to assess the performance of the new diffusion based shifting algorithm. Fig. 8
                         shows the free-surface elevation at time 
                           
                              t
                              =
                              0.6
                           
                        
                        s with both a global manually tuned diffusion coefficient [13], and the new local coefficient (Section 2.2). From the figure it can be seen that the new shifting methodology yields a marked improvement in the particle distribution for this case.

The motion of a circular cylinder dropping onto initially still water has been investigated experimentally by Greenhow and Lin [19]. The cylinder has a diameter of 0.11m and a density of 
                           
                              500
                              
                              kg
                              ·
                              
                                 
                                    m
                                 
                                 
                                    -
                                    3
                                 
                              
                           
                         (i.e. that of a half buoyant cylinder). The initial distance between the axis of the cylinder and the undisturbed free surface was equal to 0.5m, while the distance from the tank bed to the undisturbed free surface was equal to 0.3m. The cylinder is initially released from rest and falls under the influence of gravity.

Incompressible SPH simulations have been conducted with an initial uniform particle spacing set equal to 0.0015m. Tank side walls were placed 0.5m from the initial impact point. This value was found through a parametric study aiming to eliminate side wall interference (since the experimental tank was large) while minimising computational costs. The computational setup resulted in a total of approximately 
                           
                              135
                              ,
                              000
                           
                         particles. A sensitivity study has been carried out with 
                           
                              50
                              %
                           
                         extra particles (with a correspondingly lower time step in accordance with the CFL condition), with no appreciable difference in the solution, and hence the present results can be considered independent of the discretisation.

An overview of the pressure field and free-surface elevation at several time steps is shown in Fig. 9
                        . It can be seen that strong jets form on both sides of the cylinder. By 
                           
                              t
                              =
                              0.44
                           
                        
                        s, it can be seen that the separation points have started to move towards the top of the cylinder due to the cylinder’s rapid vertical deceleration under the influence of buoyancy. By 
                           
                              t
                              =
                              0.56
                           
                        
                        s, the water columns have collapsed, and collided with one another, generating a vertical jet above the cylinder. It is clear from Fig. 9 that the pressure field is effectively spatially noise free.

We note that the computed separation points and free-surface elevation seem to agree qualitatively with the measured data available in [19], although the photographic data in [19] is of poor quality, so detailed comparison is difficult. It is clear nonetheless, that the agreement we see is significantly better than that reported in [20], where a weakly compressible SPH formulation was employed for the same problem.


                        Fig. 10
                         shows how the depth of penetration of the cylinder evolves with time. Again, experimental comparison is made with [19] up to 
                           
                              t
                              =
                              0.42
                           
                        
                        s, after which there is no experimental data available. It can be seen that there is generally a very good initial agreement between the computed and measured results, suggesting that the correct forces acting on the cylinder are predicted. However, we point out that for the final measured datum point there is moderate discrepancy, although similar discrepancies are also noted in [20,21] in which weakly compressible SPH and constrained interpolation profile methods, respectively, are employed. The data from [20] are also provided in the figure, showing close agreement.


                        Fig. 11
                         shows the evolution of the vertical component of the pressure force, integrated over the cylinder’s surface. In the figure, comparisons are made both with and without the discrete free-surface smoothing method active (Section 2.4). From the plot, it is apparent that the temporal noise predicted by the SPH algorithm is significantly reduced by the smoothing.

In this section we consider the forced entry of a wedge into initially still water. The wedge has a prescribed constant vertical velocity, V. We consider three different deadrise angles equal to 30°,40° and 60° (where the deadrise angle is defined as the angle between the inclined surface of the wedge and the horizontal). Comparisons are made with asymptotic solutions provided in [22].

During the initial stages of impact (i.e. before jet flow separation) the normalised free-surface elevation and surface pressure coefficient distribution are independent of the penetration depth. When making comparisons with the asymptotic solutions, the final time step prior to flow separation was therefore selected, since this gives the highest effective spatial resolution (i.e. the greatest number of wetted boundary particles along the inclined wedge surface). A total of 100 wetted boundary particles along the inclined surface have been used in all cases, yielding a total of around 200,000 particles.

An overview of the solution (with the deadrise angle set to 30°) is shown in Fig. 12
                        , for several time steps. As the wedge penetrates the free-surface, jets form symmetrically along the inclined wall. By 
                           
                              t
                              =
                              0.023
                           
                        
                        s, the jets have separated from the inclined wall, and the fluid displacement by the wedge generated columns of water in a similar manner to that seen for the cylinder entry. It can be seen that the jets appear to be fragmented. This is contrary to SPH simulations performed by Oger et al. [23] in which smooth continuous jets were predicted. However in [23], a variable initial particle distribution has been employed in order to provide very fine spatial resolution around the impact zone, while maintaining acceptable computational costs. To resolve adequately the jet structure in the present study (to the same resolution as [23]), while using a uniform initial particle distribution, in excess of 20 million particles would be required. It is expected that with such a refined simulation, improvements to the predicted jet structure would be achieved.


                        Fig. 13
                         shows the pressure distribution along the inclined surface for the three deadrise angles considered. It can be seen that the pressure is generally higher at lower deadrise angles since the wedge shape is flatter and hence the slamming is more severe. It can also be seen from the figure that the agreement is very good between the present results and the asymptotic results presented in [22]. While there is some noise evident in the pressure, simulations have shown that this is increased with further spatial coarsening, suggesting that discretisation error may be the problem. It was however not feasible to further refine the particle spacing due to high computational costs (around 48h on a single CPU). In any case, the noise is a small effect.

We consider the impact of regular waves on a fixed circular cylinder. The cylinder is partially submerged (relative to the mean free-surface level). Different submergence depths and wave amplitudes have been considered. Measured vertical force data are available in [24]. This case has been simulated previously with SPH by Omidvar et al. [25] who used an Arbitrary Lagrange–Euler (ALE) formulation with an embedded Riemann solver.

Regular waves of period T are generated prior to commencing the SPH simulations. The wave kinematics are specified through the method of Rienecker and Fenton [26], in which a Fourier series for the streamfunction is employed in order to generate a system of equations defining the potential flow (satisfying both the unsteady Bernoulli equation on the free surface and continuity below the surface). The resulting system of equations can be rapidly solved by Newton’s method to obtain an almost exact solution for the flow field throughout the domain (to within numerical roundoff error, assuming the series is not prematurely truncated). SPH particles are then initialised with this velocity field, and are placed in a periodic domain (with translational periodicity applied between successive wave crests). This method is clearly attractive since the waves need not be generated through the use of a paddle, as is typically the case for numerical wave simulations, thereby significantly reducing the domain size and runtime costs. Due to the periodicity, the need for the buffering of particles outside of the computational domain is also avoided.

To test the new wave generation method, a single wavelength is first placed in a periodic domain in the absence of the cylinder. The wavelength is 3.912m corresponding to a wave period of 1.629s, the wave height is 0.25m, the mean water depth is 1m, and the initial particle spacing varies in the range [0.0039,0.0156]. The wave is allowed to propagate in accordance with the ISPH governing equations over several periods. Fig. 14
                            shows the variation of the normalised wave height with time obtained for three different particle spacings to demonstrate convergence. It is evident that the rate of wave height decay due to viscous action and numerical diffusion is small over 3–4 wave periods for all resolutions considered. Furthermore the rate of wave height decay due to internal viscous stresses, without bed effects, may be approximated assuming linear theory [27]. For this case a decrease in wave height of 
                              
                                 0.2
                                 %
                              
                            per period is predicted, or 
                              
                                 1
                                 %
                              
                            over five periods, and this is seen to be in approximate agreement with results for the finest particle resolution shown in Fig. 14.

The problem setup can be characterised by the cylinder submergence depth (d), the cylinder diameter (D), the wave amplitude (a), the mean water depth (h), and the wavelength (λ) (see Fig. 15
                           ). All dimensions are normalised with respect to the cylinder diameter to give 
                              
                                 
                                    
                                       d
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       h
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       a
                                    
                                    
                                       ′
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       λ
                                    
                                    
                                       ′
                                    
                                 
                              
                           . Table 1
                            shows the values used in the present study.

Since the domain is periodic, there must be a sufficient number of wavelengths for the initially regular waves to interact with the cylinder to generate periodic forcing; the outer boundaries should be sufficiently far from the body so that waves reflected and transmitted by the cylinder do not affect the periodic forces. Three wavelengths within a periodic SPH domain have been found to be sufficient to capture the flow characteristics with acceptable accuracy for up to three periods. Tests have also been conducted with five wavelengths, with only small differences in the third period observed.

The no-slip condition is enforced on the cylinder surface and the slip boundary condition on the bed (consistent with stream function theory). The particle spacing has been set to 
                              
                                 0.04
                                 D
                              
                            for all simulations (corresponding to the coarse resolution considered in Fig. 14), resulting in around 
                              
                                 120
                                 ,
                                 000
                              
                            particles. A convergence study has been carried out with 
                              
                                 80
                                 ,
                                 000
                              
                            particles, with a correspondingly larger time-step in accordance with the CFL criterion. No appreciable difference in vertical force between the two resolutions was observed.


                           Fig. 16
                            gives an overview of the entire domain, and illustrates particle positions and pressures at time 
                              
                                 t
                                 /
                                 T
                                 =
                                 0.43
                              
                            for Simulation 2.

To compare the simulated results with the measured data, the vertical force acting on the cylinder is normalised with respect to the weight of water that a fully submerged cylinder would displace:
                              
                                 (19)
                                 
                                    
                                       
                                          F
                                       
                                       
                                          ′
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                F
                                             
                                             
                                                y
                                             
                                          
                                       
                                       
                                          g
                                          ρ
                                          
                                             
                                                
                                                   (
                                                   1
                                                   /
                                                   4
                                                   )
                                                   π
                                                   
                                                      
                                                         D
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        


                           Table 2
                            shows the root mean square normalised vertical force, taken over the second and third periods for the different setups given in Table 1. Data from [24] is included for comparison. It can be seen that the agreement is satisfactory; within 
                              
                                 5
                                 %
                              
                            of the measured data in all instances.

For Simulation 2, 
                              
                                 
                                    
                                       F
                                    
                                    
                                       rms
                                    
                                    
                                       ′
                                    
                                 
                              
                            is also computed for an extended computational domain of five wavelengths. In this case, 
                              
                                 
                                    
                                       F
                                    
                                    
                                       rms
                                    
                                    
                                       ′
                                    
                                 
                              
                            taken over the second and third periods is equal to 
                              
                                 0.271
                              
                           ; less than a 
                              
                                 2
                                 %
                              
                            difference from the value obtained for three wavelengths.


                           Fig. 17
                            shows the normalised vertical force acting on the cylinder, over the first three periods, for Simulation 1. Note that in order to be consistent with the experimental data, the time 
                              
                                 t
                                 =
                                 0
                              
                            is set as the instant when the free-surface of the wave in the absence of the cylinder would intersect the point located at the cylinder’s leading edge, with the wave crest approaching. We include data for the first computed period, but make no experimental comparison over this period since the domain is initialised with the cylinder displacing water in the wave field, giving initial forces atypical of regular periodic wave interaction. It is evident from the figure that the agreement between computed and measured results is quite close.


                           Fig. 18
                            shows results for an increased wave amplitude (Simulation 2). The initial peak in 
                              
                                 
                                    
                                       F
                                    
                                    
                                       ′
                                    
                                 
                              
                            for each cycle occurs at 
                              
                                 t
                                 /
                                 T
                                 ≈
                                 0.15
                                 +
                                 i
                                 ,
                                 
                                 i
                                 =
                                 0
                                 ,
                                 1
                                 ,
                                 2
                              
                           , where i is the cycle number; this corresponds to the instant at which the cylinder is first fully submerged. Following this, the vertical force drops slightly as the wave crest approaches. This is due to the weight of water above the cylinder as the cylinder becomes increasingly submerged. Between 
                              
                                 0.3
                                 +
                                 i
                                 <
                                 t
                                 /
                                 T
                                 <
                                 0.4
                                 +
                                 i
                              
                           , the vertical force is approximately constant as the wave crest passes over the top of the cylinder (there is little change in free-surface elevation during this interval since the wavelength is significantly longer than the cylinder diameter). Following the passing of the wave crest, there is a brief secondary peak in the vertical force at 
                              
                                 t
                                 /
                                 T
                                 ≈
                                 0.45
                                 +
                                 i
                              
                           . This secondary force peak is associated with the passing of the wave’s crest, and hence the reduction of fluid above the cylinder, while the cylinder remains fully submerged. Following the secondary peak, the vertical force drops to a minimum due to the approach of the wave trough; the reduction in cylinder’s submergence causes a reduced buoyancy force. The cycle then repeats. Agreement with the experimental data is satisfactory.


                           Fig. 19
                            show the normalised vertical force for Simulation 3. The qualitative features of the flow for this are similar to those observed for Simulation 2, and hence the vertical force plot follows a similar pattern. The increased submergence of the cylinder makes this case more challenging than the prior cases. Despite this, the agreement with the experimental data is good. In comparison with the results of Omidvar et al. [25] for 
                              
                                 
                                    
                                       F
                                    
                                    
                                       rms
                                    
                                    
                                       ′
                                    
                                 
                              
                           , the scheme presented in this paper achieves better agreement with experiment for the deeper relative submergence, while the scheme of Omidvar et al. was better for the cylinder placed at the surface, 
                              
                                 
                                    
                                       d
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 0
                              
                           . Importantly however, when comparing the results for the force time histories, the results here show significantly better agreement, particularly in the reduction of spurious oscillations.

Before finishing this Section, we would like to highlight the effect of the free-surface smoothing method (Section 2.4). Fig. 20
                            shows the vertical force acting on the cylinder for Simulation 2, both with and without the smoothing activated. From the figure, it is clear that the smoothing provides a significant reduction in temporal noise.

@&#CONCLUSIONS@&#

In this paper, we have applied the incompressible SPH method with diffusion-based shifting for stability to the problems of cylinder and wedge impact on still water and wave impact on a cylinder. To achieve stable and accurate results we have provided a general method for setting the diffusion coefficient for shifting, based on the particle spacing, time-step size, and local fluid velocity magnitude.

We also present a new method for significantly reducing the temporal noise from free-surface effects that may occur in an incompressible SPH simulation. In this method the effect of particles in a narrow region close to the free surface, defined by the divergence of the position vector, is introduced smoothly into the pressure Poisson equation rather than as a step change. It has been shown that this approach drastically reduces temporal noise for various fluid–structure interaction cases; with the step change the temporal (as distinct from spatial) noise can be considerable.

For the cylinder drop case, the cylinder motion is accurately predicted and the jet-like flows are qualitatively similar to experiment. For the constant-velocity wedge impact cases surface pressures agree well with asymptotic solutions. Importantly, pressures are almost noise-free, both in space and time.

For the wave impact cases we use the novel and efficient approach where the initial conditions are several wavelengths of a progressive nonlinear wave field within a periodic domain into which the cylinder is introduced centrally. The loads quickly become cyclic, after the first wave period, and there is good agreement with experiment. This is much more efficient than the usual numerical wave flume approach where waves are generated by a paddle at one end of the flume which must be many wavelengths long.

To the authors’ knowledge, the predictions for these test cases are more accurate than has previously been obtained by other SPH methods and, although they are two-dimensional with simple geometries, the approach is quite general and may be readily extended to three dimensions.

@&#ACKNOWLEDGMENTS@&#

The work has been funded by the EPSRC under Grant No. EP/H018638/1.

We acknowledge the input by the reviewers of this manuscript.

@&#REFERENCES@&#

