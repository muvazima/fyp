@&#MAIN-TITLE@&#A Clustering Search metaheuristic for the Point-Feature Cartographic Label Placement Problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A new improved metaheuristic for the Cartographic Label Placement Problem.


                        
                        
                           
                           We propose a Clustering Search metaheuristic for solving the Point-Feature Cartographic Label Placement Problem.


                        
                        
                           
                           CS found equal or better solutions for practically all considered instances.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Metaheuristics

Combinatorial optimization

Clustering Search

Point-Feature Cartographic Label Placement

@&#ABSTRACT@&#


               
               
                  The Point-Feature Cartographic Label Placement (PFCLP) problem consists of placing text labels to point features on a map avoiding overlaps to improve map visualization. This paper presents a Clustering Search (CS) metaheuristic as a new alternative to solve the PFCLP problem. Computational experiments were performed over sets of instances with up to 13,206 points. These instances are the same used in several recent and important researches about the PFCLP problem. The results enhance the potential of CS by finding optimal solutions (proven in previous works) and improving the best-known solutions for instances whose optimal solutions are unknown so far.
               
            

@&#INTRODUCTION@&#

The Point-Feature Cartographic Label Placement (PFCLP) problem has a great importance for applications which use computational resources to generate maps, as for example, georeferencing systems, web applications, etc.

The PFCLP problem is classified in the literature as NP – Hard (Marks & Shieber, 1991) and according to Ribeiro and Lorena (2008b), it consists in organizing points on maps avoiding overlaps of labels and providing clarity in viewing and understanding of the map. The labels contain information of objects to be displayed in cartographic maps, networks, graphs or diagrams (Wolff, 1999).


                     Fig. 1
                      shows a map of São Paulo State (Brazil) with districts and roadways. The labels indicate the name of the districts and the gray districts indicate that their labels are overlapped.

One way to improve the map view is moving the labels to specific positions close to their respective points which are known as “candidate positions”. The candidate positions represent the possible locations where the label of a point can be placed, respecting a cartographic pattern.


                     Fig. 2
                      illustrates the cartographic pattern proposed by Christensen, Marks, and Shieber (1995). This pattern is one of the most known and used in the literature. The regions 1–8 indicate the candidate positions for labeling the point. Each position has a number indicating its cartographic preference, and position 1 is the most suitable, i.e. the smallest number indicates the best position. Starting from this pattern, the point-labeling problem can be defined as a combinatorial problem which must select candidate positions to label the points.

In the PFCLP problem, overlapping labels may be accepted or not. When overlaps are not accepted, we can keep the size of the labels and label the greatest number of points without overlapping. In this case, the PFCLP problem is a special case of the traditional Maximum Independent Set Problem (Ribeiro, Mauri, & Lorena, 2011; Strijk, Verweij, & Aardal, 2000; Zoraster, 1990). We also may decrease the size of the labels such that all of them fit without overlap. Here, the objective is to find the maximum scale factor for the label size such that a labeling without conflict is generated (Klau & Mutzel, 2003).

Overlaps are allowed in several papers about the PFCLP problem, and so, all points must necessarily be labeled. Consequently, two approaches are identified: minimize the number of conflicts (Ribeiro & Lorena, 2008a, 2008b) and maximize the number of conflict-free labels (Alvim & Taillard, 2009; Mauri, Ribeiro, & Lorena, 2010). In this paper, we consider that last approach for which a mathematical model is available in Mauri et al. (2010).

This paper aims to present a new alternative to solve the PFCLP problem. A Clustering Search (CS) metaheuristic is proposed using a Simulated Annealing algorithm as part of its structure.

The CS was chosen because it has been presenting good results for different types of combinatorial optimization problems and it was not used to solve the PFCLP problem.

Our results are compared with those obtained by several methods presented in recent researches found in the literature. The CS performance is highlighted by finding equal or better solutions for practically all instances.

The remainder of this paper is organized as follows. Previous approaches to PFCLP problem are reviewed in Section 2. The proposed CS is described in Section 3 and computational results are reported in Section 4. Our conclusions are summarized in Section 5.

@&#LITERATURE REVIEW@&#

In the literature, we can find several researches about the PFCLP problem. In this section, we present some major works about the problem.


                     Christensen et al. (1995) presented one of the first and major work about the PFCLP problem. They used different heuristic algorithms to solve the problem. Verner, Wainwright, and Schoenefeld (1997) used Genetic Algorithms reporting good results for some instances. These results were improved by a Tabu Search proposed by Yamamoto, Câmara, and Lorena (2002) which was applied to instances with up to 1000 points. Since then, these instances have been used in several papers as follows. Yamamoto and Lorena (2005) applied the Constructive Genetic Algorithm proposed by Lorena and Furtado (2001) providing better results than those presented by Yamamoto et al. (2002).

A GRASP (Greedy Randomized Adaptive Search Procedure) was proposed by Cravo, Ribeiro, and Lorena (2008) which presented new solutions for the PFCLP problem. Ribeiro and Lorena (2008a, 2008b) proposed a Lagrangian Relaxation with Clusters (LagClus) and a Column Generation approach. The optimality for some instances were proven and new best solutions were reported.


                     Alvim and Taillard (2009) applied the POPMUSIC (Partial Optimization Metaheuristic under Special Intensication Conditions) proposed by Taillard and Voss (2001) to solve the PFCLP problem. The POPMUSIC divides the problem into subproblems and a Tabu Search (based on that one proposed by Yamamoto et al. (2002)) is applied to solve them. Several variations of POPMUSIC and Tabu Search were reported. The authors presented new best solutions for the known set of instances proposed by Yamamoto et al. (2002), and they also proposed a new set of instances with 13,206 points to be labeled.


                     Mauri et al. (2010) presented new approaches to solve the PFCLP problem. They proposed a mathematical model and a solution method based on the Lagrangian decomposition. The authors found best solutions and proven the optimality for many instances with up to 1000 points. The model proposed by Mauri et al. (2010) was improved by Ribeiro, Constantino, and Lorena (2009) which inserted some inequalities to strengthen the mathematical formulation, and better solutions for the instances with 1000 points were found.

Recently, Oliveira, Urrutia, and Noronha (2009, 2010) proposed a Backtracking heuristic and an Iterated Local Search (ILS), achieving the best results for the instances with 1000 and 13,206 points.

A summary of these methods and their results is reported in Section 4 where a comparison is provided.

The Clustering Search (CS) algorithm is a hybrid metaheuristic proposed by Oliveira and Lorena (2007) that employs clustering for detecting promising areas of the search space. It generalizes the Evolutionary Clustering Search proposed by Oliveira and Lorena (2004) substituting the evolutionary algorithm by metaheuristics such as Simulated Annealing, GRASP, and Tabu Search.

In CS, solutions are put into clusters and each new solution is assigned to its best cluster according to a distance metric. Each cluster i is defined as a triple (ς
                     
                        i
                     , τ
                     
                        i
                     , β
                     
                        i
                     ), where ς
                     
                        i
                     , τ
                     
                        i
                      and β
                     
                        i
                      are the center, the volume and the indicator of inefficiency, respectively. The center ς
                     
                        i
                      is a solution representing the cluster, the volume τ
                     
                        i
                      defines the number of solutions assigned to it, and the indicator of inefficiency β
                     
                        i
                      controls the search strategy. β
                     
                        i
                      indicates the number of consecutive times that a local search was applied in the cluster i without improving its center.

When a new solution is generated by the metaheuristic, it is assigned to its closest cluster. This process activates the chosen cluster i, causing a disturbance to it, and an assimilation process is started. At regular intervals, each cluster is also evaluated searching a promising one. If some cluster i becomes promising, a search strategy is used over its center. When the search strategy is used β
                     
                        max
                      times without success (it does not improve the cluster center), a disturbance is applied to the center. This prevents the search intensification to be applied to poor areas or to areas that have already been sufficiently explored.

In this paper, we have implemented a CS based on the one proposed by Ribeiro, Laporte, and Mauri (2012). We can describe it into six main components: solution generator, iterative clustering, objective function, assimilation process, analysis process and search strategy. These components are described below:
                        
                           1.
                           
                              Solution generator: a Simulated Annealing (SA) based on the one proposed by Ribeiro et al. (2012) is used to generate solutions for clustering. It starts from an initial solution (randomly generated) and performs local search according to the usual SA rules. The neighborhood N used in the SA consists in a simple and random change of the candidate position of a point chosen at random too. Fig. 3
                               illustrates the neighborhood N.


                              Iterative clustering: given a user-defined maximum number of clusters γ, a new solution s provided by SA is assigned to the closest cluster i according to the Hamming distance H
                              
                                 i
                               (Hamming, 1950), i.e. the number of different candidate positions selected for each point between the solutions ς
                              
                                 i
                               and s. The algorithm assigns s to cluster i that minimizes min{H
                              
                                 i
                              }
                                 i∈{1,2,…,γ}.


                              Objective function: considers the number of conflict-free labels (without overlaps), i.e. v(s)=number of conflict-free labels for the solution s. As used in the main works about the PFCLP problem, we have not considered the cartographic preferences.


                              Assimilation process: when a new solution s is assigned to cluster i, its center ς
                              
                                 i
                               and its volume τ
                              
                                 i
                               are updated. This process, called assimilation process by Chaves and Lorena (2010), is performed by a direct way, i.e. the best solution between s and ς
                              
                                 i
                               is chosen to be the new center for the cluster i
                              ←
                              ς
                              
                                 i
                              
                              =best{s, ς
                              
                                 i
                              }.


                              Analysis process: each cluster i has a volume τ
                              
                                 i
                               indicating its activity level. Whenever τ
                              
                                 i
                               reaches a certain threshold τ
                              
                                 max
                              , the cluster i must be better investigated to accelerate the search convergence. Chaves and Lorena (2010) indicate that the search strategy must be a problem-specific and should be applied to the center of the cluster.


                              Search strategy: a local search is used to intensify the search on the most promising cluster. It removes the candidate position for each point and inserts it into the best position. This procedure is repeated as long as improvements are obtained. Variable β
                              
                                 i
                               controls the number of times that the local search is not effective on cluster i, and if β
                              
                                 i
                               is equal to β
                              
                                 max
                               (represents a maximum number of attempts without success) a disturbance is applied to ς
                              
                                 i
                               by using the neighborhood N.

The general structure of our CS algorithm for the PFCLP problem is summarized in Fig. 4
                     .

The efficiency of the Clustering Search (CS) to solve the PFCLP problem was verified by using two sets of instances (benchmarks) that were considered in the major and most recent papers about the PFCLP problem. These instances can be obtained by addresses http://www.lac.inpe.br/lorena/instancias.html and http://mistic.heig-vd.ch/taillard/problemes.dir/problemes.html. Our CS was implemented in C++ and all experiments were performed on a PC with Intel Core i5 2.66gigahertz with 4gigabytes of RAM memory.

The first set is formed by instances with 25, 100, 250, 750 and 1000 points, all of them with 4 candidate positions. There are 8 different instances with 25 points and 25 different instances with 100, 250, 500, 750 and 1000 points. The second set consists of 40 instances with 13,206 points, 20 with 4 candidate positions and 20 with 8 candidate positions. Thus, we used a total of 173 distinct instances of different sizes.

To tune the parameters of CS, we have chosen eight instances at random (one of each size – 25, 100, 250, 500, 750, 1000 and 13,206, with 4 candidate positions and one instance with 13,206 points and 8 candidate positions). We have adopted the following process: each parameter has received several values while the others were kept fixed. The CS ran five times for each parameter setting for each instance, and the setting yielding the best average results was chosen. This methodology is similar to that used by Ribeiro et al. (2012) and it was followed for adjusting the CS parameters: γ, τ
                     
                        max
                     , β
                     
                        max
                     , T
                     0, T
                     
                        c
                     , α and SA
                     
                        max
                     . Table 1
                      shows the best values found for all these parameters.

During the CS tuning, we noted that the best solutions were being found at the end of the CS execution, indicating that our method could further improve solutions. So, a re-annealing technique was used, i.e. at the end of CS, the current temperature values was “reheated” to the value of the initial temperature, and the whole process was restarted (considering the best solution obtained so far as the initial solution). Thus, we consider as stop criterion a time of 2minutes without improving the solution.

After tuning the CS parameters, the metaheuristic was applied 10 times for each instance and the optimal solutions (proven by Mauri et al. (2010)) were always found for the instances with 25, 100, 250, 500 and 750 points. The average processing times were 15.73, 0.00, 3.44, 15.61 and 27.98seconds, respectively.

The average deviation 
                        
                           
                              
                                 (
                                 Best
                                 -
                                 Average
                                 )
                              
                              
                                 Best
                              
                           
                           ×
                           100
                        
                      for the instances with 1000 points (among the 10 runs for each instance) was 0.03%, and the average computational time was 94.18seconds. The results for these instances are shown in Table 2
                     . This table presents, for each instance with 1000 points, the number of conflict-free labels (CFL=
                     v(s)) to the best and to the average solutions, the percentage of conflict-free labels (%CFL) for the best solution, the average deviation for the 10 runs, and the average computational time.


                     Table 3
                      shows a comparison among our CS and several methods presented in the literature for the instances with 250, 500, 750 and 1000 points. The results presented in this table were obtained from the average of the percentage of conflict-free labels (%CFL) for each “size” of instance. The best results are highlighted in bold.

Our CS found solutions identical to the best ones reported in the literature for the instances with 250, 500 and 750 points (optimal solutions). For the instances with 1000 points, the CS showed an improvement of 0.01% over the conflict-free labels reported in the best-known solutions.


                     Table 4
                      presents the results for the instances with 13,206 points and four candidate positions. The average deviation and computational time were 0.14% and 1287.61seconds, respectively. For these instances, the best solutions found in the literature were obtained by POPMUSIC, Tabu Seach (Alvim & Taillard, 2009) or ILS (Oliveira et al., 2009).

A comparison of the percentage of conflict-free labels (%CFL) obtained by our CS with the best solutions reported by these methods is presented in Table 5
                     . The best results are highlighted in bold. We can observe that CS found 19 solutions (out of 20) better than those presented by Oliveira et al. (2009). Considering the different methods proposed by Alvim and Taillard (2009), all solutions presented by CS were better. Comparing the best previously known solutions, our CS showed an average increase of approximately 344 points labeled without overlaps per instance.


                     Table 6
                      presents the results for the instances with 13,206 points and 8 candidate positions. The average deviation and computational time were 0.19% and 1600.55seconds, respectively. For these instances, the best solutions found in the literature were obtained by POPMUSIC or Tabu Seach (Alvim & Taillard, 2009). Oliveira et al. (2009) did not present results for these instances.

A comparison of the percentage of conflict-free labels (%CFL) obtained by our CS with the best solutions reported by these methods is presented in Table 7
                     . The best results are highlighted in bold. We can observe that CS found the best solutions for all instances, reporting an average increase of approximately 474 points labeled without overlaps per instance.

The results presented by Oliveira et al. (2009, 2010) were obtained on a PC with Intel Pentium IV 3.0gigahertz with 1gigabytes of RAM memory, considering a time limit of 120seconds for each instance. The authors do not present the average deviation found for their solutions and they used initial solutions “optimized” by a constructive heuristic, whose computational time was not reported.


                     Alvim and Taillard (2009) used a PC with Intel Xeon 3.2gigahertz with 6gigabytes of RAM memory, and the methods Tabu (50n), Pop (asc) and Pop (10) ran, respectively, for an average time of 1466.21, 437.74 and 7.63seconds for the instances with 13,206 and four candidate positions. For the instances with 13,206 points and 8 candidate positions, the computational times were 1655.90, 838.39 and 21.14seconds.

@&#CONCLUSIONS@&#

In this paper we have noted that applying the hybrid metaheuristic Clustering Search (CS) to solve the Point-Feature Cartographic Label Placement (PFCLP) problem is an efficient alternative. The CS metaheuristic has provided identical solutions to those reported by the best methods found in the literature for the instances with 25, 100, 250, 500 and 750 points (all optimal solutions in all experiments). For the instances with 1000 and 13,206 points, the results of the CS were superior to those known hitherto in the literature.

With the implementation of CS we can found a significant improvement for the solutions of the instances with 1000 and 13,206 points, i.e. CS can find a greater number of labels without overlaps (conflict-free labels), resulting in a map with a clearer view of the points and their respective labels.

Thus, CS can be considered as a new alternative to solve the PFCLP problem, showing a good performance when compared against different methods proposed in the main works about the problem.

@&#ACKNOWLEDGMENTS@&#

The authors acknowledge National Council for Scientific and Technological Development – CNPq (Processes 300692/2009-9, 300747/2010-1, 477148/2011-5, 307002/2011-0 and 476862/2012-4) and Espírito Santo Research Foundation – FAPES (Process 54689473/11) for their financial support.

@&#REFERENCES@&#

