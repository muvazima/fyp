@&#MAIN-TITLE@&#LayTracks3D: A new approach for meshing general solids using medial axis transform

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The proposed meshing algorithm handles general solids.


                        
                        
                           
                           Output mesh is boundary sensitive and preserves sharp features.


                        
                        
                           
                           Output mesh has very low percentage of non-hex elements.


                        
                        
                           
                           LayTracks3D is based on a mathematically sound formulation of MAT.


                        
                        
                           
                           Extension to all-hex meshing is discussed.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Medial axis transforms

Hex mesh generation

Hex-dominant meshing

Geometry decomposition

Assembly meshing

@&#ABSTRACT@&#


               
               
                  This paper presents an extension of the all-quad meshing algorithm called LayTracks to generate high quality hex-dominant meshes of general solids. LayTracks3D uses the mapping between the Medial Axis (MA) and the boundary of the 3D domain to decompose complex 3D domains into simpler domains called Tracks. Tracks in 3D have no branches and are symmetric, non-intersecting, orthogonal to the boundary, and the shortest path from the MA to the boundary. These properties of tracks result in desired meshes with near cube shape elements at the boundary, structured mesh along the boundary normal with any irregular nodes restricted to the MA, and sharp boundary feature preservation. The algorithm has been tested on a few industrial CAD models and hex-dominant meshes are shown in the Results section. Work is underway to extend LayTracks3D to generate all-hex meshes.
               
            

@&#INTRODUCTION@&#

Many computational simulations such as non-linear solid mechanics require all-hex or hex-dominant meshes. Currently, there is no ideal automatic hexahedron meshing algorithm to mesh general solids or assemblies with commonly desired features in a hexahedron mesh as this is a very challenging problem. In most cases, users have to resort to using meshes of suboptimal quality or spend a significant amount of time generating them. In complex cases, the creation of a desirable hexahedral mesh may take months even for an expert user. This hexahedron mesh generation process tends to dominate the overall cost of numerical simulations. Therefore, improvements in the hexahedron meshing technology are of significant importance to the computational simulation community.

The long-term goal of LayTracks3D is to generate hexahedron meshes of solids and assembly models with desirable features such as boundary sensitivity, orientation insensitivity, sharp feature preservation, high-quality mesh, and the handling of general solids. The mesh generator should have the ability to generate a variety of meshes by controlling sizing and anisotropy, generate geometry adaptive meshes, provide fast remeshing during FEM iterations, and should be scalable. The current focus has been to generate hex-dominant meshes.

This paper is an extension of the all-quad meshing algorithm proposed by the author called LayTracks  [1]. Section  2 gives mathematical definition and properties of medial axis transform. Section  3 reviews the literature on the method of decomposition and advancing front methods as LayTracks3D combines the merits of these two methods. Section  4 gives an overview of the original 2D LayTracks algorithm on a single surface and multiple surfaces as it is easy to visualize the algorithm in 2D. Section  5 gives an overview of LayTracks3D on a single solid. The remaining part of the paper discusses extensions of LayTracks3D for assembly meshing and all-hex meshing. The Results section shows hex-dominant meshes on a few industrial models as the all-hex meshing is not fully implemented at this time.

The Medial Axis Transform (MAT) was first proposed by Blum  [2–4] to describe shapes for biological problems. He defines the medial axis as loci of centers of locally maximal balls as it flows inside an object. The maximal ball can be defined as 
                        
                           (1)
                           
                              B
                              a
                              l
                              l
                              
                                 (
                                 x
                                 ,
                                 r
                                 )
                              
                              =
                              
                                 p
                              
                              ∣
                              distance
                              
                                 (
                                 p
                                 ,
                                 x
                                 )
                              
                              <
                              r
                              ,
                              
                              
                                 p
                              
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    
                                       n
                                    
                                 
                              
                              .
                           
                        
                      The loci with the radii of the associated locally maximal balls is defined as the medial axis transform of the object.


                     
                        Definition 2.1
                        Let 
                              A
                            be a subset of 
                              
                                 
                                    R
                                 
                                 
                                    
                                       n
                                    
                                 
                              
                            and 
                              
                                 x
                              
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    
                                       n
                                    
                                 
                              
                            be a point in 
                              A
                           . The Medial Axis Transform of 
                              A
                              ,
                              M
                              A
                              T
                              
                                 (
                                 A
                                 )
                              
                           , is a subset of 
                              
                                 
                                    R
                                 
                                 
                                    
                                       n
                                    
                                    −
                                    
                                       1
                                    
                                 
                              
                            consisting of the closure of points 
                              
                                 (
                                 
                                    x
                                 
                                 ,
                                 
                                    
                                       r
                                    
                                    
                                       x
                                    
                                 
                                 )
                              
                              ,
                              
                                 
                                    r
                                 
                                 
                                    x
                                 
                              
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    
                                       1
                                    
                                 
                              
                            such that the ball centered at 
                              
                                 x
                              
                            with radius 
                              
                                 
                                    r
                                 
                                 
                                    x
                                 
                              
                            is locally maximal in 
                              A
                           . The set of 
                              
                                 x
                              
                           , which contains centers of maximal balls is the medial axis 
                              M
                              A
                              
                                 (
                                 A
                                 )
                              
                           . The 
                              M
                              A
                              T
                            is the medial axis together with its associated radius function.

Here we highlight Uniqueness and Continuity of MAT  [5], which is fundamental for many of the operations in LayTracks3D.


                     
                        Lemma 2.1
                        Uniqueness and Continuity of Mapping to MAT


                        
                           Let A be an 
                           
                              n
                           
                           -dimensional compact sub-manifold of 
                           
                              
                                 
                                    R
                                 
                                 
                                    n
                                 
                              
                            
                           and let 
                           
                              M
                              A
                              
                                 (
                                 A
                                 )
                              
                            
                           be its medial axis. Let 
                           
                              P
                            
                           be an open subset of 
                           
                              δ
                            
                           A which is 
                           
                              
                                 
                                    G
                                 
                                 
                                    1
                                 
                              
                            
                           and piecewise 
                           
                              
                                 
                                    C
                                 
                                 
                                    2
                                 
                              
                            
                           continuous. Then for every point 
                           
                              
                                 p
                              
                              ∈
                              P
                           
                           there is one and only one maximal ball touching 
                           
                              
                                 p
                              
                           
                           . Furthermore, the function 
                           
                              M
                              :
                              P
                              →
                              M
                              A
                              
                                 (
                                 A
                                 )
                              
                           
                           , which maps each point 
                           
                              
                                 p
                              
                              ∈
                              P
                            
                           to the center of its maximal ball, is continuous.
                        


                     
                        Definition 2.2
                        Projection of a Boundary Point onto Medial Axis


                        Let the set of boundary points of a connected, compact, and regular region 
                              A
                            be 
                              P
                           , and set of medial axis points of 
                              A
                            be 
                              Q
                           . The projection 
                              M
                              :
                              P
                              →
                              Q
                            projects a boundary point 
                              
                                 p
                              
                              ∈
                              P
                            onto such a medial axis point 
                              
                                 Mp
                              
                              ∈
                              Q
                            that the medial axis ball centered at 
                              
                                 Mp
                              
                            touches 
                              δ
                              A
                            at 
                              
                                 p
                              
                           .

In other words, 
                        
                           
                              
                                 Mp
                              
                              =
                              
                                 p
                              
                              +
                              
                                 
                                    r
                                 
                                 
                                    p
                                 
                              
                              
                                 
                                    
                                       n
                                    
                                 
                                 
                                    p
                                 
                              
                              ,
                              
                              ∀
                              
                                 p
                              
                              ∈
                              δ
                              A
                           
                        
                      ​where 
                        
                           
                              r
                           
                           
                              p
                           
                        
                      is the radius function at 
                        
                           p
                        
                      and 
                        
                           
                              
                                 n
                              
                           
                           
                              p
                           
                        
                      is positive unit normal at 
                        
                           p
                        
                     .

The projected medial axis point 
                        
                           Mp
                        
                      of a given boundary point 
                        
                           p
                        
                      (see Fig. 1
                     ) is the point on the medial axis closest to the given boundary point and on its positive normal line. 
                        
                           Mp
                        
                      is also the center of the locally maximal ball tangent to the boundary at 
                        
                           p
                        
                     . From Lemma 2.1 we can show that projection exists for every boundary point of the compact region, and that the projection is continuous for a continuous boundary.

Here we shall summarize a few other important properties of the MAT. Medial axis transform exhibits several properties that enable representation of an object in an unambiguous and simpler manner. 
                        
                           •
                           
                              Uniqueness: There is a unique medial axis 
                                 M
                                 A
                                 
                                    (
                                    A
                                    )
                                 
                               for a given object 
                                 A
                              .


                              Invertibility: Given a 
                                 M
                                 A
                                 T
                                 
                                    (
                                    A
                                    )
                                 
                               one can reconstruct the object 
                                 A
                               by taking the union of all the maximal balls.


                              Dimension reduction: The dimensionality of the medial axis 
                                 M
                                 A
                                 
                                    (
                                    A
                                    )
                                 
                               is lower than that of its object 
                                 A
                              .


                              Topological equivalence: A medial axis 
                                 M
                                 A
                                 
                                    (
                                    A
                                    )
                                 
                               is topologically equivalent to its object 
                                 A
                              .


                              Symmetric: Medial Axis 
                                 M
                                 A
                                 
                                    (
                                    A
                                    )
                                 
                               is a skeletal representation which is equidistant from the boundary 
                                 δ
                                 A
                              .

@&#LITERATURE REVIEW@&#

Various hexahedron meshing algorithms have been proposed in the literature; however there is no automatic all-hex meshing algorithm that gives all the desirable properties such as boundary sensitivity, orientation insensitivity, high quality mesh, sharp feature preservation and handling of general solids. Every algorithm has its own pros and cons. In the paragraphs below, the method of decomposition and advancing front methods are discussed as they are relevant to LayTracks3D.

The method of decomposition works by decomposing a complex 3D domain into simpler meshable subdomains. One of the most practical approaches for generating all-hex meshes involves decomposing a complex solid into sweepable, mappable, or submappable subdomains, and then meshing these subdomains. This technique generally gives a high-quality mesh. The main disadvantage of this method is that it requires manual geometry decomposition, which is a very tedious task, and not trivial on complex models even for experts. This is a major bottleneck of this type of decomposition method.

Another decomposition-based method uses the MA. Here a quick review of the MA-based 3D meshing algorithms is presented. Price and Armstrong  [6,7] described a subdivision yielding one subregion for each medial vertex, medial edge and medial face. The subregions are subsequently meshed by mid-point subdivision. This method can generate poor quality elements, which are not useful for simulation. Pete Sampl  [8] presented a semi-structured meshing algorithm that generates mixed meshes with hexahedron percentage ranging from 10.6% to 47%. It does not consider assembly models and therefore does not address respecting boundary imprints and obtaining conformal meshes. Makem et al. [9] used the MA for detecting thin and thick regions while generating a hybrid mesh, i.e., swept meshes are generated on the thin-sheet and long slender regions with unstructured tetmeshes on the rest of the domain.

Another decomposition-based method uses frame fields to design high quality hexahedral meshes. However, the automatic generation of frame fields that are useful for generating meshes of good quality is a complex problem. The generation of 3D frame fields is more complex than its 2D counterpart called cross fields; thus, preventing direct extension of most 2D methods to 3D. Vyas and Shimada  [10] made the first attempt to generate such a frame field using tensor metrics. The tensor field is first initialized at the boundary of the solid and then interpolated in the interior in an advancing front manner. This method generates a hexahedron mesh at targeted regions and a hex-dominant mesh in the rest of the domain. The eigenvalues of the metric order the different directions of the tensor field. As a result, smoothing and interpolation operations treat the frame field as a set of 3 different direction fields, preventing the intertwining naturally occurring in the fields. Moreover, the regions surrounding umbilics, where several eigenvalues are starting to be identical, are highly unstable, and make the resulting tensor field unusable in these regions.

To overcome these problems, a method based on an energy formulation has recently emerged  [11–13]. The energy formulation ensures that the order in which the directions of a frame are considered have no impact. Using the gradient of this energy, it is then possible to globally smooth the frame field. The initial field is computed using a given crossfield on the surface that is transformed into a 3D frame field on the surface by adding the surface normal. The smoothing operations proposed are a massive step toward in the generation of frame fields. However, poor initial singularity locations cannot be improved through smoothing, as these only look for the closest local minima of the energy. The results are also very dependent on the input cross field and it is not clear if the singularity graph can always guarantee all-hex meshes.

Kowalski  [14,15] proposed a method of generating frame fields, which does not depend upon the input surface crossfield. By computing streamlines of interest, a skeleton is obtained that allows the partitioning of the domain into multiple blocks that can be easily meshed through structured mesh generation methods. The biggest drawback of this method is that there is no guarantee that a skeleton generated from the frame field can split the domain into a block-structured mesh in 3D.

Another popular approach is advancing front methods because of their success in 2D. The extension of 2D advancing front all-quad meshing algorithm paving [16] to 3D plastering  [17] has very limited success. Plastering starts with a pre-meshed boundary and places hexahedron elements in an advancing-front manner, progressing toward the center of the domain. A heuristic set of procedures for determining the order of element formation is defined. Unconstrained paving and plastering [18–20] extend respectively the paving and the plastering algorithms by starting from a domain whose boundary is not pre-meshed. They use a background simplicial mesh to guide the placement of entire layers of cells at a time, reducing the frequency at which unmeshable voids appear. Plastering is automatic, produces high quality elements at the boundary, preserves sharp features, and handles general solids. However, the major drawback of this method is that it almost always contains interior voids that cannot be meshed through heuristics and generates poor quality elements at the interior.

Here a summary of indirect methods for generating hex-dominant meshes is given even though the proposed algorithm falls under direct method. The indirect methods use an intermediate tetmesh while generating a hex-dominant mesh. Owen et al.  [21] presented a method called H-Morph that combines the tetrahedron elements into hexahedron elements in an advancing front manner. The intermediate tetmesh is generated using Delaunay algorithm. As the generation of tetmesh is critical, Yamakawa et al.  [22] used packing of rectangular cells to generate the tetmesh respecting an input directionality field. The hex elements are built at highest quality configuration first in order to effectively generate the hex-dominant meshes. Levy et al. [23] improved the spatial distribution of the nodes of the tetmesh by using Lp-centroidal Voronoi tessellation (Lp-CVT). Lp-CVT allows aligning the axes of Voronoi cells with a predefined directionality field  [24]. Carrier-Baudouin et al. [25] inserted the tet nodes using a standard advancing front technique, i.e., nodes were inserted from the boundaries towards the interior of the domain. P-E Bernard et al. [26] improved the method by using a scalar estimation of the geometry smoothness. The smoothness function assists in identifying the geometric singularities in the domain. However the singularities, i.e., the domain skeleton topology was not constructed explicitly.

LayTracks3D combines the merits of two popular mesh generation techniques, the method of decomposition and the advancing front methods. While the MAT has been used for domain decomposition before, this is the first attempt at using the MAT for the robust subdivision of a complex 3D domain into a well-defined simpler sub-domain called “Tracks”. As the MAT exists where the advancing fronts collide, the hexahedron fronts propagated from the boundary are terminated without complex interference checks. Thus, LayTracks3D has the promise of generating high quality, boundary sensitive, orientation insensitive, sharp feature preserving hexahedron meshes on general solids without any manual decomposition.

As it is easier to understand the algorithm in 2D, here we quickly recap the original 2D LayTracks  [1]. For simplicity, first LayTracks on a single surface is discussed. LayTracks works analogous to the formation of railway tracks by laying rails on the ground to form a set of non-intersecting connected tracks on surfaces; hence, the name LayTracks. This algorithm uses a skeletal representation of the input domain called Medial Axis Transform (MAT)  [2–4] which is a mathematically well-studied skeletal representation. LayTracks is built on the mathematically sound MA and guarantees many desirable properties such as orthogonality of mesh elements at the boundary (see Fig. 1), irregular nodes restricted at farthest distance from the boundary, an automatic conformal mesh at the interface of surfaces, and an all-quad mesh.
                  


                     Fig. 3
                      (a) shows a single surface in 2D and its MA. It also shows the map from each MA segment to the corresponding boundary segments. The points on the MA where more than two segments meet are called Branch Points. These points represent the critical singularity points in the interior of the domain. Fig. 3(b) shows the decomposition of the 2D domain into a set of connected simpler domains. Using the map, the branch point is connected to its corresponding tangent points on the boundary via line segments (see Fig. 3(b)). The set of these connected line segments is called a Rail (see blue lines in Fig. 3(b) and (d)). A rail is mathematically defined as a bi-partite graph  [27]. Each line segment of a rail (i.e. edge of the bi-partite graph) has two end points: one on the MA and the other on the boundary. Note that rails branch at the MA branch points and they enter and exit the boundary orthogonally. The region between two adjacent rails’ paths  [27] is called a Corridor (one of the corridors is highlighted in Fig. 3(b)).

Note that the MA skeleton representation reduces the surface meshing problem into curve meshing. The next step is propagating the rails inside each corridor as the MA curve segments are meshed by placing nodes based on the input mesh size. Uniform node spacing on the MA generates a uniform mesh and a varying node spacing based on the radius of the medial ball generates a geometry-adaptive mesh  [28]. Fig. 3(c) shows the uniform node spacing on a MA segment of a corridor. Fig. 3(d) shows all the rails generated using non-uniform node spacing on the MA segments of each corridor. Here the spacing is directly proportional to the MA radius. The region between two adjacent rails’ paths inside each corridor is called a Track  [27] (see Fig. 3(e)). Smaller width tracks are generated where the MA radius is smaller. Similarly, wider tracks are generated where MA radius is large.

A set of connected tracks is a much simpler domain to mesh compared to the original input surfaces. First the rails are meshed and then the quad elements are built inside each track. Note the rails are symmetric on either side of the MA as they are line segments connecting the center of the maximal ball to the tangent points as shown in Fig. 1. Therefore, the total number of nodes on the two radii is always even. Thus, a track will be bounded by an even number of edges (i.e., even number of edges on the two rails and two boundary edges). This is the basis for a theoretical guarantee for an all-quad mesh  [27].

Here we discuss LayTracks on multiple surfaces as it is difficult to visualize tracks propagating across multiple solids in 3D. First, the MA of each surface is generated independently. Fig. 4
                      (b) shows the map between MA and boundary segments in each surface.

The critical part of subdividing the domain into simpler corridors is in placing the points at the branch points (see Fig. 4(c)). The rails are then propagated across multiple surfaces in breadth-first-traversal using the map. The propagation of the rail will terminate in three cases: (1) at an edge incident on only one surface, (2) at a concave vertex, or (3) at the starting point forming a loop. Fig. 5
                      shows that the tangent points at the interfaces are equidistant from the common vertex incident on all the surfaces. Therefore, the rails form a perfect loop instead of forming a spiral  [27]. This is true even in 3D in the Euclidean space. It is possible that, the branch points in the MA of a surface are very close to each other, or the rails laid through the branch points of different surfaces come close. In such cases, the rails result in narrow corridors (see Fig. 6
                     ). These narrow corridors need to be removed, otherwise they will result in quad elements with poor aspect ratio. Such a narrow corridor can be easily collapsed as a corridor is bounded by paths of two bipartite graphs [27]. Here we have removed the narrow corridors only by deleting/modifying the rails. Note that the MA is not altered, thus retaining the correct two-way mapping between the boundary and the MA.


                     Fig. 4(d) shows meshing the MA inside each corridor. The corridors are subdivided into simpler tracks, which propagate across multiple surfaces as shown in Fig. 4(e). Note that rails cut the interface of the multiple surfaces orthogonally. Thus conformal mesh can be generated with near square elements along the boundary/interface of each surface as shown in Fig. 4(f).

LayTracks3D works analogous to 2D LayTracks  [1] in decomposing a general solid/assembly into tracks in 3D. Fig. 7
                      shows the overview of LayTracks3D. Step 1 is to generate a 3D medial surface (see Fig. 8
                     (b)) and build data structures to hold a 2-way map from the MA to the B-Rep and the B-Rep to the MA. Establishing the map is the most critical step and subsequent steps depend heavily on the 2-way map.

In Step 2, the non-manifold MA junction curves, which represent critical singularities of the 3D shape are used to decompose the solid into corridors. First, the MA junction curves are meshed. Then, rails are propagated from mesh nodes to define critical partition surfaces that define simpler meshable sub-regions called corridors (see Fig. 8(c)).

In Step 3, the 3D meshing is reduced to 2D meshing on the MA (see Fig. 8(d)). Meshing all the surfaces of the MA inside each corridor will cover the entire 3D solid. LayTracks3D is not an inside out method, i.e., as an alternative, one can mesh the boundary surfaces of corridors instead of the MA. It is quite typical to have a 3-manifold medial curve at convex vertices. It is recommended to have a layer of tri elements along the 3-manifold MA edge in order to obtain a single hexahedron element by combining six tets. This is discussed in detail in Section  7 as shown in Fig. 16.

Step 4 involves subdividing the corridor into tracks, which look like tunnels with quad/tri cross sections (see Figs. 8(e) and 15). First, rails are propagated at every node of the mesh on the MA. Second, tracks are automatically formed using the quad mesh topology on the MA. Unlike a rail, tracks do not branch. Tracks either form a closed loop or will have only one entry and only one exit.

In Step 5, tracks are meshed from the boundary towards the MA in an advancing front manner (without any interference checks) to achieve a boundary sensitive mesh (see Fig. 9
                     ). First rails are meshed using the defined mesh size. Next, hexahedron elements are built using the nodes of the rails. At the MA, two wedges can be combined into a hexahedron (e.g. at convex edge) or six tets can be combined into a hexahedron (e.g. at convex vertex). Non-hexahedron elements may arise at the MA (see Fig. 9). Section  7 gives more details on how to avoid non-hex elements at the MA to achieve all-hex meshes.

The overall robustness of LayTracks3D depends on the robustness of the underlying components such as MA extraction, mapping between MA and the boundary and the surface meshing algorithm.

Some of the characteristics of the proposed method are highlighted below:
                        
                           •
                           
                              Handle general solids: In theory, LayTracks3D can decompose any general solid into simpler tracks using a mathematically well-defined MA skeletal representation.


                              Boundary sensitive: Rails/tracks cut through the boundary/interface orthogonally at tangent points giving a boundary sensitive mesh along the surface normal.


                              Orientation insensitive: MAT is independent of the input model orientation and hence the mesh is orientation insensitive.


                              Dimension reduction: MAT reduces hexahedron meshing to quad meshing on the medial or the boundary surface of corridors.


                              Feature preservation: All the sharp boundary features are preserved in the corridors, tracks, and the final mesh.


                              Sizing and anisotropy control: The size/anisotropy specified on the boundary surfaces can be mapped to medial surfaces, which controls the size/anisotropy of hexahedron elements in two directions. Node spacing along rails controls the size/anisotropy in the third principal direction of a hexahedron element. Note that tracks find the shortest path and hence limit the scope of specified size to a local region, which is quite hard to do with hexahedron meshes. Unlike the tetrahedral meshing algorithms, the proposed method will not be able to respect a general anisotropic tensor field.


                              Conformal mesh: The 2-way map projects and resolves all the boundary imprints on the medial. Corridors then cut the interface of the multiple solids orthogonally and give an automatic conformal mesh respecting imprints. More explanation on assembly meshing is given in Section  6.


                              Geometry adaptive: The radius function of the MAT and its gradients can be used to control element size, anisotropy, and orientation. Rails can be used as NURBS control points to generate non-linear tracks  [27].


                              Fast remeshing/refinement: Recomputing the MAT or corridors is not required for remeshing/refinement as they depend only on geometry but not mesh size. Global or local remeshing can be performed by remeshing the medial surfaces of the corridors with a newer mesh size.


                              Mesh morphing: Old meshes can be morphed easily to new deformed geometry whenever the MA topology does not change.


                              Parallel friendly: Decomposition-based methods are generally parallel friendly. Meshing rails and tracks can be easily parallelized.


                              Potential All-Hex: LayTracks3D is based on the strong mathematical foundation of the MAT. Section  7 discusses extension of LayTracks3D for all-hex meshing.

Meshing multiple solids is more challenging than meshing a single solid. While meshing a single solid, the solid is decomposed into subdomains called corridors using only the non-manifold MA curves, which are critical singularities located in the interior of the solid. While meshing multiple solids, even the imprinted boundary curves need to be taken into account in order to obtain a conformal mesh at the interface of the solids.


                     Fig. 10
                      shows the overview of meshing one solid of an assembly model via LayTracks3D. Fig. 10(a) shows an assembly model with eight parts and Fig. 10(b) shows the thick cylindrical plate in transparent mode with imprints from adjacent parts. The top surface contains a rectangular imprint with two inner circles. The bottom surface contains two rectangular imprints and the lateral surfaces of the plate contain three circular imprints.

In is not trivial to get a hexahedron mesh of the simple solid shown in Fig. 10(b) using existing hexahedron meshing algorithms. Even though grid-based algorithms do a better job on solids aligned along Cartesian axes, they fail to respect the boundary imprints. Sweeping-based algorithms require manual decomposition and it is not trivial to decompose this simple solid into sweepable subregions. For example, sweeping the circular imprinted on the left surface will intersect with sweeping the rectangle from the top. Even with plastering, imprinted surfaces make it very difficult to close the inner voids.

One of the original contributions of LayTracks3D is that the MA is used to resolve all boundary imprints coming from all directions. These disconnected imprints — which are located on different surfaces spatially — are resolved by transforming them from the solid’s boundary to the MA using the map. As the MA is a lower dimensional skeleton representation of the 3D solid, all the boundary imprints are mapped onto the MA (see Fig. 10(c)). The MA is then subdivided into different patches not only by non-manifold MA curves but also by all boundary imprints coming from all directions.

Corridors are then generated using the imprints and the non-manifold junction curves of the MA. Note that the corridors pass through the boundary imprints orthogonally and are simpler subdomains with a 1-to-1 map. Recall that the sweeping based manual decomposition propagates globally and thus intersects with other sweeps. Corridors are similar to sweepable regions but they do not propagate globally. Corridors automatically find the shortest path to enter and exit a solid orthogonally. Fig. 10(e) shows the tracks respecting all boundary imprints. Thus, a conformal mesh has been generated by respecting all the imprints and by ensuring the orthogonality condition at the boundary. The mesh quality at convex vertices can also be further improved by having a layer of tri elements along 3-manifold MA curves, which will be discussed later in Section  7.

LayTracks3D is built on the strong mathematical foundation that is inherent in the MAT and hence has a very high potential in generating all-hex meshes of general solids. The LayTracks3D algorithm is based heavily on the uniqueness and continuity of the MAT as given Lemma 2.1.

The mapping function 
                        M
                        :
                        P
                        →
                        M
                        A
                        
                           (
                           A
                           )
                        
                      in Lemma 2.1 connects a point 
                        p
                      on the boundary to the maximal ball center 
                        M
                        p
                      as shown in Fig. 1. This lemma is central to LayTracks3D in (1) creating corridors by connecting branch points with its tangent points (see Fig. 8(c)) to get high quality boundary oriented elements, (2) creating tracks inside the corridor by placing rails using a 1-to-1 map from the boundary to the MA and from the MA to the boundary thus guarantying no branches inside the tracks (see Fig. 1), (3) projecting imprints from all directions onto the MA (see Fig. 10(c)), and (4) cutting the assembly interface orthogonally respecting all imprints to guarantee conformal mesh (see Fig. 10(d)). Therefore, all the major steps of LayTracks3D are very robust as they are derived from 
                        M
                        :
                        P
                        →
                        M
                        A
                        
                           (
                           A
                           )
                        
                     .

Let us now prove the following two essential conditions for all-hex meshing: 
                        Condition 1
                        
                           A general solid can be decomposed into a set of connected quad cross-section  3D  tracks.
                        


                     
                        Condition 2
                        
                           A quad cross-section  3D  track can be meshed with all-hex elements.
                        

Therefore, if these two conditions can be met, then any general solid can be meshed with all-hex elements using LayTracks3D. The sections below show how these two conditions are met theoretically, although a full implementation is not completed at this time.


                     
                        Condition 1
                        
                           Decompose general solid into set of connected quad cross-section  3D  tracks.
                        

Let us first look at the connected aspect of the 3D tracks. Note that the MA is a 2D skeleton representation of a 3D solid, i.e., mapping function 
                        M
                        :
                        P
                        →
                        M
                        A
                        
                           (
                           A
                           )
                        
                      reduces the 3D solid into 2D entities. Fig. 5(d) shows a set of connected conformal quads on the MA. Note that each of the 2D quad elements (see a shaded quad element in Figs. 14(d) and 15) represent a 3D track. The map 
                        M
                        :
                        P
                        →
                        M
                        A
                        
                           (
                           A
                           )
                        
                      generates four rails passing through the four nodes of a quad on both sides of the MA. Fig. 1 shows two rails in 2D and Fig. 15 shows four rails in 3D. Therefore, a connected conformal quad mesh on the MA guarantees a set of connected conformal 3D tracks.

Note that a quad element on the MA may not always give a 3D track with quadrilateral cross section. This is because the underlying map 
                        M
                        :
                        P
                        →
                        M
                        A
                        
                           (
                           A
                           )
                        
                      may not be 1-to-1 everywhere. Note that Lemma 2.1 assumes that the boundary is 
                        
                           
                              G
                           
                           
                              1
                           
                        
                      continuous (i.e. tangent direction is continuous) and piecewise 
                        
                           
                              C
                           
                           
                              2
                           
                        
                      continuous (i.e. second derivatives are continuous). In practice, at concave edges/vertices, where the map is 1-to-N, the statement “every point 
                     
                        p
                        ∈
                        P
                     
                     there is one and only one maximal ball touching 
                     
                        p
                     ” does not hold. Therefore, a 1-to-1 map between 
                        p
                      and 
                        M
                        p
                      (see Fig. 1) cannot be guaranteed at concave edges/vertices.

At a concave edge/vertex, one boundary point 
                        p
                      maps to multiple points 
                        M
                        p
                      on the MA, which is denoted by 1-to-N in Fig. 11
                     . Therefore, quadrilateral cross section is lost at 1-to-N map. There are two cases of 1-to-N. First, a 2D quad element on the MA can become a 0D point at a concave vertex as shown in Fig. 11(c) (e), and (f). Second, a 2D quad element can become a 1D edge at a concave edge as shown in Fig. 11(b), (d), and (e). Tracks loose quad cross section at both the concave edges and the concave vertices.

Another scenario where tracks do not maintain quadrilateral cross section is at N-to-1 map. At N-to-1 map, multiple points on the boundary map to a single point 
                        M
                        p
                      on the MA. Again, there are two cases of N-to-1. First, consider a sphere where a 2D region on the boundary maps to a 0D point at the center of the sphere as shown in Fig. 11(h). Second, consider a cylinder where a 2D region on the boundary maps to a 1D edge at the axis of the cylinder as shown in Fig. 11(g). Thus, the tracks loose quad cross section at the center of the sphere and axis of the cylinder/fillets.


                     Fig. 11 shows all possible types of tracks that can arise from all the possible combinations of 1-to-N and N-to-1 maps. In Fig. 11(a)–(c), 1-to-1 map exist on the bottom side and 1-to-1 and two cases of 1-to-N maps exist on the top side. Fig. 11(d) shows 1-to-N map at both the top and bottom sides touching the concave edges. Similarly, Fig. 11 (f) shows 1-to-N map at both the top and bottom sides touching the concave vertices. Fig. 11(e) shows 1-to-N map touching a concave edge on one side and concave vertex on the other side. Fig. 11(g) shows a N-to-1 map with a quad region on the boundary becoming an edge at the MA as seen in a cylinder. Similarly, Fig. 11(h) shows a N-to-1 map with a quad region on the boundary becoming a vertex at the MA as seen in a sphere.

Two potential solutions for 1-to-N map at a concave edge/vertex are shown in Fig. 12
                      in two rows. Top row shows a potential solution to remove a concave vertex by converting single surface/region into multiple convex surfaces/regions. The map at the concave vertex/edge (see green lines touching the concave vertex in the top-left image in Fig. 12) can be used to define the cutting surfaces to split the concave region in to a set of convex regions in 3D. This is similar to how the mapping has been used to define the cutting surfaces while decomposing a solid into corridors as shown in Figs. 8(c) and 10(d).

The bottom row shows another solution, which perturbs the 1-to-N map to obtain a 1-to-1 map using smoothing operation. The multiple coincident points at the concave vertex will get spread out locally. Note that the orthogonality condition will be lost locally at the concave regions in the second solution.

One of the solutions for the finite contact where the map is N-to-1 is shown in Fig. 13
                     . Fig. 13(a) shows a finite contact case such as a cylinder or a sphere where multiple points on the boundary map to a single point on the MA. This single solid problem is transformed to a multiple solids problem by introducing a core at the N-to-1 map of the MA regions. Fig. 13(b) shows a cuboidal core at the center of the sphere. Note the change in the MA shown in purple. The MA, which was a point at the center of the sphere, now becomes a sheet in between the outer sphere and inner cuboidal core. Thus we have removed the N-to-1 map throughout the domain. Note that there exists a 1-to-N map at the concave vertices of the outer sphere region (see Fig. 13(b)). As discussed in the above paragraph, a 1-to-N map at the concave regions can be transformed to a 1-to-1 map by spreading the coincident nodes at the concave vertex (see Fig. 13(c)). Thus the N-to-1 map is transformed completely to a 1-to-1 map.

Further research is required in identifying a suitable core. The mapping field between the boundary and the MA should assist in identifying the singularity and breaking the singularity. The core can be defined by potentially identifying an offset surface around the singularity.

As discussed in the above paragraphs, 1-to-N and N-to-1 maps can be transformed to a 1-to-1 map. The 1-to-1 map then satisfies Condition 1 and quad cross-section tracks (as shown in the first image of Fig. 11) can be generated on general solids.


                     
                        Condition 2
                        
                           Mesh a quad cross-section  3D  track with all-hex elements.
                        

Let us now examine Condition 2, which requires us to mesh every quad cross-section 3D track with all-hex elements. LayTrack3D first meshes all the rails by placing nodes and then meshes all the tracks by building hexes. The hexes are built in an advancing front manner inside each track, i.e., hexahedron elements are built from the boundary towards the interior MA.

Here the author would like to point out why the current implementation discussed in Section  5 does not guarantee an all-hex mesh and how to overcome this limitation to achieve an all-hex mesh. In the current implementation, non-hex elements can arise at the MA when the hexahedron elements are built inside the track in an advancing front manner. This is because LayTrack3D described in Section  5 has no control on the number of intervals present on the rails of the tracks. The quad mesh on the medial shown in Fig. 8(d) is randomly generated using the Paving algorithm for a given mesh size without any special constraints. Paving is an unstructured meshing algorithm and the quad nodes can exist in an unstructured manner on the medial surface. Then the rails are generated from these quad nodes. Note that the rails on either side of a quad node will have the same length as they are radii of a maximal ball (see Fig. 1). The rail length is then divided by the desired mesh size to set the intervals on the rails. Thus an even number of intervals on the rails of a track is set automatically without any special attention.

In order to obtain an all-hex mesh inside a quad cross-section track, Case 1: all the four rails must have the same intervals or Case 2: two rails must have 
                        2
                        N
                      intervals and the other two rails must have 
                        2
                        
                           (
                           N
                           +
                           1
                           )
                        
                      intervals. Fig. 15 shows that with Case 1, all-hex elements can be easily built on equal interval rails and with Case 2, two wedges at the MA can be merged to form a hexahedron. As the rails are symmetric, these are the only two cases that can exist on a quad cross section track to form a hexahedral element at the MA.

The big question is how to generate a mesh on the medial surface such that all tracks satisfy either Case 1 or Case 2? In order to satisfy Case 1 or Case 2 in every track, the isocontours of the radius function of the MA have been utilized. Fig. 14
                     (b) shows isocontours of the radius function of the MA obtained for mesh size increments. Isocontours and non-manifold MA curves split the MA into different regions/segments as shown in Fig. 14(c). Fig. 14(c) also shows the underlying facets of these MA segments. Fig. 14(d) shows the quads on the MA that represent the quad cross section tracks in 3D. The intervals on a rail generated at a node can be easily determined by knowing the isocontour number (see Fig. 15
                     ). Fig. 14(d) shows two regions bounded by only one isocontour and non-manifold MA curves (see Case 1). These regions can be meshed using unstructured quad meshing algorithm such as paving. All the rails at the quad nodes of this unstructured mesh will have equal intervals, thus satisfying Case 1. The rest of the region is bounded by two isocontours 
                        N
                      and 
                        N
                        +
                        1
                      and non-manifold MA curves. A quad in this region is shown in Fig. 15. Two quad nodes lie on the isocontour N and the two rails originated from these two quad nodes will have 2N intervals. Similarly, the other two quad nodes lie on the isocontour 
                        N
                        +
                        1
                      and the two rails originated from these two quad nodes will have 
                        2
                        
                           (
                           N
                           +
                           1
                           )
                        
                      intervals. Thus, this track satisfies Case 2. Thus, the quad mesh shown in Fig. 14(d) will give an all-hex mesh by satisfying either Case 1 or Case 2 in every track.

In order to improve the hexahedron quality at 3-manifold MA curves (MA curve incident on three MA surfaces), a layer of tri elements are generated all along the 3-manifold MA curve as shown in Fig. 14(d). Fig. 16
                     (a) shows a 3-manifold MA curve at a convex vertex. Fig. 16(b) shows a layer of tri elements all along the 3-manifold MA curve. The tracks corresponding to the tri will have triangular cross-section. Fig. 16(c) shows how six tets form a hexahedron at a 3-manifold MA edge and two wedges form a hexahedron along the two tri cross section tracks. Fig. 8(d) and (f) show that having a tri along the 3-manifold MA curve will result in a high quality hexahedron elements at the convex corner. Fig. 10 shows that having quads along the 3-manifold MA curve will often result in poor quality elements at the convex vertex. Therefore, using the tri elements will give high quality hexahedron elements that are conformal with the hexahedron elements of the adjacent quad cross section tracks.

The final all-hex mesh topology can be visualized using the quad mesh topology on the MA. Fig. 14(d) shows the unstructured quad mesh in the region bounded by one isocontour. An unstructured hexahedron mesh containing irregular nodes will exist in the tracks originating from the unstructured quad mesh. In Fig. 14(d), the regions bounded by two isocontours have a structured quad meshes. Therefore, the hexahedron mesh originating from this quad mesh will have a structured mesh.

@&#RESULTS@&#

LayTrack3D has been implemented in CUBIT  [29] using the CADFix  [30] medial object library. Note that the generation of the 3D MA itself is a challenging problem. The proposed method relies on the availability of a robust MA and does not do any cleanup of MA. Therefore, any inaccuracy or incompleteness in the MAT will result in inaccurate or incomplete hex-dominant mesh. The author is actively working on LayTracks3D and this section shows the current results obtained on few industrial models.

Currently, hex-dominant meshes can be generated by meshing the MA using the Paving algorithm  [16] as shown in Fig. 8. Generation of the isocontours discussed in Section  7 has been implemented; however, the quad meshing on the MA using the isocontours to achieve all-hex meshes is not yet fully implemented. Therefore, in this section only the hex-dominant meshes are shown, which by itself is a significant step forward in the MA-based hexahedron meshing research. While hex-dominant meshes are not suitable for all applications, many numerical simulations can use hex-dominant meshes  [31].

Note that non-hex elements at the MA are not standard elements types such as tets and pyramids. Currently, no effort has been made to establish a hex to tet transition via pyramids. Also, the quality of the hex and non-hex elements depend on the quality of the quad mesh on the MA. Also, no mesh post-processing operations such as smoothing, sheet insertion/deletion, etc. have been used to improve the mesh quality.


                     Table 1
                      shows the computational time in seconds for the different steps of LayTracks3D. The first row shows the time taken in importing the CAD and its MA files. As the Housing model contains highest number of curves and surfaces in both the CAD and MA models, it took more time compared to other models. Housing model also had highest number of convex corners where the MA surfaces are split as shown in Fig. 8(b) to improve mesh quality. The third row shows the time taken to mesh MA surfaces using Paving algorithm. The fourth row shows the time take to build corridors, rails and tracks. As Bracket model has least number of elements (see Table 2
                     ), it took least amount of time for building corridors, rails, and tracks. The time taken to build elements is significantly lower as hex elements are built in the advancing front manner inside each track and non-hex elements are built at the MA without any interference checks. The total computational time is shown in the final row, which is significantly lower than the user time required in methods requiring manual decomposition for hexahedron meshing.

The proposed algorithm has been tested on a number of models in generating hex-dominant meshes. Figs. 17–20
                     
                     
                     
                      show four such industrial parts containing through holes, sharp features, fillets, concave regions, and thin–thick wall cross sections. Image (b) in Figs. 17–20 show the corridors obtained by propagating rails (shown in red) from the non-manifold MA junction curves to the boundary, which represent critical singularity planes. The MA is meshed using the paving algorithm with a layer of tri elements along the 3-manifold MA curves touching convex vertices. Image (c) in Figs. 17–20 shows the tracks, which look like tunnels (see Fig. 15) in 3D and are much simpler to mesh than the original solid. These tracks are orthogonal to the boundary and take a turn at the MA. An advancing front method has been used to mesh the tracks by building near cubical shape hexahedron elements at the boundary (see image (d) in Figs. 17–20).


                     Table 2 shows the percentage of non-hex elements in the hex-dominant meshes. Most of the models tested result in having about 2% to 3% non-hex elements. These non-hex elements currently exist at the MA and at the concave edges/vertices. Currently, isocontours of the radius function are not utilized in meshing the MA. As discussed in Section  7, by using the isocontours correct intervals can be obtained on the rails to avoid non-hex elements at the MA. Also, the non-hex elements at the concave edges/vertices can be eliminated by either perturbing the map or by partitioning the concave region into convex regions.

@&#CONCLUSION@&#

This paper presents an extension of LayTracks to generate hex-dominant meshes of general solids using the MAT. LayTracks3D combines the merits of two popular mesh generation techniques, the method of decomposition and the advancing front methods. The algorithm first decomposes any general solid into simpler sweepable like regions called corridors using the internal critical singularities, i.e., non-manifold MA junction curves and the boundary imprints. Next, the corridors are further subdivided into simpler tracks. The tracks are then meshed in an advancing front manner by building hexahedron elements from the boundary towards the MA without any interference checks. The algorithm generates hex-dominant meshes on general solids and assemblies with desirable features such as boundary sensitivity, orientation insensitivity, sharp feature and imprint preservation without any manual decomposition/interaction. Work is under way to guarantee all-hex meshes using isocontours of the MA radius function.

@&#ACKNOWLEDGMENTS@&#

The author would like to thank Henry Bucklow, Robin Fairey, and Mark Gammon at ITI TranscenData Europe Ltd., for providing the CADfix medial object library.

@&#REFERENCES@&#

