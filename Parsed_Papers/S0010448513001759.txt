@&#MAIN-TITLE@&#Robust cascading of operations on polyhedra

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Geometric rounding algorithm for cascaded operations on polyhedra.


                        
                        
                           
                           Algorithm rounds, perturbs, and restores validity.


                        
                        
                           
                           Output provably valid and close to input.


                        
                        
                           
                           Algorithm validated on packing three polyhedra into minimal box.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Robust computational geometry

Geometric rounding

@&#ABSTRACT@&#


               
               
                  We present a geometric rounding algorithm for robustly implementing cascaded operations on polyhedra where the output of each operation is an input to the next operation. The rounding algorithm reduces the bit-precision of the input and eliminates degeneracy. To do so, it rounds coordinates to floating point and randomly perturbs them, then prunes away invalid portions of the resulting polyhedron. We demonstrate the rounding algorithm on a packing algorithm with ten cascaded Minkowski sums and set operations.
               
            

@&#INTRODUCTION@&#

A sequence of operations is cascaded when the output of each operation is an input to the next operation. Cascaded operations on polyhedra are common in solid modeling. Designers create models via cascaded set operations, linear transformations, offsets, and sweeps. Algorithms that manipulate polyhedral models also use cascaded operations.

A useful implementation of cascading should be robust. The output should have guaranteed accuracy for every input and the running time should be acceptable on real-world input. Prior work provides robust Boolean set operations [1], and Minkowski sums and sweeps  [2]. Robustly cascading these operations would benefit users of current computer-aided design algorithms and could facilitate the development of new algorithms.

Algorithms for geometric operations are formulated in the real-RAM model where real arithmetic has unit cost. The control logic is expressed in terms of predicates: polynomials in the input parameters whose signs are interpreted as truth values. An example predicate is “point 
                        c
                      is left of line 
                        a
                        b
                      in the plane”. The first robustness problem is how to evaluate predicates efficiently. The second problem is how to handle degenerate predicates: ones that evaluate to zero, thereby creating special cases in the control logic.

Cascading exacerbates the predicate evaluation problem by increasing bit complexity. Fig. 1
                      shows an example involving polygons 
                        P
                      and 
                        Q
                      with bit complexity 
                        p
                     . The bit complexity of vertices 
                        b
                      and 
                        c
                      of 
                        P
                        −
                        Q
                      is 
                        4
                        p
                      because they each depend on 4 input vertices from two intersecting line segments. The Minkowski sum of polyhedra with 
                        p
                     -bit vertices contains 
                        12
                        p
                     -bit vertices. More generally, a cascade of 
                        n
                      planar constructions of a line from two points and a point from two lines has exponential bit complexity in 
                        n
                        [3]. Cascading can also create new degeneracies. In Fig. 1, vertices 
                        b
                      and 
                        c
                      are collinear with 
                        a
                        d
                      because they are intersection points of 
                        a
                        d
                      with other line segments.

We present a geometric rounding algorithm for robust cascaded operations on polyhedra (Section  3). The input is a polyhedron with arbitrary bit-complexity. The output is a polyhedron that is close to the input and whose vertices are in general position and have bounded bit-complexity. We prevent bit complexity growth by rounding the vertex coordinates to floating point and remove degeneracy by perturbing the rounded vertices (Fig. 2
                     (b)). If the modified polyhedron is invalid, e.g. intersects itself, we restore validity (Fig. 2(c)) and perturb the new vertices (highlighted in Fig. 2(c), (d)). Cascaded operations are implemented by geometrically rounding the output of each operation before providing it as input to the next operation. We demonstrate robust cascading on polyhedra by implementing a classic packing algorithm, which has ten cascaded Minkowski sums and set operations, and testing it on degenerate inputs, using a perturbation that is negligible in applications (Section  4).

There are two main robustness methods. Exact computational geometry   [4] evaluates predicates exactly, using heuristics to decrease the evaluation time. The degenerate cases must be handled explicitly. In cascaded operations, predicate evaluation is slow because bit-complexity growth and output degeneracy defeat the heuristics. Controlled perturbation   [5] adds a random perturbation to each input parameter. The maximum perturbation size is chosen to ensure that predicates are non-degenerate and can be verified in floating point with high probability. In cascaded operations, a separate perturbation is required for each operation to remove degeneracy due to the previous operation. The perturbed polyhedra may be invalid, as illustrated in Fig. 2(b). Prior work does not address this challenge.

Prior work on geometric rounding reduces bit complexity while maintaining validity, but allows a degenerate output. There are efficient algorithms for polygons  [6,3] and spline curves  [7] in the plane. Fortune’s  [8] algorithm for a polyhedron has output size 
                        
                           O
                        
                        
                           (
                           
                              
                                 n
                              
                              
                                 4
                              
                           
                           )
                        
                      with 
                        n
                      the input size, which is impractical. Fortune [9] rounds a polyhedron using a representation that specifies the supporting planes of the faces and defines the vertices as transverse intersections of three supporting planes. The approach fails when vertices must be specified, as is common in solid modeling, and it excludes structures whose vertices are incident on more than three faces, such as Minkowski sums.

We begin with an overview of our geometric rounding algorithm. The input is a polyhedral region with a closed manifold boundary, which we call a polyhedron for short. A polyhedron consists of disjoint cells each of which has an outer boundary and can also have inner boundaries. We represent a polyhedron as a set of closed triangle meshes, oriented so that the winding number from infinity of an interior point is 1 and of an exterior point is 0. We round and perturb the vertex coordinates to prevent bit-complexity growth and degeneracy. The modified input is invalid if it does not represent a polyhedron: either two triangles intersect or a winding number of a cell is neither 0 nor 1.


                     Fig. 3
                      illustrates on polygons: the modified input is invalid because three edges intersect, one cell has winding number 2, and another has winding number  
                        −
                        1
                     . Fig. 4
                      illustrates on polyhedra: two pairs of modified triangles intersect and one cell has winding number  
                        −
                        1
                     .

To compute a polyhedron that is close to the input, we construct the subdivision defined by the modified input, assign winding numbers to its cells, and take the union of the cells with positive winding number. This union corresponds to the volume covered by the modified interior. In Fig. 3(c), the union is two polygons. Although it is a well-defined polyhedral region, the union is invalid if it contains a non-manifold vertex: one that has a neighborhood that is not homeomorphic to a plane. A non-manifold vertex of a polyhedron is incident on multiple loops of adjacent triangles. We restore validity by subtracting tiny tetrahedra centered at these vertices. In Fig. 4, the highlighted vertex is incident on five triangles in the input (a) and on two triangle loops in the union (c), so subtracting a tetrahedron yields a valid polyhedron with two cells (d).

The valid polyhedron can contain intersection vertices where (input or tetrahedron) edges intersect faces or where three faces intersect. These vertices need not be in general position. In Fig. 3(c), intersection vertices 
                        b
                      and 
                        c
                      are collinear with input edge 
                        a
                        d
                     . We remove this degeneracy with a specialized perturbation that preserves validity.

The winding number strategy was applied to plane-based polyhedra by Fortune [9]. Non-manifold vertices cannot occur in that representation because every vertex is incident on exactly three triangles.

The geometric rounding algorithm appears in Fig. 5
                        . The input is a polyhedron 
                           A
                         of arbitrary bit complexity, and perturbation sizes 
                           δ
                         and 
                           
                              
                                 δ
                              
                              
                                 2
                              
                           
                        . Step 1 rounds the vertex coordinates of 
                           A
                         to floating point then adds a uniform perturbation in 
                           
                              [
                              −
                              δ
                              ,
                              δ
                              ]
                           
                        . Step 2 constructs the subdivision defined by the triangles of 
                           A
                        , identifies the vertices incident on triangles that separate cells of winding number 0 and 1, and returns the ones with multiple loops of such triangles. Step 3 constructs, and likewise rounds and perturbs by 
                           δ
                        , equilateral tetrahedra with circumradius 
                           3
                           
                              
                                 3
                              
                           
                           δ
                         centered at the non-manifold vertices. The union of these tetrahedra is 
                           B
                        . Steps 4–5 compute the union 
                           D
                         of the positive winding number cells in the subdivision of 
                           A
                           ∪
                           B
                        . The winding number of cell 
                           p
                         with respect to polyhedron 
                           X
                         is written as 
                           
                              
                                 w
                              
                              
                                 X
                              
                           
                           
                              (
                              p
                              )
                           
                        . Step 6 triangulates 
                           D
                         to obtain a valid polyhedron 
                           R
                        .

Step 7 perturbs the intersection vertices of 
                           R
                         (created in Step 4) while keeping 
                           R
                         valid. For each vertex 
                           v
                        , we select 
                           
                              
                                 v
                              
                              
                                 ′
                              
                           
                         uniformly in 
                           
                              
                                 
                                    [
                                    −
                                    1
                                    ,
                                    1
                                    ]
                                 
                              
                              
                                 3
                              
                           
                        . For each pair of triangles 
                           s
                           ,
                           t
                           ∈
                           R
                         with intersection vertices, we compute a 
                           
                              
                                 λ
                              
                              
                                 s
                                 t
                              
                           
                         such that 
                           s
                         and 
                           t
                         are disjoint whenever each of their intersection vertices 
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                         is replaced by 
                           
                              
                                 v
                              
                              
                                 i
                              
                           
                           +
                           
                              
                                 λ
                              
                              
                                 i
                              
                           
                           
                              
                                 v
                              
                              
                                 i
                              
                              
                                 ′
                              
                           
                         with 
                           0
                           <
                           
                              
                                 λ
                              
                              
                                 i
                              
                           
                           ≤
                           
                              
                                 λ
                              
                              
                                 s
                                 t
                              
                           
                        . We replace each intersection vertex 
                           v
                         by 
                           v
                           +
                           λ
                           
                              
                                 v
                              
                              
                                 ′
                              
                           
                         with 
                           λ
                         the smaller of 
                           
                              
                                 δ
                              
                              
                                 2
                              
                           
                         and the minimum 
                           
                              
                                 λ
                              
                              
                                 s
                                 t
                              
                           
                         over the pairs 
                           s
                           ,
                           t
                         that contain 
                           v
                        .

There are two cases for computing 
                           
                              
                                 λ
                              
                              
                                 s
                                 t
                              
                           
                        . If 
                           s
                           =
                           
                              
                                 v
                              
                              
                                 1
                              
                           
                           
                              
                                 v
                              
                              
                                 2
                              
                           
                           
                              
                                 v
                              
                              
                                 3
                              
                           
                         and 
                           t
                           =
                           
                              
                                 w
                              
                              
                                 1
                              
                           
                           
                              
                                 w
                              
                              
                                 2
                              
                           
                           
                              
                                 w
                              
                              
                                 3
                              
                           
                         are disjoint, let 
                           p
                         and 
                           q
                         be a closest pair of points on 
                           s
                         and 
                           t
                         (Fig. 6
                        (a)). The vector 
                           n
                           =
                           q
                           −
                           p
                         separates 
                           s
                         and 
                           t
                        : 
                           n
                           ⋅
                           
                              (
                              
                                 
                                    w
                                 
                                 
                                    j
                                 
                              
                              −
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              )
                           
                           >
                           0
                        . Let 
                           S
                           =
                           
                              {
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              +
                              k
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                                 
                                    ′
                                 
                              
                              }
                           
                         and 
                           T
                           =
                           
                              {
                              
                                 
                                    w
                                 
                                 
                                    j
                                 
                              
                              ,
                              
                                 
                                    w
                                 
                                 
                                    j
                                 
                              
                              +
                              k
                              
                                 
                                    w
                                 
                                 
                                    j
                                 
                                 
                                    ′
                                 
                              
                              }
                           
                         with 
                           k
                         a variable. We compute the maximum 
                           k
                        , 
                           
                              
                                 k
                              
                              
                                 
                                    max
                                 
                              
                           
                        , that satisfies the inequalities 
                           n
                           ⋅
                           
                              (
                              
                                 
                                    t
                                 
                                 
                                    j
                                 
                              
                              −
                              
                                 
                                    s
                                 
                                 
                                    i
                                 
                              
                              )
                           
                           ≥
                           0
                         for 
                           
                              
                                 s
                              
                              
                                 i
                              
                           
                           ∈
                           S
                         and 
                           
                              
                                 t
                              
                              
                                 j
                              
                           
                           ∈
                           T
                        . For any 
                           k
                           <
                           
                              
                                 k
                              
                              
                                 
                                    max
                                 
                              
                           
                        , 
                           n
                         separates the convex hulls of 
                           S
                         and 
                           T
                        , so it separates any perturbations of 
                           s
                         and 
                           t
                         whose 
                           λ
                         values are bounded by 
                           k
                         (Fig. 6(b)). We set 
                           
                              
                                 λ
                              
                              
                                 s
                                 t
                              
                           
                         to the largest power of 
                           0.5
                         smaller than 
                           
                              
                                 k
                              
                              
                                 
                                    max
                                 
                              
                           
                        . If 
                           s
                         and 
                           t
                         share a vertex, say 
                           
                              
                                 v
                              
                              
                                 1
                              
                           
                        , (Fig. 6(c)) we compute (below) a plane through 
                           
                              
                                 v
                              
                              
                                 1
                              
                           
                         with normal 
                           n
                         that separates the interiors of 
                           s
                         and 
                           t
                         and that maximizes the distance to the other vertices (Fig. 6(d)). We compute 
                           
                              
                                 λ
                              
                              
                                 s
                                 t
                              
                           
                         using 
                           n
                           ⋅
                           
                              (
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              −
                              
                                 
                                    v
                                 
                                 
                                    1
                                 
                              
                              +
                              k
                              
                                 (
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                    
                                       ′
                                    
                                 
                                 −
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              )
                           
                           ≤
                           0
                         and 
                           n
                           ⋅
                           
                              (
                              
                                 
                                    w
                                 
                                 
                                    j
                                 
                              
                              −
                              
                                 
                                    v
                                 
                                 
                                    1
                                 
                              
                              +
                              k
                              
                                 (
                                 
                                    
                                       w
                                    
                                    
                                       j
                                    
                                    
                                       ′
                                    
                                 
                                 −
                                 
                                    
                                       v
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              )
                           
                           ≥
                           0
                        .

To compute the separating plane (described above) for triangles that share 
                           
                              
                                 v
                              
                              
                                 1
                              
                           
                        , translate the origin to 
                           
                              
                                 v
                              
                              
                                 1
                              
                           
                         and rename the other vertices, so the triangles become 
                           o
                           a
                           b
                         and 
                           o
                           c
                           d
                         with 
                           o
                         the origin. A bisector of 
                           U
                           ⊆
                           
                              {
                              a
                              ,
                              b
                              }
                           
                         and 
                           V
                           ⊆
                           
                              {
                              c
                              ,
                              d
                              }
                           
                         is a plane through 
                           o
                         that separates 
                           U
                         and 
                           V
                         such that all elements of 
                           U
                           ∪
                           V
                         are equidistant from the plane. This distance is called the bisection distance. A normal 
                           n
                         to the bisector is 
                           n
                           =
                           c
                         for 
                           U
                           =
                           0̸
                         and 
                           V
                           =
                           
                              {
                              c
                              }
                           
                        , 
                           n
                           =
                           
                              (
                              c
                              ×
                              d
                              )
                           
                           ×
                           
                              (
                              c
                              −
                              d
                              )
                           
                         for 
                           U
                           =
                           0̸
                         and 
                           v
                           =
                           
                              {
                              c
                              ,
                              d
                              }
                           
                        , 
                           n
                           =
                           
                              (
                              a
                              ×
                              c
                              )
                           
                           ×
                           
                              (
                              a
                              +
                              c
                              )
                           
                         for 
                           U
                           =
                           
                              {
                              a
                              }
                           
                         and 
                           V
                           =
                           
                              {
                              c
                              }
                           
                        , and 
                           n
                           =
                           
                              (
                              a
                              +
                              c
                              )
                           
                           ×
                           
                              (
                              a
                              +
                              d
                              )
                           
                         for 
                           U
                           =
                           
                              {
                              a
                              }
                           
                         and 
                           V
                           =
                           
                              {
                              c
                              ,
                              d
                              }
                           
                        . A bisector is valid if it separates 
                           
                              {
                              a
                              ,
                              b
                              }
                           
                         from 
                           
                              {
                              c
                              ,
                              d
                              }
                           
                         and if no vertex in 
                           
                              {
                              a
                              ,
                              b
                              ,
                              c
                              ,
                              d
                              }
                           
                           −
                           U
                           ∪
                           V
                         is closer to it than the bisection distance. We enumerate the 
                           U
                         and 
                           V
                         candidates and choose the valid bisector that maximizes the bisection distance.

The computation of 
                           
                              
                                 λ
                              
                              
                                 s
                                 t
                              
                           
                         can encounter degeneracy because it uses the unperturbed intersection vertices. The cases are a vertex coplanar with a triangle, a vertex collinear with an edge, coplanar edges, and coplanar triangles. We detect these cases without numerical computation and handle them explicitly. For example, the distance formula is degenerate for coplanar edges because 
                           n
                         is the zero vector. One solution is a vertex of one edge that is closest to the other edge. Since we already compute this solution, we can ignore coplanar edges.

Degeneracy is detected in Steps 4–6 of the algorithm. Each triangle of 
                           A
                           ∪
                           B
                         is assigned a unique id and each vertex is assigned the ids of its incident triangles. The vertex ids are transferred to 
                           C
                         and its intersection vertices are assigned ids. When an edge intersects a triangle, the vertex is assigned the triangle id and the two ids of the triangles incident on the edge. When three triangles intersect, the vertex is assigned their ids. A face of 
                           C
                         is assigned the id of its generating triangle. When the face is triangulated, the triangles are assigned its id.

We use the ids to identify the degenerate cases. Two triangles are coplanar if they have the same id. A vertex is coplanar with a triangle if the triangle id is one of the vertex ids. A vertex is collinear with an edge if it is coplanar with the two triangles incident on the edge and they are not coplanar. Two edges are coplanar if a vertex of one is collinear with the other or if an incident triangle of one is coplanar with an incident triangle of the other.

@&#ANALYSIS@&#

We prove that our geometric rounding algorithm is valid and accurate, and analyze its computational complexity. The proofs assume that perturbation eliminates degeneracy. We enforce this condition at a provably small cost, as will be reported elsewhere.


                        
                           Theorem 1
                           
                              The polyhedron 
                              
                                 R
                               
                              is valid.
                           


                        
                           Proof
                           We show that 
                                 D
                               is a topological manifold. Steps 6–7 maintain this property.

In Step 4, 
                           A
                           ∪
                           B
                         intersects itself transversely because degeneracy is prevented by the perturbation. A manifold point of 
                           A
                           ∪
                           B
                         that is in 
                           D
                         is a manifold point of 
                           D
                        . This is the case for a point on a single edge or face of 
                           A
                           ∪
                           B
                        . A vertex of 
                           B
                         is manifold because every pair of incident faces shares an edge, hence cannot intersect. A non-manifold vertex 
                           v
                         of 
                           A
                         is inside a perturbed tetrahedron because the minimum distance, 
                           
                              
                                 3
                              
                           
                           δ
                        , from 
                           v
                         to the original tetrahedron of size 
                           3
                           
                              
                                 3
                              
                           
                           δ
                         equals the maximum perturbation of the tetrahedron. Hence, 
                           v
                         cannot contribute to 
                           D
                         because 
                           
                              
                                 w
                              
                              
                                 B
                              
                           
                           
                              (
                              v
                              )
                           
                           >
                           0
                        .

At a non-manifold, non-vertex point of 
                           A
                           ∪
                           B
                        , two or three triangles intersect. Suppose the triangles are from 
                           A
                        ; the other cases are similar. Fig. 7
                        (a) depicts a subdivision edge 
                           s
                         where two triangles intersect and cells c–f meet. Let 
                           c
                         have the largest winding number, so 
                           w
                           
                              (
                              d
                              )
                           
                           =
                           w
                           
                              (
                              e
                              )
                           
                           =
                           w
                           
                              (
                              c
                              )
                           
                           −
                           1
                         and 
                           w
                           
                              (
                              f
                              )
                           
                           =
                           w
                           
                              (
                              c
                              )
                           
                           −
                           2
                        . If 
                           s
                         is in 
                           D
                        , two incident cells have winding numbers 0 and 1. Either 
                           w
                           
                              (
                              c
                              )
                           
                           =
                           1
                         and the 
                           c
                           /
                           d
                         and 
                           c
                           /
                           e
                         subdivision faces are in 
                           D
                        , or 
                           w
                           
                              (
                              c
                              )
                           
                           =
                           2
                         and the 
                           d
                           /
                           f
                         and 
                           e
                           /
                           f
                         faces are in 
                           D
                        . In both cases, 
                           s
                         is a manifold edge. Fig. 7(b) depicts a vertex 
                           v
                         where three triangles intersect, cells c–j meet, and 
                           i
                         is hidden. Let 
                           c
                         have the largest winding number, so 
                           w
                           
                              (
                              d
                              )
                           
                           =
                           w
                           
                              (
                              f
                              )
                           
                           =
                           w
                           
                              (
                              g
                              )
                           
                           =
                           w
                           
                              (
                              c
                              )
                           
                           −
                           1
                        , 
                           w
                           
                              (
                              e
                              )
                           
                           =
                           w
                           
                              (
                              h
                              )
                           
                           =
                           w
                           
                              (
                              j
                              )
                           
                           =
                           w
                           
                              (
                              c
                              )
                           
                           −
                           2
                        , and 
                           w
                           
                              (
                              i
                              )
                           
                           =
                           w
                           
                              (
                              c
                              )
                           
                           −
                           3
                        . If 
                           w
                           
                              (
                              c
                              )
                           
                           =
                           1
                         or 
                           w
                           
                              (
                              c
                              )
                           
                           =
                           3
                        , the three faces incident on 
                           c
                         or on 
                           i
                         are in 
                           D
                         and 
                           v
                         is a corner. If 
                           w
                           
                              (
                              c
                              )
                           
                           =
                           2
                        , the 
                           d
                           /
                           e
                        , 
                           d
                           /
                           h
                        , 
                           f
                           /
                           e
                        , 
                           f
                           /
                           j
                        , 
                           g
                           /
                           h
                        , and 
                           g
                           /
                           j
                         faces are in 
                           D
                         and 
                           v
                         is a saddle (Fig. 7(c)).

We bound the error of geometric rounding in terms of 
                           ϵ
                           =
                           δ
                           +
                           
                              
                                 δ
                              
                              
                                 2
                              
                           
                           +
                           μ
                         with 
                           μ
                           ≈
                           1
                           
                              
                                 0
                              
                              
                                 −
                                 16
                              
                           
                         the rounding unit.


                        
                           Theorem 2
                           
                              If 
                              
                                 p
                               
                              is farther than 
                              
                                 4
                                 
                                    
                                       3
                                    
                                 
                                 ϵ
                               
                              from the boundary of 
                              
                                 A
                              
                              , 
                              
                                 
                                    
                                       w
                                    
                                    
                                       A
                                    
                                 
                                 
                                    (
                                    p
                                    )
                                 
                                 =
                                 
                                    
                                       w
                                    
                                    
                                       R
                                    
                                 
                                 
                                    (
                                    p
                                    )
                                 
                              
                              .
                           


                        
                           Proof
                           Step 1 moves a vertex of 
                                 A
                               and hence a boundary point at most 
                                 
                                    
                                       3
                                    
                                 
                                 
                                    (
                                    δ
                                    +
                                    μ
                                    )
                                 
                              , so 
                                 
                                    
                                       w
                                    
                                    
                                       A
                                    
                                 
                                 
                                    (
                                    p
                                    )
                                 
                               is unchanged. A point inside an unperturbed tetrahedron is within 
                                 3
                                 
                                    
                                       3
                                    
                                 
                                 δ
                               of 
                                 A
                              , so a point inside a perturbed tetrahedron is within 
                                 3
                                 
                                    
                                       3
                                    
                                 
                                 δ
                                 +
                                 
                                    
                                       3
                                    
                                 
                                 
                                    (
                                    δ
                                    +
                                    μ
                                    )
                                 
                                 <
                                 4
                                 
                                    
                                       3
                                    
                                 
                                 
                                    (
                                    δ
                                    +
                                    μ
                                    )
                                 
                              . Step 7 increases the distance to at most 
                                 4
                                 
                                    
                                       3
                                    
                                 
                                 
                                    (
                                    δ
                                    +
                                    μ
                                    )
                                 
                                 +
                                 
                                    
                                       3
                                    
                                 
                                 
                                    
                                       δ
                                    
                                    
                                       2
                                    
                                 
                                 <
                                 4
                                 
                                    
                                       3
                                    
                                 
                                 ϵ
                              , and so 
                                 
                                    
                                       w
                                    
                                    
                                       B
                                    
                                 
                                 
                                    (
                                    p
                                    )
                                 
                                 =
                                 0
                              .


                        Complexity. The computational complexity of Steps 1–6 is in 
                           
                              O
                           
                           
                              (
                              
                                 
                                    n
                                 
                                 
                                    3
                                 
                              
                              )
                           
                         with 
                           n
                         the input size. The number of intersection vertices 
                           k
                         is also in 
                           
                              O
                           
                           
                              (
                              
                                 
                                    n
                                 
                                 
                                    3
                                 
                              
                              )
                           
                        . By  Theorem 2, 
                           k
                         is also bounded by the number of edge/triangle pairs that do not share a vertex and whose Hausdorff distance is less than 
                           4
                           
                              
                                 3
                              
                           
                           ϵ
                        . Step 7 is in 
                           
                              O
                           
                           
                              (
                              k
                              
                                 (
                                 k
                                 +
                                 n
                                 )
                              
                              )
                           
                        . We use 
                           k
                           d
                        -trees to eliminate most non-intersecting triangles in Steps 4 and 7, which makes the actual running time close to linear in the output size.

We tested our geometric rounding algorithm by computing the smallest cubical container for three polyhedra. We use a packing algorithm  [10] that computes a placement of the polyhedra in a container or reports that none exists. We compute the smallest container by bisection search on its size. Geometric rounding is crucial for a robust implementation because the packing algorithm cascades ten Minkowski sums and set operations.

This test demonstrates robustness in three ways. The bit-complexity without rounding is high: four cascaded Minkowski sums alone would increase it by a factor of 124. The intermediate operations generate polyhedra that converge to zero as the box shrinks, which makes them nearly degenerate in the final iterations. Using identical polyhedra leads to many additional degeneracies.

The error in each cascaded operation is bounded by  Theorem 2. The test output is meaningful as long as the total error is less than the manufacturing tolerances. The error bound times the number of steps is less than 
                        1
                        
                           
                              0
                           
                           
                              −
                              6
                           
                        
                      for our choice of 
                        δ
                      below.

The inputs to the packing algorithm are three parts 
                        
                           
                              P
                           
                           
                              i
                           
                        
                      and a box 
                        
                           
                              
                                 
                                    P
                                 
                                 
                                    0
                                 
                              
                           
                           ¯
                        
                      (the complement of 
                        
                           
                              P
                           
                           
                              0
                           
                        
                     ). For 
                        0
                        ≤
                        i
                        ,
                        j
                        ≤
                        3
                     , compute 
                        
                           
                              U
                           
                           
                              i
                              j
                           
                        
                        =
                        
                           
                              
                                 
                                    P
                                 
                                 
                                    i
                                 
                              
                              ⊕
                              −
                              
                                 
                                    P
                                 
                                 
                                    j
                                 
                              
                           
                           ¯
                        
                     , where 
                        ⊕
                      denotes the Minkowski sum and 
                        −
                        P
                        =
                        
                           {
                           −
                           p
                           |
                           p
                           ∈
                           P
                           }
                        
                     . For 
                        1
                        ≤
                        i
                        ,
                        j
                        ≤
                        3
                     , compute 
                        
                           
                              V
                           
                           
                              i
                              j
                           
                        
                        =
                        
                           
                              U
                           
                           
                              i
                              j
                           
                        
                        ∩
                        
                           (
                           −
                           
                              
                                 U
                              
                              
                                 0
                                 i
                              
                           
                           ⊕
                           
                              
                                 U
                              
                              
                                 0
                                 j
                              
                           
                           )
                        
                     . Compute 
                        
                           
                              V
                           
                           
                              123
                           
                        
                        =
                        
                           
                              V
                           
                           
                              12
                           
                        
                        ⊕
                        
                           
                              V
                           
                           
                              23
                           
                        
                      and 
                        
                           
                              W
                           
                           
                              13
                           
                        
                        =
                        
                           
                              V
                           
                           
                              13
                           
                        
                        ∩
                        
                           
                              V
                           
                           
                              123
                           
                        
                     . If 
                        
                           
                              W
                           
                           
                              13
                           
                        
                      is empty, report that no solution exists. Otherwise, pick 
                        
                           
                              t
                           
                           
                              13
                           
                        
                        ∈
                        
                           
                              W
                           
                           
                              13
                           
                        
                     . Compute 
                        
                           
                              V
                           
                           
                              01
                           
                        
                        =
                        
                           
                              U
                           
                           
                              01
                           
                        
                        ∩
                        
                           (
                           
                              
                                 U
                              
                              
                                 03
                              
                           
                           −
                           
                              
                                 t
                              
                              
                                 13
                              
                           
                           )
                        
                      and 
                        
                           
                              W
                           
                           
                              12
                           
                        
                        =
                        
                           
                              V
                           
                           
                              12
                           
                        
                        ∩
                        
                           (
                           −
                           
                              
                                 V
                              
                              
                                 23
                              
                           
                           +
                           
                              
                                 t
                              
                              
                                 13
                              
                           
                           )
                        
                        ∩
                        
                           (
                           −
                           
                              
                                 V
                              
                              
                                 01
                              
                           
                           ⊕
                           
                              
                                 U
                              
                              
                                 02
                              
                           
                           )
                        
                     . Pick 
                        
                           
                              t
                           
                           
                              12
                           
                        
                        ∈
                        
                           
                              W
                           
                           
                              12
                           
                        
                     . Compute 
                        
                           
                              W
                           
                           
                              01
                           
                        
                        =
                        
                           
                              V
                           
                           
                              01
                           
                        
                        ∩
                        
                           (
                           
                              
                                 U
                              
                              
                                 02
                              
                           
                           −
                           
                              
                                 t
                              
                              
                                 12
                              
                           
                           )
                        
                     . Pick 
                        
                           
                              t
                           
                           
                              1
                           
                        
                        ∈
                        
                           
                              W
                           
                           
                              01
                           
                        
                     . Set 
                        
                           
                              t
                           
                           
                              2
                           
                        
                        =
                        
                           
                              t
                           
                           
                              1
                           
                        
                        +
                        
                           
                              t
                           
                           
                              12
                           
                        
                      and 
                        
                           
                              t
                           
                           
                              3
                           
                        
                        =
                        
                           
                              t
                           
                           
                              1
                           
                        
                        +
                        
                           
                              t
                           
                           
                              13
                           
                        
                     .

We implemented the packing algorithm and geometric rounding using exact predicate evaluation. Input parameters are double floats. Derived parameters, such as Minkowski sum vertices and 
                        v
                        +
                        λ
                        
                           
                              v
                           
                           
                              ′
                           
                        
                      in Step 7 of the robustness algorithm, are rational functions of the input parameters. We evaluate predicates using floating point interval arithmetic. If the interval contains zero, we re-evaluate with 
                        p
                        =
                        212
                      bit arithmetic, using the MPFR  [11] extended precision package. If that interval contains zero, we repeatedly double 
                        p
                      until the sign is determined. The forthcoming paper proves that 
                        
                           O
                        
                        
                           (
                           log
                           n
                           )
                        
                      bits of precision are required in the worst case.

We perform the perturbations in Steps 1 and 3 using floating point arithmetic because 
                        δ
                      is much larger than the rounding unit. Before running the algorithm for Step 7, we test if simply setting every 
                        
                           
                              λ
                           
                           
                              s
                              t
                           
                        
                        =
                        
                           
                              δ
                           
                           
                              2
                           
                        
                      results in a valid polyhedron. The test almost always succeeds and its running time is negligible compared to that of the algorithm.

We tested a form of simplification, called pruning, in which short edges are removed from the output of each operation. We collapse edges whose length is less than 
                        δ
                      and that satisfy standard boundary topology constraints  [12]. Although pruning can introduce invalidity, we handle it just like invalidity due to rounding and perturbation.

We computed the smallest container for all triples drawn from three polyhedra: a box with 12 triangles, a glacier with 32 triangles, and an approximate sphere with 1024 triangles (Fig. 8
                     ). The geometric rounding algorithm (Section  3.1) uses 
                        δ
                        =
                        
                           
                              2
                           
                           
                              −
                              26
                           
                        
                        ≈
                        1
                        
                           
                              0
                           
                           
                              −
                              8
                           
                        
                      and 
                        
                           
                              δ
                           
                           
                              2
                           
                        
                        =
                        
                           
                              2
                           
                           
                              −
                              53
                           
                        
                        ≈
                        1
                        
                           
                              0
                           
                           
                              −
                              16
                           
                        
                     . Table 1
                      shows the results. The running times are for an Intel Core 2 Duo and are averaged over the 20–25 iterations of the bisection search. The running time is roughly linear in the sum of the output sizes of the cascaded operations. We approximate this sum with its dominant term: the number of faces 
                        f
                      in the subdivision of 
                        
                           
                              W
                           
                           
                              13
                           
                        
                     . Without pruning, the ratio 
                        
                           
                              n
                           
                           
                              1
                           
                        
                        =
                        
                           
                              10
                           
                           
                              4
                           
                        
                        
                           
                              t
                           
                           
                              1
                           
                        
                        /
                        
                           
                              f
                           
                           
                              1
                           
                        
                      is between 1.1 and 4.5. Pruning decreases this ratio by 45% on average.

@&#CONCLUSION@&#

We have presented a geometric rounding algorithm for robustly implementing cascaded operations on polyhedra. We bound bit-complexity growth and prevent degeneracy by rounding and perturbing the input to each operation. We remove any resulting invalidity and obtain a polyhedron that is close to the input. We demonstrate that our algorithm is fast and accurate by implementing a packing algorithm and applying it to highly degenerate problems, using a perturbation that is negligible with respect to standard manufacturing tolerances.

We round the input to each step of a cascaded algorithm, whereas prior work rounds the output (Section  2). The output of the final operation still has the high precision resulting from a single operation. If the final output is the input of another real-RAM algorithm, that algorithm must also use our geometric rounding algorithm. If the final output is the input to a floating point algorithm, such as a finite-element solver, one can round our output to floating point just like any other floating point algorithm.

One research direction is geometric rounding of an unbounded number of cascaded operations. A natural candidate is Daniels and Milenkovic’s [13] generalization of Avnaim and Boissonnat’s  [10] algorithm from three parts to any number of parts. Another research direction is to extend geometric rounding to CSG and NURBS models.

@&#ACKNOWLEDGMENTS@&#

Sacks is supported by NSF grant CCF-0904832. Milenkovic is supported by NSF grant CCF-0904707.

@&#REFERENCES@&#

