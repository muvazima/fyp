@&#MAIN-TITLE@&#Automotive fuel cell sloshing under temporally and spatially varying high acceleration using GPU-based Smoothed Particle Hydrodynamics (SPH)

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A Smoothed Particle Hydrodynamics model for automotive fuel sloshing is proposed.


                        
                        
                           
                           The model is implemented using Graphics Processing Units (GPUs).


                        
                        
                           
                           Attention is paid to computational performance ensuring usefulness within industry.


                        
                        
                           
                           Compensated summation is employed to maintain numerical accuracy.


                        
                        
                           
                           Simulation results are favourably compared against real-world sloshing data.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Smoothed Particle Hydrodynamics (SPH)

Sloshing

Fuel cell

Motorsport

GPU

CUDA

@&#ABSTRACT@&#


               
               
                  Understanding how fuel sloshes in a fuel cell, as a vehicle races around a circuit, is an important but mostly unexplored factor when designing fuel containment systems. Cell designs are based on knowledge of how liquids slosh in other containers, with the design and placement of structures, such as weirs, based on engineering judgement.
                  This work aims to provide better understanding for this difficult problem with a view to improve future designs. A Graphics Processing Unit (GPU) based Smoothed Particle Hydrodynamics (SPH) model is presented to simulate the fuel sloshing problem, with results from a simplified and real fuel cell geometry shown and compared against real data recorded in a vehicle. The vehicle motion and accelerations are included in the SPH simulations using a body force within the momentum equation. Results show good agreement between the simulation and the real fuel movement, with bulk motion captured well for accelerations up to 5 times gravity.
                  Focus is placed on the practicality of the method for use as part of an industrial design process, therefore the amount of time needed to compute results is considered throughout. Computational performance is found to be within acceptable limits, while numerical accuracy is actively considered through the use of Kahan compensated summation. It is concluded that the model is successful in capturing the necessary fluid dynamics for it to be useful in fuel cell design. It is expected that the method will provide insight into current cell designs and highlight where improvements can be made.
               
            

@&#INTRODUCTION@&#

Understanding fuel tank sloshing in high-end competitive motorsport is currently limited. While vehicle fuel systems (from containment to transport mechanisms) receive careful design, knowledge of violent sloshing motion due to braking, cornering and acceleration on the efficacy of the system is still mostly based on engineering judgement. This is primarily due to laboratory analysis of the motion of fuel contained within a vehicle cornering at up to five times gravity being a difficult, and therefore expensive, problem. Conventional computational fluid dynamics (CFD) solvers used in industry are unable to capture the complexity of the physics involved such as violent free-surface flow, however the Lagrangian technique Smoothed Particle Hydrodynamics (SPH) has been shown to be able to capture sloshing problems well [1–7]. This work looks to form better understanding of fuel sloshing in a cell under highly varying accelerations, using SPH simulations accelerated on a Graphics Processing Unit (GPU), along with quantitative data obtained from video footage recorded within a fuel cell (henceforth cell).

Cells used in high performance automotive vehicles, such as those which take part in motorsport, follow designs which have evolved from simple enclosures to geometries constructed from materials such as Kevlar. They include complex fluid transport mechanisms, combined with baffles and scavenging techniques, to produce a containment system designed to force fuel towards the point where it is extracted for use by the engine. Despite this complexity, little work has been done to understand how these designs control the flow of fuel during vehicle motion.

Simulation of this problem using mesh-based Eulerian CFD techniques is difficult as it is expected the fuel will form complex surfaces, such as breaking waves, and that an initial volume will separate into multiple discrete volumes due to the interference of structures within the cell. The range of physical processes involved is also arguably beyond the capability of many commercial CFD solvers as, due to the complex geometry of the boundaries and violent forces from motion, simulated fluid must be able to follow complex bounded paths due to high acceleration.

The Lagrangian SPH method has long been considered a potential option for solving this type of problem. However, in order to capture important fluid detail, such as whether it is trapped by a structure within the cell, the simulation needs to be in three dimensions and include enough particles to represent the fluid motion accurately. Simulations also need to take place over long time-scales, with durations of over a minute likely, whilst still capturing phenomena occurring in a fraction of a second. This leads to a computational demand that cannot realistically be tackled by normal high performance computing (HPC) resources within a time frame that is suitable for industrial application.

High accelerations also pose difficulties to current SPH methodologies, particularly the boundary conditions. Bounding particles with high velocities that rapidly change direction can only be achieved as long as the time step taken within the simulation is sufficiently small such that their interaction with the boundary is captured. This creates not only computational demand, but also requires that the software implementation and SPH algorithms are sufficiently robust to maintain numerical stability at small time steps. In cases where the time needed to compute results is a secondary consideration, a solution to this problem is to use algorithms which are naturally more stable but introduce greater computational costs. However, when the focus is on producing an accurate simulation from which engineering decisions can be made but can still be computed in a reasonable time, this option becomes less appropriate. Instead the challenge is to find ways to make less computationally intensive methods, such as simple boundary conditions or lower order integration techniques, fit for purpose.

The recent development of general purpose computing on GPUs (GPGPU) and its subsequent application to the SPH method [8–10] has led to simulations involving large numbers of particles (of the order of 
                        
                           10
                           ×
                           
                              
                                 10
                              
                              
                                 6
                              
                           
                        
                     ) able to be computed on GPU equipped workstations [11]. This technological advancement has rendered SPH a suitable solution to the fuel sloshing problem, as models with appropriate numbers of particles can be calculated in time scales suitable for the industrial design process. This also partially addresses the problem of maintaining simulation stability at small time steps, due to the fact that more simulation steps can be calculated in less time. However, careful selection of methods and determination of suitable governing parameters is needed, as the use of GPU based programming focused on computational performance raises new problems associated with numerical accuracy, i.e. using fast math libraries or the fact that using double precision floating point operations to overcome rounding errors is a less viable option due to the significant drop in performance when compared to single precision operations. With that aim, this work uses the open-source GPU accelerated DualSPHysics software package [8] by applying its existing formulations to the problem and developing its algorithms where necessary.

The work presented herein shows that the classical weakly-compressible SPH method, combined with a simple boundary condition and physical approximations, such as the artificial viscosity scheme [12] and Shepard density filter [13], is able to capture the bulk motion of fuel within a complex cell while it is subjected to temporally and spatially varying forces of up to five times gravity. Applied accelerations are captured using an inertial measurement unit (IMU) and comparison is drawn against real video footage of fuel sloshing in the cell, with a good correlation between simulation and reality found.

The use of GPGPU programming to implement the model is also shown to be an effective solution for SPH, as it allows the design engineer to iterate their own simulations on a private workstation, rather than relying on the more traditional industrial work-flow of the dedicated CFD team of engineers paired with an expensive many-processor HPC resource. In reducing the time needed to simulate an SPH model from a few days to a few hours and combined with the powerful pre- and post-processing tools of DualSPHysics, it is shown that SPH can be utilised within an engineering environment that relies on rapid prototyping.

This paper is structured as follows, the basic fuel cell arrangement is described, then the SPH methodology is introduced, followed by a description of the GPU implementation used. Simulation results using a simplified cell geometry, as well as fluid level results and computational run-times are then presented and discussed. Finally, conclusions are drawn and future developments outlined.

Fuel cells used in motorsport are complex systems which transport fuel to ensure the engine has a constant supply, requiring containment and control of flow as the fuel sloshes due to violent movement. This is currently achieved using physical barriers such as baffles, combined with both passive and active fuel transport mechanisms such as pumps or one-way valves. To add to design complexity, some types of motorsport have requirements that the amount of fuel held in the vehicle at any one time is tightly controlled, with regulations such as a minimum quantity of fuel remaining in a specific portion of the cell at the end of a race.

With these considerations, a detailed understanding of the hydrodynamics of the fuel during typical racing conditions becomes a fundamental criterion for informed design of the cell. Knowledge of this detail is currently limited and careful redesign of a cell could result in notable performance improvements in the modern motorsport vehicle. There is then potential that these advancements can filter down to more typical road-going vehicles.

Due to confidentiality it is impossible to show the geometry of the actual fuel cell, which also includes visualisations of simulated flow compared with in-tank video footage. For this reason, a simplified cell geometry is used throughout the majority of the results for illustrative purposes and any important differences between the simplified cell and actual cell described. In Section 5.3 we present comparisons of the computed fuel levels with those measured in the real cell.

While the exact details of cell designs are kept confidential within the motorsport industry, it is possible to describe the principles of design using a simplification of the current technology. Fig. 1
                         shows the main components of a design, using a simplified geometry that shows the relevant portion of a cell, with some intricate detail removed. While numerical results in Section 5.3 are obtained from simulations performed using a real cell design, the same key design points remain in the simplified variant, in the form of a central obstruction and appropriate dimensions. The origin of the coordinate system should be considered to be the geometric centre of the cell, found according to the box which bounds it in its entirety.

The cell is split into distinct areas in order to impede the momentum of the fuel; only one of these areas is shown here. This design introduces an interesting complexity in that it is necessary to ensure that fuel is constantly being forced between the separate areas of the cell in order to replenish fuel collected from the final drain point in the bottom-most cell. To ensure that the points of fuel transport are always supplied, even when it is violently sloshing, various forms of obstructions are utilised (which are not shown in the simplified design for confidentiality reasons). It is the optimisation of these designs which is of key interest.

To investigate obstruction effectiveness, be that placement, dimension or shape, it is necessary to iterate many subtly different models and investigate how well each design copes under identical acceleration histories. This design requirement makes SPH simulations accelerated on GPUs important and valuable (avoiding physical model testing), where run times are reduced to the order of hours rather than days.

These simulations of sloshing fuel presented herein will concentrate on only one area of the cell and assume no fuel moves between adjacent cells. With the aim of validating SPH as a design tool, focus is placed on fundamental results, such as fluid levels compared to those recorded in a real cell under spatial and temporal gravity changes of up to 5g where g is gravity. This will enable the scheme to be applied in a practical manner for the design process.

SPH is a meshless Lagrangian method in which computation points are particles that move according to a set of governing laws. Each particle has an associated smoothing length, h that dictates which particles are its neighbours. The benefits of a Lagrangian CFD method when compared to an Eulerian one is that complex boundaries can be represented without the need for time consuming pre-processing steps, such as mesh generation, and nonlinear flow phenomena can be captured inherently. Disadvantages include problems introduced by representing a natural continuum using a discontinuous discrete method and high computational demand.

The majority of motorsport vehicles are restricted to the use of high-grade petroleum. As refined petrol is considered, in rheological terms, to be a Newtonian fluid [14], the formulations used here aim to solve a discretised variant of the Navier–Stokes equations for Newtonian fluid flow, in order to conserve momentum, mass and energy for each particle in the system.

The equation for the conservation of momentum in Lagrangian form can be written as
                        
                           (1)
                           
                              
                                 
                                    D
                                    
                                       
                                          v
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    Dt
                                 
                              
                              =
                              -
                              
                                 
                                    1
                                 
                                 
                                    ρ
                                 
                              
                              ∇
                              P
                              +
                              
                                 
                                    Θ
                                 
                                 
                                    →
                                 
                              
                              +
                              
                                 
                                    f
                                 
                                 
                                    →
                                 
                              
                           
                        
                     where 
                        
                           
                              
                                 D
                                 
                                    
                                       v
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 Dt
                              
                           
                        
                      represents the rate of change of velocity at a point in a continuum field, ρ is the fluid density, P the pressure and 
                        
                           
                              
                                 f
                              
                              
                                 →
                              
                           
                        
                      additional external forces such as gravity. Finally 
                        
                           
                              
                                 Θ
                              
                              
                                 →
                              
                           
                        
                      represents a diffusion term that incorporates the effects of viscosity into the model. SPH is based on the approximation of a field value by a weighted summation of neighbouring particles [15]. The model presented here is weakly compressible in nature and utilises the common artificial viscosity scheme [12] in place of 
                        
                           
                              
                                 Θ
                              
                              
                                 →
                              
                           
                        
                     , the conservation of momentum equation can therefore be re-written in discrete SPH form as
                        
                           (2)
                           
                              
                                 
                                    D
                                    
                                       
                                          
                                             
                                                v
                                             
                                             
                                                →
                                             
                                          
                                       
                                       
                                          a
                                       
                                    
                                 
                                 
                                    Dt
                                 
                              
                              =
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       b
                                    
                                 
                              
                              
                                 
                                    m
                                 
                                 
                                    b
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   b
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ρ
                                                
                                                
                                                   b
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       +
                                       
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   a
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ρ
                                                
                                                
                                                   a
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       +
                                       
                                          
                                             Π
                                          
                                          
                                             ab
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    ∇
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    W
                                 
                                 
                                    ab
                                 
                              
                              +
                              
                                 
                                    f
                                 
                                 
                                    →
                                 
                              
                           
                        
                     where subscripts a and b denote particles, 
                        
                           
                              
                                 v
                              
                              
                                 →
                              
                           
                        
                      the velocity, P pressure, ρ density, m mass, 
                        
                           
                              
                                 W
                              
                              
                                 ab
                              
                           
                        
                      a distance based kernel function (in this case a cubic spline method) and 
                        
                           
                              
                                 Π
                              
                              
                                 ab
                              
                           
                        
                      the artificial viscosity term. 
                        
                           
                              
                                 Π
                              
                              
                                 ab
                              
                           
                        
                      can be defined as
                        
                           (3)
                           
                              
                                 
                                    Π
                                 
                                 
                                    ab
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      -
                                                      α
                                                      
                                                         
                                                            
                                                               
                                                                  c
                                                               
                                                               
                                                                  ‾
                                                               
                                                            
                                                         
                                                         
                                                            ab
                                                         
                                                      
                                                      
                                                         
                                                            μ
                                                         
                                                         
                                                            ab
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  ρ
                                                               
                                                               
                                                                  ‾
                                                               
                                                            
                                                         
                                                         
                                                            ab
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                if
                                                
                                                
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                         
                                                            →
                                                         
                                                      
                                                   
                                                   
                                                      ab
                                                   
                                                
                                                ·
                                                
                                                   
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            →
                                                         
                                                      
                                                   
                                                   
                                                      ab
                                                   
                                                
                                                <
                                                0
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                if
                                                
                                                
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                         
                                                            →
                                                         
                                                      
                                                   
                                                   
                                                      ab
                                                   
                                                
                                                ·
                                                
                                                   
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            →
                                                         
                                                      
                                                   
                                                   
                                                      ab
                                                   
                                                
                                                >
                                                0
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     where 
                        
                           
                              
                                 μ
                              
                              
                                 ab
                              
                           
                           =
                           
                              
                                 h
                                 
                                    
                                       
                                          
                                             v
                                          
                                          
                                             →
                                          
                                       
                                    
                                    
                                       ab
                                    
                                 
                                 ·
                                 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             →
                                          
                                       
                                    
                                    
                                       ab
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             →
                                          
                                       
                                    
                                    
                                       ab
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 
                                    
                                       η
                                    
                                    
                                       2
                                    
                                 
                              
                           
                        
                     , 
                        
                           h
                        
                      is the smoothing length, 
                        
                           
                              
                                 
                                    
                                       r
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 ab
                              
                           
                           =
                           
                              
                                 
                                    
                                       r
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 a
                              
                           
                           -
                           
                              
                                 
                                    
                                       r
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 b
                              
                           
                        
                      and 
                        
                           
                              
                                 
                                    
                                       v
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 ab
                              
                           
                           =
                           
                              
                                 
                                    
                                       v
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 a
                              
                           
                           -
                           
                              
                                 
                                    
                                       v
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 b
                              
                           
                        
                      with 
                        
                           
                              
                                 
                                    
                                       r
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 k
                              
                           
                        
                      being the position and 
                        
                           
                              
                                 
                                    
                                       v
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 k
                              
                           
                        
                      the velocity that correspond to particle k (a or b). 
                        
                           
                              
                                 
                                    
                                       ρ
                                    
                                    
                                       ‾
                                    
                                 
                              
                              
                                 ab
                              
                           
                           =
                           
                              
                                 
                                    
                                       ρ
                                    
                                    
                                       a
                                    
                                 
                                 +
                                 
                                    
                                       ρ
                                    
                                    
                                       b
                                    
                                 
                              
                              
                                 2
                              
                           
                        
                      the mean density, 
                        
                           
                              
                                 η
                              
                              
                                 2
                              
                           
                           =
                           0.01
                           
                              
                                 h
                              
                              
                                 2
                              
                           
                           ,
                           
                           
                              
                                 
                                    
                                       c
                                    
                                    
                                       ‾
                                    
                                 
                              
                              
                                 ab
                              
                           
                        
                      is the average speed of sound for particles a and b and α is a problem specific parameter.

The artificial viscosity scheme and cubic spline kernel [16] function have both been chosen as they are considered typical options for an SPH simulation. In this simulation it is important that the effects of viscosity are well defined and although alternative schemes (i.e. laminar [17] for low Reynolds number simulations) have sometimes been shown to produce more accurate results, the effects of the artificial scheme are better documented and almost as importantly the method introduces less computational overhead. Similarly, the cubic spline kernel has been chosen for the same reasons, as while higher order alternatives such as the Wendland quintic kernel [18,19] have arguably been shown to capture some fluid phenomena better, the characteristics of the cubic kernel is better known and therefore more applicable to an industrial scenario.

As the mass of each particle in the simulation remains constant but the fluid is considered to be weakly-compressible, changes in density are calculated according to the conservation of mass equation
                        
                           (4)
                           
                              
                                 
                                    D
                                    ρ
                                 
                                 
                                    Dt
                                 
                              
                              =
                              -
                              ρ
                              ∇
                              ·
                              
                                 
                                    v
                                 
                                 
                                    →
                                 
                              
                           
                        
                     which in SPH form can be expressed as [12]
                     
                        
                           (5)
                           
                              
                                 
                                    D
                                    
                                       
                                          ρ
                                       
                                       
                                          a
                                       
                                    
                                 
                                 
                                    Dt
                                 
                              
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       b
                                    
                                 
                              
                              
                                 
                                    m
                                 
                                 
                                    b
                                 
                              
                              
                                 
                                    
                                       
                                          v
                                       
                                       
                                          ab
                                       
                                    
                                 
                                 
                                    →
                                 
                              
                              ·
                              
                                 
                                    ∇
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    W
                                 
                                 
                                    ab
                                 
                              
                           
                        
                     The model is closed using an equation of state which relates pressure to density [20]
                     
                        
                           (6)
                           
                              
                                 
                                    P
                                 
                                 
                                    a
                                 
                              
                              =
                              B
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               ρ
                                                            
                                                            
                                                               a
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               ρ
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             γ
                                          
                                       
                                       -
                                       1
                                    
                                 
                              
                           
                        
                     where γ is an artificial polytropic index of the fluid with a typical value of 7, 
                        
                           B
                           =
                           
                              
                                 
                                    
                                       c
                                    
                                    
                                       0
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       ρ
                                    
                                    
                                       0
                                    
                                 
                              
                              
                                 γ
                              
                           
                        
                      where 
                        
                           
                              
                                 c
                              
                              
                                 0
                              
                           
                        
                      is the speed of sound at the reference density 
                        
                           
                              
                                 ρ
                              
                              
                                 0
                              
                           
                        
                      which equals 1000kg/m3 for the fluid considered here. Note that the speed of sound in SPH simulations is typically significantly lower than the real speed of sound. If the actual value of the speed of sound was used then the time step required would be too small for the computational time needed to be realistic. A value for 
                        
                           
                              
                                 c
                              
                              
                                 0
                              
                           
                        
                      is selected such that the simulation remains stable and waves are able to propagate as expected, while the size of the time step taken is not too small. With the application involving large accelerations, the selection of 
                        
                           
                              
                                 c
                              
                              
                                 0
                              
                           
                        
                      is an important factor as it is key to finding the balance between computational time and simulation stability.

The value for the speed of sound for each particle can vary from the initial reference value 
                        
                           
                              
                                 c
                              
                              
                                 0
                              
                           
                        
                      as the simulation evolves, this is because the formulation employed in DualSPHysics is weakly-compressible, therefore the density (ρ) of each particle can have a weak variation from the reference value 
                        
                           
                              
                                 ρ
                              
                              
                                 0
                              
                           
                        
                      (typically around 1%). This density variation means the speed of sound must also vary, a current value for the speed of sound 
                        
                           
                              
                                 c
                              
                              
                                 ab
                              
                           
                        
                      for particle a is found according to 
                        
                           
                              
                                 c
                              
                              
                                 a
                              
                           
                           =
                           
                              
                                 
                                    
                                       ∂
                                       
                                          
                                             P
                                          
                                          
                                             a
                                          
                                       
                                    
                                    
                                       ∂
                                       
                                          
                                             ρ
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                              
                           
                           =
                           
                              
                                 c
                              
                              
                                 0
                              
                           
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ρ
                                                
                                                
                                                   a
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ρ
                                                
                                                
                                                   0
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 3
                              
                           
                        
                     .

The value for the smoothing length h is also an important factor for the same reasons. Should the smoothing length be too small then the kernel support for each particle will be insufficient to capture the physics required, while if it is too large the number of particle interactions per time step can become prohibitively large. There is even more complexity to consider for a GPU implementation as altering the value of h also alters the underlying data structures associated with neighbour searching, which in turn has a direct effect on how a problem parallelises [8]. The value of h used in the simulations herein is therefore calculated according to a target value of 
                        
                           
                              
                                 h
                              
                              
                                 dp
                              
                           
                           =
                           1.3
                        
                     , where dp is the particle spacing. This choice of smoothing length follows previous works on tank sloshing and wave propagation using SPH [21,22,11,23], where values between 
                        
                           
                              
                                 h
                              
                              
                                 dp
                              
                           
                           =
                           1.3
                        
                      and 
                        
                           
                              
                                 h
                              
                              
                                 dp
                              
                           
                           =
                           1.5
                        
                      are used in conjunction with the cubic spline kernel function. The value of 
                        
                           
                              
                                 h
                              
                              
                                 dp
                              
                           
                           =
                           1.3
                        
                      has been chosen here in order to minimise computational demand as far as possible. It should be noted that the kernel support provided by this smoothing length may not be suitable in every case and future work exploring whether the simulation is suitably improved (when balanced against the increased computational overhead) by increasing this distance should be undertaken.

The size of each time step is calculated according to 
                        
                           Δ
                           t
                           =
                           C
                           (
                           min
                           
                              
                                 
                                    Δ
                                    
                                       
                                          t
                                       
                                       
                                          f
                                       
                                    
                                    ,
                                    Δ
                                    
                                       
                                          t
                                       
                                       
                                          cv
                                       
                                    
                                 
                              
                           
                           )
                        
                      
                     [24], where C is the Courant–Friedrichs–Lewy (CFL) number, 
                        
                           Δ
                           
                              
                                 t
                              
                              
                                 f
                              
                           
                        
                      is based on the force per unit mass 
                        
                           |
                           
                              
                                 f
                              
                              
                                 a
                              
                           
                           |
                        
                     
                     
                        
                           (7)
                           
                              Δ
                              
                                 
                                    t
                                 
                                 
                                    f
                                 
                              
                              =
                              min
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   h
                                                
                                                
                                                   |
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         a
                                                      
                                                   
                                                   |
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     and 
                        
                           Δ
                           
                              
                                 t
                              
                              
                                 cv
                              
                           
                        
                      is based on the speed of sound and viscous scheme
                        
                           (8)
                           
                              Δ
                              
                                 
                                    t
                                 
                                 
                                    cv
                                 
                              
                              =
                              
                                 
                                    min
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             h
                                          
                                          
                                             max
                                             
                                                
                                                   (
                                                   
                                                      
                                                         c
                                                      
                                                      
                                                         s
                                                      
                                                   
                                                   )
                                                
                                                
                                                   b
                                                
                                             
                                             +
                                             
                                                
                                                   
                                                      
                                                         
                                                            h
                                                            
                                                               
                                                                  
                                                                     
                                                                        v
                                                                     
                                                                     
                                                                        →
                                                                     
                                                                  
                                                               
                                                               
                                                                  ab
                                                               
                                                            
                                                            ·
                                                            
                                                               
                                                                  
                                                                     
                                                                        r
                                                                     
                                                                     
                                                                        →
                                                                     
                                                                  
                                                               
                                                               
                                                                  ab
                                                               
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        r
                                                                     
                                                                     
                                                                        →
                                                                     
                                                                  
                                                               
                                                               
                                                                  ab
                                                               
                                                               
                                                                  2
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     where 
                        
                           
                              
                                 c
                              
                              
                                 s
                              
                           
                        
                      is the currently calculated sound speed.

To advance the simulation in time the scheme used here is based on the velocity-Verlet algorithm [25] and calculates position 
                        
                           
                              
                                 
                                    
                                       x
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 a
                              
                           
                        
                     , velocity 
                        
                           
                              
                                 
                                    
                                       v
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 a
                              
                           
                        
                      and density 
                        
                           
                              
                                 ρ
                              
                              
                                 a
                              
                           
                        
                     , at time step n, according to
                        
                           (9)
                           
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    a
                                 
                                 
                                    n
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    a
                                 
                                 
                                    n
                                 
                              
                              +
                              Δ
                              t
                              
                                 
                                    
                                       
                                          D
                                          
                                             
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      →
                                                   
                                                
                                             
                                             
                                                a
                                             
                                          
                                       
                                       
                                          Dt
                                       
                                    
                                 
                                 
                                    n
                                 
                              
                              +
                              0.5
                              Δ
                              
                                 
                                    t
                                 
                                 
                                    2
                                 
                              
                              
                                 
                                    
                                       
                                          D
                                          
                                             
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      →
                                                   
                                                
                                             
                                             
                                                a
                                             
                                          
                                       
                                       
                                          Dt
                                       
                                    
                                 
                                 
                                    n
                                 
                              
                           
                        
                     
                     
                        
                           (10)
                           
                              
                                 
                                    
                                       
                                          v
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    a
                                 
                                 
                                    n
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          v
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    a
                                 
                                 
                                    n
                                    -
                                    1
                                 
                              
                              +
                              2
                              Δ
                              t
                              
                                 
                                    
                                       
                                          D
                                          
                                             
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      →
                                                   
                                                
                                             
                                             
                                                a
                                             
                                          
                                       
                                       
                                          Dt
                                       
                                    
                                 
                                 
                                    n
                                 
                              
                           
                        
                     
                     
                        
                           (11)
                           
                              
                                 
                                    ρ
                                 
                                 
                                    a
                                 
                                 
                                    n
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    ρ
                                 
                                 
                                    a
                                 
                                 
                                    n
                                    -
                                    1
                                 
                              
                              +
                              2
                              Δ
                              t
                              
                                 
                                    
                                       
                                          D
                                          
                                             
                                                ρ
                                             
                                             
                                                a
                                             
                                          
                                       
                                       
                                          Dt
                                       
                                    
                                 
                                 
                                    n
                                 
                              
                           
                        
                     where 
                        
                           
                              
                                 D
                                 
                                    
                                       
                                          
                                             r
                                          
                                          
                                             →
                                          
                                       
                                    
                                    
                                       a
                                    
                                 
                              
                              
                                 Dt
                              
                           
                        
                      represents a velocity contribution from particle a and its neighbouring particles [26]. In the velocity Verlet algorithm, the velocity and density updates in Eqs. (9) and (10) are decoupled from position in Eq. (9). Hence, every 25 time steps, these equations must be recoupled [27] using
                        
                           (12)
                           
                              
                                 
                                    
                                       
                                          v
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    a
                                 
                                 
                                    n
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          v
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    a
                                 
                                 
                                    n
                                 
                              
                              +
                              Δ
                              t
                              
                                 
                                    
                                       
                                          D
                                          
                                             
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      →
                                                   
                                                
                                             
                                             
                                                a
                                             
                                          
                                       
                                       
                                          Dt
                                       
                                    
                                 
                                 
                                    n
                                 
                              
                           
                        
                     
                     
                        
                           (13)
                           
                              
                                 
                                    ρ
                                 
                                 
                                    a
                                 
                                 
                                    n
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    ρ
                                 
                                 
                                    a
                                 
                                 
                                    n
                                 
                              
                              +
                              Δ
                              t
                              
                                 
                                    
                                       
                                          D
                                          
                                             
                                                ρ
                                             
                                             
                                                a
                                             
                                          
                                       
                                       
                                          Dt
                                       
                                    
                                 
                                 
                                    n
                                 
                              
                           
                        
                     
                  

The boundary condition is an important consideration as it is the most likely point of failure in this simulation, with particle penetration caused by large accelerations leading to numerical instability and fluid volume loss. Different techniques exist for implementing fixed boundaries within SPH simulations, with no one method being applicable to all scenarios. However, it is important that the method used here be able to handle three-dimensional complex structures and also have a reasonable computational demand. As this work is built around DualSPHysics, the method used is the Dynamic Boundary condition (DBC) [28,29]. While it can be argued that this method does not guarantee particles will not penetrate (e.g. if the time step taken is too large to capture fluid to boundary particle interaction), it can also be said that, due to its simplicity, its computational demand is reasonable and it is more likely to be able to represent a larger number of complex structures than other more specialised methods.

The DBC treats boundary particles as a special case of fluid particles in that their density can vary as given by Eq. (5) but they remain fixed in position because a change in their momentum is not considered. Boundary movement can still be effected using a prescribed motion function. The method also employs a simplified variant of a corrective procedure described by Hughes and Graham [30] in that, following the calculation of the density of a boundary particle, should the value fall below its predefined reference density then the value is reset to 
                           
                              
                                 
                                    ρ
                                 
                                 
                                    0
                                 
                              
                           
                        .

Boundary particles are placed using the same cubic lattice as the initial fluid particle distribution. However, two layers are used in a staggered formation [29] to decrease the chance of fluid particle penetration and their mass decreased accordingly, this is depicted in two-dimensions in Fig. 2
                        .

The particle distribution is calculated using the GenCase pre-processing application, part of the DualSPHysics software package. Vertex data is loaded from an industry standard computer aided design (CAD) file of the cell and then converted to points that are laid out according to a cubic lattice, as shown in Fig. 2. An example of this process can be seen in Fig. 3
                        , which shows the CAD version of the simplified cell geometry next to the resultant particle formation.

The ease that the GenCase pre-processing tool allows industrial CAD designs to be converted to functional SPH boundaries is key to the success of this work as the SPH simulations can be integrated directly into the design framework without the need for specialist knowledge.

Since the particle interaction between boundary and fluid particles occurs according to the same underlying SPH formulation as occurs between two fluid particles, the DBC effectively simulates a non-slip condition. As a result of this, in cases where viscous forces are not considered in the formulation, the technique effectively becomes free-slip in nature, however as the artificial viscosity scheme is used here, the fluid experiences viscous drag against the cell boundary according to the alpha coefficient used in Eq. (3).

In order to simulate the effects of vehicle motion, it is necessary to impart body forces on the SPH particles that represent the accelerations of the vehicle. The SPH method is robust in this regard as external forces can be easily introduced as a body force in term 
                           
                              
                                 
                                    f
                                 
                                 
                                    →
                                 
                              
                           
                         of Eq. (2). In reality the reason that fuel sloshes in this case is due to the relative movement of the cell (which in turn is relative to its position in the vehicle) compared to the fuel. This motion could therefore be achieved by physically moving the boundary particles as the condition in place makes this trivial.

There are some significant issues with using this method here however. Firstly, moving the boundary requires a simulation domain equal to the size of the overall movement required to simulate the recorded accelerations. In the case of a complete lap of a racing circuit, this will likely result in an unfeasibly large computational domain. Realistically the domain extents need to be minimised as much as possible as the DualSPHysics implementation relies on a space partitioned neighbour searching algorithm, which demands that the entire computational domain is initially partitioned into cubes of dimension 
                           
                              2
                              h
                           
                        , where h is the kernel smoothing length. An excessively large domain would mean that the amount of memory required to hold these partitions would be restrictively high, particularly on a GPU. The likelihood of failure at the boundaries is also significantly worse than if they were static as not only are the fluid particles moving at a high velocity, but the boundary particles are also, increasing the possibility that a fluid boundary interaction will be missed. An alternative method is to keep the cell boundaries fixed in place and impart the accelerations on the fluid particles as a body force.

The method used here to impart movement caused by the cell is to accelerate each fluid particle using an imposed external body force. In order to capture all six degrees of freedom, both linear and angular accelerations are applied, with angular accelerations being calculated using a distance based function.

Forces are calculated based on real measurements taken using an IMU, placed at the centre of rotation for the cell as the vehicle travels around a circuit, which is located at the origin of the cell, the geometric centre of the box that bounds it in its entirety. Simulated linear and angular forces at time step n are interpolated from the data for the current simulated time using a linear function between the current step n and previous step 
                           
                              n
                              -
                              1
                           
                        . Linear forces are applied directly, capturing the translation of the cell, while angular forces capture the effects of the cell’s yaw motion only and are therefore only applied in the Z plane.

For a particle i, located at 
                           
                              
                                 
                                    
                                       
                                          X
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    →
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          
                                             X
                                          
                                          
                                             x
                                          
                                       
                                       ,
                                       
                                          
                                             X
                                          
                                          
                                             y
                                          
                                       
                                       ,
                                       
                                          
                                             X
                                          
                                          
                                             z
                                          
                                       
                                    
                                 
                              
                           
                        , where 
                           
                              
                                 
                                    X
                                 
                                 
                                    x
                                 
                              
                              ,
                              
                                 
                                    X
                                 
                                 
                                    y
                                 
                              
                              ,
                              
                                 
                                    X
                                 
                                 
                                    z
                                 
                              
                           
                         are the particle coordinates, the total body force 
                           
                              
                                 
                                    f
                                 
                                 
                                    →
                                 
                              
                           
                         is found according to 
                           
                              
                                 
                                    f
                                 
                                 
                                    →
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    linear
                                 
                              
                              +
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    angular
                                 
                              
                           
                         using
                           
                              (14)
                              
                                 
                                    
                                       f
                                    
                                    
                                       →
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         a
                                                      
                                                      
                                                         x
                                                         ,linear
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         a
                                                      
                                                      
                                                         y
                                                         ,linear
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         a
                                                      
                                                      
                                                         z
                                                         ,linear
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 +
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         a
                                                      
                                                      
                                                         x
                                                         ,angular
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         a
                                                      
                                                      
                                                         y
                                                         ,angular
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         a
                                                      
                                                      
                                                         z
                                                         ,angular
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    linear
                                 
                              
                           
                         is the linear acceleration and 
                           
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    angular
                                 
                              
                           
                         the angular acceleration. This is found using the centre of rotation 
                           
                              
                                 
                                    C
                                 
                                 
                                    →
                                 
                              
                           
                         and input angular and linear accelerations (
                           
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    angular
                                 
                              
                           
                         and 
                           
                              
                                 
                                    
                                       
                                          α
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    linear
                                 
                              
                           
                        ), from which a value for angular and linear velocity (
                           
                              
                                 
                                    ω
                                 
                                 
                                    →
                                 
                              
                           
                         and 
                           
                              
                                 
                                    v
                                 
                                 
                                    →
                                 
                              
                           
                        ) are precalculated. A value for the angular acceleration of each particle i is found in each plane by assuming the cell boundary to be equivalent to a moving frame of reference, this is expressed as
                           
                              (15)
                              
                                 
                                    
                                       
                                          
                                             a
                                          
                                          
                                             →
                                          
                                       
                                    
                                    
                                       angular
                                    
                                 
                                 =
                                 
                                    
                                       α
                                    
                                    
                                       →
                                    
                                 
                                 ×
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      X
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                             
                                                →
                                             
                                          
                                          -
                                          
                                             
                                                C
                                             
                                             
                                                →
                                             
                                          
                                       
                                    
                                 
                                 +
                                 
                                    
                                       ω
                                    
                                    
                                       →
                                    
                                 
                                 ×
                                 
                                    
                                       
                                          
                                             
                                                ω
                                             
                                             
                                                →
                                             
                                          
                                          ×
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               X
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                      
                                                      
                                                         →
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         →
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 +
                                 
                                    
                                       
                                          2
                                          
                                             
                                                ω
                                             
                                             
                                                →
                                             
                                          
                                          ×
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                            
                                                               →
                                                            
                                                         
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         →
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    
                                       
                                          v
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                           
                         is the velocity of particle i (see Leonardi et al. [31]). Calculated forces are imparted as part of 
                           
                              
                                 
                                    f
                                 
                                 
                                    →
                                 
                              
                           
                         in Eq. (2).

Any fractional number that is computed on current hardware will have a result with finite precision, with the result rounded depending on the data type being used (i.e. IEEE 754 single or double precision floating point values) and the operation being performed. Often this lack of precision goes unnoticed as many software applications do not perform operations which propagate error in any real sense, however numerical simulations such as SPH inherently rely on previously computed values at many discrete locations that are separate to each other and offer little chance of calculating system wide error propagation and accounting for it directly.

As the implementation here is designed for high performance and is being executed on a GPU, the code is designed around single precision floating point arithmetic (henceforth floating point). Hence, the simple solution to improve numerical accuracy by increasing the size of the data type to double precision floating point does not apply. While there are scenarios where floating point can exactly represent a sum, namely when both values being added are non-fractional and fall within the storage capabilities of the data type, the majority of an SPH simulation will be computing values based on differences between two variables, i.e. the position in computing kernel derivatives, and therefore the majority of summations have error associated with them, the reader is referred to the work of Monaghan (2005) for a theoretical upper bound for SPH of second order in space [32]. For a sequence of random numbers of set size n, the worst-case propagated error in the result has a root mean square error of 
                           
                              
                                 
                                    n
                                 
                              
                           
                         
                        [33]. In terms of an SPH simulation, situations which involve the summation of large sequences of numbers, where each value is of multiple orders of magnitude larger or smaller, will result in the worst drop in numerical accuracy. This is most likely when the domain extents do not have an origin of zero, or the domain itself is very large; it is also likely in cases involving rapidly changing particle velocities.

In order to improve the level of accuracy in the computed results, instead of performing naive summation, it is possible to employ techniques when summing sets of values which aim to control the level of inaccuracy that is introduced at each stage, whilst introducing only minimal extra computational overhead. While different techniques exist for this purpose, the one used herein is perhaps the best known and referred to as the Kahan summation algorithm [34]. Kahan summation allows a large sequence of values to be summed and for the resultant error in the final sum to be bound by the available precision of the chosen data type and computing hardware. The method is described in pseudocode in Algorithm 1 where it works by assuming a level of error in every calculation in the summation and accounting for it by using a separate variable that recovers both low and high order bits.
                           Algorithm 1
                           Function to perform Kahan summation on a sequence of n values. 
                                 
                                    
                                       
                                       
                                          
                                             
                                                procedure KahanSummation 
                                                
                                                   
                                                      (
                                                      input
                                                      ,
                                                      
                                                      n
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                
                                                   
                                                      sum
                                                      =
                                                      0
                                                   
                                                 
                                                //Final summed value
                                          
                                          
                                             
                                                
                                                
                                                   
                                                      c
                                                      =
                                                      0
                                                   
                                                 
                                                //Running compensation for lost low-order bits
                                          
                                          
                                             
                                                
                                                for 
                                                
                                                   
                                                      i
                                                      =
                                                      0
                                                   
                                                 to 
                                                   
                                                      i
                                                      =
                                                      n
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      a
                                                      =
                                                      input
                                                      [
                                                      i
                                                      ]
                                                      -
                                                      c
                                                   
                                                 
                                                //Subtract c from current value
                                          
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      b
                                                      =
                                                      sum
                                                      +
                                                      a
                                                   
                                                 
                                                //Add a to current sum, low-order bits are lost
                                          
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      c
                                                      =
                                                      (
                                                      b
                                                      -
                                                      sum
                                                      )
                                                      -
                                                      a
                                                   
                                                 
                                                //
                                                   
                                                      b
                                                      -
                                                      sum
                                                   
                                                 recovers high-order bits and 
                                                   
                                                      -
                                                      a
                                                   
                                                 recovers low-order bits
                                          
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      sum
                                                      =
                                                      b
                                                   
                                                 
                                                //Update running summed value
                                          
                                          
                                             
                                                
                                                end for
                                             
                                          
                                          
                                             
                                                
                                                return 
                                                sum
                                             
                                          
                                          
                                             
                                                end procedure
                                             
                                          
                                       
                                    
                                 
                              
                           

Kahan compensation is employed here wherever significant iterative summation occurs and while this cannot compensate for the inherent inaccuracy of single precision floating point representation, or the error introduced using a second-order Verlet integration scheme, it can help to truncate the effects of floating point rounding error, an important consideration when performing a single precision SPH simulation using many particles over an extended period of simulated time.

Full investigation of the effect of using Kahan summation on the convergence of the SPH method is beyond the scope of this work and is therefore not investigated here. However, the manifestation and practical implications of its use can be observed using the performance of the boundary condition in terms of its ability to ensure no particle penetration. To test this, the same 30s simulation was performed twice using the real cell geometry. In order to exacerbate the effect of particle leakage for demonstrative purposes, the simulations were performed at the physically correct location of the cell within the car, normally this would not be the case as the simulation would be centred at a zero origin in order to decrease the effects of numerical rounding. In terms of SPH parameters and computing hardware used, everything was identical during the Kahan enabled run, with the only difference being that Kahan summation was employed during Eqs. (2), (5) and (9) plus (10) and (11) or (12) and (13). The results can be seen in Table 1
                        , which show a marked improvement in the efficacy of the boundary condition when Kahan summation is used, albeit at the expense of extra computational overhead.

As this work is based on the DualSPHysics package, this section aims to provide an overview of the GPU implementation it provides (see [8] for a full description).


                     DualSPHysics provides a GPU based SPH solution using NVIDIA’s Compute Unified Device Architecture (CUDA) GPGPU platform [35]. Unlike many GPU variants of applications that were initially CPU based, the implementation in DualSPHysics does not treat the GPU as an occasional accelerator, where specific functions from the original CPU code are executed on the GPU. Instead the entire application has been redesigned so that the main steps of neighbour list creation, force computation and system update are all performed solely on the GPU until the end of simulation. This is an important distinction as this vastly reduces the amount of data needed to be transferred from the GPU to the host system via the PCI-Express bus, which is commonly the greatest bottleneck in achieving performance improvements using a GPU. Some initial processing is done on the CPU and then all data is transferred to the GPU once, where it then remains and evolves in the GPU’s memory, with a small amount of data only occasionally being passed back to the host to be written to disk. This design can be seen in Fig. 4
                     , which shows the processing pipeline employed for the CPU and GPU portions of the software.

At each of the four stages shown in the GPU portion of Fig. 4 every particle is calculated using a single CUDA thread, of which there can be tens of thousands running simultaneously on modern GPU hardware. This results in SPH simulations requiring significantly less time on a single GPU than would be possible using even significant CPU-based resources, often with speed-ups of up to two orders of magnitude compared to an optimised CPU code. This is due to the effects of massively parallel operation, to which n-body based simulations like SPH are particularly well suited. With complex geometries easy to generate and no requirement for a mesh, this acceleration makes the code attractive to industrial companies to run many repeated simulations to optimise designs.

While it is beyond the scope of this article to provide detailed performance results, the work of Crespo et al. [8] contains detailed metrics comparing the relative performance of an OpenMP based CPU version of the software against the equivalent GPU based version. They show that for a simulation involving one million particles an Intel Core i7 940 CPU (four cores and eight threads) achieves 0.22 simulated time steps per second of computational time, whereas a single NVIDIA GeForce GTX 480 achieves 14.42 simulated steps in the same time frame, demonstrating a speed-up of over 65 times. While not all test cases will show such large speed-ups and direct comparison between CPU and GPU hardware is not simple to quantify, it is clear that GPU technology can significantly reduce the time needed to perform SPH simulations in the context of a shared memory workstation. Values for time-to-solution achieved using the GPU code and OpenMP parallelised CPU code are provided in Section 5.3.

The ultimate goal of this work is to prove the effectiveness of a GPU-based SPH simulation for use in the design process for an automotive fuel cell. Success can therefore be measured in two ways. Firstly, the simulation must adequately capture the bulk motion of the fuel as it sloshes around the cell and secondly, the simulation must be able to be computed in a suitable time frame.

The second measure of success contains a number of ambiguities that must first be better defined. A suitable time frame can be difficult to quantify as the meaning will vary depending on the usage scenario. However, in this case it can be defined as “the simulation should be able to be computed overnight, using workstation grade GPU hardware”, where a design engineer equipped with access to dedicated GPUs will perform alterations to CAD designs during the working day and start SPH simulations of the new designs to be run overnight.

At this stage it is reasonable to state that if the bulk motion of the fuel is found to match that of the real fuel over an extended period then the method is applicable. However, it is not expected that an SPH simulation will capture all of the intricacies of the fluid flow at this stage, since fuel scavenging strategies have not been modelled and the physics specific to fuels have been omitted. For example, fuel generates significant amounts of foam when in motion due to the amount of dissolved air contained in petroleum oils.

The amount of time needed to run the fuel sloshing simulations is an important factor to the success of this work. The aim of this section is not to draw comparison between a CPU variant of the same SPH simulation, rather it is to determine whether the time needed to perform a simulation with a sufficiently large number of particles to capture the bulk fluid motion makes the scheme an appropriate industrial tool.

To determine how many particles are needed to be able to capture the physics necessary to reproduce realistic fuel sloshing, three identical simulations were run using the simplified cell geometry, where the only differences are the initial particle spacing and therefore the number of particles. This convergence study aims to identify the particle spacing that produces a simulation that captures important fluid dynamics whilst still allowing the model to be computed in a reasonable time.


                        Fig. 5
                         shows a side-by-side comparison for runs using three resolutions at the same instant, chosen to show an example of the type of sloshing frequently seen as fluid travels around the central obstruction, while subject to linear and angular acceleration. Three simulations were produced, described in non-dimensional form as 
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                              =
                              
                                 
                                    dp
                                 
                                 
                                    D
                                 
                              
                           
                        , where D is the initial water depth (0.105m) and dp the initial particle spacing. The simulations generated values for 
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                           
                         of 
                           
                              0.07619
                              ,
                              
                              0.04571
                           
                         and 0.038095, creating simulations with 
                           
                              175
                              ,
                              748
                              ,
                              
                              690
                              ,
                              052
                           
                         and 
                           
                              1
                              ,
                              133
                              ,
                              336
                           
                         particles respectively.

Results show that while increasing the number of particles increases the similarity between captured fluid dynamics and recorded real world video footage, as the resolution increases the improvement seen in terms of detail begins to reduce. To decide an appropriate initial particle spacing it is necessary to find a balance between computational time and simulation improvement. The run-times for each of the three simulations, performed on an NVIDIA GeForce GTX 680, can be seen in Table 2
                        .

The results show when the number of particles increases beyond a million, run time on the GeForce GTX 680 becomes prohibitive. Referring back to Section 5 it was defined that a simulation must be able to be completed in one night, which is considered to be 9hours long. While the 13.13hours needed to simulate the number of required seconds of physical time for the case where 
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                              =
                              0.04571
                           
                         is longer than this imposed limit, this particle spacing was found to be the point where fluid mechanics of interest were captured sufficiently. As the real cell geometry produces a simulation with less fluid particles for the same initial fluid levels (the reasons for this are discussed in Section 5.3) and should therefore complete in approximately half the time, this level of particle spacing is considered the best choice given the available processing hardware.

To demonstrate basic success, acceleration data captured using an IMU unit attached to a real motorsport vehicle, travelling around a circuit at speeds appropriate to its type of racing, has been applied to an SPH simulation performed inside the simplified cell first shown in Fig. 1.

In the simulation, gravity is fixed at 
                           
                              {
                              0
                              ,
                              0
                              ,
                              -
                              9.81
                              }
                           
                        
                        m/s and the α value for artificial viscosity in Eq. (3) set to 0.05, the zeroth-order Shepard density filter [13] is applied every 30 time steps. While refined fuel typically has a lower density than water, for these initial tests it is fixed as per water at 1000kg/m3. This case uses a particle spacing that generates a value for 
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                           
                         of 0.04571, resulting in a fluid particle mass of 
                           
                              11.1
                              ×
                              
                                 
                                    10
                                 
                                 
                                    -
                                    5
                                 
                              
                           
                        
                        kg. A value for the smoothing length 
                           
                              h
                              =
                              0.75
                              (
                              
                                 
                                    3
                                 
                              
                              dp
                              )
                           
                         is used, where dp is the particle spacing. The values for the reference speed of sound 
                           
                              
                                 
                                    c
                                 
                                 
                                    0
                                 
                              
                           
                         and fluid compressibility B from Eq. (6) are set at 93.96m/s and 
                           
                              1.2613
                              ×
                              
                                 
                                    10
                                 
                                 
                                    6
                                 
                              
                           
                         respectively and the CFL value used to calculate each variable time step is set at 0.3.

The acceleration data was sampled at a rate of 20Hz and includes lateral (x), longitudinal (y) and vertical (z) linear accelerations and angular acceleration around the vertical (z) axis, centred around the middle of the cell, 30s of data is simulated and can be seen plotted in Fig. 6
                        . As described in Section 3.3, the data is interpolated for use in the simulation according to a linear function in order to find values for time steps that sit between the sampled frequency. In the given case a maximum linear acceleration of approximately 32m/s2 is experienced in the longitudinal direction, while the maximum angular acceleration is approximately 10rad/s2.

A sequence from the resultant simulation can be seen in Fig. 7
                        , where the twelve panels show the evolution of a full 30s. The simulation contains a total of 
                           
                              690
                              ,
                              052
                           
                         particles, of which 
                           
                              170
                              ,
                              512
                           
                         are fixed boundary particles, the bottom area of the cell was initially filled to a fluid level of 0.105m.

Referring back to Fig. 6, it is possible to see the effects of the acceleration data being applied, with the fluid initially sloping towards the back of the cell at 2.5s due to positive lateral acceleration, by 5s the fluid is then pushed to the right of the cell (as viewed from the perspective shown in Fig. 7) due to negative longitudinal acceleration of approximately −7m/s2. As the simulation progresses it is possible to see the cumulative effects of the linear and angular accelerations on the fluids bulk motion. At 12.5s the fluid is primarily pushed to the rear of the cell but rapidly fluctuates to the front momentarily. This is due to an increasing lateral acceleration that peaks at approximately 13m/s2 just after a violent deceleration of approximately −9m/s2. At 22.5s and 25s the fluid is correctly pushed to the right of the cell for the extended period of longitudinal deceleration that can be seen in Fig. 6 between 20s and 27.5s. Finally, as the simulation comes to its end the fluid violently sloshes to the left of the cell due to the high longitudinal acceleration, peaking at approximately 32m/s2 at 29.5s.

While it is not possible to include images of the real fuel cell, it is possible to show a comparison between numerical results of fluid levels taken from video footage of the inside of the fuel cell, against those taken from an SPH simulation as per Section 5.2, with the simplified cell replaced by the real geometry.

It is important to note that the video data was recorded from within a production cell as part of a combined testing regime. This meant that no measurement guides were drawn on the cells interior, therefore fluid levels have been estimated by producing a perspective-corrected overlay and integrating it with the video footage, meaning that a level of reading inaccuracy must be assumed in the results. Another consideration is that the production cell, although produced from the CAD geometry used in the SPH simulation, has slightly different physical dimensions which are unquantified due to the engineering tolerances of the fabrication process used.

Finally, as the camera is placed within the enclosure of the cell, it is inevitable that its lens will become completely submerged during sections of recorded time. As a result of this, it is only possible to determine fluid levels for relatively short periods over the course of the full 30s. Given these considerations, the goal here is to determine whether it is possible to capture the bulk fluid movement using SPH when compared to the physical movement in a real cell. Therefore, although precise replication of the fluid dynamics is desirable, it is not expected at this early stage, nor is it likely that the measurement techniques used will capture this fully.

In order to demonstrate the experimental set up, the simplified geometry has been used in Fig. 8
                         to show the placement and direction of the camera equipment, as well as the location of the three points at which fuel height values were extracted from both the video footage and simulation.

Although the dimensions of the simple cell and real cell are not identical due to the added complexity of the shape of the real cell, the enclosing volume for the fluid are within 10% of each other and can therefore be considered similar enough that the simplified version can be used for demonstrative purposes. Fluid levels are taken at the cell wall and therefore the fluid level measurements are those immediately at the wall rather than the highest point across the cells width.

Each simulation is performed using the same parameters as shown in Section 5.2, however results are provided for all three particle spacings first introduced in Section 5.1, not only 
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                              =
                              0.04571
                           
                        , with appropriate corresponding values for particle mass used for each. Due to geometric differences between the simple cell and the real cell (such as the cell floor not being perfectly flat), using the same particle spacing produces a simulation with different numbers of both fluid and boundary particles, with a lower fluid volume given the same initial fluid height of 0.105m. Due to CAD modelling constraints the real cell geometry used also provides more than one baffle, with the usual transport paths through the system closed, whereas the simple cell geometry provides only the bottom most baffle and associated enclosure, meaning the physical height of the geometry is approximately a third of the real cell with two thirds of the boundary particles in the real cell simulations being effectively unused. The time-to-solution for each of the three cases, along with the case specifics are provided in Table 3
                        . In order to provide a comparison between the CUDA-based DualSPHysics code using a GPU and the OpenMP-based CPU variant, the lowest resolution case (
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                              =
                              0.07619
                           
                        ) was run a further two times using the host workstation for the GeForce GTX 680, containing an Intel Core i7 3770K CPU (4 physical cores at 3.5GHz with a maximum of 8 threads). These results are also recorded in Table 3.

The first two simulations were completed within the 9h limit using mid-range GPU hardware (NVIDIA GeForce GTX 680). It is expected that these run-times could reduce were the simulations repeated on a GPU with higher computational capability than that of the device used. There are potential issues which may result in better specified GPU hardware performing the same simulation more slowly, such as a larger total memory causing longer delays during memory allocation and also the fact that increasing the granularity of the parallelism used does not guarantee better performance if the problem does not parallelise further than it already has. However, as the amount of time spent allocating or deallocating GPU memory is relatively small within DualSPHysics and because the software optimises the amount of threads generated for a problem based both on the problem size and hardware capability, it is feasible that the run-time for the 
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                              =
                              0.038095
                           
                         simulation could fall within the 9h limit also. Of interest is the fact that the run-times for the simulations using the real cell geometry were notably lower than those using the simplified cell. This can be attributed to the fact that the real cell simulations contain less fluid particles due to aforementioned geometrical differences, and also that internal fluid velocities are lower due to the effects of internal structures designed to achieve this.

In terms of performing the same simulation using shared memory CPU technology alone, it is clear that even at low discretisation levels the amount of time needed to perform a single simulation quickly becomes prohibitive. In this case it was not even feasible to perform the simulations where 
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                           
                         is less than 0.07619 as even using all 8 available threads on a modern CPU the amount of time taken was approximately as long as a single GPU needed to calculate the same simulation at 
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                              =
                              0.04571
                           
                        , the level that has been deemed the minimum acceptable for this purpose. An alternative would be to perform large-scale parallelisation of the SPH code and utilise a distributed-memory HPC resource, however it is then arguable as to whether this solution would still allow the method to present itself as a useful tool for a typical engineering design process when compared to the ability to run moderate scale simulations, that meet the requirements of the designer, using a GPU in a single workstation.

In this initial work, effort was concentrated on reproducing the kinematics of the fuel flow in comparison with the video footage, however future work may wish to place focus on determining how well the underlying physics of the flow is captured. One method to achieve this would be to compare the Reynolds number of the real-world flow against that achieved by the SPH simulation, however accurate determination of the real value is a difficult process given the current experimental set up as no data regarding fuel velocity or impact pressure was recorded and therefore have to be estimated. However, by following the procedure of Monaghan and Kajtar [21] for free-surface flow, a maximum Reynolds number can be estimated using 
                           
                              Re
                              =
                              
                                 
                                    
                                       
                                          (
                                          aD
                                          )
                                       
                                       
                                          0.5
                                       
                                    
                                    D
                                 
                                 
                                    ν
                                 
                              
                           
                        , where a is the maximum acceleration, D is the fluid depth and ν the kinematic viscosity. The process of finding the maximum fluid depth at any one moment is difficult to achieve as the real fuel cell does not provide a neat container with a planar bottom, however if the initial maximum fluid height of 0.105m is taken as the value for D, the largest acceleration experienced in the data set of 32m/s2 used and a value of 
                           
                              ν
                              =
                              1
                              ×
                              
                                 
                                    10
                                 
                                 
                                    -
                                    6
                                 
                              
                           
                        
                        m2/s considered then 
                           
                              Re
                              =
                              1.92
                              ×
                              
                                 
                                    10
                                 
                                 
                                    5
                                 
                              
                           
                         is obtained. It is important however that all of the caveats taken into account in order to derive this value are considered, as important quantities such as a and D, vary throughout time. It also needs to be noted that the true viscosity of the fuel used was an unknown quantity and was therefore treated as water, however fuel oil is more viscous than water at the same temperature, with a typical value of 
                           
                              ν
                              =
                              5
                              ×
                              
                                 
                                    10
                                 
                                 
                                    -
                                    5
                                 
                              
                           
                        
                        m2/s. If this value is considered then the real Reynolds number becomes 3849.36.

In the same work Monaghan and Katjar also report a method of estimating the Reynolds number achieved by an SPH simulation given the use of the artificial viscosity method. This is achieved in 3-D according to 
                           
                              ν
                              =
                              
                                 
                                    1
                                 
                                 
                                    10
                                 
                              
                              α
                              
                                 
                                    hc
                                 
                                 
                                    ab
                                 
                              
                           
                        , where α is the artificial viscosity coefficient, h the smoothing length and 
                           
                              
                                 
                                    c
                                 
                                 
                                    ab
                                 
                              
                           
                         the speed of sound. In the cases presented here the value for α was not selected to represent the estimated real Reynolds number, rather it was set to a value where simulation stability was maintained and fluid kinematics agreed with the experimental data. However, it is possible to estimate the Reynolds number for each of the three cases by assuming 
                           
                              D
                              =
                              0.105
                           
                         m and 
                           
                              a
                              =
                              32
                           
                        
                        m/s2, the achieved value of ν can then be estimated by assuming 
                           
                              
                                 
                                    c
                                 
                                 
                                    ab
                                 
                              
                           
                         is equal to the reference speed of sound 
                           
                              
                                 
                                    c
                                 
                                 
                                    0
                                 
                              
                           
                        . For the case where 
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                              =
                              0.07619
                           
                         a value of 
                           
                              Re
                              =
                              36.96
                           
                         is derived, for 
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                              =
                              0.04571
                              ,
                              
                              Re
                              =
                              61.6
                           
                         and for 
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                              =
                              0.038095
                              ,
                              
                              Re
                              =
                              73.91
                           
                        . It can be noted that, assuming the calculated Reynolds numbers are indeed representative of reality, then the achieved values are significantly lower than they should be, although this disparity changes significantly if considering the value needed for a simulation involving water or fuel oil. Addressing this problem in future work is not insurmountable, with options such as alternative viscosity models available at the expense of higher computational demand.

Results comparing fluid heights from the video data (where possible) and the three simulations can be seen in Figs. 9–11
                        
                        
                        , where the same 30s are shown for the three measure points defined in Fig. 8. All three SPH simulations were completed using the same NVIDIA GeForce GTX 680 GPU.

The simulated results show good agreement with the video footage in terms of bulk kinematics. Factors mentioned earlier in this section can be attributed to some of the differences seen in fluid heights, with there being no doubt that discrepancy exists between the points measured in the video footage and the SPH simulation, as well as inaccuracy in the real-world data introduced through having to estimate fluid height from video data. This problem is highlighted by the fact that the fluid height read from the real-world data is typically different at 0s than the SPH simulations, while it would have been possible to correct for this by compensating to decrease the difference, it was decided that the values presented would be kept unaltered and the issue discussed so as to avoid distorting results.

Results of great interest are in fact those where the fluid height is 0m, this occurs twice for each measure point (e.g. Point 1: 15.8–17.8s, Point 2: 15.8–17.8s and Point 3: 28.2–30s). During these periods the bulk of the fluid has travelled away from the area being measured, giving insight into the three-dimensional nature of the simulation and its capability to capture bulk motion. These time periods represent moments when the entire fluid volume occupies the other side of the cell and results from the three simulations correlate well with those recorded in the video footage.

Considering 15.8–17.8s in Figs. 9–11, it is possible to see a correlation between the acceleration data shown in Fig. 6 and the simplified test case seen in Fig. 7. The simulation within the real cell shows that both measure points 1 and 2 record a fluid level of zero for the entire period while measure point 3 shows a minor level rise at the beginning of the period. This is in agreement with the expected results given the acceleration forces applied. It is visibly notable in Fig. 7 that the fluid level against the measured cell side has already increased beyond zero for all three measure points by 17.5s, however this is to be expected as the simplified cell does not include some geometrical complexities present in the real cell which act to impede the flow as it travels longitudinally. It can still be noted in the simplified case that by 17.5s the fluid is sloping towards the measured cell wall as it travels from the opposite side.

The results show that the SPH simulation is able to represent the bulk motion of the fluid volume with reasonable accuracy, with trends in motion reproduced with good accuracy. Future improvements are expected to produce a model which not only captures the bulk movement of the fluid but also better reproduces the fluid levels and dynamics, future work is also expected to include more accurate methods of collecting real-world video footage to help reduce the uncertainty in comparative data.

It can also be seen that each of the three simulations manage to capture the majority of the bulk fluid motion, however there are extended periods where the simulation where 
                           
                              
                                 
                                    dp
                                 
                                 
                                    α
                                 
                              
                              =
                              0.07619
                           
                         does not register fluid at the measure points when it should be there and also that peak values are underestimated by all but more so at the lowest discretisation. This can potentially be accounted for by the fact that SPH results were taken at set points along the interior of the cell wall and this simulation has a larger smoothing length, which produces a larger artificial gap between the fluid and the boundary particles. The same boundary layer related problem is also the reason that even the higher resolution simulations cannot capture the peak height recorded in the video footage as the SPH boundary representation is unable to correctly represent the cell ceiling which was only a single layer thick in the original CAD model (from which the video footage measurements were estimated) but becomes a double layer of boundary particles, each with an associated smoothing length in the SPH models.

@&#CONCLUSIONS AND FUTURE WORK@&#

This work has applied the Smoothed Particle Hydrodynamics (SPH) method to the difficult problem of violent sloshing in the fuel cell of a motorsport vehicle being subjected to high linear and angular acceleration. Definition of the SPH model has been made with applicability to the industrial design process in mind, therefore numerical techniques have been chosen that find a balance between computational overhead and numerical accuracy. Graphics Processing Units (GPUs) have also been used to accelerate the computation of the model, resulting in the potential for a simulation that can be completed overnight using a single workstation.

Results comparing fluid levels at fixed points inside a real fuel cell against simulated SPH results show good agreement in terms of bulk fluid kinematics and reasonable agreement in terms of fluid levels. The computational performance of the method makes it suitable to be integrated as part of the process of refining the design of a fuel cell. This is something which has previously been a limiting factor in the application of SPH to this problem within industry.

Simulation parameters have been presented which allow for a stable SPH simulation, even using single precision GPU-based floating point arithmetic and given the highly fluctuating velocities that the problem demands. In order to improve floating point round off error, without introducing too much computational overhead, the compensated summation method of Kahan was employed, which is shown to improve the efficacy of the boundary condition used.

A number of future areas of research have been identified as part of this work. The first is to capture real-world data of a similar sloshing case under more controlled conditions allowing more informative comparisons with the SPH simulations. This is potentially challenging as it requires equipment capable of reproducing accelerations of up to 5g. Part of this investigation would be used to provide greater insight into a more accurate representation of the Reynolds number. Along with this point it should also be noted that while the boundary condition employed in this work was effectively no-slip in nature, it is typically accepted that a higher simulated Reynolds number would be required to justify this. It is also envisaged that future releases of the DualSPHysics software will include more sophisticated boundary treatments (e.g. [36]). Finally, the boundary of the fuel cell itself was considered to be static and inflexible in this work, with complex hydrodynamic effects such as thin-film wetting from the fuel oil not considered, similarly this first work was single phase in nature, with the effects of entrapped air not considered.

This work shows that SPH is a viable method for use as part of the industrial design process where other methods may be less suited. As advances in computational hardware and SPH software have resulted in simulations containing significant numbers of particles that can be computed in suitable time frames, whilst still capturing important hydrodynamics. It also shows that the method is robust when faced when difficult problems, such as high velocity sloshing in an enclosed container. Further development of the model is expected and also that it will be used to better understand the fluid dynamics that occur in the fuel cells of motorsport vehicles while in motion, a relatively unexplored topic.

@&#ACKNOWLEDGMENTS@&#

This work was joint funded by the University of Manchester EPSRC Knowledge Transfer Account (KTA), EP/H500154/1, and a leading motorsport company.

@&#REFERENCES@&#

