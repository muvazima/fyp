@&#MAIN-TITLE@&#Co-trained generative and discriminative trackers with cascade particle filter

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We formulate our visual tracker in a co-training framework to label incoming data continuously.


                        
                        
                           
                           We employ the cascade particle filter framework to improve the speed of our tracker significantly.


                        
                        
                           
                           Our tracker adaptively learns the appearance of the object; thus, it allows reacquiring an object after total occlusion.


                        
                        
                           
                           We carefully tested the components of our tracker and compare with many recent state-of-the-arts


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Visual tracking

Cascade particle filter

Co-training

Discriminative tracker

Generative tracker

@&#ABSTRACT@&#


               
               
                  Visual tracking is a challenging problem, as the appearance of an object may change due to viewpoint variations, illumination changes, and occlusion. It may also leave the field of view (FOV), then reappears. In order to track and reacquire an unknown object with limited labeling data, we propose to learn these changes online and incrementally build a model that encodes all appearance variations while tracking. To address this semi-supervised learning problem, we propose a co-training framework with cascade particle filter to label incoming data continuously and online update hybrid generative and discriminative models. Each of the layers in the cascade contains one or more either generative or discriminative appearance models. The cascade manner of organizing the particle filter enables the efficient evaluation of multiple appearance models with different computational costs; thus improves the speed of the tracker. The proposed online framework provides temporally local tracking that adapts to appearance changes. Moreover, it provides an object-specific detection ability that allows to reacquire an object after total occlusion. Extensive experiments demonstrate that under challenging situations, our method has strong reacquisition ability and robustness to distracters in clutter background. We also provide quantitative comparisons to other state of the art trackers.
               
            

@&#INTRODUCTION@&#

This paper aims at automatic visual tracking, i.e. once an object of interest is selected, our algorithm automatically tracks the object and reports a confidence which can be used to determine if the object is lost or out of field of view (FOV). When the object reappears, our algorithm reacquires the object and continues tracking.

We address three challenges in this problem:
                        
                           1.
                           Appearance Changes: Varying appearance, which can be caused by the changes in viewpoints, poses and illumination conditions, is one of the major challenges in visual tracking. New instances of the initially labeled object may constantly appear during tracking. Thus, visual tracking problem can be regarded as a weakly supervised learning problem. Very little supervised data is available in visual tracking. Improper updates of the appearance model (or no update) is the main reason of tracking drift, which is the most commonly seen failure in tracking.

Reacquisition: Persistent visual tracking requires the tracker to have the self-awareness of the status of tracking. A track is supposed to know if the object is out of FOV or is occluded, then reacquires the object when the object reappears. The solution requires an object-specific appearance model, in other words, a particular detector for “the” object, which has to be learned on-the-fly.

Time Performance: The success of visual tracking in recent years is mainly due to the powerful appearance models that have been used in visual tracking, such as [3,5,7,12,33]. However, the real-time performance of visual tracking is also an important factor in practice. A good balance of between the complexity of appearance models and the efficiency is desired.

We propose a co-training framework of generative and discriminative trackers with cascade particle filtering to address the above challenges. First, we formulate the appearance based object tracking as a semi-supervised learning problem: the process of selecting the object of interest before the automatic tracking can be considered as a process of providing labeled data in semi-supervised learning. Due to the appearance changes, the initially labeled data cannot fully represent the characteristics of entire distribution. A visual tracking approach needs to “learn to adapt” to the new appearance changes. Many visual tracking approaches are performed in a self-learning manner, where the sample with the most confident score evaluated by its own model is used to update itself. Here, we consider an example shown in Fig. 1
                      with a simple one dimensional distribution, where positive samples have two modes and negative samples contain one mode. All training samples are given sequentially. Except the few labeled training samples given at the very beginning, the rest of training samples are given as unlabeled. The dilemma of self-learning is shown in Fig. 1. If one adopts a strict threshold to update its model, the final model never learns new characteristics different from the initial labeled data. Thus, it will end up with a single mode either in zone a or zone c. On the other hand, if one adopts a loose threshold, its model is contaminated by outliers quickly and it will end up in zone b. Thus, self-learning is not a good way of weakly supervised online learning. Co-training proposed by Blum and Mitchell [18] is a principled semi-supervised training method. The basic idea is to train two classifiers on two conditionally independent views of the same data (with a small number of exemplars) and then use the prediction of each classifier to enlarge the training set of the other. It is proved that co-training can find an accurate decision boundary, starting from a small quantity of labeled data as long as the two feature sets are independent [18]. Empirical results [19] show that co-training also works well in the case where the independence is not perfectly satisfied. In our visual tracking setting, although our initial tracking samples are limited, if we regard multiple complementary features as approximated conditionally independent views of the same data, we can apply the co-training framework to combine multiple models to avoid the issues in the self-learning. One can certainly transform the semi-supervised learning problem to a supervised-learning problem for some specific applications: for instance, if the category of the object of interest is known, one can incorporate a model trained with a large amount of offline labeled data to compensate for limited online data, as in [30], or if tracking is allowed to be performed offline with human interaction, eg. directly adding new training data in a bootstrap manner as in [36]. These approaches go beyond the scope of general automatical visual tracking problem and require further information provided from user interaction.

Second, instead of combining multiple cues in a linear way, which increases the complexity linearly, we adopt cascade particle filter [30] to balance robustness and computational efficiency from multiple models. Instead of evaluating all models equally, this approach evaluates computationally cheaper models at earlier stages and more expensive models at later stages where much fewer particles remain. The cascade particle filter naturally combines with the co-training framework where multiple models need to be learned and evaluated on-the-fly. We call this proposed framework Co-trained Cascade Particle Filter (CCPF). Compared with co-training all features at the same stage, CCPF benefits from the robustness in co-trained multiple models and reduces the computational costs of different models. The CCPF framework is shown in Fig. 2
                     .

Third, while the CCPF framework separates various features into different stages, the last stage of the CCPF makes the final decision for object reacquisition. Thus, besides the tracking capability, the end-product of the tracker is also a detector of the particular object that has been tracked. The detector contains all the appearance variations of the object that have been observed since tracking is started, and can be used to reacquire the object once it reappears.

The rest of this paper is organized as follows. The related work is presented in Section 2. The overview and the advantages of our proposed framework are presented in Section 3. All of the online appearance models of trackers are described in Section 4. Then the experiments are shown in Section 5, followed by summary and future work.

@&#RELATED WORK@&#

Both generative and discriminative learning approaches have been extensively used in visual tracking. Several examples of generative tracking algorithms are Eigentracking [1], WSL tracking [2], Incremental Visual Tracking (IVT) [3], and L1 Minimization Tracking [40]. Due to the fact that appearance variations are highly non-linear, multiple subspaces [4] and non-linear manifold learning methods [5] have been proposed. Due to background information is too extensive to represent in a generative model, most traditional generative tracking methods are merely trained based on object appearance without considering background information. However, generative approaches are capable of dealing with partial missing data. In the visual tracking problem, missing data occurs when an object is occluded.

Instead of building a generative model to describe an object itself, discriminative tracking methods aim to find a decision boundary that can best separate the object from the background. Recently, many discriminative trackers have been proposed [7–9,33] and demonstrate strong robustness in avoiding distracters in the background. Support Vector Tracking (SVT) [6] integrates an offline trained Support Vector Machine (SVM) classifier into an optic-flow-based tracker. In order to update the decision boundary according to new samples and background, discriminative tracking methods with online learning have been proposed in [8,7]. In [8], a confidence map is built by finding the most discriminative RGB color combination in each frame. However, a limited color feature pool restricts the discriminative power of this method. In [7], Avidan proposed an ensemble of online learned weak classifiers to label a pixel as belonging to either the object or the background. To accommodate for object appearance changes, in every frame, new weak classifiers replace part of old ones that do not perform well, or have existed longer than a fixed number of frames. Both methods [8,7] use features at the pixel level and rely on a mode seeking process (mean shift) to find the best estimate on a confidence map, which restricts the reacquisition ability of these methods. Oza and Russell [10] proposed an online boosting algorithm, which is applied in the visual tracking problem [11,12]. Due to the large number of features, either an offline feature selection procedure or an offline trained seed classifier is required in practice. Thus, it is difficult to generalize to arbitrary object types using tracking methods based on online boosting. More recently, Tang et al. [20] proposes to use co-training to online train two discriminative trackers with color histogram features and HOG features. It has been shown that discriminative classifiers outperform generative models [13] if enough training data is available. However, generative methods have better generalization performance when the size of training data is small. Specifically, a simple generative classifier (naive Bayes) outperforms its discriminative counterpart (logistic regression) when the amount of labeled training data is small [14]. Specifically for visual tracking problem, generative approach has the advantage of dealing with missing data, which perfectly matches the case of occlusions in visual tracking.

Recently, hybrid discriminative generative methods have opened a promising direction to benefit from both types of methods. Several hybrid methods [15–17,13,41,43] have been proposed in many application domains [15–17]. Most of them imbue generative methods with the discriminative power via “discriminative training” of a generative model. These methods train a model by optimizing a convex combination of the generative and discriminative log likelihood functions. Due to the asymmetry in training data, “discriminative training” of a generative model requires a parameter to govern the trade-off between generative and discriminative. Theoretical discussions in [13] show that an improper hybrid of discriminative generative model generates even worse performance than pure generative or discriminative methods. We propose to use co-training to combine generative and discriminative models.

A typical failure of visual tracking is drift, which means that tracking performance gradually degrades over time, and eventually the tracker loses the object. There exist several reasons to explain the drift issue. One explanation is that self-learning reinforces previous errors and causes the drift. In order to avoid self-learning, Tang et al. [20] proposed to use co-training to online train two SVM trackers with color histogram features and HOG features. This method uses an incremental/decremental SVM solver [22] to focus on recent appearance variations without representing the global object appearance. Babenko et al. [33] argued that the drift can be also caused by the ambiguities when using online labeled data to update the model. For example, the way of selecting positive and negative samples inevitably contains ambiguities, and these ambiguities lead to an offset of the online trained model. A multiple instance learning approach was introduced to avoid these ambiguities by using a bag of samples instead of an individual sample. More recently, Kalal et al. [37], in another way, proposed a very efficient method using a combination of detection, tracking, and modeling modules. This tracker is robust against drifting by bootstrapping itself using positive and negative constraints. At the same time, Kwon and Lee [39] assume that given a fixed number of trackers, at a point of time, there is at least one tracker can successfully track the object. However, putting aside the trade-off in running time, this assumption is also hard to be satisfied in real-world scenarios where the environments can be changed dynamically and the trackers need to adapt to these changes. Hare et al. [42] argued that in tracking-by-detection methods, the intermediate step which converts the current best result into the labeled training samples in order to update the classifier is not clear. To overcome this issue, they proposed to use a kernelized structured output Support Vector Machine (SVM) to provide adaptive tracking by online learning. Another relevant reason for this drift problem is due to the approximation in object representation. For example, the object of interest is usually represented in a compact geometrical form, such as rectangles, or oriented rectangles. Segmentation (or contour) based representation can provide a more accurate representation [34,38]. However, segmentation and contour are difficult to generate accurately and the methods are often computationally expensive. In this paper, we adopt an oriented rectangle as the representation of an object.

We regard online learning an appearance model of an arbitrary object with limited labeled data as a semi-supervised learning problem. In order to address this semi-supervised learning problem, we propose to use co-training [18] to combine generative and discriminative models.

In order to represent the global object appearance, we propose to use a generative model, which contains a number of low dimension subspaces. This generative model encodes all the appearance variations that have been seen in a compact way. An online subspace updating algorithm is proposed to modify the subspaces adaptively. The descriptive power of the generative model increases as new samples are added. For the discriminative classifier, we use an incrementally learned SVM classifier [21] with histogram of gradient (HOG) [23] features. In practice, we find the number of support vectors grows quite fast when the appearance of object and background changes. Moreover, the adaption of the discriminative model to new appearance changes becomes slower as more samples are accumulated. To address these problems, we decrementally train the SVM to focus on recent appearance variations within a sliding window. The training data flow is shown in Fig. 3
                        . The image patches bounded with green boxes are samples used in the generative model. They contain all the object appearance variations since the tracking starts. The red bounding box indicates the positive and negative training samples within the sliding window used in the discriminative classifiers. The samples that have been classified as positive ones by one model will be used to update the other model. The generative model contains all positive samples since the tracking is started and the discriminative model focus on the training samples within a temporal window. Experiments show that our method has strong reacquisition ability and is robust to distracters in background clutter.

The visual tracking problem can be formulated as a state estimate problem in a similar way as [3,24]. Given a sequence of observed image regions 
                           
                              
                                 
                                    O
                                 
                                 
                                    t
                                 
                              
                              =
                              (
                              
                                 
                                    o
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    o
                                 
                                 
                                    t
                                 
                              
                              )
                           
                         over time t, the goal of visual tracking is to estimate the hidden state 
                           
                              
                                 
                                    s
                                 
                                 
                                    t
                                 
                              
                           
                        . In our case, the hidden state refers to the 2D position, scale and rotation of the object. Assuming a Markovian state transition, the posterior can be formulated as a recursive equation
                           
                              (1)
                              
                                 p
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 |
                                 
                                    
                                       O
                                    
                                    
                                       t
                                    
                                 
                                 )
                                 ∝
                                 p
                                 (
                                 
                                    
                                       o
                                    
                                    
                                       t
                                    
                                 
                                 |
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 )
                                 ∫
                                 p
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 |
                                 
                                    
                                       s
                                    
                                    
                                       t
                                       -
                                       1
                                    
                                 
                                 )
                                 p
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       t
                                       -
                                       1
                                    
                                 
                                 |
                                 
                                    
                                       O
                                    
                                    
                                       t
                                       -
                                       1
                                    
                                 
                                 )
                                 
                                    
                                       ds
                                    
                                    
                                       t
                                       -
                                       1
                                    
                                 
                              
                           
                        where 
                           
                              p
                              (
                              
                                 
                                    o
                                 
                                 
                                    t
                                 
                              
                              |
                              
                                 
                                    s
                                 
                                 
                                    t
                                 
                              
                              )
                           
                         and 
                           
                              p
                              (
                              
                                 
                                    s
                                 
                                 
                                    t
                                 
                              
                              |
                              
                                 
                                    s
                                 
                                 
                                    t
                                    -
                                    1
                                 
                              
                              )
                           
                         are the observation model and state transition model respectively. 
                           
                              p
                              (
                              
                                 
                                    s
                                 
                                 
                                    t
                                    -
                                    1
                                 
                              
                              |
                              
                                 
                                    O
                                 
                                 
                                    t
                                    -
                                    1
                                 
                              
                              )
                           
                        , which is represented as a set of particles and weights, is the posterior distribution given all the observations up to time 
                           
                              t
                              -
                              1
                           
                        . The recursive inference in Eq. (2) is implemented with importance sampling and resampling processes [24].

However, when the motion of the object is abrupt and unpredictable, a conventional particle filter [24] leads to tracking failure because the prior distribution is not sufficient to estimate the new state of the object [30]. There are two ways to avoid this problem: (1) increase the number of samples; (2) calculate the proposal distribution over a large state space. In fact, both of these solutions are very expensive, which limits the efficiency of the tracker.

To address the issue of conventional particle filter, Li et al. [30] proposed the cascade particle filter that consists of multiple stages of importance sampling. Each of the stages contains an observation. Given a target state s, a number of observation models 
                           
                              
                                 
                                    n
                                 
                                 
                                    o
                                 
                              
                           
                         which are conditionally independent, we have
                           
                              (2)
                              
                                 p
                                 (
                                 o
                                 |
                                 s
                                 )
                                 =
                                 p
                                 (
                                 
                                    
                                       o
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       o
                                    
                                    
                                       
                                          
                                             n
                                          
                                          
                                             o
                                          
                                       
                                    
                                 
                                 |
                                 s
                                 )
                                 =
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                o
                                             
                                          
                                       
                                    
                                 
                                 p
                                 (
                                 
                                    
                                       o
                                    
                                    
                                       k
                                    
                                 
                                 |
                                 s
                                 )
                              
                           
                        In the conventional particle filter, if the liklelihood function contains multiple models, one particle needs to be evaluated by all the models. This is not an efficient manner because most of particles have very low weight (close to zero) and will be removed in the next round of resampling anyway. To overcome this issue, a cascade particle filter [30] is applied as follows: at stage 0, the proposal distribution of importance sampling is calculated using the prediction from previous frame. At stage k (
                           
                              k
                              >
                              0
                           
                        ), a resampling step can be done by sampling the proposal distribution from the previous stage. Mathematically, let us denote 
                           
                              
                                 
                                    π
                                 
                                 
                                    k
                                 
                              
                           
                         as the distribution of our object at stage k, the prediction step is applied as follows
                           
                              (3)
                              
                                 
                                    
                                       π
                                    
                                    
                                       0
                                    
                                 
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 )
                                 =
                                 p
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 |
                                 
                                    
                                       O
                                    
                                    
                                       t
                                       -
                                       1
                                    
                                 
                                 )
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       π
                                    
                                    
                                       k
                                    
                                 
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 )
                                 =
                                 p
                                 (
                                 
                                    
                                       o
                                    
                                    
                                       k
                                       ,
                                       t
                                    
                                 
                                 |
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 )
                                 
                                    
                                       π
                                    
                                    
                                       k
                                       -
                                       1
                                    
                                 
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 )
                                 ,
                                 
                                 k
                                 =
                                 1
                                 …
                                 
                                    
                                       n
                                    
                                    
                                       s
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    n
                                 
                                 
                                    s
                                 
                              
                           
                         is the number of stages. In [30], 
                           
                              
                                 
                                    n
                                 
                                 
                                    s
                                 
                              
                              =
                              
                                 
                                    n
                                 
                                 
                                    o
                                 
                              
                           
                         because in each stage lies only one classifier. It means 
                           
                              
                                 
                                    π
                                 
                                 
                                    k
                                 
                              
                              (
                              
                                 
                                    s
                                 
                                 
                                    t
                                 
                              
                              )
                           
                         would be the estimation of the posterior distribution after applying observation model k if the estimation is done sequentially. Therefore, we have
                           
                              (5)
                              
                                 
                                    
                                       π
                                    
                                    
                                       
                                          
                                             n
                                          
                                          
                                             s
                                          
                                       
                                    
                                 
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 )
                                 =
                                 p
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 |
                                 
                                    
                                       O
                                    
                                    
                                       t
                                       -
                                       1
                                    
                                 
                                 )
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                n
                                             
                                             
                                                s
                                             
                                          
                                       
                                    
                                 
                                 p
                                 (
                                 
                                    
                                       o
                                    
                                    
                                       k
                                    
                                 
                                 |
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 )
                                 =
                                 p
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 |
                                 
                                    
                                       O
                                    
                                    
                                       t
                                       -
                                       1
                                    
                                 
                                 )
                                 p
                                 (
                                 
                                    
                                       o
                                    
                                    
                                       t
                                    
                                 
                                 |
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 )
                                 =
                                 p
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       t
                                    
                                 
                                 |
                                 
                                    
                                       O
                                    
                                    
                                       t
                                    
                                 
                                 )
                              
                           
                        The weight of 
                           
                              
                                 
                                    s
                                 
                                 
                                    k
                                    ,
                                    t
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                           
                         is updated using importance sampling
                           
                              (6)
                              
                                 
                                    
                                       w
                                    
                                    
                                       k
                                       ,
                                       t
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             π
                                          
                                          
                                             k
                                          
                                       
                                       (
                                       
                                          
                                             s
                                          
                                          
                                             k
                                             ,
                                             t
                                          
                                          
                                             (
                                             i
                                             )
                                          
                                       
                                       )
                                    
                                    
                                       
                                          
                                             π
                                          
                                          
                                             k
                                             -
                                             1
                                          
                                       
                                       (
                                       
                                          
                                             s
                                          
                                          
                                             k
                                             ,
                                             t
                                          
                                          
                                             (
                                             i
                                             )
                                          
                                       
                                       )
                                    
                                 
                                 =
                                 p
                                 (
                                 
                                    
                                       o
                                    
                                    
                                       k
                                       ,
                                       t
                                    
                                 
                                 |
                                 
                                    
                                       s
                                    
                                    
                                       k
                                       ,
                                       t
                                    
                                 
                                 )
                              
                           
                        where 
                           
                              (
                              i
                              )
                           
                         is the particle index. This process is repeated through 
                           
                              
                                 
                                    n
                                 
                                 
                                    s
                                 
                              
                           
                         stages to obtain the final particle set 
                           
                              
                                 
                                    P
                                 
                                 
                                    
                                       
                                          n
                                       
                                       
                                          s
                                       
                                    
                                    ,
                                    t
                                 
                              
                              =
                              {
                              
                                 
                                    s
                                 
                                 
                                    
                                       
                                          n
                                       
                                       
                                          s
                                       
                                    
                                    ,
                                    t
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                              ,
                              
                                 
                                    w
                                 
                                 
                                    
                                       
                                          n
                                       
                                       
                                          s
                                       
                                    
                                    ,
                                    t
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                              }
                           
                         which can be used to represent the distribution 
                           
                              
                                 
                                    π
                                 
                                 
                                    
                                       
                                          n
                                       
                                       
                                          s
                                       
                                    
                                 
                              
                              (
                              
                                 
                                    s
                                 
                                 
                                    t
                                 
                              
                              )
                           
                        . According to Eq. (5), we have 
                           
                              
                                 
                                    P
                                 
                                 
                                    
                                       
                                          n
                                       
                                       
                                          s
                                       
                                    
                                    ,
                                    t
                                 
                              
                              ∼
                              p
                              (
                              
                                 
                                    s
                                 
                                 
                                    t
                                 
                              
                              |
                              
                                 
                                    O
                                 
                                 
                                    t
                                 
                              
                              )
                           
                        . Here, instead of using only one observation per stage, we extend the framework to use multiple observations.

We formulate our tracker in three stages as shown in Fig. 2. The first stage is a fast classifier using color information which is discussed in Section 4.1; the second one contains a single linear subspace which is simplified from the multiple linear subspaces appearance model discussed in Section 4.2 by approximating the appearance variations of the object within a linear subspace; while the co-training between the multiple linear subspaces model (Section 4.2) and the SVM classifier (Section 4.3) is kept at the last stage of our cascade particle filter. This stage is the most important layer where the final result is given by the two those independent models. The result is then used to update all of models in other layers.

In this setting, the model using color features is the most time-efficient one, the multi-linear subspace model is the second most time-efficient one and the HOG-SVM model is the most expensive one. As mentioned above, when sampling, many of samples have low confidence score (close to zero) because they are not related to the object of interest. We can first quickly filter out a lot of particles by using the first model and then evaluate the rest with the more computationally expensive models. This configuration efficiently boosts the speed of the whole framework to achieve real-time performance.

It is worth noting that we aim to build a general object tracker and we do not have an explicit offline-trained model like in [30]. The idea is to build an appearance model on-the-fly to adapt with all the changes in viewpoints, lighting conditions, etc. during tracking. To fulfill this task, we adopt co-training as the framework to enhance the powers of different models. Among the three models, every one will have its own weakness and advantage. The HOG_SVM model and the multi-linear subspace model are more robust to lighting changes than the color model while the color model is more robust to rotation and pose changes. It is hard for one model to train on its own because the early mistakes could reinforce themselves. Co-training provides a more reliable solution that different models can cooperate with each other to produce a strong one even when many of them fail at one point of time. In the cascade particle filter, our co-training is set up in the last stage to update each model and output the final decision, while all of other stages determine together if a sample is good to go through the next layer or not. Different from [30], our approach naturally extends to use multiple models at each stage of the cascade to enhance their complementary powers.

The outcome of our tracker is not only the tracking result but also a detector for that specific object, which is very useful for reacquisition purpose. In order to achieve reacquisition, we need to threshold the decision of the learned model to determine if the object still exists. If not, the tracker will be in a reacquisition mode. For instance, when the object leaves the field of view and comes back, without any knowledge about exit/entry points, we need to conduct a sliding window search over the entire frame to find the object. Compared with the self-learning approaches, our co-training approach has the advantage of maintaining an independent threshold for each model. If none of the models can find valid samples to update, the tracker enters the reacquisition mode. Total occlusion is also considered as same as leaving FOV (Fig. 4
                        ).

At the very first stage of our CCPF framework, we need a fast and efficient classifier [8] to quickly discard negative particles before evaluating the rest particles in the next stage. The main task at this stage is to find efficient features that best distinguishes between object and background. We adopt the distinctive color features at this stage. The feature pool is a set of features composed of linear combinations of R, G, B color with relative weights
                           
                              (7)
                              
                                 F
                                 ≡
                                 {
                                 
                                    
                                       a
                                    
                                    
                                       1
                                    
                                 
                                 R
                                 +
                                 
                                    
                                       a
                                    
                                    
                                       2
                                    
                                 
                                 G
                                 +
                                 
                                    
                                       a
                                    
                                    
                                       3
                                    
                                 
                                 B
                                 |
                                 
                                    
                                       a
                                    
                                    
                                       ∗
                                    
                                 
                                 ∈
                                 [
                                 -
                                 2
                                 ,
                                 -
                                 1
                                 ,
                                 0
                                 ,
                                 1
                                 ,
                                 2
                                 ]
                                 }
                              
                           
                        Given a feature 
                           
                              
                                 
                                    f
                                 
                                 
                                    k
                                 
                              
                              =
                              {
                              
                                 
                                    a
                                 
                                 
                                    k
                                 
                              
                              ,
                              
                                 
                                    b
                                 
                                 
                                    k
                                 
                              
                              ,
                              
                                 
                                    c
                                 
                                 
                                    k
                                 
                              
                              }
                           
                        , the histograms 
                           
                              
                                 
                                    H
                                 
                                 
                                    fg
                                 
                              
                              (
                              i
                              )
                           
                         and 
                           
                              
                                 
                                    H
                                 
                                 
                                    bg
                                 
                              
                              (
                              i
                              )
                           
                         for the pixels on foreground (object)and background are computed, where i denotes the ith bin in the histograms. The log likelihood at the ith bin is given by:
                           
                              (8)
                              
                                 L
                                 (
                                 i
                                 )
                                 =
                                 log
                                 
                                    
                                       max
                                       {
                                       
                                          
                                             p
                                          
                                          
                                             fg
                                          
                                       
                                       (
                                       i
                                       )
                                       ,
                                       δ
                                       }
                                    
                                    
                                       max
                                       {
                                       
                                          
                                             p
                                          
                                          
                                             bg
                                          
                                       
                                       (
                                       i
                                       )
                                       ,
                                       δ
                                       }
                                    
                                 
                              
                           
                        where 
                           
                              δ
                           
                         is a small value (which is set to 0.001) to avoid the division by zero issue while 
                           
                              
                                 
                                    p
                                 
                                 
                                    fg
                                 
                              
                           
                         and 
                           
                              
                                 
                                    p
                                 
                                 
                                    bg
                                 
                              
                           
                         are the discrete probability densities of the object and background respectively. Then the variance ratio is calculated given the log likelihood function and the probability densities of foreground and background:
                           
                              (9)
                              
                                 VR
                                 (
                                 L
                                 ;
                                 
                                    
                                       p
                                    
                                    
                                       fg
                                    
                                 
                                 ,
                                 
                                    
                                       p
                                    
                                    
                                       bg
                                    
                                 
                                 )
                                 ≡
                                 
                                    
                                       var
                                       (
                                       L
                                       ;
                                       (
                                       
                                          
                                             p
                                          
                                          
                                             fg
                                          
                                       
                                       +
                                       pbg
                                       )
                                       /
                                       2
                                       )
                                    
                                    
                                       var
                                       (
                                       L
                                       ;
                                       
                                          
                                             p
                                          
                                          
                                             fg
                                          
                                       
                                       )
                                       +
                                       var
                                       (
                                       L
                                       ,
                                       
                                          
                                             p
                                          
                                          
                                             bg
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        in which the variance of 
                           
                              L
                              (
                              i
                              )
                           
                         with respect to p is defined as
                           
                              (10)
                              
                                 var
                                 (
                                 L
                                 ;
                                 p
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                       
                                    
                                 
                                 p
                                 (
                                 i
                                 )
                                 
                                    
                                       L
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 i
                                 )
                                 -
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                             a
                                             (
                                             i
                                             )
                                             L
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                    
                                       2
                                    
                                 
                              
                           
                        Therefore, intuitively, in Eqs. (9) and (10), the goal is to maximize the variance between two classes while minimizing the within class ones. The top discriminative feature having highest VR score is chosen to compute the likelihood images (i.e. confidence map).

Instead of using a upright rectangle, we consider a more precise representation, the rotated rectangle, to accumulate the pixel-wise information for the discriminative feature selection. The accumulated confidence of all pixels in a rotated window is calculated. Moreover, to select the best feature in the discriminative model, a histogram calculation is needed. With respect to real-time performance, to reduce the computational time for summing up the total confidence within a rotated rectangle, we apply the integral image and approximately decompose that a rotated window into union of sub-rectangles with sides parallel to the image coordinates. As shown in Fig. 5
                           , after the integral image 
                              
                                 I
                              
                            is computed, the total confidence of a region R is estimated as: 
                              
                                 C
                                 (
                                 R
                                 )
                                 =
                                 Σ
                                 C
                                 (
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 |
                                 Σ
                                 S
                                 (
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 ≈
                                 S
                                 (
                                 R
                                 )
                              
                           , where 
                              
                                 S
                                 (
                                 x
                                 )
                              
                            is the area of the rectangle x.

In addition, given the integral image 
                              
                                 I
                                 ,
                                 
                                 C
                                 (
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                            represented as 
                              
                                 C
                                 (
                                 x
                                 1
                                 ,
                                 y
                                 1
                                 ,
                                 x
                                 2
                                 ,
                                 y
                                 2
                                 )
                              
                            is calculated quickly as follows:
                              
                                 (11)
                                 
                                    C
                                    (
                                    
                                       
                                          r
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    =
                                    I
                                    (
                                    x
                                    2
                                    ,
                                    y
                                    2
                                    )
                                    -
                                    I
                                    (
                                    x
                                    1
                                    ,
                                    y
                                    2
                                    )
                                    -
                                    I
                                    (
                                    x
                                    2
                                    ,
                                    y
                                    1
                                    )
                                    +
                                    I
                                    (
                                    x
                                    1
                                    ,
                                    y
                                    1
                                    )
                                 
                              
                           The average confidence is then obtained:
                              
                                 (12)
                                 
                                    
                                       
                                          C
                                       
                                       
                                          ‾
                                       
                                    
                                    (
                                    R
                                    )
                                    =
                                    
                                       
                                          C
                                          (
                                          R
                                          )
                                       
                                       
                                          S
                                          (
                                          R
                                          )
                                       
                                    
                                 
                              
                           In practice, in our system, the object is relatively small compared with image size, we roughly compute the confidence of a rotated area by dividing it into 10 rectangles. This approximation is also applied in estimating the pixels inside any rotated rectangle to compute its histogram.

The global appearance of an object under different viewpoints and illumination conditions is known to lie on a low dimension manifold. However, such a global appearance manifold is highly non-linear. In [5], a non-linear mapping from the embedding space to the input space is learned offline for tracking a specific object. Although the appearance manifold is globally non-linear, the local appearance variations can still be approximated by a linear subspace. Thus, we propose to incrementally learn a set of low dimension linear subspaces to represent the global appearance manifold. A multi-subspace representation is used in [4], where a fixed number of subspaces are offline built and are online updated with new samples. Our approach automatically determines the number of subspaces and learns new models on-the-fly. The complexity of the models in our approach is determined by the data itself.

Let 
                           
                              M
                              =
                              {
                              
                                 
                                    Ω
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    Ω
                                 
                                 
                                    L
                                 
                              
                              }
                           
                         represent the appearance manifold of one object and 
                           
                              
                                 
                                    Ω
                                 
                                 
                                    l
                                 
                              
                              ,
                              
                              l
                              ∈
                              [
                              1
                              ,
                              …
                              ,
                              L
                              ]
                           
                         denote the local sub-manifold. An appearance instance 
                           
                              x
                           
                         is a d-dimension image vector. Let 
                           
                              
                                 
                                    Ω
                                 
                                 
                                    l
                                 
                              
                              =
                              (
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    l
                                 
                              
                              ,
                              
                                 
                                    U
                                 
                                 
                                    l
                                 
                              
                              ,
                              
                                 
                                    Λ
                                 
                                 
                                    l
                                 
                              
                              ,
                              
                                 
                                    n
                                 
                                 
                                    l
                                 
                              
                              )
                           
                         denote one sub-manifold, where 
                           
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ˆ
                                       
                                    
                                 
                                 
                                    l
                                 
                              
                              ,
                              
                              
                                 
                                    U
                                 
                                 
                                    l
                                 
                              
                              ,
                              
                              
                                 
                                    Λ
                                 
                                 
                                    l
                                 
                              
                           
                         and 
                           
                              
                                 
                                    n
                                 
                                 
                                    l
                                 
                              
                           
                         represent the mean vector, eigenvectors, eigenvalues and the size (number of samples) of the subspace respectively. For simplicity, we omit the subscript when this causes no confusion. Here, 
                           
                              Λ
                              =
                              diag
                              (
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    λ
                                 
                                 
                                    n
                                 
                              
                              )
                           
                         with sorted eigenvalues of the subspace, 
                           
                              
                                 
                                    λ
                                 
                                 
                                    1
                                 
                              
                              ⩾
                              
                                 
                                    λ
                                 
                                 
                                    2
                                 
                              
                              …
                              ⩾
                              
                                 
                                    λ
                                 
                                 
                                    n
                                 
                              
                           
                        . A 
                           
                              η
                           
                        -truncation is usually used to truncate the subspaces, namely 
                           
                              m
                              =
                              arg
                              
                                 
                                    min
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                          
                                       
                                       
                                          
                                             λ
                                          
                                          
                                             i
                                          
                                       
                                       /
                                       tr
                                       (
                                       Λ
                                       )
                                       ⩾
                                       η
                                    
                                 
                              
                           
                        . From a statistical point of view, a subspace with m eigenbases can be regarded as a m-dimensional Gaussian distribution. Suppose 
                           
                              Ω
                           
                         is a subspace with the first m eigenvectors, the projection of 
                           
                              x
                           
                         on 
                           
                              Ω
                           
                         is 
                           
                              y
                              =
                              
                                 
                                    (
                                    
                                       
                                          y
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       
                                          y
                                       
                                       
                                          m
                                       
                                    
                                    )
                                 
                                 
                                    T
                                 
                              
                              =
                              
                                 
                                    U
                                 
                                 
                                    T
                                 
                              
                              (
                              x
                              -
                              
                                 
                                    x
                                 
                                 
                                    ˆ
                                 
                              
                              )
                           
                        . Then, the likelihood of 
                           
                              x
                           
                         can be expressed [25] as
                           
                              (13)
                              
                                 p
                                 (
                                 x
                                 |
                                 Ω
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                exp
                                                
                                                   
                                                      
                                                         -
                                                         
                                                            
                                                               1
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         
                                                            
                                                               ∑
                                                            
                                                            
                                                               i
                                                               =
                                                               1
                                                            
                                                            
                                                               m
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  
                                                                     y
                                                                  
                                                                  
                                                                     i
                                                                  
                                                                  
                                                                     2
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  
                                                                     λ
                                                                  
                                                                  
                                                                     i
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      2
                                                      π
                                                      )
                                                   
                                                   
                                                      m
                                                      /
                                                      2
                                                   
                                                
                                                
                                                   
                                                      ∏
                                                   
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   
                                                      m
                                                   
                                                
                                                
                                                   
                                                      λ
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      1
                                                      /
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 ·
                                 
                                    
                                       
                                          
                                             
                                                exp
                                                
                                                   
                                                      
                                                         -
                                                         
                                                            
                                                               
                                                                  
                                                                     ε
                                                                  
                                                                  
                                                                     2
                                                                  
                                                               
                                                               (
                                                               x
                                                               )
                                                            
                                                            
                                                               2
                                                               ρ
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      (
                                                      2
                                                      π
                                                      ρ
                                                      )
                                                   
                                                   
                                                      (
                                                      d
                                                      -
                                                      m
                                                      )
                                                      /
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              ε
                              (
                              x
                              )
                              =
                              |
                              x
                              -
                              
                                 
                                    UU
                                 
                                 
                                    T
                                 
                              
                              x
                              |
                           
                         is the projection error, namely 
                           
                              
                                 
                                    L
                                 
                                 
                                    2
                                 
                              
                           
                         distance between the sample 
                           
                              x
                           
                         and its projection on the subspace. The parameter 
                           
                              ρ
                           
                        
                        is calculated as 
                           
                              ρ
                              =
                              
                                 
                                    1
                                 
                                 
                                    d
                                    -
                                    m
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    m
                                    +
                                    1
                                 
                                 
                                    d
                                 
                              
                              
                                 
                                    λ
                                 
                                 
                                    i
                                 
                              
                           
                         
                        [25] or approximated as 
                           
                              ρ
                              =
                              
                                 
                                    1
                                 
                                 
                                    2
                                 
                              
                              
                                 
                                    λ
                                 
                                 
                                    m
                                    +
                                    1
                                 
                              
                           
                        . By using Eq. (13), we can evaluate the confidence of a sample from one subspace. As our generative model contains multiple subspaces (each subspace can be regarded as a hyper-ellipsoid), we maintain neighborhood according to 
                           
                              
                                 
                                    L
                                 
                                 
                                    2
                                 
                              
                           
                         distance between the mean vectors of subspaces. To evaluate the confidence of one sample from such a generative model, we use the maximum confidence of the K-nearest (we use 
                           
                              K
                              =
                              4
                           
                         in experiments) neighboring subspaces as the confidence of this sample.

Suppose that samples are given in a sequential way, we aim to learn the low dimension linear subspaces incrementally. Suppose a new subspace has 
                              
                                 
                                    
                                       d
                                    
                                    
                                       0
                                    
                                 
                              
                            dimensions, we need at least 
                              
                                 
                                    
                                       d
                                    
                                    
                                       0
                                    
                                 
                                 +
                                 1
                              
                            sequential samples to create this new subspace. Local smoothness is guaranteed by a small 
                              
                                 
                                    
                                       d
                                    
                                    
                                       0
                                    
                                 
                              
                           . A new subspace is created and added into the subspace pool. In order to represent a large number of sequential samples, we give an upper bound to the number of subspaces: if the number of subspaces exceeds a predetermined maximum, the most similar two subspaces are merged. The outline of the online subspace learning algorithm is shown in Algorithm 1. In order to maintain the local property of the subspaces, merging only happens between neighboring subspaces. Merging two subspaces and measuring the similarity between two subspaces are two critical steps in this algorithm.

Several methods have been proposed to incrementally update the eigenspaces. Only the method proposed by Hall et al. [26] takes into account the change of the mean of a subspace. This approach provides an exact solution to update an eigenspace and does not require storing original samples. Similar method was also used in [3,4] to update a subspace given new samples. We summarize Hall’s method in [26] by using scatter matrixes to simplify the representation. Suppose there are two subspaces 
                              
                                 
                                    
                                       Ω
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       U
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       Λ
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 N
                                 )
                              
                            and 
                              
                                 
                                    
                                       Ω
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 
                                    
                                       U
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 
                                    
                                       Λ
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 M
                                 )
                              
                           , which we are trying to merge to a new subspace 
                              
                                 Ω
                                 =
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       ¯
                                    
                                 
                                 ,
                                 U
                                 ,
                                 Λ
                                 ,
                                 M
                                 +
                                 N
                                 )
                              
                           . If the dimension of 
                              
                                 
                                    
                                       Ω
                                    
                                    
                                       1
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       Ω
                                    
                                    
                                       2
                                    
                                 
                              
                            are p and q, the dimension r of the merged subspace 
                              
                                 Ω
                              
                            satisfies: 
                              
                                 max
                                 (
                                 p
                                 ,
                                 q
                                 )
                                 ⩽
                                 r
                                 ⩽
                                 p
                                 +
                                 q
                                 +
                                 1
                              
                           . The vector connecting the centers of the two subspaces does not necessarily belong to either subspace. This vector causes the additional one in the upper bound of r.

It is easy to verify that the scatter matrix S of the merged subspace 
                              
                                 Ω
                              
                            satisfies, 
                              
                                 S
                                 =
                                 
                                    
                                       S
                                    
                                    
                                       1
                                    
                                 
                                 +
                                 
                                    
                                       S
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 
                                    
                                       MN
                                    
                                    
                                       M
                                       +
                                       N
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       1
                                    
                                 
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 
                                    
                                       (
                                       
                                          
                                             x
                                          
                                          
                                             1
                                          
                                       
                                       -
                                       
                                          
                                             x
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    
                                    
                                       T
                                    
                                 
                              
                           . We aim to find a sufficient orthogonal spanning of S. Let 
                              
                                 
                                    
                                       h
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 x
                                 )
                              
                            denote the residual vector of a vector 
                              
                                 x
                              
                            on 
                              
                                 
                                    
                                       Ω
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       h
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 x
                                 )
                                 =
                                 x
                                 -
                                 
                                    
                                       U
                                    
                                    
                                       1
                                    
                                 
                                 
                                    
                                       U
                                    
                                    
                                       1
                                    
                                    
                                       T
                                    
                                 
                                 x
                              
                           . Note that 
                              
                                 
                                    
                                       h
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 x
                                 )
                              
                            is orthogonal to 
                              
                                 
                                    
                                       U
                                    
                                    
                                       1
                                    
                                 
                              
                           , i.e. 
                           
                              
                                 h
                                 
                                    
                                       (
                                       x
                                       )
                                    
                                    
                                       ′
                                    
                                 
                                 U
                                 =
                                 0
                              
                           . Now, 
                              
                                 
                                    
                                       U
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 [
                                 
                                    
                                       U
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 v
                                 ]
                              
                            is a set of orthogonal bases to span the merged space, where 
                              
                                 v
                                 =
                                 GS
                                 
                                    
                                       
                                          
                                             
                                                h
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          
                                             
                                                U
                                             
                                             
                                                2
                                             
                                          
                                          ,
                                          (
                                          
                                             
                                                x
                                             
                                             
                                                2
                                             
                                          
                                          -
                                          
                                             
                                                x
                                             
                                             
                                                1
                                             
                                          
                                          )
                                          )
                                       
                                    
                                 
                              
                            and 
                              
                                 GS
                                 (
                                 ·
                                 )
                              
                            denote the Gram-Schmidt process.
                              Algorithm 1
                              Online Subspace learning algorithm 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   Input: (
                                                      
                                                         I
                                                         ,
                                                         M
                                                         ,
                                                         
                                                            
                                                               d
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         ,
                                                         L
                                                      
                                                   )
                                             
                                             
                                                
                                                   
                                                      
                                                         I
                                                         =
                                                         {
                                                         
                                                            
                                                               I
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         ,
                                                         ⋯
                                                         ,
                                                         
                                                            
                                                               I
                                                            
                                                            
                                                               n
                                                            
                                                         
                                                         ,
                                                         ⋯
                                                         }
                                                      
                                                   : a sequence of samples 
                                                      
                                                         M
                                                         =
                                                         ∅
                                                      
                                                   : the appearance manifold
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               d
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                      
                                                   : the initial dimension for each subspace L: the maximum number of subspaces
                                             
                                             
                                                
                                                   Output: 
                                                      
                                                         M
                                                         =
                                                         (
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         ,
                                                         ⋯
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               L
                                                            
                                                         
                                                         )
                                                      
                                                   : multi-local linear subspaces
                                             
                                             
                                                
                                                   while 
                                                   
                                                      
                                                         I
                                                         ≠
                                                         ∅
                                                      
                                                    
                                                   do
                                                
                                             
                                             
                                                
                                                   fetch 
                                                      
                                                         
                                                            
                                                               d
                                                            
                                                            
                                                               0
                                                            
                                                         
                                                         +
                                                         1
                                                      
                                                    samples and form a new subspace
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               n
                                                            
                                                         
                                                         ←
                                                         (
                                                         
                                                            
                                                               I
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         ,
                                                         ⋯
                                                         ,
                                                         
                                                            
                                                               I
                                                            
                                                            
                                                               i
                                                               +
                                                               
                                                                  
                                                                     d
                                                                  
                                                                  
                                                                     0
                                                                  
                                                               
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   if there exists an empty subspace then
                                                
                                             
                                             
                                                
                                                   
                                                   Add 
                                                      
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               n
                                                            
                                                         
                                                      
                                                    to 
                                                      
                                                         M
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   else
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               (
                                                               p
                                                               ,
                                                               q
                                                               )
                                                            
                                                            
                                                               ∗
                                                            
                                                         
                                                         =
                                                         arg
                                                         max
                                                         Sim
                                                         (
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               p
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               q
                                                            
                                                         
                                                         )
                                                         ,
                                                         
                                                         p
                                                         ,
                                                         q
                                                         ∈
                                                         [
                                                         1
                                                         ,
                                                         ⋯
                                                         ,
                                                         L
                                                         ]
                                                         ,
                                                         
                                                         p
                                                         ≠
                                                         q
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               m
                                                            
                                                         
                                                         =
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               p
                                                            
                                                         
                                                         ∪
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               q
                                                            
                                                         
                                                      
                                                    and replace 
                                                      
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               p
                                                            
                                                         
                                                      
                                                    and 
                                                      
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               q
                                                            
                                                         
                                                      
                                                    with 
                                                      
                                                         
                                                            
                                                               Ω
                                                            
                                                            
                                                               m
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                   end if
                                                
                                             
                                             
                                                
                                                   end while
                                                
                                             
                                          
                                       
                                    
                                 
                              

Given the sufficient orthogonal bases, we can obtain the SVD decomposition of S.
                              
                                 (14)
                                 
                                    
                                       
                                          U
                                       
                                       
                                          
                                             
                                                ′
                                             
                                             
                                                T
                                             
                                          
                                       
                                    
                                    
                                       
                                          SU
                                       
                                       
                                          ′
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            Λ
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      0
                                                   
                                                
                                                
                                                   
                                                      0
                                                   
                                                   
                                                      0
                                                   
                                                
                                             
                                          
                                       
                                    
                                    +
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      G
                                                      
                                                         
                                                            Λ
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      
                                                         
                                                            G
                                                         
                                                         
                                                            T
                                                         
                                                      
                                                   
                                                   
                                                      G
                                                      
                                                         
                                                            Λ
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      
                                                         
                                                            Γ
                                                         
                                                         
                                                            T
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      Γ
                                                      
                                                         
                                                            Λ
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      
                                                         
                                                            G
                                                         
                                                         
                                                            T
                                                         
                                                      
                                                   
                                                   
                                                      Γ
                                                      
                                                         
                                                            Λ
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      
                                                         
                                                            Γ
                                                         
                                                         
                                                            T
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    +
                                    
                                       
                                          MN
                                       
                                       
                                          M
                                          +
                                          N
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            gg
                                                         
                                                         
                                                            T
                                                         
                                                      
                                                   
                                                   
                                                      g
                                                      
                                                         
                                                            γ
                                                         
                                                         
                                                            T
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      γ
                                                      
                                                         
                                                            g
                                                         
                                                         
                                                            T
                                                         
                                                      
                                                   
                                                   
                                                      γ
                                                      
                                                         
                                                            γ
                                                         
                                                         
                                                            T
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    =
                                    R
                                    Λ
                                    
                                       
                                          R
                                       
                                       
                                          T
                                       
                                    
                                 
                              
                           where 
                              
                                 G
                                 =
                                 
                                    
                                       U
                                    
                                    
                                       1
                                    
                                    
                                       T
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       2
                                    
                                 
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 ,
                                 
                                 Γ
                                 =
                                 
                                    
                                       v
                                    
                                    
                                       T
                                    
                                 
                                 
                                    
                                       U
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 
                                 g
                                 =
                                 
                                    
                                       U
                                    
                                    
                                       1
                                    
                                    
                                       T
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       2
                                    
                                 
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       1
                                    
                                 
                                 )
                              
                            and 
                              
                                 γ
                                 =
                                 
                                    
                                       U
                                    
                                    
                                       ′
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       2
                                    
                                 
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       1
                                    
                                 
                                 )
                              
                           . Now, the eigenvalue of the merged subspace is 
                              
                                 Λ
                              
                            in Eq. (14) and the eigenvector U is simply 
                              
                                 
                                    
                                       U
                                    
                                    
                                       ′
                                    
                                 
                                 R
                              
                           . Note that the incrementally updating a subspace with one observation as in [4] is one special case of merging two subspaces by using Eq. (14).

The other critical step in Algorithm 1 is to determine the similarity between two subspaces. We use two factors to measure the similarity between two neighboring subspaces 
                              
                                 
                                    
                                       Ω
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       Ω
                                    
                                    
                                       2
                                    
                                 
                              
                           , the canonical angles (principal angles) and the data-compactness.

Suppose the dimensions of two subspaces are 
                              
                                 p
                                 ,
                                 q
                                 ,
                                 p
                                 ⩾
                                 q
                              
                           , then there are q canonical angles between the two subspaces. A numerical stable algorithm [27] computes the angles between all pairs of orthonormal vectors of the two subspaces as, 
                              
                                 cos
                                 
                                    
                                       θ
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       σ
                                    
                                    
                                       k
                                    
                                 
                                 (
                                 
                                    
                                       U
                                    
                                    
                                       1
                                    
                                    
                                       T
                                    
                                 
                                 
                                    
                                       U
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 ⋯
                                 ,
                                 q
                              
                           , where 
                              
                                 
                                    
                                       σ
                                    
                                    
                                       k
                                    
                                 
                                 (
                                 ·
                                 )
                              
                            is the kth sorted eigenvalue computed by SVD. The consistency of two neighboring subspaces can be represented as follows.
                              
                                 (15)
                                 
                                    
                                       
                                          Sim
                                       
                                       
                                          1
                                       
                                    
                                    (
                                    
                                       
                                          Ω
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          Ω
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          
                                             ∏
                                          
                                          
                                             k
                                             =
                                             q
                                             -
                                             
                                                
                                                   d
                                                
                                                
                                                   0
                                                
                                             
                                             +
                                             1
                                          
                                          
                                             q
                                          
                                       
                                    
                                    
                                       
                                          σ
                                       
                                       
                                          k
                                       
                                    
                                    (
                                    
                                       
                                          U
                                       
                                       
                                          1
                                       
                                       
                                          T
                                       
                                    
                                    
                                       
                                          U
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    
                                    k
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    q
                                 
                              
                           As the dimensionality of subspaces is larger than 
                              
                                 
                                    
                                       d
                                    
                                    
                                       0
                                    
                                 
                              
                           , the initial dimension, we select the 
                              
                                 
                                    
                                       d
                                    
                                    
                                       0
                                    
                                 
                              
                            largest principal angles, which approximately measure the angle between two local subspaces. In a 3D space, the largest canonical angle between two 2D subspaces is equivalent to the angle between the two planes. In this case, we prefer to merge 2D patches with a small plane-to-plane angle. Note that the merge only happens between neighbor subspaces. The neighborhood is defined according to the mean vector 
                              
                                 
                                    
                                       L
                                    
                                    
                                       2
                                    
                                 
                              
                            distance. Merging subspaces with a small principal angle can avoid destroying the local structure of the appearance manifold.

The other factor to consider is data-compactness, which measures how much extra dimensionality is incurred by a merge operation. Suppose the dimension of two subspaces 
                              
                                 
                                    
                                       Ω
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       Ω
                                    
                                    
                                       2
                                    
                                 
                              
                            is 
                              
                                 p
                                 ,
                                 q
                                 ,
                                 p
                                 ⩾
                                 q
                              
                           , the sorted eigenvalues of original merged subspace are 
                              
                                 
                                    
                                       Λ
                                    
                                    
                                       r
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       λ
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                                 )
                                 ,
                                 
                                 r
                                 =
                                 p
                                 +
                                 q
                                 +
                                 1
                              
                           . The similarity based on data-compactness is defined as
                              
                                 (16)
                                 
                                    
                                       
                                          Sim
                                       
                                       
                                          2
                                       
                                    
                                    (
                                    
                                       
                                          Ω
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          Ω
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   
                                                      p
                                                   
                                                
                                             
                                             
                                                
                                                   λ
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             r
                                          
                                       
                                    
                                    
                                       
                                          λ
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                           If 
                              
                                 
                                    
                                       Sim
                                    
                                    
                                       2
                                    
                                 
                              
                            is close to one, this indicates the merge operation does not incur any new dimension; on the contrary, if 
                              
                                 
                                    
                                       Sim
                                    
                                    
                                       2
                                    
                                 
                              
                            is small, this indicates the variations in 
                              
                                 
                                    
                                       Ω
                                    
                                    
                                       1
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       Ω
                                    
                                    
                                       2
                                    
                                 
                              
                            cannot use common eigenvectors to represent. Combining the two factors in Eqs. (15) and (16), the final similarity between two subspaces is defined in Eq. (17).
                              
                                 (17)
                                 
                                    Sim
                                    (
                                    
                                       
                                          Ω
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          Ω
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          Sim
                                       
                                       
                                          1
                                       
                                    
                                    (
                                    
                                       
                                          Ω
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          Ω
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          w
                                       
                                       
                                          d
                                       
                                    
                                    
                                       
                                          Sim
                                       
                                       
                                          2
                                       
                                    
                                    (
                                    
                                       
                                          Ω
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          Ω
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           where 
                              
                                 
                                    
                                       w
                                    
                                    
                                       d
                                    
                                 
                              
                            is the weight to balance these two factors. We use 
                              
                                 
                                    
                                       w
                                    
                                    
                                       d
                                    
                                 
                                 =
                                 0.2
                              
                            in experiments. One example of online trained local subspaces is shown in Fig. 6
                           . A saddle-like 3D surface (shown in Fig. 6(a)) is generated with Gaussian noise. The 3D points are input to Algorithm 1 sequentially. The final subspaces are shown in Fig. 6(b) with 
                              
                                 L
                                 =
                                 15
                                 ,
                                 
                                 η
                                 =
                                 0.995
                              
                           . The initial dimension 
                              
                                 
                                    
                                       d
                                    
                                    
                                       0
                                    
                                 
                              
                            is one. Although the online built subspaces depend on the order of the samples, a compact representation of the samples can always be created as long as the data are input with local smoothness. The subspace updating operation dominates the complexity of the generative tracker. Merging two subspaces with dimension 
                              
                                 p
                                 ,
                                 q
                              
                            requires Golub-Reinsch SVD 
                              
                                 O
                                 (
                                 
                                    
                                       r
                                    
                                    
                                       3
                                    
                                 
                                 )
                              
                            of 
                              
                                 r
                                 =
                                 p
                                 +
                                 q
                                 +
                                 1
                              
                            dimension square matrix. Since the dimension of each subspace is low, the total complexity is quite low. The low dimensionality of the local subspaces can guarantee both the local property and efficient computation. Note that the multiple linear subspaces can be simplified to be a light-weight model by using only one linear subspace to estimate the global appearance as in IVT [3].

For the discriminative model, we adopt an incremental SVM algorithm, LASVM 
                        [21], to train a classifier between the object and background. SVM [28] is able to form the optimal separating function, which reduces to a linear combination of kernels on the training data, 
                           
                              f
                              (
                              x
                              )
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    j
                                 
                              
                              
                                 
                                    α
                                 
                                 
                                    j
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    j
                                 
                              
                              K
                              (
                              
                                 
                                    x
                                 
                                 
                                    j
                                 
                              
                              ,
                              x
                              )
                              +
                              b
                           
                        , with training samples 
                           
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                           
                         and corresponding label 
                           
                              
                                 
                                    y
                                 
                                 
                                    i
                                 
                              
                              =
                              ±
                              1
                           
                         by minimizing the objective function
                           
                              (18)
                              
                                 
                                    
                                       
                                          min
                                       
                                       
                                          w
                                          ,
                                          b
                                       
                                    
                                 
                                 |
                                 |
                                 w
                                 |
                                 
                                    
                                       |
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 C
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          n
                                       
                                    
                                 
                                 
                                    
                                       ξ
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    y
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    ˆ
                                 
                              
                              (
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              )
                              ⩾
                              1
                              -
                              
                                 
                                    ξ
                                 
                                 
                                    i
                                 
                              
                           
                        , a relax factor 
                           
                              
                                 
                                    ξ
                                 
                                 
                                    i
                                 
                              
                              ⩾
                              0
                           
                        . In practice, this is achieved by maximizing the dual objective function 
                           
                              
                                 
                                    max
                                 
                                 
                                    α
                                 
                              
                              W
                              (
                              α
                              )
                           
                         with 
                           
                              W
                              (
                              α
                              )
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    α
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    1
                                 
                                 
                                    2
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ,
                                    j
                                 
                              
                              
                                 
                                    α
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    α
                                 
                                 
                                    j
                                 
                              
                              K
                              (
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    x
                                 
                                 
                                    j
                                 
                              
                              )
                           
                        , subject to
                           
                              (19)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                             
                                                
                                                   α
                                                
                                                
                                                   i
                                                
                                             
                                             =
                                             0
                                             ,
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                
                                                   A
                                                
                                                
                                                   i
                                                
                                             
                                             ⩽
                                             
                                                
                                                   α
                                                
                                                
                                                   i
                                                
                                             
                                             ⩽
                                             
                                                
                                                   B
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    A
                                 
                                 
                                    i
                                 
                              
                              =
                              min
                              (
                              0
                              ,
                              
                                 
                                    Cy
                                 
                                 
                                    i
                                 
                              
                              )
                              ,
                              
                              
                                 
                                    B
                                 
                                 
                                    i
                                 
                              
                              max
                              (
                              0
                              ,
                              
                                 
                                    Cy
                                 
                                 
                                    i
                                 
                              
                              )
                           
                        .

As suggested in Sequential Minimization Optimization (SMO) proposed by Platt in [32], a SVM solver can be regarded as updating 
                           
                              α
                           
                         along some direction to maximize 
                           
                              W
                              (
                              α
                              )
                           
                        . Let 
                           
                              g
                              =
                              (
                              
                                 
                                    g
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    g
                                 
                                 
                                    n
                                 
                              
                              )
                           
                         denote the gradient of 
                           
                              W
                              (
                              α
                              )
                           
                        
                        
                           
                              (20)
                              
                                 
                                    
                                       g
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       ∂
                                       W
                                       (
                                       α
                                       )
                                    
                                    
                                       ∂
                                       
                                          
                                             α
                                          
                                          
                                             k
                                          
                                       
                                    
                                 
                                 =
                                 
                                    
                                       y
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                                 K
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       k
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       y
                                    
                                    
                                       k
                                    
                                 
                                 -
                                 
                                    
                                       y
                                    
                                    
                                       ˆ
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       k
                                    
                                 
                                 )
                                 +
                                 b
                              
                           
                        In practice, this is achieved by maximizing the dual objective function 
                           
                              
                                 
                                    max
                                 
                                 
                                    α
                                 
                              
                              W
                              (
                              α
                              )
                           
                         where 
                           
                              W
                              (
                              α
                              )
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    α
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    1
                                 
                                 
                                    2
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    ,
                                    j
                                 
                              
                              
                                 
                                    α
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    α
                                 
                                 
                                    j
                                 
                              
                              K
                              (
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    x
                                 
                                 
                                    j
                                 
                              
                              )
                           
                        , subject to
                           
                              (21)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 0
                                 ,
                                 
                                 
                                    
                                       A
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 
                                    
                                       B
                                    
                                    
                                       i
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    A
                                 
                                 
                                    i
                                 
                              
                              =
                              min
                              (
                              0
                              ,
                              
                                 
                                    Cy
                                 
                                 
                                    i
                                 
                              
                              )
                              ,
                              
                              
                                 
                                    B
                                 
                                 
                                    i
                                 
                              
                              max
                              (
                              0
                              ,
                              
                                 
                                    Cy
                                 
                                 
                                    i
                                 
                              
                              )
                           
                        . Here, 
                           
                              α
                           
                         is a vector of weights on 
                           
                              
                                 
                                    y
                                 
                                 
                                    i
                                 
                              
                           
                        .

Essentially, SMO suggests that optimization is faster when the search direction mostly contains zero coefficients. LASVM uses the search directions whose coefficients are all zero except for a single +1 and a single −1. The two non-zero coefficients, are called 
                           
                              τ
                           
                        -violating pair 
                        
                           
                              (
                              i
                              ,
                              j
                              )
                           
                         if 
                           
                              
                                 
                                    α
                                 
                                 
                                    i
                                 
                              
                              〈
                              
                                 
                                    B
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    α
                                 
                                 
                                    j
                                 
                              
                              〉
                              
                                 
                                    A
                                 
                                 
                                    j
                                 
                              
                           
                        , and 
                           
                              
                                 
                                    g
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    g
                                 
                                 
                                    j
                                 
                              
                              >
                              τ
                           
                        , where 
                           
                              τ
                           
                         is a small positive value. and LASVM selects the 
                           
                              τ
                           
                        -violating pair 
                           
                              (
                              i
                              ,
                              j
                              )
                           
                         that maximizes the directional gradient 
                           
                              
                                 
                                    g
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    g
                                 
                                 
                                    j
                                 
                              
                           
                        .

The LASVM algorithm contains two procedures named PROCESS and REPROCESS [21]. When a new sample 
                           
                              
                                 
                                    x
                                 
                                 
                                    k
                                 
                              
                           
                         arrives, PROCESS forms a 
                           
                              τ
                           
                        -violating pair 
                        
                           
                              (
                              i
                              ,
                              j
                              )
                           
                        , which contains 
                           
                              
                                 
                                    x
                                 
                                 
                                    k
                                 
                              
                           
                         and another existing support vector, and updates the weights of this pair. Following PROCESS, REPROCESS selects a 
                           
                              τ
                           
                        -violating pair from the set of support vectors and updates their weights. The new sample 
                           
                              
                                 
                                    x
                                 
                                 
                                    k
                                 
                              
                           
                         may become a new support vector through PROCESS, while another support vector may need to switch out by REPROCESS. Both PROCESS and REPROCESS select 
                           
                              τ
                           
                        -violating pair with the largest gradient. The complexity of such a selection grows linearly with the number of vectors. A finishing step, which runs REPROCESS multiple times to further remove 
                           
                              τ
                           
                        -violating pairs as much as possible, is performed after online process. For tracking, the intermediate classifier is useful, hence we run this finishing step every 10 frames. Note that, since we do not need to look at the ignored vectors for incremental learning, 
                           
                              τ
                           
                        -violating pair is only selected from the set of support vectors.
                           Algorithm 2
                           Online SVM algorithm 
                                 
                                    
                                       
                                       
                                          
                                             
                                                Input: (
                                                   
                                                      I
                                                      ,
                                                      C
                                                      ,
                                                      t
                                                   
                                                )
                                          
                                          
                                             
                                                
                                                   
                                                      I
                                                      
                                                      ≕
                                                      
                                                      {
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      ,
                                                      …
                                                      ,
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            n
                                                         
                                                      
                                                      ,
                                                      …
                                                      }
                                                   
                                                : a sequence of samples
                                          
                                          
                                             
                                                
                                                   
                                                      C
                                                      
                                                      ≕
                                                      
                                                   
                                                the seed classifier
                                          
                                          
                                             
                                                t: the finishing cycle
                                          
                                          
                                             
                                                Output: 
                                                   
                                                      C
                                                      
                                                      ≕
                                                      
                                                   
                                                the online trained classifier
                                          
                                          
                                             
                                                while 
                                                
                                                   
                                                      I
                                                      ≠
                                                      ∅
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             
                                                1. Remove old ignored vectors
                                          
                                          
                                             
                                                2. Remove old SVs and REPROCESS in all vectors
                                          
                                          
                                             
                                                3. Fetch a new sample 
                                                   
                                                      (
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      )
                                                   
                                                 and do PROCESS(
                                                   
                                                      
                                                         
                                                            I
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                )
                                          
                                          
                                             
                                                4. Do REPROCESS once in SVs
                                          
                                          
                                             
                                                5. Do finishing every t frames
                                          
                                          
                                             
                                                end while
                                             
                                          
                                       
                                    
                                 
                              
                           

For the online tracking problem, too many appearance variations and limited training samples may degrade the discriminative ability of a SVM tracker. To avoid this, we propose to decrementally train the SVM model and let it focus on recent appearance variations within a sliding window. REPROCESS in LASVM can be used to realize the “unlearning” of old samples. For decremental learning, removing ignored vectors (when ignored vectors move out of the sliding window) will not change the decision boundary. However, the removal of a support vector will affect the decision boundary. In order to remove one support vector 
                              
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                              
                           , we first zero its coefficient and put its coefficient into the vector 
                              
                                 
                                    
                                       s
                                    
                                    
                                       j
                                    
                                 
                              
                            that is closest to 
                              
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                              
                           , i.e. 
                           
                              
                                 j
                                 =
                                 arg
                                 min
                                 |
                                 |
                                 
                                    
                                       s
                                    
                                    
                                       j
                                    
                                 
                                 -
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 |
                                 |
                              
                            and 
                              
                                 
                                    
                                       α
                                    
                                    
                                       j
                                    
                                 
                                 ←
                                 
                                    
                                       α
                                    
                                    
                                       j
                                    
                                 
                                 +
                                 
                                    
                                       α
                                    
                                    
                                       i
                                    
                                 
                              
                           , to keep the constraint in Eq. (21). We then apply REPROCESS to re-select 
                              
                                 τ
                              
                           -violating pairs in set of both ignored and support vectors and update the weights. Although decremental learning reduces the number of support vectors, the computation time is the same as the one without using decremental learning in the case where a linear kernel is used. The goal of adopting decremental learning is to focus on recent appearance variations rather than computational efficiency. Another way to give more weight on recent training samples is to increase the C in SVM, i.e. 
                           
                              
                                 
                                    
                                       C
                                    
                                    
                                       t
                                    
                                 
                                 =
                                 
                                    
                                       C
                                    
                                    
                                       t
                                       -
                                       1
                                    
                                 
                                 ·
                                 (
                                 1
                                 +
                                 ∊
                                 )
                              
                           , which means the cost of wrongly classifying the recent sample is more expensive than the old samples. However, this is not appropriate for online training as it is difficult to normalize the weight during the online process and that will also make C unbounded. Too large a C causes SVM to overfit the training samples. Besides the extra adjusting by REPROCESS, the decremental learning only requires to store all samples within a sliding window. The overview of the online SVM algorithm is shown in Algorithm 2.

Our visual tracking framework takes the initial labeled data as input. Ideally, an object of interest is tagged from the 5–10 very first frames, especially for the multi-subspace model. In practice, we use a simple template matching method to help initializing the tracker when the object is provided only in the first frame. All the experimental results are based on one labeled data in the first frame.

@&#IMPLEMENTATION DETAILS@&#

The framework is implemented as follows. Given the initial labeled data, we initialize all of the models independently. When tracking starts, all particles are sequentially passed through the cascade particle filter which consists of three stages. At stage 1 and stage 2, the models evaluate all the input samples and filter out a number of negative samples then propagate the rest to the next stage. At the stage 3, both models are updated by co-training each other.

During co-training, each learner labels the unlabeled data on which it makes a confidence prediction based on its own knowledge. For this purpose, a threshold is needed for each learner. For the generative model, we set a threshold based on the log likelihood in Eq. (13). To be more conservative, we use a second criteria: we find several local optima in the posterior distribution and if the ratio 
                              
                                 ρ
                              
                            between the second optimum and the global optimum is small enough (
                              
                                 ρ
                                 ≤
                                 0.7
                              
                           ), we accept the global optimum as a positive sample, and all other samples that far enough from the global optimum are negative samples. For the discriminative model, due to the very limited training data, positive and negative training data are usually well separated. Thus, we cannot adopt the way used in [19] to select the threshold. Instead, we select the confidence threshold so that at most 80% positive samples’ confidence is above that threshold. This threshold is updated every 30 frames. The positive and negative samples labeled by the generative model are not added to the discriminative model unless they are close to the decision boundary. To transfer the SVM confidence into a probability, we use the method in [29] to fit a sigmoid function that is also updated every 30 frames.

For the multiple linear subspaces and the online SVMdiscriminative models, we use image vectors of size 
                              
                                 32
                                 ×
                                 32
                              
                            (for face) or 
                              
                                 32
                                 ×
                                 64
                              
                            (for human and vehicle). For the generative model, 
                              
                                 η
                              
                            is set to 0.95–0.99 and the maximum number of subspaces is set to 5-10. The initial subspace dimension is 4, which is very low compared to the input space. Thus, every 5 frames form a new subspace, which is then inserted into the subspace pool. For the discriminative model, we use LASVM with R-HOG feature vectors, which are created from 16×16 blocks containing 8×8 cells. The strike size is 8 to allow overlapping HOG descriptors. Each cell has 9 bins oriented histogram; hence, we have 36-bin oriented histogram for a block. For a 
                              
                                 32
                                 ×
                                 64
                              
                            window, the vector size is 756. We use the linear kernel function in SVM. The number of support vectors varies between 50 and 150 for different sequences. Since the linear kernel is used, we can combine all the support vectors into a single one when testing. We use a sliding window of 200 frames. The Bayesian inference framework generates 1500 particles. The running time is discussed in detail in the comparison section.

In this section, we demonstrate the advantages of our co-training by comparing the co-trained tracker with two components, multiple linear subspaces and the online SVM, without co-training. We tested on several published data sets in various challenging situations: abrupt motion (“Jumping”, “Handheld”, “Scale”), clutter background (“Handheld”, “Clutter”), viewpoint change (“Handheld”), leaving field of view (“UAVperson1”, “UAVperson2”). These test cases contain different types of object:face (“Jumping”), pedestrian (“Handheld”, “UAVperson1”, “UAVperson2”), and others(“Scale”, “Clutter”). Some visual results are shown in Fig. 7
                           , where the tracked objects are bounded with green boxes. The red box indicates none of the models is updated in this frame. For quantitative comparison, the average center location error (in pixels) of each tracker is evaluated and shown in Table 1
                           , where the “Frames” column contains the number of frames in a sequence, and Fig. 8
                           .

To demonstrate the efficiency of using cascade particle filter, we set up three trackers that have one layer, two layers, and three layers, respectively. The one-layer tracker only uses our proposed co-trained models. The two-layer tracker contains the co-trained tracker and the discriminative color feature online selection model. Note that, the model in the online feature selection is updated after every 30 frames. The three-layer tracker contains the models in the two-layer tracker and the single linear subspace model which is a simplified one from the multiple linear subspaces. For faster computation, instead of using a large sample patch (32×32), we use a size of 20×20 pixels for learning the linear subspace in this stage. Their configurations are illustrated in Fig. 9
                           . After the first layer, half of the samples are kept; while after the second layer, 25% of the samples remain.Therefore, with the sampling of 600 particles, 300 remaining particles are evaluated by the final stage of the two-layer tracker; whereas 75 best particles are evaluated in the last stage of the three-layer tracker.

Because these three trackers share the same framework, we can compare them by looking at the average center location error. In this way, we can have a closer look at the tradeoff between the different layers. At the same time, the running time is also provided to show the improvement of the cascade model. The comparison is shown in Table 2
                           . The six sequences used in the first discussed experiment are adopted. The results clearly show that cascade particle filter improves the running time performance by a large margin, while the localization error is not increasing too much.

We compare our tracker with several other state-of-the-arts which are Incremental Visual Tracking (IVT) [3], fragment-based tracking (FT) [35], L1-Minimization Tracker [40], online selection of discriminative color feature (OSDC) [8], ensemble tracking (ET) [7], multiple instance learning tracking (MIL) [33], Discriminative Nonorthogonal Binary Subspace Tracker [41], P-NLearning Tracker [37], and Structured Output Tracking with Kernel [42]. All of the source code are provided by the authors except [8] implemented by ourselves. The parameters are used as suggested in the papers.

We compare these methods with challenging data sets including “Jumping”, “Handheld”, “UAVperson1”, “UAVperson2”, which are already described above, and the two new sequences which contain significant illumination changes (“Dark”), and viewpoint changes (“Vehicle”). It is important to note that only L1-Minimization Tracker and IVT consider rotation factor while the others do not. Also, FT, ET, and OSDC do not consider scale changes. Different methods also have different initialization; for example, FTand OSDC require an initial rectangle which can well fit the object inside while our tracker can deal with a loose initial rectangle. For that reason, to compare the robustness of these trackers, instead of using average center location error, we use the metric of the number of frames which they can successfully track the objects before tracking failure, i.e. after this frame a tracker cannot recover without re-initialization. A successfully tracked frame is a frame where the result bounding box overlaps >70% of the ground-truth. Table 3
                            shows the comparison between different methods. The number of frames and the number of frames where occlusion happens in each sequence are also shown in Table 3. The comparison demonstrates that the co-trained tracker is robust and consistent comparing to others. The number of successful tracked frames does not include frames contains object occlusion. Note that OSDC requires color information, thus it cannot process some sequences, which are indicated as “n/a”. The visual results are shown in Fig. 10
                           , where the tracked objects are bounded with green boxes. The red box indicates none of the models is updated in this frame. In experiments, we frequently find that the co-trained tracker has better self-awareness of current tracking performance and can safely enlarge the search range (by changing the diffusion dynamics) without being confused by distracters in the background. Also, it can successfully avoid drifting caused by varying viewpoints and illumination changes.

One of the main advantages of our tracker is the reacquisition ability, which was not well explored by other state-of-the-art algorithms. Our method not only ensures the quality of long-term tracking results but also provides the capability to re-detect an observed object after it leaves the field of view. However, there is a limited number of data sets which contain such cases. To evaluate this reacquisition ability, we synthesize the leaving out of the field of view behavior of an object. We create a new sequence after deleting several frames from the original one. In order to generate a new consistent and proper data set, we use seven original sequences which are “Clutter”, “Handheld”, “Jumping”, “Scale”, “Sylvester”, “UAVperson1”, and “UAVperson2”. We start from the beginning of the sequence (after ignoring some initial frames for the learning phase),for each step of 50 frames, we replace 30 continuous frames by a synthetic background image. Note that each step forms a new sequence. 109 new sequences are thus created. Some examples of the new data sets are shown in Fig. 11
                        .

To evaluate the reacquisition ability, we count the number of tracked(reacquired) cases, the number of missed cases, and the number of false alarm cases. If the tracker can reacquire the object within at most 10 frames after the object re-appears, and the overlapped region between the tracked and the ground-truth windows is larger than 50%of the ground-truth window, it is counted as tracked case.The details of the results are shown in Table 4
                        .

It can be observed that most of our missed cases come from the two sequences “Scale” and “Sylvester”. This is because they contain extremely difficult cases where the object appearance changes differently in terms of scale, pose, lighting while the synthesized leaving-out-of-field cases happen (Fig. 12
                        ). More results from our tracker are shown in Fig. 13
                        .

We have proposed a co-training framework with cascade particle filter to combine global generative and local discriminate models. In co-training, there are two models: the generative one builds a compact representation of the complete appearance of an object by online learning a number of local linear subspaces; while the discriminative model that adopts the online SVM algorithm focuses on the temporally local appearance. By co-training, the two models can train each other on-the-fly with very limited initialization. Though no offline training data is used, our method has strong reacquisition ability and robustness against distracters in background. At the same time, the cascade particle filter framework helps the tracker improve the speed significantly by building a cascade of multiple models with multiple complementary features. Extensive experiments demonstrate that our method can handle different challenging situations and provide a powerful reacquisition ability to detect an observed object after it leaves the field of view, or total occlusion.

Our proposed method relies on smoothness in appearance changes and cannot deal with abrupt appearance changes. Also, our method cannot explicitly handle the partial occlusion problem. Severe partial occlusions are often regarded as non-object by our method. This is a safe strategy to avoid updating the model with wrong appearance instances. In the future, we expect to combine this method with offline learning for tracking one particular type of object. For tracking a particular type of objects, the robustness of tracking can be significantly improved by combining online training with offline training, for example, in [30,31]. We also expect to introduce collaborative part-based trackers under this co-training framework to deal with partial occlusions.

Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.cviu.2013.11.003.


                     
                        
                           
                        
                     
                  

@&#REFERENCES@&#

