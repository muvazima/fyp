@&#MAIN-TITLE@&#Evolutionary optimization for disaster relief operations: A survey

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           We provide an overview of evolutionary algorithms for disaster relief operations.


                        
                        
                           
                           We show major strengths and shortcomings of the state-of-the-arts.


                        
                        
                           
                           We discuss potential directions for future research.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Disaster relief

Emergency operational problems

Evolutionary algorithms (EAs)

Optimization

@&#ABSTRACT@&#


               
               
                  Effective planning and scheduling of relief operations play a key role in saving lives and reducing damage in disasters. These emergency operations involve a variety of challenging optimization problems, for which evolutionary computation methods are well suited. In this paper we survey the research advances in evolutionary algorithms (EAs) applied to disaster relief operations. The operational problems are classified into five typical categories, and representative works on EAs for solving the problems are summarized, in order to give readers a general overview of the state-of-the-arts and facilitate them to find suitable methods in practical applications. Several state-of-art methods are compared on a set of real-world emergency transportation problem instances, and some lessons are drawn from the experimental analysis. Finally, the strengths, limitations and future directions in the area are discussed.
               
            

@&#INTRODUCTION@&#

Our world is full of threats from natural and man-made disasters. Particularly, there are an increasing number of heavy disasters occurred in recent years, such as the 2008 Wenchuan earthquake, the 2010 Zhouqu mudslides, the 2011 Japan tsunami, and the recent Haiyan typhoon in Philippines, which have caused serious damage to lives and property. In a disaster situation, relief operations have to be planned and implemented effectively in order to be able to mitigate the damage as much as possible.

From a mathematical viewpoint, disaster relief operations involve a wide variety of complex optimization problems. The area of optimization has a vast and fertile overlap between operations research (OR) and computer science (CS). In general an optimization problem can be defined as to find a feasible solution x
                     *
                     ∈
                     X that maximizes (minimizes) a objective function f, while X is a finite or infinite solution space.

Being confronted with an optimization problem, the first concern of computer scientists is whether the problem can be solved by some efficient algorithms (and in particular in polynomial time). However, most problems arising in OR are proved to be NP-hard, i.e., polynomial-time intractable unless P
                     =
                     NP 
                     [1]. Moreover, under emergency conditions the solutions to operational problems need to be developed within a very limited time. Hence, traditional exact methods are often computationally unaffordable and of too limited applicability.

Evolutionary computation is a class of optimization methods drawing inspiration from natural evolution and adaptation [2]. Due to their simplicity, sufficient flexibility and general applicability, evolutionary algorithms (EAs) are well suited to tackle a wide range of computationally intractable problems. They do not always guarantee reaching the exact optimal solution in a single simulation run, but in most cases they can obtain satisfying solutions within an acceptable computational time. Particularly, intrinsic probabilistic behaviors render them capable of effectively handling real world problems involving nonlinearity, complexity, noisy environment, imprecision, uncertainty and vagueness [3,4]. Consequently, evolutionary optimization has attracted wide attention and has been extensively explored in OR in recent decades.

The research on evolutionary optimization methods for disaster relief operations, in comparison with other sub-areas of OR, is limited. But it has started to evolve a lot in the last years. A variety of EAs, including genetic algorithm (GA) [5], particle swarm optimization (PSO) [6], ant colony optimization (ACO) [7], etc., have found a growing number of applications in relief operations (as shown in Fig. 1
                     ), and demonstrated their effectiveness on many challenging emergency problems.

In this paper we present a survey of research works on this topic, the main purpose of which is threefold:
                        
                           1.
                           Provide readers a general overview of the major developments emerged throughout the years.

Show major strengths and shortcomings of the state-of-the-arts, and help practitioners to find valuable approaches that can be referred in the practice of disaster relief.

Discuss potential directions for future research, and stimulate more interest in this cross-disciplinary field.

In the remainder of the paper, we first classify optimization problems in disaster relief operations into five typical categories in Section 2, and describe recent advances in EAs for solving the problems in Section 3. Section 4 presents the experiment of six typical EAs on a set of real-world emergency transportation problem instances. Section 5 discusses the strengths, limitations and future directions in the area, and finally Section 6 concludes.

Disaster relief operations involve activities including establishing emergency facilities, searching and rescuing survivors, providing health and medical assistance, distributing relief supplies, transferring injuries, scheduling rescue forces, etc., and the coordination of these activities across organizations [8,9]. Thus they are associated with a variety of operational problems that often lie outside the scope of the conventional optimization methods. In this paper, we classify the problem into the following five categories:
                        
                           •
                           General transportation planning problems, which are to make up programs for delivering relief supplies from distribution centers (sources) to demand points (targets). But we do not place detailed path planning and vehicle routing in this category.

Facility location problems, which are to arrange emergency facilities on appropriate locations to serve the demand points.

Routing problems, which include planning routes for vehicles, rescuers, and evacuees.

Roadway repair problems, which are to repair damaged roadways and rehabilitate the lifelines to demand areas.

Integrated problems, which need to solve a set of above individual problems under one or more common objectives.

As a classic problem in OR, the basic transportation problem considers delivering a homogeneous commodity from a set of m sources to a set of n targets. Suppose the supply of source i is a
                        
                           i
                        , the demand of target j is b
                        
                           j
                        , the cost for transporting one unit of commodity from source i to target j is c
                        
                           ij
                        , then the problem is to determine the commodity amount x
                        
                           ij
                         from each source i to each target j (1≤
                        i
                        ≤
                        m, 1≤
                        j
                        ≤
                        n), such that the total transportation cost is minimized. It can be modeled as a special case of the linear program (LP) as follows:
                           
                              (1)
                              
                                 
                                    
                                       
                                          min
                                       
                                       
                                          f
                                          =
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             m
                                          
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             c
                                             ij
                                          
                                          
                                             x
                                             ij
                                          
                                       
                                    
                                    
                                       
                                          
                                             s
                                             .
                                             t
                                             .
                                          
                                       
                                       
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             m
                                          
                                          
                                             x
                                             ij
                                          
                                          ≥
                                          
                                             b
                                             j
                                          
                                          ,
                                          
                                          j
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                       
                                    
                                    
                                       
                                       
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             n
                                          
                                          
                                             x
                                             ij
                                          
                                          ≤
                                          
                                             a
                                             i
                                          
                                          ,
                                          
                                          i
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          m
                                       
                                    
                                    
                                       
                                       
                                          
                                             x
                                             ij
                                          
                                          ≥
                                          0
                                          ,
                                          
                                          i
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          m
                                          ,
                                          
                                          
                                          j
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          n
                                       
                                    
                                 
                              
                           
                        
                     

Although this problem can be solved by specialized methods that are more efficient than standard linear programs [10], EAs can provide much better performance on very large problem instances [11]. Moreover, real-world problems typically have to deal with heterogenous commodities and transportation modes, involving additional (and often nonlinear) objectives and constraints [12]. Such problems should be characterized by more complex integer programming (IP) or mixed integer programming (MIP) models, which are much better suited for evolutionary optimization than standard optimization method.

Furthermore, transportation in emergency logistics [13] is often subject to uncertainty and randomization, has very limited time constraints, focuses more concern on timeliness and/or risk rather than transportation cost. Taking these extra properties into consideration, much more efforts should be put into the design of efficient algorithms.

The problems of locating emergency facilities, such as fire stations, medical services, shelters, etc., based on the topography of potential facilities, can be divided into two sub-classes: continuous facility location problems, where facilities are allowed to be sited on every point in a planning area, and discrete facility location problems, where there is a discrete set of candidate locations. Generally speaking, the first class often uses formulation of LP and nonlinear programming (NLP) problems, while the second class is often modeled by classical covering problems and their variants, such as set covering, vertex/egde covering, covering location, and partial covering [14,15].

The simplest form of the facility location problem, which considers providing a single facility to cover a maximum number of demand points, has efficient exact solution methods [16,17]. However, involving multiple facilities leads to NP-hard problems, such as the p-median problem (2) and the maximum covering problem (3):
                           
                              (2)
                              
                                 
                                    
                                       
                                          min
                                       
                                       
                                          f
                                          =
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                D
                                             
                                          
                                          
                                             ∑
                                             
                                                j
                                                ∈
                                                F
                                             
                                          
                                          
                                             c
                                             ij
                                          
                                          
                                             y
                                             ij
                                          
                                       
                                    
                                    
                                       
                                          
                                             s
                                             .
                                             t
                                             .
                                          
                                       
                                       
                                          
                                             ∑
                                             
                                                j
                                                ∈
                                                F
                                             
                                          
                                          
                                             x
                                             j
                                          
                                          =
                                          p
                                       
                                    
                                    
                                       
                                       
                                          
                                             ∑
                                             
                                                j
                                                ∈
                                                F
                                             
                                          
                                          
                                             y
                                             ij
                                          
                                          =
                                          1
                                          ,
                                          
                                          ∀
                                          i
                                          ∈
                                          D
                                       
                                    
                                    
                                       
                                       
                                          
                                             x
                                             j
                                          
                                          ∈
                                          {
                                          0
                                          ,
                                          1
                                          }
                                          ,
                                          
                                          ∀
                                          j
                                          ∈
                                          F
                                       
                                    
                                    
                                       
                                       
                                          
                                             y
                                             ij
                                          
                                          ∈
                                          {
                                          0
                                          ,
                                          1
                                          }
                                          ,
                                          
                                          ∀
                                          i
                                          ∈
                                          D
                                          ,
                                          
                                          
                                          ∀
                                          j
                                          ∈
                                          F
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       
                                          max
                                       
                                       
                                          f
                                          =
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                D
                                             
                                          
                                          
                                             w
                                             i
                                          
                                          
                                             z
                                             i
                                          
                                       
                                    
                                    
                                       
                                          
                                             s
                                             .
                                             t
                                             .
                                          
                                       
                                       
                                          
                                             z
                                             i
                                          
                                          −
                                          
                                             ∑
                                             
                                                j
                                                ∈
                                                F
                                             
                                          
                                          
                                             x
                                             j
                                          
                                          ≤
                                          0
                                          ,
                                          
                                          ∀
                                          i
                                          ∈
                                          D
                                       
                                    
                                    
                                       
                                       
                                          
                                             x
                                             j
                                          
                                          ∈
                                          {
                                          0
                                          ,
                                          1
                                          }
                                          ,
                                          
                                          ∀
                                          j
                                          ∈
                                          F
                                       
                                    
                                    
                                       
                                       
                                          
                                             z
                                             i
                                          
                                          ∈
                                          {
                                          0
                                          ,
                                          1
                                          }
                                          ,
                                          
                                          ∀
                                          i
                                          ∈
                                          D
                                       
                                    
                                 
                              
                           
                        where F is the set of candidate facility locations, D is the set of demand points, and c
                        
                           ij
                         is the cost of assigning demand point i to facility j.

Moreover, under disaster environment, facility location often needs to deal with limited facility resources, tremendous demands, and high pressures, the combination of which can lead to uncertain and insufficient services for demand points. Thus the formulation of real-world emergency facility location problems, especially in large-scale operations, should take into consideration redundant facilities, service priorities, as well as location dynamics [15], to ensure an acceptable demand coverage.

We also divided this category into two classes: long-distance (vehicle) routing, and short-distance routing for rescuers and evacuees. Both classes are typically defined on a graph G
                        =(V, E), where V is the vertex set and E is the edge set, and the problems are to search for one or a set of routes (paths in the graph) that optimize one or more objective functions whilst satisfying all given constraints.

Vehicle routing problems (VRP) are a class of fundamental NP-hard problems which have been widely studied in the literature [18]. VRP in emergency logistics are characterized as scheduling limited vehicles to accomplish delivery tasks in rigidly limited times and under harsh environment conditions. Due to the large number and various types of supplies to be delivered, emergency VRP typically involves multiple depot, trips, and heterogeneous vehicles, and thus much more difficult than VRP and their variants in common supply chains.

Short-distance routing mainly concerns with planning effective evacuation or search-and-rescue paths, which are vital for saving lives and reduce losses in sudden events. In contrast to ordinary path planning problems which are to find a shortest or k-shortest paths in a weighted graph, emergency evacuation/rescue path planning should take more complex properties, such as obstacle avoidance, path following, and congestion control, into consideration. And in most cases, response speed is more important than the optimality of the plans.

Emergency roadway repair is to efficiently schedule limited repair resources to rehabilitate the roadway network, sufficient to carry out other relief operations. Ordinary shop job scheduling models and solution methods [19] generally do not apply, because they fail to capture time dependencies among repair operations, e.g., many damaged points are unreachable unless some other damaged points have been repaired. By incorporating time variables, Yan and Shih [20] developed a time-space network that models the roadway repair problem as an integer network flow problem with side constraints. However, a repair schedule with the minimum length of time is not always the most efficient in supporting subsequent relief operations [21], and more comprehensive criteria are required for properly evaluating solutions to the complex problem.

As mentioned, due to the rising complexity and stringent response time requirements of today's relief operational problems, conventional exact solution methods are generally not applicable. In comparison, EAs have advantages in high efficiency in exploring extra-large solution spaces, and inherent ability to handle uncertainty and randomness, robustness and insensitivity to noises, and scalability to high dimensions, and thus are more much suitable for solving these emergency problems.

In particular, emergency relief operational problems often involve multiple objectives, such as minimum operational time, maximum rescue effectiveness, minimum operational risk, etc., which can conflict with one another. For such multiobjective optimization (MOO) problems, it is preferable to simultaneously optimize all the objectives by evolving a set of solutions to the so-called Pareto front to provide a comprehensive decision support [22,23]. Multiobjective EAs (MOEAs) are favorable for this purpose, because they concurrently evolve a population of possible solutions and thus enable to find several members of the Pareto optimal set in a single run of the algorithm, instead of having to perform a series of separate runs as in the case of traditional optimization methods [24].

In this section, we describe previous studies in the literature on evolutionary optimization methods for emergency relief operational problems. Particularly, on each method, we identify whether it has the following characteristics:
                        
                           •
                           Unc/Rand – The method deals with problems with uncertainty and randomness.

MOO – The method deals with MOO problems.

PBO – The method employs a Pareto-based optimization procedure for solving MOO problems, instead of transforming multiple objectives into a single objective.

M-Pop – The method uses multiple populations to cooperatively solve the problems, which extends the basic single-population based EAs to co-evolutionary methods [25].

Also, for the convenience of readers, Appendix (Table 9
                     ) classifies the methods according to the five categories described in Section 2.

GAs are the most well-known members of EAs which simulate the Darwinian principle of natural selection and the survival of the fittest in optimization. Typically, a GA works with a fixed-size population, uses genetic operations including crossover and mutation to evolve the solutions, and selects the most appropriate offspring to pass on to next generations. Table 1
                         summarizes the characteristics of GA-based approaches for emergency operational problems in the literature.

An early work of Tuson et al. [26] developed a prototype system of emergency resource distribution planning on a 386-class PC. The basic problem of the system considers that there are n sites, each of which has a minimum demands of m resources, and shortages and surpluses of each source occur at different sites. The aim is to maximize the number of resource target mets whilst minimizing the number of shipments. The system employs several heuristic methods, mainly based on GA and its variants. A solution is encoded as the order of sites by which their shortages are to be tentatively supplied, and the crossover operator used is ‘modified PMX’ [53] which has been found to give good results on many permutation-encoded problems. But the experiments indicated that the GAs perform less well than the stochastic hill-climbers with the iteration.

Feng and Wen [27] used bi-level programming to construct three models for traffic control in disaster raided area. The basic model is to maximize traffic volume, the second model takes both the needs of rescue and non-rescue vehicles into consideration, and the last model further integrates the combined distribution/assignment model to meet the lower level objectives. A GA with redefined crossover and mutation operators is applied to seek the approximate optimal solution to the problem.

Na and Zhi [28] constructed an emergency relief goods distribution model which considers multiple transportation modes. Given different weights to the different modes, the objective of the model is to minimize the total weighted transport time. They adopted a GA to solve the problem, where natural number coding, tournament selection and single-point crossover are used, and a penalty function is included in the fitness of individuals for handling problem constraints.

Nolz et al. [29] modeled a disaster relief operation planning problem with two objectives including the maximal covering location and minimum tour length, and they developed a hybrid method based on NSGA-II [54] with variable neighborhood search and path relinking. Test on real world data from Ecuador demonstrated the effectiveness of the proposed approach.

Yang et al. [30] investigated a railway freight transportation planning problem under the mixed uncertain environment of fuzziness and randomness. Based on the chance measure and critical values of random fuzzy variables [55], they constructed three chance-constrained programming models of the problem, and proposed a hybrid algorithm including potential path searching, simulation, and GA, for solving the models to get an optimal solution with the least total relevant cost. Numerical examples showed that the algorithm is steady and robust for not very large scale problems.

Berkoune et al. [31] formulated a practical emergency transportation problem with not only multi-source and multi-target, but also multiple product types and vehicle types. To solve the complicated problem, they developed a GA where an individual is represented with genes composed of delivery points and products. The algorithm employs the set enumeration heuristic to initialize a population of solutions, and uses three fast improvement procedures to evolve the solution, replacing some worst solutions with new ones at each generation for diversification. Computational experiments show that the method can produce near optimal solutions in relatively short computation times and is fast enough to be used interactively in disaster response.

For optimizing the location of catastrophic rescue centers, Wang and Zhang [32] presented a model taking account of the probability of catastrophic occurrence, catastrophic diffusion function and rescue function, and developed a GA using binary encoding and embedding a greedy heuristic for fitness calculation. Experiments on examples arising practice show that the algorithm provides satisfactory results.

Kongsomsaksakul et al. [33] studied the optimal shelter locations for flood evacuation planning. They formulated the problem using a bi-level programming model, with the upper level for location and the lower level for traveler behavior. They developed a GA that uses genetic operations to evolve a population of complete solutions, and employs a double-stage algorithm to evaluate the fitness value of each chromosome.

Considering the facility locations of medical supplies, Jia et al. [34] proposed a maximal covering problem model, where the demand uncertainty and medical supply insufficiency are addressed by providing each demand point with services from a multiple quantity of facilities that are located at different quality levels (distances). Three heuristics including a GA are developed for the location problem, and the experiments show that the GA is appropriate for small problems but produce less-quality solutions on large problems (mainly because of premature convergence).

Han and Zhang [35] studied an extended emergency facility location problem which is modeled as an IP problem, and proposed a GA where each chromosome is constituted by the serial number of each target's emergency facility, and population diversity is maintained by using a changeable mutation probability. Experiments show that the GA solve the problem much more efficiently than other simple heuristics.

Chai et al. [36] studied an highway traffic emergency facility location problem, and proposed a heuristic GA which uses an n-dimensional 0–1 integer vector to present chromosomes, and employs a heuristic operator for improving unreliable chromosomes by (1) remedying the chromosomes that do not cover all demands and (2) eliminating the redundancy of chromosomes that cover the location set with redundancy. The method has been successfully applied to problems from the highway network of Nanjing, China.

In order to determine the optimal number and locations of fire stations at an international airport, Tzeng and Chen [37] proposed a fuzzy multiobjective model, the objectives of which include minimizing the total setup cost and minimizing the longest distance from the fire stations to any incident point. The objectives are converted to a single unified ‘min-max’ goal, and a GA is employed for effectively solve the problem. Yang et al. [38] extended the model such that different risk categories and obstacles within a given region are considered in the objectives and constraints, and adapted the GA by embedding the constraints into the fitness function.

For path optimization of single vehicle in emergency supplies transportation, Ma et al. [39] developed a hierarchical GA method: Local optimization is achieved by Bottom GA in subnetwork, global optimization is achieved by top GA in the whole network, and the contradiction of the two levels is solved by maintaining a balance between GA random search and narrow search.

Considering a much more complex model with multi-items, multi-vehicles, multi-periods, soft time windows, and a split delivery strategy, Lin et al. [40] formulated a multi-objective integer programming model and developed two heuristic approaches: The first is based on GA, while the second approach further decomposes the original problem. Computational study shows that the GA can provide high-quality solutions under complex conditions.

Zhang et al. [41] presented a multi-objective split delivery VRP (SDVRP) in multi-period emergency logistics, the aim of which is to minimize the unmet demand, total delivery time, and unbalanced supply among demanders. An aggregated objective is defines to compromise the three objectives, and a modified GA is proposed for solve the SDVR. In addition, a clustering method is embedded for removing infeasible or bad chromosomes so as to promote the population quality.

Paying attention to reliable route choice of humanitarian response planning for disaster response, Hamedi et al. [42] formulated the routing and scheduling of supply transportation as a linear integer programming (LIP) model, and proposed a GA-based heuristic method for optimizing the source-target pair ordering and ranking, where a time-dependant shortest path approach is embedded for chromosome evaluation. The model and heuristic are flexible in accommodating multiple commodity and regulation parameters, i.e., each truck can have its own risk time window or parameter sets.

Chung et al. [43] presented a multiobjective dynamic length GA to search vehicle routes to deliver the supplies. In the algorithm, a chromosome be divided into several sections so that the number of vehicles can be dynamically adjusted, and a domination-based ranking is used for schedule evaluation and tournament selection.

Liu et al. [44] used a bi-level optimization model for optimal evacuation planning: the high level tries to maximize the throughput in the target evacuation clearance time, whereas the low level is to minimize total clearance time. They adopted a GA to solve the problem, and the result demonstrates better evacuation time in comparison to standard design plan.

Song et al. [45] studied the transit bus operations for emergency evacuation, which is formulated as a location-routing problem with uncertain demands. They designed a new multi-graph street network considering prohibited turns and intersection delays, and proposed a hybrid intelligent algorithm including GA, artificial neural network (ANN) and hill climbing to solve the proposed stochastic programming model. The algorithm employs partially matched crossover, route mutation and depot mutation operations. The application of the method in transit evacuation planning is illustrated by a practical example of partial Gulfport, USA.

Saadatseresht et al. [46] proposed an MOO model for evacuation planning in three steps, namely safe area designation, optimum path finding, and optimal safe area selection. They investigated different algorithms for solving the spatial MOO problem, and found that NSGA-II can obtain the most proper patterns.

To help the injured reach the destination safely and quickly in a sudden event, Ma et al. [47] receptively presented a chance-constrained programming model and a chance-dependent constraint programming model for emergency evacuation routings under fuzzy environment, and proposed a hybrid intelligence algorithm to solve the models. The algorithm represents solutions by produces chromosomes based on priority-based coding, uses genetic operations to evolve the chromosomes, and integrating simulation technique to evaluate the chromosomes.

Sato and Ichii [48] conducted a study on the optimization of restoration process of damaged lifelines by earthquakes, and developed a simple GA and a hybrid GA to decide the priority of component to restore. Numerical examples show that the latter performs better than the former. They also applied a single populated GA to distribute restoration teams at damaged sites for optimizing the restoration process of lifeline networks.

Chen and Tzeng [49] established a fuzzy multi-objective planning model for post-quake road-network reconstruction. The model is formulated as a bi-level network design problem: The upper level is for work scheduling of many worktroops, and the lower level is for asymmetric traffic assignment. They converted the problem to maximize the satisfying degree (or achievement level) among constraints of conflicting objectives, and developed a modified GA to obtain a heuristic solution that approximately optimizes the objectives on the two levels.

Zhang and Lu [50] also proposed a multi-objective model of emergency roadway repair, the aim of which is to minimize the length of time as well as the risk of repair. They developed a GA which shows satisfying performance on the test problems. Nevertheless, how to appropriately and quantitatively assess the risk remains a difficult challenge.

Chang et al. [51] sought to generate transportation plan and vehicle routing schedules, in order to simultaneously minimize unsatisfied demand, total transportation time and total transportation cost. They proposed a multiobjective GA that initializes a population of solutions matching the relief resources between nearby sources and targets greedily, performs crossover operations based on partial map reverse exchanging with repair, and ranks the solutions based on the nondominated sorting of NSGA-II [54]. The proposed approach was applied to the case of the Chi–Chi earthquake in Taiwan to verify its performance.

Zheng and Ling [52] proposed a multiobjective fuzzy optimization problem of emergency transportation planning, which integrates task and resource allocation at the strategic level, and delivery scheduling and vehicle routing for individual sources. Given that many parameters are described as fuzzy variables, the β-dominance relation and three correlated fuzzy ranking criteria are employed for evaluating the solutions. They developed a cooperative optimization method that divides the integrated problem into a set of subproblems, uses multiobjective GA to evolve the sub-populations of solutions to the subproblems concurrently, and brings together the sub-solutions to construct complete solutions. Experiments show that the proposed method is robust and scalable, and outperforms other state-of-the-art MOEAs.

Evolution strategies (ES) [56] and evolutionary programming (EP) [57] are two main variants of GAs. Both ES and EP primarily use mutation to produce new solutions and use a selection scheme to test which solutions should survive to the next generation. The classical EP conducts pairwise comparison over the union of parents and offspring and the winners enter into the next generation. In comparison, the state-of-the-art ES is (μ
                        +
                        λ)-ES, which means the μ parents generate λ offspring, and the best μ solutions form the next generation [58]. Table 2
                         summarizes the characteristics of ES and EP based approaches for emergency problems in the literature.

Considered a multi-objective decision-making model for minimizing both the total losses caused by the fire and the commencement time of the fire activity, Xie and Zhang [59] proposed a dual-gene variation ES algorithm which takes a (μ
                        +
                        λ
                        +
                        κ) strategy. That is, at each generation, λ individuals are selected for variation from a population of μ solutions, and then the best individual of the parents carries out the Gauss variation and the worst individual carries out the Cauchy variation, and finally the best μ individuals among all the parents and children are chosen for the next generation. The proposed strategy is shown to be better than other typical strategies and single-gene variations for the emergency problem.

Barrachina et al. [60] considered four different versions of VRP, with the aim of minimizing the arrival time of the emergency services whereas the rest of vehicles are not significantly affected. They proposed several approaches including a basic ES and a density-based ES, and tested them on cases with different topologies and traffic densities. Results show that the density-based ES can achieve the best performance.

Wang and Jin [61] presented a multi-resource emergency resources scheduling problem, the aim of which is to minimize both the total time and the total cost of scheduling. Their solution method converts the two objectives into a single objective by aggregation, includes penalty to handle constraint violations, and adopts an improved EP algorithm to optimize the problem. Experiment shows the proposed method is superior to the basic EP, GA, and differential evolution (DE) [62] in convergence speed and solution accuracy.

PSO [6] is also a population-based global optimization method that uses a number of individual solutions, called particles, to explore a hyper dimensional search space. Each particle has a position vector and a velocity vector, which are adjusted at iterations by learning from a local best found by the particle itself and a current global best found by the whole swarm. Empirical studies have shown that PSO has a much higher efficiency in convergence to desirable optima than many other EAs on unimodal fitness landscapes [63]. Table 3
                         summarizes the characteristics of PSO-based approaches in the literature.

Uno et al. [64] proposed a multiobjective programming model of optimal emergency facility location with two objectives: one is to minimize the maximal distance from emergency facilities to hospitals, and the other is to maximize frequency of accidents that emergency facilities can respond quickly. They applied an interactive fuzzy satisfying method with PSO for searching an optimal solution for each of the min–max problems with the corresponding reference membership values.

Chai et al. [65] established a stochastic programming model of traffic emergency resources allocation on expressway, with stochastic variables in constraints and the objective to minimize the overall allocation cost. They developed a discrete PSO using a presentation of indirect particle position and performing stochastic simulation to check feasibility after updating particle positions. The model and the algorithm are used in the case of rescue resource allocation on expressway networks in Nanjing area.

Based on the analysis of practice of emergency management in China, Pang et al. [66] presented a distribution model of emergency materials in a three-layer relief transportation network, the aim of which is to minimize the system losses while meeting the constraints of emergency response time and fairness. For the formulated nonlinear IP, they proposed a modified PSO algorithm where different learning objects are used for different dimensions of the particles.

Bozorgi-Amiri et al. [67] studied a disaster relief logistics problem where demands, supplies, cost of procurement and transportation are considered as uncertain parameters. Therefore, the problem is modeled as an uncertain, nonlinear MIP. They used the robust optimization technique [72] to handle the uncertainty, i.e., describing uncertain parameters by the discrete scenarios or a continuous range. And they designed for the problem an improved PSO algorithm which combines discrete and continuous components in particles. Experimental results show that the proposed algorithm performs much better than the traditional branch-and-bound (B&B) algorithm.

Gan et al. [68] studied an emergency VRP with an exponential utility function designed as an indicator of operational efficiency. In their PSO algorithm, an n
                        +
                        k
                        −1 dimensions encoding scheme is applied to a problem with n disaster areas and k vehicles, and the objective value is adjusted by penalty function method so that the constrains are mirrored.

Tian et al. [69] considered a multiobjective emergency transportation model that integrates supplies distribution and vehicle routing. They designed a PSO algorithm where every particle is encoded as a discrete-continuous vector, and the discrete variables and continuous variables are respectively changed using their own velocity/location update formulas. The fitness function for evaluating particles is defined by combining multiple objectives. However, for large-size instances the algorithm is sometimes easy to be trapped by local optima.

Wang et al. [70] proposed a novel emergency evacuation model by using linear weight decreasing PSO to simulate individual's movement in evacuation. The model has been implemented in an emergency evacuation simulation system based on GIS, and well-performed some typical evacuation behaviors such as avoiding impact, queuing, congesting and herding, in comparison with social force model and cellular automata model.

Zheng et al. [71] proposed a multiobjective PSO for population classification in fire evacuation operations, with the aim to simultaneously optimizes the precision and recall measures of the classification rules. The algorithm enables every particle to potentially learn from a different exemplar at each dimension, and thus improve the search performance meanwhile maintaining the swarm diversity. The approach has been successfully applied to a real-world fire evacuation operation occurred in Zhejiang Province, China.

ACO [7] mimic the behavior of real ants living in colonies that communicate with each other using pheromones in order to find the shortest path to the food source. In comparison with other EAs, ACO is specially suitable for path planning and routing problems. However, it often requires more efforts to extend existing ACO solvers to path planning in the complex context [73]. Table 4
                         summarizes the characteristics of ACO-based approaches in the literature.

Lim et al. [74] considered routing of unmanned reconnaissance aerial vehicles on sparse graphs that mimic inaccessible zones such as those hit by forest fires, earthquakes, or other disasters. In addition to minimize the travel cost, the problem also concerns the location of low risk paths which can be represented based on a Voronoi diagram. They developed a hybrid ACO algorithm which incorporates with local search heuristics for uncovering feasible routes within tractable times. Empirical results demonstrate the excellent convergence property and robustness of the algorithm in uncovering low risk and Hamiltonian visitation pathes.

Yuan and Wang [75] also used ACO to solve two path selection problems in emergency logistics management. The first is a single-objective model to minimize total travel time along a path. The second is a multi-objective model to minimize the total travel time as well as the path complexity, and it further consider the chaos, panic and congestions in time of disaster. After converting multiple objectives into a single objective using weighted aggregation, the proposed ACO algorithm shows good performance on the test problems.

Considering an emergency logistics planning model which involves dispatching commodities to distribution centers and evacuating the wounded people to medical centers, Yi and Kumar [76] proposed an improved ACO algorithm that decomposes the problem into two phases, namely the vehicle route construction and the multi-commodity dispatch, and then iteratively tackles the sub-problems. The first phase builds stochastic paths under the guidance of pheromone trails, and the second phase employs a network-flow solver for the assignment between different types of vehicle flows and commodities. As indicated by the experiments, the ACO can achieve quality solution within a minute of runtime which is acceptable for the planner in real emergency situation.

Yan and Shih [77] developed a hybrid algorithm based on ant colony system coupled with a threshold accepting technique, for solving a time-space network flow problem which is to minimize the length of time needed for emergency repair of highway network Yan and Shih [20]. Since a solution to the problem includes several routes with a schedule and the arc connections in the roadway network change with the repair process, generation of feasible solutions (ants) the algorithm is significantly different from the that for solving TSP. Thus the algorithm sets a pheromone value on each arc according to a work time limit for every work team, uses the label correcting algorithm to find the spatial shortest path between every pair of points, and uses a path-and-time tracing method to compute the detailed routes and schedules. Test problems using different roadway network patterns and a case study based on data from the 1999 Chi–Chi earthquake in Taiwan demonstrate the robustness of the model and the algorithm.

Biogeography-based optimization (BBO) is a relatively new evolutionary algorithm inspired by the science of biogeography [78]. In the emergency response management system proposed by Iyer and Shanthi [79], BBO was employed to compare and cluster satellite images, in order to capture accident spots and evaluate their severities. Zheng et al. [80] developed a hybrid BBO for an emergency railway wagon scheduling problem that considers multiple source, target, and central stations. The algorithm includes DE mutation to enhance the exploration ability and takes some problem-specific mechanisms for fine-tuning the search. In [81] the authors proposed a multiobjective BBO algorithm for an emergency engineering rescue scheduling problem, which involves multiple rescue teams and tasks and different and perhaps fuzzy processing times. The algorithm employs the fast nondominated sorting method to evaluate the habitat's suitable index (HSI) of each solution, and defines new migration and mutation operators for solution evolution. The method exhibits competitive performance on the test problems from disaster relief operations occurred in China in recent years, and has been successfully applied to the 2013 Dixi Earthquake.

Zheng et al. [82] further developed an ecogeography-based optimization algorithm (EBO), which enhances BBO with a local topology, and uses the combination of a global migration and a local migration to perform effective exploration and exploitation in the solution space. The new algorithm has been applied to an emergency airlift problem in the 2013 Lushan Earthquake, China.


                        Table 5
                         summarizes the characteristics of BBO-based approaches in the literature.

Artificial immune system (AIS) is a model stimulating the adaptive immune system of a living creature to unravel the various complexities in optimization problems [83]. Hu [84] presented an immune multi-affinity network model of emergency logistics network and defined affinity measures to represent complex collaborative relationship among emergency logistics components. Based on the affinity network, the author studied a container multi-modal transport problem in emergency relief that is to maximize time efficiency meanwhile minimize the cost, and proposed a solution approach that combines two objectives into one by using weight aggregation and goal programming, and then uses traditional integer linear programming method to find the optimal path for emergency relief [85].

By extending the AIS algorithm for two-dimensional robot path planning [86], Liu and Zhang [87] developed an enhanced AIS algorithm for dual aircrafts path planning for forest fire rescue in three dimensional space. The problem considers aircrafts taking off at different sites and arrival at the destination at the same time. The algorithm defines an affinity function for evaluating the threats to different flight pathes, and employs three crossover operators for diverse the search. Results show that the method is capable of planning an efficient flight path in complex environments.

Zhang et al. [88] proposed a novel bio-inspired algorithm which is based on the mathematical model of amoeboid organism, to solve the optimal route selection problem in disaster extension. The problem considers both the travel time and the path length. The algorithm uses the kth shortest path program to find out the 1st to kth shortest path, uses the amoeboid algorithm to find the longest path to construct the dimensionless indexes, and finally obtains the optimal routes.


                        Table 6
                         summarizes the characteristics of AIS-based approaches in the literature.

Other heuristic search methods including simulated annealing (SA), tabu search (TS), harmony search (HS), variable neighborhood search (VNS), etc., are effective particularly in combinatorial optimization problems, and have also been reported in the literature in for disaster relief. SA [89] is a classical global search heuristic that simulates the physical annealing process in the field of optimization. Jahangiri et al. [90] presented a problem for optimizing signal timing and increases the outbound capacity of the network for emergency evacuation, and applied a SA algorithm for searching the optimal solution to the problem. Ma et al. [91] designed a genetic-SA algorithm for emergency service facility location problem. Experiments showed that algorithm can clearly gets the afflicted points that are covered by the selected facilities and thus improve searching efficiency.

TS uses an adaptive memory named tabu list to record the visited solutions and thus improves the local search to avoid local optima [92,93]. Xie and Turnquist [94] solved a lane-based evacuation network optimization problem that integrates lane reversal and crossing elimination strategies by using a relaxation and TS algorithm, and applied the approach to optimize a regional evacuation network for a nuclear power plant. Zheng et al. [95] designed a multiobjective TS for an emergency equipment maintenance scheduling problem, which aims to achieve a good balance between operational capability, reserved maintenance capability, as well as cost-effectiveness. The approach has demonstrated its effectiveness in several real-world operations.

HS is another memory-based algorithm inspired from a jazz music orchestra when playing and improvising in their attempt to achieve a progressively better harmony [96]. Landa-Torres et al. [97] proposed a multi-objective HS algorithm for the efficient distribution of 24-h emergency units. This paradigm is essentially a facility location problem that involves determining the optimum locations of 24-h emergency resources and the optimum assignment of patients to the resources through the existing medical care infrastructure. Their algorithm redefines the grouping encoding to reduce the dimension of the search space and employs the nondominated sorting for solution evaluation. Simulations in a real scenario based on geographic data of medical centers over the provinces of Guadalajara and Cuenca, Spain, demonstrate the robustness and applicability of the proposed approach.

Ozdamar and Yi [98] used greedy neighborhood search to develop a fast constructive heuristic, named Path-Builder, to support relief and evacuation operations. The method extends the neighborhood structure to suit the problem's special needs, and selects partial paths to append to vehicle routes in the operations, and thus exploits foreseeable opportunities within the vehicles’ limited neighborhood. Considering the allocation of scarce resources to repair a rural road network, Duque and Sörensen [99] used GRASP and VNS to maximize the accessibility of as many people as possible to the main cities or regional centers where the economic and social infrastructure is usually located. The efficiency of the approach is demonstrated by applying it to a large real-life motivated instance.


                        Table 7
                         summarizes the characteristics of typical heuristic methods other than the EAs mentioned in the previous sections.

Different optimization methods have different design principles and application areas. By exploiting the strengths of two or more solution methods, we have a chance to obtain a powerful approach that is much more competitive than any individual method. For solving a large-scale multi-depots VRP in relief work, Peng et al. [100] proposed a method combining GA with ACO and SA. Using a feedback loop, the best result of GA is used to improve ant systems and vice versa, in order to take advantage of both the fast convergence of GA and the preciseness of ACO, and the SA procedure is incorporated to avoid the local optimal. Zhang et al. [101] developed a hybrid AIS and ACO method for a route choice problem in emergency logistics. The main idea is to obtain pheromone distribution from AIS, and optimize the solutions by basic ACO. Simulation results show that the method has more effective timeliness than basic ACO.

Hu et al. [102] studied the allocation of earthquake emergency shelters which involves multiple sites and strict constraints, and developed a new discrete PSO which uses a feasibility rule to handle the constraints, and embeds a SA for potentially escaping from local optima. The approach has been applied to the allocation of earthquake emergency shelters in the Zhuguang Block of Guangzhou City, China.

Zhang and Fei [103] designed a novel approach that integrated ACO with another SI method, fish swarm algorithm [104], to solve a weak economy emergency logistics path optimization problem, the aim of which is to gain a win–win result of the lowest cost on condition of meeting all affected points time requirements. The hybrid method, namely the fish swarm ant colony algorithm, takes the advantage of the structure of the crowded degree factor in the ant colony for improving the model of fish swarm in the ability of global search. A similar research was conducted by Fei et al. [105], where an ACO based on SA is proposed for path optimization in emergency logistics.

For solving the problem of post-disaster infrastructure management, Kallioras et al. [106] proposed an integrated method, where an improved HS algorithm is used for emergency inspection scheduling, and an ACO algorithm is employed for solving the associated routing problem. Comparative results show the proposed method outperforms other algorithms including PSO, DE, the basic HS, and the pure random search.

Becker et al. [107] introduce a new multi-agent algorithm for search and rescue operations for exploration of unknown terrain. The hybrid method uses the flood algorithm to a fast exploration of the unknown terrain, and utilize the path optimizing features of ACO for constructing short paths from points of interest back to the base. The feasibility of the approach is demonstrated by agent-based simulations.

Considering emergency railway wagon scheduling between multiple source, center, and target stations, Zheng et al. [80] presented an integer programming model, the calculation of objectives and constraints of which further include a set of nonlinear subproblems. For efficiently tackling the problem, the authors proposed a hybrid BBO algorithm which uses a local ring topology to avoid premature convergence, employs the DE mutation to enhance exploration, and takes some problem-specific mechanisms to fine-tuning the search. Computational experiments and a real-world case study demonstrate the effectiveness and the scalability of the algorithm.

In this section we test the performance of some typical EAs on an emergency problem that integrates transportation planning depicted in Section 2.1 and vehicle routing in Section 2.3. The problem extends model (1) with heterogeneous commodities and vehicle capacity constraints as follows:


                     
                        
                           (4)
                           
                              
                                 
                                    
                                       min
                                    
                                    
                                       f
                                       =
                                       
                                          ∑
                                          
                                             i
                                             =
                                             1
                                          
                                          m
                                       
                                       
                                          ∑
                                          
                                             j
                                             =
                                             1
                                          
                                          n
                                       
                                       
                                          ∑
                                          
                                             k
                                             =
                                             1
                                          
                                          K
                                       
                                       
                                          w
                                          jk
                                       
                                       t
                                       (
                                       
                                          x
                                          ijk
                                       
                                       )
                                    
                                 
                                 
                                    
                                       
                                          s
                                          .
                                          t
                                          .
                                       
                                    
                                    
                                       
                                          ∑
                                          
                                             i
                                             =
                                             1
                                          
                                          m
                                       
                                       
                                          x
                                          ijk
                                       
                                       ≥
                                       
                                          b
                                          jk
                                       
                                       ,
                                       
                                       j
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       n
                                       ,
                                       k
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       K
                                    
                                 
                                 
                                    
                                    
                                       
                                          ∑
                                          
                                             j
                                             =
                                             1
                                          
                                          n
                                       
                                       
                                          x
                                          ij
                                       
                                       ≤
                                       
                                          a
                                          ik
                                       
                                       ,
                                       
                                       i
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       m
                                       ,
                                       
                                       
                                       k
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       K
                                    
                                 
                                 
                                    
                                    
                                       
                                          ∑
                                          
                                             j
                                             =
                                             1
                                          
                                          n
                                       
                                       
                                          ∑
                                          
                                             k
                                             =
                                             1
                                          
                                          K
                                       
                                       
                                          x
                                          ijk
                                       
                                       ≥
                                       
                                          c
                                          i
                                       
                                       ,
                                       
                                       i
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       m
                                    
                                 
                                 
                                    
                                    
                                       
                                          x
                                          ijk
                                       
                                       ≥
                                       0
                                       ,
                                       
                                       i
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       m
                                       ,
                                       j
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       n
                                       ,
                                       k
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       K
                                    
                                 
                              
                           
                        
                     where K is the number of types of relief commodities, b
                     
                        jk
                      and a
                     
                        ik
                      are the demand and supply of commodity k of target j and source i respectively, c
                     
                        i
                      is the maximum vehicle capacity available at source i, and 
                        
                           w
                           jk
                        
                      is the importance weight of demand item b
                     
                        jk
                     . x
                     
                        ijk
                     , the amount of commodity k from source i to target j, is the decision variable, while t(x
                     
                        ijk
                     ) is the corresponding arrival time to be calculated based on a vehicle routing subproblem for each source i. In real-world relief operations, the integrated problem and its variations occur much more frequently than the two individual subproblems [52,108].

The evaluation of each solution to the above main problem involves solving a VRP instance and thus is computationally expensive. An algorithm with high search ability can effectively reduce the number of function evaluations and improve the response speed. Here we comparatively run the following six state-of-the-art EAs on the main problem:
                        
                           •
                           The standard PSO 2007 [109] which equips the basic PSO with a local random topology and a few fine-tuning adjustments.

The self-adaptive DE (SaDE) [110] whose mutation schemes and control parameters are self-adapted by learning from previous generations.

The Blended BBO (B-BBO) [111] which improves the basic BBO with a blended migration operator.

The GA combined with three fast improvement procedures [31].

The GPSO [112] that combines PSO with a gradient-based local search for accurate local exploration.

The EBO [82] which enhances BBO with a local topology and the combination of a global migration and a local migration.

In most real-world relief operations, the average number of targets assigned for each source is relatively small, and thus we employ the branch-and-bound method [113] for solving VRP for all the EAs for a fair comparison. We also use the following constraint handling method in fitness comparison in all the EAs:
                        
                           •
                           A feasible solution is always fitter than an infeasible one.

For two feasible solutions, the one with smaller objective function value is fitter.

For two infeasible solutions, the one with lower constraint violation is fitter.

The algorithms are tested on a set of 10 problem instances from real-world relief operations occurred in China since 2008, the dimensions of which range from 45 to 1080. The experiments are conducted on a computer of Intel Core i5-2520M CPU and 8GB memory. For each instance, a maximum running time limit T
                     max (in minutes) is set for all the EAs according to the response time requirement in the emergency, and each algorithm is run 30 times with different random seeds. Table 8
                      summarizes the experimental results.

The first two instances are respectively derived from the operations of two moderate earthquakes (the 2010 mag 4.6 earthquake in Ali, Tibet autonomous region and the 2009 mag 4.7 earthquake in Baicheng, Jilin province). The relief demands are not strong and the delivery tasks are not heavy. As we can see, on instance #1 all the EAs always achieve the same result; on instance #2 four EAs except SaDE and B-BBO always achieve the same result on #2. Post-hoc analysis shows that the results are real optimal solutions. Note SaDE and B-BBO also frequently reach the optimum of #2. This shows that there are no significant performance differences among these popular EAs on the two small instances.

Instance #3 also represents a moderate earthquake relief operation (the 2011 mag 4.8 earthquake in Anqing, Anhui province), but the earthquake occurred in a more developed region, where the transportation network is much more complex, and thus it is quite difficult to find the optimal relief delivery plan. Within the limited running time, none of the algorithms reach the optimum; EBO achieves the best result among the six EAs, but it has no significant difference from GPSO, SaDE and SPO 2007.

Instance #4 represents the operation of the 2011 mag 5.8 earthquake in Yingjiang, Yunan province. Although the demand is not strong, the operation involves much more supply centers, which significantly enlarges the solution space and increases the number of local optima. On this instance, GPSO exhibits the best mean performance and EBO ranks second, and the two methods show significant performance improvement over the other four EAs, mainly because their exploration abilities help to jump out of the local optima. An interesting finding is that all the EAs have reached the optimal solution among the 30 runs, which shows the random seed also affects the algorithm performance to a certain degree on this instance.

Instance #5, which represents the operation of the 2010 mag 6.0 earthquake in Chuxiong, Yunan province, is similar to #4 in the huge number of local optima. Here EBO exhibits the best mean performance and GPSO ranks second, showing significant improvement over the other four. Except them, PSO 2007 can also occasionally reach the optimum among the 30 runs.

For instance #6 (the 2010 Zhouqu mudslides), the relief demand is strong and the solution space is large. However, the number of local optimal is not so huge, mainly because the demand points are located in a very small area. Within the limited time, GPSO and EBO achieve much better results than the other EAs. However, it is found that, when given enough running time (about 20–30min), all the EAs can reach very close to the same optimum, which is a unique phenomenon among the test instances.

The last four instances are all large-scale operations with quite large solution space and huge number of local optima. On #7 (the 2010 mag 7.3 earthquake in Yushu, Gansu province), GPSO and EBO exhibit significant performance improvement over the others. The mean result of EBO is the best, but it has no significant difference from GPSO. While on the more difficult #8 (the 2013 mag 6.6 earthquake in Dingxi, Gansu), EBO exhibits significant performance advantage over all the other EAs including GPSO.

Instance #9 represents the operation of the 2008 mag 8.0 earthquake in Wenchuan, Sichuang province – the most serious disaster in China in the recent decade. Among all the EAs, EBO also exhibits the best performance. Nevertheless, according to the decision-maker/experts of the relief operation, even the mean result of EBO is inefficient; in fact, only the best result of EBO (reached thrice among the 30 runs of the algorithm) is considered efficient.

Instance #10, the operation of the 2013 mag 7.0 earthquake in Ya’an, Sichuang province, is even more difficult than #9 because the disaster response system in China has been much improved since 2008, and thus the event involves much more relief demands and forces. On this instance, in general, none of EAs can reach a solution considered efficient according to post-hoc analysis. The best solution of EBO (reached twice among the 30 runs) is acceptable, but not so satisfactory to the decision-maker. In fact, we can obtain an efficient solution (with an objective value around 3.50E+10) after about 60 EBO runs, each with 1 hour running time.

In summary, EBO and GPSO generally perform better the other four EAs on the test instances, and their performance advantages increase with the problem size/difficulty. On relatively large-size instances #7–#10, the performance of B-BBO and GA becomes much inferior, because their global search abilities are not strong and thus have difficulty in exploring a very large solution space. PSO 2007 has a fast convergence speed, but its results are not very satisfactory on large-size instances due to the limited local exploitation ability. SaDE, an EA that is competitive on a wide range of benchmark problems, exhibits mediocre performance on our test instances, mainly because it requires feedback from previous generations to adjust the search mechanism, but the maximum running time is too limited to allow enough feedback. In comparison, EBO and GPSO balance exploration and exploitation much more effectively and thus exhibit much better performance. However, on extremely large instances such as #10, the required running time (or number of generations) for producing quality solutions is contradictory to the limited response time, which is an open problem faced by current research.

From the experiments on the typical problem, we can draw the following lessons:
                        
                           •
                           Generally the balance between exploration and exploitation is a key to achieve promising performance. Particularly, under emergency conditions, exploration ability (such as provide by PSO and DE) can be more important in producing acceptable solutions within limited response time, while the design of effective yet efficient exploitation mechanisms can be much more difficult.

Self-adaptive mechanisms, which are useful for a wide variety of problems, may be not effective for emergency problems, because the response time often limits the number of algorithm generations and thus cannot allow enough feedback to enhance performance.

For different types of optimization problems in disaster relief operations, there is no a magic bullet algorithm that can be uniformly better than any other algorithm (known as the “No Free Lunch Theorem” [114]). Thereby, it will be very helpful to obtain a priori knowledge about the problem in disaster preparedness, and utilize them in the design of problem-specific mechanisms to facility the search for quality solutions, especially for very large-scale operations.

From the survey of recent literature, we can clearly see that EAs represents highly competitive alternatives to conventional approaches for complex disaster relief operational problems where these latter methods are often unaffordable or require unacceptable assumptions. The main strengths of EAs for these critical applications can be summarized as follows:
                        
                           •
                           EAs are general metaheuristics that can be easily applied or adapted to a large variety of operational problems, in particular those new problems with little prior knowledge.

Empirically, EAs are capable of finding high quality solutions for most problems in consideration, although theoretically their convergence to global optima is only guaranteed in a weak probabilistic sense.

Population-based search mechanism and elaborately designed evolutionary operators advance solutions in a quite efficient manner, resulting in considerable reduction in computational resource and thus meeting stringent response time requirements for problem solving.

EAs are particularly effective in handing problems with various and often incompatible types of objectives and/or constraints, which are very common in emergency problems under stressful disaster conditions.

EAs perform well on problems with noise and uncertain parameters, and produce solutions robust and adaptable to changing environments.

The optimization processes of EAs are flexible, and can be tuned to a great extent to the problems at hand.

However, the application of EAs to disaster relief operational problems, in comparison with other common operational problems, still has many limitations and disadvantages. First, GAs are in the majority of EAs used for emergency operational problems; Many state-of-the-art methods (in particular those hybrid algorithms) which have been demonstrated to be much more efficient on benchmark problems, have been less explored.

Second, although MOEAs have been proved to be singularly successful in effectively addressing MOO problems, most research on MOO in emergency operations still simply combines multiple objectives into a single one, the results of which are much less comprehensive to support decision makers who have to resolve a divergence of interest.

Third, most computational experiments are conducted on test problems generated randomly. Only a few research uses real-world data for testing. More importantly, reports on successful applications of EAs to real-world relief operations are very scarce. Only in very recent years, several works on bio-inspired methods for transportation planning in the 2011 Yingjiang earthquake [52] and the 2013 Lushan earthquake [80] and repair scheduling in the 2013 Dixi earthquake [81] have been reported.

The future use of evolutionary computation in disaster relief operations is tied to both the increasing difficulty of practical problems and the advances of EAs themselves. In view of the current limitations in this area, the following aspects deserve attention in future development initiatives:
                        
                           •
                           
                              Emerging metaheuristic optimization methods. In recent years, a number of new EAs, including BBO, cuckoo search [115], paddy field algorithm [116], bat-inspired algorithm [117], fireworks algorithm [118], etc., have been proposed and demonstrated their effectiveness and efficiency on a variety of problems. There is plenty of room for these new metaheuristics as well as their hybridization with existing methods in the area of disaster relief.


                              Pareto-based multiobjective optimization and decision support. MOEA embodies an exciting opportunity to realize the full potential of the EA concept [119], and it is expected that studies on the optimization of disaster relief operations would benefit greatly from the exploitation of the power of MOEA techniques. On the other hand, multi-criteria decision making techniques including preference articulation, TOPSIS [120] and Pareto-front visualization, should be effectively utilized to help decision makers to understand the resulting Pareto-optimal solutions and choose the most appropriate one(s) for implementation.


                              Hyper-heuristics. Defined as “heuristics to choose heuristics”, hyper-heuristics [121] are high level-heuristics that perform search over a set of low-level heuristics, and can often achieve not only better solutions but also much higher flexibility and robustness on very difficult problems. Hyper-heuristics have been successfully applied to a wide range of planning and scheduling problems, and their potential in emergency optimization problems remains to be explored.


                              Test suites and real-world applications. It is of vital importance to determine to which degree the solutions of EAs would meet the stringent quality and safety requirements of relief operations. However, there are few benchmark problems publicly available for this purpose. It is desirable for the community to provide more standard test suites, test case generators, as well as evaluation tools for assessment and analysis of different EAs. More importantly, proposed solution approaches are required to be fully implemented and verified on chosen real-world problems to demonstrate their practicality and effectiveness.

@&#CONCLUSION@&#

The paper gives a survey of research advances in evolutionary optimization applied to disaster relief operations. The survey is not intended to be all embracing. The main purpose is to help readers have a general overview of the state-of-the-arts and easily refer suitable methods in practical applications, given that the works described here are indicative of the breadth of emergency operational problems where EAs have proved profitable.

As a clear finding of the survey, EAs have found a growing number of applications in disaster relief operations in recent years. However, in comparison with other typical areas in OR, the potential of evolutionary computing in emergency operational problems is far from being realized. The true challenge that we must overcome, and this is true of soft computing in general, is to convince sceptical decision makers that the new methods are capable of producing results worthy of their trust. To achieve this, the methods have to be actually applied to and demonstrate their performance on more real-world operations.

@&#ACKNOWLEDGEMENTS@&#

This work was supported by Project 61020106009, 61105073, 613250211 and 61473263 supported by Natural Science Foundation of China.

See Table 9.

@&#REFERENCES@&#

